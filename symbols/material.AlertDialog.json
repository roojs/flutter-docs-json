{
    "desc": "<p>A material design alert dialog.<\/p>\n<p>An alert dialog informs the user about situations that require\nacknowledgement. An alert dialog has an optional title and an optional list\nof actions. The title is displayed above the content and the actions are\ndisplayed below the content.<\/p>\n<p>If the content is too large to fit on the screen vertically, the dialog will\ndisplay the title and the actions and let the content overflow, which is\nrarely desired. Consider using a scrolling widget for <a href=\"material\/AlertDialog\/content.html\">content<\/a>, such as\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>, to avoid overflow. (However, be aware that since\n<a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a> tries to size itself using the intrinsic dimensions of its\nchildren, widgets such as <a href=\"widgets\/ListView-class.html\">ListView<\/a>, <a href=\"widgets\/GridView-class.html\">GridView<\/a>, and <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>,\nwhich use lazy viewports, will not work. If this is a problem, consider\nusing <a href=\"material\/Dialog-class.html\">Dialog<\/a> directly.)<\/p>\n<p>For dialogs that offer the user a choice between several options, consider\nusing a <a href=\"material\/SimpleDialog-class.html\">SimpleDialog<\/a>.<\/p>\n<p>Typically passed as the child widget to <a href=\"material\/showDialog.html\">showDialog<\/a>, which displays the\ndialog.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis snippet shows a method in a <a href=\"widgets\/State-class.html\">State<\/a> which, when called, displays a dialog box\nand returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the dialog is dismissed.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Future&lt;void&gt; _neverSatisfied() async {\n  return showDialog&lt;void&gt;(\n    context: context,\n    barrierDismissible: false, \/\/ user must tap button!\n    builder: (BuildContext context) {\n      return AlertDialog(\n        title: Text('Rewind and remember'),\n        content: SingleChildScrollView(\n          child: ListBody(\n            children: &lt;Widget&gt;[\n              Text('You will never be satisfied.'),\n              Text('You\\\u2019re like me. I\u2019m never satisfied.'),\n            ],\n          ),\n        ),\n        actions: &lt;Widget&gt;[\n          FlatButton(\n            child: Text('Regret'),\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ],\n      );\n    },\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/SimpleDialog-class.html\">SimpleDialog<\/a>, which handles the scrolling of the contents but has no <a href=\"material\/AlertDialog\/actions.html\">actions<\/a>.<\/li>\n<li>\n<a href=\"material\/Dialog-class.html\">Dialog<\/a>, on which <a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a> and <a href=\"material\/SimpleDialog-class.html\">SimpleDialog<\/a> are based.<\/li>\n<li>\n<a href=\"material\/showDialog.html\">showDialog<\/a>, which actually displays the dialog and returns its result.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/dialogs.html#alert-dialog\">material.io\/design\/components\/dialogs.html#alert-dialog<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/AlertDialog-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.AlertDialog",
    "shortname": "AlertDialog",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an alert dialog.<\/p>\n<p>Typically used in conjunction with <a href=\"material\/showDialog.html\">showDialog<\/a>.<\/p>\n<p>The <code>contentPadding<\/code> must not be null. The <code>titlePadding<\/code> defaults to\nnull, which implies a default that depends on the values of the other\nproperties. See the documentation of <code>titlePadding<\/code> for details.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlertDialog({\n  Key key,\n  this.title,\n  this.titlePadding,\n  this.titleTextStyle,\n  this.content,\n  this.contentPadding = const EdgeInsets.fromLTRB(24.0, 20.0, 24.0, 24.0),\n  this.contentTextStyle,\n  this.actions,\n  this.backgroundColor,\n  this.elevation,\n  this.semanticLabel,\n  this.shape,\n}) : assert(contentPadding != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/AlertDialog\/AlertDialog.html",
            "isDeprecated": false,
            "type": "",
            "name": "AlertDialog",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.AlertDialog",
            "params": [
                {
                    "name": "actions",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "content",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "contentPadding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "contentTextStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "elevation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "semanticLabel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "shape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "title",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "titlePadding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "titleTextStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/AlertDialog\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterialLocalizations(context));\n  final ThemeData theme = Theme.of(context);\n  final DialogTheme dialogTheme = DialogTheme.of(context);\n  final List&lt;Widget&gt; children = &lt;Widget&gt;[];\n  String label = semanticLabel;\n\n  if (title != null) {\n    children.add(Padding(\n      padding: titlePadding ?? EdgeInsets.fromLTRB(24.0, 24.0, 24.0, content == null ? 20.0 : 0.0),\n      child: DefaultTextStyle(\n        style: titleTextStyle ?? dialogTheme.titleTextStyle ?? theme.textTheme.title,\n        child: Semantics(\n          child: title,\n          namesRoute: true,\n          container: true,\n        ),\n      ),\n    ));\n  } else {\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.iOS:\n        label = semanticLabel;\n        break;\n      case TargetPlatform.android:\n      case TargetPlatform.fuchsia:\n        label = semanticLabel ?? MaterialLocalizations.of(context)?.alertDialogLabel;\n    }\n  }\n\n  if (content != null) {\n    children.add(Flexible(\n      child: Padding(\n        padding: contentPadding,\n        child: DefaultTextStyle(\n          style: contentTextStyle ?? dialogTheme.contentTextStyle ?? theme.textTheme.subhead,\n          child: content,\n        ),\n      ),\n    ));\n  }\n\n  if (actions != null) {\n    children.add(ButtonTheme.bar(\n      child: ButtonBar(\n        children: actions,\n      ),\n    ));\n  }\n\n  Widget dialogChild = IntrinsicWidth(\n    child: Column(\n      mainAxisSize: MainAxisSize.min,\n      crossAxisAlignment: CrossAxisAlignment.stretch,\n      children: children,\n    ),\n  );\n\n  if (label != null)\n    dialogChild = Semantics(\n      namesRoute: true,\n      label: label,\n      child: dialogChild,\n    );\n\n  return Dialog(\n    backgroundColor: backgroundColor,\n    elevation: elevation,\n    shape: shape,\n    child: dialogChild,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/AlertDialog\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.AlertDialog",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The (optional) set of actions that are displayed at the bottom of the\ndialog.<\/p>\n<p>Typically this is a list of <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> widgets.<\/p>\n<p>These widgets will be wrapped in a <a href=\"material\/ButtonBar-class.html\">ButtonBar<\/a>, which introduces 8 pixels\nof padding on each side.<\/p>\n<p>If the <a href=\"material\/AlertDialog\/title.html\">title<\/a> is not null but the <a href=\"material\/AlertDialog\/content.html\">content<\/a> <em>is<\/em> null, then an extra 20\npixels of padding is added above the <a href=\"material\/ButtonBar-class.html\">ButtonBar<\/a> to separate the <a href=\"material\/AlertDialog\/title.html\">title<\/a>\nfrom the <a href=\"material\/AlertDialog\/actions.html\">actions<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; actions\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/actions.html",
            "name": "actions",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.Widget>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>The background color of the surface of this <a href=\"material\/Dialog-class.html\">Dialog<\/a>.<\/p>\n<p>This sets the <a href=\"material\/Material\/color.html\">Material.color<\/a> on this <a href=\"material\/Dialog-class.html\">Dialog<\/a>'s <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>If <code>null<\/code>, <a href=\"material\/ThemeData\/cardColor.html\">ThemeData.cardColor<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>The (optional) content of the dialog is displayed in the center of the\ndialog in a lighter font.<\/p>\n<p>Typically this is a <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> that contains the dialog's\nmessage. As noted in the <a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a> documentation, it's important\nto use a <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> if there's any risk that the content\nwill not fit.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget content\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/content.html",
            "name": "content",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>Padding around the content.<\/p>\n<p>If there is no content, no padding will be provided. Otherwise, padding of\n20 pixels is provided above the content to separate the content from the\ntitle, and padding of 24 pixels is provided on the left, right, and bottom\nto separate the content from the other edges of the dialog.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry contentPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/contentPadding.html",
            "name": "contentPadding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>Style for the text in the <a href=\"material\/AlertDialog\/content.html\">content<\/a> of this <a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a>.<\/p>\n<p>If null, <a href=\"material\/AlertDialog\/contentTextStyle.html\">DialogTheme.contentTextStyle<\/a> is used, if that's null, defaults\nto <code>ThemeData.textTheme.subhead<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle contentTextStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/contentTextStyle.html",
            "name": "contentTextStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate of this <a href=\"material\/Dialog-class.html\">Dialog<\/a>.<\/p>\n<p>If null then <a href=\"material\/AlertDialog\/elevation.html\">DialogTheme.elevation<\/a> is used, and if that's null then the\ndialog's elevation is 24.0.\nThe z-coordinate at which to place this material relative to its parent.<\/p>\n<p>This controls the size of the shadow below the material.<\/p>\n<p>If this is non-zero, the contents of the material are clipped, because the\nwidget conceptually defines an independent printed piece of material.<\/p>\n<p>Defaults to 0. Changing this value will cause the shadow to animate over\n<code>animationDuration<\/code>.<\/p>\n<p>The value is non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/elevation.html",
            "name": "elevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>The semantic label of the dialog used by accessibility frameworks to\nannounce screen transitions when the dialog is opened and closed.<\/p>\n<p>If this label is not provided, a semantic label will be inferred from the\n<a href=\"material\/AlertDialog\/title.html\">title<\/a> if it is not null.  If there is no title, the label will be taken\nfrom <a href=\"material\/MaterialLocalizations\/alertDialogLabel.html\">MaterialLocalizations.alertDialogLabel<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>SemanticsConfiguration.isRouteName<\/code>, for a description of how this\nvalue is used.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticLabel\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/semanticLabel.html",
            "name": "semanticLabel",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>The shape of this dialog's border.<\/p>\n<p>Defines the dialog's <a href=\"material\/AlertDialog\/shape.html\">Material.shape<\/a>.<\/p>\n<p>The default shape is a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> with a radius of 2.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/shape.html",
            "name": "shape",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>The (optional) title of the dialog is displayed in a large font at the top\nof the dialog.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/title.html",
            "name": "title",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>Padding around the title.<\/p>\n<p>If there is no title, no padding will be provided. Otherwise, this padding\nis used.<\/p>\n<p>This property defaults to providing 24 pixels on the top, left, and right\nof the title. If the <a href=\"material\/AlertDialog\/content.html\">content<\/a> is not null, then no bottom padding is\nprovided (but see <a href=\"material\/AlertDialog\/contentPadding.html\">contentPadding<\/a>). If it <em>is<\/em> null, then an extra 20\npixels of bottom padding is added to separate the <a href=\"material\/AlertDialog\/title.html\">title<\/a> from the\n<a href=\"material\/AlertDialog\/actions.html\">actions<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry titlePadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/titlePadding.html",
            "name": "titlePadding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        },
        {
            "desc": "<p>Style for the text in the <a href=\"material\/AlertDialog\/title.html\">title<\/a> of this <a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a>.<\/p>\n<p>If null, <a href=\"material\/AlertDialog\/titleTextStyle.html\">DialogTheme.titleTextStyle<\/a> is used, if that's null, defaults to\n<a href=\"material\/AlertDialog\/title.html\">ThemeData.textTheme.title<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle titleTextStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/AlertDialog\/titleTextStyle.html",
            "name": "titleTextStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AlertDialog",
            "params": []
        }
    ]
}