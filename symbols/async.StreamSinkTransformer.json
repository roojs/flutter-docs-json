{
    "name": "async.StreamSinkTransformer",
    "extends": [],
    "memberOf": "async",
    "events": [],
    "methods": [
        {
            "name": "bind",
            "type": "dart:async.StreamSink",
            "desc": "<p>Transforms the events passed to <code>sink<\/code>.<\/p>\n<p>Creates a new sink. When events are passed to the returned sink, it will\ntransform them and pass the transformed versions to <code>sink<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamSinkTransformer",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:async.StreamSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/StreamSinkTransformer\/bind.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSink&lt;S&gt; bind(StreamSink&lt;T&gt; sink);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StreamSinkTransformer.fromHandlers",
            "type": "",
            "desc": "<p>Creates a <a href=\"package-async_async\/StreamSinkTransformer-class.html\">StreamSinkTransformer<\/a> that delegates events to the given\nhandlers.<\/p>\n<p>The handlers work exactly as they do for <a href=\"package-async_async\/StreamSinkTransformer\/StreamSinkTransformer.fromHandlers.html\">StreamTransformer.fromHandlers<\/a>.\nThey're called for each incoming event, and any actions on the sink\nthey're passed are forwarded to the inner sink. If a handler is omitted,\nthe event is passed through unaltered.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamSinkTransformer",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "data",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "error",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stackTrace",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-async_async\/StreamSinkTransformer\/StreamSinkTransformer.fromHandlers.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamSinkTransformer.fromHandlers(\n    {void handleData(S data, EventSink&lt;T&gt; sink),\n    void handleError(Object error, StackTrace stackTrace, EventSink&lt;T&gt; sink),\n    void handleDone(EventSink&lt;T&gt; sink)}) {\n  return new HandlerTransformer&lt;S, T&gt;(handleData, handleError, handleDone);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StreamSinkTransformer.fromStreamTransformer",
            "type": "",
            "desc": "<p>Creates a <a href=\"package-async_async\/StreamSinkTransformer-class.html\">StreamSinkTransformer<\/a> that transforms events and errors\nusing <code>transformer<\/code>.<\/p>\n<p>This is equivalent to piping all events from the outer sink through a\nstream transformed by <code>transformer<\/code> and from there into the inner sink.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamSinkTransformer",
            "sig": "",
            "params": [
                {
                    "name": "transformer",
                    "type": "dart:async.StreamTransformer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-async_async\/StreamSinkTransformer\/StreamSinkTransformer.fromStreamTransformer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory StreamSinkTransformer.fromStreamTransformer(\n    StreamTransformer&lt;S, T&gt; transformer) = StreamTransformerWrapper&lt;S, T&gt;;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "typed",
            "type": "async.StreamSinkTransformer",
            "desc": "<p>Creates a wrapper that coerces the type of <code>transformer<\/code>.<\/p>\n<p>This soundly converts a <a href=\"package-async_async\/StreamSinkTransformer-class.html\">StreamSinkTransformer<\/a> to a\n<code>StreamSinkTransformer&lt;S, T&gt;<\/code>, regardless of its original generic type.\nThis means that calls to <a href=\"dart-async\/EventSink\/add.html\">StreamSink.add<\/a> on the returned sink may throw a\n<a href=\"dart-core\/CastError-class.html\">CastError<\/a> if the argument type doesn't match the reified type of the\nsink.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamSinkTransformer",
            "sig": "",
            "params": [
                {
                    "name": "transformer",
                    "type": "async.StreamSinkTransformer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/StreamSinkTransformer\/typed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static StreamSinkTransformer&lt;S, T&gt; typed&lt;S, T&gt;(\n        StreamSinkTransformer transformer) =&gt;\n    transformer is StreamSinkTransformer&lt;S, T&gt;\n        ? transformer\n        : new TypeSafeStreamSinkTransformer(transformer);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-async_async\/StreamSinkTransformer-class.html",
    "desc": "<p>A <a href=\"package-async_async\/StreamSinkTransformer-class.html\">StreamSinkTransformer<\/a> transforms the events being passed to a sink.<\/p>\n<p>This works on the same principle as a <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>. Each transformer\ndefines a <a href=\"package-async_async\/StreamSinkTransformer\/bind.html\">bind<\/a> method that takes in the original <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> and returns\nthe transformed version. However, where a <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> transforms\nevents after they leave the stream, this transforms them before they enter\nthe sink.<\/p>\n<p>Transformers must be able to have <code>bind<\/code> called used multiple times.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StreamSinkTransformer"
}