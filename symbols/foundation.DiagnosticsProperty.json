{
    "name": "foundation.DiagnosticsProperty",
    "extends": [
        "foundation.DiagnosticsNode",
        "dart:core.Object"
    ],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "DiagnosticsProperty",
            "type": "",
            "desc": "<p>Create a diagnostics property.<\/p>\n<p>The <code>showName<\/code>, <code>showSeparator<\/code>, <code>style<\/code>, <code>missingIfNull<\/code>, and <code>level<\/code>\narguments must not be null.<\/p>\n<p>The <code>level<\/code> argument is just a suggestion and can be overridden if\nsomething else about the property causes it to have a lower or higher\nlevel. For example, if the property value is null and <code>missingIfNull<\/code> is\ntrue, <code>level<\/code> is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifNull",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifEmpty",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showSeparator",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "missingIfNull",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "foundation.DiagnosticsTreeStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/DiagnosticsProperty\/DiagnosticsProperty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty(\n  String name,\n  T value, {\n  String description,\n  String ifNull,\n  this.ifEmpty,\n  bool showName = true,\n  bool showSeparator = true,\n  this.defaultValue = kNoDefaultValue,\n  this.tooltip,\n  this.missingIfNull = false,\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(showSeparator != null),\n     assert(style != null),\n     assert(level != null),\n     _description = description,\n     _valueComputed = true,\n     _value = value,\n     _computeValue = null,\n     ifNull = ifNull ?? (missingIfNull ? 'MISSING' : null),\n     _defaultLevel = level,\n     super(\n       name: name,\n       showName: showName,\n       showSeparator: showSeparator,\n       style: style,\n    );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getChildren",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "desc": "<p>Children of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/DiagnosticsProperty\/getProperties.html\">getProperties<\/a><\/li><\/ul>",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/DiagnosticsProperty\/getChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getChildren() =&gt; &lt;DiagnosticsNode&gt;[];<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "foundation.DiagnosticsNode"
            ]
        },
        {
            "name": "getProperties",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "desc": "<p>Properties of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>Properties and children are kept distinct even though they are both\n<a href=\"dart-core\/List-class.html\">List&lt;DiagnosticsNode&gt;<\/a> because they should be grouped differently.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/DiagnosticsProperty\/getProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getProperties() =&gt; &lt;DiagnosticsNode&gt;[];<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "foundation.DiagnosticsNode"
            ]
        },
        {
            "name": "DiagnosticsProperty.lazy",
            "type": "",
            "desc": "<p>Property with a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> that is computed only when needed.<\/p>\n<p>Use if computing the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> may throw an exception or is\nexpensive.<\/p>\n<p>The <code>showName<\/code>, <code>showSeparator<\/code>, <code>style<\/code>, <code>missingIfNull<\/code>, and <code>level<\/code>\narguments must not be null.<\/p>\n<p>The <code>level<\/code> argument is just a suggestion and can be overridden if\nif something else about the property causes it to have a lower or higher\nlevel. For example, if calling <code>computeValue<\/code> throws an exception, <code>level<\/code>\nwill always return <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "computeValue",
                    "type": "foundation.ComputePropertyValueCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifNull",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifEmpty",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showSeparator",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "missingIfNull",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "foundation.DiagnosticsTreeStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/DiagnosticsProperty\/DiagnosticsProperty.lazy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty.lazy(\n  String name,\n  ComputePropertyValueCallback&lt;T&gt; computeValue, {\n  String description,\n  String ifNull,\n  this.ifEmpty,\n  bool showName = true,\n  bool showSeparator = true,\n  this.defaultValue = kNoDefaultValue,\n  this.tooltip,\n  this.missingIfNull = false,\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(showSeparator != null),\n     assert(defaultValue == kNoDefaultValue || defaultValue is T),\n     assert(missingIfNull != null),\n     assert(style != null),\n     assert(level != null),\n     _description = description,\n     _valueComputed = false,\n     _value = null,\n     _computeValue = computeValue,\n     _defaultLevel = level,\n     ifNull = ifNull ?? (missingIfNull ? 'MISSING' : null),\n     super(\n       name: name,\n       showName: showName,\n       showSeparator: showSeparator,\n       style: style,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toDescription",
            "type": "dart:core.String",
            "desc": "<p>Returns a description with a short summary of the node itself not\nincluding children or properties.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent does not line break between properties, the\ndescription of a property should also be a single line if possible.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [
                {
                    "name": "parentConfiguration",
                    "type": "foundation.TextTreeConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/DiagnosticsProperty\/toDescription.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toDescription({ TextTreeConfiguration parentConfiguration }) {\n  if (_description != null)\n    return _addTooltip(_description);\n\n  if (exception != null)\n    return 'EXCEPTION (${exception.runtimeType})';\n\n  if (ifNull != null &amp;&amp; value == null)\n    return _addTooltip(ifNull);\n\n  String result = valueToString(parentConfiguration: parentConfiguration);\n  if (result.isEmpty &amp;&amp; ifEmpty != null)\n    result = ifEmpty;\n  return _addTooltip(result);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toJsonMap",
            "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
            "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/DiagnosticsProperty\/toJsonMap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (defaultValue != kNoDefaultValue)\n    json['defaultValue'] = defaultValue.toString();\n  if (ifEmpty != null)\n    json['ifEmpty'] = ifEmpty;\n  if (ifNull != null)\n    json['ifNull'] = ifNull;\n  if (tooltip != null)\n    json['tooltip'] = tooltip;\n  json['missingIfNull'] = missingIfNull;\n  if (exception != null)\n    json['exception'] = exception.toString();\n  json['propertyType'] = propertyType.toString();\n  json['valueToString'] = valueToString();\n  json['defaultLevel'] = describeEnum(_defaultLevel);\n  if (T is Diagnosticable)\n    json['isDiagnosticableValue'] = true;\n  return json;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Map",
                "dart:core.String",
                "dart:core.Object"
            ]
        },
        {
            "name": "valueToString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/DiagnosticsProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.DiagnosticsProperty",
            "sig": "",
            "params": [
                {
                    "name": "parentConfiguration",
                    "type": "foundation.TextTreeConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/DiagnosticsProperty\/valueToString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String valueToString({ TextTreeConfiguration parentConfiguration }) {\n  final T v = value;\n  \/\/ DiagnosticableTree values are shown using the shorter toStringShort()\n  \/\/ instead of the longer toString() because the toString() for a\n  \/\/ DiagnosticableTree value is likely too large to be useful.\n  return v is DiagnosticableTree ? v.toStringShort() : v.toString();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "defaultValue",
            "type": "dart:core.Object",
            "types": [],
            "desc": "<p>If the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> of the property equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a> the priority <a href=\"foundation\/DiagnosticsProperty\/level.html\">level<\/a>\nof the property is downgraded to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> as the property\nvalue is uninteresting.<\/p>\n<p><a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a> has type <code>T<\/code> or is <a href=\"foundation\/kNoDefaultValue-constant.html\">kNoDefaultValue<\/a>.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/defaultValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object defaultValue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "exception",
            "type": "dart:core.Object",
            "types": [],
            "desc": "<p>Exception thrown if accessing the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> threw an exception.<\/p>\n<p>Returns null if computing the property value did not throw an exception.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/exception.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Object get exception {\n  _maybeCacheValue();\n  return _exception;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "ifEmpty",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Description if the property description would otherwise be empty.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/ifEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifEmpty\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "ifNull",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Description if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/ifNull.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifNull\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "level",
            "type": "foundation.DiagnosticLevel",
            "types": [],
            "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>The property level defaults to the value specified by the <code>level<\/code>\nconstructor argument. The level is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> if\nan <a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> was thrown getting the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>. The level is\nraised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null and\nthe property is not allowed to be null due to <a href=\"foundation\/DiagnosticsProperty\/missingIfNull.html\">missingIfNull<\/a>. The\npriority level is lowered to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> if the property\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a>.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/level.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (_defaultLevel == DiagnosticLevel.hidden)\n    return _defaultLevel;\n\n  if (exception != null)\n    return DiagnosticLevel.error;\n\n  if (value == null &amp;&amp; missingIfNull)\n    return DiagnosticLevel.warning;\n\n  \/\/ Use a low level when the value matches the default value.\n  if (defaultValue != kNoDefaultValue &amp;&amp; value == defaultValue)\n    return DiagnosticLevel.fine;\n\n  return _defaultLevel;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "missingIfNull",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> of null causes the property to have <a href=\"foundation\/DiagnosticsProperty\/level.html\">level<\/a>\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> warning that the property is missing a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/missingIfNull.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool missingIfNull\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "propertyType",
            "type": "dart:core.Type",
            "types": [],
            "desc": "<p>The type of the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>.<\/p>\n<p>This is determined from the type argument <code>T<\/code> used to instantiate the\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> class. This means that the type is available even if\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null, but it also means that the <a href=\"foundation\/DiagnosticsProperty\/propertyType.html\">propertyType<\/a> is only as\naccurate as the type provided when invoking the constructor.<\/p>\n<p>Generally, this is only useful for diagnostic tools that should display\nnull values in a manner consistent with the property type. For example, a\ntool might display a null <a href=\"dart-ui\/Color-class.html\">Color<\/a> value as an empty rectangle instead of\nthe word \"null\".<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/propertyType.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Type get propertyType =&gt; T;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tooltip",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Optional tooltip typically describing the property.<\/p>\n<p>Example tooltip: 'physical pixels per logical pixel'<\/p>\n<p>If present, the tooltip is added in parenthesis after the raw value when\ngenerating the string description.<\/p>\n        ",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/tooltip.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "value",
            "type": "",
            "types": [],
            "desc": "<p>Returns the value of the property either from cache or by invoking a\n<a href=\"foundation\/ComputePropertyValueCallback.html\">ComputePropertyValueCallback<\/a>.<\/p>\n<p>If an exception is thrown invoking the <a href=\"foundation\/ComputePropertyValueCallback.html\">ComputePropertyValueCallback<\/a>,\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> returns null and the exception thrown can be found via the\n<a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> property.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticsProperty\/valueToString.html\">valueToString<\/a>, which converts the property value to a string.<\/li><\/ul>",
            "memberOf": "foundation.DiagnosticsProperty",
            "isConstant": false,
            "href": "foundation\/DiagnosticsProperty\/value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT get value {\n  _maybeCacheValue();\n  return _value;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "foundation.DoubleProperty",
        "foundation.EnumProperty",
        "foundation.FlagProperty",
        "foundation.IntProperty",
        "foundation.IterableProperty",
        "foundation.MessageProperty",
        "foundation.ObjectFlagProperty",
        "foundation.PercentProperty",
        "foundation.StringProperty",
        "painting.TransformProperty"
    ],
    "realImplementors": [
        "foundation.DoubleProperty",
        "foundation.EnumProperty",
        "foundation.FlagProperty",
        "foundation.IntProperty",
        "foundation.IterableProperty",
        "foundation.MessageProperty",
        "foundation.ObjectFlagProperty",
        "foundation.PercentProperty",
        "foundation.StringProperty",
        "painting.TransformProperty"
    ],
    "cn": [],
    "href": "foundation\/DiagnosticsProperty-class.html",
    "desc": "<p>Property with a <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> of type <code>T<\/code>.<\/p>\n<p>If the default <code>value.toString()<\/code> does not provide an adequate description\nof the value, specify <code>description<\/code> defining a custom description.<\/p>\n<p>The <a href=\"foundation\/DiagnosticsNode\/showSeparator.html\">showSeparator<\/a> property indicates whether a separator should be placed\nbetween the property <a href=\"foundation\/DiagnosticsNode\/name.html\">name<\/a> and its <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DiagnosticsProperty"
}