{
    "desc": "<p>An arbitrarily large integer.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/BigInt-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.BigInt",
    "shortname": "BigInt",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns the absolute value of this integer.<\/p>\n<p>For any integer <code>x<\/code>, the result is the same as <code>x &lt; 0 ? -x : x<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt abs();<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/abs.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "abs",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Compares this to <code>other<\/code>.<\/p>\n<p>Returns a negative number if <code>this<\/code> is less than <code>other<\/code>, zero if they are\nequal, and a positive number if <code>this<\/code> is greater than <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(BigInt other);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/compareTo.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "compareTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.BigInt"
                }
            ]
        },
        {
            "desc": "<p>Returns the greatest common divisor of this big integer and <code>other<\/code>.<\/p>\n<p>If either number is non-zero, the result is the numerically greatest\ninteger dividing both <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>The greatest common divisor is independent of the order,\nso <code>x.gcd(y)<\/code> is  always the same as <code>y.gcd(x)<\/code>.<\/p>\n<p>For any integer <code>x<\/code>, <code>x.gcd(x)<\/code> is <code>x.abs()<\/code>.<\/p>\n<p>If both <code>this<\/code> and <code>other<\/code> is zero, the result is also zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt gcd(BigInt other);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/gcd.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "gcd",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.BigInt"
                }
            ]
        },
        {
            "desc": "<p>Returns the modular multiplicative inverse of this big integer\nmodulo <code>modulus<\/code>.<\/p>\n<p>The <code>modulus<\/code> must be positive.<\/p>\n<p>It is an error if no modular inverse exists.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Returns 1\/this % modulus, with modulus &gt; 0.\nBigInt modInverse(BigInt modulus);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/modInverse.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "modInverse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "modulus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.BigInt"
                }
            ]
        },
        {
            "desc": "<p>Returns this integer to the power of <code>exponent<\/code> modulo <code>modulus<\/code>.<\/p>\n<p>The <code>exponent<\/code> must be non-negative and <code>modulus<\/code> must be\npositive.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt modPow(BigInt exponent, BigInt modulus);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/modPow.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "modPow",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "exponent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.BigInt"
                },
                {
                    "name": "modulus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.BigInt"
                }
            ]
        },
        {
            "desc": "<p>Parses <code>source<\/code> as a, possibly signed, integer literal and returns its\nvalue.<\/p>\n<p>The <code>source<\/code> must be a non-empty sequence of base-<code>radix<\/code> digits,\noptionally prefixed with a minus or plus sign ('-' or '+').<\/p>\n<p>The <code>radix<\/code> must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z' with\nvalues 10 through 35. Also accepts upper-case letters with the same\nvalues as the lower-case ones.<\/p>\n<p>If no <code>radix<\/code> is given then it defaults to 10. In this case, the <code>source<\/code>\ndigits may also start with <code>0x<\/code>, in which case the number is interpreted\nas a hexadecimal literal, which effectively means that the <code>0x<\/code> is ignored\nand the radix is instead set to 16.<\/p>\n<p>For any int <code>n<\/code> and radix <code>r<\/code>, it is guaranteed that\n<code>n == int.parse(n.toRadixString(r), radix: r)<\/code>.<\/p>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the <code>source<\/code> is not a valid integer literal,\noptionally prefixed by a sign.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt parse(String source, {int radix});<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/parse.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "parse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "radix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns <code>this<\/code> to the power of <code>exponent<\/code>.<\/p>\n<p>Returns <a href=\"dart-core\/BigInt\/one.html\">one<\/a> if the <code>exponent<\/code> equals 0.<\/p>\n<p>The <code>exponent<\/code> must otherwise be positive.<\/p>\n<p>The result is always equal to the mathematical result of this to the power\n<code>exponent<\/code>, only limited by the available memory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt pow(int exponent);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/pow.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "pow",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "exponent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the remainder of the truncating division of <code>this<\/code> by <code>other<\/code>.<\/p>\n<p>The result <code>r<\/code> of this operation satisfies:\n<code>this == (this ~\/ other) * other + r<\/code>.\nAs a consequence the remainder <code>r<\/code> has the same sign as the divider <code>this<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt remainder(BigInt other);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/remainder.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "remainder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.BigInt"
                }
            ]
        },
        {
            "desc": "<p>Returns this <a href=\"dart-core\/BigInt-class.html\">BigInt<\/a> as a <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>If the number is not representable as a <a href=\"dart-core\/double-class.html\">double<\/a>, an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double toDouble();<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/toDouble.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "toDouble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Returns this <a href=\"dart-core\/BigInt-class.html\">BigInt<\/a> as an <a href=\"dart-core\/int-class.html\">int<\/a>.<\/p>\n<p>If the number does not fit, clamps to the max (or min)\ninteger.<\/p>\n<p>Warning: the clamping behaves differently on dart2js, dev\ncompiler, and the VM, due to the differences in integer\nprecision.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toInt();<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/toInt.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "toInt",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Converts <a href=\"dart-core\/BigInt-class.html\">this<\/a> to a string representation in the given <code>radix<\/code>.<\/p>\n<p>In the string representation, lower-case letters are used for digits above\n'9', with 'a' being 10 an 'z' being 35.<\/p>\n<p>The <code>radix<\/code> argument must be an integer in the range 2 to 36.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toRadixString(int radix);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/toRadixString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toRadixString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "radix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the least significant <code>width<\/code> bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in <code>width<\/code> bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var big15 = new BigInt.from(15);\nvar big16 = new BigInt.from(16);\nvar big239 = new BigInt.from(239);\n                                     V--sign bit-V\nbig16.toSigned(5) == -big16   \/\/  00010000 -&gt; 11110000\nbig239.toSigned(5) == big15   \/\/  11101111 -&gt; 00001111\n                                     ^           ^\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit signed quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toSigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>127<\/code>, wrap to <code>-128<\/code> and count back up to\n<code>127<\/code>.<\/p>\n<p>If the input value fits in <code>width<\/code> bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of <code>x<\/code>\nis <code>x.bitLength + 1<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toSigned(x.bitLength + 1);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt toSigned(int width);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/toSigned.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "toSigned",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a String-representation of this integer.<\/p>\n<p>The returned string is parsable by <a href=\"dart-core\/BigInt\/parse.html\">parse<\/a>.\nFor any <code>BigInt<\/code> <code>i<\/code>, it is guaranteed that\n<code>i == BigInt.parse(i.toString())<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Returns the least significant <code>width<\/code> bits of this big integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>new BigInt.from(-1).toUnsigned(5) == 31   \/\/ 11111111  -&gt;  00011111\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toUnsigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>255<\/code> and then wrap around to <code>0<\/code>.<\/p>\n<p>If the input fits in <code>width<\/code> bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of <code>x<\/code> is\ngiven by <code>x.bitLength<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toUnsigned(x.bitLength);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt toUnsigned(int width);<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/toUnsigned.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "toUnsigned",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Parses <code>source<\/code> as a, possibly signed, integer literal and returns its\nvalue.<\/p>\n<p>As <a href=\"dart-core\/BigInt\/parse.html\">parse<\/a> except that this method returns <code>null<\/code> if the input is not\nvalid<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt tryParse(String source, {int radix});<\/code><\/pre>\n    ",
            "href": "dart-core\/BigInt\/tryParse.html",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "name": "tryParse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.BigInt",
            "params": [
                {
                    "name": "radix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the minimum number of bits required to store this big integer.<\/p>\n<p>The number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.<\/p>\n<p>To find the number of bits needed to store the value as a signed value,\nadd one, i.e. use <code>x.bitLength + 1<\/code>.<\/p>\n<pre class=\"language-dart\"><code>x.bitLength == (-x-1).bitLength\n\nnew BigInt.from(3).bitLength == 2;   \/\/ 00000011\nnew BigInt.from(2).bitLength == 2;   \/\/ 00000010\nnew BigInt.from(1).bitLength == 1;   \/\/ 00000001\nnew BigInt.from(0).bitLength == 0;   \/\/ 00000000\nnew BigInt.from(-1).bitLength == 0;  \/\/ 11111111\nnew BigInt.from(-2).bitLength == 1;  \/\/ 11111110\nnew BigInt.from(-3).bitLength == 2;  \/\/ 11111101\nnew BigInt.from(-4).bitLength == 2;  \/\/ 11111100\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get bitLength;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/bitLength.html",
            "name": "bitLength",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Whether this big integer is even.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEven;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/isEven.html",
            "name": "isEven",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Whether this number is negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNegative;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/isNegative.html",
            "name": "isNegative",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Whether this big integer is odd.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isOdd;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/isOdd.html",
            "name": "isOdd",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Whether this big integer can be represented as an <code>int<\/code> without losing\nprecision.<\/p>\n<p>Warning: this function may give a different result on\ndart2js, dev compiler, and the VM, due to the differences in\ninteger precision.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isValidInt;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/isValidInt.html",
            "name": "isValidInt",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt get one;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/one.html",
            "name": "one",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": "<p>Returns the sign of this big integer.<\/p>\n<p>Returns 0 for zero, -1 for values less than zero and\n+1 for values greater than zero.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get sign;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/sign.html",
            "name": "sign",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt get two;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/two.html",
            "name": "two",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "memberOf": "dart:core.BigInt",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt get zero;<\/code><\/pre>\n        ",
            "href": "dart-core\/BigInt\/zero.html",
            "name": "zero",
            "isDeprecated": false,
            "type": "dart:core.BigInt",
            "memberOf": "dart:core.BigInt",
            "params": []
        }
    ]
}