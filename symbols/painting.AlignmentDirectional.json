{
    "desc": "<p>An offset that's expressed as a fraction of a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, but whose horizontal\ncomponent is dependent on the writing direction.<\/p>\n<p>This can be used to indicate an offset from the left in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>\ntext and an offset from the right in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> text without having\nto be aware of the current text direction.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a variant that is defined in physical terms (i.e.\nwhose horizontal component does not depend on the text direction).<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/AlignmentDirectional-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.AlignmentDirectional",
    "shortname": "AlignmentDirectional",
    "extends": [
        "painting.AlignmentGeometry",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a directional alignment.<\/p>\n<p>The <code>start<\/code> and <code>y<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlignmentDirectional(this.start, this.y)\n  : assert(start != null),\n    assert(y != null);<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentDirectional\/AlignmentDirectional.html",
            "isDeprecated": false,
            "type": "",
            "name": "AlignmentDirectional",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.AlignmentDirectional",
            "params": [
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "y",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/Alignment-class.html\">Alignment<\/a> or two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/AlignmentDirectional\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentGeometry add(AlignmentGeometry other) {\n  if (other is AlignmentDirectional)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentDirectional\/add.html",
            "isDeprecated": false,
            "type": "painting.AlignmentGeometry",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentDirectional",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentGeometry"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>s.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/AlignmentDirectional\/center-constant.html\">AlignmentDirectional.center<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AlignmentDirectional lerp(AlignmentDirectional a, AlignmentDirectional b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return AlignmentDirectional(ui.lerpDouble(0.0, b.start, t), ui.lerpDouble(0.0, b.y, t));\n  if (b == null)\n    return AlignmentDirectional(ui.lerpDouble(a.start, 0.0, t), ui.lerpDouble(a.y, 0.0, t));\n  return AlignmentDirectional(ui.lerpDouble(a.start, b.start, t), ui.lerpDouble(a.y, b.y, t));\n}<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentDirectional\/lerp.html",
            "isDeprecated": false,
            "type": "painting.AlignmentDirectional",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentDirectional",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentDirectional"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentDirectional"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Convert this instance into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses literal\ncoordinates (the <code>x<\/code> coordinate being explicitly a distance from the\nleft).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment resolve(TextDirection direction) {\n  assert(direction != null);\n  switch (direction) {\n    case TextDirection.rtl:\n      return Alignment(-start, y);\n    case TextDirection.ltr:\n      return Alignment(start, y);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentDirectional\/resolve.html",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "name": "resolve",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentDirectional",
            "params": [
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; _stringify(start, y);<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentDirectional\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentDirectional",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The distance fraction in the horizontal direction.<\/p>\n<p>A value of -1.0 corresponds to the edge on the \"start\" side, which is the\nleft side in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> contexts and the right side in\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> contexts. A value of 1.0 corresponds to the opposite\nedge, the \"end\" side. Values are not limited to that range; values less\nthan -1.0 represent positions beyond the start edge, and values greater than\n1.0 represent positions beyond the end edge.<\/p>\n<p>This value is normalized into an <a href=\"painting\/Alignment\/x.html\">Alignment.x<\/a> value by the <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>\nmethod.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double start\n\n<\/code><\/pre>\n        ",
            "href": "painting\/AlignmentDirectional\/start.html",
            "name": "start",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "painting.AlignmentDirectional",
            "params": []
        },
        {
            "desc": "<p>The distance fraction in the vertical direction.<\/p>\n<p>A value of -1.0 corresponds to the topmost edge. A value of 1.0\ncorresponds to the bottommost edge. Values are not limited to that range;\nvalues less than -1.0 represent positions above the top, and values\ngreater than 1.0 represent positions below the bottom.<\/p>\n<p>This value is passed through to <a href=\"painting\/AlignmentDirectional\/y.html\">Alignment.y<\/a> unmodified by the\n<a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
            "href": "painting\/AlignmentDirectional\/y.html",
            "name": "y",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "painting.AlignmentDirectional",
            "params": []
        }
    ]
}