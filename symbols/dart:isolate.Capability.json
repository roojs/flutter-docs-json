{
    "desc": "<p>An unforgeable object that comes back as equal when passed through other\nisolates.<\/p>\n<p>Sending a capability object to another isolate, and getting it back,\nwill produce an object that is equal to the original.\nThere is no other way to create objects equal to a capability object.<\/p>\n<p>Capabilities can be used as access guards: A remote isolate can send\na request for an operation, but it is only allowed if the request contains\nthe correct capability object.<\/p>\n<p>This allows exposing the same interface to multiple clients,\nbut restricting some operations to only those clients\nthat have also been given the corresponding capability.<\/p>\n<p>Capabilities can be used inside a single isolate,\nbut they have no advantage over\njust using <code>new Object<\/code> to create a unique object,\nand it offers no real security against other code\nrunning in the same isolate.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-isolate\/Capability-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:isolate",
    "name": "dart:isolate.Capability",
    "shortname": "Capability",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a new unforgeable capability object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory Capability();<\/code><\/pre>\n    ",
            "href": "dart-isolate\/Capability\/Capability.html",
            "isDeprecated": false,
            "type": "",
            "name": "Capability",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:isolate.Capability",
            "params": []
        }
    ],
    "props": []
}