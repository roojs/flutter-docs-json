{
    "desc": "<p>The RawSecureServerSocket is a server socket, providing a stream of low-level\n<a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a>s.<\/p>\n<p>See <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> for more info.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/RawSecureServerSocket-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.RawSecureServerSocket",
    "shortname": "RawSecureServerSocket",
    "extends": [
        "dart:io.RawSecureSocket",
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns a future for a <a href=\"dart-io\/RawSecureServerSocket-class.html\">RawSecureServerSocket<\/a>. When the future\ncompletes the server socket is bound to the given <code>address<\/code> and\n<code>port<\/code> and has started listening on it.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawSecureServerSocket\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>Incoming client connections are promoted to secure connections,\nusing the server certificate and key set in <code>context<\/code>.<\/p>\n<p><code>address<\/code> must be given as a numeric address, not a host name.<\/p>\n<p>To request or require that clients authenticate by providing an SSL (TLS)\nclient certificate, set the optional parameters requestClientCertificate or\nrequireClientCertificate to true.  Require implies request, so one doesn't\nneed to specify both.  To check whether a client certificate was received,\ncheck SecureSocket.peerCertificate after connecting.  If no certificate\nwas received, the result will be null.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negotiation with\nclients.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/RawSecureSocket\/selectedProtocol.html\">RawSecureSocket.selectedProtocol<\/a>.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional\nRawSecureServerSocket objects can bind to the same combination of\n<code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.  If <code>shared<\/code> is <code>true<\/code> and more\n<code>RawSecureServerSocket<\/code>s from this isolate or other isolates are bound to\nthe port, then the incoming connections will be distributed among all the\nbound <code>RawSecureServerSocket<\/code>s. Connections can be distributed over\nmultiple isolates this way.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureServerSocket&gt; bind(\n    address, int port, SecurityContext context,\n    {int backlog: 0,\n    bool v6Only: false,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols,\n    bool shared: false}) {\n  return RawServerSocket\n      .bind(address, port, backlog: backlog, v6Only: v6Only, shared: shared)\n      .then((serverSocket) =&gt; new RawSecureServerSocket._(\n          serverSocket,\n          context,\n          requestClientCertificate,\n          requireClientCertificate,\n          supportedProtocols));\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureServerSocket\/bind.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawSecureServerSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": [
                {
                    "name": "address",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "backlog",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.SecurityContext"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "requestClientCertificate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "requireClientCertificate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "shared",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "supportedProtocols",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                },
                {
                    "name": "v6Only",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RawSecureServerSocket&gt; close() {\n  _closed = true;\n  return _socket.close().then((_) =&gt; this);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureServerSocket\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawSecureServerSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": []
        },
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;RawSecureSocket&gt; listen(void onData(RawSecureSocket s),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _controller.stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureServerSocket\/listen.html",
            "isDeprecated": "0",
            "type": "dart:async.StreamSubscription<dart:io.RawSecureSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onDone",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "s",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.RawSecureSocket"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address =&gt; _socket.address;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureServerSocket\/address.html",
            "isDeprecated": "0",
            "type": "dart:io.InternetAddress",
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": []
        },
        {
            "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port =&gt; _socket.port;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureServerSocket\/port.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool requestClientCertificate\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureServerSocket\/requestClientCertificate.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool requireClientCertificate\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureServerSocket\/requireClientCertificate.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;String&gt; supportedProtocols\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureServerSocket\/supportedProtocols.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.String>",
            "memberOf": "dart:io.RawSecureServerSocket",
            "params": []
        }
    ]
}