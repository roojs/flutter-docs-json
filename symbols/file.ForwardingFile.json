{
    "desc": "<p>A file that forwards all methods and properties to a delegate.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-file_file\/ForwardingFile-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "file",
    "name": "file.ForwardingFile",
    "shortname": "ForwardingFile",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "package-file_file\/ForwardingFile\/ForwardingFile.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Copy this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/File-class.html\">File<\/a> instance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; copy(String newPath) async =&gt; wrap(await delegate.copy(newPath));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/copy.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<file.File>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "newPath",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously copy this file. Returns a <a href=\"package-file_file\/File-class.html\">File<\/a>\ninstance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile copySync(String newPath) =&gt; wrap(delegate.copySync(newPath));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/copySync.html",
            "isDeprecated": "0",
            "type": "file.File",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "newPath",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Create the file. Returns a <code>Future&lt;File&gt;<\/code> that completes with\nthe file when it has been created.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created only if\nall directories in the path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created.<\/p>\n<p>Existing files are left untouched by <a href=\"package-file_file\/ForwardingFile\/create.html\">create<\/a>. Calling <a href=\"package-file_file\/ForwardingFile\/create.html\">create<\/a> on an\nexisting file might fail if there are restrictive permissions on\nthe file.<\/p>\n<p>Completes the future with a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; create({bool recursive: false}) async =&gt;\n    wrap(await delegate.create(recursive: recursive));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/create.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<file.File>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Synchronously create the file. Existing files are left untouched\nby <a href=\"package-file_file\/ForwardingFile\/createSync.html\">createSync<\/a>. Calling <a href=\"package-file_file\/ForwardingFile\/createSync.html\">createSync<\/a> on an existing file might fail\nif there are restrictive permissions on the file.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created\nonly if all directories in the path exist.\nIf <code>recursive<\/code> is true, all non-existing path components are created.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createSync({bool recursive: false}) =&gt;\n    delegate.createSync(recursive: recursive);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/createSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last accessed, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;DateTime&gt; lastAccessed() =&gt; delegate.lastAccessed();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/lastAccessed.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.DateTime>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns the date and time when the file was last accessed,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDateTime lastAccessedSync() =&gt; delegate.lastAccessedSync();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/lastAccessedSync.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last modified, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;DateTime&gt; lastModified() =&gt; delegate.lastModified();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/lastModified.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.DateTime>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns the date and time when the file was last modified,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDateTime lastModifiedSync() =&gt; delegate.lastModifiedSync();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/lastModifiedSync.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Get the length of the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the length in bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;int&gt; length() =&gt; delegate.length();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/length.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously get the length of the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint lengthSync() =&gt; delegate.lengthSync();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/lengthSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Open the file for random access operations. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with the opened\nrandom access file. <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using the\n<a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>Files can be opened in three modes:<\/p>\n<p><a href=\"dart-io\/FileMode\/read-constant.html\">FileMode.read<\/a>: open the file for reading.<\/p>\n<p><a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: open the file for both reading and writing and\ntruncate the file to length zero. If the file does not exist the\nfile is created.<\/p>\n<p><a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: same as <a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a> except that the file is\nnot truncated.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;RandomAccessFile&gt; open({\n  FileMode mode: FileMode.read,\n}) async =&gt;\n    delegate.open(mode: mode);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/open.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Create a new independent <a href=\"dart-async\/Stream-class.html\">Stream<\/a> for the contents of this file.<\/p>\n<p>If <code>start<\/code> is present, the file will be read from byte-offset <code>start<\/code>.\nOtherwise from the beginning (index 0).<\/p>\n<p>If <code>end<\/code> is present, only up to byte-index <code>end<\/code> will be read. Otherwise,\nuntil end of file.<\/p>\n<p>In order to make sure that system resources are freed, the stream\nmust be read to completion or the subscription on the stream must\nbe cancelled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;List&lt;int&gt;&gt; openRead([int start, int end]) =&gt;\n    delegate.openRead(start, end);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/openRead.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously open the file for random access operations. The\nresult is a <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> on which random access operations\ncan be performed. Opened <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using\nthe <a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>See <a href=\"package-file_file\/ForwardingFile\/open.html\">open<\/a> for information on the <code>mode<\/code> argument.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRandomAccessFile openSync({FileMode mode: FileMode.read}) =&gt;\n    delegate.openSync(mode: mode);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/openSync.html",
            "isDeprecated": "0",
            "type": "dart:io.RandomAccessFile",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Creates a new independent <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for the file. The\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> must be closed when no longer used, to free\nsystem resources.<\/p>\n<p>An <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for a file can be opened in two modes:<\/p>\n<ul>\n<li>\n<a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: truncates the file to length zero.<\/li>\n<li>\n<a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: sets the initial write position to the end\nof the file.<\/li>\n<\/ul>\n<p> When writing strings through the returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> the encoding\n specified using <code>encoding<\/code> will be used. The returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>\n has an <code>encoding<\/code> property which can be changed after the\n <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> has been created.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIOSink openWrite({\n  FileMode mode: FileMode.write,\n  Encoding encoding: utf8,\n}) =&gt;\n    delegate.openWrite(mode: mode, encoding: encoding);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/openWrite.html",
            "isDeprecated": "0",
            "type": "dart:io.IOSink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Read the entire file contents as a list of bytes. Returns a\n<code>Future&lt;List&lt;int&gt;&gt;<\/code> that completes with the list of bytes that\nis the contents of the file.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;List&lt;int&gt;&gt; readAsBytes() =&gt; delegate.readAsBytes();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/readAsBytes.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.List<dart:core.int>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously read the entire file contents as a list of bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;int&gt; readAsBytesSync() =&gt; delegate.readAsBytesSync();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/readAsBytesSync.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": []
        },
        {
            "desc": "<p>Read the entire file contents as lines of text using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;List&lt;String&gt;&gt;<\/code> that completes with the lines\nonce the file contents has been read.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;List&lt;String&gt;&gt; readAsLines({Encoding encoding: utf8}) =&gt;\n    delegate.readAsLines(encoding: encoding);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/readAsLines.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.List<dart:core.String>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Synchronously read the entire file contents as lines of text\nusing the given <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;String&gt; readAsLinesSync({Encoding encoding: utf8}) =&gt;\n    delegate.readAsLinesSync(encoding: encoding);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/readAsLinesSync.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.String>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Read the entire file contents as a string using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;String&gt;<\/code> that completes with the string once\nthe file contents has been read.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; readAsString({Encoding encoding: utf8}) =&gt;\n    delegate.readAsString(encoding: encoding);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/readAsString.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.String>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Synchronously read the entire file contents as a string using the\ngiven <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString readAsStringSync({Encoding encoding: utf8}) =&gt;\n    delegate.readAsStringSync(encoding: encoding);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/readAsStringSync.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                }
            ]
        },
        {
            "desc": "<p>Modifies the time the file was last accessed.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;dynamic&gt; setLastAccessed(DateTime time) =&gt;\n    delegate.setLastAccessed(time);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/setLastAccessed.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "time",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Synchronously modifies the time the file was last accessed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setLastAccessedSync(DateTime time) =&gt; delegate.setLastAccessedSync(time);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/setLastAccessedSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "time",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Modifies the time the file was last modified.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;dynamic&gt; setLastModified(DateTime time) =&gt;\n    delegate.setLastModified(time);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/setLastModified.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "time",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Synchronously modifies the time the file was last modified.<\/p>\n<p>If the attributes cannot be set, throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setLastModifiedSync(DateTime time) =&gt; delegate.setLastModifiedSync(time);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/setLastModifiedSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "time",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nForwardingFile wrap(io.File delegate) =&gt; wrapFile(delegate);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/wrap.html",
            "isDeprecated": "0",
            "type": "file.ForwardingFile",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "delegate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.File"
                }
            ]
        },
        {
            "desc": "<p>Write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it, and closes the file.\nReturns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object once\nthe entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsBytes.html\">writeAsBytes<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsBytes(\n  List&lt;int&gt; bytes, {\n  FileMode mode: FileMode.write,\n  bool flush: false,\n}) async =&gt;\n    wrap(await delegate.writeAsBytes(\n      bytes,\n      mode: mode,\n      flush: flush,\n    ));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/writeAsBytes.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<file.File>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "bytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "flush",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Synchronously write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it and closes the file.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsBytesSync.html\">writeAsBytesSync<\/a> creates the file for writing and truncates\nthe file if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid writeAsBytesSync(\n  List&lt;int&gt; bytes, {\n  FileMode mode: FileMode.write,\n  bool flush: false,\n}) =&gt;\n    delegate.writeAsBytesSync(bytes, mode: mode, flush: flush);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/writeAsBytesSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "bytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "flush",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile. Returns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object\nonce the entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsString.html\">writeAsString<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsString(\n  String contents, {\n  FileMode mode: FileMode.write,\n  Encoding encoding: utf8,\n  bool flush: false,\n}) async =&gt;\n    wrap(await delegate.writeAsString(\n      contents,\n      mode: mode,\n      encoding: encoding,\n      flush: flush,\n    ));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/writeAsString.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<file.File>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "contents",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "flush",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        },
        {
            "desc": "<p>Synchronously write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile.<\/p>\n<p>By default <a href=\"package-file_file\/ForwardingFile\/writeAsStringSync.html\">writeAsStringSync<\/a> creates the file for writing and\ntruncates the file if it already exists. In order to append the bytes\nto an existing file, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode\nparameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid writeAsStringSync(\n  String contents, {\n  FileMode mode: FileMode.write,\n  Encoding encoding: utf8,\n  bool flush: false,\n}) =&gt;\n    delegate.writeAsStringSync(\n      contents,\n      mode: mode,\n      encoding: encoding,\n      flush: flush,\n    );<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingFile\/writeAsStringSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingFile",
            "params": [
                {
                    "name": "contents",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "flush",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileMode"
                }
            ]
        }
    ],
    "props": []
}