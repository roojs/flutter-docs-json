{
    "desc": "<p>Describes the amount of space occupied by a <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>.<\/p>\n<p>A sliver can occupy space in several different ways, which is why this class\ncontains multiple values.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/SliverGeometry-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.SliverGeometry",
    "shortname": "SliverGeometry",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an object that describes the amount of space occupied by a sliver.<\/p>\n<p>If the <code>layoutExtent<\/code> argument is null, <code>layoutExtent<\/code> defaults to the\n<code>paintExtent<\/code>. If the <code>hitTestExtent<\/code> argument is null, <code>hitTestExtent<\/code>\ndefaults to the <code>paintExtent<\/code>. If <code>visible<\/code> is null, <code>visible<\/code> defaults to\nwhether <code>paintExtent<\/code> is greater than zero.<\/p>\n<p>The other arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SliverGeometry({\n  this.scrollExtent = 0.0,\n  this.paintExtent = 0.0,\n  this.paintOrigin = 0.0,\n  double layoutExtent,\n  this.maxPaintExtent = 0.0,\n  this.maxScrollObstructionExtent = 0.0,\n  double hitTestExtent,\n  bool visible,\n  this.hasVisualOverflow = false,\n  this.scrollOffsetCorrection,\n  double cacheExtent,\n}) : assert(scrollExtent != null),\n     assert(paintExtent != null),\n     assert(paintOrigin != null),\n     assert(maxPaintExtent != null),\n     assert(hasVisualOverflow != null),\n     assert(scrollOffsetCorrection != 0.0),\n     layoutExtent = layoutExtent ?? paintExtent,\n     hitTestExtent = hitTestExtent ?? paintExtent,\n     cacheExtent = cacheExtent ?? layoutExtent ?? paintExtent,\n     visible = visible ?? paintExtent &gt; 0.0;<\/code><\/pre>\n    ",
            "href": "rendering\/SliverGeometry\/SliverGeometry.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.SliverGeometry",
            "params": [
                {
                    "name": "cacheExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "hasVisualOverflow",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hitTestExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "layoutExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "maxPaintExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "maxScrollObstructionExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "paintExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "paintOrigin",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "scrollExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "scrollOffsetCorrection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "visible",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Asserts that this geometry is internally consistent.<\/p>\n<p>Does nothing if asserts are disabled. Always returns true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertIsValid({\n  InformationCollector informationCollector,\n}) {\n  assert(() {\n    void verify(bool check, String message) {\n      if (check)\n        return;\n      final StringBuffer information = StringBuffer();\n      if (informationCollector != null)\n        informationCollector(information);\n      throw FlutterError('$runtimeType is not valid: $message\\n$information');\n    }\n    verify(scrollExtent != null, 'The \"scrollExtent\" is null.');\n    verify(scrollExtent &gt;= 0.0, 'The \"scrollExtent\" is negative.');\n    verify(paintExtent != null, 'The \"paintExtent\" is null.');\n    verify(paintExtent &gt;= 0.0, 'The \"paintExtent\" is negative.');\n    verify(paintOrigin != null, 'The \"paintOrigin\" is null.');\n    verify(layoutExtent != null, 'The \"layoutExtent\" is null.');\n    verify(layoutExtent &gt;= 0.0, 'The \"layoutExtent\" is negative.');\n    verify(cacheExtent &gt;= 0.0, 'The \"cacheExtent\" is negative.');\n    if (layoutExtent &gt; paintExtent) {\n      verify(false,\n        'The \"layoutExtent\" exceeds the \"paintExtent\".\\n' +\n        _debugCompareFloats('paintExtent', paintExtent, 'layoutExtent', layoutExtent),\n      );\n    }\n    verify(maxPaintExtent != null, 'The \"maxPaintExtent\" is null.');\n    \/\/ If the paintExtent is slightly more than the maxPaintExtent, but the difference is still less\n    \/\/ than epsilon, we will not throw the assert below.\n    if (paintExtent - maxPaintExtent &gt; _epsilon) {\n      verify(false,\n        'The \"maxPaintExtent\" is less than the \"paintExtent\".\\n' +\n        _debugCompareFloats('maxPaintExtent', maxPaintExtent, 'paintExtent', paintExtent) +\n        'By definition, a sliver can\\'t paint more than the maximum that it can paint!',\n      );\n    }\n    verify(hitTestExtent != null, 'The \"hitTestExtent\" is null.');\n    verify(hitTestExtent &gt;= 0.0, 'The \"hitTestExtent\" is negative.');\n    verify(visible != null, 'The \"visible\" property is null.');\n    verify(hasVisualOverflow != null, 'The \"hasVisualOverflow\" is null.');\n    verify(scrollOffsetCorrection != 0.0, 'The \"scrollOffsetCorrection\" is zero.');\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/SliverGeometry\/debugAssertIsValid.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverGeometry",
            "params": [
                {
                    "name": "informationCollector",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.InformationCollector"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/SliverGeometry\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DoubleProperty('scrollExtent', scrollExtent));\n  if (paintExtent &gt; 0.0) {\n    properties.add(DoubleProperty('paintExtent', paintExtent, unit : visible ? null : ' but not painting'));\n  } else if (paintExtent == 0.0) {\n    if (visible) {\n      properties.add(DoubleProperty('paintExtent', paintExtent, unit: visible ? null : ' but visible'));\n    }\n    properties.add(FlagProperty('visible', value: visible, ifFalse: 'hidden'));\n  } else {\n    \/\/ Negative paintExtent!\n    properties.add(DoubleProperty('paintExtent', paintExtent, tooltip: '!'));\n  }\n  properties.add(DoubleProperty('paintOrigin', paintOrigin, defaultValue: 0.0));\n  properties.add(DoubleProperty('layoutExtent', layoutExtent, defaultValue: paintExtent));\n  properties.add(DoubleProperty('maxPaintExtent', maxPaintExtent));\n  properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('hasVisualOverflow', hasVisualOverflow, defaultValue: false));\n  properties.add(DoubleProperty('scrollOffsetCorrection', scrollOffsetCorrection, defaultValue: null));\n  properties.add(DoubleProperty('cacheExtent', cacheExtent, defaultValue: 0.0));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/SliverGeometry\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverGeometry",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "href": "rendering\/SliverGeometry\/toStringShort.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverGeometry",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>How many pixels the sliver has consumed in the\n<a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">SliverConstraints.remainingCacheExtent<\/a>.<\/p>\n<p>This value should be equal to or larger than the <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">layoutExtent<\/a> because\nthe sliver always consumes at least the <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">layoutExtent<\/a> from the\n<a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">SliverConstraints.remainingCacheExtent<\/a> and possibly more if it falls\ninto the cache area of the viewport.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/SliverGeometry\/cacheExtent.html\">RenderViewport.cacheExtent<\/a> for a description of a viewport's cache area.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double cacheExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/cacheExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>Whether this sliver has visual overflow.<\/p>\n<p>By default, this is false, which means the viewport does not need to clip\nits children. If any slivers have visual overflow, the viewport will apply\na clip to its children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool hasVisualOverflow\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/hasVisualOverflow.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The distance from where this sliver started painting to the bottom of\nwhere it should accept hits.<\/p>\n<p>This must be between zero and <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a>. It defaults to <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double hitTestExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/hitTestExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The distance from the first visible part of this sliver to the first\nvisible part of the next sliver, assuming the next sliver's\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a> is zero.<\/p>\n<p>This must be between zero and <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a>. It defaults to <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a>.<\/p>\n<p>This value is typically 0 when outside of the viewport and grows or\nshrinks from 0 or to 0 as the sliver is being scrolled into and out of the\nviewport unless then sliver wants to achieve a special effect and push\ndown the layout start position of subsequent slivers before the sliver is\neven scrolled into the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double layoutExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/layoutExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The (estimated) total paint extent that this sliver would be able to\nprovide if the <a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a> was infinite.<\/p>\n<p>This is used by viewports that implement shrink-wrapping.<\/p>\n<p>By definition, this cannot be less than <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double maxPaintExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/maxPaintExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The maximum extent by which this sliver can reduce the area in which\ncontent can scroll if the sliver were pinned at the edge.<\/p>\n<p>Slivers that never get pinned at the edge, should return zero.<\/p>\n<p>A pinned app bar is an example for a sliver that would use this setting:\nWhen the app bar is pinned to the top, the area in which content can\nactually scroll is reduced by the height of the app bar.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double maxScrollObstructionExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/maxScrollObstructionExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The amount of currently visible visual space that was taken by the sliver\nto render the subset of the sliver that covers all or part of the\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a> in the current viewport.<\/p>\n<p>This value does not affect how the next sliver is positioned. In other\nwords, if this value was 100 and <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">layoutExtent<\/a> was 0, typical slivers\nplaced after it would end up drawing in the same 100 pixel space while\npainting.<\/p>\n<p>This must be between zero and <a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a>.<\/p>\n<p>This value is typically 0 when outside of the viewport and grows or\nshrinks from 0 or to 0 as the sliver is being scrolled into and out of the\nviewport unless the sliver wants to achieve a special effect and paint\neven when scrolled away.<\/p>\n<p>This contributes to the calculation for the next sliver's\n<a href=\"rendering\/SliverConstraints\/overlap.html\">SliverConstraints.overlap<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double paintExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/paintExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The visual location of the first visible part of this sliver relative to\nits layout position.<\/p>\n<p>For example, if the sliver wishes to paint visually before its layout\nposition, the <a href=\"rendering\/SliverGeometry\/paintOrigin.html\">paintOrigin<\/a> is negative. The coordinate system this sliver\nuses for painting is relative to this <a href=\"rendering\/SliverGeometry\/paintOrigin.html\">paintOrigin<\/a>. In other words,\nwhen <a href=\"rendering\/RenderObject\/paint.html\">RenderSliver.paint<\/a> is called, the (0, 0) position of the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>\ngiven to it is at this <a href=\"rendering\/SliverGeometry\/paintOrigin.html\">paintOrigin<\/a>.<\/p>\n<p>The coordinate system used for the <a href=\"rendering\/SliverGeometry\/paintOrigin.html\">paintOrigin<\/a> itself is relative\nto the start of this sliver's layout position rather than relative to\nits current position on the viewport. In other words, in a typical\nscrolling scenario, <a href=\"rendering\/SliverGeometry\/paintOrigin.html\">paintOrigin<\/a> remains constant at 0.0 rather than\ntracking from 0.0 to <a href=\"rendering\/SliverConstraints\/viewportMainAxisExtent.html\">SliverConstraints.viewportMainAxisExtent<\/a> as the\nsliver scrolls past the viewport.<\/p>\n<p>This value does not affect the layout of subsequent slivers. The next\nsliver is still placed at <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">layoutExtent<\/a> after this sliver's layout\nposition. This value does affect where the <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a> extent is\nmeasured from when computing the <a href=\"rendering\/SliverConstraints\/overlap.html\">SliverConstraints.overlap<\/a> for the next\nsliver.<\/p>\n<p>Defaults to 0.0, which means slivers start painting at their layout\nposition by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double paintOrigin\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/paintOrigin.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>The (estimated) total scrollable extent that this sliver has content for.<\/p>\n<p>This is the amount of scrolling the user needs to do to get from the\nbeginning of this sliver to the end of this sliver.<\/p>\n<p>The value is used to calculate the <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a> of\nall slivers in the scrollable and thus should be provided whether the\nsliver is currently in the viewport or not.<\/p>\n<p>In a typical scrolling scenario, the <a href=\"rendering\/SliverGeometry\/scrollExtent.html\">scrollExtent<\/a> is constant for a\nsliver throughout the scrolling while <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a> and <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">layoutExtent<\/a>\nwill progress from <code>0<\/code> when offscreen to between <code>0<\/code> and <a href=\"rendering\/SliverGeometry\/scrollExtent.html\">scrollExtent<\/a>\nas the sliver scrolls partially into and out of the screen and is\nequal to <a href=\"rendering\/SliverGeometry\/scrollExtent.html\">scrollExtent<\/a> while the sliver is entirely on screen. However,\nthese relationships can be customized to achieve more special effects.<\/p>\n<p>This value must be accurate if the <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a> is less than the\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a> provided during layout.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/scrollExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>If this is non-zero after <a href=\"rendering\/RenderObject\/performLayout.html\">RenderSliver.performLayout<\/a> returns, the scroll\noffset will be adjusted by the parent and then the entire layout of the\nparent will be rerun.<\/p>\n<p>When the value is non-zero, the <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> does not need to compute\nthe rest of the values when constructing the <a href=\"rendering\/SliverGeometry-class.html\">SliverGeometry<\/a> or call\n<a href=\"rendering\/RenderObject\/layout.html\">RenderObject.layout<\/a> on its children since <a href=\"rendering\/RenderObject\/performLayout.html\">RenderSliver.performLayout<\/a>\nwill be called again on this sliver in the same frame after the\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a> correction has been applied, when the\nproper <a href=\"rendering\/SliverGeometry-class.html\">SliverGeometry<\/a> and layout of its children can be computed.<\/p>\n<p>If the parent is also a <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>, it must propagate this value\nin its own <a href=\"rendering\/RenderSliver\/geometry.html\">RenderSliver.geometry<\/a> property until a viewport which adjusts\nits offset based on this value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollOffsetCorrection\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/scrollOffsetCorrection.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        },
        {
            "desc": "<p>Whether this sliver should be painted.<\/p>\n<p>By default, this is true if <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a> is greater than zero, and\nfalse if <a href=\"rendering\/SliverGeometry\/paintExtent.html\">paintExtent<\/a> is zero.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool visible\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverGeometry\/visible.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.SliverGeometry",
            "params": []
        }
    ]
}