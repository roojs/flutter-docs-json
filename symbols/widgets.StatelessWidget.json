{
    "desc": "<p>A widget that does not require mutable state.<\/p>\n<p>A stateless widget is a widget that describes part of the user interface by\nbuilding a constellation of other widgets that describe the user interface\nmore concretely. The building process continues recursively until the\ndescription of the user interface is fully concrete (e.g., consists\nentirely of <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s, which describe concrete <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s).<\/p>\n<p>Stateless widget are useful when the part of the user interface you are\ndescribing does not depend on anything other than the configuration\ninformation in the object itself and the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> in which the widget\nis inflated. For compositions that can change dynamically, e.g. due to\nhaving an internal clock-driven state, or depending on some system state,\nconsider using <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>.<\/p>\n<h2 id=\"performance-considerations\">Performance considerations<\/h2>\n<p>The <a href=\"widgets\/StatelessWidget\/build.html\">build<\/a> method of a stateless widget is typically only called in three\nsituations: the first time the widget is inserted in the tree, when the\nwidget's parent changes its configuration, and when an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> it\ndepends on changes.<\/p>\n<p>If a widget's parent will regularly change the widget's configuration, or if\nit depends on inherited widgets that frequently change, then it is important\nto optimize the performance of the <a href=\"widgets\/StatelessWidget\/build.html\">build<\/a> method to maintain a fluid\nrendering performance.<\/p>\n<p>There are several techniques one can use to minimize the impact of\nrebuilding a stateless widget:<\/p>\n<ul>\n<li>\n<p>Minimize the number of nodes transitively created by the build method and\nany widgets it creates. For example, instead of an elaborate arrangement\nof <a href=\"widgets\/Row-class.html\">Row<\/a>s, <a href=\"widgets\/Column-class.html\">Column<\/a>s, <a href=\"widgets\/Padding-class.html\">Padding<\/a>s, and <a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a>es to position a single\nchild in a particularly fancy manner, consider using just an <a href=\"widgets\/Align-class.html\">Align<\/a> or a\n<a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a>. Instead of an intricate layering of multiple\n<a href=\"widgets\/Container-class.html\">Container<\/a>s and with <a href=\"painting\/Decoration-class.html\">Decoration<\/a>s to draw just the right graphical\neffect, consider a single <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> widget.<\/p>\n<\/li>\n<li>\n<p>Use <code>const<\/code> widgets where possible, and provide a <code>const<\/code> constructor for\nthe widget so that users of the widget can also do so.<\/p>\n<\/li>\n<li>\n<p>Consider refactoring the stateless widget into a stateful widget so that\nit can use some of the techniques described at <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, such as\ncaching common parts of subtrees and using <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>s when changing the\ntree structure.<\/p>\n<\/li>\n<li>\n<p>If the widget is likely to get rebuilt frequently due to the use of\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>s, consider refactoring the stateless widget into\nmultiple widgets, with the parts of the tree that change being pushed to\nthe leaves. For example instead of building a tree with four widgets, the\ninner-most widget depending on the <a href=\"material\/Theme-class.html\">Theme<\/a>, consider factoring out the\npart of the build function that builds the inner-most widget into its own\nwidget, so that only the inner-most widget needs to be rebuilt when the\ntheme changes.<\/p>\n<\/li>\n<\/ul>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following is a skeleton of a stateless widget subclass called <code>GreenFrog<\/code>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class GreenFrog extends StatelessWidget {\n  const GreenFrog({ Key key }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(color: const Color(0xFF2DBD3A));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nNormally widgets have more constructor arguments, each of which corresponds\nto a <code>final<\/code> property. The next example shows the more generic widget <code>Frog<\/code>\nwhich can be given a color and a child:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Frog extends StatelessWidget {\n  const Frog({\n    Key key,\n    this.color: const Color(0xFF2DBD3A),\n    this.child,\n  }) : super(key: key);\n\n  final Color color;\n\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(color: color, child: child);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>By convention, widget constructors only use named arguments. Named arguments\ncan be marked as required using <code>@required<\/code>. Also by convention, the first\nargument is <a href=\"widgets\/Widget\/key.html\">key<\/a>, and the last argument is <code>child<\/code>, <code>children<\/code>, or the\nequivalent.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> and <a href=\"widgets\/State-class.html\">State<\/a>, for widgets that can build differently\nseveral times over their lifetime.<\/li>\n<li>\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>, for widgets that introduce ambient state that can\nbe read by descendant widgets.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/StatelessWidget-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.StatelessWidget",
    "shortname": "StatelessWidget",
    "extends": [
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "cupertino.CupertinoActionSheet",
        "cupertino.CupertinoActionSheetAction",
        "cupertino.CupertinoAlertDialog",
        "cupertino.CupertinoDialog",
        "cupertino.CupertinoDialogAction",
        "cupertino.CupertinoFullscreenDialogTransition",
        "cupertino.CupertinoNavigationBarBackButton",
        "cupertino.CupertinoPageScaffold",
        "cupertino.CupertinoPageTransition",
        "cupertino.CupertinoPopupSurface",
        "cupertino.CupertinoTabBar",
        "material.AboutDialog",
        "material.AboutListTile",
        "material.ActionChip",
        "material.AlertDialog",
        "material.AnimatedIcon",
        "material.BackButton",
        "material.BackButtonIcon",
        "material.ButtonBar",
        "material.Card",
        "material.CheckboxListTile",
        "material.Chip",
        "material.ChoiceChip",
        "material.CircleAvatar",
        "material.CloseButton",
        "material.DataTable",
        "material.DayPicker",
        "material.Dialog",
        "material.Divider",
        "material.Drawer",
        "material.DrawerHeader",
        "material.DropdownMenuItem",
        "material.FilterChip",
        "material.FlatButton",
        "material.FloatingActionButton",
        "material.FlutterLogo",
        "material.GridTile",
        "material.GridTileBar",
        "material.IconButton",
        "material.InputChip",
        "material.ListTile",
        "material.MaterialButton",
        "material.OutlineButton",
        "material.RadioListTile",
        "material.RaisedButton",
        "material.SimpleDialog",
        "material.SimpleDialogOption",
        "material.SnackBar",
        "material.SwitchListTile",
        "material.Tab",
        "material.TabPageSelector",
        "material.TabPageSelectorIndicator",
        "material.Theme",
        "material.VerticalDivider",
        "widgets.Banner",
        "widgets.Builder",
        "widgets.CheckedModeBanner",
        "widgets.Container",
        "widgets.CustomScrollView",
        "widgets.GestureDetector",
        "widgets.GridPaper",
        "widgets.GridView",
        "widgets.Icon",
        "widgets.ImageIcon",
        "widgets.KeyedSubtree",
        "widgets.ListView",
        "widgets.ModalBarrier",
        "widgets.NavigationToolbar",
        "widgets.NotificationListener",
        "widgets.OrientationBuilder",
        "widgets.PageStorage",
        "widgets.Placeholder",
        "widgets.PositionedDirectional",
        "widgets.PreferredSize",
        "widgets.SafeArea",
        "widgets.SingleChildScrollView",
        "widgets.SliverPersistentHeader",
        "widgets.SliverSafeArea",
        "widgets.Spacer",
        "widgets.Text",
        "widgets.Title",
        "widgets.Visibility"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initializes <code>key<\/code> for subclasses.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StatelessWidget({ Key key }) : super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/StatelessWidget\/StatelessWidget.html",
            "isDeprecated": false,
            "type": "",
            "name": "StatelessWidget",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.StatelessWidget",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/StatelessWidget\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nWidget build(BuildContext context);<\/code><\/pre>\n    ",
            "href": "widgets\/StatelessWidget\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.StatelessWidget",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"widgets\/StatelessElement-class.html\">StatelessElement<\/a> to manage this widget's location in the tree.<\/p>\n<p>It is uncommon for subclasses to override this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStatelessElement createElement() =&gt; StatelessElement(this);<\/code><\/pre>\n    ",
            "href": "widgets\/StatelessWidget\/createElement.html",
            "isDeprecated": false,
            "type": "widgets.StatelessElement",
            "name": "createElement",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.StatelessWidget",
            "params": []
        }
    ],
    "props": []
}