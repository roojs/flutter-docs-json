{
    "desc": "<p>A set of twelve colors based on the\n<a href=\"https:\/\/material.io\/design\/color\/the-color-system.html\">Material spec<\/a>\nthat can be used to configure the color properties of most components.<\/p>\n<p>The <a href=\"material\/Theme-class.html\">Theme<\/a> has a color scheme, <a href=\"material\/ThemeData\/colorScheme.html\">ThemeData.colorScheme<\/a>, which is constructed\nwith <a href=\"material\/ColorScheme\/ColorScheme.fromSwatch.html\">ColorScheme.fromSwatch<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/ColorScheme-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.ColorScheme",
    "shortname": "ColorScheme",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a ColorScheme instance.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ColorScheme({\n  @required this.primary,\n  @required this.primaryVariant,\n  @required this.secondary,\n  @required this.secondaryVariant,\n  @required this.surface,\n  @required this.background,\n  @required this.error,\n  @required this.onPrimary,\n  @required this.onSecondary,\n  @required this.onSurface,\n  @required this.onBackground,\n  @required this.onError,\n  @required this.brightness,\n}) : assert(primary != null),\n     assert(primaryVariant != null),\n     assert(secondary != null),\n     assert(secondaryVariant != null),\n     assert(surface != null),\n     assert(background != null),\n     assert(error != null),\n     assert(onPrimary != null),\n     assert(onSecondary != null),\n     assert(onSurface != null),\n     assert(onBackground != null),\n     assert(onError != null),\n     assert(brightness != null);<\/code><\/pre>\n    ",
            "href": "material\/ColorScheme\/ColorScheme.html",
            "isDeprecated": false,
            "type": "",
            "name": "ColorScheme",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ColorScheme",
            "params": [
                {
                    "name": "background",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "brightness",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onBackground",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onPrimary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onSecondary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onSurface",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryVariant",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "secondary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "secondaryVariant",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "surface",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this color scheme with the given fields\nreplaced by the non-null parameter values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ColorScheme copyWith({\n  Color primary,\n  Color primaryVariant,\n  Color secondary,\n  Color secondaryVariant,\n  Color surface,\n  Color background,\n  Color error,\n  Color onPrimary,\n  Color onSecondary,\n  Color onSurface,\n  Color onBackground,\n  Color onError,\n  Brightness brightness,\n}) {\n  return ColorScheme(\n    primary: primary ?? this.primary,\n    primaryVariant: primaryVariant ?? this.primaryVariant,\n    secondary: secondary ?? this.secondary,\n    secondaryVariant: secondaryVariant ?? this.secondaryVariant,\n    surface: surface ?? this.surface,\n    background: background ?? this.background,\n    error: error ?? this.error,\n    onPrimary: onPrimary ?? this.onPrimary,\n    onSecondary: onSecondary ?? this.onSecondary,\n    onSurface: onSurface ?? this.onSurface,\n    onBackground: onBackground ?? this.onBackground,\n    onError: onError ?? this.onError,\n    brightness: brightness ?? this.brightness,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ColorScheme\/copyWith.html",
            "isDeprecated": false,
            "type": "material.ColorScheme",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ColorScheme",
            "params": [
                {
                    "name": "background",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "brightness",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onBackground",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onPrimary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onSecondary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onSurface",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryVariant",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "secondary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "secondaryVariant",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "surface",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/ColorScheme\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  const ColorScheme defaultScheme = ColorScheme.light();\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primary', primary, defaultValue: defaultScheme.primary));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primaryVariant', primaryVariant, defaultValue: defaultScheme.primaryVariant));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('secondary', secondary, defaultValue: defaultScheme.secondary));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('secondaryVariant', secondaryVariant, defaultValue: defaultScheme.secondaryVariant));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('surface', surface, defaultValue: defaultScheme.surface));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('background', background, defaultValue: defaultScheme.background));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('error', error, defaultValue: defaultScheme.error));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('onPrimary', onPrimary, defaultValue: defaultScheme.onPrimary));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('onSecondary', onSecondary, defaultValue: defaultScheme.onSecondary));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('onSurface', onSurface, defaultValue: defaultScheme.onSurface));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('onBackground', onBackground, defaultValue: defaultScheme.onBackground));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('onError', onError, defaultValue: defaultScheme.onError));\n  properties.add(DiagnosticsProperty&lt;Brightness&gt;('brightness', brightness, defaultValue: defaultScheme.brightness));\n}<\/code><\/pre>\n    ",
            "href": "material\/ColorScheme\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ColorScheme",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"material\/ColorScheme-class.html\">ColorScheme<\/a> objects.<\/p>\n<p>null<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ColorScheme lerp(ColorScheme a, ColorScheme b, double t) {\n  return ColorScheme(\n    primary: Color.lerp(a.primary, b.primary, t),\n    primaryVariant: Color.lerp(a.primaryVariant, b.primaryVariant, t),\n    secondary: Color.lerp(a.secondary, b.secondary, t),\n    secondaryVariant: Color.lerp(a.secondaryVariant, b.secondaryVariant, t),\n    surface: Color.lerp(a.surface, b.surface, t),\n    background: Color.lerp(a.background, b.background, t),\n    error: Color.lerp(a.error, b.error, t),\n    onPrimary: Color.lerp(a.onPrimary, b.onPrimary, t),\n    onSecondary: Color.lerp(a.onSecondary, b.onSecondary, t),\n    onSurface: Color.lerp(a.onSurface, b.onSurface, t),\n    onBackground: Color.lerp(a.onBackground, b.onBackground, t),\n    onError: Color.lerp(a.onError, b.onError, t),\n    brightness: t &lt; 0.5 ? a.brightness : b.brightness,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ColorScheme\/lerp.html",
            "isDeprecated": false,
            "type": "material.ColorScheme",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ColorScheme",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>A color that typically appears behind scrollable content.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color background\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/background.html",
            "name": "background",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>The overall brightness of this color scheme.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness brightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/brightness.html",
            "name": "brightness",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>The color to use for input validation errors, e.g. for\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color error\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/error.html",
            "name": "error",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/ColorScheme\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/ColorScheme\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/ColorScheme\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/ColorScheme\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/ColorScheme\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/ColorScheme\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    primary,\n    primaryVariant,\n    secondary,\n    secondaryVariant,\n    surface,\n    background,\n    error,\n    onPrimary,\n    onSecondary,\n    onSurface,\n    onBackground,\n    onError,\n    brightness,\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A color that's clearly legible when drawn on <a href=\"material\/ColorScheme\/background.html\">background<\/a>.<\/p>\n<p>To ensure that an app is accessible, a contrast ratio of 4.5:1 for <a href=\"material\/ColorScheme\/background.html\">background<\/a>\nand <a href=\"material\/ColorScheme\/onBackground.html\">onBackground<\/a> is recommended. See\n<a href=\"https:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color onBackground\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/onBackground.html",
            "name": "onBackground",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A color that's clearly legible when drawn on <a href=\"material\/ColorScheme\/error.html\">error<\/a>.<\/p>\n<p>To ensure that an app is accessible, a contrast ratio of 4.5:1 for <a href=\"material\/ColorScheme\/error.html\">error<\/a>\nand <a href=\"material\/ColorScheme\/onError.html\">onError<\/a> is recommended. See\n<a href=\"https:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color onError\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/onError.html",
            "name": "onError",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A color that's clearly legible when drawn on <a href=\"material\/ColorScheme\/primary.html\">primary<\/a>.<\/p>\n<p>To ensure that an app is accessible, a contrast ratio of 4.5:1 for <a href=\"material\/ColorScheme\/primary.html\">primary<\/a>\nand <a href=\"material\/ColorScheme\/onPrimary.html\">onPrimary<\/a> is recommended. See\n<a href=\"https:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color onPrimary\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/onPrimary.html",
            "name": "onPrimary",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A color that's clearly legible when drawn on <a href=\"material\/ColorScheme\/secondary.html\">secondary<\/a>.<\/p>\n<p>To ensure that an app is accessible, a contrast ratio of 4.5:1 for <a href=\"material\/ColorScheme\/secondary.html\">secondary<\/a>\nand <a href=\"material\/ColorScheme\/onSecondary.html\">onSecondary<\/a> is recommended. See\n<a href=\"https:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color onSecondary\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/onSecondary.html",
            "name": "onSecondary",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A color that's clearly legible when drawn on <a href=\"material\/ColorScheme\/surface.html\">surface<\/a>.<\/p>\n<p>To ensure that an app is accessible, a contrast ratio of 4.5:1 for <a href=\"material\/ColorScheme\/surface.html\">surface<\/a>\nand <a href=\"material\/ColorScheme\/onSurface.html\">onSurface<\/a> is recommended. See\n<a href=\"https:\/\/www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html\">www.w3.org\/TR\/UNDERSTANDING-WCAG20\/visual-audio-contrast-contrast.html<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color onSurface\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/onSurface.html",
            "name": "onSurface",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>The color displayed most frequently across your app\u2019s screens and components.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color primary\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/primary.html",
            "name": "primary",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A darker version of the primary color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color primaryVariant\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/primaryVariant.html",
            "name": "primaryVariant",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>An accent color that, when used sparingly, calls attention to parts\nof your app.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color secondary\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/secondary.html",
            "name": "secondary",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>A darker version of the secondary color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color secondaryVariant\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/secondaryVariant.html",
            "name": "secondaryVariant",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        },
        {
            "desc": "<p>The background color for widgets like <a href=\"material\/Card-class.html\">Card<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color surface\n\n<\/code><\/pre>\n        ",
            "href": "material\/ColorScheme\/surface.html",
            "name": "surface",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.ColorScheme",
            "params": []
        }
    ]
}