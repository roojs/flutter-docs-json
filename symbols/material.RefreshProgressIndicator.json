{
    "name": "material.RefreshProgressIndicator",
    "extends": [
        "material.CircularProgressIndicator",
        "material.ProgressIndicator",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "RefreshProgressIndicator",
            "type": "",
            "desc": "<p>Creates a refresh progress indicator.<\/p>\n<p>Rather than creating a refresh progress indicator directly, consider using\na <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a> together with a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n<p>The <code>value<\/code> argument can either be null for an indeterminate\nprogress indicator, or non-null for a determinate progress\nindicator.<\/p>\n<h2 id=\"accessibility\">Accessibility<\/h2>\n<p>The <code>semanticsLabel<\/code> can be used to identify the purpose of this progress\nbar for screen reading software. The <code>semanticsValue<\/code> property may be used\nfor determinate progress indicators to indicate how much progress has been made.<\/p>\n    ",
            "static": false,
            "memberOf": "material.RefreshProgressIndicator",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "valueColor",
                    "type": "animation.Animation<dart:ui.Color>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:ui.Color"
                    ]
                },
                {
                    "name": "strokeWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/RefreshProgressIndicator\/RefreshProgressIndicator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RefreshProgressIndicator({\n  Key key,\n  double value,\n  Color backgroundColor,\n  Animation&lt;Color&gt; valueColor,\n  double strokeWidth = 2.0, \/\/ Different default than CircularProgressIndicator.\n  String semanticsLabel,\n  String semanticsValue,\n}) : super(\n  key: key,\n  value: value,\n  backgroundColor: backgroundColor,\n  valueColor: valueColor,\n  strokeWidth: strokeWidth,\n  semanticsLabel: semanticsLabel,\n  semanticsValue: semanticsValue,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/RefreshProgressIndicator\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.RefreshProgressIndicator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RefreshProgressIndicator\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_RefreshProgressIndicatorState createState() =&gt; _RefreshProgressIndicatorState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/RefreshProgressIndicator-class.html",
    "desc": "<p>An indicator for the progress of refreshing the contents of a widget.<\/p>\n<p>Typically used for swipe-to-refresh interactions. See <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a> for\na complete implementation of swipe-to-refresh driven by a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>\nwidget.<\/p>\n<p>The indicator arc is displayed with <a href=\"material\/ProgressIndicator\/valueColor.html\">valueColor<\/a>, an animated value. To\nspecify a constant color use: <code>AlwaysStoppedAnimation&lt;Color&gt;(color)<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a>, which automatically displays a <a href=\"material\/CircularProgressIndicator-class.html\">CircularProgressIndicator<\/a>\nwhen the underlying vertical scrollable is overscrolled.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RefreshProgressIndicator"
}