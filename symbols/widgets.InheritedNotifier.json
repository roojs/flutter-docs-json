{
    "desc": "<p>An inherited widget for a <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a>, which updates its\ndependencies when the <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> is triggered.<\/p>\n<p>This is a variant of <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>, specialized for subclasses of\n<a href=\"foundation\/Listenable-class.html\">Listenable<\/a>, such as <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"foundation\/ValueNotifier-class.html\">ValueNotifier<\/a>.<\/p>\n<p>Dependents are notified whenever the <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> sends notifications, or\nwhenever the identity of the <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> changes.<\/p>\n<p>Multiple notifications are coalesced, so that dependents only rebuild once\neven if the <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> fires multiple times between two frames.<\/p>\n<p>Typically this class is subclassed with a class that provides an <code>of<\/code> static\nmethod that calls <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> with that\nclass.<\/p>\n<p>The <a href=\"widgets\/InheritedNotifier\/updateShouldNotify.html\">updateShouldNotify<\/a> method may also be overridden, to change the logic\nin the cases where <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> itself is changed. The <a href=\"widgets\/InheritedNotifier\/updateShouldNotify.html\">updateShouldNotify<\/a>\nmethod is called with the old <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> in the case of the <a href=\"widgets\/InheritedNotifier\/notifier.html\">notifier<\/a> being\nchanged. When it returns true, the dependents are marked as needing to be\nrebuilt this frame.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animation-class.html\">Animation<\/a>, an implementation of <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> that ticks each frame to\nupdate a value.<\/li>\n<li>\n<a href=\"rendering\/ViewportOffset-class.html\">ViewportOffset<\/a> or its subclass <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a>, implementations of\n<a href=\"foundation\/Listenable-class.html\">Listenable<\/a> that trigger when a view is scrolled.<\/li>\n<li>\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>, an inherited widget that only notifies dependents\nwhen its value is different.<\/li>\n<li>\n<a href=\"widgets\/InheritedModel-class.html\">InheritedModel<\/a>, an inherited widget that allows clients to subscribe\nto changes for subparts of the value.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "widgets\/InheritedNotifier-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.InheritedNotifier",
    "shortname": "InheritedNotifier",
    "extends": [
        "widgets.InheritedWidget",
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create an inherited widget that updates its dependents when <code>notifier<\/code>\nsends notifications.<\/p>\n<p>The <code>child<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const InheritedNotifier({\n  Key key,\n  this.notifier,\n  @required Widget child,\n}) : assert(child != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "widgets\/InheritedNotifier\/InheritedNotifier.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.InheritedNotifier",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "notifier",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Inflates this configuration to a concrete instance.<\/p>\n<p>A given widget can be included in the tree zero or more times. In particular\na given widget can be placed in the tree multiple times. Each time a widget\nis placed in the tree, it is inflated into an <a href=\"widgets\/Element-class.html\">Element<\/a>, which means a\nwidget that is incorporated into the tree multiple times will be inflated\nmultiple times.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_InheritedNotifierElement&lt;T&gt; createElement() =&gt; _InheritedNotifierElement&lt;T&gt;(this);<\/code><\/pre>\n    ",
            "href": "widgets\/InheritedNotifier\/createElement.html",
            "isDeprecated": "0",
            "type": "<_InheritedNotifierElement<T>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.InheritedNotifier",
            "params": []
        },
        {
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(InheritedNotifier&lt;T&gt; oldWidget) {\n  return oldWidget.notifier != notifier;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/InheritedNotifier\/updateShouldNotify.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.InheritedNotifier",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.InheritedNotifier"
                }
            ]
        }
    ],
    "props": []
}