{
    "desc": "<p>A widget that displays its children in a vertical array.<\/p>\n<p>To cause a child to expand to fill the available vertical space, wrap the\nchild in an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> widget.<\/p>\n<p>The <a href=\"widgets\/Column-class.html\">Column<\/a> widget does not scroll (and in general it is considered an error\nto have more children in a <a href=\"widgets\/Column-class.html\">Column<\/a> than will fit in the available room). If\nyou have a line of widgets and want them to be able to scroll if there is\ninsufficient room, consider using a <a href=\"widgets\/ListView-class.html\">ListView<\/a>.<\/p>\n<p>For a horizontal variant, see <a href=\"widgets\/Row-class.html\">Row<\/a>.<\/p>\n<p>If you only have one child, then consider using <a href=\"widgets\/Align-class.html\">Align<\/a> or <a href=\"widgets\/Center-class.html\">Center<\/a> to\nposition the child.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example uses a <a href=\"widgets\/Column-class.html\">Column<\/a> to arrange three widgets vertically, the last\nbeing made to fill all the remaining space.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Column(\n  children: &lt;Widget&gt;[\n    Text('Deliver features faster'),\n    Text('Craft beautiful UIs'),\n    Expanded(\n      child: FittedBox(\n        fit: BoxFit.contain, \/\/ otherwise the logo will be tiny\n        child: const FlutterLogo(),\n      ),\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn the sample above, the text and the logo are centered on each line. In the\nfollowing example, the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is set to\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a>, so that the children are left-aligned. The\n<a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> is set to <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.min<\/a>, so that the column shrinks to\nfit the children.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Column(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  mainAxisSize: MainAxisSize.min,\n  children: &lt;Widget&gt;[\n    Text('We move under cover and we move as one'),\n    Text('Through the night, we have one shot to live another day'),\n    Text('We cannot let a stray gunshot give us away'),\n    Text('We will fight up close, seize the moment and stay in it'),\n    Text('It\u2019s either that or meet the business end of a bayonet'),\n    Text('The code word is \u2018Rochambeau,\u2019 dig me?'),\n    Text('Rochambeau!', style: DefaultTextStyle.of(context).style.apply(fontSizeFactor: 2.0)),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h2 id=\"troubleshooting\">Troubleshooting<\/h2>\n<h3 id=\"when-the-incoming-vertical-constraints-are-unbounded\">When the incoming vertical constraints are unbounded<\/h3>\n<p>When a <a href=\"widgets\/Column-class.html\">Column<\/a> has one or more <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> children, and is\nplaced in another <a href=\"widgets\/Column-class.html\">Column<\/a>, or in a <a href=\"widgets\/ListView-class.html\">ListView<\/a>, or in some other context\nthat does not provide a maximum height constraint for the <a href=\"widgets\/Column-class.html\">Column<\/a>, you will\nget an exception at runtime saying that there are children with non-zero\nflex but the vertical constraints are unbounded.<\/p>\n<p>The problem, as described in the details that accompany that exception, is\nthat using <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> or <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> means that the remaining space after\nlaying out all the other children must be shared equally, but if the\nincoming vertical constraints are unbounded, there is infinite remaining\nspace.<\/p>\n<p>The key to solving this problem is usually to determine why the <a href=\"widgets\/Column-class.html\">Column<\/a> is\nreceiving unbounded vertical constraints.<\/p>\n<p>One common reason for this to happen is that the <a href=\"widgets\/Column-class.html\">Column<\/a> has been placed in\nanother <a href=\"widgets\/Column-class.html\">Column<\/a> (without using <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> around the inner\nnested <a href=\"widgets\/Column-class.html\">Column<\/a>). When a <a href=\"widgets\/Column-class.html\">Column<\/a> lays out its non-flex children (those that\nhave neither <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> around them), it gives them unbounded\nconstraints so that they can determine their own dimensions (passing\nunbounded constraints usually signals to the child that it should\nshrink-wrap its contents). The solution in this case is typically to just\nwrap the inner column in an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> to indicate that it should take the\nremaining space of the outer column, rather than being allowed to take any\namount of room it desires.<\/p>\n<p>Another reason for this message to be displayed is nesting a <a href=\"widgets\/Column-class.html\">Column<\/a> inside\na <a href=\"widgets\/ListView-class.html\">ListView<\/a> or other vertical scrollable. In that scenario, there really is\ninfinite vertical space (the whole point of a vertical scrolling list is to\nallow infinite space vertically). In such scenarios, it is usually worth\nexamining why the inner <a href=\"widgets\/Column-class.html\">Column<\/a> should have an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or <a href=\"widgets\/Flexible-class.html\">Flexible<\/a>\nchild: what size should the inner children really be? The solution in this\ncase is typically to remove the <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> widgets from around\nthe inner children.<\/p>\n<p>For more discussion about constraints, see <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a>.<\/p>\n<h3 id=\"the-yellow-and-black-striped-banner\">The yellow and black striped banner<\/h3>\n<p>When the contents of a <a href=\"widgets\/Column-class.html\">Column<\/a> exceed the amount of space available, the\n<a href=\"widgets\/Column-class.html\">Column<\/a> overflows, and the contents are clipped. In debug mode, a yellow\nand black striped bar is rendered at the overflowing edge to indicate the\nproblem, and a message is printed below the <a href=\"widgets\/Column-class.html\">Column<\/a> saying how much\noverflow was detected.<\/p>\n<p>The usual solution is to use a <a href=\"widgets\/ListView-class.html\">ListView<\/a> rather than a <a href=\"widgets\/Column-class.html\">Column<\/a>, to enable\nthe contents to scroll when vertical space is limited.<\/p>\n<h2 id=\"layout-algorithm\">Layout algorithm<\/h2>\n<p><em>This section describes how a <a href=\"widgets\/Column-class.html\">Column<\/a> is rendered by the framework.<\/em>\n<em>See <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> for an introduction to box layout models.<\/em><\/p>\n<p>Layout for a <a href=\"widgets\/Column-class.html\">Column<\/a> proceeds in six steps:<\/p>\n<ol>\n<li>Layout each child a null or zero flex factor (e.g., those that are not\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a>) with unbounded vertical constraints and the incoming\nhorizontal constraints. If the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.stretch<\/a>, instead use tight horizontal constraints\nthat match the incoming max width.<\/li>\n<li>Divide the remaining vertical space among the children with non-zero\nflex factors (e.g., those that are <a href=\"widgets\/Expanded-class.html\">Expanded<\/a>) according to their flex\nfactor. For example, a child with a flex factor of 2.0 will receive twice\nthe amount of vertical space as a child with a flex factor of 1.0.<\/li>\n<li>Layout each of the remaining children with the same horizontal\nconstraints as in step 1, but instead of using unbounded vertical\nconstraints, use vertical constraints based on the amount of space\nallocated in step 2. Children with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.tight<\/a> are given tight constraints (i.e., forced to fill the\nallocated space), and children with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a> are given loose constraints (i.e., not forced to fill the\nallocated space).<\/li>\n<li>The width of the <a href=\"widgets\/Column-class.html\">Column<\/a> is the maximum width of the children (which\nwill always satisfy the incoming horizontal constraints).<\/li>\n<li>The height of the <a href=\"widgets\/Column-class.html\">Column<\/a> is determined by the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property.\nIf the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.max<\/a>, then the height of\nthe <a href=\"widgets\/Column-class.html\">Column<\/a> is the max height of the incoming constraints. If the\n<a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.min<\/a>, then the height of the\n<a href=\"widgets\/Column-class.html\">Column<\/a> is the sum of heights of the children (subject to the incoming\nconstraints).<\/li>\n<li>Determine the position for each child according to the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> and the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a>. For example, if the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceBetween<\/a>, any vertical\nspace that has not been allocated to children is divided evenly and\nplaced between the children.<\/li>\n<\/ol>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Row-class.html\">Row<\/a>, for a horizontal equivalent.<\/li>\n<li>\n<a href=\"widgets\/Flex-class.html\">Flex<\/a>, if you don't know in advance if you want a horizontal or vertical\narrangement.<\/li>\n<li>\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a>, to indicate children that should take all the remaining room.<\/li>\n<li>\n<a href=\"widgets\/Flexible-class.html\">Flexible<\/a>, to indicate children that should share the remaining room but\nthat may size smaller (leaving some remaining room unused).<\/li>\n<li>\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>, whose documentation discusses some ways to\nuse a <a href=\"widgets\/Column-class.html\">Column<\/a> inside a scrolling container.<\/li>\n<li>\n<a href=\"widgets\/Spacer-class.html\">Spacer<\/a>, a widget that takes up space proportional to it's flex value.<\/li>\n<li>The <a href=\"https:\/\/flutter.io\/widgets\/layout\/\">catalog of layout widgets<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Column-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Column",
    "shortname": "Column",
    "extends": [
        "widgets.Flex",
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a vertical array of children.<\/p>\n<p>The <a href=\"widgets\/Flex\/direction.html\">direction<\/a>, <code>mainAxisAlignment<\/code>, <code>mainAxisSize<\/code>,\n<code>crossAxisAlignment<\/code>, and <code>verticalDirection<\/code> arguments must not be null.\nIf <code>crossAxisAlignment<\/code> is <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.baseline<\/a>, then\n<code>textBaseline<\/code> must not be null.<\/p>\n<p>The <code>textDirection<\/code> argument defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, if\nany. If there is no ambient directionality, and a text direction is going\nto be necessary to disambiguate <code>start<\/code> or <code>end<\/code> values for the\n<code>crossAxisAlignment<\/code>, the <code>textDirection<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Column({\n  Key key,\n  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,\n  MainAxisSize mainAxisSize = MainAxisSize.max,\n  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,\n  TextDirection textDirection,\n  VerticalDirection verticalDirection = VerticalDirection.down,\n  TextBaseline textBaseline,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : super(\n  children: children,\n  key: key,\n  direction: Axis.vertical,\n  mainAxisAlignment: mainAxisAlignment,\n  mainAxisSize: mainAxisSize,\n  crossAxisAlignment: crossAxisAlignment,\n  textDirection: textDirection,\n  verticalDirection: verticalDirection,\n  textBaseline: textBaseline,\n);<\/code><\/pre>\n    ",
            "href": "widgets\/Column\/Column.html",
            "isDeprecated": false,
            "type": "",
            "name": "Column",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Column",
            "params": [
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "crossAxisAlignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.CrossAxisAlignment"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "mainAxisAlignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.MainAxisAlignment"
                },
                {
                    "name": "mainAxisSize",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.MainAxisSize"
                },
                {
                    "name": "textBaseline",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextBaseline"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "verticalDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.VerticalDirection"
                }
            ]
        }
    ],
    "props": []
}