{
    "desc": "<p>An implementation of <a href=\"https:\/\/tools.ietf.org\/html\/rfc2104\">keyed-hash method authentication codes<\/a>.<\/p>\n<p>HMAC allows messages to be cryptographically authenticated using any\niterated cryptographic hash function.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-crypto_crypto\/Hmac-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "crypto",
    "name": "crypto.Hmac",
    "shortname": "Hmac",
    "extends": [
        "crypto.Digest",
        "dart:core.int",
        "dart:core.List",
        "dart:convert.Converter",
        "crypto.Digest",
        "dart:core.int",
        "dart:core.List",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create an <a href=\"package-crypto_crypto\/Hmac-class.html\">Hmac<\/a> object from a <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> and a binary key.<\/p>\n<p>The key should be a secret shared between the sender and receiver of the\nmessage.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Hmac(Hash hash, List&lt;int&gt; key)\n    : _hash = hash,\n      _key = new Uint8List(hash.blockSize) {\n  \/\/ Hash the key if it's longer than the block size of the hash.\n  if (key.length &gt; _hash.blockSize) key = _hash.convert(key).bytes;\n\n  \/\/ If [key] is shorter than the block size, the rest of [_key] will be\n  \/\/ 0-padded.\n  _key.setRange(0, key.length, key);\n}<\/code><\/pre>\n    ",
            "href": "package-crypto_crypto\/Hmac\/Hmac.html",
            "isDeprecated": false,
            "type": "",
            "name": "Hmac",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "crypto.Hmac",
            "params": [
                {
                    "name": "hash",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "crypto.Hash"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<dart:core.int>"
                }
            ]
        },
        {
            "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDigest convert(List&lt;int&gt; data) {\n  var innerSink = new DigestSink();\n  var outerSink = startChunkedConversion(innerSink);\n  outerSink.add(data);\n  outerSink.close();\n  return innerSink.value;\n}<\/code><\/pre>\n    ",
            "href": "package-crypto_crypto\/Hmac\/convert.html",
            "isDeprecated": false,
            "type": "crypto.Digest",
            "name": "convert",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "crypto.Hmac",
            "params": [
                {
                    "name": "data",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                }
            ]
        },
        {
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink) =&gt;\n    new _HmacSink(sink, _hash, _key);<\/code><\/pre>\n    ",
            "href": "package-crypto_crypto\/Hmac\/startChunkedConversion.html",
            "isDeprecated": false,
            "type": "dart:convert.ByteConversionSink",
            "name": "startChunkedConversion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "crypto.Hmac",
            "params": [
                {
                    "name": "sink",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Sink<crypto.Digest>"
                }
            ]
        }
    ],
    "props": []
}