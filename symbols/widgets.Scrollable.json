{
    "desc": "<p>A widget that scrolls.<\/p>\n<p><a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> implements the interaction model for a scrollable widget,\nincluding gesture recognition, but does not have an opinion about how the\nviewport, which actually displays the children, is constructed.<\/p>\n<p>It's rare to construct a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> directly. Instead, consider <a href=\"widgets\/ListView-class.html\">ListView<\/a>\nor <a href=\"widgets\/GridView-class.html\">GridView<\/a>, which combine scrolling, viewporting, and a layout model. To\ncombine layout models (or to use a custom layout mode), consider using\n<a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/p>\n<p>The static <a href=\"widgets\/Scrollable\/of.html\">Scrollable.of<\/a> and <a href=\"widgets\/Scrollable\/ensureVisible.html\">Scrollable.ensureVisible<\/a> functions are\noften used to interact with the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget inside a <a href=\"widgets\/ListView-class.html\">ListView<\/a> or\na <a href=\"widgets\/GridView-class.html\">GridView<\/a>.<\/p>\n<p>To further customize scrolling behavior with a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>:<\/p>\n<ol>\n<li>\n<p>You can provide a <a href=\"widgets\/Scrollable\/viewportBuilder.html\">viewportBuilder<\/a> to customize the child model. For\nexample, <a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> uses a viewport that displays a single\nbox child whereas <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> uses a <a href=\"widgets\/Viewport-class.html\">Viewport<\/a> or a\n<a href=\"widgets\/ShrinkWrappingViewport-class.html\">ShrinkWrappingViewport<\/a>, both of which display a list of slivers.<\/p>\n<\/li>\n<li>\n<p>You can provide a custom <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> that creates a custom\n<a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> subclass. For example, <a href=\"widgets\/PageView-class.html\">PageView<\/a> uses a\n<a href=\"widgets\/PageController-class.html\">PageController<\/a>, which creates a page-oriented scroll position subclass\nthat keeps the same page visible when the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> resizes.<\/p>\n<\/li>\n<\/ol>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which is a commonly used <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> that displays a\nscrolling, linear list of child widgets.<\/li>\n<li>\n<a href=\"widgets\/PageView-class.html\">PageView<\/a>, which is a scrolling list of child widgets that are each the\nsize of the viewport.<\/li>\n<li>\n<a href=\"widgets\/GridView-class.html\">GridView<\/a>, which is a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> that displays a scrolling, 2D array\nof child widgets.<\/li>\n<li>\n<a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>, which is a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> that creates custom scroll\neffects using slivers.<\/li>\n<li>\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>, which is a scrollable widget that has a single\nchild.<\/li>\n<li>\n<a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> and <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>, which can be used to watch\nthe scroll position without using a <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Scrollable-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Scrollable",
    "shortname": "Scrollable",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "widgets.ScrollableState"
    ],
    "events": [
        {
            "desc": "<p>Builds the viewport through which the scrollable content is displayed.<\/p>\n<p>A typical viewport uses the given <a href=\"rendering\/ViewportOffset-class.html\">ViewportOffset<\/a> to determine which part\nof its content is actually visible through the viewport.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Viewport-class.html\">Viewport<\/a>, which is a viewport that displays a list of slivers.<\/li>\n<li>\n<a href=\"widgets\/ShrinkWrappingViewport-class.html\">ShrinkWrappingViewport<\/a>, which is a viewport that displays a list of\nslivers and sizes itself based on the size of the slivers.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ViewportBuilder viewportBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/viewportBuilder.html",
            "isDeprecated": false,
            "type": "widgets.ViewportBuilder",
            "name": "viewportBuilder",
            "memberOf": "widgets.Scrollable",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that scrolls.<\/p>\n<p>The <code>axisDirection<\/code> and <code>viewportBuilder<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Scrollable({\n  Key key,\n  this.axisDirection = AxisDirection.down,\n  this.controller,\n  this.physics,\n  @required this.viewportBuilder,\n  this.excludeFromSemantics = false,\n  this.semanticChildCount,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(axisDirection != null),\n     assert(dragStartBehavior != null),\n     assert(viewportBuilder != null),\n     assert(excludeFromSemantics != null),\n     super (key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Scrollable\/Scrollable.html",
            "isDeprecated": false,
            "type": "",
            "name": "Scrollable",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Scrollable",
            "params": [
                {
                    "name": "axisDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "controller",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollController"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "excludeFromSemantics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "physics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                },
                {
                    "name": "semanticChildCount",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "viewportBuilder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ViewportBuilder"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/Scrollable\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nScrollableState createState() =&gt; ScrollableState();<\/code><\/pre>\n    ",
            "href": "widgets\/Scrollable\/createState.html",
            "isDeprecated": false,
            "type": "widgets.ScrollableState",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Scrollable\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;AxisDirection&gt;('axisDirection', axisDirection));\n  properties.add(DiagnosticsProperty&lt;ScrollPhysics&gt;('physics', physics));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Scrollable\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Scrollable",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Scrolls the scrollables that enclose the given context so as to make the\ngiven context visible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; ensureVisible(\n  BuildContext context, {\n  double alignment = 0.0,\n  Duration duration = Duration.zero,\n  Curve curve = Curves.ease,\n}) {\n  final List&lt;Future&lt;void&gt;&gt; futures = &lt;Future&lt;void&gt;&gt;[];\n\n  ScrollableState scrollable = Scrollable.of(context);\n  while (scrollable != null) {\n    futures.add(scrollable.position.ensureVisible(\n      context.findRenderObject(),\n      alignment: alignment,\n      duration: duration,\n      curve: curve,\n    ));\n    context = scrollable.context;\n    scrollable = Scrollable.of(context);\n  }\n\n  if (futures.isEmpty || duration == Duration.zero)\n    return Future&lt;void&gt;.value();\n  if (futures.length == 1)\n    return futures.single;\n  return Future.wait&lt;void&gt;(futures).then&lt;void&gt;((List&lt;void&gt; _) =&gt; null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Scrollable\/ensureVisible.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "ensureVisible",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Scrollable",
            "params": [
                {
                    "name": "alignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "curve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Curve"
                },
                {
                    "name": "duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>The state from the closest instance of this class that encloses the given context.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">ScrollableState scrollable = Scrollable.of(context);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ScrollableState of(BuildContext context) {\n  final _ScrollableScope widget = context.inheritFromWidgetOfExactType(_ScrollableScope);\n  return widget?.scrollable;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Scrollable\/of.html",
            "isDeprecated": false,
            "type": "widgets.ScrollableState",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Scrollable",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The axis along which the scroll view scrolls.<\/p>\n<p>Determined by the <a href=\"widgets\/Scrollable\/axisDirection.html\">axisDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Axis get axis =&gt; axisDirectionToAxis(axisDirection);<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/axis.html",
            "name": "axis",
            "isDeprecated": false,
            "type": "painting.Axis",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>The direction in which this widget scrolls.<\/p>\n<p>For example, if the <a href=\"widgets\/Scrollable\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, increasing\nthe scroll position will cause content below the bottom of the viewport to\nbecome visible through the viewport. Similarly, if <a href=\"widgets\/Scrollable\/axisDirection.html\">axisDirection<\/a> is\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>, increasing the scroll position will cause content\nbeyond the right edge of the viewport to become visible through the\nviewport.<\/p>\n<p>Defaults to <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AxisDirection axisDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/axisDirection.html",
            "name": "axisDirection",
            "isDeprecated": false,
            "type": "painting.AxisDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>An object that can be used to control the position to which this widget is\nscrolled.<\/p>\n<p>A <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> serves several purposes. It can be used to control\nthe initial scroll position (see <a href=\"widgets\/ScrollController\/initialScrollOffset.html\">ScrollController.initialScrollOffset<\/a>).\nIt can be used to control whether the scroll view should automatically\nsave and restore its scroll position in the <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a> (see\n<a href=\"widgets\/ScrollController\/keepScrollOffset.html\">ScrollController.keepScrollOffset<\/a>). It can be used to read the current\nscroll position (see <a href=\"widgets\/ScrollController\/offset.html\">ScrollController.offset<\/a>), or change it (see\n<a href=\"widgets\/ScrollController\/animateTo.html\">ScrollController.animateTo<\/a>).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Scrollable\/ensureVisible.html\">ensureVisible<\/a>, which animates the scroll position to reveal a given\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController controller\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/controller.html",
            "name": "controller",
            "isDeprecated": false,
            "type": "widgets.ScrollController",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Scrollable\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>Whether the scroll actions introduced by this <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> are exposed\nin the semantics tree.<\/p>\n<p>Text fields with an overflow are usually scrollable to make sure that the\nuser can get to the beginning\/end of the entered text. However, these\nscrolling actions are generally not exposed to the semantics layer.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Scrollable\/excludeFromSemantics.html\">GestureDetector.excludeFromSemantics<\/a>, which is used to accomplish the\nexclusion.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool excludeFromSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/excludeFromSemantics.html",
            "name": "excludeFromSemantics",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>How the widgets should respond to user input.<\/p>\n<p>For example, determines how the widget continues to animate after the\nuser stops dragging the scroll view.<\/p>\n<p>Defaults to matching platform conventions via the physics provided from\nthe ambient <a href=\"widgets\/ScrollConfiguration-class.html\">ScrollConfiguration<\/a>.<\/p>\n<p>The physics can be changed dynamically, but new physics will only take\neffect if the <em>class<\/em> of the provided object changes. Merely constructing\na new instance with a different configuration is insufficient to cause the\nphysics to be reapplied. (This is because the final object used is\ngenerated dynamically, which can be relatively expensive, and it would be\ninefficient to speculatively create this object each frame to see if the\nphysics should be updated.)<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AlwaysScrollableScrollPhysics-class.html\">AlwaysScrollableScrollPhysics<\/a>, which can be used to indicate that the\nscrollable should react to scroll requests (and possible overscroll)\neven if the scrollable's contents fit without scrolling being necessary.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics physics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/physics.html",
            "name": "physics",
            "isDeprecated": false,
            "type": "widgets.ScrollPhysics",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        },
        {
            "desc": "<p>The number of children that will contribute semantic information.<\/p>\n<p>The value will be null if the number of children is unknown or unbounded.<\/p>\n<p>Some subtypes of <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> can infer this value automatically. For\nexample <a href=\"widgets\/ListView-class.html\">ListView<\/a> will use the number of widgets in the child list,\nwhile the <a href=\"widgets\/ListView\/ListView.separated.html\">new ListView.separated<\/a> constructor will use half that amount.<\/p>\n<p>For <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> and other types which do not receive a builder\nor list of widgets, the child count must be explicitly provided.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>, for an explanation of scroll semantics.<\/li>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/scrollChildCount.html\">SemanticsConfiguration.scrollChildCount<\/a>, the corresponding semantics property.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int semanticChildCount\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Scrollable\/semanticChildCount.html",
            "name": "semanticChildCount",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Scrollable",
            "params": []
        }
    ]
}