{
    "name": "quiver.collection.AvlTreeSet",
    "extends": [
        "quiver.collection.TreeSet",
        "dart:collection.IterableBase",
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "memberOf": "quiver.collection",
    "events": [],
    "methods": [
        {
            "name": "AvlTreeSet",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "comparator",
                    "type": "dart:core.Comparator",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "quiver.collection\/AvlTreeSet\/AvlTreeSet.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AvlTreeSet({Comparator&lt;V&gt; comparator}) : super._(comparator);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "dart:core.bool",
            "desc": "<p>Add the element to the tree.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(V element) {\n  if (_root == null) {\n    AvlNode&lt;V&gt; node = new AvlNode&lt;V&gt;(object: element);\n    _root = node;\n    ++_length;\n    ++_modCount;\n    return true;\n  }\n\n  AvlNode&lt;V&gt; x = _root;\n  while (true) {\n    int compare = comparator(element, x.object);\n    if (compare == 0) {\n      return false;\n    } else if (compare &lt; 0) {\n      if (x._left == null) {\n        AvlNode&lt;V&gt; node = new AvlNode&lt;V&gt;(object: element).._parent = x;\n        x\n          .._left = node\n          .._balanceFactor -= 1;\n        break;\n      }\n      x = x.left;\n    } else {\n      if (x._right == null) {\n        AvlNode&lt;V&gt; node = new AvlNode&lt;V&gt;(object: element).._parent = x;\n        x\n          .._right = node\n          .._balanceFactor += 1;\n        break;\n      }\n      x = x.right;\n    }\n  }\n\n  ++_modCount;\n\n  \/\/ AVL balancing act (for height balanced trees)\n  \/\/ Now that we've inserted, we've unbalanced some trees, we need\n  \/\/  to follow the tree back up to the _root double checking that the tree\n  \/\/  is still balanced and _maybe_ perform a single or double rotation.\n  \/\/  Note: Left additions == -1, Right additions == +1\n  \/\/  Balanced Node = { -1, 0, 1 }, out of balance = { -2, 2 }\n  \/\/  Single rotation when Parent &amp; Child share signed balance,\n  \/\/  Double rotation when sign differs!\n  AvlNode&lt;V&gt; node = x;\n  while (node._balanceFactor != 0 &amp;&amp; node.parent != null) {\n    \/\/ Find out which side of the parent we're on\n    if (node.parent._left == node) {\n      node.parent._balanceFactor -= 1;\n    } else {\n      node.parent._balanceFactor += 1;\n    }\n\n    node = node.parent;\n    if (node._balanceFactor == 2) {\n      \/\/ Heavy on the right side - Test for which rotation to perform\n      if (node.right._balanceFactor == 1) {\n        \/\/ Single (left) rotation; this will balance everything to zero\n        _rotateLeft(node);\n        node._balanceFactor = node.parent._balanceFactor = 0;\n        node = node.parent;\n      } else {\n        \/\/ Double (Right\/Left) rotation\n        \/\/ node will now be old node.right.left\n        _rotateRightLeft(node);\n        node = node.parent; \/\/ Update to new parent (old grandchild)\n        if (node._balanceFactor == 1) {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = -1;\n        } else if (node._balanceFactor == 0) {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = 0;\n        } else {\n          node.right._balanceFactor = 1;\n          node.left._balanceFactor = 0;\n        }\n        node._balanceFactor = 0;\n      }\n      break; \/\/ out of loop, we're balanced\n    } else if (node._balanceFactor == -2) {\n      \/\/ Heavy on the left side - Test for which rotation to perform\n      if (node.left._balanceFactor == -1) {\n        _rotateRight(node);\n        node._balanceFactor = node.parent._balanceFactor = 0;\n        node = node.parent;\n      } else {\n        \/\/ Double (Left\/Right) rotation\n        \/\/ node will now be old node.left.right\n        _rotateLeftRight(node);\n        node = node.parent;\n        if (node._balanceFactor == -1) {\n          node.right._balanceFactor = 1;\n          node.left._balanceFactor = 0;\n        } else if (node._balanceFactor == 0) {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = 0;\n        } else {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = -1;\n        }\n        node._balanceFactor = 0;\n      }\n      break; \/\/ out of loop, we're balanced\n    }\n  } \/\/ end of while (balancing)\n  _length++;\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "addAll",
            "type": "dart:core.bool",
            "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"quiver.collection\/AvlTreeSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "items",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/addAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool addAll(Iterable&lt;V&gt; items) {\n  bool modified = false;\n  for (V ele in items) {\n    modified = add(ele) ? true : modified;\n  }\n  return modified;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "cast",
            "type": "quiver.collection.AvlTreeSet",
            "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"quiver.collection\/AvlTreeSet\/add.html\">add<\/a> or <a href=\"quiver.collection\/AvlTreeSet\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/cast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nAvlTreeSet&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "clear",
            "type": "",
            "desc": "<p>Removes all elements in the set.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/clear.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _length = 0;\n  _root = null;\n  ++_modCount;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "contains",
            "type": "dart:core.bool",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/contains.html\">IterableBase.contains<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/contains.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object object) {\n  AvlNode&lt;V&gt; x = _getNode(object as V);\n  return x != null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsAll",
            "type": "dart:core.bool",
            "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "items",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/containsAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; items) {\n  for (var ele in items) {\n    if (!contains(ele)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "difference",
            "type": "dart:core.Set",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/difference.html\">Set.difference<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Set<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/difference.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; difference(Set&lt;Object&gt; other) {\n  TreeSet&lt;V&gt; set = new TreeSet(comparator: comparator);\n\n  if (other is TreeSet) {\n    var i1 = iterator;\n    var i2 = other.iterator;\n    var hasMore1 = i1.moveNext();\n    var hasMore2 = i2.moveNext();\n    while (hasMore1 &amp;&amp; hasMore2) {\n      var c = comparator(i1.current, i2.current);\n      if (c == 0) {\n        hasMore1 = i1.moveNext();\n        hasMore2 = i2.moveNext();\n      } else if (c &lt; 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n      } else {\n        hasMore2 = i2.moveNext();\n      }\n    }\n    if (hasMore1) {\n      do {\n        set.add(i1.current);\n      } while (i1.moveNext());\n    }\n    return set;\n  }\n\n  \/\/ Non-optimized version.\n  for (var target in this) {\n    if (!other.contains(target)) {\n      set.add(target);\n    }\n  }\n  return set;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "fromIterator",
            "type": "dart:core.BidirectionalIterator",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/fromIterator.html\">TreeSet.fromIterator<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "anchor",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reversed",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "inclusive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/fromIterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; fromIterator(V anchor,\n        {bool reversed: false, bool inclusive: true}) =&gt;\n    new _AvlTreeIterator&lt;V&gt;._(this,\n        anchorObject: anchor, reversed: reversed, inclusive: inclusive);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getNode",
            "type": "quiver.collection.AvlNode",
            "desc": "",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/getNode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nAvlNode&lt;V&gt; getNode(V object) =&gt; _getNode(object);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersection",
            "type": "dart:core.Set",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/intersection.html\">Set.intersection<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Set<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/intersection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; intersection(Set&lt;Object&gt; other) {\n  TreeSet&lt;V&gt; set = new TreeSet(comparator: comparator);\n\n  \/\/ Optimized for sorted sets\n  if (other is TreeSet&lt;V&gt;) {\n    var i1 = iterator;\n    var i2 = other.iterator;\n    var hasMore1 = i1.moveNext();\n    var hasMore2 = i2.moveNext();\n    while (hasMore1 &amp;&amp; hasMore2) {\n      var c = comparator(i1.current, i2.current);\n      if (c == 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n        hasMore2 = i2.moveNext();\n      } else if (c &lt; 0) {\n        hasMore1 = i1.moveNext();\n      } else {\n        hasMore2 = i2.moveNext();\n      }\n    }\n    return set;\n  }\n\n  \/\/ Non-optimized version.\n  for (var target in this) {\n    if (other.contains(target)) {\n      set.add(target);\n    }\n  }\n  return set;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lookup",
            "type": "",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/lookup.html\">Set.lookup<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/lookup.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V lookup(Object element) {\n  if (element is! V || _root == null) return null;\n  AvlNode&lt;V&gt; x = _root;\n  int compare = 0;\n  while (x != null) {\n    compare = comparator(element as V, x.object);\n    if (compare == 0) {\n      return x.object;\n    } else if (compare &lt; 0) {\n      x = x.left;\n    } else {\n      x = x.right;\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "nearest",
            "type": "",
            "desc": "<p>Search the tree for the matching <code>object<\/code> or the <code>nearestOption<\/code>\nif missing.  See <a href=\"quiver.collection\/TreeSearch-class.html\">TreeSearch<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "nearestOption",
                    "type": "quiver.collection.TreeSearch",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/nearest.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V nearest(V object, {TreeSearch nearestOption: TreeSearch.NEAREST}) {\n  AvlNode&lt;V&gt; found = _searchNearest(object, option: nearestOption);\n  return (found != null) ? found.object : null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "remove",
            "type": "dart:core.bool",
            "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "item",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object item) {\n  if (item is! V) return false;\n\n  AvlNode&lt;V&gt; x = _getNode(item as V);\n  if (x != null) {\n    _removeNode(x);\n    return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "removeAll",
            "type": "",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/removeAll.html\">Set.removeAll<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "items",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/removeAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable items) {\n  for (var ele in items) {\n    remove(ele);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeWhere",
            "type": "",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/removeWhere.html\">Set.removeWhere<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/removeWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(V element)) {\n  List&lt;V&gt; damned = [];\n  for (var target in this) {\n    if (test(target)) {\n      damned.add(target);\n    }\n  }\n  removeAll(damned);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retainAll",
            "type": "",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/retainAll.html\">Set.retainAll<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/retainAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  List&lt;V&gt; chosen = &lt;V&gt;[];\n  for (var target in elements) {\n    if (target is V &amp;&amp; contains(target)) {\n      chosen.add(target);\n    }\n  }\n  clear();\n  addAll(chosen);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retainWhere",
            "type": "",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/retainWhere.html\">Set.retainWhere<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/retainWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(V element)) {\n  List&lt;V&gt; chosen = [];\n  for (var target in this) {\n    if (test(target)) {\n      chosen.add(target);\n    }\n  }\n  clear();\n  addAll(chosen);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retype",
            "type": "dart:core.Set",
            "desc": "",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/retype.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nSet&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "union",
            "type": "dart:core.Set",
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/union.html\">Set.union<\/a><\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.AvlTreeSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/AvlTreeSet\/union.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; union(Set&lt;V&gt; other) {\n  TreeSet&lt;V&gt; set = new TreeSet(comparator: comparator);\n\n  if (other is TreeSet) {\n    var i1 = iterator;\n    var i2 = other.iterator;\n    var hasMore1 = i1.moveNext();\n    var hasMore2 = i2.moveNext();\n    while (hasMore1 &amp;&amp; hasMore2) {\n      var c = comparator(i1.current, i2.current);\n      if (c == 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n        hasMore2 = i2.moveNext();\n      } else if (c &lt; 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n      } else {\n        set.add(i2.current);\n        hasMore2 = i2.moveNext();\n      }\n    }\n    if (hasMore1 || hasMore2) {\n      i1 = hasMore1 ? i1 : i2;\n      do {\n        set.add(i1.current);\n      } while (i1.moveNext());\n    }\n    return set;\n  }\n\n  \/\/ Non-optimized version.\n  return set..addAll(this)..addAll(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "first",
            "type": "",
            "types": [],
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/first.html\">IterableBase.first<\/a><\/p>\n        ",
            "memberOf": "quiver.collection.AvlTreeSet",
            "isConstant": false,
            "href": "quiver.collection\/AvlTreeSet\/first.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">V get first {\n  if (_root == null) return null;\n  AvlNode&lt;V&gt; min = _root.minimumNode;\n  return min != null ? min.object : null;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iterator",
            "type": "dart:core.BidirectionalIterator",
            "types": [],
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/iterator.html\">IterableBase.iterator<\/a><\/p>\n        ",
            "memberOf": "quiver.collection.AvlTreeSet",
            "isConstant": false,
            "href": "quiver.collection\/AvlTreeSet\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get iterator =&gt; new _AvlTreeIterator._(this);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "last",
            "type": "",
            "types": [],
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/last.html\">IterableBase.last<\/a><\/p>\n        ",
            "memberOf": "quiver.collection.AvlTreeSet",
            "isConstant": false,
            "href": "quiver.collection\/AvlTreeSet\/last.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">V get last {\n  if (_root == null) return null;\n  AvlNode&lt;V&gt; max = _root.maximumNode;\n  return max != null ? max.object : null;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of elements in <a href=\"quiver.collection\/AvlTreeSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "memberOf": "quiver.collection.AvlTreeSet",
            "isConstant": false,
            "href": "quiver.collection\/AvlTreeSet\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "reverseIterator",
            "type": "dart:core.BidirectionalIterator",
            "types": [],
            "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/reverseIterator.html\">TreeSet.reverseIterator<\/a><\/p>\n        ",
            "memberOf": "quiver.collection.AvlTreeSet",
            "isConstant": false,
            "href": "quiver.collection\/AvlTreeSet\/reverseIterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get reverseIterator =&gt;\n    new _AvlTreeIterator._(this, reversed: true);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "quiver.collection\/AvlTreeSet-class.html",
    "desc": "<p>AVL implementation of a self-balancing binary tree. Optimized for lookup\noperations.<\/p>\n<p>Notes: Adapted from \"Introduction to Algorithms\", second edition,\n       by Thomas H. Cormen, Charles E. Leiserson,\n          Ronald L. Rivest, Clifford Stein.\n       chapter 13.2<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AvlTreeSet"
}