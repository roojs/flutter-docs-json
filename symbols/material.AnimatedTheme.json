{
    "desc": "<p>Animated version of <a href=\"material\/Theme-class.html\">Theme<\/a> which automatically transitions the colors,\netc, over a given duration whenever the given theme changes.<\/p>\n<p>Here's an illustration of what using this widget looks like, using a <a href=\"widgets\/ImplicitlyAnimatedWidget\/curve.html\">curve<\/a>\nof <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:250px;\n              height:266px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:250px; height:266px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/widgets\/animated_theme.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a>, which <a href=\"material\/AnimatedTheme-class.html\">AnimatedTheme<\/a> uses to actually apply the interpolated\ntheme.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, which describes the actual configuration of a theme.<\/li>\n<li>\n<a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>, which includes an <a href=\"material\/AnimatedTheme-class.html\">AnimatedTheme<\/a> widget configured via\nthe <a href=\"material\/MaterialApp\/theme.html\">MaterialApp.theme<\/a> argument.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/AnimatedTheme-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.AnimatedTheme",
    "shortname": "AnimatedTheme",
    "extends": [
        "widgets.ImplicitlyAnimatedWidget",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an animated theme.<\/p>\n<p>By default, the theme transition uses a linear curve. The <code>data<\/code> and\n<code>child<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnimatedTheme({\n  Key key,\n  @required this.data,\n  this.isMaterialAppTheme = false,\n  Curve curve = Curves.linear,\n  Duration duration = kThemeAnimationDuration,\n  @required this.child,\n}) : assert(child != null),\n     assert(data != null),\n     super(key: key, curve: curve, duration: duration);<\/code><\/pre>\n    ",
            "href": "material\/AnimatedTheme\/AnimatedTheme.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.AnimatedTheme",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "curve",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "data",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ThemeData"
                },
                {
                    "name": "duration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "isMaterialAppTheme",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/AnimatedTheme\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_AnimatedThemeState createState() =&gt; _AnimatedThemeState();<\/code><\/pre>\n    ",
            "href": "material\/AnimatedTheme\/createState.html",
            "isDeprecated": "0",
            "type": "<_AnimatedThemeState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.AnimatedTheme",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/AnimatedTheme\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.AnimatedTheme",
            "params": []
        },
        {
            "desc": "<p>Specifies the color and typography values for descendant widgets.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ThemeData data\n\n<\/code><\/pre>\n        ",
            "href": "material\/AnimatedTheme\/data.html",
            "isDeprecated": "0",
            "type": "material.ThemeData",
            "memberOf": "material.AnimatedTheme",
            "params": []
        },
        {
            "desc": "<p>True if this theme was created by the <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>. See <a href=\"material\/AnimatedTheme\/isMaterialAppTheme.html\">Theme.isMaterialAppTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isMaterialAppTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/AnimatedTheme\/isMaterialAppTheme.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.AnimatedTheme",
            "params": []
        }
    ]
}