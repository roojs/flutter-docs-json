{
    "desc": "<p>A border that fits a circle within the available space.<\/p>\n<p>Typically used with <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> to draw a circle.<\/p>\n<p>The <a href=\"painting\/CircleBorder\/dimensions.html\">dimensions<\/a> assume that the border is being used in a square space.\nWhen applied to a rectangular space, the border paints in the center of the\nrectangle.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which, when used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, can also\ndescribe a circle.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/CircleBorder-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "painting",
    "name": "painting.CircleBorder",
    "shortname": "CircleBorder",
    "extends": [
        "painting.ShapeBorder",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a circle border.<\/p>\n<p>The <code>side<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CircleBorder({ this.side = BorderSide.none }) : assert(side != null);<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/CircleBorder.html",
            "isDeprecated": false,
            "type": "",
            "name": "CircleBorder",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "side",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                }
            ]
        },
        {
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/CircleBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/CircleBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/CircleBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addOval(Rect.fromCircle(\n      center: rect.center,\n      radius: math.max(0.0, rect.shortestSide \/ 2.0 - side.width),\n    ));\n}<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/getInnerPath.html",
            "isDeprecated": false,
            "type": "dart:ui.Path",
            "name": "getInnerPath",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "rect",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/CircleBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/CircleBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/CircleBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addOval(Rect.fromCircle(\n      center: rect.center,\n      radius: rect.shortestSide \/ 2.0,\n    ));\n}<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/getOuterPath.html",
            "isDeprecated": false,
            "type": "dart:ui.Path",
            "name": "getOuterPath",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "rect",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/CircleBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/CircleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a is CircleBorder)\n    return CircleBorder(side: BorderSide.lerp(a.side, side, t));\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/lerpFrom.html",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "name": "lerpFrom",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/CircleBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/CircleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b is CircleBorder)\n    return CircleBorder(side: BorderSide.lerp(side, b.side, t));\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/lerpTo.html",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "name": "lerpTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Rect rect, { TextDirection textDirection }) {\n  switch (side.style) {\n    case BorderStyle.none:\n      break;\n    case BorderStyle.solid:\n      canvas.drawCircle(rect.center, (rect.shortestSide - side.width) \/ 2.0, side.toPaint());\n  }\n}<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "canvas",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "rect",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/CircleBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder scale(double t) =&gt; CircleBorder(side: side.scale(t));<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/scale.html",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "name": "scale",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": [
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($side)';\n}<\/code><\/pre>\n    ",
            "href": "painting\/CircleBorder\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.CircleBorder",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/CircleBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/CircleBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.all(side.width);\n}<\/code><\/pre>\n        ",
            "href": "painting\/CircleBorder\/dimensions.html",
            "name": "dimensions",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.CircleBorder",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/CircleBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; side.hashCode;<\/code><\/pre>\n        ",
            "href": "painting\/CircleBorder\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.CircleBorder",
            "params": []
        },
        {
            "desc": "<p>The style of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide side\n\n<\/code><\/pre>\n        ",
            "href": "painting\/CircleBorder\/side.html",
            "name": "side",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.CircleBorder",
            "params": []
        }
    ]
}