{
    "desc": "<p>An abstract class for <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s that contains a single <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>, which explains more about the Sliver protocol.<\/li>\n<li>\n<a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>, which explains more about the Box protocol.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverToBoxAdapter-class.html\">RenderSliverToBoxAdapter<\/a>, which extends this class to size the child\naccording to its preferred size.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverFillRemaining-class.html\">RenderSliverFillRemaining<\/a>, which extends this class to size the child\nto fill the remaining space in the viewport.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverSingleBoxAdapter-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverSingleBoxAdapter",
    "shortname": "RenderSliverSingleBoxAdapter",
    "extends": [
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> that wraps a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverSingleBoxAdapter({\n  RenderBox child,\n}) {\n  this.child = child;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/RenderSliverSingleBoxAdapter.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Applies the transform that would be applied when painting the given child\nto the given matrix.<\/p>\n<p>Used by coordinate conversion functions to translate coordinates local to\none render object into coordinates local to another render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid applyPaintTransform(RenderObject child, Matrix4 transform) {\n  assert(child != null);\n  assert(child == this.child);\n  final SliverPhysicalParentData childParentData = child.parentData;\n  childParentData.applyPaintTransform(transform);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/applyPaintTransform.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "transform",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the leading <em>visible<\/em> edge of the sliver to the\nside of the given child closest to that edge.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the top\nof the visible portion of the sliver to the top of the child. On the other\nhand, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then this is the distance from the bottom\nof the visible portion of the sliver to the bottom of the child. In both\ncases, this is the direction of increasing\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a> and\n<a href=\"rendering\/SliverLogicalParentData\/layoutOffset.html\">SliverLogicalParentData.layoutOffset<\/a>.<\/p>\n<p>For children that are <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s, the leading edge of the <em>child<\/em>\nwill be the leading <em>visible<\/em> edge of the child, not the part of the child\nthat would locally be a scroll offset 0.0. For children that are not\n<a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s, for example a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> child, it's the actual distance\nto the edge of the box, since those boxes do not know how to handle being\nscrolled.<\/p>\n<p>This method differs from <a href=\"rendering\/RenderSliver\/childScrollOffset.html\">childScrollOffset<\/a> in that\n<a href=\"rendering\/RenderSliverSingleBoxAdapter\/childMainAxisPosition.html\">childMainAxisPosition<\/a> gives the distance from the leading <em>visible<\/em> edge\nof the sliver whereas <a href=\"rendering\/RenderSliver\/childScrollOffset.html\">childScrollOffset<\/a> gives the distance from the\nsliver's zero scroll offset.<\/p>\n<p>Calling this for a child that is not visible is not valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childMainAxisPosition(RenderBox child) {\n  return -constraints.scrollOffset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/childMainAxisPosition.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>Used by <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n<p>For a discussion of the semantics of the arguments, see <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { @required double mainAxisPosition, @required double crossAxisPosition }) {\n  assert(geometry.hitTestExtent &gt; 0.0);\n  if (child != null)\n    return hitTestBoxChild(result, child, mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition);\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/hitTestChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "crossAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "mainAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "result",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (child != null &amp;&amp; geometry.visible) {\n    final SliverPhysicalParentData childParentData = child.parentData;\n    context.paintChild(child, offset + childParentData.paintOffset);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Sets the <a href=\"rendering\/SliverPhysicalParentData\/paintOffset.html\">SliverPhysicalParentData.paintOffset<\/a> for the given child\naccording to the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">SliverConstraints.axisDirection<\/a> and\n<a href=\"rendering\/SliverConstraints\/growthDirection.html\">SliverConstraints.growthDirection<\/a> and the given geometry.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid setChildParentData(RenderObject child, SliverConstraints constraints, SliverGeometry geometry) {\n  final SliverPhysicalParentData childParentData = child.parentData;\n  assert(constraints.axisDirection != null);\n  assert(constraints.growthDirection != null);\n  switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n    case AxisDirection.up:\n      childParentData.paintOffset = Offset(0.0, -(geometry.scrollExtent - (geometry.paintExtent + constraints.scrollOffset)));\n      break;\n    case AxisDirection.right:\n      childParentData.paintOffset = Offset(-constraints.scrollOffset, 0.0);\n      break;\n    case AxisDirection.down:\n      childParentData.paintOffset = Offset(0.0, -constraints.scrollOffset);\n      break;\n    case AxisDirection.left:\n      childParentData.paintOffset = Offset(-(geometry.scrollExtent - (geometry.paintExtent + constraints.scrollOffset)), 0.0);\n      break;\n  }\n  assert(childParentData.paintOffset != null);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/setChildParentData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "constraints",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SliverConstraints"
                },
                {
                    "name": "geometry",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SliverGeometry"
                }
            ]
        },
        {
            "desc": "<p>Override to setup parent data correctly for your children.<\/p>\n<p>You can call this function to set up the parent data for child before the\nchild is added to the parent's child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderObject child) {\n  if (child.parentData is! SliverPhysicalParentData)\n    child.parentData = SliverPhysicalParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverSingleBoxAdapter\/setupParentData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverSingleBoxAdapter",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        }
    ],
    "props": []
}