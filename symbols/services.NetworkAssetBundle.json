{
    "name": "services.NetworkAssetBundle",
    "extends": [
        "services.AssetBundle",
        "dart:core.Object"
    ],
    "memberOf": "services",
    "events": [],
    "methods": [
        {
            "name": "NetworkAssetBundle",
            "type": "",
            "desc": "<p>Creates an network asset bundle that resolves asset keys as URLs relative\nto the given base URL.<\/p>\n    ",
            "static": false,
            "memberOf": "services.NetworkAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "baseUrl",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "services\/NetworkAssetBundle\/NetworkAssetBundle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NetworkAssetBundle(Uri baseUrl)\n  : _baseUrl = baseUrl,\n    _httpClient = HttpClient();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "load",
            "type": "dart:async.Future<dart:typed_data.ByteData>",
            "desc": "<p>Retrieve a binary resource from the asset bundle as a data stream.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n    ",
            "static": false,
            "memberOf": "services.NetworkAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/NetworkAssetBundle\/load.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;ByteData&gt; load(String key) async {\n  final HttpClientRequest request = await _httpClient.getUrl(_urlFromKey(key));\n  final HttpClientResponse response = await request.close();\n  if (response.statusCode != HttpStatus.ok)\n    throw FlutterError(\n      'Unable to load asset: $key\\n'\n      'HTTP status code: ${response.statusCode}'\n    );\n  final Uint8List bytes = await consolidateHttpClientResponseBytes(response);\n  return bytes.buffer.asByteData();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:typed_data.ByteData"
            ]
        },
        {
            "name": "loadStructuredData",
            "type": "dart:async.Future",
            "desc": "<p>Retrieve a string from the asset bundle, parse it with the given function,\nand return the function's result.<\/p>\n<p>The result is not cached. The parser is run each time the resource is\nfetched.<\/p>\n    ",
            "static": false,
            "memberOf": "services.NetworkAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/NetworkAssetBundle\/loadStructuredData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; loadStructuredData&lt;T&gt;(String key, Future&lt;T&gt; parser(String value)) async {\n  assert(key != null);\n  assert(parser != null);\n  return parser(await loadString(key));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "services.NetworkAssetBundle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "services\/NetworkAssetBundle\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}($_baseUrl)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "services\/NetworkAssetBundle-class.html",
    "desc": "<p>An <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> that loads resources over the network.<\/p>\n<p>This asset bundle does not cache any resources, though the underlying\nnetwork stack may implement some level of caching itself.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "NetworkAssetBundle"
}