{
    "name": "material.FloatingActionButtonAnimator",
    "extends": [],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "FloatingActionButtonAnimator",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "material.FloatingActionButtonAnimator",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "material\/FloatingActionButtonAnimator\/FloatingActionButtonAnimator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FloatingActionButtonAnimator();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getAnimationRestart",
            "type": "dart:core.double",
            "desc": "<p>Gets the progress value to restart a motion animation from when the animation is interrupted.<\/p>\n<p><code>previousValue<\/code> is the value of the animation before it was interrupted.<\/p>\n<p>The restart of the animation will affect all three parts of the motion animation:\noffset animation, scale animation, and rotation animation.<\/p>\n<p>An interruption triggers if the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> is given a new <a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>\nwhile it is still animating a transition between two previous <a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>s.<\/p>\n<p>A sensible default is usually 0.0, which is the same as restarting\nthe animation from the beginning, regardless of the original state of the animation.<\/p>\n    ",
            "static": false,
            "memberOf": "material.FloatingActionButtonAnimator",
            "sig": "",
            "params": [
                {
                    "name": "previousValue",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/FloatingActionButtonAnimator\/getAnimationRestart.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getAnimationRestart(double previousValue) =&gt; 0.0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getOffset",
            "type": "dart:ui.Offset",
            "desc": "<p>Gets the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>'s position relative to the origin of the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a> based on <code>progress<\/code>.<\/p>\n<p><code>begin<\/code> is the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> provided by the previous\n<a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>.<\/p>\n<p><code>end<\/code> is the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> provided by the new\n<a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>.<\/p>\n<p><code>progress<\/code> is the current progress of the transition animation.\nWhen <code>progress<\/code> is 0.0, the returned <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> should be equal to <code>begin<\/code>.\nwhen <code>progress<\/code> is 1.0, the returned <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> should be equal to <code>end<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.FloatingActionButtonAnimator",
            "sig": "",
            "params": [
                {
                    "name": "begin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "progress",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/FloatingActionButtonAnimator\/getOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getOffset({ @required Offset begin, @required Offset end, @required double progress });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getRotationAnimation",
            "type": "animation.Animation<dart:core.double>",
            "desc": "<p>Animates the rotation of <a href=\"material\/Scaffold\/floatingActionButton.html\">Scaffold.floatingActionButton<\/a>.<\/p>\n<p>The animation should both start and end with a value of 0.0 or 1.0.<\/p>\n<p>The animation values are a fraction of a full circle, with 0.0 and 1.0\ncorresponding to 0 and 360 degrees, while 0.5 corresponds to 180 degrees.<\/p>\n<p>For example, to create a rotation animation that rotates the\n<a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> through a full circle:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimation&lt;double&gt; getRotationAnimation({@required Animation&lt;double&gt; parent}) {\n  return Tween&lt;double&gt;(begin: 0.0, end: 1.0).animate(parent);\n}\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "material.FloatingActionButtonAnimator",
            "sig": "",
            "params": [
                {
                    "name": "parent",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "material\/FloatingActionButtonAnimator\/getRotationAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; getRotationAnimation({ @required Animation&lt;double&gt; parent });<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "animation.Animation",
                "dart:core.double"
            ]
        },
        {
            "name": "getScaleAnimation",
            "type": "animation.Animation<dart:core.double>",
            "desc": "<p>Animates the scale of the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>.<\/p>\n<p>The animation should both start and end with a value of 1.0.<\/p>\n<p>For example, to create an animation that linearly scales out and then back in,\nyou could join animations that pass each other:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">  @override\n  Animation&lt;double&gt; getScaleAnimation({@required Animation&lt;double&gt; parent}) {\n    \/\/ The animations will cross at value 0, and the train will return to 1.0.\n    return TrainHoppingAnimation(\n      Tween&lt;double&gt;(begin: 1.0, end: -1.0).animate(parent),\n      Tween&lt;double&gt;(begin: -1.0, end: 1.0).animate(parent),\n    );\n  }\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "material.FloatingActionButtonAnimator",
            "sig": "",
            "params": [
                {
                    "name": "parent",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "material\/FloatingActionButtonAnimator\/getScaleAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; getScaleAnimation({ @required Animation&lt;double&gt; parent });<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "animation.Animation",
                "dart:core.double"
            ]
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "material.FloatingActionButtonAnimator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/FloatingActionButtonAnimator\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "type": "",
            "href": "material\/FloatingActionButtonAnimator\/scaling-constant.html",
            "desc": "<p>Moves the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> by scaling out and then in at a new\n<a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>.<\/p>\n<p>This animator shrinks the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> down until it disappears, then\ngrows it back to full size at its new <a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>.<\/p>\n<p>This is the default <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> motion animation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FloatingActionButtonAnimator scaling = _ScalingFabMotionAnimator()\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "scaling",
            "memberOf": "material.FloatingActionButtonAnimator"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/FloatingActionButtonAnimator-class.html",
    "desc": "<p>Provider of animations to move the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> between <a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>s.<\/p>\n<p>The <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> uses <a href=\"material\/Scaffold\/floatingActionButtonAnimator.html\">Scaffold.floatingActionButtonAnimator<\/a> to define:<\/p>\n<ul>\n<li>The <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> of the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> between the old and new\n<a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>s as part of the transition animation.<\/li>\n<li>An <a href=\"animation\/Animation-class.html\">Animation<\/a> to scale the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> during the transition.<\/li>\n<li>An <a href=\"animation\/Animation-class.html\">Animation<\/a> to rotate the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> during the transition.<\/li>\n<li>Where to start a new animation from if an animation is interrupted.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>, which is a circular button typically shown in the\nbottom right corner of the app.<\/li>\n<li>\n<a href=\"material\/FloatingActionButtonLocation-class.html\">FloatingActionButtonLocation<\/a>, which the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> uses to place the\n<a href=\"material\/Scaffold\/floatingActionButton.html\">Scaffold.floatingActionButton<\/a> within the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a>'s layout.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FloatingActionButtonAnimator"
}