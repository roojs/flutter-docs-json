{
    "desc": "<p>A color represented using <a href=\"painting\/HSLColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSLColor\/hue.html\">hue<\/a>, <a href=\"painting\/HSLColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSLColor\/lightness.html\">lightness<\/a>.<\/p>\n<p>An <a href=\"painting\/HSLColor-class.html\">HSLColor<\/a> is represented in a parameter space that's based up human\nperception of colored light. The representation is useful for some color\ncomputations (e.g., combining colors of light), because interpolation and\npicking of colors as red, green, and blue channels doesn't always produce\nintuitive results.<\/p>\n<p>HSL is a perceptual color model, placing fully saturated colors around a\ncircle (conceptually) at a lightness of \u200b0.5, with a lightness of 0.0 being\ncompletely black, and a lightness of 1.0 being completely white. As the\nlightness increases or decreases from 0.5, the apparent saturation decreases\nproportionally (even though the <a href=\"painting\/HSLColor\/saturation.html\">saturation<\/a> parameter hasn't changed).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/HSVColor-class.html\">HSVColor<\/a>, a color that uses a color space based on human perception of\npigments (e.g. paint and printer's ink).<\/li>\n<li>\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/HSL_and_HSV\">HSV and HSL<\/a> Wikipedia\narticle, which this implementation is based upon.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/HSLColor-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "painting",
    "name": "painting.HSLColor",
    "shortname": "HSLColor",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Linearly interpolate between two HSLColors.<\/p>\n<p>The colors are interpolated by interpolating the <a href=\"painting\/HSLColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSLColor\/hue.html\">hue<\/a>,\n<a href=\"painting\/HSLColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSLColor\/lightness.html\">lightness<\/a> channels separately, which usually leads to\na more pleasing effect than <a href=\"painting\/HSLColor\/lerp.html\">Color.lerp<\/a> (which interpolates the red,\ngreen, and blue channels separately).<\/p>\n<p>If either color is null, this function linearly interpolates from a\ntransparent instance of the other color. This is usually preferable to\ninterpolating from <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a> (<code>const Color(0x00000000)<\/code>) since\nthat will interpolate from a transparent red and cycle through the hues to\nmatch the target color, regardless of what that color's hue is.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values between them\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid\n(and can easily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values outside of the valid range for each channel will be clamped.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static HSLColor lerp(HSLColor a, HSLColor b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b._scaleAlpha(t);\n  if (b == null)\n    return a._scaleAlpha(1.0 - t);\n  return HSLColor.fromAHSL(\n    lerpDouble(a.alpha, b.alpha, t).clamp(0.0, 1.0),\n    lerpDouble(a.hue, b.hue, t) % 360.0,\n    lerpDouble(a.saturation, b.saturation, t).clamp(0.0, 1.0),\n    lerpDouble(a.lightness, b.lightness, t).clamp(0.0, 1.0),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/lerp.html",
            "isDeprecated": false,
            "type": "painting.HSLColor",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.HSLColor"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.HSLColor"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns this HSL color in RGB.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color toColor() {\n  final double chroma = (1.0 - (2.0 * lightness - 1.0).abs()) * saturation;\n  final double secondary = chroma * (1.0 - (((hue \/ 60.0) % 2.0) - 1.0).abs());\n  final double match = lightness - chroma \/ 2.0;\n\n  return _colorFromHue(alpha, hue, chroma, secondary, match);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/toColor.html",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "name": "toColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($alpha, $hue, $saturation, $lightness)';<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": []
        },
        {
            "desc": "<p>Returns a copy of this color with the alpha parameter replaced with the\ngiven value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withAlpha(double alpha) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/withAlpha.html",
            "isDeprecated": false,
            "type": "painting.HSLColor",
            "name": "withAlpha",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": [
                {
                    "name": "alpha",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>hue<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withHue(double hue) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/withHue.html",
            "isDeprecated": false,
            "type": "painting.HSLColor",
            "name": "withHue",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": [
                {
                    "name": "hue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>lightness<\/code> parameter replaced with\nthe given value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withLightness(double lightness) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/withLightness.html",
            "isDeprecated": false,
            "type": "painting.HSLColor",
            "name": "withLightness",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": [
                {
                    "name": "lightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>saturation<\/code> parameter replaced with\nthe given value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withSaturation(double saturation) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSLColor\/withSaturation.html",
            "isDeprecated": false,
            "type": "painting.HSLColor",
            "name": "withSaturation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSLColor",
            "params": [
                {
                    "name": "saturation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Alpha, from 0.0 to 1.0. The describes the transparency of the color.\nA value of 0.0 is fully transparent, and 1.0 is fully opaque.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double alpha\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSLColor\/alpha.html",
            "name": "alpha",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.HSLColor",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/HSLColor\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(alpha, hue, saturation, lightness);<\/code><\/pre>\n        ",
            "href": "painting\/HSLColor\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.HSLColor",
            "params": []
        },
        {
            "desc": "<p>Hue, from 0.0 to 360.0. Describes which color of the spectrum is\nrepresented. A value of 0.0 represents red, as does 360.0. Values in\nbetween go through all the hues representable in RGB. You can think of\nthis as selecting which color filter is placed over a light.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double hue\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSLColor\/hue.html",
            "name": "hue",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.HSLColor",
            "params": []
        },
        {
            "desc": "<p>Lightness, from 0.0 to 1.0. The lightness of a color describes how bright\na color is. A value of 0.0 indicates black, and 1.0 indicates white. You\ncan think of this as the intensity of the light behind the filter. As the\nlightness approaches 0.5, the colors get brighter and appear more\nsaturated, and over 0.5, the colors start to become less saturated and\napproach white at 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double lightness\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSLColor\/lightness.html",
            "name": "lightness",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.HSLColor",
            "params": []
        },
        {
            "desc": "<p>Saturation, from 0.0 to 1.0. This describes how colorful the color is.\n0.0 implies a shade of grey (i.e. no pigment), and 1.0 implies a color as\nvibrant as that hue gets. You can think of this as the purity of the\ncolor filter over the light.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double saturation\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSLColor\/saturation.html",
            "name": "saturation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.HSLColor",
            "params": []
        }
    ]
}