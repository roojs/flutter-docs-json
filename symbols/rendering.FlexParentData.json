{
    "name": "rendering.FlexParentData",
    "extends": [
        "rendering.RenderBox",
        "rendering.ContainerBoxParentData",
        "rendering.BoxParentData",
        "rendering.ParentData",
        "dart:core.Object"
    ],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "FlexParentData",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "rendering.FlexParentData",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/FlexParentData\/FlexParentData.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.FlexParentData",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/FlexParentData\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${super.toString()}; flex=$flex; fit=$fit';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "fit",
            "type": "rendering.FlexFit",
            "types": [],
            "desc": "<p>How a flexible child is inscribed into the available space.<\/p>\n<p>If <a href=\"rendering\/FlexParentData\/flex.html\">flex<\/a> is non-zero, the <a href=\"rendering\/FlexParentData\/fit.html\">fit<\/a> determines whether the child fills the\nspace the parent makes available during layout. If the fit is\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.tight<\/a>, the child is required to fill the available space. If the\nfit is <a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a>, the child can be at most as large as the available\nspace (but is allowed to be smaller).<\/p>\n        ",
            "memberOf": "rendering.FlexParentData",
            "isConstant": false,
            "href": "rendering\/FlexParentData\/fit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FlexFit fit\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "flex",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The flex factor to use for this child<\/p>\n<p>If null or zero, the child is inflexible and determines its own size. If\nnon-zero, the amount of space the child's can occupy in the main axis is\ndetermined by dividing the free space (after placing the inflexible\nchildren) according to the flex factors of the flexible children.<\/p>\n        ",
            "memberOf": "rendering.FlexParentData",
            "isConstant": false,
            "href": "rendering\/FlexParentData\/flex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int flex\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/FlexParentData-class.html",
    "desc": "<p>Parent data for use with <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FlexParentData"
}