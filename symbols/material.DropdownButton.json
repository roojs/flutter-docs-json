{
    "name": "material.DropdownButton",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [
        {
            "name": "onChanged",
            "type": "foundation.ValueChanged",
            "desc": "<p>Called when the user selects an item.<\/p>\n<p>If the <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> callback is null or the list of <a href=\"material\/DropdownButton\/items.html\">items<\/a> is null\nthen the dropdown button will be disabled, i.e. its arrow will be\ndisplayed in grey and it will not respond to input. A disabled button\nwill display the <a href=\"material\/DropdownButton\/disabledHint.html\">disabledHint<\/a> widget if it is non-null.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/DropdownButton\/onChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;T&gt; onChanged\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "DropdownButton",
            "type": "",
            "desc": "<p>Creates a dropdown button.<\/p>\n<p>The <code>items<\/code> must have distinct values. If <code>value<\/code> isn't null then it\nmust be equal to one of the <code>DropDownMenuItem<\/code> values. If <code>items<\/code> or\n<code>onChanged<\/code> is null, the button will be disabled, the down arrow\nwill be greyed out, and the <code>disabledHint<\/code> will be shown (if provided).<\/p>\n<p>The <code>elevation<\/code> and <code>iconSize<\/code> arguments must not be null (they both have\ndefaults, so do not need to be specified). The boolean <code>isDense<\/code> and\n<code>isExpanded<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "material.DropdownButton",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "items",
                    "type": "dart:core.List<material.DropdownMenuItem>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "material.DropdownMenuItem"
                    ]
                },
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "hint",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "disabledHint",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onChanged",
                    "type": "foundation.ValueChanged",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "underline",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "icon",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "iconDisabledColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "iconEnabledColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "iconSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDense",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isExpanded",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/DropdownButton\/DropdownButton.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DropdownButton({\n  Key key,\n  @required this.items,\n  this.value,\n  this.hint,\n  this.disabledHint,\n  @required this.onChanged,\n  this.elevation = 8,\n  this.style,\n  this.underline,\n  this.icon,\n  this.iconDisabledColor,\n  this.iconEnabledColor,\n  this.iconSize = 24.0,\n  this.isDense = false,\n  this.isExpanded = false,\n}) : assert(items == null || items.isEmpty || value == null || items.where((DropdownMenuItem&lt;T&gt; item) =&gt; item.value == value).length == 1),\n     assert(elevation != null),\n     assert(iconSize != null),\n     assert(isDense != null),\n     assert(isExpanded != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/DropdownButton\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.DropdownButton",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/DropdownButton\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_DropdownButtonState&lt;T&gt; createState() =&gt; _DropdownButtonState&lt;T&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "disabledHint",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>A message to show when the dropdown is disabled.<\/p>\n<p>Displayed if <a href=\"material\/DropdownButton\/items.html\">items<\/a> or <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> is null.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/disabledHint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget disabledHint\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "elevation",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The z-coordinate at which to place the menu when open.<\/p>\n<p>The following elevations have defined shadows: 1, 2, 3, 4, 6, 8, 9, 12,\n16, and 24. See <a href=\"material\/kElevationToShadow-constant.html\">kElevationToShadow<\/a>.<\/p>\n<p>Defaults to 8, the appropriate elevation for dropdown buttons.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/elevation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int elevation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hint",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>Displayed if <a href=\"material\/DropdownButton\/value.html\">value<\/a> is null.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/hint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget hint\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "icon",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget to use for the drop-down button's icon.<\/p>\n<p>Defaults to an <a href=\"widgets\/Icon-class.html\">Icon<\/a> with the <a href=\"material\/Icons\/arrow_drop_down-constant.html\">Icons.arrow_drop_down<\/a> glyph.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/icon.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget icon\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iconDisabledColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color of any <a href=\"widgets\/Icon-class.html\">Icon<\/a> descendant of <a href=\"material\/DropdownButton\/icon.html\">icon<\/a> if this button is disabled,\ni.e. if <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> is null.<\/p>\n<p>Defaults to <code>Colors.grey.shade400<\/code> when the theme's\n<a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a> is <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a> and to\n<a href=\"material\/Colors\/white10-constant.html\">Colors.white10<\/a> when it is <a href=\"dart-ui\/Brightness-class.html\">Brightness.dark<\/a><\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/iconDisabledColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color iconDisabledColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iconEnabledColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color of any <a href=\"widgets\/Icon-class.html\">Icon<\/a> descendant of <a href=\"material\/DropdownButton\/icon.html\">icon<\/a> if this button is enabled,\ni.e. if <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> is defined.<\/p>\n<p>Defaults to <code>Colors.grey.shade700<\/code> when the theme's\n<a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a> is <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a> and to\n<a href=\"material\/Colors\/white70-constant.html\">Colors.white70<\/a> when it is <a href=\"dart-ui\/Brightness-class.html\">Brightness.dark<\/a><\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/iconEnabledColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color iconEnabledColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iconSize",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The size to use for the drop-down button's down arrow icon button.<\/p>\n<p>Defaults to 24.0.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/iconSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double iconSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isDense",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Reduce the button's height.<\/p>\n<p>By default this button's height is the same as its menu items' heights.\nIf isDense is true, the button's height is reduced by about half. This\ncan be useful when the button is embedded in a container that adds\nits own decorations, like <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/isDense.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDense\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isExpanded",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Set the dropdown's inner contents to horizontally fill its parent.<\/p>\n<p>By default this button's inner width is the minimum size of its contents.\nIf <a href=\"material\/DropdownButton\/isExpanded.html\">isExpanded<\/a> is true, the inner width is expanded to fill its\nsurrounding container.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/isExpanded.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isExpanded\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "items",
            "type": "dart:core.List<material.DropdownMenuItem>",
            "types": [
                "dart:core.List",
                "material.DropdownMenuItem"
            ],
            "desc": "<p>The list of items the user can select.<\/p>\n<p>If the <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> callback is null or the list of items is null\nthen the dropdown button will be disabled, i.e. its arrow will be\ndisplayed in grey and it will not respond to input. A disabled button\nwill display the <a href=\"material\/DropdownButton\/disabledHint.html\">disabledHint<\/a> widget if it is non-null.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/items.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;DropdownMenuItem&lt;T&gt;&gt; items\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "style",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>The text style to use for text in the dropdown button and the dropdown\nmenu that appears when you tap the button.<\/p>\n<p>Defaults to the <a href=\"material\/TextTheme\/subhead.html\">TextTheme.subhead<\/a> value of the current\n<a href=\"material\/ThemeData\/textTheme.html\">ThemeData.textTheme<\/a> of the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/style.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle style\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "underline",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget to use for drawing the drop-down button's underline.<\/p>\n<p>Defaults to a 0.0 width bottom border with color 0xFFBDBDBD.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/underline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget underline\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "value",
            "type": "",
            "types": [],
            "desc": "<p>The value of the currently selected <a href=\"material\/DropdownMenuItem-class.html\">DropdownMenuItem<\/a>, or null if no\nitem has been selected. If <code>value<\/code> is null then the menu is popped up as\nif the first item were selected.<\/p>\n        ",
            "memberOf": "material.DropdownButton",
            "isConstant": false,
            "href": "material\/DropdownButton\/value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T value\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/DropdownButton-class.html",
    "desc": "<p>A material design button for selecting from a list of items.<\/p>\n<p>A dropdown button lets the user select from a number of items. The button\nshows the currently selected item as well as an arrow that opens a menu for\nselecting another item.<\/p>\n<p>The type <code>T<\/code> is the type of the <a href=\"material\/DropdownButton\/value.html\">value<\/a> that each dropdown item represents.\nAll the entries in a given menu must represent values with consistent types.\nTypically, an enum is used. Each <a href=\"material\/DropdownMenuItem-class.html\">DropdownMenuItem<\/a> in <a href=\"material\/DropdownButton\/items.html\">items<\/a> must be\nspecialized with that same type argument.<\/p>\n<p>The <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> callback should update a state variable that defines the\ndropdown's value. It should also call <a href=\"widgets\/State\/setState.html\">State.setState<\/a> to rebuild the\ndropdown with the new value.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis sample shows a <code>DropdownButton<\/code> whose value is one of\n\"One\", \"Two\", \"Free\", or \"Four\".\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String dropdownValue = 'One';\n\n\/\/ ...\n\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: DropdownButton&lt;String&gt;(\n        value: dropdownValue,\n        onChanged: (String newValue) {\n          setState(() {\n            dropdownValue = newValue;\n          });\n        },\n        items: &lt;String&gt;['One', 'Two', 'Free', 'Four']\n          .map&lt;DropdownMenuItem&lt;String&gt;&gt;((String value) {\n            return DropdownMenuItem&lt;String&gt;(\n              value: value,\n              child: Text(value),\n            );\n          })\n          .toList(),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.DropdownButton.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.DropdownButton.1\n\n\/\/ This sample shows a `DropdownButton` whose value is one of\n\/\/ \"One\", \"Two\", \"Free\", or \"Four\".\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\nString dropdownValue = 'One';\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: DropdownButton&lt;String&gt;(\n          value: dropdownValue,\n          onChanged: (String newValue) {\n            setState(() {\n              dropdownValue = newValue;\n            });\n          },\n          items: &lt;String&gt;['One', 'Two', 'Free', 'Four']\n              .map&lt;DropdownMenuItem&lt;String&gt;&gt;((String value) {\n            return DropdownMenuItem&lt;String&gt;(\n              value: value,\n              child: Text(value),\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>If the <a href=\"material\/DropdownButton\/onChanged.html\">onChanged<\/a> callback is null or the list of <a href=\"material\/DropdownButton\/items.html\">items<\/a> is null\nthen the dropdown button will be disabled, i.e. its arrow will be\ndisplayed in grey and it will not respond to input. A disabled button\nwill display the <a href=\"material\/DropdownButton\/disabledHint.html\">disabledHint<\/a> widget if it is non-null.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/DropdownMenuItem-class.html\">DropdownMenuItem<\/a>, the class used to represent the <a href=\"material\/DropdownButton\/items.html\">items<\/a>.<\/li>\n<li>\n<a href=\"material\/DropdownButtonHideUnderline-class.html\">DropdownButtonHideUnderline<\/a>, which prevents its descendant dropdown buttons\nfrom displaying their underlines.<\/li>\n<li>\n<a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>, ordinary buttons that trigger a single action.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/menus.html#dropdown-menu\">material.io\/design\/components\/menus.html#dropdown-menu<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DropdownButton"
}