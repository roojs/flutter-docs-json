{
    "desc": "<p>A <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> observer that notifies <a href=\"widgets\/RouteAware-class.html\">RouteAware<\/a>s of changes to the\nstate of their <a href=\"widgets\/Route-class.html\">Route<\/a>.<\/p>\n<p><a href=\"widgets\/RouteObserver-class.html\">RouteObserver<\/a> informs subscribers whenever a route of type <code>R<\/code> is pushed\non top of their own route of type <code>R<\/code> or popped from it. This is for example\nuseful to keep track of page transitions, e.g. a <code>RouteObserver&lt;PageRoute&gt;<\/code>\nwill inform subscribed <a href=\"widgets\/RouteAware-class.html\">RouteAware<\/a>s whenever the user navigates away from\nthe current page route to another page route.<\/p>\n<p>To be informed about route changes of any type, consider instantiating a\n<code>RouteObserver&lt;Route&gt;<\/code>.<\/p>\n<h2 id=\"type-arguments\">Type arguments<\/h2>\n<p>When using more aggressive\n<a href=\"http:\/\/dart-lang.github.io\/linter\/lints\/\">lints<\/a>, in particular lints such\nas <code>always_specify_types<\/code>, the Dart analyzer will require that certain types\nbe given with their type arguments. Since the <a href=\"widgets\/Route-class.html\">Route<\/a> class and its\nsubclasses have a type argument, this includes the arguments passed to this\nclass. Consider using <code>dynamic<\/code> to specify the entire class of routes rather\nthan only specific subtypes. For example, to watch for all <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>\nvariants, the <code>RouteObserver&lt;PageRoute&lt;dynamic&gt;&gt;<\/code> type may be used.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTo make a <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> aware of its current <a href=\"widgets\/Route-class.html\">Route<\/a> state, implement\n<a href=\"widgets\/RouteAware-class.html\">RouteAware<\/a> in its <a href=\"widgets\/State-class.html\">State<\/a> and subscribe it to a <a href=\"widgets\/RouteObserver-class.html\">RouteObserver<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/ Register the RouteObserver as a navigation observer.\nfinal RouteObserver&lt;PageRoute&gt; routeObserver = RouteObserver&lt;PageRoute&gt;();\nvoid main() {\n  runApp(MaterialApp(\n    home: Container(),\n    navigatorObservers: [routeObserver],\n  ));\n}\n\nclass RouteAwareWidget extends StatefulWidget {\n  State&lt;RouteAwareWidget&gt; createState() =&gt; RouteAwareWidgetState();\n}\n\n\/\/ Implement RouteAware in a widget's state and subscribe it to the RouteObserver.\nclass RouteAwareWidgetState extends State&lt;RouteAwareWidget&gt; with RouteAware {\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    routeObserver.subscribe(this, ModalRoute.of(context));\n  }\n\n  @override\n  void dispose() {\n    routeObserver.unsubscribe(this);\n    super.dispose();\n  }\n\n  @override\n  void didPush() {\n    \/\/ Route was pushed onto navigator and is now topmost route.\n  }\n\n  @override\n  void didPopNext() {\n    \/\/ Covering route was popped off the navigator.\n  }\n\n  @override\n  Widget build(BuildContext context) =&gt; Container();\n\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/RouteObserver-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.RouteObserver",
    "shortname": "RouteObserver",
    "extends": [
        "widgets.NavigatorObserver",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "widgets\/RouteObserver\/RouteObserver.html",
            "isDeprecated": false,
            "type": "",
            "name": "RouteObserver",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.RouteObserver",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> popped <code>route<\/code>.<\/p>\n<p>The route immediately below that one, and thus the newly active\nroute, is <code>previousRoute<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didPop(Route&lt;dynamic&gt; route, Route&lt;dynamic&gt; previousRoute) {\n  if (route is R &amp;&amp; previousRoute is R) {\n    final List&lt;RouteAware&gt; previousSubscribers = _listeners[previousRoute]?.toList();\n\n    if (previousSubscribers != null) {\n      for (RouteAware routeAware in previousSubscribers) {\n        routeAware.didPopNext();\n      }\n    }\n\n    final List&lt;RouteAware&gt; subscribers = _listeners[route]?.toList();\n\n    if (subscribers != null) {\n      for (RouteAware routeAware in subscribers) {\n        routeAware.didPop();\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RouteObserver\/didPop.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didPop",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RouteObserver",
            "params": [
                {
                    "name": "previousRoute",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Route"
                },
                {
                    "name": "route",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushed <code>route<\/code>.<\/p>\n<p>The route immediately below that one, and thus the previously active\nroute, is <code>previousRoute<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didPush(Route&lt;dynamic&gt; route, Route&lt;dynamic&gt; previousRoute) {\n  if (route is R &amp;&amp; previousRoute is R) {\n    final Set&lt;RouteAware&gt; previousSubscribers = _listeners[previousRoute];\n\n    if (previousSubscribers != null) {\n      for (RouteAware routeAware in previousSubscribers) {\n        routeAware.didPushNext();\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RouteObserver\/didPush.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didPush",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RouteObserver",
            "params": [
                {
                    "name": "previousRoute",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Route"
                },
                {
                    "name": "route",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>Subscribe <code>routeAware<\/code> to be informed about changes to <code>route<\/code>.<\/p>\n<p>Going forward, <code>routeAware<\/code> will be informed about qualifying changes\nto <code>route<\/code>, e.g. when <code>route<\/code> is covered by another route or when <code>route<\/code>\nis popped off the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void subscribe(RouteAware routeAware, R route) {\n  assert(routeAware != null);\n  assert(route != null);\n  final Set&lt;RouteAware&gt; subscribers = _listeners.putIfAbsent(route, () =&gt; &lt;RouteAware&gt;{});\n  if (subscribers.add(routeAware)) {\n    routeAware.didPush();\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RouteObserver\/subscribe.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "subscribe",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RouteObserver",
            "params": [
                {
                    "name": "route",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<R>"
                },
                {
                    "name": "routeAware",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.RouteAware"
                }
            ]
        },
        {
            "desc": "<p>Unsubscribe <code>routeAware<\/code>.<\/p>\n<p><code>routeAware<\/code> is no longer informed about changes to its route. If the given argument was\nsubscribed to multiple types, this will unregister it (once) from each type.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unsubscribe(RouteAware routeAware) {\n  assert(routeAware != null);\n  for (R route in _listeners.keys) {\n    final Set&lt;RouteAware&gt; subscribers = _listeners[route];\n    subscribers?.remove(routeAware);\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RouteObserver\/unsubscribe.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "unsubscribe",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RouteObserver",
            "params": [
                {
                    "name": "routeAware",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.RouteAware"
                }
            ]
        }
    ],
    "props": []
}