{
    "desc": "<p>Provides lightweight syntax for getting frequently used widget <a href=\"flutter_test\/Finder-class.html\">Finder<\/a>s.<\/p>\n<p>This class is instantiated once, as <a href=\"flutter_test\/find-constant.html\">find<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "flutter_test\/CommonFinders-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_test",
    "name": "flutter_test.CommonFinders",
    "shortname": "CommonFinders",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Finds widgets that are ancestors of the <code>of<\/code> parameter and that match\nthe <code>matching<\/code> parameter.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Test if a Text widget that contains 'faded' is the\n\/\/ descendant of an Opacity widget with opacity 0.5:\nexpect(\n  tester.widget&lt;Opacity&gt;(\n    find.ancestor(\n      of: find.text('faded'),\n      matching: find.byType('Opacity'),\n    )\n  ).opacity,\n  0.5\n);\n<\/code><\/pre>\n<p>If the <code>matchRoot<\/code> argument is true then the widget(s) specified by <code>of<\/code>\nwill be matched along with the ancestors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder ancestor({ Finder of, Finder matching, bool matchRoot = false }) {\n  return _AncestorFinder(of, matching, matchRoot: matchRoot);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/ancestor.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "matchRoot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "matching",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "of",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets using an element <code>predicate<\/code>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byElementPredicate(\n  \/\/ finds elements of type SingleChildRenderObjectElement, including\n  \/\/ those that are actually subclasses of that type.\n  \/\/ (contrast with byElementType, which only returns exact matches)\n  (Element element) =&gt; element is SingleChildRenderObjectElement,\n  description: '$SingleChildRenderObjectElement element',\n), findsOneWidget);\n<\/code><\/pre>\n<p>If <code>description<\/code> is provided, then this uses it as the description of the\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a> and appears, for example, in the error message when the finder\nfails to locate the desired widget. Otherwise, the description prints the\nsignature of the predicate function.<\/p>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byElementPredicate(ElementPredicate predicate, { String description, bool skipOffstage = true }) {\n  return _ElementPredicateFinder(predicate, description: description, skipOffstage: skipOffstage);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byElementPredicate.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "predicate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.ElementPredicate"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets by searching for elements with a particular type.<\/p>\n<p>This does not do subclass tests, so for example\n<code>byElementType(VirtualViewportElement)<\/code> will never find anything\nsince that's an abstract class.<\/p>\n<p>The <code>type<\/code> argument must be a subclass of <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byElementType(SingleChildRenderObjectElement), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byElementType(Type type, { bool skipOffstage = true }) =&gt; _ElementTypeFinder(type, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byElementType.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "type",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        },
        {
            "desc": "<p>Finds <a href=\"widgets\/Icon-class.html\">Icon<\/a> widgets containing icon data equal to the <code>icon<\/code>\nargument.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byIcon(Icons.inbox), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byIcon(IconData icon, { bool skipOffstage = true }) =&gt; _WidgetIconFinder(icon, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byIcon.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "icon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.IconData"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets by searching for one with a particular <a href=\"foundation\/Key-class.html\">Key<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byKey(backKey), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byKey(Key key, { bool skipOffstage = true }) =&gt; _KeyFinder(key, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byKey.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.Key"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> widgets matching the given <code>label<\/code>, either by\n<a href=\"dart-core\/RegExp\/hasMatch.html\">RegExp.hasMatch<\/a> or string equality.<\/p>\n<p>The framework may combine semantics labels in certain scenarios, such as\nwhen multiple <a href=\"widgets\/Text-class.html\">Text<\/a> widgets are in a <a href=\"material\/MaterialButton-class.html\">MaterialButton<\/a> widget. In such a\ncase, it may be preferable to match by regular expression. Consumers of\nthis API <strong>must not<\/strong> introduce unsuitable content into the semantics tree\nfor the purposes of testing; in particular, you should prefer matching by\nregular expression rather than by string if the framework has combined\nyour semantics, and not try to force the framework to break up the\nsemantics nodes. Breaking up the nodes would have an undesirable effect on\nscreen readers and other accessibility services.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.BySemanticsLabel('Back'), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder bySemanticsLabel(Pattern label, { bool skipOffstage = true }) {\n  if (WidgetsBinding.instance.pipelineOwner.semanticsOwner == null)\n    throw StateError('Semantics are not enabled. '\n                     'Make sure to call tester.enableSemantics() before using '\n                     'this finder, and call dispose on its return value after.');\n  return byElementPredicate(\n    (Element element) {\n      \/\/ Multiple elements can have the same renderObject - we want the \"owner\"\n      \/\/ of the renderObject, i.e. the RenderObjectElement.\n      if (element is! RenderObjectElement) {\n        return false;\n      }\n      final String semanticsLabel = element.renderObject?.debugSemantics?.label;\n      if (semanticsLabel == null) {\n        return false;\n      }\n      return label is RegExp\n          ? label.hasMatch(semanticsLabel)\n          : label == semanticsLabel;\n    },\n    skipOffstage: skipOffstage,\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/bySemanticsLabel.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "label",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Pattern"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds Tooltip widgets with the given message.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byTooltip('Back'), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byTooltip(String message, { bool skipOffstage = true }) {\n  return byWidgetPredicate(\n    (Widget widget) =&gt; widget is Tooltip &amp;&amp; widget.message == message,\n    skipOffstage: skipOffstage,\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byTooltip.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "message",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets by searching for widgets with a particular type.<\/p>\n<p>This does not do subclass tests, so for example\n<code>byType(StatefulWidget)<\/code> will never find anything since that's\nan abstract class.<\/p>\n<p>The <code>type<\/code> argument must be a subclass of <a href=\"widgets\/Widget-class.html\">Widget<\/a>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byType(IconButton), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byType(Type type, { bool skipOffstage = true }) =&gt; _WidgetTypeFinder(type, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byType.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "type",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets whose current widget is the instance given by the\nargument.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Suppose you have a button created like this:\nWidget myButton = new Button(\n  child: new Text('Update')\n);\n\n\/\/ You can find and tap on it like this:\ntester.tap(find.byWidget(myButton));\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byWidget(Widget widget, { bool skipOffstage = true }) =&gt; _WidgetFinder(widget, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byWidget.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "widget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets using a widget <code>predicate<\/code>.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.byWidgetPredicate(\n  (Widget widget) =&gt; widget is Tooltip &amp;&amp; widget.message == 'Back',\n  description: 'widget with tooltip \"Back\"',\n), findsOneWidget);\n<\/code><\/pre>\n<p>If <code>description<\/code> is provided, then this uses it as the description of the\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a> and appears, for example, in the error message when the finder\nfails to locate the desired widget. Otherwise, the description prints the\nsignature of the predicate function.<\/p>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder byWidgetPredicate(WidgetPredicate predicate, { String description, bool skipOffstage = true }) {\n  return _WidgetPredicateFinder(predicate, description: description, skipOffstage: skipOffstage);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/byWidgetPredicate.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "predicate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.WidgetPredicate"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds widgets that are descendants of the <code>of<\/code> parameter and that match\nthe <code>matching<\/code> parameter.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.descendant(\n  of: find.widgetWithText(Row, 'label_1'), matching: find.text('value_1')\n), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>matchRoot<\/code> argument is true then the widget(s) specified by <code>of<\/code>\nwill be matched along with the descendants.<\/p>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then nodes that are\n<a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s are skipped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder descendant({ Finder of, Finder matching, bool matchRoot = false, bool skipOffstage = true }) {\n  return _DescendantFinder(of, matching, matchRoot: matchRoot, skipOffstage: skipOffstage);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/descendant.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "matchRoot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "matching",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "of",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Finds <a href=\"widgets\/Text-class.html\">Text<\/a> and <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> widgets containing string equal to the\n<code>text<\/code> argument.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(find.text('Back'), findsOneWidget);\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder text(String text, { bool skipOffstage = true }) =&gt; _TextFinder(text, skipOffstage: skipOffstage);<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/text.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Looks for widgets that contain an <a href=\"widgets\/Icon-class.html\">Icon<\/a> descendant displaying <a href=\"widgets\/IconData-class.html\">IconData<\/a>\n<code>icon<\/code> in it.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Suppose you have a button with icon 'arrow_forward' in it:\nnew Button(\n  child: new Icon(Icons.arrow_forward)\n)\n\n\/\/ You can find and tap on it like this:\ntester.tap(find.widgetWithIcon(Button, Icons.arrow_forward));\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder widgetWithIcon(Type widgetType, IconData icon, { bool skipOffstage = true }) {\n  return find.ancestor(\n    of: find.byIcon(icon),\n    matching: find.byType(widgetType),\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/widgetWithIcon.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "icon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.IconData"
                },
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "widgetType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        },
        {
            "desc": "<p>Looks for widgets that contain a <a href=\"widgets\/Text-class.html\">Text<\/a> descendant with <code>text<\/code>\nin it.<\/p>\n<h2 id=\"sample-code\">Sample code<\/h2>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Suppose you have a button with text 'Update' in it:\nnew Button(\n  child: new Text('Update')\n)\n\n\/\/ You can find and tap on it like this:\ntester.tap(find.widgetWithText(Button, 'Update'));\n<\/code><\/pre>\n<p>If the <code>skipOffstage<\/code> argument is true (the default), then this skips\nnodes that are <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> or that are from inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder widgetWithText(Type widgetType, String text, { bool skipOffstage = true }) {\n  return find.ancestor(\n    of: find.text(text, skipOffstage: skipOffstage),\n    matching: find.byType(widgetType, skipOffstage: skipOffstage),\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/CommonFinders\/widgetWithText.html",
            "isDeprecated": "0",
            "type": "flutter_test.Finder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.CommonFinders",
            "params": [
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "widgetType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        }
    ],
    "props": []
}