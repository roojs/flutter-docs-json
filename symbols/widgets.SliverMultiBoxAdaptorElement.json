{
    "desc": "<p>An element that lazily builds children for a <a href=\"widgets\/SliverMultiBoxAdaptorWidget-class.html\">SliverMultiBoxAdaptorWidget<\/a>.<\/p>\n<p>Implements <a href=\"rendering\/RenderSliverBoxChildManager-class.html\">RenderSliverBoxChildManager<\/a>, which lets this element manage\nthe children of subclasses of <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/SliverMultiBoxAdaptorElement-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.SliverMultiBoxAdaptorElement",
    "shortname": "SliverMultiBoxAdaptorElement",
    "extends": [
        "widgets.RenderObjectElement",
        "widgets.Element",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an element that lazily builds children for the given widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SliverMultiBoxAdaptorElement(SliverMultiBoxAdaptorWidget widget) : super(widget);<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/SliverMultiBoxAdaptorElement.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "widget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.SliverMultiBoxAdaptorWidget"
                }
            ]
        },
        {
            "desc": "<p>Called during layout when a new child is needed. The child should be\ninserted into the child list in the appropriate position, after the\n<code>after<\/code> child (at the start of the list if <code>after<\/code> is null). Its index and\nscroll offsets will automatically be set appropriately.<\/p>\n<p>The <code>index<\/code> argument gives the index of the child to show. It is possible\nfor negative indices to be requested. For example: if the user scrolls\nfrom child 0 to child 10, and then those children get much smaller, and\nthen the user scrolls back up again, this method will eventually be asked\nto produce a child for index -1.<\/p>\n<p>If no child corresponds to <code>index<\/code>, then do nothing.<\/p>\n<p>Which child is indicated by index zero depends on the <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection<\/a>\nspecified in the <a href=\"rendering\/RenderSliver\/constraints.html\">RenderSliverMultiBoxAdaptor.constraints<\/a>. For example\nif the children are the alphabet, then if\n<a href=\"rendering\/SliverConstraints\/growthDirection.html\">SliverConstraints.growthDirection<\/a> is <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.forward<\/a> then\nindex zero is A, and index 25 is Z. On the other hand if\n<a href=\"rendering\/SliverConstraints\/growthDirection.html\">SliverConstraints.growthDirection<\/a> is <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.reverse<\/a>\nthen index zero is Z, and index 25 is A.<\/p>\n<p>During a call to <a href=\"widgets\/SliverMultiBoxAdaptorElement\/createChild.html\">createChild<\/a> it is valid to remove other children from\nthe <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a> object if they were not created during\nthis frame and have not yet been updated during this frame. It is not\nvalid to add any other children to this render object.<\/p>\n<p>If this method does not create a child for a given <code>index<\/code> greater than or\nequal to zero, then <code>computeMaxScrollOffset<\/code> must be able to return a\nprecise value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createChild(int index, { @required RenderBox after }) {\n  assert(_currentlyUpdatingChildIndex == null);\n  owner.buildScope(this, () {\n    final bool insertFirst = after == null;\n    assert(insertFirst || _childElements[index-1] != null);\n    _currentBeforeChild = insertFirst ? null : _childElements[index-1].renderObject;\n    Element newChild;\n    try {\n      _currentlyUpdatingChildIndex = index;\n      newChild = updateChild(_childElements[index], _build(index), index);\n    } finally {\n      _currentlyUpdatingChildIndex = null;\n    }\n    if (newChild != null) {\n      _childElements[index] = newChild;\n    } else {\n      _childElements.remove(index);\n    }\n  });\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/createChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "after",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>In debug mode, asserts that this manager is not expecting any\nmodifications to the <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a>'s child list.<\/p>\n<p>This function always returns true.<\/p>\n<p>The manager is not required to track whether it is expecting modifications\nto the <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a>'s child list and can simply return\ntrue without making any assertions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool debugAssertChildListLocked() {\n  assert(_currentlyUpdatingChildIndex == null);\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/debugAssertChildListLocked.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        },
        {
            "desc": "<p>Calls the argument for each child considered onstage.<\/p>\n<p>Classes like <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> and <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> override this method to hide their\nchildren.<\/p>\n<p>Being onstage affects the element's discoverability during testing when\nyou use Flutter's <a href=\"flutter_test\/Finder-class.html\">Finder<\/a> objects. For example, when you instruct the\ntest framework to tap on a widget, by default the finder will look for\nonstage elements and ignore the offstage ones.<\/p>\n<p>The default implementation defers to <a href=\"widgets\/SliverMultiBoxAdaptorElement\/visitChildren.html\">visitChildren<\/a> and therefore treats\nthe element as onstage.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Offstage-class.html\">Offstage<\/a> widget that hides its children.<\/li>\n<li>\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a> that skips offstage widgets by default.<\/li>\n<li>\n<a href=\"rendering\/RenderObject\/visitChildrenForSemantics.html\">RenderObject.visitChildrenForSemantics<\/a>, in contrast to this method,\ndesigned specifically for excluding parts of the UI from the semantics\ntree.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugVisitOnstageChildren(ElementVisitor visitor) {\n  _childElements.values.where((Element child) {\n    final SliverMultiBoxAdaptorParentData parentData = child.renderObject.parentData;\n    double itemExtent;\n    switch (renderObject.constraints.axis) {\n      case Axis.horizontal:\n        itemExtent = child.renderObject.paintBounds.width;\n        break;\n      case Axis.vertical:\n        itemExtent = child.renderObject.paintBounds.height;\n        break;\n    }\n\n    return parentData.layoutOffset &lt; renderObject.constraints.scrollOffset + renderObject.constraints.remainingPaintExtent &amp;&amp;\n        parentData.layoutOffset + itemExtent &gt; renderObject.constraints.scrollOffset;\n  }).forEach(visitor);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/debugVisitOnstageChildren.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ElementVisitor"
                }
            ]
        },
        {
            "desc": "<p>Called during <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/adoptChild.html\">RenderSliverMultiBoxAdaptor.adoptChild<\/a>.<\/p>\n<p>Subclasses must ensure that the <a href=\"rendering\/SliverMultiBoxAdaptorParentData\/index.html\">SliverMultiBoxAdaptorParentData.index<\/a>\nfield of the child's <a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a> accurately reflects the\nchild's index in the child list after this function returns.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didAdoptChild(RenderBox child) {\n  assert(_currentlyUpdatingChildIndex != null);\n  final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n  childParentData.index = _currentlyUpdatingChildIndex;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/didAdoptChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Called at the end of layout to indicate that layout is now complete.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didFinishLayout() {\n  assert(debugAssertChildListLocked());\n  final int firstIndex = _childElements.firstKey() ?? 0;\n  final int lastIndex = _childElements.lastKey() ?? 0;\n  widget.delegate.didFinishLayout(firstIndex, lastIndex);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/didFinishLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        },
        {
            "desc": "<p>Called at the beginning of layout to indicate that layout is about to\noccur.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStartLayout() {\n  assert(debugAssertChildListLocked());\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/didStartLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        },
        {
            "desc": "<p>Called to estimate the total scrollable extents of this object.<\/p>\n<p>Must return the total distance from the start of the child with the\nearliest possible index to the end of the child with the last possible\nindex.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble estimateMaxScrollOffset(\n  SliverConstraints constraints, {\n  int firstIndex,\n  int lastIndex,\n  double leadingScrollOffset,\n  double trailingScrollOffset,\n}) {\n  final int childCount = this.childCount;\n  if (childCount == null)\n    return double.infinity;\n  return widget.estimateMaxScrollOffset(\n    constraints,\n    firstIndex,\n    lastIndex,\n    leadingScrollOffset,\n    trailingScrollOffset,\n  ) ?? _extrapolateMaxScrollOffset(\n    firstIndex,\n    lastIndex,\n    leadingScrollOffset,\n    trailingScrollOffset,\n    childCount,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/estimateMaxScrollOffset.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "constraints",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SliverConstraints"
                },
                {
                    "name": "firstIndex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "lastIndex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "leadingScrollOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "trailingScrollOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Remove the given child from the element's child list, in preparation for\nthe child being reused elsewhere in the element tree.<\/p>\n<p>This updates the child model such that, e.g., <a href=\"widgets\/SliverMultiBoxAdaptorElement\/visitChildren.html\">visitChildren<\/a> does not\nwalk that child anymore.<\/p>\n<p>The element will still have a valid parent when this is called. After this\nis called, <a href=\"widgets\/Element\/deactivateChild.html\">deactivateChild<\/a> is called to sever the link to this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid forgetChild(Element child) {\n  assert(child != null);\n  assert(child.slot != null);\n  assert(_childElements.containsKey(child.slot));\n  _childElements.remove(child.slot);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/forgetChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Insert the given child into <a href=\"widgets\/SliverMultiBoxAdaptorElement\/renderObject.html\">renderObject<\/a> at the given slot.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid insertChildRenderObject(covariant RenderObject child, int slot) {\n  assert(slot != null);\n  assert(_currentlyUpdatingChildIndex == slot);\n  assert(renderObject.debugValidateChild(child));\n  renderObject.insert(child, after: _currentBeforeChild);\n  assert(() {\n    final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n    assert(slot == childParentData.index);\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/insertChildRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "slot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Move the given child to the given slot.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/SliverMultiBoxAdaptorElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid moveChildRenderObject(covariant RenderObject child, int slot) {\n  \/\/ TODO(ianh): At some point we should be better about noticing when a\n  \/\/ particular LocalKey changes slot, and handle moving the nodes around.\n  assert(false);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/moveChildRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "slot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Called by rebuild() after the appropriate checks have been made.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performRebuild() {\n  _childWidgets.clear(); \/\/ Reset the cache, as described above.\n  super.performRebuild();\n  _currentBeforeChild = null;\n  assert(_currentlyUpdatingChildIndex == null);\n  try {\n    void processElement(int index) {\n      _currentlyUpdatingChildIndex = index;\n      final Element newChild = updateChild(_childElements[index], _build(index), index);\n      if (newChild != null) {\n        _childElements[index] = newChild;\n        final SliverMultiBoxAdaptorParentData parentData = newChild.renderObject.parentData;\n        if (!parentData.keptAlive)\n          _currentBeforeChild = newChild.renderObject;\n      } else {\n        _childElements.remove(index);\n      }\n    }\n    \/\/ processElement may modify the Map - need to do a .toList() here.\n    _childElements.keys.toList().forEach(processElement);\n    if (_didUnderflow) {\n      final int lastKey = _childElements.lastKey() ?? -1;\n      processElement(lastKey + 1);\n    }\n  } finally {\n    _currentlyUpdatingChildIndex = null;\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/performRebuild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        },
        {
            "desc": "<p>Remove the given child from the child list.<\/p>\n<p>Called by <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/collectGarbage.html\">RenderSliverMultiBoxAdaptor.collectGarbage<\/a>, which itself is\ncalled from <a href=\"rendering\/RenderObject\/performLayout.html\">RenderSliverMultiBoxAdaptor.performLayout<\/a>.<\/p>\n<p>The index of the given child can be obtained using the\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor\/indexOf.html\">RenderSliverMultiBoxAdaptor.indexOf<\/a> method, which reads it from the\n<a href=\"rendering\/SliverMultiBoxAdaptorParentData\/index.html\">SliverMultiBoxAdaptorParentData.index<\/a> field of the child's\n<a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeChild(RenderBox child) {\n  final int index = renderObject.indexOf(child);\n  assert(_currentlyUpdatingChildIndex == null);\n  assert(index &gt;= 0);\n  owner.buildScope(this, () {\n    assert(_childElements.containsKey(index));\n    try {\n      _currentlyUpdatingChildIndex = index;\n      final Element result = updateChild(_childElements[index], null, index);\n      assert(result == null);\n    } finally {\n      _currentlyUpdatingChildIndex = null;\n    }\n    _childElements.remove(index);\n    assert(!_childElements.containsKey(index));\n  });\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/removeChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Remove the given child from <a href=\"widgets\/SliverMultiBoxAdaptorElement\/renderObject.html\">renderObject<\/a>.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/SliverMultiBoxAdaptorElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeChildRenderObject(covariant RenderObject child) {\n  assert(_currentlyUpdatingChildIndex != null);\n  renderObject.remove(child);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/removeChildRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Called during layout to indicate whether this object provided insufficient\nchildren for the <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a> to fill the\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a>.<\/p>\n<p>Typically called unconditionally at the start of layout with false and\nthen later called with true when the <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a>\nfails to create a child required to fill the\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a>.<\/p>\n<p>Useful for subclasses to determine whether newly added children could\naffect the visible contents of the <a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setDidUnderflow(bool value) {\n  _didUnderflow = value;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/setDidUnderflow.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Change the widget used to configure this element.<\/p>\n<p>The framework calls this function when the parent wishes to use a\ndifferent widget to configure this element. The new widget is guaranteed\nto have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as the old widget.<\/p>\n<p>This function is called only during the \"active\" lifecycle state.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid update(covariant SliverMultiBoxAdaptorWidget newWidget) {\n  final SliverMultiBoxAdaptorWidget oldWidget = widget;\n  super.update(newWidget);\n  final SliverChildDelegate newDelegate = newWidget.delegate;\n  final SliverChildDelegate oldDelegate = oldWidget.delegate;\n  if (newDelegate != oldDelegate &amp;&amp;\n      (newDelegate.runtimeType != oldDelegate.runtimeType || newDelegate.shouldRebuild(oldDelegate)))\n    performRebuild();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/update.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "newWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.SliverMultiBoxAdaptorWidget"
                }
            ]
        },
        {
            "desc": "<p>Update the given child with the given new configuration.<\/p>\n<p>This method is the core of the widgets system. It is called each time we\nare to add, update, or remove a child based on an updated configuration.<\/p>\n<p>If the <code>child<\/code> is null, and the <code>newWidget<\/code> is not null, then we have a new\nchild for which we need to create an <a href=\"widgets\/Element-class.html\">Element<\/a>, configured with <code>newWidget<\/code>.<\/p>\n<p>If the <code>newWidget<\/code> is null, and the <code>child<\/code> is not null, then we need to\nremove it because it no longer has a configuration.<\/p>\n<p>If neither are null, then we need to update the <code>child<\/code>'s configuration to\nbe the new configuration given by <code>newWidget<\/code>. If <code>newWidget<\/code> can be given\nto the existing child (as determined by <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>), then it is so\ngiven. Otherwise, the old child needs to be disposed and a new child\ncreated for the new configuration.<\/p>\n<p>If both are null, then we don't have a child and won't have a child, so we\ndo nothing.<\/p>\n<p>The <a href=\"widgets\/SliverMultiBoxAdaptorElement\/updateChild.html\">updateChild<\/a> method returns the new child, if it had to create one,\nor the child that was passed in, if it just had to update the child, or\nnull, if it removed the child and did not replace it.<\/p>\n<p>The following table summarizes the above:<\/p>\n<table>\n<thead><tr>\n<th style=\"text-align: center;\"><\/th>\n<th style=\"text-align: left;\"><strong>newWidget == null<\/strong><\/th>\n<th style=\"text-align: left;\"><strong>newWidget != null<\/strong><\/th>\n<\/tr><\/thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\"><strong>child == null<\/strong><\/td>\n<td style=\"text-align: left;\">Returns null.<\/td>\n<td style=\"text-align: left;\">Returns new <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/td>\n<\/tr>\n<tr>\n<td style=\"text-align: center;\"><strong>child != null<\/strong><\/td>\n<td style=\"text-align: left;\">Old child is removed, returns null.<\/td>\n<td style=\"text-align: left;\">Old child updated if possible, returns child or new <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/td>\n<\/tr>\n<\/tbody>\n<\/table>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nElement updateChild(Element child, Widget newWidget, dynamic newSlot) {\n  final SliverMultiBoxAdaptorParentData oldParentData = child?.renderObject?.parentData;\n  final Element newChild = super.updateChild(child, newWidget, newSlot);\n  final SliverMultiBoxAdaptorParentData newParentData = newChild?.renderObject?.parentData;\n\n  \/\/ Preserve the old layoutOffset if the renderObject was swapped out.\n  if (oldParentData != newParentData &amp;&amp; oldParentData != null &amp;&amp; newParentData != null) {\n    newParentData.layoutOffset = oldParentData.layoutOffset;\n  }\n\n  return newChild;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/updateChild.html",
            "isDeprecated": "0",
            "type": "widgets.Element",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                },
                {
                    "name": "newSlot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "newWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                }
            ]
        },
        {
            "desc": "<p>Calls the argument for each child. Must be overridden by subclasses that\nsupport having children.<\/p>\n<p>There is no guaranteed order in which the children will be visited, though\nit should be consistent over time.<\/p>\n<p>Calling this during build is dangerous: the child list might still be\nbeing updated at that point, so the children might not be constructed yet,\nor might be old children that are going to be replaced. This method should\nonly be called if it is provable that the children are available.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildren(ElementVisitor visitor) {\n  \/\/ The toList() is to make a copy so that the underlying list can be modified by\n  \/\/ the visitor:\n  assert(!_childElements.values.any((Element child) =&gt; child == null));\n  _childElements.values.toList().forEach(visitor);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/visitChildren.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ElementVisitor"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Called to obtain a precise measure of the total number of children.<\/p>\n<p>Must return the number that is one greater than the greatest <code>index<\/code> for\nwhich <code>createChild<\/code> will actually create a child.<\/p>\n<p>This is used when <a href=\"widgets\/SliverMultiBoxAdaptorElement\/createChild.html\">createChild<\/a> cannot add a child for a positive <code>index<\/code>,\nto determine the precise dimensions of the sliver. It must return an\naccurate and precise non-null value. It will not be called if\n<a href=\"widgets\/SliverMultiBoxAdaptorElement\/createChild.html\">createChild<\/a> is always able to create a child (e.g. for an infinite\nlist).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get childCount =&gt; widget.delegate.estimatedChildCount;<\/code><\/pre>\n        ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/childCount.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        },
        {
            "desc": "<p>The underlying <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> for this element.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderSliverMultiBoxAdaptor get renderObject =&gt; super.renderObject;<\/code><\/pre>\n        ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/renderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderSliverMultiBoxAdaptor",
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        },
        {
            "desc": "<p>The configuration for this element.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSliverMultiBoxAdaptorWidget get widget =&gt; super.widget;<\/code><\/pre>\n        ",
            "href": "widgets\/SliverMultiBoxAdaptorElement\/widget.html",
            "isDeprecated": "0",
            "type": "widgets.SliverMultiBoxAdaptorWidget",
            "memberOf": "widgets.SliverMultiBoxAdaptorElement",
            "params": []
        }
    ]
}