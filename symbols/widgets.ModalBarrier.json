{
    "desc": "<p>A widget that prevents the user from interacting with widgets behind itself.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a>, which indirectly uses this widget.<\/li>\n<li>\n<a href=\"widgets\/AnimatedModalBarrier-class.html\">AnimatedModalBarrier<\/a>, which is similar but takes an animated <a href=\"widgets\/ModalBarrier\/color.html\">color<\/a>\ninstead of a single color value.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ModalBarrier-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ModalBarrier",
    "shortname": "ModalBarrier",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that blocks user interaction.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ModalBarrier({\n  Key key,\n  this.color,\n  this.dismissible = true,\n  this.semanticsLabel,\n  this.barrierSemanticsDismissible = true,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/ModalBarrier\/ModalBarrier.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ModalBarrier",
            "params": [
                {
                    "name": "barrierSemanticsDismissible",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dismissible",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "semanticsLabel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/ModalBarrier\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(!dismissible || semanticsLabel == null || debugCheckHasDirectionality(context));\n  final bool semanticsDismissible = dismissible &amp;&amp; defaultTargetPlatform != TargetPlatform.android;\n  final bool modalBarrierSemanticsDismissible = barrierSemanticsDismissible ?? semanticsDismissible;\n  return BlockSemantics(\n    child: ExcludeSemantics(\n      \/\/ On Android, the back button is used to dismiss a modal. On iOS, some\n      \/\/ modal barriers are not dismissible in accessibility mode.\n      excluding: !semanticsDismissible || !modalBarrierSemanticsDismissible,\n      child: GestureDetector(\n        onTapDown: (TapDownDetails details) {\n          if (dismissible)\n            Navigator.maybePop(context);\n        },\n        behavior: HitTestBehavior.opaque,\n        child: Semantics(\n          label: semanticsDismissible ? semanticsLabel : null,\n          textDirection: semanticsDismissible &amp;&amp; semanticsLabel != null ? Directionality.of(context) : null,\n          child: ConstrainedBox(\n            constraints: const BoxConstraints.expand(),\n            child: color == null ? null : DecoratedBox(\n              decoration: BoxDecoration(\n                color: color,\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ModalBarrier\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ModalBarrier",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the modal barrier semantics are included in the semantics tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ModalRoute\/semanticsDismissible.html\">ModalRoute.semanticsDismissible<\/a>, which controls this property for\nthe <a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a> built by <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a> pages.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool barrierSemanticsDismissible\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ModalBarrier\/barrierSemanticsDismissible.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.ModalBarrier",
            "params": []
        },
        {
            "desc": "<p>If non-null, fill the barrier with this color.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ModalRoute\/barrierColor.html\">ModalRoute.barrierColor<\/a>, which controls this property for the\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a> built by <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a> pages.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ModalBarrier\/color.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "widgets.ModalBarrier",
            "params": []
        },
        {
            "desc": "<p>Whether touching the barrier will pop the current route off the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ModalRoute\/barrierDismissible.html\">ModalRoute.barrierDismissible<\/a>, which controls this property for the\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a> built by <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a> pages.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool dismissible\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ModalBarrier\/dismissible.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.ModalBarrier",
            "params": []
        },
        {
            "desc": "<p>Semantics label used for the barrier if it is <a href=\"widgets\/ModalBarrier\/dismissible.html\">dismissible<\/a>.<\/p>\n<p>The semantics label is read out by accessibility tools (e.g. TalkBack\non Android and VoiceOver on iOS) when the barrier is focused.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ModalRoute\/barrierLabel.html\">ModalRoute.barrierLabel<\/a>, which controls this property for the\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a> built by <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a> pages.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticsLabel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ModalBarrier\/semanticsLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "widgets.ModalBarrier",
            "params": []
        }
    ]
}