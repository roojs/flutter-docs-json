{
    "desc": "<p>Defines the appearance of a Material Design text field.<\/p>\n<p><a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> displays the visual elements of a Material Design text\nfield around its input <a href=\"material\/InputDecorator\/child.html\">child<\/a>. The visual elements themselves are defined\nby an <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a> object and their layout and appearance depend\non the <code>baseStyle<\/code>, <code>textAlign<\/code>, <code>isFocused<\/code>, and <code>isEmpty<\/code> parameters.<\/p>\n<p><a href=\"material\/TextField-class.html\">TextField<\/a> uses this widget to decorate its <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> child.<\/p>\n<p><a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> can be used to create widgets that look and behave like a\n<a href=\"material\/TextField-class.html\">TextField<\/a> but support other kinds of input.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, which uses an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> to display a border,\nlabels, and icons, around its <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> child.<\/li>\n<li>\n<a href=\"painting\/Decoration-class.html\">Decoration<\/a> and <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a>, for drawing arbitrary decorations\naround other widgets.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/InputDecorator-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.InputDecorator",
    "shortname": "InputDecorator",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that displays a border, labels, and icons,\nfor a <a href=\"material\/TextField-class.html\">TextField<\/a>.<\/p>\n<p>The <code>isFocused<\/code> and <code>isEmpty<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const InputDecorator({\n  Key key,\n  this.decoration,\n  this.baseStyle,\n  this.textAlign,\n  this.isFocused = false,\n  this.expands = false,\n  this.isEmpty = false,\n  this.child,\n}) : assert(isFocused != null),\n     assert(isEmpty != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/InputDecorator\/InputDecorator.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.InputDecorator",
            "params": [
                {
                    "name": "baseStyle",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "decoration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputDecoration"
                },
                {
                    "name": "expands",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isEmpty",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isFocused",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "textAlign",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                }
            ]
        },
        {
            "desc": "<p>The RenderBox that defines this decorator's \"container\". That's the\narea which is filled if <a href=\"material\/InputDecoration\/filled.html\">InputDecoration.filled<\/a> is true. It's the area\nadjacent to <a href=\"material\/InputDecoration\/icon.html\">InputDecoration.icon<\/a> and above the widgets that contain\n<a href=\"material\/InputDecoration\/helperText.html\">InputDecoration.helperText<\/a>, <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, and\n<a href=\"material\/InputDecoration\/counterText.html\">InputDecoration.counterText<\/a>.<\/p>\n<p><a href=\"material\/TextField-class.html\">TextField<\/a> renders ink splashes within the container.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RenderBox containerOf(BuildContext context) {\n  final _RenderDecoration result = context.ancestorRenderObjectOfType(const TypeMatcher&lt;_RenderDecoration&gt;());\n  return result?.container;\n}<\/code><\/pre>\n    ",
            "href": "material\/InputDecorator\/containerOf.html",
            "isDeprecated": "0",
            "type": "rendering.RenderBox",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecorator",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/InputDecorator\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_InputDecoratorState createState() =&gt; _InputDecoratorState();<\/code><\/pre>\n    ",
            "href": "material\/InputDecorator\/createState.html",
            "isDeprecated": "0",
            "type": "<_InputDecoratorState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/InputDecorator\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;InputDecoration&gt;('decoration', decoration));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('baseStyle', baseStyle, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('isFocused', isFocused));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('expands', expands, defaultValue: false));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('isEmpty', isEmpty));\n}<\/code><\/pre>\n    ",
            "href": "material\/InputDecorator\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecorator",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The style on which to base the label, hint, counter, and error styles\nif the <a href=\"material\/InputDecorator\/decoration.html\">decoration<\/a> does not provide explicit styles.<\/p>\n<p>If null, <code>baseStyle<\/code> defaults to the <code>subhead<\/code> style from the\ncurrent <a href=\"material\/Theme-class.html\">Theme<\/a>, see <a href=\"material\/ThemeData\/textTheme.html\">ThemeData.textTheme<\/a>.<\/p>\n<p>The <a href=\"painting\/TextStyle\/textBaseline.html\">TextStyle.textBaseline<\/a> of the <a href=\"material\/InputDecorator\/baseStyle.html\">baseStyle<\/a> is used to determine\nthe baseline used for text alignment.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle baseStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/baseStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically an <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>, <a href=\"material\/DropdownButton-class.html\">DropdownButton<\/a>, or <a href=\"material\/InkWell-class.html\">InkWell<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>The text and styles to use when decorating the child.<\/p>\n<p>If null, <code>const InputDecoration()<\/code> is used. Null <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a>\nproperties are initialized with the corresponding values from\n<a href=\"material\/ThemeData\/inputDecorationTheme.html\">ThemeData.inputDecorationTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputDecoration decoration\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/decoration.html",
            "isDeprecated": "0",
            "type": "material.InputDecoration",
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>If true, the height of the input field will be as large as possible.<\/p>\n<p>If wrapped in a widget that constrains its child's height, like Expanded\nor SizedBox, the input field will only be affected if <a href=\"material\/InputDecorator\/expands.html\">expands<\/a> is set to\ntrue.<\/p>\n<p>See <a href=\"material\/TextField\/minLines.html\">TextField.minLines<\/a> and <a href=\"material\/TextField\/maxLines.html\">TextField.maxLines<\/a> for related ways to\naffect the height of an input. When <a href=\"material\/InputDecorator\/expands.html\">expands<\/a> is true, both must be null\nin order to avoid ambiguity in determining the height.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool expands\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/expands.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>Whether the input field is empty.<\/p>\n<p>Determines the position of the label text and whether to display the hint\ntext.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isEmpty\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>Whether the input field has focus.<\/p>\n<p>Determines the position of the label text and the color and weight\nof the border.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isFocused\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/isFocused.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecorator",
            "params": []
        },
        {
            "desc": "<p>How the text in the decoration should be aligned horizontally.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAlign textAlign\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorator\/textAlign.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextAlign",
            "memberOf": "material.InputDecorator",
            "params": []
        }
    ]
}