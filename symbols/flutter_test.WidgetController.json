{
    "desc": "<p>Class that programmatically interacts with widgets.<\/p>\n<p>For a variant of this class suited specifically for unit tests, see\n<a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a>. For one suitable for live tests on a device, consider\n<a href=\"flutter_test\/LiveWidgetController-class.html\">LiveWidgetController<\/a>.<\/p>\n<p>Concrete subclasses must implement the <a href=\"flutter_test\/WidgetController\/pump.html\">pump<\/a> method.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "flutter_test\/WidgetController-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_test",
    "name": "flutter_test.WidgetController",
    "shortname": "WidgetController",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget controller that uses the given binding.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">WidgetController(this.binding);<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/WidgetController.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "binding",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.WidgetsBinding"
                }
            ]
        },
        {
            "desc": "<p>Checks if <code>finder<\/code> exists in the tree.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().isNotEmpty;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/any.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Creates gesture and returns the <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> object which you can use\nto continue the gesture using calls on the <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> object.<\/p>\n<p>You can use <a href=\"flutter_test\/WidgetController\/startGesture.html\">startGesture<\/a> instead if your gesture begins with a down\nevent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;TestGesture&gt; createGesture({int pointer, PointerDeviceKind kind = PointerDeviceKind.touch}) async {\n  return TestGesture(\n    hitTester: hitTestOnBinding,\n    dispatcher: sendEventToBinding,\n    kind: kind,\n    pointer: pointer ?? _getNextPointer(),\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/createGesture.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<flutter_test.TestGesture>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "kind",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.PointerDeviceKind"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Attempts to drag the given widget by the given offset, by\nstarting a drag in the middle of the widget.<\/p>\n<p>If the middle of the widget is not exposed, this might send\nevents to another object.<\/p>\n<p>If you want the drag to end with a speed so that the gesture recognition\nsystem identifies the gesture as a fling, consider using <a href=\"flutter_test\/WidgetController\/fling.html\">fling<\/a> instead.<\/p>\n<p>{@template flutter.flutter_test.drag}\nBy default, if the x or y component of offset is greater than <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a>, the\ngesture is broken up into two separate moves calls. Changing 'touchSlopX' or\n<code>touchSlopY<\/code> will change the minimum amount of movement in the respective axis\nbefore the drag will be broken into multiple calls. To always send the\ndrag with just a single call to <a href=\"flutter_test\/TestGesture\/moveBy.html\">TestGesture.moveBy<\/a>, <code>touchSlopX<\/code> and <code>touchSlopY<\/code>\nshould be set to 0.<\/p>\n<p>Breaking the drag into multiple moves is necessary for accurate execution\nof drag update calls with a <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior<\/a> variable set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>. Without such a change, the dragUpdate callback\nfrom a drag recognizer will never be invoked.<\/p>\n<p>To force this function to a send a single move event, the 'touchSlopX' and\n'touchSlopY' variables should be set to 0. However, generally, these values\nshould be left to their default values.\n{@end template}<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; drag(Finder finder, Offset offset, { int pointer, double touchSlopX = kDragSlopDefault, double touchSlopY = kDragSlopDefault }) {\n  assert(kDragSlopDefault &gt; kTouchSlop);\n  return dragFrom(getCenter(finder), offset, pointer: pointer, touchSlopX: touchSlopX, touchSlopY: touchSlopY);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/drag.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "touchSlopX",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "touchSlopY",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Attempts a drag gesture consisting of a pointer down, a move by\nthe given offset, and a pointer up.<\/p>\n<p>If you want the drag to end with a speed so that the gesture recognition\nsystem identifies the gesture as a fling, consider using <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a>\ninstead.<\/p>\n<p>null<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; dragFrom(Offset startLocation, Offset offset, { int pointer, double touchSlopX = kDragSlopDefault, double touchSlopY = kDragSlopDefault }) {\n  assert(kDragSlopDefault &gt; kTouchSlop);\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestGesture gesture = await startGesture(startLocation, pointer: pointer);\n    assert(gesture != null);\n\n    final double xSign = offset.dx.sign;\n    final double ySign = offset.dy.sign;\n\n    final double offsetX = offset.dx;\n    final double offsetY = offset.dy;\n\n    final bool separateX = offset.dx.abs() &gt; touchSlopX &amp;&amp; touchSlopX &gt; 0;\n    final bool separateY = offset.dy.abs() &gt; touchSlopY &amp;&amp; touchSlopY &gt; 0;\n\n    if (separateY || separateX) {\n      final double offsetSlope = offsetY \/ offsetX;\n      final double inverseOffsetSlope = offsetX \/ offsetY;\n      final double slopSlope = touchSlopY \/ touchSlopX;\n      final double absoluteOffsetSlope = offsetSlope.abs();\n      final double signedSlopX = touchSlopX * xSign;\n      final double signedSlopY = touchSlopY * ySign;\n      if (absoluteOffsetSlope != slopSlope) {\n        \/\/ The drag goes through one or both of the extents of the edges of the box.\n        if (absoluteOffsetSlope &lt; slopSlope) {\n          assert(offsetX.abs() &gt; touchSlopX);\n          \/\/ The drag goes through the vertical edge of the box.\n          \/\/ It is guaranteed that the |offsetX| &gt; touchSlopX.\n          final double diffY = offsetSlope.abs() * touchSlopX * ySign;\n\n          \/\/ The vector from the origin to the vertical edge.\n          await gesture.moveBy(Offset(signedSlopX, diffY));\n          if (offsetY.abs() &lt;= touchSlopY) {\n            \/\/ The drag ends on or before getting to the horizontal extension of the horizontal edge.\n            await gesture.moveBy(Offset(offsetX - signedSlopX, offsetY - diffY));\n          } else {\n            final double diffY2 = signedSlopY - diffY;\n            final double diffX2 = inverseOffsetSlope * diffY2;\n\n            \/\/ The vector from the edge of the box to the horizontal extension of the horizontal edge.\n            await gesture.moveBy(Offset(diffX2, diffY2));\n            await gesture.moveBy(Offset(offsetX - diffX2 - signedSlopX, offsetY - signedSlopY));\n          }\n        } else {\n          assert(offsetY.abs() &gt; touchSlopY);\n          \/\/ The drag goes through the horizontal edge of the box.\n          \/\/ It is guaranteed that the |offsetY| &gt; touchSlopY.\n          final double diffX = inverseOffsetSlope.abs() * touchSlopY * xSign;\n\n          \/\/ The vector from the origin to the vertical edge.\n          await gesture.moveBy(Offset(diffX, signedSlopY));\n          if (offsetX.abs() &lt;= touchSlopX) {\n            \/\/ The drag ends on or before getting to the vertical extension of the vertical edge.\n            await gesture.moveBy(Offset(offsetX - diffX, offsetY - signedSlopY));\n          } else {\n            final double diffX2 = signedSlopX - diffX;\n            final double diffY2 = offsetSlope * diffX2;\n\n            \/\/ The vector from the edge of the box to the vertical extension of the vertical edge.\n            await gesture.moveBy(Offset(diffX2, diffY2));\n            await gesture.moveBy(Offset(offsetX - signedSlopX, offsetY - diffY2 - signedSlopY));\n          }\n        }\n      } else { \/\/ The drag goes through the corner of the box.\n        await gesture.moveBy(Offset(signedSlopX, signedSlopY));\n        await gesture.moveBy(Offset(offsetX - signedSlopX, offsetY - signedSlopY));\n      }\n    } else { \/\/ The drag ends inside the box.\n      await gesture.moveBy(offset);\n    }\n    await gesture.up();\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/dragFrom.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "startLocation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "touchSlopX",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "touchSlopY",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>The matching element in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or matches more than\none element.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstElement.html\">firstElement<\/a> if you expect to match several elements but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/elementList.html\">elementList<\/a> if you expect to match several elements and want all of them.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T element&lt;T extends Element&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().single;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/element.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The matching elements in the widget tree.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/element.html\">element<\/a> if you only expect to match one element.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstElement.html\">firstElement<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; elementList&lt;T extends Element&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate();\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/elementList.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The first matching element according to a depth-first pre-order\ntraversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/element.html\">element<\/a> if you only expect to match one element.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstElement&lt;T extends Element&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().first;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/firstElement.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The render object of the first matching widget according to a\ndepth-first pre-order traversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/renderObject.html\">renderObject<\/a> if you only expect to match one render object.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstRenderObject&lt;T extends RenderObject&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().first.renderObject;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/firstRenderObject.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The first matching state according to a depth-first pre-order\ntraversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or if the first\nmatching widget has no state.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/state.html\">state<\/a> if you only expect to match one state.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstState&lt;T extends State&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return _stateOf&lt;T&gt;(finder.evaluate().first, finder);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/firstState.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The first matching widget according to a depth-first pre-order\ntraversal of the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty.<\/p>\n<ul><li>Use <a href=\"flutter_test\/WidgetController\/widget.html\">widget<\/a> if you only expect to match one widget.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T firstWidget&lt;T extends Widget&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().first.widget;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/firstWidget.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Attempts a fling gesture starting from the center of the given\nwidget, moving the given distance, reaching the given speed.<\/p>\n<p>If the middle of the widget is not exposed, this might send\nevents to another object.<\/p>\n<p>This can pump frames. See <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a> for a discussion of how the\n<code>offset<\/code>, <code>velocity<\/code> and <code>frameInterval<\/code> arguments affect this.<\/p>\n<p>The <code>speed<\/code> is in pixels per second in the direction given by <code>offset<\/code>.<\/p>\n<p>A fling is essentially a drag that ends at a particular speed. If you\njust want to drag and end without a fling, use <a href=\"flutter_test\/WidgetController\/drag.html\">drag<\/a>.<\/p>\n<p>The <code>initialOffset<\/code> argument, if non-zero, causes the pointer to first\napply that offset, then pump a delay of <code>initialOffsetDelay<\/code>. This can be\nused to simulate a drag followed by a fling, including dragging in the\nopposite direction of the fling (e.g. dragging 200 pixels to the right,\nthen fling to the left over 200 pixels, ending at the exact point that the\ndrag started).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; fling(\n  Finder finder,\n  Offset offset,\n  double speed, {\n  int pointer,\n  Duration frameInterval = const Duration(milliseconds: 16),\n  Offset initialOffset = Offset.zero,\n  Duration initialOffsetDelay = const Duration(seconds: 1),\n}) {\n  return flingFrom(\n    getCenter(finder),\n    offset,\n    speed,\n    pointer: pointer,\n    frameInterval: frameInterval,\n    initialOffset: initialOffset,\n    initialOffsetDelay: initialOffsetDelay,\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/fling.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "frameInterval",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "initialOffset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "initialOffsetDelay",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "speed",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Attempts a fling gesture starting from the given location, moving the\ngiven distance, reaching the given speed.<\/p>\n<p>Exactly 50 pointer events are synthesized.<\/p>\n<p>The offset and speed control the interval between each pointer event. For\nexample, if the offset is 200 pixels down, and the speed is 800 pixels per\nsecond, the pointer events will be sent for each increment of 4 pixels\n(200\/50), over 250ms (200\/800), meaning events will be sent every 1.25ms\n(250\/200).<\/p>\n<p>To make tests more realistic, frames may be pumped during this time (using\ncalls to <a href=\"flutter_test\/WidgetController\/pump.html\">pump<\/a>). If the total duration is longer than <code>frameInterval<\/code>,\nthen one frame is pumped each time that amount of time elapses while\nsending events, or each time an event is synthesized, whichever is rarer.<\/p>\n<p>A fling is essentially a drag that ends at a particular speed. If you\njust want to drag and end without a fling, use <a href=\"flutter_test\/WidgetController\/dragFrom.html\">dragFrom<\/a>.<\/p>\n<p>The <code>initialOffset<\/code> argument, if non-zero, causes the pointer to first\napply that offset, then pump a delay of <code>initialOffsetDelay<\/code>. This can be\nused to simulate a drag followed by a fling, including dragging in the\nopposite direction of the fling (e.g. dragging 200 pixels to the right,\nthen fling to the left over 200 pixels, ending at the exact point that the\ndrag started).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; flingFrom(\n  Offset startLocation,\n  Offset offset,\n  double speed, {\n  int pointer,\n  Duration frameInterval = const Duration(milliseconds: 16),\n  Offset initialOffset = Offset.zero,\n  Duration initialOffsetDelay = const Duration(seconds: 1),\n}) {\n  assert(offset.distance &gt; 0.0);\n  assert(speed &gt; 0.0); \/\/ speed is pixels\/second\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestPointer testPointer = TestPointer(pointer ?? _getNextPointer());\n    final HitTestResult result = hitTestOnBinding(startLocation);\n    const int kMoveCount = 50; \/\/ Needs to be &gt;= kHistorySize, see _LeastSquaresVelocityTrackerStrategy\n    final double timeStampDelta = 1000.0 * offset.distance \/ (kMoveCount * speed);\n    double timeStamp = 0.0;\n    double lastTimeStamp = timeStamp;\n    await sendEventToBinding(testPointer.down(startLocation, timeStamp: Duration(milliseconds: timeStamp.round())), result);\n    if (initialOffset.distance &gt; 0.0) {\n      await sendEventToBinding(testPointer.move(startLocation + initialOffset, timeStamp: Duration(milliseconds: timeStamp.round())), result);\n      timeStamp += initialOffsetDelay.inMilliseconds;\n      await pump(initialOffsetDelay);\n    }\n    for (int i = 0; i &lt;= kMoveCount; i += 1) {\n      final Offset location = startLocation + initialOffset + Offset.lerp(Offset.zero, offset, i \/ kMoveCount);\n      await sendEventToBinding(testPointer.move(location, timeStamp: Duration(milliseconds: timeStamp.round())), result);\n      timeStamp += timeStampDelta;\n      if (timeStamp - lastTimeStamp &gt; frameInterval.inMilliseconds) {\n        await pump(Duration(milliseconds: (timeStamp - lastTimeStamp).truncate()));\n        lastTimeStamp = timeStamp;\n      }\n    }\n    await sendEventToBinding(testPointer.up(timeStamp: Duration(milliseconds: timeStamp.round())), result);\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/flingFrom.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "frameInterval",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "initialOffset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "initialOffsetDelay",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "speed",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "startLocation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the point at the bottom left of the given widget. This\npoint is not inside the object's hit test area.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getBottomLeft(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.bottomLeft(Offset.zero));\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getBottomLeft.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Returns the point at the bottom right of the given widget. This\npoint is not inside the object's hit test area.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getBottomRight(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.bottomRight(Offset.zero));\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getBottomRight.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Returns the point at the center of the given widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getCenter(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.center(Offset.zero));\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getCenter.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Returns the rect of the given widget. This is only valid once\nthe widget's render object has been laid out at least once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect getRect(Finder finder) =&gt; getTopLeft(finder) &amp; getSize(finder);<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getRect.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Returns the size of the given widget. This is only valid once\nthe widget's render object has been laid out at least once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size getSize(Finder finder) {\n  TestAsyncUtils.guardSync();\n  final Element element = finder.evaluate().single;\n  final RenderBox box = element.renderObject;\n  assert(box != null);\n  return box.size;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getSize.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Returns the point at the top left of the given widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getTopLeft(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; Offset.zero);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getTopLeft.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Returns the point at the top right of the given widget. This\npoint is not inside the object's hit test area.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getTopRight(Finder finder) {\n  return _getElementPoint(finder, (Size size) =&gt; size.topRight(Offset.zero));\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/getTopRight.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Forwards the given location to the binding's hitTest logic.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HitTestResult hitTestOnBinding(Offset location) {\n  final HitTestResult result = HitTestResult();\n  binding.hitTest(result, location);\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/hitTestOnBinding.html",
            "isDeprecated": "0",
            "type": "gestures.HitTestResult",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "location",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Dispatch a pointer down \/ pointer up sequence (with a delay of\n<a href=\"gestures\/kLongPressTimeout-constant.html\">kLongPressTimeout<\/a> + <a href=\"gestures\/kPressTimeout-constant.html\">kPressTimeout<\/a> between the two events) at the\ncenter of the given widget, assuming it is exposed.<\/p>\n<p>If the center of the widget is not exposed, this might send events to\nanother object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; longPress(Finder finder, {int pointer}) {\n  return longPressAt(getCenter(finder), pointer: pointer);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/longPress.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Dispatch a pointer down \/ pointer up sequence at the given location with\na delay of <a href=\"gestures\/kLongPressTimeout-constant.html\">kLongPressTimeout<\/a> + <a href=\"gestures\/kPressTimeout-constant.html\">kPressTimeout<\/a> between the two events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; longPressAt(Offset location, {int pointer}) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestGesture gesture = await startGesture(location, pointer: pointer);\n    await pump(kLongPressTimeout + kPressTimeout);\n    await gesture.up();\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/longPressAt.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "location",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Dispatch a pointer down at the center of the given widget, assuming it is\nexposed.<\/p>\n<p>If the center of the widget is not exposed, this might send events to\nanother object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;TestGesture&gt; press(Finder finder, {int pointer}) {\n  return TestAsyncUtils.guard&lt;TestGesture&gt;(() {\n    return startGesture(getCenter(finder), pointer: pointer);\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/press.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<flutter_test.TestGesture>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Called to indicate that time should advance.<\/p>\n<p>This is invoked by <a href=\"flutter_test\/WidgetController\/flingFrom.html\">flingFrom<\/a>, for instance, so that the sequence of\npointer events occurs over time.<\/p>\n<p>The <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a> subclass implements this by deferring to the <a href=\"flutter_test\/WidgetController\/binding.html\">binding<\/a>.<\/p>\n<p>See also <a href=\"scheduler\/SchedulerBinding\/endOfFrame.html\">SchedulerBinding.endOfFrame<\/a>, which returns a future that could\nbe appropriate to return in the implementation of this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pump(Duration duration);<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/pump.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "duration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>The render object of the matching widget in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or matches more than\none widget (even if they all have the same render object).<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstRenderObject.html\">firstRenderObject<\/a> if you expect to match several render objects but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/renderObjectList.html\">renderObjectList<\/a> if you expect to match several render objects and want all of them.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T renderObject&lt;T extends RenderObject&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().single.renderObject;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/renderObject.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The render objects of the matching widgets in the widget tree.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/renderObject.html\">renderObject<\/a> if you only expect to match one render object.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstRenderObject.html\">firstRenderObject<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; renderObjectList&lt;T extends RenderObject&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().map&lt;T&gt;((Element element) {\n    final T result = element.renderObject;\n    return result;\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/renderObjectList.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Forwards the given pointer event to the binding.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; sendEventToBinding(PointerEvent event, HitTestResult result) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    binding.dispatchEvent(event, result);\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/sendEventToBinding.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                },
                {
                    "name": "result",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Creates a gesture with an initial down gesture at a particular point, and\nreturns the <a href=\"flutter_test\/TestGesture-class.html\">TestGesture<\/a> object which you can use to continue the\ngesture.<\/p>\n<p>You can use <a href=\"flutter_test\/WidgetController\/createGesture.html\">createGesture<\/a> if your gesture doesn't begin with an initial\ndown gesture.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;TestGesture&gt; startGesture(\n  Offset downLocation, {\n  int pointer,\n  PointerDeviceKind kind = PointerDeviceKind.touch,\n}) async {\n  final TestGesture result = await createGesture(pointer: pointer, kind: kind);\n  await result.down(downLocation);\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/startGesture.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<flutter_test.TestGesture>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "downLocation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "kind",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.PointerDeviceKind"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>The matching state in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty, matches more than\none state, or matches a widget that has no state.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstState.html\">firstState<\/a> if you expect to match several states but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/stateList.html\">stateList<\/a> if you expect to match several states and want all of them.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T state&lt;T extends State&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return _stateOf&lt;T&gt;(finder.evaluate().single, finder);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/state.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The matching states in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if any of the elements in <code>finder<\/code> match a widget\nthat has no state.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/state.html\">state<\/a> if you only expect to match one state.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstState.html\">firstState<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; stateList&lt;T extends State&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().map&lt;T&gt;((Element element) =&gt; _stateOf&lt;T&gt;(element, finder));\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/stateList.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>Dispatch a pointer down \/ pointer up sequence at the center of\nthe given widget, assuming it is exposed.<\/p>\n<p>If the center of the widget is not exposed, this might send events to\nanother object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; tap(Finder finder, {int pointer}) {\n  return tapAt(getCenter(finder), pointer: pointer);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/tap.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Dispatch a pointer down \/ pointer up sequence at the given location.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; tapAt(Offset location, {int pointer}) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    final TestGesture gesture = await startGesture(location, pointer: pointer);\n    await gesture.up();\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/tapAt.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "location",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>The matching widget in the widget tree.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>finder<\/code> is empty or matches more than\none widget.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstWidget.html\">firstWidget<\/a> if you expect to match several widgets but only want the first.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/widgetList.html\">widgetList<\/a> if you expect to match several widgets and want all of them.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T widget&lt;T extends Widget&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().single.widget;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/widget.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        },
        {
            "desc": "<p>The matching widgets in the widget tree.<\/p>\n<ul>\n<li>Use <a href=\"flutter_test\/WidgetController\/widget.html\">widget<\/a> if you only expect to match one widget.<\/li>\n<li>Use <a href=\"flutter_test\/WidgetController\/firstWidget.html\">firstWidget<\/a> if you expect to match several but only want the first.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; widgetList&lt;T extends Widget&gt;(Finder finder) {\n  TestAsyncUtils.guardSync();\n  return finder.evaluate().map&lt;T&gt;((Element element) {\n    final T result = element.widget;\n    return result;\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/WidgetController\/widgetList.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.WidgetController",
            "params": [
                {
                    "name": "finder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.Finder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>All elements currently in the widget tree (lazy pre-order traversal).<\/p>\n<p>The returned iterable is lazy. It does not walk the entire widget tree\nimmediately, but rather a chunk at a time as the iteration progresses\nusing <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; get allElements {\n  TestAsyncUtils.guardSync();\n  return collectAllElementsFrom(binding.renderViewElement, skipOffstage: false);\n}<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/allElements.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<widgets.Element>",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        },
        {
            "desc": "<p>Render objects of all the widgets currently in the widget tree\n(lazy pre-order traversal).<\/p>\n<p>This will almost certainly include many duplicates since the\nrender object of a <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> or <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> is the\nrender object of its child; only <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s have\ntheir own render object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;RenderObject&gt; get allRenderObjects {\n  TestAsyncUtils.guardSync();\n  return allElements.map&lt;RenderObject&gt;((Element element) =&gt; element.renderObject);\n}<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/allRenderObjects.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<rendering.RenderObject>",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        },
        {
            "desc": "<p>All states currently in the widget tree (lazy pre-order traversal).<\/p>\n<p>The returned iterable is lazy. It does not walk the entire widget tree\nimmediately, but rather a chunk at a time as the iteration progresses\nusing <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;State&gt; get allStates {\n  TestAsyncUtils.guardSync();\n  return allElements.whereType&lt;StatefulElement&gt;().map&lt;State&gt;((StatefulElement element) =&gt; element.state);\n}<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/allStates.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<widgets.State<widgets.StatefulWidget>>",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        },
        {
            "desc": "<p>All widgets currently in the widget tree (lazy pre-order traversal).<\/p>\n<p>Can contain duplicates, since widgets can be used in multiple\nplaces in the widget tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Widget&gt; get allWidgets {\n  TestAsyncUtils.guardSync();\n  return allElements.map&lt;Widget&gt;((Element element) =&gt; element.widget);\n}<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/allWidgets.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<widgets.Widget>",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        },
        {
            "desc": "<p>A reference to the current instance of the binding.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WidgetsBinding binding\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/binding.html",
            "isDeprecated": "0",
            "type": "widgets.WidgetsBinding",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        },
        {
            "desc": "<p>Returns a list of all the <a href=\"rendering\/Layer-class.html\">Layer<\/a> objects in the rendering.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Layer&gt; get layers =&gt; _walkLayers(binding.renderView.layer).toList();<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/layers.html",
            "isDeprecated": "0",
            "type": "dart:core.List<rendering.Layer>",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        },
        {
            "desc": "<p>The next available pointer identifier.<\/p>\n<p>This is the default pointer identifier that will be used the next time the\n<a href=\"flutter_test\/WidgetController\/startGesture.html\">startGesture<\/a> method is called without an explicit pointer identifier.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int nextPointer = 1\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/WidgetController\/nextPointer.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "flutter_test.WidgetController",
            "params": []
        }
    ]
}