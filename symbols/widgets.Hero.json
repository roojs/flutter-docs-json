{
    "desc": "<p>A widget that marks its child as being a candidate for hero animations.<\/p>\n<p>When a <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> is pushed or popped with the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, the entire\nscreen's content is replaced. An old route disappears and a new route\nappears. If there's a common visual feature on both routes then it can\nbe helpful for orienting the user for the feature to physically move from\none page to the other during the routes' transition. Such an animation\nis called a <em>hero animation<\/em>. The hero widgets \"fly\" in the Navigator's\noverlay during the transition and while they're in-flight they're, by\ndefault, not shown in their original locations in the old and new routes.<\/p>\n<p>To label a widget as such a feature, wrap it in a <a href=\"widgets\/Hero-class.html\">Hero<\/a> widget. When\nnavigation happens, the <a href=\"widgets\/Hero-class.html\">Hero<\/a> widgets on each route are identified\nby the <a href=\"widgets\/HeroController-class.html\">HeroController<\/a>. For each pair of <a href=\"widgets\/Hero-class.html\">Hero<\/a> widgets that have the\nsame tag, a hero animation is triggered.<\/p>\n<p>If a <a href=\"widgets\/Hero-class.html\">Hero<\/a> is already in flight when navigation occurs, its\nflight animation will be redirected to its new destination.\nThe widget shown in-flight during the transition is, by default, the\ndestination route's <a href=\"widgets\/Hero-class.html\">Hero<\/a>'s child.<\/p>\n<p>Routes must not contain more than one <a href=\"widgets\/Hero-class.html\">Hero<\/a> for each <a href=\"widgets\/Hero\/tag.html\">tag<\/a>.<\/p>\n<h2 id=\"discussion\">Discussion<\/h2>\n<p>Heroes and the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>'s <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> <a href=\"widgets\/Stack-class.html\">Stack<\/a> must be axis-aligned for\nall this to work. The top left and bottom right coordinates of each animated\nHero will be converted to global coordinates and then from there converted\nto that <a href=\"widgets\/Stack-class.html\">Stack<\/a>'s coordinate space, and the entire Hero subtree will, for\nthe duration of the animation, be lifted out of its original place, and\npositioned on that stack. If the <a href=\"widgets\/Hero-class.html\">Hero<\/a> isn't axis aligned, this is going to\nfail in a rather ugly fashion. Don't rotate your heroes!<\/p>\n<p>To make the animations look good, it's critical that the widget tree for the\nhero in both locations be essentially identical. The widget of the <em>target<\/em>\nis, by default, used to do the transition: when going from route A to route\nB, route B's hero's widget is placed over route A's hero's widget. If a\n<a href=\"widgets\/Hero\/flightShuttleBuilder.html\">flightShuttleBuilder<\/a> is supplied, its output widget is shown during the\nflight transition instead.<\/p>\n<p>By default, both route A and route B's heroes are hidden while the\ntransitioning widget is animating in-flight above the 2 routes.\n<a href=\"widgets\/Hero\/placeholderBuilder.html\">placeholderBuilder<\/a> can be used to show a custom widget in their place\ninstead once the transition has taken flight.<\/p>\n<p>During the transition, the transition widget is animated to route B's hero's\nposition, and then the widget is inserted into route B. When going back from\nB to A, route A's hero's widget is, by default, placed over where route B's\nhero's widget was, and then the animation goes the other way.<\/p>\n<h3 id=\"nested-navigators\">Nested Navigators<\/h3>\n<p>If either or both routes contain nested <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s, only <a href=\"widgets\/Hero-class.html\">Hero<\/a>s\ncontained in the top-most routes (as defined by <a href=\"widgets\/Route\/isCurrent.html\">Route.isCurrent<\/a>) <em>of those\nnested <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s<\/em> are considered for animation. Just like in the\nnon-nested case the top-most routes containing these <a href=\"widgets\/Hero-class.html\">Hero<\/a>s in the nested\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s have to be <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>s.<\/p>\n<h2 id=\"parts-of-a-hero-transition\">Parts of a Hero Transition<\/h2>\n<p><img alt=\"Diagrams with parts of the Hero transition.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/interaction\/heroes.png\"><\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Hero-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Hero",
    "shortname": "Hero",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Defines how the destination hero's bounds change as it flies from the starting\nroute to the destination route.<\/p>\n<p>A hero flight begins with the destination hero's <a href=\"widgets\/Hero\/child.html\">child<\/a> aligned with the\nstarting hero's child. The <a href=\"animation\/Tween-class.html\">Tween&lt;Rect&gt;<\/a> returned by this callback is used\nto compute the hero's bounds as the flight animation's value goes from 0.0\nto 1.0.<\/p>\n<p>If this property is null, the default, then the value of\n<a href=\"widgets\/Hero\/createRectTween.html\">HeroController.createRectTween<\/a> is used. The <a href=\"widgets\/HeroController-class.html\">HeroController<\/a> created by\n<a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> creates a <code>MaterialRectAreTween<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CreateRectTween createRectTween\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Hero\/createRectTween.html",
            "isDeprecated": false,
            "type": "widgets.CreateRectTween",
            "name": "createRectTween",
            "memberOf": "widgets.Hero",
            "params": []
        },
        {
            "desc": "<p>Optional override to supply a widget that's shown during the hero's flight.<\/p>\n<p>This in-flight widget can depend on the route transition's animation as\nwell as the incoming and outgoing routes' <a href=\"widgets\/Hero-class.html\">Hero<\/a> descendants' widgets and\nlayout.<\/p>\n<p>When both the source and destination <a href=\"widgets\/Hero-class.html\">Hero<\/a>s provide a <a href=\"widgets\/Hero\/flightShuttleBuilder.html\">flightShuttleBuilder<\/a>,\nthe destination's <a href=\"widgets\/Hero\/flightShuttleBuilder.html\">flightShuttleBuilder<\/a> takes precedence.<\/p>\n<p>If none is provided, the destination route's Hero child is shown in-flight\nby default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HeroFlightShuttleBuilder flightShuttleBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Hero\/flightShuttleBuilder.html",
            "isDeprecated": false,
            "type": "widgets.HeroFlightShuttleBuilder",
            "name": "flightShuttleBuilder",
            "memberOf": "widgets.Hero",
            "params": []
        },
        {
            "desc": "<p>Placeholder widget left in place as the Hero's child once the flight takes off.<\/p>\n<p>By default, an empty SizedBox keeping the Hero child's original size is\nleft in place once the Hero shuttle has taken flight.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TransitionBuilder placeholderBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Hero\/placeholderBuilder.html",
            "isDeprecated": false,
            "type": "widgets.TransitionBuilder",
            "name": "placeholderBuilder",
            "memberOf": "widgets.Hero",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Create a hero.<\/p>\n<p>The <code>tag<\/code> and <code>child<\/code> parameters must not be null.\nThe <code>child<\/code> parameter and all of the its descendants must not be <a href=\"widgets\/Hero-class.html\">Hero<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Hero({\n  Key key,\n  @required this.tag,\n  this.createRectTween,\n  this.flightShuttleBuilder,\n  this.placeholderBuilder,\n  this.transitionOnUserGestures = false,\n  @required this.child,\n}) : assert(tag != null),\n     assert(transitionOnUserGestures != null),\n     assert(child != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Hero\/Hero.html",
            "isDeprecated": false,
            "type": "",
            "name": "Hero",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Hero",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "createRectTween",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.CreateRectTween"
                },
                {
                    "name": "flightShuttleBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.HeroFlightShuttleBuilder"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "placeholderBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.TransitionBuilder"
                },
                {
                    "name": "tag",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "transitionOnUserGestures",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/Hero\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_HeroState createState() =&gt; _HeroState();<\/code><\/pre>\n    ",
            "href": "widgets\/Hero\/createState.html",
            "isDeprecated": false,
            "type": "<_HeroState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Hero",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Hero\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Object&gt;('tag', tag));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Hero\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Hero",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget subtree that will \"fly\" from one route to another during a\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> push or pop transition.<\/p>\n<p>The appearance of this subtree should be similar to the appearance of\nthe subtrees of any other heroes in the application with the same <a href=\"widgets\/Hero\/tag.html\">tag<\/a>.\nChanges in scale and aspect ratio work well in hero animations, changes\nin layout or composition do not.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Hero\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "widgets.Hero",
            "params": []
        },
        {
            "desc": "<p>The identifier for this particular hero. If the tag of this hero matches\nthe tag of a hero on a <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> that we're navigating to or from, then\na hero animation will be triggered.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object tag\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Hero\/tag.html",
            "name": "tag",
            "isDeprecated": false,
            "type": "dart:core.Object",
            "memberOf": "widgets.Hero",
            "params": []
        },
        {
            "desc": "<p>Whether to perform the hero transition if the <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> transition was\ntriggered by a user gesture, such as a back swipe on iOS.<\/p>\n<p>If <a href=\"widgets\/Hero-class.html\">Hero<\/a>s with the same <a href=\"widgets\/Hero\/tag.html\">tag<\/a> on both the from and the to routes have\n<a href=\"widgets\/Hero\/transitionOnUserGestures.html\">transitionOnUserGestures<\/a> set to true, a back swipe gesture will\ntrigger the same hero animation as a programmatically triggered push or\npop.<\/p>\n<p>The route being popped to or the bottom route must also have\n<a href=\"widgets\/ModalRoute\/maintainState.html\">PageRoute.maintainState<\/a> set to true for a gesture triggered hero\ntransition to work.<\/p>\n<p>Defaults to false and cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool transitionOnUserGestures\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Hero\/transitionOnUserGestures.html",
            "name": "transitionOnUserGestures",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.Hero",
            "params": []
        }
    ]
}