{
    "desc": "<p>Recognizes a force press on devices that have force sensors.<\/p>\n<p>Only the force from a single pointer is used to invoke events. A tap\nrecognizer will win against this recognizer on pointer up as long as the\npointer has not pressed with a force greater than\n<a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">ForcePressGestureRecognizer.startPressure<\/a>. A long press recognizer will\nwin when the press down time exceeds the threshold time as long as the\npointer's pressure was never greater than\n<a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">ForcePressGestureRecognizer.startPressure<\/a> in that duration.<\/p>\n<p>As of November, 2018 iPhone devices of generation 6S and higher have\nforce touch functionality, with the exception of the iPhone XR. In addition,\na small handful of Android devices have this functionality as well.<\/p>\n<p>Devices with faux screen pressure sensors like the Pixel 2 and 3 will not\nsend any force press related callbacks.<\/p>\n<p>Reported pressure will always be in the range 0.0 to 1.0, where 1.0 is\nmaximum pressure and 0.0 is minimum pressure. If using a custom\n<a href=\"gestures\/ForcePressGestureRecognizer\/interpolation.html\">interpolation<\/a> callback, the pressure reported will correspond to that\ncustom curve.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "gestures\/ForcePressGestureRecognizer-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "gestures",
    "name": "gestures.ForcePressGestureRecognizer",
    "shortname": "ForcePressGestureRecognizer",
    "extends": [
        "gestures.OneSequenceGestureRecognizer",
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>The function used to convert the raw device pressure values into a value\nin the range 0.0 to 1.0.<\/p>\n<p>The function takes in the device's minimum, maximum and raw touch pressure\nand returns a value in the range 0.0 to 1.0 denoting the interpolated\ntouch pressure.<\/p>\n<p>This function must always return values in the range 0.0 to 1.0 given a\npressure that is between the minimum and maximum pressures. It may return\n<code>double.NaN<\/code> for values that it does not want to support.<\/p>\n<p>By default, the function is a linear interpolation; however, changing the\nfunction could be useful to accommodate variations in the way different\ndevices respond to pressure, or to change how animations from pressure\nfeedback are rendered.<\/p>\n<p>For example, an ease-in curve can be used to determine the interpolated\nvalue:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">static double interpolateWithEasing(double min, double max, double t) {\n   final double lerp = (t - min) \/ (max - min);\n   return Curves.easeIn.transform(lerp);\n}\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForceInterpolation interpolation\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/interpolation.html",
            "isDeprecated": "0",
            "type": "gestures.GestureForceInterpolation",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer is no longer in contact with the screen.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressEndCallback onEnd\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/onEnd.html",
            "isDeprecated": "0",
            "type": "gestures.GestureForcePressEndCallback",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer is in contact with the screen and has just pressed with a force\nexceeding the <a href=\"gestures\/ForcePressGestureRecognizer\/peakPressure.html\">peakPressure<\/a>. This is an arbitrary second level action\nthreshold and isn't necessarily the maximum possible device pressure\n(which is 1.0).<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressPeakCallback onPeak\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/onPeak.html",
            "isDeprecated": "0",
            "type": "gestures.GestureForcePressPeakCallback",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer is in contact with the screen and has just pressed with a force\nexceeding the <a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">startPressure<\/a>. Consequently, if there were other gesture\ndetectors, only the force press gesture will be detected and all others\nwill be rejected.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/ForcePressDetails-class.html\">ForcePressDetails<\/a> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressStartCallback onStart\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/onStart.html",
            "isDeprecated": "0",
            "type": "gestures.GestureForcePressStartCallback",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer is in contact with the screen and is either moving on the plane\nof the screen, pressing the screen with varying forces or both\nsimultaneously.<\/p>\n<p>This callback will be invoked for every pointer event after the invocation\nof <a href=\"gestures\/ForcePressGestureRecognizer\/onStart.html\">onStart<\/a> and\/or <a href=\"gestures\/ForcePressGestureRecognizer\/onPeak.html\">onPeak<\/a> and before the invocation of <a href=\"gestures\/ForcePressGestureRecognizer\/onEnd.html\">onEnd<\/a>, no\nmatter what the pressure is during this time period. The position and\npressure of the pointer is provided in the callback's <code>details<\/code> argument,\nwhich is a <code>ForcePressUpdateDetails<\/code> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureForcePressUpdateCallback onUpdate\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/onUpdate.html",
            "isDeprecated": "0",
            "type": "gestures.GestureForcePressUpdateCallback",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a force press gesture recognizer.<\/p>\n<p>The <code>startPressure<\/code> defaults to 0.4, and <code>peakPressure<\/code> defaults to 0.85\nwhere a value of 0.0 is no pressure and a value of 1.0 is maximum pressure.<\/p>\n<p>The <code>startPressure<\/code>, <code>peakPressure<\/code> and <code>interpolation<\/code> arguments must not\nbe null. The <code>peakPressure<\/code> argument must be greater than <code>startPressure<\/code>.\nThe <code>interpolation<\/code> callback must always return a value in the range 0.0\nto 1.0 for values of <code>pressure<\/code> that are between <code>pressureMin<\/code> and\n<code>pressureMax<\/code>.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ForcePressGestureRecognizer({\n  this.startPressure = 0.4,\n  this.peakPressure = 0.85,\n  this.interpolation = _inverseLerp,\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : assert(startPressure != null),\n     assert(peakPressure != null),\n     assert(interpolation != null),\n     assert(peakPressure &gt; startPressure),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
            "href": "gestures\/ForcePressGestureRecognizer\/ForcePressGestureRecognizer.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": [
                {
                    "name": "debugOwner",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "interpolation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "gestures.GestureForceInterpolation"
                },
                {
                    "name": "kind",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.PointerDeviceKind"
                },
                {
                    "name": "peakPressure",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "startPressure",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  if (_state == _ForceState.possible)\n    _state = _ForceState.accepted;\n\n  if (onStart != null &amp;&amp; _state == _ForceState.started) {\n    invokeCallback&lt;void&gt;('onStart', () =&gt; onStart(ForcePressDetails(\n      pressure: _lastPressure,\n      globalPosition: _lastPosition,\n    )));\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ForcePressGestureRecognizer\/acceptGesture.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/ForcePressGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  \/\/ If the device has a maximum pressure of less than or equal to 1, it\n  \/\/ doesn't have touch pressure sensing capabilities. Do not participate\n  \/\/ in the gesture arena.\n  if (!(event is PointerUpEvent) &amp;&amp; event.pressureMax &lt;= 1.0) {\n    resolve(GestureDisposition.rejected);\n  } else {\n    startTrackingPointer(event.pointer);\n    if (_state == _ForceState.ready) {\n      _state = _ForceState.possible;\n      _lastPosition = event.position;\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ForcePressGestureRecognizer\/addAllowedPointer.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  final bool wasAccepted = _state == _ForceState.started || _state == _ForceState.peaked;\n  if (_state == _ForceState.possible) {\n    resolve(GestureDisposition.rejected);\n    return;\n  }\n  if (wasAccepted &amp;&amp; onEnd != null) {\n    if (onEnd != null) {\n      invokeCallback&lt;void&gt;('onEnd', () =&gt; onEnd(ForcePressDetails(\n        pressure: 0.0,\n        globalPosition: _lastPosition,\n      )));\n    }\n  }\n  _state = _ForceState.ready;\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ForcePressGestureRecognizer\/didStopTrackingLastPointer.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(_state != _ForceState.ready);\n  \/\/ A static pointer with changes in pressure creates PointerMoveEvent events.\n  if (event is PointerMoveEvent || event is PointerDownEvent) {\n    if (event.pressure &gt; event.pressureMax || event.pressure &lt; event.pressureMin) {\n      debugPrint(\n        'The reported device pressure ' + event.pressure.toString() +\n        ' is outside of the device pressure range where: ' +\n        event.pressureMin.toString() + ' &lt;= pressure &lt;= ' + event.pressureMax.toString(),\n      );\n    }\n\n    final double pressure = interpolation(event.pressureMin, event.pressureMax, event.pressure);\n    assert(\n      (pressure &gt;= 0.0 &amp;&amp; pressure &lt;= 1.0) || \/\/ Interpolated pressure must be between 1.0 and 0.0...\n      pressure.isNaN \/\/ and interpolation may return NaN for values it doesn't want to support...\n    );\n\n    _lastPosition = event.position;\n    _lastPressure = pressure;\n\n    if (_state == _ForceState.possible) {\n      if (pressure &gt; startPressure) {\n        _state = _ForceState.started;\n        resolve(GestureDisposition.accepted);\n      } else if (event.delta.distanceSquared &gt; kTouchSlop) {\n        resolve(GestureDisposition.rejected);\n      }\n    }\n    \/\/ In case this is the only gesture detector we still don't want to start\n    \/\/ the gesture until the pressure is greater than the startPressure.\n    if (pressure &gt; startPressure &amp;&amp; _state == _ForceState.accepted) {\n      _state = _ForceState.started;\n      if (onStart != null) {\n        invokeCallback&lt;void&gt;('onStart', () =&gt; onStart(ForcePressDetails(\n          pressure: pressure,\n          globalPosition: _lastPosition,\n        )));\n      }\n    }\n    if (onPeak != null &amp;&amp; pressure &gt; peakPressure &amp;&amp;\n       (_state == _ForceState.started)) {\n      _state = _ForceState.peaked;\n      if (onPeak != null) {\n        invokeCallback&lt;void&gt;('onPeak', () =&gt; onPeak(ForcePressDetails(\n          pressure: pressure,\n          globalPosition: event.position,\n        )));\n      }\n    }\n    if (onUpdate != null &amp;&amp;  !pressure.isNaN &amp;&amp;\n       (_state == _ForceState.started || _state == _ForceState.peaked)) {\n      if (onUpdate != null) {\n        invokeCallback&lt;void&gt;('onUpdate', () =&gt; onUpdate(ForcePressDetails(\n          pressure: pressure,\n          globalPosition: event.position,\n        )));\n      }\n    }\n  }\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ForcePressGestureRecognizer\/handleEvent.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  stopTrackingPointer(pointer);\n  didStopTrackingLastPointer(pointer);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ForcePressGestureRecognizer\/rejectGesture.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'force press';<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/debugDescription.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The pressure of the press required to peak a force press.<\/p>\n<p>A value of 0.0 is no pressure, and 1.0 is maximum pressure. This value\nmust be greater than <a href=\"gestures\/ForcePressGestureRecognizer\/startPressure.html\">startPressure<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double peakPressure\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/peakPressure.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The pressure of the press required to initiate a force press.<\/p>\n<p>A value of 0.0 is no pressure, and 1.0 is maximum pressure.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double startPressure\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ForcePressGestureRecognizer\/startPressure.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "gestures.ForcePressGestureRecognizer",
            "params": []
        }
    ]
}