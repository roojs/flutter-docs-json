{
    "desc": "<p>A single set that provides a view of the union over a set of sets.<\/p>\n<p>Since this is just a view, it reflects all changes in the underlying sets.<\/p>\n<p>If an element is in multiple sets and the outer set is ordered, the version\nin the earliest inner set is preferred. Component sets are assumed to use\n<code>==<\/code> and <code>hashCode<\/code> for equality.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-collection_collection\/UnionSet-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "collection",
    "name": "collection.UnionSet",
    "shortname": "UnionSet",
    "extends": [
        "dart:collection.SetBase",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new set that's a view of the union of all sets in <code>sets<\/code>.<\/p>\n<p>If any sets in <code>sets<\/code> change, this <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> reflects that change. If a\nnew set is added to <code>sets<\/code>, this <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> reflects that as well.<\/p>\n<p>If <code>disjoint<\/code> is <code>true<\/code>, then all component sets must be disjoint. That\nis, that they contain no elements in common. This makes many operations\nincluding <a href=\"package-collection_collection\/UnionSet\/length.html\">length<\/a> more efficient. If the component sets turn out not to\nbe disjoint, some operations may behave inconsistently.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnionSet(this._sets, {bool disjoint: false}) : _disjoint = disjoint;<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/UnionSet\/UnionSet.html",
            "isDeprecated": "0",
            "type": "",
            "name": "UnionSet",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "collection.UnionSet",
            "params": [
                {
                    "name": "_sets",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Set<dart:core.Set>"
                },
                {
                    "name": "disjoint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns true if <code>value<\/code> is in the set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; _sets.any((set) =&gt; set.contains(element));<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/UnionSet\/contains.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "contains",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.UnionSet",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"package-collection_collection\/UnionSet\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"package-collection_collection\/UnionSet\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object element) {\n  if (element == null) return null;\n\n  return _sets\n      .map((set) =&gt; set.lookup(element))\n      .firstWhere((result) =&gt; result != null, orElse: () =&gt; null);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/UnionSet\/lookup.html",
            "isDeprecated": "0",
            "type": "<E>",
            "name": "lookup",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.UnionSet",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  var result = new Set&lt;E&gt;();\n  for (var set in _sets) {\n    result.addAll(set);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/UnionSet\/toSet.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "name": "toSet",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.UnionSet",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _iterable.iterator;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/UnionSet\/iterator.html",
            "name": "iterator",
            "isDeprecated": "0",
            "type": "dart:core.Iterator",
            "memberOf": "collection.UnionSet",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _disjoint\n    ? _sets.fold(0, (length, set) =&gt; length + set.length)\n    : _iterable.length;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/UnionSet\/length.html",
            "name": "length",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "collection.UnionSet",
            "params": []
        }
    ]
}