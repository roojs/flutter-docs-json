{
    "name": "painting.Border",
    "extends": [
        "painting.BoxBorder",
        "painting.ShapeBorder",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/Border\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final Border typedOther = other;\n  return top == typedOther.top &amp;&amp;\n         right == typedOther.right &amp;&amp;\n         bottom == typedOther.bottom &amp;&amp;\n         left == typedOther.left;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Border",
            "type": "",
            "desc": "<p>Creates a border.<\/p>\n<p>All the sides of the border default to <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "top",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/Border\/Border.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Border({\n  this.top = BorderSide.none,\n  this.right = BorderSide.none,\n  this.bottom = BorderSide.none,\n  this.left = BorderSide.none,\n}) : assert(top != null),\n     assert(right != null),\n     assert(bottom != null),\n     assert(left != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "painting.Border",
            "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reversed",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorder add(ShapeBorder other, { bool reversed = false }) {\n  if (other is! Border)\n    return null;\n  final Border typedOther = other;\n  if (BorderSide.canMerge(top, typedOther.top) &amp;&amp;\n      BorderSide.canMerge(right, typedOther.right) &amp;&amp;\n      BorderSide.canMerge(bottom, typedOther.bottom) &amp;&amp;\n      BorderSide.canMerge(left, typedOther.left)) {\n    return Border.merge(this, typedOther);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Border.all",
            "type": "",
            "desc": "<p>A uniform border with all sides the same color and width.<\/p>\n<p>The sides default to black solid borders, one logical pixel wide.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "painting.BorderStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/Border\/Border.all.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Border.all({\n  Color color = const Color(0xFF000000),\n  double width = 1.0,\n  BorderStyle style = BorderStyle.solid,\n}) {\n  final BorderSide side = BorderSide(color: color, width: width, style: style);\n  return Border(top: side, right: side, bottom: side, left: side);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.Border",
            "desc": "<p>Linearly interpolate between two borders.<\/p>\n<p>If a border is null, it is treated as having four <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nborders.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.Border",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.Border",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Border lerp(Border a, Border b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return Border(\n    top: BorderSide.lerp(a.top, b.top, t),\n    right: BorderSide.lerp(a.right, b.right, t),\n    bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n    left: BorderSide.lerp(a.left, b.left, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpFrom",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Border\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/Border\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/Border\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Border\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/lerpFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a is Border)\n    return Border.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpTo",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/Border\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Border\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/Border\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Border\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/lerpTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b is Border)\n    return Border.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "merge",
            "type": "painting.Border",
            "desc": "<p>Creates a <a href=\"painting\/Border-class.html\">Border<\/a> that represents the addition of the two given\n<a href=\"painting\/Border-class.html\">Border<\/a>s.<\/p>\n<p>It is only valid to call this if <a href=\"painting\/BorderSide\/canMerge.html\">BorderSide.canMerge<\/a> returns true for\nthe pairwise combination of each side on both <a href=\"painting\/Border-class.html\">Border<\/a>s.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.Border",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.Border",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/merge.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Border merge(Border a, Border b) {\n  assert(a != null);\n  assert(b != null);\n  assert(BorderSide.canMerge(a.top, b.top));\n  assert(BorderSide.canMerge(a.right, b.right));\n  assert(BorderSide.canMerge(a.bottom, b.bottom));\n  assert(BorderSide.canMerge(a.left, b.left));\n  return Border(\n    top: BorderSide.merge(a.top, b.top),\n    right: BorderSide.merge(a.right, b.right),\n    bottom: BorderSide.merge(a.bottom, b.bottom),\n    left: BorderSide.merge(a.left, b.left),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "paint",
            "type": "",
            "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>Uniform borders are more efficient to paint than more complex borders.<\/p>\n<p>You can provide a <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a> to draw the border on. If the <code>shape<\/code> in\n<a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, there is the requirement that the border <a href=\"painting\/Border\/isUniform.html\">isUniform<\/a>.<\/p>\n<p>If you specify a rectangular box shape (<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>), then you\nmay specify a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>. If a <code>borderRadius<\/code> is specified, there is\nthe requirement that the border <a href=\"painting\/Border\/isUniform.html\">isUniform<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> and <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> methods do not know about the\n<code>shape<\/code> and <code>borderRadius<\/code> arguments.<\/p>\n<p>The <code>textDirection<\/code> argument is not used by this paint method.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/paintBorder.html\">paintBorder<\/a>, which is used if the border is not uniform.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.BoxShape",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/paint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  Canvas canvas,\n  Rect rect, {\n  TextDirection textDirection,\n  BoxShape shape = BoxShape.rectangle,\n  BorderRadius borderRadius,\n}) {\n  if (isUniform) {\n    switch (top.style) {\n      case BorderStyle.none:\n        return;\n      case BorderStyle.solid:\n        switch (shape) {\n          case BoxShape.circle:\n            assert(borderRadius == null, 'A borderRadius can only be given for rectangular boxes.');\n            BoxBorder._paintUniformBorderWithCircle(canvas, rect, top);\n            break;\n          case BoxShape.rectangle:\n            if (borderRadius != null) {\n              BoxBorder._paintUniformBorderWithRadius(canvas, rect, top, borderRadius);\n              return;\n            }\n            BoxBorder._paintUniformBorderWithRectangle(canvas, rect, top);\n            break;\n        }\n        return;\n    }\n  }\n\n  assert(borderRadius == null, 'A borderRadius can only be given for uniform borders.');\n  assert(shape == BoxShape.rectangle, 'A border can only be drawn as a circle if it is uniform.');\n\n  paintBorder(canvas, rect, top: top, right: right, bottom: bottom, left: left);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "scale",
            "type": "painting.Border",
            "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/Border\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Border\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorder scale(double t) {\n  return Border(\n    top: top.scale(t),\n    right: right.scale(t),\n    bottom: bottom.scale(t),\n    left: left.scale(t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Border",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/Border\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (isUniform)\n    return '$runtimeType.all($top)';\n  final List&lt;String&gt; arguments = &lt;String&gt;[];\n  if (top != BorderSide.none)\n    arguments.add('top: $top');\n  if (right != BorderSide.none)\n    arguments.add('right: $right');\n  if (bottom != BorderSide.none)\n    arguments.add('bottom: $bottom');\n  if (left != BorderSide.none)\n    arguments.add('left: $left');\n  return '$runtimeType(${arguments.join(\", \")})';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bottom",
            "type": "painting.BorderSide",
            "types": [],
            "desc": "<p>The bottom side of this border.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/bottom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide bottom\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "dimensions",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/Border\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/Border\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/dimensions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.fromLTRB(left.width, top.width, right.width, bottom.width);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/Border\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(top, right, bottom, left);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isUniform",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether all four sides of the border are identical. Uniform borders are\ntypically more efficient to paint.<\/p>\n<p>A uniform border by definition has no text direction dependency and\ntherefore could be expressed as a <a href=\"painting\/Border-class.html\">Border<\/a>, even if it is currently a\n<a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. A uniform border can also be expressed as a\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/isUniform.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isUniform {\n  final Color topColor = top.color;\n  if (right.color != topColor ||\n      bottom.color != topColor ||\n      left.color != topColor)\n    return false;\n\n  final double topWidth = top.width;\n  if (right.width != topWidth ||\n      bottom.width != topWidth ||\n      left.width != topWidth)\n    return false;\n\n  final BorderStyle topStyle = top.style;\n  if (right.style != topStyle ||\n      bottom.style != topStyle ||\n      left.style != topStyle)\n    return false;\n\n  return true;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "left",
            "type": "painting.BorderSide",
            "types": [],
            "desc": "<p>The left side of this border.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/left.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide left\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "right",
            "type": "painting.BorderSide",
            "types": [],
            "desc": "<p>The right side of this border.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/right.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide right\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "top",
            "type": "painting.BorderSide",
            "types": [],
            "desc": "<p>The top side of this border.<\/p>\n<p>This getter is available on both <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. If\n<a href=\"painting\/Border\/isUniform.html\">isUniform<\/a> is true, then this is the same style as all the other sides.<\/p>\n        ",
            "memberOf": "painting.Border",
            "isConstant": false,
            "href": "painting\/Border\/top.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide top\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.BorderTween"
    ],
    "realImplementors": [
        "widgets.BorderTween"
    ],
    "cn": [],
    "href": "painting\/Border-class.html",
    "desc": "<p>A border of a box, comprised of four sides: top, right, bottom, left.<\/p>\n<p>The sides are represented by <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nAll four borders the same, two-pixel wide solid white:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Border.all(width: 2.0, color: const Color(0xFFFFFFFF))<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe border for a material design divider:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Border(bottom: BorderSide(color: Theme.of(context).dividerColor))<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA 1990s-era \"OK\" button:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: const BoxDecoration(\n    border: Border(\n      top: BorderSide(width: 1.0, color: Color(0xFFFFFFFFFF)),\n      left: BorderSide(width: 1.0, color: Color(0xFFFFFFFFFF)),\n      right: BorderSide(width: 1.0, color: Color(0xFFFF000000)),\n      bottom: BorderSide(width: 1.0, color: Color(0xFFFF000000)),\n    ),\n  ),\n  child: Container(\n    padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 2.0),\n    decoration: const BoxDecoration(\n      border: Border(\n        top: BorderSide(width: 1.0, color: Color(0xFFFFDFDFDF)),\n        left: BorderSide(width: 1.0, color: Color(0xFFFFDFDFDF)),\n        right: BorderSide(width: 1.0, color: Color(0xFFFF7F7F7F)),\n        bottom: BorderSide(width: 1.0, color: Color(0xFFFF7F7F7F)),\n      ),\n      color: Color(0xFFBFBFBF),\n    ),\n    child: const Text(\n      'OK',\n      textAlign: TextAlign.center,\n      style: TextStyle(color: Color(0xFF000000))\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which uses this class to describe its edge decoration.<\/li>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a>, from the material layer, which can be queried to obtain appropriate colors\nto use for borders in a material app, as shown in the \"divider\" sample above.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Border"
}