{
    "desc": "<p>Provides sizing and opacity information to a <a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a> which creates a flexible space bar.<\/li><\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/FlexibleSpaceBarSettings-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.FlexibleSpaceBarSettings",
    "shortname": "FlexibleSpaceBarSettings",
    "extends": [
        "widgets.InheritedWidget",
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a Flexible Space Bar Settings widget.<\/p>\n<p>Used by <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> and <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>. <code>child<\/code> must have a\n<a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a> widget in its tree for the settings to take affect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlexibleSpaceBarSettings({\n  Key key,\n  this.toolbarOpacity,\n  this.minExtent,\n  this.maxExtent,\n  @required this.currentExtent,\n  @required Widget child,\n}) : assert(currentExtent != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "material\/FlexibleSpaceBarSettings\/FlexibleSpaceBarSettings.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.FlexibleSpaceBarSettings",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "currentExtent",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "maxExtent",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "minExtent",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "toolbarOpacity",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(FlexibleSpaceBarSettings oldWidget) {\n  return toolbarOpacity != oldWidget.toolbarOpacity\n      || minExtent != oldWidget.minExtent\n      || maxExtent != oldWidget.maxExtent\n      || currentExtent != oldWidget.currentExtent;\n}<\/code><\/pre>\n    ",
            "href": "material\/FlexibleSpaceBarSettings\/updateShouldNotify.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.FlexibleSpaceBarSettings",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.FlexibleSpaceBarSettings"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>If the <a href=\"material\/FlexibleSpaceBar\/title.html\">FlexibleSpaceBar.title<\/a> or the <a href=\"material\/FlexibleSpaceBar\/background.html\">FlexibleSpaceBar.background<\/a> is\nnot null, then this value is used to calculate the relative scale of\nthese elements upon initialization.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double currentExtent\n\n<\/code><\/pre>\n        ",
            "href": "material\/FlexibleSpaceBarSettings\/currentExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FlexibleSpaceBarSettings",
            "params": []
        },
        {
            "desc": "<p>Maximum height of the resulting <a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a> when fully expanded.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double maxExtent\n\n<\/code><\/pre>\n        ",
            "href": "material\/FlexibleSpaceBarSettings\/maxExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FlexibleSpaceBarSettings",
            "params": []
        },
        {
            "desc": "<p>Minimum height of the resulting <a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a> when fully collapsed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minExtent\n\n<\/code><\/pre>\n        ",
            "href": "material\/FlexibleSpaceBarSettings\/minExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FlexibleSpaceBarSettings",
            "params": []
        },
        {
            "desc": "<p>Affects how transparent the text within the toolbar appears.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double toolbarOpacity\n\n<\/code><\/pre>\n        ",
            "href": "material\/FlexibleSpaceBarSettings\/toolbarOpacity.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FlexibleSpaceBarSettings",
            "params": []
        }
    ]
}