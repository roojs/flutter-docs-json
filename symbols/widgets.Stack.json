{
    "desc": "<p>A widget that positions its children relative to the edges of its box.<\/p>\n<p>This class is useful if you want to overlap several children in a simple\nway, for example having some text and an image, overlaid with a gradient and\na button attached to the bottom.<\/p>\n<p>Each child of a <a href=\"widgets\/Stack-class.html\">Stack<\/a> widget is either <em>positioned<\/em> or <em>non-positioned<\/em>.\nPositioned children are those wrapped in a <a href=\"widgets\/Positioned-class.html\">Positioned<\/a> widget that has at\nleast one non-null property. The stack sizes itself to contain all the\nnon-positioned children, which are positioned according to <a href=\"widgets\/Stack\/alignment.html\">alignment<\/a>\n(which defaults to the top-left corner in left-to-right environments and the\ntop-right corner in right-to-left environments). The positioned children are\nthen placed relative to the stack according to their top, right, bottom, and\nleft properties.<\/p>\n<p>The stack paints its children in order with the first child being at the\nbottom. If you want to change the order in which the children paint, you\ncan rebuild the stack with the children in the new order. If you reorder\nthe children in this way, consider giving the children non-null keys.\nThese keys will cause the framework to move the underlying objects for\nthe children to their new locations rather than recreate them at their\nnew location.<\/p>\n<p>For more details about the stack layout algorithm, see <a href=\"rendering\/RenderStack-class.html\">RenderStack<\/a>.<\/p>\n<p>If you want to lay a number of children out in a particular pattern, or if\nyou want to make a custom layout manager, you probably want to use\n<a href=\"widgets\/CustomMultiChildLayout-class.html\">CustomMultiChildLayout<\/a> instead. In particular, when using a <a href=\"widgets\/Stack-class.html\">Stack<\/a> you\ncan't position children relative to their size or the stack's own size.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nUsing a <a href=\"widgets\/Stack-class.html\">Stack<\/a> you can position widgets over one another.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Stack(\n  children: &lt;Widget&gt;[\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.red,\n    ),\n    Container(\n      width: 90,\n      height: 90,\n      color: Colors.green,\n    ),\n    Container(\n      width: 80,\n      height: 80,\n      color: Colors.blue,\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how <a href=\"widgets\/Stack-class.html\">Stack<\/a> can be used to enhance text visibility\nby adding gradient backdrops.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">SizedBox(\n  width: 250,\n  height: 250,\n  child: Stack(\n    children: &lt;Widget&gt;[\n      Container(\n        width: 250,\n        height: 250,\n        color: Colors.white,\n      ),\n      Container(\n        padding: EdgeInsets.all(5.0),\n        alignment: Alignment.bottomCenter,\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: &lt;Color&gt;[\n              Colors.black.withAlpha(0),\n              Colors.black12,\n              Colors.black45\n            ],\n          ),\n        ),\n        child: Text(\n          \"Foreground Text\",\n          style: TextStyle(color: Colors.white, fontSize: 20.0),\n        ),\n      ),\n    ],\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Align-class.html\">Align<\/a>, which sizes itself based on its child's size and positions\nthe child according to an <a href=\"painting\/Alignment-class.html\">Alignment<\/a> value.<\/li>\n<li>\n<a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a>, which uses a delegate to control the layout of\na single child.<\/li>\n<li>\n<a href=\"widgets\/CustomMultiChildLayout-class.html\">CustomMultiChildLayout<\/a>, which uses a delegate to position multiple\nchildren.<\/li>\n<li>\n<a href=\"widgets\/Flow-class.html\">Flow<\/a>, which provides paint-time control of its children using transform\nmatrices.<\/li>\n<li>The <a href=\"https:\/\/flutter.io\/widgets\/layout\/\">catalog of layout widgets<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Stack-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Stack",
    "shortname": "Stack",
    "extends": [
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "widgets.IndexedStack",
        "widgets.Positioned"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a stack layout widget.<\/p>\n<p>By default, the non-positioned children of the stack are aligned by their\ntop left corners.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stack({\n  Key key,\n  this.alignment = AlignmentDirectional.topStart,\n  this.textDirection,\n  this.fit = StackFit.loose,\n  this.overflow = Overflow.clip,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : super(key: key, children: children);<\/code><\/pre>\n    ",
            "href": "widgets\/Stack\/Stack.html",
            "isDeprecated": false,
            "type": "",
            "name": "Stack",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Stack",
            "params": [
                {
                    "name": "alignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "fit",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.StackFit"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "overflow",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.Overflow"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderStack createRenderObject(BuildContext context) {\n  return RenderStack(\n    alignment: alignment,\n    textDirection: textDirection ?? Directionality.of(context),\n    fit: fit,\n    overflow: overflow,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Stack\/createRenderObject.html",
            "isDeprecated": false,
            "type": "rendering.RenderStack",
            "name": "createRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Stack",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Stack\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;AlignmentGeometry&gt;('alignment', alignment));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(EnumProperty&lt;StackFit&gt;('fit', fit));\n  properties.add(EnumProperty&lt;Overflow&gt;('overflow', overflow));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Stack\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Stack",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Stack\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderStack renderObject) {\n  renderObject\n    ..alignment = alignment\n    ..textDirection = textDirection ?? Directionality.of(context)\n    ..fit = fit\n    ..overflow = overflow;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Stack\/updateRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Stack",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderStack"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How to align the non-positioned and partially-positioned children in the\nstack.<\/p>\n<p>The non-positioned children are placed relative to each other such that\nthe points determined by <a href=\"widgets\/Stack\/alignment.html\">alignment<\/a> are co-located. For example, if the\n<a href=\"widgets\/Stack\/alignment.html\">alignment<\/a> is <a href=\"painting\/Alignment\/topLeft-constant.html\">Alignment.topLeft<\/a>, then the top left corner of\neach non-positioned child will be located at the same global coordinate.<\/p>\n<p>Partially-positioned children, those that do not specify an alignment in a\nparticular axis (e.g. that have neither <code>top<\/code> nor <code>bottom<\/code> set), use the\nalignment to determine how they should be positioned in that\nunder-specified axis.<\/p>\n<p>Defaults to <a href=\"painting\/AlignmentDirectional\/topStart-constant.html\">AlignmentDirectional.topStart<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Stack\/alignment.html",
            "name": "alignment",
            "isDeprecated": false,
            "type": "painting.AlignmentGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Stack",
            "params": []
        },
        {
            "desc": "<p>How to size the non-positioned children in the stack.<\/p>\n<p>The constraints passed into the <a href=\"widgets\/Stack-class.html\">Stack<\/a> from its parent are either\nloosened (<a href=\"rendering\/StackFit-class.html\">StackFit.loose<\/a>) or tightened to their biggest size\n(<a href=\"rendering\/StackFit-class.html\">StackFit.expand<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackFit fit\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Stack\/fit.html",
            "name": "fit",
            "isDeprecated": false,
            "type": "rendering.StackFit",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Stack",
            "params": []
        },
        {
            "desc": "<p>Whether overflowing children should be clipped. See <a href=\"rendering\/Overflow-class.html\">Overflow<\/a>.<\/p>\n<p>Some children in a stack might overflow its box. When this flag is set to\n<a href=\"rendering\/Overflow-class.html\">Overflow.clip<\/a>, children cannot paint outside of the stack's box.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Overflow overflow\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Stack\/overflow.html",
            "name": "overflow",
            "isDeprecated": false,
            "type": "rendering.Overflow",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Stack",
            "params": []
        },
        {
            "desc": "<p>The text direction with which to resolve <a href=\"widgets\/Stack\/alignment.html\">alignment<\/a>.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Stack\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Stack",
            "params": []
        }
    ]
}