{
    "name": "dart:async.StreamIterator",
    "extends": [],
    "memberOf": "dart:async",
    "events": [],
    "methods": [
        {
            "name": "StreamIterator",
            "type": "",
            "desc": "<p>Create a <a href=\"dart-async\/StreamIterator-class.html\">StreamIterator<\/a> on <code>stream<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:async.StreamIterator",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-async\/StreamIterator\/StreamIterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamIterator(Stream&lt;T&gt; stream)\n    \/\/ TODO(lrn): use redirecting factory constructor when type\n    \/\/ arguments are supported.\n    =&gt;\n    new _StreamIterator&lt;T&gt;(stream);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "cancel",
            "type": "dart:async.Future",
            "desc": "<p>Cancels the stream iterator (and the underlying stream subscription) early.<\/p>\n<p>The stream iterator is automatically canceled if the <a href=\"dart-async\/StreamIterator\/moveNext.html\">moveNext<\/a> future\ncompletes with either <code>false<\/code> or an error.<\/p>\n<p>If you need to stop listening for values before the stream iterator is\nautomatically closed, you must call <a href=\"dart-async\/StreamIterator\/cancel.html\">cancel<\/a> to ensure that the stream\nis properly closed.<\/p>\n<p>If <a href=\"dart-async\/StreamIterator\/moveNext.html\">moveNext<\/a> has been called when the iterator is canceled,\nits returned future will complete with <code>false<\/code> as value,\nas will all further calls to <a href=\"dart-async\/StreamIterator\/moveNext.html\">moveNext<\/a>.<\/p>\n<p>Returns a future if the cancel-operation is not completed synchronously.\nOtherwise returns <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:async.StreamIterator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-async\/StreamIterator\/cancel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future cancel();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "moveNext",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Wait for the next stream value to be available.<\/p>\n<p>Returns a future which will complete with either <code>true<\/code> or <code>false<\/code>.\nCompleting with <code>true<\/code> means that another event has been received and\ncan be read as <a href=\"dart-async\/StreamIterator\/current.html\">current<\/a>.\nCompleting with <code>false<\/code> means that the stream iteration is done and\nno further events will ever be available.\nThe future may complete with an error, if the stream produces an error,\nwhich also ends iteration.<\/p>\n<p>The function must not be called again until the future returned by a\nprevious call is completed.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:async.StreamIterator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-async\/StreamIterator\/moveNext.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; moveNext();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        }
    ],
    "props": [
        {
            "name": "current",
            "type": "",
            "types": [],
            "desc": "<p>The current value of the stream.<\/p>\n<p>Is <code>null<\/code> before the first call to <a href=\"dart-async\/StreamIterator\/moveNext.html\">moveNext<\/a> and after a call to\n<code>moveNext<\/code> completes with a <code>false<\/code> result or an error.<\/p>\n<p>When a <code>moveNext<\/code> call completes with <code>true<\/code>, the <code>current<\/code> field holds\nthe most recent event of the stream, and it stays like that until the next\ncall to <code>moveNext<\/code>.\nBetween a call to <code>moveNext<\/code> and when its returned future completes,\nthe value is unspecified.<\/p>\n        ",
            "memberOf": "dart:async.StreamIterator",
            "isConstant": false,
            "href": "dart-async\/StreamIterator\/current.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get current;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-async\/StreamIterator-class.html",
    "desc": "<p>An <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> like interface for the values of a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/p>\n<p>This wraps a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> and a subscription on the stream. It listens\non the stream, and completes the future returned by <a href=\"dart-async\/StreamIterator\/moveNext.html\">moveNext<\/a> when the\nnext value becomes available.<\/p>\n<p>The stream may be paused between calls to <a href=\"dart-async\/StreamIterator\/moveNext.html\">moveNext<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StreamIterator"
}