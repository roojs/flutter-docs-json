{
    "desc": "<p>A handle to the location of a widget in the widget tree.<\/p>\n<p>This class presents a set of methods that can be used from\n<a href=\"widgets\/StatelessWidget\/build.html\">StatelessWidget.build<\/a> methods and from methods on <a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n<p><a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> objects are passed to <a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a> functions (such as\n<a href=\"widgets\/StatelessWidget\/build.html\">StatelessWidget.build<\/a>), and are available from the <a href=\"widgets\/State\/context.html\">State.context<\/a> member.\nSome static functions (e.g. <a href=\"material\/showDialog.html\">showDialog<\/a>, <a href=\"material\/Theme\/of.html\">Theme.of<\/a>, and so forth) also\ntake build contexts so that they can act on behalf of the calling widget, or\nobtain data specifically for the given context.<\/p>\n<p>Each widget has its own <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, which becomes the parent of the\nwidget returned by the <a href=\"widgets\/StatelessWidget\/build.html\">StatelessWidget.build<\/a> or <a href=\"widgets\/State\/build.html\">State.build<\/a> function.\n(And similarly, the parent of any children for <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s.)<\/p>\n<p>In particular, this means that within a build method, the build context of\nthe widget of the build method is not the same as the build context of the\nwidgets returned by that build method. This can lead to some tricky cases.\nFor example, <a href=\"material\/Theme\/of.html\">Theme.of(context)<\/a> looks for the nearest enclosing <a href=\"material\/Theme-class.html\">Theme<\/a> of\nthe given build context. If a build method for a widget Q includes a <a href=\"material\/Theme-class.html\">Theme<\/a>\nwithin its returned widget tree, and attempts to use <a href=\"material\/Theme\/of.html\">Theme.of<\/a> passing its\nown context, the build method for Q will not find that <a href=\"material\/Theme-class.html\">Theme<\/a> object. It\nwill instead find whatever <a href=\"material\/Theme-class.html\">Theme<\/a> was an ancestor to the widget Q. If the\nbuild context for a subpart of the returned tree is needed, a <a href=\"widgets\/Builder-class.html\">Builder<\/a>\nwidget can be used: the build context passed to the <a href=\"widgets\/Builder\/builder.html\">Builder.builder<\/a>\ncallback will be that of the <a href=\"widgets\/Builder-class.html\">Builder<\/a> itself.<\/p>\n<p>For example, in the following snippet, the <a href=\"material\/ScaffoldState\/showSnackBar.html\">ScaffoldState.showSnackBar<\/a>\nmethod is called on the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> widget that the build method itself\ncreates. If a <a href=\"widgets\/Builder-class.html\">Builder<\/a> had not been used, and instead the <code>context<\/code>\nargument of the build method itself had been used, no <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> would have\nbeen found, and the <a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a> function would have returned null.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">  @override\n  Widget build(BuildContext context) {\n    \/\/ here, Scaffold.of(context) returns null\n    return Scaffold(\n      appBar: AppBar(title: Text('Demo')),\n      body: Builder(\n        builder: (BuildContext context) {\n          return FlatButton(\n            child: Text('BUTTON'),\n            onPressed: () {\n              \/\/ here, Scaffold.of(context) returns the locally created Scaffold\n              Scaffold.of(context).showSnackBar(SnackBar(\n                content: Text('Hello.')\n              ));\n            }\n          );\n        }\n      )\n    );\n  }\n<\/code><\/pre>\n<p>The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> for a particular widget can change location over time as\nthe widget is moved around the tree. Because of this, values returned from\nthe methods on this class should not be cached beyond the execution of a\nsingle synchronous function.<\/p>\n<p><a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> objects are actually <a href=\"widgets\/Element-class.html\">Element<\/a> objects. The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\ninterface is used to discourage direct manipulation of <a href=\"widgets\/Element-class.html\">Element<\/a> objects.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/BuildContext-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.BuildContext",
    "shortname": "BuildContext",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "widgets\/BuildContext\/BuildContext.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": []
        },
        {
            "desc": "<p>Obtains the element corresponding to the nearest widget of the given type,\nwhich must be the type of a concrete <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> subclass.<\/p>\n<p>Calling this method is O(1) with a small constant factor.<\/p>\n<p>This method does not establish a relationship with the target in the way\nthat <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a> does.<\/p>\n<p>This method should not be called from <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a> because the element\ntree is no longer stable at that time. To refer to an ancestor from that\nmethod, save a reference to the ancestor by calling\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a> in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>. It is\nsafe to use this method from <a href=\"widgets\/State\/deactivate.html\">State.deactivate<\/a>, which is called whenever\nthe widget is removed from the tree.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">InheritedElement ancestorInheritedElementForWidgetOfExactType(Type targetType);<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/ancestorInheritedElementForWidgetOfExactType.html",
            "isDeprecated": "0",
            "type": "widgets.InheritedElement",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "targetType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        },
        {
            "desc": "<p>Returns the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> object of the nearest ancestor <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> widget\nthat matches the given <a href=\"widgets\/TypeMatcher-class.html\">TypeMatcher<\/a>.<\/p>\n<p>This should not be used from build methods, because the build context will\nnot be rebuilt if the value that would be returned by this method changes.\nIn general, <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a> is more appropriate for such\ncases. This method is useful only in esoteric cases where a widget needs\nto cause an ancestor to change its layout or paint behavior. For example,\nit is used by <a href=\"material\/Material-class.html\">Material<\/a> so that <a href=\"material\/InkWell-class.html\">InkWell<\/a> widgets can trigger the ink\nsplash on the <a href=\"material\/Material-class.html\">Material<\/a>'s actual render object.<\/p>\n<p>Calling this method is relatively expensive (O(N) in the depth of the\ntree). Only call this method if the distance from this widget to the\ndesired ancestor is known to be small and bounded.<\/p>\n<p>This method should not be called from <a href=\"widgets\/State\/deactivate.html\">State.deactivate<\/a> or <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a>\nbecause the widget tree is no longer stable at that time. To refer to\nan ancestor from one of those methods, save a reference to the ancestor\nby calling <a href=\"widgets\/BuildContext\/ancestorRenderObjectOfType.html\">ancestorRenderObjectOfType<\/a> in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderObject ancestorRenderObjectOfType(TypeMatcher matcher);<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/ancestorRenderObjectOfType.html",
            "isDeprecated": "0",
            "type": "rendering.RenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "matcher",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.TypeMatcher"
                }
            ]
        },
        {
            "desc": "<p>Returns the <a href=\"widgets\/State-class.html\">State<\/a> object of the nearest ancestor <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> widget\nthat matches the given <a href=\"widgets\/TypeMatcher-class.html\">TypeMatcher<\/a>.<\/p>\n<p>This should not be used from build methods, because the build context will\nnot be rebuilt if the value that would be returned by this method changes.\nIn general, <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a> is more appropriate for such\ncases. This method is useful for changing the state of an ancestor widget in\na one-off manner, for example, to cause an ancestor scrolling list to\nscroll this build context's widget into view, or to move the focus in\nresponse to user interaction.<\/p>\n<p>In general, though, consider using a callback that triggers a stateful\nchange in the ancestor rather than using the imperative style implied by\nthis method. This will usually lead to more maintainable and reusable code\nsince it decouples widgets from each other.<\/p>\n<p>Calling this method is relatively expensive (O(N) in the depth of the\ntree). Only call this method if the distance from this widget to the\ndesired ancestor is known to be small and bounded.<\/p>\n<p>This method should not be called from <a href=\"widgets\/State\/deactivate.html\">State.deactivate<\/a> or <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a>\nbecause the widget tree is no longer stable at that time. To refer to\nan ancestor from one of those methods, save a reference to the ancestor\nby calling <a href=\"widgets\/BuildContext\/ancestorStateOfType.html\">ancestorStateOfType<\/a> in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">ScrollableState scrollable = context.ancestorStateOfType(\n  const TypeMatcher&lt;ScrollableState&gt;(),\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">State ancestorStateOfType(TypeMatcher matcher);<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/ancestorStateOfType.html",
            "isDeprecated": "0",
            "type": "widgets.State<widgets.StatefulWidget>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "matcher",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.TypeMatcher"
                }
            ]
        },
        {
            "desc": "<p>Returns the nearest ancestor widget of the given type, which must be the\ntype of a concrete <a href=\"widgets\/Widget-class.html\">Widget<\/a> subclass.<\/p>\n<p>In general, <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a> is more useful, since inherited\nwidgets will trigger consumers to rebuild when they change. This method is\nappropriate when used in interaction event handlers (e.g. gesture\ncallbacks) or for performing one-off tasks such as asserting that you have\nor don't have a widget of a specific type as an ancestor. The return value\nof a Widget's build method should not depend on the value returned by this\nmethod, because the build context will not rebuild if the return value of\nthis method changes. This could lead to a situation where data used in the\nbuild method changes, but the widget is not rebuilt.<\/p>\n<p>Calling this method is relatively expensive (O(N) in the depth of the\ntree). Only call this method if the distance from this widget to the\ndesired ancestor is known to be small and bounded.<\/p>\n<p>This method should not be called from <a href=\"widgets\/State\/deactivate.html\">State.deactivate<\/a> or <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a>\nbecause the widget tree is no longer stable at that time. To refer to\nan ancestor from one of those methods, save a reference to the ancestor\nby calling <a href=\"widgets\/BuildContext\/ancestorWidgetOfExactType.html\">ancestorWidgetOfExactType<\/a> in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget ancestorWidgetOfExactType(Type targetType);<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/ancestorWidgetOfExactType.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "targetType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        },
        {
            "desc": "<p>The current <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> for the widget. If the widget is a\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>, this is the render object that the widget created\nfor itself. Otherwise, it is the render object of the first descendant\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method will only return a valid result after the build phase is\ncomplete. It is therefore not valid to call this from a build method.\nIt should only be called from interaction event handlers (e.g.\ngesture callbacks) or layout or paint callbacks.<\/p>\n<p>If the render object is a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>, which is the common case, then the\nsize of the render object can be obtained from the <a href=\"widgets\/BuildContext\/size.html\">size<\/a> getter. This is\nonly valid after the layout phase, and should therefore only be examined\nfrom paint callbacks or interaction event handlers (e.g. gesture\ncallbacks).<\/p>\n<p>For details on the different phases of a frame, see the discussion at\n<a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>.<\/p>\n<p>Calling this method is theoretically relatively expensive (O(N) in the\ndepth of the tree), but in practice is usually cheap because the tree\nusually has many render objects and therefore the distance to the nearest\nrender object is usually short.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderObject findRenderObject();<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/findRenderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": []
        },
        {
            "desc": "<p>Registers this build context with <code>ancestor<\/code> such that when\n<code>ancestor<\/code>'s widget changes this build context is rebuilt.<\/p>\n<p>Returns <code>ancestor.widget<\/code>.<\/p>\n<p>This method is rarely called directly. Most applications should use\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a>, which calls this method after finding\nthe appropriate <a href=\"widgets\/InheritedElement-class.html\">InheritedElement<\/a> ancestor.<\/p>\n<p>All of the qualifications about when <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">inheritFromWidgetOfExactType<\/a> can\nbe called apply to this method as well.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">InheritedWidget inheritFromElement(InheritedElement ancestor, { Object aspect });<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/inheritFromElement.html",
            "isDeprecated": "0",
            "type": "widgets.InheritedWidget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "ancestor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.InheritedElement"
                },
                {
                    "name": "aspect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Obtains the nearest widget of the given type, which must be the type of a\nconcrete <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> subclass, and registers this build context with\nthat widget such that when that widget changes (or a new widget of that\ntype is introduced, or the widget goes away), this build context is\nrebuilt so that it can obtain new values from that widget.<\/p>\n<p>This is typically called implicitly from <code>of()<\/code> static methods, e.g.\n<a href=\"material\/Theme\/of.html\">Theme.of<\/a>.<\/p>\n<p>This method should not be called from widget constructors or from\n<a href=\"widgets\/State\/initState.html\">State.initState<\/a> methods, because those methods would not get called\nagain if the inherited value were to change. To ensure that the widget\ncorrectly updates itself when the inherited value changes, only call this\n(directly or indirectly) from build methods, layout and paint callbacks, or\nfrom <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.<\/p>\n<p>This method should not be called from <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a> because the element\ntree is no longer stable at that time. To refer to an ancestor from that\nmethod, save a reference to the ancestor in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.\nIt is safe to use this method from <a href=\"widgets\/State\/deactivate.html\">State.deactivate<\/a>, which is called\nwhenever the widget is removed from the tree.<\/p>\n<p>It is also possible to call this method from interaction event handlers\n(e.g. gesture callbacks) or timers, to obtain a value once, if that value\nis not going to be cached and reused later.<\/p>\n<p>Calling this method is O(1) with a small constant factor, but will lead to\nthe widget being rebuilt more often.<\/p>\n<p>Once a widget registers a dependency on a particular type by calling this\nmethod, it will be rebuilt, and <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a> will be\ncalled, whenever changes occur relating to that widget until the next time\nthe widget or one of its ancestors is moved (for example, because an\nancestor is added or removed).<\/p>\n<p>The <code>aspect<\/code> parameter is only used when <code>targetType<\/code> is an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> subclasses that supports partial updates, like\n<a href=\"widgets\/InheritedModel-class.html\">InheritedModel<\/a>. It specifies what \"aspect\" of the inherited\nwidget this context depends on.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">InheritedWidget inheritFromWidgetOfExactType(Type targetType, { Object aspect });<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/inheritFromWidgetOfExactType.html",
            "isDeprecated": "0",
            "type": "widgets.InheritedWidget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "aspect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "targetType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        },
        {
            "desc": "<p>Returns the <a href=\"widgets\/State-class.html\">State<\/a> object of the furthest ancestor <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> widget\nthat matches the given <a href=\"widgets\/TypeMatcher-class.html\">TypeMatcher<\/a>.<\/p>\n<p>Functions the same way as <a href=\"widgets\/BuildContext\/ancestorStateOfType.html\">ancestorStateOfType<\/a> but keeps visiting subsequent\nancestors until there are none of the type matching <a href=\"widgets\/TypeMatcher-class.html\">TypeMatcher<\/a> remaining.\nThen returns the last one found.<\/p>\n<p>This operation is O(N) as well though N is the entire widget tree rather than\na subtree.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">State rootAncestorStateOfType(TypeMatcher matcher);<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/rootAncestorStateOfType.html",
            "isDeprecated": "0",
            "type": "widgets.State<widgets.StatefulWidget>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "matcher",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.TypeMatcher"
                }
            ]
        },
        {
            "desc": "<p>Walks the ancestor chain, starting with the parent of this build context's\nwidget, invoking the argument for each ancestor. The callback is given a\nreference to the ancestor widget's corresponding <a href=\"widgets\/Element-class.html\">Element<\/a> object. The\nwalk stops when it reaches the root widget or when the callback returns\nfalse. The callback must not return null.<\/p>\n<p>This is useful for inspecting the widget tree.<\/p>\n<p>Calling this method is relatively expensive (O(N) in the depth of the tree).<\/p>\n<p>This method should not be called from <a href=\"widgets\/State\/deactivate.html\">State.deactivate<\/a> or <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a>\nbecause the element tree is no longer stable at that time. To refer to\nan ancestor from one of those methods, save a reference to the ancestor\nby calling <a href=\"widgets\/BuildContext\/visitAncestorElements.html\">visitAncestorElements<\/a> in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void visitAncestorElements(bool visitor(Element element));<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/visitAncestorElements.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Walks the children of this widget.<\/p>\n<p>This is useful for applying changes to children after they are built\nwithout waiting for the next frame, especially if the children are known,\nand especially if there is exactly one child (as is always the case for\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>s or <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>s).<\/p>\n<p>Calling this method is very cheap for build contexts that correspond to\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>s or <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>s (O(1), since there's only one\nchild).<\/p>\n<p>Calling this method is potentially expensive for build contexts that\ncorrespond to <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s (O(N) in the number of children).<\/p>\n<p>Calling this method recursively is extremely expensive (O(N) in the number\nof descendants), and should be avoided if possible. Generally it is\nsignificantly cheaper to use an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> and have the descendants\npull data down, than it is to use <a href=\"widgets\/BuildContext\/visitChildElements.html\">visitChildElements<\/a> recursively to push\ndata down to them.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void visitChildElements(ElementVisitor visitor);<\/code><\/pre>\n    ",
            "href": "widgets\/BuildContext\/visitChildElements.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildContext",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ElementVisitor"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The <a href=\"widgets\/BuildOwner-class.html\">BuildOwner<\/a> for this context. The <a href=\"widgets\/BuildOwner-class.html\">BuildOwner<\/a> is in charge of\nmanaging the rendering pipeline for this context.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BuildOwner get owner;<\/code><\/pre>\n        ",
            "href": "widgets\/BuildContext\/owner.html",
            "isDeprecated": "0",
            "type": "widgets.BuildOwner",
            "memberOf": "widgets.BuildContext",
            "params": []
        },
        {
            "desc": "<p>The size of the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> returned by <a href=\"widgets\/BuildContext\/findRenderObject.html\">findRenderObject<\/a>.<\/p>\n<p>This getter will only return a valid result after the layout phase is\ncomplete. It is therefore not valid to call this from a build method.\nIt should only be called from paint callbacks or interaction event\nhandlers (e.g. gesture callbacks).<\/p>\n<p>For details on the different phases of a frame, see the discussion at\n<a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>.<\/p>\n<p>This getter will only return a valid result if <a href=\"widgets\/BuildContext\/findRenderObject.html\">findRenderObject<\/a> actually\nreturns a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>. If <a href=\"widgets\/BuildContext\/findRenderObject.html\">findRenderObject<\/a> returns a render object that\nis not a subtype of <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> (e.g., <a href=\"rendering\/RenderView-class.html\">RenderView<\/a>), this getter will\nthrow an exception in checked mode and will return null in release mode.<\/p>\n<p>Calling this getter is theoretically relatively expensive (O(N) in the\ndepth of the tree), but in practice is usually cheap because the tree\nusually has many render objects and therefore the distance to the nearest\nrender object is usually short.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get size;<\/code><\/pre>\n        ",
            "href": "widgets\/BuildContext\/size.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "memberOf": "widgets.BuildContext",
            "params": []
        },
        {
            "desc": "<p>The current configuration of the <a href=\"widgets\/Element-class.html\">Element<\/a> that is this <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Widget get widget;<\/code><\/pre>\n        ",
            "href": "widgets\/BuildContext\/widget.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.BuildContext",
            "params": []
        }
    ]
}