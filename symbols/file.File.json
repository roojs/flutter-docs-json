{
    "name": "file.File",
    "extends": [],
    "memberOf": "file",
    "events": [],
    "methods": [
        {
            "name": "File",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-file_file\/File\/File.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "copy",
            "type": "dart:async.Future<file.File>",
            "desc": "<p>Copy this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/File-class.html\">File<\/a> instance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/copy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; copy(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.File"
            ]
        },
        {
            "name": "copySync",
            "type": "file.File",
            "desc": "<p>Synchronously copy this file. Returns a <a href=\"package-file_file\/File-class.html\">File<\/a>\ninstance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/copySync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile copySync(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "create",
            "type": "dart:async.Future<file.File>",
            "desc": "<p>Create the file. Returns a <code>Future&lt;File&gt;<\/code> that completes with\nthe file when it has been created.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created only if\nall directories in the path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created.<\/p>\n<p>Existing files are left untouched by <a href=\"package-file_file\/File\/create.html\">create<\/a>. Calling <a href=\"package-file_file\/File\/create.html\">create<\/a> on an\nexisting file might fail if there are restrictive permissions on\nthe file.<\/p>\n<p>Completes the future with a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/create.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.File"
            ]
        },
        {
            "name": "rename",
            "type": "dart:async.Future<file.File>",
            "desc": "<p>Renames this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/File-class.html\">File<\/a> instance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/rename.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; rename(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.File"
            ]
        },
        {
            "name": "renameSync",
            "type": "file.File",
            "desc": "<p>Synchronously renames this file. Returns a <a href=\"package-file_file\/File-class.html\">File<\/a>\ninstance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/renameSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile renameSync(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "writeAsBytes",
            "type": "dart:async.Future<file.File>",
            "desc": "<p>Write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it, and closes the file.\nReturns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object once\nthe entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/File\/writeAsBytes.html\">writeAsBytes<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "bytes",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "mode",
                    "type": "dart:io.FileMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "flush",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/writeAsBytes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsBytes(List&lt;int&gt; bytes,\n    {io.FileMode mode: io.FileMode.write, bool flush: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.File"
            ]
        },
        {
            "name": "writeAsString",
            "type": "dart:async.Future<file.File>",
            "desc": "<p>Write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile. Returns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"package-file_file\/File-class.html\">File<\/a> object\nonce the entire operation has completed.<\/p>\n<p>By default <a href=\"package-file_file\/File\/writeAsString.html\">writeAsString<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
            "static": false,
            "memberOf": "file.File",
            "sig": "",
            "params": [
                {
                    "name": "contents",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "mode",
                    "type": "dart:io.FileMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "encoding",
                    "type": "dart:convert.Encoding",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "flush",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/File\/writeAsString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;File&gt; writeAsString(String contents,\n    {io.FileMode mode: io.FileMode.write,\n    Encoding encoding: utf8,\n    bool flush: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.File"
            ]
        }
    ],
    "props": [
        {
            "name": "absolute",
            "type": "file.File",
            "types": [],
            "desc": "<p>Returns a <a href=\"package-file_file\/File-class.html\">File<\/a> instance whose path is the absolute path to <a href=\"package-file_file\/File-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
            "memberOf": "file.File",
            "isConstant": false,
            "href": "package-file_file\/File\/absolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile get absolute;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-file_file\/File-class.html",
    "desc": "<p>A reference to a file on the file system.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "File"
}