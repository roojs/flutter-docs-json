{
    "name": "material.ActionChip",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [
        {
            "name": "onPressed",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>Called when the user taps the chip.<\/p>\n<p>If <a href=\"material\/ActionChip\/onPressed.html\">onPressed<\/a> is set, then this callback will be called when the user\ntaps on the label or avatar parts of the chip. If <a href=\"material\/ActionChip\/onPressed.html\">onPressed<\/a> is null,\nthen the chip will be disabled.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Blacksmith extends StatelessWidget {\n  void startHammering() {\n    print('bang bang bang');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return InputChip(\n      label: const Text('Apply Hammer'),\n      onPressed: startHammering,\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/ActionChip\/onPressed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "ActionChip",
            "type": "",
            "desc": "<p>Create a chip that acts like a button.<\/p>\n<p>The <code>label<\/code>, <code>onPressed<\/code> and <code>clipBehavior<\/code> arguments must not be null.\nThe <code>pressElevation<\/code> and <code>elevation<\/code> must be null or non-negative.\nTypically, <code>pressElevation<\/code> is greater than <code>elevation<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.ActionChip",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "avatar",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "label",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelPadding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPressed",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "pressElevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "clipBehavior",
                    "type": "dart:ui.Clip",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "materialTapTargetSize",
                    "type": "material.MaterialTapTargetSize",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shadowColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/ActionChip\/ActionChip.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ActionChip({\n  Key key,\n  this.avatar,\n  @required this.label,\n  this.labelStyle,\n  this.labelPadding,\n  @required this.onPressed,\n  this.pressElevation,\n  this.tooltip,\n  this.shape,\n  this.clipBehavior = Clip.none,\n  this.backgroundColor,\n  this.padding,\n  this.materialTapTargetSize,\n  this.elevation,\n  this.shadowColor,\n}) : assert(label != null),\n     assert(\n       onPressed != null,\n       'Rather than disabling an ActionChip by setting onPressed to null, '\n       'remove it from the interface entirely.',\n     ),\n     assert(pressElevation == null || pressElevation &gt;= 0.0),\n     assert(elevation == null || elevation &gt;= 0.0),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/ActionChip\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.ActionChip",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/ActionChip\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterial(context));\n  return RawChip(\n    avatar: avatar,\n    label: label,\n    onPressed: onPressed,\n    pressElevation: pressElevation,\n    tooltip: tooltip,\n    labelStyle: labelStyle,\n    backgroundColor: backgroundColor,\n    shape: shape,\n    clipBehavior: clipBehavior,\n    padding: padding,\n    labelPadding: labelPadding,\n    isEnabled: true,\n    materialTapTargetSize: materialTapTargetSize,\n    elevation: elevation,\n    shadowColor: shadowColor,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "avatar",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>A widget to display prior to the chip's label.<\/p>\n<p>Typically a <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> widget.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/avatar.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget avatar\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "backgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color to be used for the unselected, enabled chip's background.<\/p>\n<p>The default is light grey.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/backgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "clipBehavior",
            "type": "dart:ui.Clip",
            "types": [],
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/clipBehavior.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "elevation",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Elevation to be applied on the chip relative to its parent.<\/p>\n<p>This controls the size of the shadow below the chip.<\/p>\n<p>Defaults to 0. The value is always non-negative.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/elevation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "label",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The primary content of the chip.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/label.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget label\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelPadding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The padding around the <a href=\"material\/ActionChip\/label.html\">label<\/a> widget.<\/p>\n<p>By default, this is 4 logical pixels at the beginning and the end of the\nlabel, and zero on top and bottom.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/labelPadding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry labelPadding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelStyle",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>The style to be applied to the chip's label.<\/p>\n<p>This only has an effect on widgets that respect the <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>,\nsuch as <a href=\"widgets\/Text-class.html\">Text<\/a>.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/labelStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "materialTapTargetSize",
            "type": "material.MaterialTapTargetSize",
            "types": [],
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/ActionChip\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/materialTapTargetSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "padding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The padding between the contents of the chip and the outside <a href=\"material\/ActionChip\/shape.html\">shape<\/a>.<\/p>\n<p>Defaults to 4 logical pixels on all sides.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/padding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pressElevation",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Elevation to be applied on the chip relative to its parent during the\npress motion.<\/p>\n<p>This controls the size of the shadow below the chip.<\/p>\n<p>Defaults to 8. The value is always non-negative.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/pressElevation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressElevation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shadowColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0.<\/p>\n<p>The default is <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/shadowColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color shadowColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shape",
            "type": "painting.ShapeBorder",
            "types": [],
            "desc": "<p>The <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> to draw around the chip.<\/p>\n<p>Defaults to the shape in the ambient <a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a>.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/shape.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tooltip",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Tooltip string to be used for the body area (where the label and avatar\nare) of the chip.<\/p>\n        ",
            "memberOf": "material.ActionChip",
            "isConstant": false,
            "href": "material\/ActionChip\/tooltip.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/ActionChip-class.html",
    "desc": "<p>A material design action chip.<\/p>\n<p>Action chips are a set of options which trigger an action related to primary\ncontent. Action chips should appear dynamically and contextually in a UI.<\/p>\n<p>Action chips can be tapped to trigger an action or show progress and\nconfirmation. They cannot be disabled; if the action is not applicable, the\nchip should not be included in the interface. (This contrasts with buttons,\nwhere unavailable choices are usually represented as disabled controls.)<\/p>\n<p>Action chips are displayed after primary content, such as below a card or\npersistently at the bottom of a screen.<\/p>\n<p>The material button widgets, <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>, and\n<a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>, are an alternative to action chips, which should appear\nstatically and consistently in a UI.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">ActionChip(\n  avatar: CircleAvatar(\n    backgroundColor: Colors.grey.shade800,\n    child: Text('AB'),\n  ),\n  label: Text('Aaron Burr'),\n  onPressed: () {\n    print(\"If you stand for nothing, Burr, what\u2019ll you fall for?\");\n  }\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a>, a chip that displays information and can be deleted.<\/li>\n<li>\n<a href=\"material\/InputChip-class.html\">InputChip<\/a>, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.<\/li>\n<li>\n<a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.<\/li>\n<li>\n<a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a>, which shows images or initials of people.<\/li>\n<li>\n<a href=\"widgets\/Wrap-class.html\">Wrap<\/a>, A widget that displays its children in multiple horizontal or\nvertical runs.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/chips.html\">material.io\/design\/components\/chips.html<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ActionChip"
}