{
    "desc": "<p>Error objects thrown in the case of a program failure.<\/p>\n<p>An <code>Error<\/code> object represents a program failure that the programmer\nshould have avoided.<\/p>\n<p>Examples include calling a function with invalid arguments,\nor even with the wrong number of arguments,\nor calling it at a time when it is not allowed.<\/p>\n<p>These are not errors that a caller should expect or catch -\nif they occur, the program is erroneous,\nand terminating the program may be the safest response.<\/p>\n<p>When deciding that a function throws an error,\nthe conditions where it happens should be clearly described,\nand they should be detectable and predictable,\nso the programmer using the function can avoid triggering the error.<\/p>\n<p>Such descriptions often uses words like\n\"must\" or \"must not\" to describe the condition,\nand if you see words like that in a function's documentation,\nthen not satisfying the requirement\nis very likely to cause an error to be thrown.<\/p>\n<p>Example (from <a href=\"dart-core\/String\/contains.html\">String.contains<\/a>):<\/p>\n<pre class=\"language-dart\"><code>   `startIndex` must not be negative or greater than `length`.\n<\/code><\/pre>\n<p>In this case, an error will be thrown if <code>startIndex<\/code> is negative\nor too large.<\/p>\n<p>If the conditions are not detectable before calling a function,\nthe called function should not throw an <code>Error<\/code>.\nIt may still throw a value,\nbut the caller will have to catch the thrown value,\neffectively making it an alternative result rather than an error.\nThe thrown object can choose to implement <a href=\"dart-core\/Exception-class.html\">Exception<\/a>\nto document that it represents an exceptional, but not erroneous, occurrence,\nbut it has no other effect than documentation.<\/p>\n<p>All non-<code>null<\/code> values can be thrown in Dart.\nObjects extending <code>Error<\/code> are handled specially:\nThe first time they are thrown,\nthe stack trace at the throw point is recorded\nand stored in the error object.\nIt can be retrieved using the <a href=\"dart-core\/Error\/stackTrace.html\">stackTrace<\/a> getter.\nAn error object that merely implements <code>Error<\/code>, and doesn't extend it,\nwill not store the stack trace automatically.<\/p>\n<p>Error objects are also used for system wide failures\nlike stack overflow or an out-of-memory situation.<\/p>\n<p>Since errors are not created to be caught,\nthere is no need for subclasses to distinguish the errors.\nInstead subclasses have been created in order to make groups\nof related errors easy to create with consistent error messages.\nFor example, the <a href=\"dart-core\/String\/contains.html\">String.contains<\/a> method will use a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a>\nif its <code>startIndex<\/code> isn't in the range <code>0..length<\/code>,\nwhich is easily created by <code>new RangeError.range(startIndex, 0, length)<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/Error-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Error",
    "shortname": "Error",
    "extends": [],
    "realImplementors": [
        "dart:convert.JsonCyclicError",
        "dart:convert.JsonUnsupportedObjectError",
        "dart:core.AbstractClassInstantiationError",
        "dart:core.ArgumentError",
        "dart:core.AssertionError",
        "dart:core.CastError",
        "dart:core.ConcurrentModificationError",
        "dart:core.CyclicInitializationError",
        "dart:core.FallThroughError",
        "dart:core.IndexError",
        "dart:core.NoSuchMethodError",
        "dart:core.NullThrownError",
        "dart:core.RangeError",
        "dart:core.StateError",
        "dart:core.TypeError",
        "dart:core.UnimplementedError",
        "dart:core.UnsupportedError",
        "flutter_driver.DriverError",
        "foundation.FlutterError",
        "quiver.async.UnderflowError",
        "quiver.testing.equality.MatchError",
        "record_replay.NoMatchingInvocationError"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Error();<\/code><\/pre>\n    ",
            "href": "dart-core\/Error\/Error.html",
            "isDeprecated": false,
            "type": "",
            "name": "Error",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Error",
            "params": []
        },
        {
            "desc": "<p>Safely convert a value to a <a href=\"dart-core\/String-class.html\">String<\/a> description.<\/p>\n<p>The conversion is guaranteed to not throw, so it won't use the object's\ntoString method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String safeToString(Object object) {\n  if (object is num || object is bool || null == object) {\n    return object.toString();\n  }\n  if (object is String) {\n    return _stringToSafeString(object);\n  }\n  return _objectToString(object);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Error\/safeToString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "safeToString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Error",
            "params": [
                {
                    "name": "object",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external StackTrace get stackTrace;<\/code><\/pre>\n        ",
            "href": "dart-core\/Error\/stackTrace.html",
            "name": "stackTrace",
            "isDeprecated": false,
            "type": "dart:core.StackTrace",
            "memberOf": "dart:core.Error",
            "params": []
        }
    ]
}