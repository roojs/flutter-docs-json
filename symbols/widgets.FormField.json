{
    "name": "widgets.FormField",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [
        {
            "name": "onSaved",
            "type": "widgets.FormFieldSetter",
            "desc": "<p>An optional method to call with the final value when the form is saved via\n<a href=\"widgets\/FormState\/save.html\">FormState.save<\/a>.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/FormField\/onSaved.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FormFieldSetter&lt;T&gt; onSaved\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "FormField",
            "type": "",
            "desc": "<p>Creates a single form field.<\/p>\n<p>The <code>builder<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.FormField",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "builder",
                    "type": "widgets.FormFieldBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSaved",
                    "type": "widgets.FormFieldSetter",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "validator",
                    "type": "widgets.FormFieldValidator",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "initialValue",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "autovalidate",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "enabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/FormField\/FormField.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FormField({\n  Key key,\n  @required this.builder,\n  this.onSaved,\n  this.validator,\n  this.initialValue,\n  this.autovalidate = false,\n  this.enabled = true,\n}) : assert(builder != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "widgets.FormFieldState",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/FormField\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.FormField",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/FormField\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFormFieldState&lt;T&gt; createState() =&gt; FormFieldState&lt;T&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "autovalidate",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>If true, this form field will validate and update its error text\nimmediately after every change. Otherwise, you must call\n<a href=\"widgets\/FormFieldState\/validate.html\">FormFieldState.validate<\/a> to validate. If part of a <a href=\"widgets\/Form-class.html\">Form<\/a> that\nauto-validates, this value will be ignored.<\/p>\n        ",
            "memberOf": "widgets.FormField",
            "isConstant": false,
            "href": "widgets\/FormField\/autovalidate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autovalidate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "builder",
            "type": "widgets.FormFieldBuilder",
            "types": [],
            "desc": "<p>Function that returns the widget representing this form field. It is\npassed the form field state as input, containing the current value and\nvalidation state of this field.<\/p>\n        ",
            "memberOf": "widgets.FormField",
            "isConstant": false,
            "href": "widgets\/FormField\/builder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FormFieldBuilder&lt;T&gt; builder\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "enabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the form is able to receive user input.<\/p>\n<p>Defaults to true. If <a href=\"widgets\/FormField\/autovalidate.html\">autovalidate<\/a> is true, the field will be validated.\nLikewise, if this field is false, the widget will not be validated\nregardless of <a href=\"widgets\/FormField\/autovalidate.html\">autovalidate<\/a>.<\/p>\n        ",
            "memberOf": "widgets.FormField",
            "isConstant": false,
            "href": "widgets\/FormField\/enabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "initialValue",
            "type": "",
            "types": [],
            "desc": "<p>An optional value to initialize the form field to, or null otherwise.<\/p>\n        ",
            "memberOf": "widgets.FormField",
            "isConstant": false,
            "href": "widgets\/FormField\/initialValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T initialValue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "validator",
            "type": "widgets.FormFieldValidator",
            "types": [],
            "desc": "<p>An optional method that validates an input. Returns an error string to\ndisplay if the input is invalid, or null otherwise.<\/p>\n<p>The returned value is exposed by the <a href=\"widgets\/FormFieldState\/errorText.html\">FormFieldState.errorText<\/a> property.\nThe <a href=\"material\/TextFormField-class.html\">TextFormField<\/a> uses this to override the <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>\nvalue.<\/p>\n        ",
            "memberOf": "widgets.FormField",
            "isConstant": false,
            "href": "widgets\/FormField\/validator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FormFieldValidator&lt;T&gt; validator\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "material.DropdownButtonFormField",
        "material.TextFormField",
        "widgets.FormFieldState"
    ],
    "realImplementors": [
        "material.DropdownButtonFormField",
        "material.TextFormField",
        "widgets.FormFieldState"
    ],
    "cn": [],
    "href": "widgets\/FormField-class.html",
    "desc": "<p>A single form field.<\/p>\n<p>This widget maintains the current state of the form field, so that updates\nand validation errors are visually reflected in the UI.<\/p>\n<p>When used inside a <a href=\"widgets\/Form-class.html\">Form<\/a>, you can use methods on <a href=\"widgets\/FormState-class.html\">FormState<\/a> to query or\nmanipulate the form data as a whole. For example, calling <a href=\"widgets\/FormState\/save.html\">FormState.save<\/a>\nwill invoke each <a href=\"widgets\/FormField-class.html\">FormField<\/a>'s <a href=\"widgets\/FormField\/onSaved.html\">onSaved<\/a> callback in turn.<\/p>\n<p>Use a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> with <a href=\"widgets\/FormField-class.html\">FormField<\/a> if you want to retrieve its current\nstate, for example if you want one form field to depend on another.<\/p>\n<p>A <a href=\"widgets\/Form-class.html\">Form<\/a> ancestor is not required. The <a href=\"widgets\/Form-class.html\">Form<\/a> simply makes it easier to\nsave, reset, or validate multiple fields at once. To use without a <a href=\"widgets\/Form-class.html\">Form<\/a>,\npass a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> to the constructor and use <a href=\"widgets\/GlobalKey\/currentState.html\">GlobalKey.currentState<\/a> to\nsave or reset the form field.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Form-class.html\">Form<\/a>, which is the widget that aggregates the form fields.<\/li>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, which is a commonly used form field for entering text.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FormField"
}