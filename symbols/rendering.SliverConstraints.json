{
    "desc": "<p>Immutable layout constraints for <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> layout.<\/p>\n<p>The <a href=\"rendering\/SliverConstraints-class.html\">SliverConstraints<\/a> describe the current scroll state of the viewport\nfrom the point of view of the sliver receiving the constraints. For example,\na <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> of zero means that the leading edge of the sliver is\nvisible in the viewport, not that the viewport itself has a zero scroll\noffset.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/SliverConstraints-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.SliverConstraints",
    "shortname": "SliverConstraints",
    "extends": [
        "rendering.Constraints",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates sliver constraints with the given information.<\/p>\n<p>All of the argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SliverConstraints({\n  @required this.axisDirection,\n  @required this.growthDirection,\n  @required this.userScrollDirection,\n  @required this.scrollOffset,\n  @required this.precedingScrollExtent,\n  @required this.overlap,\n  @required this.remainingPaintExtent,\n  @required this.crossAxisExtent,\n  @required this.crossAxisDirection,\n  @required this.viewportMainAxisExtent,\n  @required this.remainingCacheExtent,\n  @required this.cacheOrigin,\n}) : assert(axisDirection != null),\n     assert(growthDirection != null),\n     assert(userScrollDirection != null),\n     assert(scrollOffset != null),\n     assert(precedingScrollExtent != null),\n     assert(overlap != null),\n     assert(remainingPaintExtent != null),\n     assert(crossAxisExtent != null),\n     assert(crossAxisDirection != null),\n     assert(viewportMainAxisExtent != null),\n     assert(remainingCacheExtent != null),\n     assert(cacheOrigin != null);<\/code><\/pre>\n    ",
            "href": "rendering\/SliverConstraints\/SliverConstraints.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.SliverConstraints",
            "params": [
                {
                    "name": "axisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "cacheOrigin",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "crossAxisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "crossAxisExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "growthDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.GrowthDirection"
                },
                {
                    "name": "overlap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "precedingScrollExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "remainingCacheExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "remainingPaintExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "scrollOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "userScrollDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.ScrollDirection"
                },
                {
                    "name": "viewportMainAxisExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> that reflects the sliver constraints.<\/p>\n<p>The <code>minExtent<\/code> and <code>maxExtent<\/code> are used as the constraints in the main\naxis. If non-null, the given <code>crossAxisExtent<\/code> is used as a tight\nconstraint in the cross axis. Otherwise, the <code>crossAxisExtent<\/code> from this\nobject is used as a constraint in the cross axis.<\/p>\n<p>Useful for slivers that have <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxConstraints asBoxConstraints({\n  double minExtent = 0.0,\n  double maxExtent = double.infinity,\n  double crossAxisExtent,\n}) {\n  crossAxisExtent ??= this.crossAxisExtent;\n  switch (axis) {\n    case Axis.horizontal:\n      return BoxConstraints(\n        minHeight: crossAxisExtent,\n        maxHeight: crossAxisExtent,\n        minWidth: minExtent,\n        maxWidth: maxExtent,\n      );\n    case Axis.vertical:\n      return BoxConstraints(\n        minWidth: crossAxisExtent,\n        maxWidth: crossAxisExtent,\n        minHeight: minExtent,\n        maxHeight: maxExtent,\n      );\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/SliverConstraints\/asBoxConstraints.html",
            "isDeprecated": "0",
            "type": "rendering.BoxConstraints",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverConstraints",
            "params": [
                {
                    "name": "crossAxisExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "maxExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "minExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this object but with the given fields replaced with the\nnew values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SliverConstraints copyWith({\n  AxisDirection axisDirection,\n  GrowthDirection growthDirection,\n  ScrollDirection userScrollDirection,\n  double scrollOffset,\n  double precedingScrollExtent,\n  double overlap,\n  double remainingPaintExtent,\n  double crossAxisExtent,\n  AxisDirection crossAxisDirection,\n  double viewportMainAxisExtent,\n  double remainingCacheExtent,\n  double cacheOrigin,\n}) {\n  return SliverConstraints(\n    axisDirection: axisDirection ?? this.axisDirection,\n    growthDirection: growthDirection ?? this.growthDirection,\n    userScrollDirection: userScrollDirection ?? this.userScrollDirection,\n    scrollOffset: scrollOffset ?? this.scrollOffset,\n    precedingScrollExtent: precedingScrollExtent ?? this.precedingScrollExtent,\n    overlap: overlap ?? this.overlap,\n    remainingPaintExtent: remainingPaintExtent ?? this.remainingPaintExtent,\n    crossAxisExtent: crossAxisExtent ?? this.crossAxisExtent,\n    crossAxisDirection: crossAxisDirection ?? this.crossAxisDirection,\n    viewportMainAxisExtent: viewportMainAxisExtent ?? this.viewportMainAxisExtent,\n    remainingCacheExtent: remainingCacheExtent ?? this.remainingCacheExtent,\n    cacheOrigin: cacheOrigin ?? this.cacheOrigin,\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/SliverConstraints\/copyWith.html",
            "isDeprecated": "0",
            "type": "rendering.SliverConstraints",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverConstraints",
            "params": [
                {
                    "name": "axisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "cacheOrigin",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "crossAxisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "crossAxisExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "growthDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.GrowthDirection"
                },
                {
                    "name": "overlap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "precedingScrollExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "remainingCacheExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "remainingPaintExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "scrollOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "userScrollDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.ScrollDirection"
                },
                {
                    "name": "viewportMainAxisExtent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Asserts that the constraints are valid.<\/p>\n<p>This might involve checks more detailed than <a href=\"rendering\/SliverConstraints\/isNormalized.html\">isNormalized<\/a>.<\/p>\n<p>For example, the <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> subclass verifies that the constraints\nare not <a href=\"dart-core\/double\/nan-constant.html\">double.nan<\/a>.<\/p>\n<p>If the <code>isAppliedConstraint<\/code> argument is true, then even stricter rules\nare enforced. This argument is set to true when checking constraints that\nare about to be applied to a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> during layout, as opposed to\nconstraints that may be further affected by other constraints. For\nexample, the asserts for verifying the validity of\n<a href=\"rendering\/RenderConstrainedBox\/additionalConstraints.html\">RenderConstrainedBox.additionalConstraints<\/a> do not set this argument, but\nthe asserts for verifying the argument passed to the <a href=\"rendering\/RenderObject\/layout.html\">RenderObject.layout<\/a>\nmethod do.<\/p>\n<p>The <code>informationCollector<\/code> argument takes an optional callback which is\ncalled when an exception is to be thrown. The collected information is\nthen included in the message after the error line.<\/p>\n<p>Returns the same as <a href=\"rendering\/SliverConstraints\/isNormalized.html\">isNormalized<\/a> if asserts are disabled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool debugAssertIsValid({\n  bool isAppliedConstraint = false,\n  InformationCollector informationCollector,\n}) {\n  assert(() {\n    void verify(bool check, String message) {\n      if (check)\n        return;\n      final StringBuffer information = StringBuffer();\n      if (informationCollector != null)\n        informationCollector(information);\n      throw FlutterError('$runtimeType is not valid: $message\\n${information}The offending constraints were:\\n  $this');\n    }\n    verify(axis != null, 'The \"axis\" is null.');\n    verify(growthDirection != null, 'The \"growthDirection\" is null.');\n    verify(scrollOffset != null, 'The \"scrollOffset\" is null.');\n    verify(overlap != null, 'The \"overlap\" is null.');\n    verify(remainingPaintExtent != null, 'The \"remainingPaintExtent\" is null.');\n    verify(crossAxisExtent != null, 'The \"crossAxisExtent\" is null.');\n    verify(viewportMainAxisExtent != null, 'The \"viewportMainAxisExtent\" is null.');\n    verify(scrollOffset &gt;= 0.0, 'The \"scrollOffset\" is negative.');\n    verify(crossAxisExtent &gt;= 0.0, 'The \"crossAxisExtent\" is negative.');\n    verify(crossAxisDirection != null, 'The \"crossAxisDirection\" is null.');\n    verify(axisDirectionToAxis(axisDirection) != axisDirectionToAxis(crossAxisDirection), 'The \"axisDirection\" and the \"crossAxisDirection\" are along the same axis.');\n    verify(viewportMainAxisExtent &gt;= 0.0, 'The \"viewportMainAxisExtent\" is negative.');\n    verify(remainingPaintExtent &gt;= 0.0, 'The \"remainingPaintExtent\" is negative.');\n    verify(remainingCacheExtent &gt;= 0.0, 'The \"remainingCacheExtent\" is negative.');\n    verify(cacheOrigin &lt;= 0.0, 'The \"cacheOrigin\" is positive.');\n    verify(isNormalized, 'The constraints are not normalized.'); \/\/ should be redundant with earlier checks\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/SliverConstraints\/debugAssertIsValid.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverConstraints",
            "params": [
                {
                    "name": "informationCollector",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.InformationCollector"
                },
                {
                    "name": "isAppliedConstraint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'SliverConstraints('\n           '$axisDirection, '\n           '$growthDirection, '\n           '$userScrollDirection, '\n           'scrollOffset: ${scrollOffset.toStringAsFixed(1)}, '\n           'remainingPaintExtent: ${remainingPaintExtent.toStringAsFixed(1)}, ' +\n           (overlap != 0.0 ? 'overlap: ${overlap.toStringAsFixed(1)}, ' : '') +\n           'crossAxisExtent: ${crossAxisExtent.toStringAsFixed(1)}, '\n           'crossAxisDirection: $crossAxisDirection, '\n           'viewportMainAxisExtent: ${viewportMainAxisExtent.toStringAsFixed(1)}, '\n           'remainingCacheExtent: ${remainingCacheExtent.toStringAsFixed(1)} '\n           'cacheOrigin: ${cacheOrigin.toStringAsFixed(1)} '\n         ')';\n}<\/code><\/pre>\n    ",
            "href": "rendering\/SliverConstraints\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.SliverConstraints",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The axis along which the <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> and <a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">remainingPaintExtent<\/a> are measured.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Axis get axis =&gt; axisDirectionToAxis(axisDirection);<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/axis.html",
            "isDeprecated": "0",
            "type": "painting.Axis",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The direction in which the <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> and <a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">remainingPaintExtent<\/a>\nincrease.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AxisDirection axisDirection\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/axisDirection.html",
            "isDeprecated": "0",
            "type": "painting.AxisDirection",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>Where the cache area starts relative to the <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a>.<\/p>\n<p>Slivers that fall into the cache area located before the leading edge and\nafter the trailing edge of the viewport should still render content\nbecause they are about to become visible when the user scrolls.<\/p>\n<p>The <a href=\"rendering\/SliverConstraints\/cacheOrigin.html\">cacheOrigin<\/a> describes where the <a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">remainingCacheExtent<\/a> starts relative\nto the <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a>. A cache origin of 0 means that the sliver does not\nhave to provide any content before the current <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a>. A\n<a href=\"rendering\/SliverConstraints\/cacheOrigin.html\">cacheOrigin<\/a> of -250.0 means that even though the first visible part of\nthe sliver will be at the provided <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a>, the sliver should\nrender content starting 250.0 before the <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> to fill the\ncache area of the viewport.<\/p>\n<p>The <a href=\"rendering\/SliverConstraints\/cacheOrigin.html\">cacheOrigin<\/a> is always negative or zero and will never exceed\n-<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a>. In other words, a sliver is never asked to provide\ncontent before its zero <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderViewportBase\/cacheExtent.html\">RenderViewport.cacheExtent<\/a> for a description of a viewport's cache area.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double cacheOrigin\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/cacheOrigin.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The direction in which children should be placed in the cross axis.<\/p>\n<p>Typically used in vertical lists to describe whether the ambient\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> or <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AxisDirection crossAxisDirection\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/crossAxisDirection.html",
            "isDeprecated": "0",
            "type": "painting.AxisDirection",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The number of pixels in the cross-axis.<\/p>\n<p>For a vertical list, this is the width of the sliver.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double crossAxisExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/crossAxisExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The direction in which the contents of slivers are ordered, relative to\nthe <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a>.<\/p>\n<p>For example, if the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, and the\n<a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a> is <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.forward<\/a>, then an alphabetical list\nwill have A at the bottom, then B, then C, and so forth, with Z at the\ntop, with the bottom of the A at scroll offset zero, and the top of the Z\nat the highest scroll offset.<\/p>\n<p>On the other hand, if the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a> but the\n<a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a> is <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.reverse<\/a>, then an alphabetical list\nwill have A at the top, then B, then C, and so forth, with Z at the\nbottom, with the bottom of the Z at scroll offset zero, and the top of the\nA at the highest scroll offset.<\/p>\n<p>If a viewport has an overall <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a> of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then\nslivers above the absolute zero offset will have an axis of\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a> and a growth direction of <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.reverse<\/a>,\nwhile slivers below the absolute zero offset will have the same axis\ndirection as the viewport and a growth direction of\n<a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.forward<\/a>. (The slivers with a reverse growth direction\nstill see only positive scroll offsets; the scroll offsets are reversed as\nwell, with zero at the absolute zero point, and positive numbers going\naway from there.)<\/p>\n<p>In general, lists grow only in the positive scroll offset direction, so\nthe only growth direction that is commonly seen is\n<a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.forward<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GrowthDirection growthDirection\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/growthDirection.html",
            "isDeprecated": "0",
            "type": "rendering.GrowthDirection",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"rendering\/SliverConstraints\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"rendering\/SliverConstraints\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"rendering\/SliverConstraints\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"rendering\/SliverConstraints\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"rendering\/SliverConstraints\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"rendering\/SliverConstraints\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    axisDirection,\n    growthDirection,\n    scrollOffset,\n    overlap,\n    remainingPaintExtent,\n    crossAxisExtent,\n    crossAxisDirection,\n    viewportMainAxisExtent,\n    remainingCacheExtent,\n    cacheOrigin,\n  );\n}<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>Whether the constraint is expressed in a consistent manner.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isNormalized {\n  return scrollOffset &gt;= 0.0\n      &amp;&amp; crossAxisExtent &gt;= 0.0\n      &amp;&amp; axisDirectionToAxis(axisDirection) != axisDirectionToAxis(crossAxisDirection)\n      &amp;&amp; viewportMainAxisExtent &gt;= 0.0\n      &amp;&amp; remainingPaintExtent &gt;= 0.0;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/isNormalized.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>Whether there is exactly one size possible given these constraints<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isTight =&gt; false;<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/isTight.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>Return what the <a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a> would be if the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a> was\neither <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>.<\/p>\n<p>This is the same as <a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a> unless the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a> is either\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a>, in which case it is the\nopposite growth direction.<\/p>\n<p>This can be useful in combination with <a href=\"rendering\/SliverConstraints\/axis.html\">axis<\/a> to view the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a>\nand <a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a> in different terms.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GrowthDirection get normalizedGrowthDirection {\n  assert(axisDirection != null);\n  switch (axisDirection) {\n    case AxisDirection.down:\n    case AxisDirection.right:\n      return growthDirection;\n    case AxisDirection.up:\n    case AxisDirection.left:\n      switch (growthDirection) {\n        case GrowthDirection.forward:\n          return GrowthDirection.reverse;\n        case GrowthDirection.reverse:\n          return GrowthDirection.forward;\n      }\n      return null;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/normalizedGrowthDirection.html",
            "isDeprecated": "0",
            "type": "rendering.GrowthDirection",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The number of pixels from where the pixels corresponding to the\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> will be painted up to the first pixel that has not yet been\npainted on by an earlier sliver, in the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a>.<\/p>\n<p>For example, if the previous sliver had a <a href=\"rendering\/SliverGeometry\/paintExtent.html\">SliverGeometry.paintExtent<\/a> of\n100.0 pixels but a <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">SliverGeometry.layoutExtent<\/a> of only 50.0 pixels,\nthen the <a href=\"rendering\/SliverConstraints\/overlap.html\">overlap<\/a> of this sliver will be 50.0.<\/p>\n<p>This is typically ignored unless the sliver is itself going to be pinned\nor floating and wants to avoid doing so under the previous sliver.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double overlap\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/overlap.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The scroll distance that has been consumed by all <code>Sliver<\/code>s that came\nbefore this <code>Sliver<\/code>.<\/p>\n<h1 id=\"edge-cases\">Edge Cases<\/h1>\n<p><code>Sliver<\/code>s often lazily create their internal content as layout occurs,\ne.g., <a href=\"widgets\/SliverList-class.html\">SliverList<\/a>. In this case, when <code>Sliver<\/code>s exceed the viewport,\ntheir children are built lazily, and the <code>Sliver<\/code> does not have enough\ninformation to estimate its total extent, <a href=\"rendering\/SliverConstraints\/precedingScrollExtent.html\">precedingScrollExtent<\/a> will be\n<a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a> for all <code>Sliver<\/code>s that appear after the lazily\nconstructed child. This is because a total <code>scrollExtent<\/code> cannot be\ncalculated unless all inner children have been created and sized, or the\nnumber of children and estimated extents are provided. The infinite\n<code>scrollExtent<\/code> will become finite as soon as enough information is\navailable to estimate the overall extent of all children within the given\n<code>Sliver<\/code>.<\/p>\n<p><code>Sliver<\/code>s may legitimately be infinite, meaning that they can scroll\ncontent forever without reaching the end. For any <code>Sliver<\/code>s that appear\nafter the infinite <code>Sliver<\/code>, the <a href=\"rendering\/SliverConstraints\/precedingScrollExtent.html\">precedingScrollExtent<\/a> will be\n<a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double precedingScrollExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/precedingScrollExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>Describes how much content the sliver should provide starting from the\n<a href=\"rendering\/SliverConstraints\/cacheOrigin.html\">cacheOrigin<\/a>.<\/p>\n<p>Not all content in the <a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">remainingCacheExtent<\/a> will be visible as some\nof it might fall into the cache area of the viewport.<\/p>\n<p>Each sliver should start laying out content at the <a href=\"rendering\/SliverConstraints\/cacheOrigin.html\">cacheOrigin<\/a> and\ntry to provide as much content as the <a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">remainingCacheExtent<\/a> allows.<\/p>\n<p>The <a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">remainingCacheExtent<\/a> is always larger or equal to the\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">remainingPaintExtent<\/a>. Content, that falls in the <a href=\"rendering\/SliverConstraints\/remainingCacheExtent.html\">remainingCacheExtent<\/a>,\nbut is outside of the <a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">remainingPaintExtent<\/a> is currently not visible\nin the viewport.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderViewportBase\/cacheExtent.html\">RenderViewport.cacheExtent<\/a> for a description of a viewport's cache area.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double remainingCacheExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/remainingCacheExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The number of pixels of content that the sliver should consider providing.\n(Providing more pixels than this is inefficient.)<\/p>\n<p>The actual number of pixels provided should be specified in the\n<a href=\"rendering\/RenderSliver\/geometry.html\">RenderSliver.geometry<\/a> as <a href=\"rendering\/SliverGeometry\/paintExtent.html\">SliverGeometry.paintExtent<\/a>.<\/p>\n<p>This value may be infinite, for example if the viewport is an\nunconstrained <a href=\"rendering\/RenderShrinkWrappingViewport-class.html\">RenderShrinkWrappingViewport<\/a>.<\/p>\n<p>This value may be 0.0, for example if the sliver is scrolled off the\nbottom of a downwards vertical viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double remainingPaintExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/remainingPaintExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The scroll offset, in this sliver's coordinate system, that corresponds to\nthe earliest visible part of this sliver in the <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a>.<\/p>\n<p>For example, if <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the\nscroll offset at the top of the visible portion of the sliver or\nequivalently the amount the top of the sliver has been scrolled past the\ntop of the viewport.<\/p>\n<p>This value is typically used to compute whether this sliver should still\nprotrude into the viewport via <a href=\"rendering\/SliverGeometry\/paintExtent.html\">SliverGeometry.paintExtent<\/a> and\n<a href=\"rendering\/SliverGeometry\/layoutExtent.html\">SliverGeometry.layoutExtent<\/a> considering how far the beginning of the\nsliver is above the beginning of the viewport.<\/p>\n<p>For slivers whose top is not past the top of the viewport, the\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> is <code>0<\/code> when <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>. This\nincludes all the slivers that are below the bottom of the viewport.<\/p>\n<p><a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a> is typically used to accomplish\nthe same goal of computing whether scrolled out slivers should still\npartially 'protrude in' from the bottom of the viewport.<\/p>\n<p>Whether this corresponds to the beginning or the end of the sliver's\ncontents depends on the <a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollOffset\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/scrollOffset.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The direction in which the user is attempting to scroll, relative to the\n<a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a> and <a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a>.<\/p>\n<p>For example, if <a href=\"rendering\/SliverConstraints\/growthDirection.html\">growthDirection<\/a> is <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.reverse<\/a> and\n<a href=\"rendering\/SliverConstraints\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then a\n<a href=\"rendering\/ScrollDirection-class.html\">ScrollDirection.forward<\/a> means that the user is scrolling up, in the\npositive <a href=\"rendering\/SliverConstraints\/scrollOffset.html\">scrollOffset<\/a> direction.<\/p>\n<p>If the <em>user<\/em> is not scrolling, this will return <a href=\"rendering\/ScrollDirection-class.html\">ScrollDirection.idle<\/a>\neven if there is (for example) a <a href=\"widgets\/ScrollActivity-class.html\">ScrollActivity<\/a> currently animating the\nposition.<\/p>\n<p>This is used by some slivers to determine how to react to a change in\nscroll offset. For example, <a href=\"rendering\/RenderSliverFloatingPersistentHeader-class.html\">RenderSliverFloatingPersistentHeader<\/a> will\nonly expand a floating app bar when the <a href=\"rendering\/SliverConstraints\/userScrollDirection.html\">userScrollDirection<\/a> is in the\npositive scroll offset direction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollDirection userScrollDirection\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/userScrollDirection.html",
            "isDeprecated": "0",
            "type": "rendering.ScrollDirection",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        },
        {
            "desc": "<p>The number of pixels the viewport can display in the main axis.<\/p>\n<p>For a vertical list, this is the height of the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double viewportMainAxisExtent\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/SliverConstraints\/viewportMainAxisExtent.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.SliverConstraints",
            "params": []
        }
    ]
}