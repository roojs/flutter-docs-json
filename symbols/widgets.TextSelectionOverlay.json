{
    "desc": "<p>An object that manages a pair of text selection handles.<\/p>\n<p>The selection handles are displayed in the <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> that most closely\nencloses the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "widgets\/TextSelectionOverlay-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.TextSelectionOverlay",
    "shortname": "TextSelectionOverlay",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an object that manages overly entries for selection handles.<\/p>\n<p>The <code>context<\/code> must not be null and must have an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> as an ancestor.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSelectionOverlay({\n  @required TextEditingValue value,\n  @required this.context,\n  this.debugRequiredFor,\n  @required this.layerLink,\n  @required this.renderObject,\n  this.selectionControls,\n  this.selectionDelegate,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(value != null),\n     assert(context != null),\n     _value = value {\n  final OverlayState overlay = Overlay.of(context);\n  assert(overlay != null,\n    'No Overlay widget exists above $context.\\n'\n    'Usually the Navigator created by WidgetsApp provides the overlay. Perhaps your '\n    'app content was created above the Navigator with the WidgetsApp builder parameter.');\n  _toolbarController = AnimationController(duration: fadeDuration, vsync: overlay);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/TextSelectionOverlay.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "debugRequiredFor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "layerLink",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.LayerLink"
                },
                {
                    "name": "renderObject",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.RenderEditable"
                },
                {
                    "name": "selectionControls",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.TextSelectionControls"
                },
                {
                    "name": "selectionDelegate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextSelectionDelegate"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextEditingValue"
                }
            ]
        },
        {
            "desc": "<p>Final cleanup.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispose() {\n  hide();\n  _toolbarController.dispose();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Hides the overlay.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hide() {\n  if (_handles != null) {\n    _handles[0].remove();\n    _handles[1].remove();\n    _handles = null;\n  }\n  _toolbar?.remove();\n  _toolbar = null;\n\n  _toolbarController.stop();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/hide.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Shows the handles by inserting them into the <a href=\"widgets\/TextSelectionOverlay\/context.html\">context<\/a>'s overlay.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void showHandles() {\n  assert(_handles == null);\n  _handles = &lt;OverlayEntry&gt;[\n    OverlayEntry(builder: (BuildContext context) =&gt; _buildHandle(context, _TextSelectionHandlePosition.start)),\n    OverlayEntry(builder: (BuildContext context) =&gt; _buildHandle(context, _TextSelectionHandlePosition.end)),\n  ];\n  Overlay.of(context, debugRequiredFor: debugRequiredFor).insertAll(_handles);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/showHandles.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Shows the toolbar by inserting it into the <a href=\"widgets\/TextSelectionOverlay\/context.html\">context<\/a>'s overlay.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void showToolbar() {\n  assert(_toolbar == null);\n  _toolbar = OverlayEntry(builder: _buildToolbar);\n  Overlay.of(context, debugRequiredFor: debugRequiredFor).insert(_toolbar);\n  _toolbarController.forward(from: 0.0);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/showToolbar.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Updates the overlay after the selection has changed.<\/p>\n<p>If this method is called while the <a href=\"scheduler\/SchedulerBinding\/schedulerPhase.html\">SchedulerBinding.schedulerPhase<\/a> is\n<a href=\"scheduler\/SchedulerPhase-class.html\">SchedulerPhase.persistentCallbacks<\/a>, i.e. during the build, layout, or\npaint phases (see <a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>), then the update is delayed\nuntil the post-frame callbacks phase. Otherwise the update is done\nsynchronously. This means that it is safe to call during builds, but also\nthat if you do call this during a build, the UI will not update until the\nnext frame (i.e. many milliseconds later).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void update(TextEditingValue newValue) {\n  if (_value == newValue)\n    return;\n  _value = newValue;\n  if (SchedulerBinding.instance.schedulerPhase == SchedulerPhase.persistentCallbacks) {\n    SchedulerBinding.instance.addPostFrameCallback(_markNeedsBuild);\n  } else {\n    _markNeedsBuild();\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/update.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": [
                {
                    "name": "newValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "services.TextEditingValue"
                }
            ]
        },
        {
            "desc": "<p>Causes the overlay to update its rendering.<\/p>\n<p>This is intended to be called when the <a href=\"widgets\/TextSelectionOverlay\/renderObject.html\">renderObject<\/a> may have changed its\ntext metrics (e.g. because the text was scrolled).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateForScroll() {\n  _markNeedsBuild();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextSelectionOverlay\/updateForScroll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The context in which the selection handles should appear.<\/p>\n<p>This context must have an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> as an ancestor because this object\nwill display the text selection handles in that <a href=\"widgets\/Overlay-class.html\">Overlay<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BuildContext context\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/context.html",
            "isDeprecated": "0",
            "type": "widgets.BuildContext",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Debugging information for explaining why the <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> is required.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget debugRequiredFor\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/debugRequiredFor.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, handle drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/TextSelectionOverlay\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/dragStartBehavior.html",
            "isDeprecated": "0",
            "type": "gestures.DragStartBehavior",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Whether the handles are currently visible.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get handlesAreVisible =&gt; _handles != null;<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/handlesAreVisible.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>The object supplied to the <a href=\"widgets\/CompositedTransformTarget-class.html\">CompositedTransformTarget<\/a> that wraps the text\nfield.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final LayerLink layerLink\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/layerLink.html",
            "isDeprecated": "0",
            "type": "rendering.LayerLink",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>The editable line in which the selected text is being displayed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RenderEditable renderObject\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/renderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderEditable",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Builds text selection handles and toolbar.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSelectionControls selectionControls\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/selectionControls.html",
            "isDeprecated": "0",
            "type": "widgets.TextSelectionControls",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>The delegate for manipulating the current selection in the owning\ntext field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSelectionDelegate selectionDelegate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/selectionDelegate.html",
            "isDeprecated": "0",
            "type": "services.TextSelectionDelegate",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        },
        {
            "desc": "<p>Whether the toolbar is currently visible.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get toolbarIsVisible =&gt; _toolbar != null;<\/code><\/pre>\n        ",
            "href": "widgets\/TextSelectionOverlay\/toolbarIsVisible.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.TextSelectionOverlay",
            "params": []
        }
    ]
}