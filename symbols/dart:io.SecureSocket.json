{
    "name": "dart:io.SecureSocket",
    "extends": [],
    "memberOf": "dart:io",
    "events": [],
    "methods": [
        {
            "name": "connect",
            "type": "dart:async.Future<dart:io.SecureSocket>",
            "desc": "<p>Constructs a new secure client socket and connects it to the given\n<code>host<\/code> on port <code>port<\/code>. The returned Future will complete with a\n<a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> that is connected and ready for subscription.<\/p>\n<p>The certificate provided by the server is checked\nusing the trusted certificates set in the SecurityContext object.\nThe default SecurityContext object contains a built-in set of trusted\nroot certificates for well-known certificate authorities.<\/p>\n<p><code>onBadCertificate<\/code> is an optional handler for unverifiable certificates.\nThe handler receives the <a href=\"dart-io\/X509Certificate-class.html\">X509Certificate<\/a>, and can inspect it and\ndecide (or let the user decide) whether to accept\nthe connection or not.  The handler should return true\nto continue the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> connection.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negotiation with the\nserver.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/SecureSocket\/selectedProtocol.html\">SecureSocket.selectedProtocol<\/a>.<\/p>\n<p>The argument <code>timeout<\/code> is used to specify the maximum allowed time to wait\nfor a connection to be established. If <code>timeout<\/code> is longer than the system\nlevel timeout duration, a timeout may occur sooner than specified in\n<code>timeout<\/code>. On timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> is thrown and all ongoing\nconnection attempts to <code>host<\/code> are cancelled.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.SecureSocket",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "context",
                    "type": "dart:io.SecurityContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "supportedProtocols",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "timeout",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/SecureSocket\/connect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureSocket&gt; connect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols,\n    Duration timeout}) {\n  return RawSecureSocket.connect(host, port,\n          context: context,\n          onBadCertificate: onBadCertificate,\n          supportedProtocols: supportedProtocols,\n          timeout: timeout)\n      .then((rawSocket) =&gt; new SecureSocket._(rawSocket));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.SecureSocket"
            ]
        },
        {
            "name": "renegotiate",
            "type": "",
            "desc": "<p>Renegotiate an existing secure connection, renewing the session keys\nand possibly changing the connection properties.<\/p>\n<p>This repeats the SSL or TLS handshake, with options that allow clearing\nthe session cache and requesting a client certificate.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.SecureSocket",
            "sig": "",
            "params": [
                {
                    "name": "useSessionCache",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "requestClientCertificate",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "requireClientCertificate",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/SecureSocket\/renegotiate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void renegotiate(\n    {bool useSessionCache: true,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "secure",
            "type": "dart:async.Future<dart:io.SecureSocket>",
            "desc": "<p>Takes an already connected <code>socket<\/code> and starts client side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is prepared for TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, this subscription\nwill no longer receive and events. In most cases calling\n<code>pause<\/code> on this subscription before starting TLS handshake is\nthe right thing to do.<\/p>\n<p>The given <code>socket<\/code> is closed and may not be used anymore.<\/p>\n<p>If the <code>host<\/code> argument is passed it will be used as the host name\nfor the TLS handshake. If <code>host<\/code> is not passed the host name from\nthe <code>socket<\/code> will be used. The <code>host<\/code> can be either a <a href=\"dart-core\/String-class.html\">String<\/a> or\nan <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>.<\/p>\n<p>Calling this function will <em>not<\/em> cause a DNS host lookup. If the\n<code>host<\/code> passed is a <a href=\"dart-core\/String-class.html\">String<\/a> the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> for the\nresulting <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> will have the passed in <code>host<\/code> as its\nhost value and the internet address of the already connected\nsocket as its address value.<\/p>\n<p>See <a href=\"dart-io\/SecureSocket\/connect.html\">connect<\/a> for more information on the arguments.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.SecureSocket",
            "sig": "",
            "params": [
                {
                    "name": "socket",
                    "type": "dart:io.Socket",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "host",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "context",
                    "type": "dart:io.SecurityContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/SecureSocket\/secure.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureSocket&gt; secure(Socket socket,\n    {host,\n    SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate)}) {\n  return ((socket as dynamic \/*_Socket*\/)._detachRaw() as Future)\n      .then&lt;RawSecureSocket&gt;((detachedRaw) {\n    return RawSecureSocket.secure(detachedRaw[0] as RawSocket,\n        subscription: detachedRaw[1] as StreamSubscription&lt;RawSocketEvent&gt;,\n        host: host,\n        context: context,\n        onBadCertificate: onBadCertificate);\n  }).then&lt;SecureSocket&gt;((raw) =&gt; new SecureSocket._(raw));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.SecureSocket"
            ]
        },
        {
            "name": "secureServer",
            "type": "dart:async.Future<dart:io.SecureSocket>",
            "desc": "<p>Takes an already connected <code>socket<\/code> and starts server side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is going to start the TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, this subscription\nwill no longer receive and events. In most cases calling\n<code>pause<\/code> on this subscription before starting TLS handshake is\nthe right thing to do.<\/p>\n<p>If some of the data of the TLS handshake has already been read\nfrom the socket this data can be passed in the <code>bufferedData<\/code>\nparameter. This data will be processed before any other data\navailable on the socket.<\/p>\n<p>See <a href=\"dart-io\/SecureServerSocket\/bind.html\">SecureServerSocket.bind<\/a> for more information on the\narguments.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.SecureSocket",
            "sig": "",
            "params": [
                {
                    "name": "socket",
                    "type": "dart:io.Socket",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "context",
                    "type": "dart:io.SecurityContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bufferedData",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "requestClientCertificate",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "requireClientCertificate",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "supportedProtocols",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/SecureSocket\/secureServer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureSocket&gt; secureServer(\n    Socket socket, SecurityContext context,\n    {List&lt;int&gt; bufferedData,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols}) {\n  return ((socket as dynamic \/*_Socket*\/)._detachRaw() as Future)\n      .then&lt;RawSecureSocket&gt;((detachedRaw) {\n    return RawSecureSocket.secureServer(detachedRaw[0] as RawSocket, context,\n        subscription: detachedRaw[1] as StreamSubscription&lt;RawSocketEvent&gt;,\n        bufferedData: bufferedData,\n        requestClientCertificate: requestClientCertificate,\n        requireClientCertificate: requireClientCertificate,\n        supportedProtocols: supportedProtocols);\n  }).then&lt;SecureSocket&gt;((raw) =&gt; new SecureSocket._(raw));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.SecureSocket"
            ]
        },
        {
            "name": "startConnect",
            "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.SecureSocket>>",
            "desc": "<p>Like <a href=\"dart-io\/SecureSocket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> is no\nlonger needed.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.SecureSocket",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "context",
                    "type": "dart:io.SecurityContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "supportedProtocols",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/SecureSocket\/startConnect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ConnectionTask&lt;SecureSocket&gt;&gt; startConnect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols}) {\n  return RawSecureSocket.startConnect(host, port,\n          context: context,\n          onBadCertificate: onBadCertificate,\n          supportedProtocols: supportedProtocols)\n      .then((rawState) {\n    Future&lt;SecureSocket&gt; socket =\n        rawState.socket.then((rawSocket) =&gt; new SecureSocket._(rawSocket));\n    return new ConnectionTask&lt;SecureSocket&gt;._(\n        socket: socket, onCancel: rawState._onCancel);\n  });\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.ConnectionTask",
                "dart:io.SecureSocket"
            ]
        }
    ],
    "props": [
        {
            "name": "peerCertificate",
            "type": "dart:io.X509Certificate",
            "types": [],
            "desc": "<p>Get the peer certificate for a connected SecureSocket.  If this\nSecureSocket is the server end of a secure socket connection,\n<a href=\"dart-io\/SecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the client certificate, or null, if no\nclient certificate was received.  If it is the client end,\n<a href=\"dart-io\/SecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the server's certificate.<\/p>\n        ",
            "memberOf": "dart:io.SecureSocket",
            "isConstant": false,
            "href": "dart-io\/SecureSocket\/peerCertificate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">X509Certificate get peerCertificate;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selectedProtocol",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The protocol which was selected during ALPN protocol negotiation.<\/p>\n<p>Returns null if one of the peers does not have support for ALPN, did not\nspecify a list of supported ALPN protocols or there was no common\nprotocol between client and server.<\/p>\n        ",
            "memberOf": "dart:io.SecureSocket",
            "isConstant": false,
            "href": "dart-io\/SecureSocket\/selectedProtocol.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get selectedProtocol;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "dart:io.SecureServerSocket"
    ],
    "realImplementors": [
        "dart:io.SecureServerSocket"
    ],
    "cn": [],
    "href": "dart-io\/SecureSocket-class.html",
    "desc": "<p>A high-level class for communicating securely over a TCP socket, using\nTLS and SSL. The <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> exposes both a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> and an\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> interface, making it ideal for using together with\nother <a href=\"dart-async\/Stream-class.html\">Stream<\/a>s.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SecureSocket"
}