{
    "desc": "<p>A color represented using <a href=\"painting\/HSVColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSVColor\/hue.html\">hue<\/a>, <a href=\"painting\/HSVColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSVColor\/value.html\">value<\/a>.<\/p>\n<p>An <a href=\"painting\/HSVColor-class.html\">HSVColor<\/a> is represented in a parameter space that's based on human\nperception of color in pigments (e.g. paint and printer's ink). The\nrepresentation is useful for some color computations (e.g. rotating the hue\nthrough the colors), because interpolation and picking of\ncolors as red, green, and blue channels doesn't always produce intuitive\nresults.<\/p>\n<p>The HSV color space models the way that different pigments are perceived\nwhen mixed. The hue describes which pigment is used, the saturation\ndescribes which shade of the pigment, and the value resembles mixing the\npigment with different amounts of black or white pigment.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/HSLColor-class.html\">HSLColor<\/a>, a color that uses a color space based on human perception of\ncolored light.<\/li>\n<li>\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/HSL_and_HSV\">HSV and HSL<\/a> Wikipedia\narticle, which this implementation is based upon.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/HSVColor-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.HSVColor",
    "shortname": "HSVColor",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Linearly interpolate between two HSVColors.<\/p>\n<p>The colors are interpolated by interpolating the <a href=\"painting\/HSVColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSVColor\/hue.html\">hue<\/a>,\n<a href=\"painting\/HSVColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSVColor\/value.html\">value<\/a> channels separately, which usually leads to a\nmore pleasing effect than <a href=\"painting\/HSVColor\/lerp.html\">Color.lerp<\/a> (which interpolates the red, green,\nand blue channels separately).<\/p>\n<p>If either color is null, this function linearly interpolates from a\ntransparent instance of the other color. This is usually preferable to\ninterpolating from <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a> (<code>const Color(0x00000000)<\/code>) since\nthat will interpolate from a transparent red and cycle through the hues to\nmatch the target color, regardless of what that color's hue is.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Values outside of the valid range for each channel will be clamped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static HSVColor lerp(HSVColor a, HSVColor b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b._scaleAlpha(t);\n  if (b == null)\n    return a._scaleAlpha(1.0 - t);\n  return HSVColor.fromAHSV(\n    lerpDouble(a.alpha, b.alpha, t).clamp(0.0, 1.0),\n    lerpDouble(a.hue, b.hue, t) % 360.0,\n    lerpDouble(a.saturation, b.saturation, t).clamp(0.0, 1.0),\n    lerpDouble(a.value, b.value, t).clamp(0.0, 1.0),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/lerp.html",
            "isDeprecated": "0",
            "type": "painting.HSVColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.HSVColor"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.HSVColor"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns this color in RGB.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color toColor() {\n  final double chroma = saturation * value;\n  final double secondary = chroma * (1.0 - (((hue \/ 60.0) % 2.0) - 1.0).abs());\n  final double match = value - chroma;\n\n  return _colorFromHue(alpha, hue, chroma, secondary, match);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/toColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($alpha, $hue, $saturation, $value)';<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": []
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>alpha<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withAlpha(double alpha) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/withAlpha.html",
            "isDeprecated": "0",
            "type": "painting.HSVColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": [
                {
                    "name": "alpha",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>hue<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withHue(double hue) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/withHue.html",
            "isDeprecated": "0",
            "type": "painting.HSVColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": [
                {
                    "name": "hue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>saturation<\/code> parameter replaced with\nthe given value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withSaturation(double saturation) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/withSaturation.html",
            "isDeprecated": "0",
            "type": "painting.HSVColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": [
                {
                    "name": "saturation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of this color with the <code>value<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withValue(double value) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
            "href": "painting\/HSVColor\/withValue.html",
            "isDeprecated": "0",
            "type": "painting.HSVColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.HSVColor",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Alpha, from 0.0 to 1.0. The describes the transparency of the color.\nA value of 0.0 is fully transparent, and 1.0 is fully opaque.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double alpha\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSVColor\/alpha.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "painting.HSVColor",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/HSVColor\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(alpha, hue, saturation, value);<\/code><\/pre>\n        ",
            "href": "painting\/HSVColor\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "painting.HSVColor",
            "params": []
        },
        {
            "desc": "<p>Hue, from 0.0 to 360.0. Describes which color of the spectrum is\nrepresented. A value of 0.0 represents red, as does 360.0. Values in\nbetween go through all the hues representable in RGB. You can think of\nthis as selecting which pigment will be added to a color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double hue\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSVColor\/hue.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "painting.HSVColor",
            "params": []
        },
        {
            "desc": "<p>Saturation, from 0.0 to 1.0. This describes how colorful the color is.\n0.0 implies a shade of grey (i.e. no pigment), and 1.0 implies a color as\nvibrant as that hue gets. You can think of this as the equivalent of\nhow much of a pigment is added.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double saturation\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSVColor\/saturation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "painting.HSVColor",
            "params": []
        },
        {
            "desc": "<p>Value, from 0.0 to 1.0. The \"value\" of a color that, in this context,\ndescribes how bright a color is. A value of 0.0 indicates black, and 1.0\nindicates full intensity color. You can think of this as the equivalent of\nremoving black from the color as value increases.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double value\n\n<\/code><\/pre>\n        ",
            "href": "painting\/HSVColor\/value.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "painting.HSVColor",
            "params": []
        }
    ]
}