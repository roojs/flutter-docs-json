{
    "name": "material.InkResponse",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [
        {
            "name": "onDoubleTap",
            "type": "gestures.GestureTapCallback",
            "desc": "<p>Called when the user double taps this part of the material.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/onDoubleTap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCallback onDoubleTap\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onHighlightChanged",
            "type": "foundation.ValueChanged<dart:core.bool>",
            "desc": "<p>Called when this part of the material either becomes highlighted or stops\nbeing highlighted.<\/p>\n<p>The value passed to the callback is true if this part of the material has\nbecome highlighted and false if this part of the material has stopped\nbeing highlighted.<\/p>\n<p>If all of <a href=\"material\/InkResponse\/onTap.html\">onTap<\/a>, <a href=\"material\/InkResponse\/onDoubleTap.html\">onDoubleTap<\/a>, and <a href=\"material\/InkResponse\/onLongPress.html\">onLongPress<\/a> become null while a\ngesture is ongoing, then <a href=\"material\/InkResponse\/onTapCancel.html\">onTapCancel<\/a> will be fired and\n<a href=\"material\/InkResponse\/onHighlightChanged.html\">onHighlightChanged<\/a> will be fired with the value false <em>during the\nbuild<\/em>. This means, for instance, that in that scenario <a href=\"widgets\/State\/setState.html\">State.setState<\/a>\ncannot be called.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/onHighlightChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onHighlightChanged\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false,
            "types": [
                "foundation.ValueChanged",
                "dart:core.bool"
            ]
        },
        {
            "name": "onLongPress",
            "type": "gestures.GestureLongPressCallback",
            "desc": "<p>Called when the user long-presses on this part of the material.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/onLongPress.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressCallback onLongPress\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onTap",
            "type": "gestures.GestureTapCallback",
            "desc": "<p>Called when the user taps this part of the material.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/onTap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCallback onTap\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onTapCancel",
            "type": "gestures.GestureTapCallback",
            "desc": "<p>Called when the user cancels a tap that was started on this part of the\nmaterial.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/onTapCancel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCallback onTapCancel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onTapDown",
            "type": "gestures.GestureTapDownCallback",
            "desc": "<p>Called when the user taps down this part of the material.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/onTapDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapDownCallback onTapDown\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "InkResponse",
            "type": "",
            "desc": "<p>Creates an area of a <a href=\"material\/Material-class.html\">Material<\/a> that responds to touch.<\/p>\n<p>Must have an ancestor <a href=\"material\/Material-class.html\">Material<\/a> widget in which to cause ink reactions.<\/p>\n<p>The <code>containedInkWell<\/code>, <code>highlightShape<\/code>, <code>enableFeedback<\/code>, and\n<code>excludeFromSemantics<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "material.InkResponse",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onTap",
                    "type": "gestures.GestureTapCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onTapDown",
                    "type": "gestures.GestureTapDownCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onTapCancel",
                    "type": "gestures.GestureTapCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDoubleTap",
                    "type": "gestures.GestureTapCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onLongPress",
                    "type": "gestures.GestureLongPressCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onHighlightChanged",
                    "type": "foundation.ValueChanged<dart:core.bool>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "foundation.ValueChanged",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "containedInkWell",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "highlightShape",
                    "type": "painting.BoxShape",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "customBorder",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "highlightColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "splashColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "splashFactory",
                    "type": "material.InteractiveInkFeatureFactory",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "enableFeedback",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "excludeFromSemantics",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/InkResponse\/InkResponse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const InkResponse({\n  Key key,\n  this.child,\n  this.onTap,\n  this.onTapDown,\n  this.onTapCancel,\n  this.onDoubleTap,\n  this.onLongPress,\n  this.onHighlightChanged,\n  this.containedInkWell = false,\n  this.highlightShape = BoxShape.circle,\n  this.radius,\n  this.borderRadius,\n  this.customBorder,\n  this.highlightColor,\n  this.splashColor,\n  this.splashFactory,\n  this.enableFeedback = true,\n  this.excludeFromSemantics = false,\n}) : assert(containedInkWell != null),\n     assert(highlightShape != null),\n     assert(enableFeedback != null),\n     assert(excludeFromSemantics != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "material.InkResponse",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/InkResponse\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.InkResponse",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/InkResponse\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_InkResponseState&lt;InkResponse&gt; createState() =&gt; _InkResponseState&lt;InkResponse&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugCheckContext",
            "type": "dart:core.bool",
            "desc": "<p>Asserts that the given context satisfies the prerequisites for\nthis class.<\/p>\n<p>This method is intended to be overridden by descendants that\nspecialize <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> for unusual cases. For example,\n<a href=\"material\/TableRowInkWell-class.html\">TableRowInkWell<\/a> implements this method to verify that the widget is\nin a table.<\/p>\n    ",
            "static": false,
            "memberOf": "material.InkResponse",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/InkResponse\/debugCheckContext.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nbool debugCheckContext(BuildContext context) {\n  assert(debugCheckHasMaterial(context));\n  assert(debugCheckHasDirectionality(context));\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/InkResponse\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.InkResponse",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/InkResponse\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final List&lt;String&gt; gestures = &lt;String&gt;[];\n  if (onTap != null)\n    gestures.add('tap');\n  if (onDoubleTap != null)\n    gestures.add('double tap');\n  if (onLongPress != null)\n    gestures.add('long press');\n  if (onTapDown != null)\n    gestures.add('tap down');\n  if (onTapCancel != null)\n    gestures.add('tap cancel');\n  properties.add(IterableProperty&lt;String&gt;('gestures', gestures, ifEmpty: '&lt;none&gt;'));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('containedInkWell', containedInkWell, level: DiagnosticLevel.fine));\n  properties.add(DiagnosticsProperty&lt;BoxShape&gt;(\n    'highlightShape',\n    highlightShape,\n    description: '${containedInkWell ? \"clipped to \" : \"\"}$highlightShape',\n    showName: false,\n  ));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "getRectCallback",
            "type": "material.RectCallback",
            "desc": "<p>The rectangle to use for the highlight effect and for clipping\nthe splash effects if <a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a> is true.<\/p>\n<p>This method is intended to be overridden by descendants that\nspecialize <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> for unusual cases. For example,\n<a href=\"material\/TableRowInkWell-class.html\">TableRowInkWell<\/a> implements this method to return the rectangle\ncorresponding to the row that the widget is in.<\/p>\n<p>The default behavior returns null, which is equivalent to\nreturning the referenceBox argument's bounding box (though\nslightly more efficient).<\/p>\n    ",
            "static": false,
            "memberOf": "material.InkResponse",
            "sig": "",
            "params": [
                {
                    "name": "referenceBox",
                    "type": "rendering.RenderBox",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/InkResponse\/getRectCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RectCallback getRectCallback(RenderBox referenceBox) =&gt; null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "borderRadius",
            "type": "painting.BorderRadius",
            "types": [],
            "desc": "<p>The clipping radius of the containing rect. This is effective only if\n<a href=\"material\/InkResponse\/customBorder.html\">customBorder<\/a> is null.<\/p>\n<p>If this is null, it is interpreted as <a href=\"painting\/BorderRadius\/zero-constant.html\">BorderRadius.zero<\/a>.<\/p>\n        ",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/borderRadius.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadius borderRadius\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "containedInkWell",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this ink response should be clipped its bounds.<\/p>\n<p>This flag also controls whether the splash migrates to the center of the\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a> or not. If <a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a> is true, the splash remains\ncentered around the tap location. If it is false, the splash migrates to\nthe center of the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> as it grows.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InkResponse\/highlightShape.html\">highlightShape<\/a>, which determines the shape of the highlight.<\/li>\n<li>\n<a href=\"material\/InkResponse\/borderRadius.html\">borderRadius<\/a>, which controls the corners when the box is a rectangle.<\/li>\n<li>\n<a href=\"material\/InkResponse\/getRectCallback.html\">getRectCallback<\/a>, which controls the size and position of the box when\nit is a rectangle.<\/li>\n<\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/containedInkWell.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool containedInkWell\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "customBorder",
            "type": "painting.ShapeBorder",
            "types": [],
            "desc": "<p>The custom clip border which overrides <a href=\"material\/InkResponse\/borderRadius.html\">borderRadius<\/a>.<\/p>\n        ",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/customBorder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder customBorder\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "enableFeedback",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether detected gestures should provide acoustic and\/or haptic feedback.<\/p>\n<p>For example, on Android a tap will produce a clicking sound and a\nlong-press will produce a short vibration, when feedback is enabled.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Feedback-class.html\">Feedback<\/a> for providing platform-specific feedback to certain actions.<\/li><\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/enableFeedback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enableFeedback\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "excludeFromSemantics",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to exclude the gestures introduced by this widget from the\nsemantics tree.<\/p>\n<p>For example, a long-press gesture for showing a tooltip is usually\nexcluded because the tooltip itself is included in the semantics\ntree directly and so having a gesture to show it would result in\nduplication of information.<\/p>\n        ",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/excludeFromSemantics.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool excludeFromSemantics\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "highlightColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The highlight color of the ink response. If this property is null then the\nhighlight color of the theme, <a href=\"material\/InkResponse\/highlightColor.html\">ThemeData.highlightColor<\/a>, will be used.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InkResponse\/highlightShape.html\">highlightShape<\/a>, the shape of the highlight.<\/li>\n<li>\n<a href=\"material\/InkResponse\/splashColor.html\">splashColor<\/a>, the color of the splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/splashFactory.html\">splashFactory<\/a>, which defines the appearance of the splash.<\/li>\n<\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/highlightColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color highlightColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "highlightShape",
            "type": "painting.BoxShape",
            "types": [],
            "desc": "<p>The shape (e.g., circle, rectangle) to use for the highlight drawn around\nthis part of the material.<\/p>\n<p>If the shape is <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, then the highlight is centered on the\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a>. If the shape is <a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>, then the highlight\nfills the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a>, or the rectangle provided by <a href=\"material\/InkResponse\/getRectCallback.html\">getRectCallback<\/a> if\nthe callback is specified.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a>, which controls clipping behavior.<\/li>\n<li>\n<a href=\"material\/InkResponse\/borderRadius.html\">borderRadius<\/a>, which controls the corners when the box is a rectangle.<\/li>\n<li>\n<a href=\"material\/InkResponse\/highlightColor.html\">highlightColor<\/a>, the color of the highlight.<\/li>\n<li>\n<a href=\"material\/InkResponse\/getRectCallback.html\">getRectCallback<\/a>, which controls the size and position of the box when\nit is a rectangle.<\/li>\n<\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/highlightShape.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxShape highlightShape\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "radius",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The radius of the ink splash.<\/p>\n<p>Splashes grow up to this size. By default, this size is determined from\nthe size of the rectangle provided by <a href=\"material\/InkResponse\/getRectCallback.html\">getRectCallback<\/a>, or the size of\nthe <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InkResponse\/splashColor.html\">splashColor<\/a>, the color of the splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/splashFactory.html\">splashFactory<\/a>, which defines the appearance of the splash.<\/li>\n<\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/radius.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radius\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "splashColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The splash color of the ink response. If this property is null then the\nsplash color of the theme, <a href=\"material\/InkResponse\/splashColor.html\">ThemeData.splashColor<\/a>, will be used.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InkResponse\/splashFactory.html\">splashFactory<\/a>, which defines the appearance of the splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/radius.html\">radius<\/a>, the (maximum) size of the ink splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/highlightColor.html\">highlightColor<\/a>, the color of the highlight.<\/li>\n<\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/splashColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color splashColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "splashFactory",
            "type": "material.InteractiveInkFeatureFactory",
            "types": [],
            "desc": "<p>Defines the appearance of the splash.<\/p>\n<p>Defaults to the value of the theme's splash factory: <a href=\"material\/InkResponse\/splashFactory.html\">ThemeData.splashFactory<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InkResponse\/radius.html\">radius<\/a>, the (maximum) size of the ink splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/splashColor.html\">splashColor<\/a>, the color of the splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/highlightColor.html\">highlightColor<\/a>, the color of the highlight.<\/li>\n<li>\n<a href=\"material\/InkResponse\/splashFactory.html\">InkSplash.splashFactory<\/a>, which defines the default splash.<\/li>\n<li>\n<a href=\"material\/InkResponse\/splashFactory.html\">InkRipple.splashFactory<\/a>, which defines a splash that spreads out\nmore aggressively than the default.<\/li>\n<\/ul>",
            "memberOf": "material.InkResponse",
            "isConstant": false,
            "href": "material\/InkResponse\/splashFactory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InteractiveInkFeatureFactory splashFactory\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "material.InkWell",
        "material.TableRowInkWell"
    ],
    "realImplementors": [
        "material.InkWell",
        "material.TableRowInkWell"
    ],
    "cn": [],
    "href": "material\/InkResponse-class.html",
    "desc": "<p>An area of a <a href=\"material\/Material-class.html\">Material<\/a> that responds to touch. Has a configurable shape and\ncan be configured to clip splashes that extend outside its bounds or not.<\/p>\n<p>For a variant of this widget that is specialized for rectangular areas that\nalways clip splashes, see <a href=\"material\/InkWell-class.html\">InkWell<\/a>.<\/p>\n<p>An <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> widget does two things when responding to a tap:<\/p>\n<ul>\n<li>\n<p>It starts to animate a <em>highlight<\/em>. The shape of the highlight is\ndetermined by <a href=\"material\/InkResponse\/highlightShape.html\">highlightShape<\/a>. If it is a <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, the\ndefault, then the highlight is a circle of fixed size centered in the\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a>. If it is <a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>, then the highlight is a box\nthe size of the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> itself, unless <a href=\"material\/InkResponse\/getRectCallback.html\">getRectCallback<\/a> is\nprovided, in which case that callback defines the rectangle. The color of\nthe highlight is set by <a href=\"material\/InkResponse\/highlightColor.html\">highlightColor<\/a>.<\/p>\n<\/li>\n<li>\n<p>Simultaneously, it starts to animate a <em>splash<\/em>. This is a growing circle\ninitially centered on the tap location. If this is a <a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a>,\nthe splash grows to the <a href=\"material\/InkResponse\/radius.html\">radius<\/a> while remaining centered at the tap\nlocation. Otherwise, the splash migrates to the center of the box as it\ngrows.<\/p>\n<\/li>\n<\/ul>\n<p>The following two diagrams show how <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> looks when tapped if the\n<a href=\"material\/InkResponse\/highlightShape.html\">highlightShape<\/a> is <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a> (the default) and <a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a>\nis false (also the default).<\/p>\n<p>The first diagram shows how it looks if the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> is relatively\nlarge:<\/p>\n<p><img alt=\"The highlight is a disc centered in the box, smaller than the child widget.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/material\/ink_response_large.png\"><\/p>\n<p>The second diagram shows how it looks if the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> is small:<\/p>\n<p><img alt=\"The highlight is a disc overflowing the box, centered on the child.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/material\/ink_response_small.png\"><\/p>\n<p>The main thing to notice from these diagrams is that the splashes happily\nexceed the bounds of the widget (because <a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a> is false).<\/p>\n<p>The following diagram shows the effect when the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> has a\n<a href=\"material\/InkResponse\/highlightShape.html\">highlightShape<\/a> of <a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a> with <a href=\"material\/InkResponse\/containedInkWell.html\">containedInkWell<\/a> set to\ntrue. These are the values used by <a href=\"material\/InkWell-class.html\">InkWell<\/a>.<\/p>\n<p><img alt=\"The highlight is a rectangle the size of the box.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/material\/ink_well.png\"><\/p>\n<p>The <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> widget must have a <a href=\"material\/Material-class.html\">Material<\/a> widget as an ancestor. The\n<a href=\"material\/Material-class.html\">Material<\/a> widget is where the ink reactions are actually painted. This\nmatches the material design premise wherein the <a href=\"material\/Material-class.html\">Material<\/a> is what is\nactually reacting to touches by spreading ink.<\/p>\n<p>If a Widget uses this class directly, it should include the following line\nat the top of its build function to call <a href=\"material\/debugCheckHasMaterial.html\">debugCheckHasMaterial<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(debugCheckHasMaterial(context));\n<\/code><\/pre>\n<h2 id=\"troubleshooting\">Troubleshooting<\/h2>\n<h3 id=\"the-ink-splashes-arent-visible\">The ink splashes aren't visible!<\/h3>\n<p>If there is an opaque graphic, e.g. painted using a <a href=\"widgets\/Container-class.html\">Container<\/a>, <a href=\"widgets\/Image-class.html\">Image<\/a>, or\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a>, between the <a href=\"material\/Material-class.html\">Material<\/a> widget and the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> widget,\nthen the splash won't be visible because it will be under the opaque graphic.\nThis is because ink splashes draw on the underlying <a href=\"material\/Material-class.html\">Material<\/a> itself, as\nif the ink was spreading inside the material.<\/p>\n<p>The <a href=\"material\/Ink-class.html\">Ink<\/a> widget can be used as a replacement for <a href=\"widgets\/Image-class.html\">Image<\/a>, <a href=\"widgets\/Container-class.html\">Container<\/a>, or\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> to ensure that the image or decoration also paints in the\n<a href=\"material\/Material-class.html\">Material<\/a> itself, below the ink.<\/p>\n<p>If this is not possible for some reason, e.g. because you are using an\nopaque <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> widget, alternatively consider using a second\n<a href=\"material\/Material-class.html\">Material<\/a> above the opaque widget but below the <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> (as an\nancestor to the ink response). The <a href=\"material\/MaterialType-class.html\">MaterialType.transparency<\/a> material\nkind can be used for this purpose.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, for listening for gestures without ink splashes.<\/li>\n<li>\n<a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a> and <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>, two kinds of buttons in material design.<\/li>\n<li>\n<a href=\"material\/IconButton-class.html\">IconButton<\/a>, which combines <a href=\"material\/InkResponse-class.html\">InkResponse<\/a> with an <a href=\"widgets\/Icon-class.html\">Icon<\/a>.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "InkResponse"
}