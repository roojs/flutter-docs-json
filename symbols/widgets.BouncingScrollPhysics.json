{
    "desc": "<p>Scroll physics for environments that allow the scroll offset to go beyond\nthe bounds of the content, but then bounce the content back to the edge of\nthose bounds.<\/p>\n<p>This is the behavior typically seen on iOS.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ScrollConfiguration-class.html\">ScrollConfiguration<\/a>, which uses this to provide the default\nscroll behavior on iOS.<\/li>\n<li>\n<a href=\"widgets\/ClampingScrollPhysics-class.html\">ClampingScrollPhysics<\/a>, which is the analogous physics for Android's\nclamping behavior.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "widgets\/BouncingScrollPhysics-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.BouncingScrollPhysics",
    "shortname": "BouncingScrollPhysics",
    "extends": [
        "widgets.ScrollPhysics",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates scroll physics that bounce back from the edge.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BouncingScrollPhysics({ ScrollPhysics parent }) : super(parent: parent);<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/BouncingScrollPhysics.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "parent",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Determines the overscroll by applying the boundary conditions.<\/p>\n<p>Called by <a href=\"widgets\/BouncingScrollPhysics\/applyBoundaryConditions.html\">ScrollPosition.applyBoundaryConditions<\/a>, which is called by\n<a href=\"widgets\/ScrollPosition\/setPixels.html\">ScrollPosition.setPixels<\/a> just before the <a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a> value\nis updated, to determine how much of the offset is to be clamped off and\nsent to <a href=\"widgets\/ScrollPosition\/didOverscrollBy.html\">ScrollPosition.didOverscrollBy<\/a>.<\/p>\n<p>The <code>value<\/code> argument is guaranteed to not equal the <a href=\"widgets\/ScrollMetrics\/pixels.html\">ScrollMetrics.pixels<\/a>\nof the <code>position<\/code> argument when this is called.<\/p>\n<p>It is possible for this method to be called when the <code>position<\/code> describes\nan already-out-of-bounds position. In that case, the boundary conditions\nshould usually only prevent a further increase in the extent to which the\nposition is out of bounds, allowing a decrease to be applied successfully,\nso that (for instance) an animation can smoothly snap an out of bounds\nposition to the bounds. See <a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a>.<\/p>\n<p>This method must not clamp parts of the offset that are entirely within\nthe bounds described by the given <code>position<\/code>.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<p><a href=\"widgets\/BouncingScrollPhysics-class.html\">BouncingScrollPhysics<\/a> returns zero. In other words, it allows scrolling\npast the boundary unhindered.<\/p>\n<p><a href=\"widgets\/ClampingScrollPhysics-class.html\">ClampingScrollPhysics<\/a> returns the amount by which the value is beyond\nthe position or the boundary, whichever is furthest from the content. In\nother words, it disallows scrolling past the boundary, but allows\nscrolling back from being overscrolled, if for some reason the position\nends up overscrolled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble applyBoundaryConditions(ScrollMetrics position, double value) =&gt; 0.0;<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/applyBoundaryConditions.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Used by <a href=\"widgets\/DragScrollActivity-class.html\">DragScrollActivity<\/a> and other user-driven activities to convert\nan offset in logical pixels as provided by the <a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a> into a\ndelta to apply (subtract from the current position) using\n<a href=\"widgets\/ScrollActivityDelegate\/setPixels.html\">ScrollActivityDelegate.setPixels<\/a>.<\/p>\n<p>This is used by some <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> subclasses to apply friction during\noverscroll situations.<\/p>\n<p>This method must not adjust parts of the offset that are entirely within\nthe bounds described by the given <code>position<\/code>.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble applyPhysicsToUserOffset(ScrollMetrics position, double offset) {\n  assert(offset != 0.0);\n  assert(position.minScrollExtent &lt;= position.maxScrollExtent);\n\n  if (!position.outOfRange)\n    return offset;\n\n  final double overscrollPastStart = math.max(position.minScrollExtent - position.pixels, 0.0);\n  final double overscrollPastEnd = math.max(position.pixels - position.maxScrollExtent, 0.0);\n  final double overscrollPast = math.max(overscrollPastStart, overscrollPastEnd);\n  final bool easing = (overscrollPastStart &gt; 0.0 &amp;&amp; offset &lt; 0.0)\n      || (overscrollPastEnd &gt; 0.0 &amp;&amp; offset &gt; 0.0);\n\n  final double friction = easing\n      \/\/ Apply less resistance when easing the overscroll vs tensioning.\n      ? frictionFactor((overscrollPast - offset.abs()) \/ position.viewportDimension)\n      : frictionFactor(overscrollPast \/ position.viewportDimension);\n  final double direction = offset.sign;\n\n  return direction * _applyFriction(overscrollPast, offset.abs(), friction);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/applyPhysicsToUserOffset.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                }
            ]
        },
        {
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> where the <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> has been replaced with the <code>ancestor<\/code>.<\/p>\n<p>If this scroll physics object already has a parent, then this method\nis applied recursively and ancestor will appear at the end of the\nexisting chain of parents.<\/p>\n<p>The returned object will combine some of the behaviors from this\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> instance and some of the behaviors from <code>ancestor<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPhysics\/buildParent.html\">buildParent<\/a>, a utility method that's often used to define <a href=\"widgets\/BouncingScrollPhysics\/applyTo.html\">applyTo<\/a>\nmethods for ScrollPhysics subclasses.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBouncingScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return BouncingScrollPhysics(parent: buildParent(ancestor));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/applyTo.html",
            "isDeprecated": "0",
            "type": "widgets.BouncingScrollPhysics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "ancestor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Momentum build-up function that mimics iOS's scroll speed increase with repeated flings.<\/p>\n<p>The velocity of the last fling is not an important factor. Existing speed\nand (related) time since last fling are factors for the velocity transfer\ncalculations.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble carriedMomentum(double existingVelocity) {\n  return existingVelocity.sign *\n      math.min(0.000816 * math.pow(existingVelocity.abs(), 1.967).toDouble(), 40000.0);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/carriedMomentum.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "existingVelocity",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a simulation for ballistic scrolling starting from the given\nposition with the given velocity.<\/p>\n<p>This is used by <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> in the\n<a href=\"widgets\/ScrollPositionWithSingleContext\/goBallistic.html\">ScrollPositionWithSingleContext.goBallistic<\/a> method. If the result\nis non-null, <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> will begin a\n<a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a> with the returned value. Otherwise, it will\nbegin an idle activity instead.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSimulation createBallisticSimulation(ScrollMetrics position, double velocity) {\n  final Tolerance tolerance = this.tolerance;\n  if (velocity.abs() &gt;= tolerance.velocity || position.outOfRange) {\n    return BouncingScrollSimulation(\n      spring: spring,\n      position: position.pixels,\n      velocity: velocity * 0.91, \/\/ TODO(abarth): We should move this constant closer to the drag end.\n      leadingExtent: position.minScrollExtent,\n      trailingExtent: position.maxScrollExtent,\n      tolerance: tolerance,\n    );\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/createBallisticSimulation.html",
            "isDeprecated": "0",
            "type": "physics.Simulation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                },
                {
                    "name": "velocity",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>The multiple applied to overscroll to make it appear that scrolling past\nthe edge of the scrollable contents is harder than scrolling the list.\nThis is done by reducing the ratio of the scroll effect output vs the\nscroll gesture input.<\/p>\n<p>This factor starts at 0.52 and progressively becomes harder to overscroll\nas more of the area past the edge is dragged in (represented by an increasing\n<code>overscrollFraction<\/code> which starts at 0 when there is no overscroll).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double frictionFactor(double overscrollFraction) =&gt; 0.52 * math.pow(1 - overscrollFraction, 2);<\/code><\/pre>\n    ",
            "href": "widgets\/BouncingScrollPhysics\/frictionFactor.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": [
                {
                    "name": "overscrollFraction",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The minimum amount of pixel distance drags must move by to start motion\nthe first time or after each time the drag motion stopped.<\/p>\n<p>If null, no minimum threshold is enforced.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get dragStartDistanceMotionThreshold =&gt; 3.5;<\/code><\/pre>\n        ",
            "href": "widgets\/BouncingScrollPhysics\/dragStartDistanceMotionThreshold.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": []
        },
        {
            "desc": "<p>The minimum velocity for an input pointer drag to be considered a\nscroll fling.<\/p>\n<p>This value is typically compared with the magnitude of fling gesture's\nvelocity along the scrolling axis.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/VelocityTracker\/getVelocityEstimate.html\">VelocityTracker.getVelocityEstimate<\/a>, which computes the velocity\nof a press-drag-release gesture.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get minFlingVelocity =&gt; kMinFlingVelocity * 2.0;<\/code><\/pre>\n        ",
            "href": "widgets\/BouncingScrollPhysics\/minFlingVelocity.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.BouncingScrollPhysics",
            "params": []
        }
    ]
}