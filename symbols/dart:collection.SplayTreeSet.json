{
    "desc": "<p>A <a href=\"dart-core\/Set-class.html\">Set<\/a> of objects that can be ordered relative to each other.<\/p>\n<p>The set is based on a self-balancing binary tree. It allows most operations\nin amortized logarithmic time.<\/p>\n<p>Elements of the set are compared using the <code>compare<\/code> function passed in\nthe constructor, both for ordering and for equality.\nIf the set contains only an object <code>a<\/code>, then <code>set.contains(b)<\/code>\nwill return <code>true<\/code> if and only if <code>compare(a, b) == 0<\/code>,\nand the value of <code>a == b<\/code> is not even checked.\nIf the compare function is omitted, the objects are assumed to be\n<a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and are compared using their <a href=\"dart-core\/Comparable\/compareTo.html\">Comparable.compareTo<\/a> method.\nNon-comparable objects (including <code>null<\/code>) will not work as an element\nin that case.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-collection\/SplayTreeSet-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:collection",
    "name": "dart:collection.SplayTreeSet",
    "shortname": "SplayTreeSet",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a new <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a> with the given compare function.<\/p>\n<p>If the <code>compare<\/code> function is omitted, it defaults to <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a>,\nand the elements must be comparable.<\/p>\n<p>A provided <code>compare<\/code> function may not work on all objects. It may not even\nwork on all <code>E<\/code> instances.<\/p>\n<p>For operations that add elements to the set, the user is supposed to not\npass in objects that doesn't work with the compare function.<\/p>\n<p>The methods <a href=\"dart-collection\/SplayTreeSet\/contains.html\">contains<\/a>, <a href=\"dart-collection\/SplayTreeSet\/remove.html\">remove<\/a>, <a href=\"dart-collection\/SplayTreeSet\/lookup.html\">lookup<\/a>, <a href=\"dart-collection\/SplayTreeSet\/removeAll.html\">removeAll<\/a> or <a href=\"dart-collection\/SplayTreeSet\/retainAll.html\">retainAll<\/a>\nare typed to accept any object(s), and the <code>isValidKey<\/code> test can used to\nfilter those objects before handing them to the <code>compare<\/code> function.<\/p>\n<p>If <code>isValidKey<\/code> is provided, only values satisfying <code>isValidKey(other)<\/code>\nare compared using the <code>compare<\/code> method in the methods mentioned above.\nIf the <code>isValidKey<\/code> function returns false for an object, it is assumed to\nnot be in the set.<\/p>\n<p>If omitted, the <code>isValidKey<\/code> function defaults to checking against the\ntype parameter: <code>other is E<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SplayTreeSet([int compare(E key1, E key2), bool isValidKey(potentialKey)])\n    : _comparator = compare ?? _defaultCompare&lt;E&gt;(),\n      _validKey = isValidKey ?? ((v) =&gt; v is E);<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/SplayTreeSet.html",
            "isDeprecated": "0",
            "type": "",
            "name": "SplayTreeSet",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "key1",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<E>"
                },
                {
                    "name": "key2",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<E>"
                },
                {
                    "name": "potentialKey",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E element) {\n  int compare = _splay(element);\n  if (compare == 0) return false;\n  _addNewRoot(_SplayTreeNode(element), compare);\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/add.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"dart-collection\/SplayTreeSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  for (E element in elements) {\n    int compare = _splay(element);\n    if (compare != 0) {\n      _addNewRoot(_SplayTreeNode(element), compare);\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/addAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "addAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "elements",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-collection\/SetMixin\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;R&gt; cast&lt;R&gt;() =&gt; Set.castFrom&lt;E, R&gt;(this, newSet: _newSet);<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/cast.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "name": "cast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Removes all elements in the set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _clear();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/clear.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "clear",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  return _validKey(element) &amp;&amp; _splay(element) == 0;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/contains.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "contains",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) {\n  Set&lt;E&gt; result = SplayTreeSet&lt;E&gt;(_comparator, _validKey);\n  for (E element in this) {\n    if (!other.contains(element)) result.add(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/difference.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "name": "difference",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Set<dart:core.Object>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) {\n  Set&lt;E&gt; result = SplayTreeSet&lt;E&gt;(_comparator, _validKey);\n  for (E element in this) {\n    if (other.contains(element)) result.add(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/intersection.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "name": "intersection",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Set<dart:core.Object>"
                }
            ]
        },
        {
            "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"dart-collection\/SplayTreeSet\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"dart-collection\/SplayTreeSet\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object object) {\n  if (!_validKey(object)) return null;\n  int comp = _splay(object);\n  if (comp != 0) return null;\n  return _root.key;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/lookup.html",
            "isDeprecated": "0",
            "type": "<E>",
            "name": "lookup",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "object",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object object) {\n  if (!_validKey(object)) return false;\n  return _remove(object) != null;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/remove.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "object",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) {\n  for (Object element in elements) {\n    if (_validKey(element)) _remove(element);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/removeAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "removeAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "elements",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.Object>"
                }
            ]
        },
        {
            "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  \/\/ Build a set with the same sense of equality as this set.\n  SplayTreeSet&lt;E&gt; retainSet = SplayTreeSet&lt;E&gt;(_comparator, _validKey);\n  int modificationCount = _modificationCount;\n  for (Object object in elements) {\n    if (modificationCount != _modificationCount) {\n      \/\/ The iterator should not have side effects.\n      throw ConcurrentModificationError(this);\n    }\n    \/\/ Equivalent to this.contains(object).\n    if (_validKey(object) &amp;&amp; _splay(object) == 0) {\n      retainSet.add(_root.key);\n    }\n  }\n  \/\/ Take over the elements from the retained set, if it differs.\n  if (retainSet._count != _count) {\n    _root = retainSet._root;\n    _count = retainSet._count;\n    _modificationCount++;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/retainAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "retainAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "elements",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.Object>"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; _clone();<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/toSet.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "name": "toSet",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '{', '}');<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) {\n  return _clone()..addAll(other);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeSet\/union.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "name": "union",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeSet",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Set"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _root == null;<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeSet\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _root != null;<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeSet\/isNotEmpty.html",
            "name": "isNotEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _SplayTreeKeyIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeSet\/iterator.html",
            "name": "iterator",
            "isDeprecated": false,
            "type": "dart:core.Iterator",
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/SplayTreeSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _count;<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeSet\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:collection.SplayTreeSet",
            "params": []
        }
    ]
}