{
    "name": "widgets.AnimatedBuilder",
    "extends": [
        "widgets.AnimatedWidget",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "AnimatedBuilder",
            "type": "",
            "desc": "<p>Creates an animated builder.<\/p>\n<p>The <code>animation<\/code> and <code>builder<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AnimatedBuilder",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "animation",
                    "type": "foundation.Listenable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "builder",
                    "type": "widgets.TransitionBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/AnimatedBuilder\/AnimatedBuilder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnimatedBuilder({\n  Key key,\n  @required Listenable animation,\n  @required this.builder,\n  this.child,\n}) : assert(animation != null),\n     assert(builder != null),\n     super(key: key, listenable: animation);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to build widgets that depend on the state of the\nlistenable (e.g., the current value of the animation).<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AnimatedBuilder",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/AnimatedBuilder\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return builder(context, child);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "builder",
            "type": "widgets.TransitionBuilder",
            "types": [],
            "desc": "<p>Called every time the animation changes value.<\/p>\n        ",
            "memberOf": "widgets.AnimatedBuilder",
            "isConstant": false,
            "href": "widgets\/AnimatedBuilder\/builder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TransitionBuilder builder\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The child widget to pass to the <a href=\"widgets\/AnimatedBuilder\/builder.html\">builder<\/a>.<\/p>\n<p>If a <a href=\"widgets\/AnimatedBuilder\/builder.html\">builder<\/a> callback's return value contains a subtree that does not\ndepend on the animation, it's more efficient to build that subtree once\ninstead of rebuilding it on every animation tick.<\/p>\n<p>If the pre-built subtree is passed as the <a href=\"widgets\/AnimatedBuilder\/child.html\">child<\/a> parameter, the\n<a href=\"widgets\/AnimatedBuilder-class.html\">AnimatedBuilder<\/a> will pass it back to the <a href=\"widgets\/AnimatedBuilder\/builder.html\">builder<\/a> function so that it\ncan be incorporated into the build.<\/p>\n<p>Using this pre-built child is entirely optional, but can improve\nperformance significantly in some cases and is therefore a good practice.<\/p>\n        ",
            "memberOf": "widgets.AnimatedBuilder",
            "isConstant": false,
            "href": "widgets\/AnimatedBuilder\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/AnimatedBuilder-class.html",
    "desc": "<p>A general-purpose widget for building animations.<\/p>\n<p>AnimatedBuilder is useful for more complex widgets that wish to include\nan animation as part of a larger build function. To use AnimatedBuilder,\nsimply construct the widget and pass it a builder function.<\/p>\n<p>For simple cases without additional state, consider using\n<a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a>.<\/p>\n<h2 id=\"performance-optimizations\">Performance optimizations<\/h2>\n<p>If your <a href=\"widgets\/AnimatedBuilder\/builder.html\">builder<\/a> function contains a subtree that does not depend on the\nanimation, it's more efficient to build that subtree once instead of\nrebuilding it on every animation tick.<\/p>\n<p>If you pass the pre-built subtree as the <a href=\"widgets\/AnimatedBuilder\/child.html\">child<\/a> parameter, the\nAnimatedBuilder will pass it back to your builder function so that you\ncan incorporate it into your build.<\/p>\n<p>Using this pre-built child is entirely optional, but can improve\nperformance significantly in some cases and is therefore a good practice.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis code defines a widget called <code>Spinner<\/code> that spins a green square\ncontinually. It is built with an <a href=\"widgets\/AnimatedBuilder-class.html\">AnimatedBuilder<\/a> and makes use of the\n<a href=\"widgets\/AnimatedBuilder\/child.html\">child<\/a> feature to avoid having to rebuild the <a href=\"widgets\/Container-class.html\">Container<\/a> each time.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Spinner extends StatefulWidget {\n  @override\n  _SpinnerState createState() =&gt; _SpinnerState();\n}\n\nclass _SpinnerState extends State&lt;Spinner&gt; with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      duration: const Duration(seconds: 10),\n      vsync: this,\n    )..repeat();\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _controller,\n      child: Container(width: 200.0, height: 200.0, color: Colors.green),\n      builder: (BuildContext context, Widget child) {\n        return Transform.rotate(\n          angle: _controller.value * 2.0 * math.pi,\n          child: child,\n        );\n      },\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AnimatedBuilder"
}