{
    "desc": "<p>A render object that is bigger on the inside and shrink wraps its children\nin the main axis.<\/p>\n<p><a href=\"rendering\/RenderShrinkWrappingViewport-class.html\">RenderShrinkWrappingViewport<\/a> displays a subset of its children according\nto its own dimensions and the given <a href=\"rendering\/RenderViewportBase\/offset.html\">offset<\/a>. As the offset varies, different\nchildren are visible through the viewport.<\/p>\n<p><a href=\"rendering\/RenderShrinkWrappingViewport-class.html\">RenderShrinkWrappingViewport<\/a> differs from <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a> in that\n<a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a> expands to fill the main axis whereas\n<a href=\"rendering\/RenderShrinkWrappingViewport-class.html\">RenderShrinkWrappingViewport<\/a> sizes itself to match its children in the\nmain axis. This shrink wrapping behavior is expensive because the children,\nand hence the viewport, could potentially change size whenever the <a href=\"rendering\/RenderViewportBase\/offset.html\">offset<\/a>\nchanges (e.g., because of a collapsing header).<\/p>\n<p><a href=\"rendering\/RenderShrinkWrappingViewport-class.html\">RenderShrinkWrappingViewport<\/a> cannot contain <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> children directly.\nInstead, use a <a href=\"rendering\/RenderSliverList-class.html\">RenderSliverList<\/a>, <a href=\"rendering\/RenderSliverFixedExtentList-class.html\">RenderSliverFixedExtentList<\/a>,\n<a href=\"rendering\/RenderSliverGrid-class.html\">RenderSliverGrid<\/a>, or a <a href=\"rendering\/RenderSliverToBoxAdapter-class.html\">RenderSliverToBoxAdapter<\/a>, for example.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a>, a viewport that does not shrink-wrap its contents.<\/li>\n<li>\n<a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>, which explains more about the Sliver protocol.<\/li>\n<li>\n<a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>, which explains more about the Box protocol.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverToBoxAdapter-class.html\">RenderSliverToBoxAdapter<\/a>, which allows a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> object to be\nplaced inside a <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> (the opposite of this class).<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderShrinkWrappingViewport-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderShrinkWrappingViewport",
    "shortname": "RenderShrinkWrappingViewport",
    "extends": [
        "rendering.SliverLogicalContainerParentData",
        "rendering.RenderViewportBase",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a viewport (for <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> objects) that shrink-wraps its\ncontents.<\/p>\n<p>The <code>offset<\/code> must be specified. For testing purposes, consider passing a\n<a href=\"rendering\/ViewportOffset\/ViewportOffset.zero.html\">new ViewportOffset.zero<\/a> or <a href=\"rendering\/ViewportOffset\/ViewportOffset.fixed.html\">new ViewportOffset.fixed<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderShrinkWrappingViewport({\n  AxisDirection axisDirection = AxisDirection.down,\n  @required AxisDirection crossAxisDirection,\n  @required ViewportOffset offset,\n  List&lt;RenderSliver&gt; children,\n}) : super(axisDirection: axisDirection, crossAxisDirection: crossAxisDirection, offset: offset) {\n  addAll(children);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/RenderShrinkWrappingViewport.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "axisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<rendering.RenderSliver>"
                },
                {
                    "name": "crossAxisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.ViewportOffset"
                }
            ]
        },
        {
            "desc": "<p>Multiply the transform from the parent's coordinate system to this box's\ncoordinate system into the given transform.<\/p>\n<p>This function is used to convert coordinate systems between boxes.\nSubclasses that apply transforms during painting should override this\nfunction to factor those transforms into the calculation.<\/p>\n<p>The <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> implementation takes care of adjusting the matrix for the\nposition of the given child as determined during layout and stored on the\nchild's <a href=\"rendering\/RenderObject\/parentData.html\">parentData<\/a> in the <a href=\"rendering\/RenderViewportBase\/offset.html\">BoxParentData.offset<\/a> field.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid applyPaintTransform(RenderObject child, Matrix4 transform) {\n  assert(child != null);\n  final Offset offset = paintOffsetOf(child);\n  transform.translate(offset.dx, offset.dy);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/applyPaintTransform.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "transform",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Converts the <code>parentMainAxisPosition<\/code> into the child's coordinate system.<\/p>\n<p>The <code>parentMainAxisPosition<\/code> is a distance from the top edge (for vertical\nviewports) or left edge (for horizontal viewports) of the viewport bounds.\nThis describes a line, perpendicular to the viewport's main axis, heretofor\nknown as the target line.<\/p>\n<p>The child's coordinate system's origin in the main axis is at the leading\nedge of the given child, as given by the child's\n<a href=\"rendering\/RenderViewportBase\/axisDirection.html\">SliverConstraints.axisDirection<\/a> and <a href=\"rendering\/SliverConstraints\/growthDirection.html\">SliverConstraints.growthDirection<\/a>.<\/p>\n<p>This method returns the distance from the leading edge of the given child to\nthe target line described above.<\/p>\n<p>(The <code>parentMainAxisPosition<\/code> is not from the leading edge of the\nviewport, it's always the top or left edge.)<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeChildMainAxisPosition(RenderSliver child, double parentMainAxisPosition) {\n  assert(child != null);\n  assert(child.constraints != null);\n  assert(hasSize);\n  final SliverLogicalParentData childParentData = child.parentData;\n  switch (applyGrowthDirectionToAxisDirection(child.constraints.axisDirection, child.constraints.growthDirection)) {\n    case AxisDirection.down:\n    case AxisDirection.right:\n      return parentMainAxisPosition - childParentData.layoutOffset;\n    case AxisDirection.up:\n      return (size.height - parentMainAxisPosition) - childParentData.layoutOffset;\n    case AxisDirection.left:\n      return (size.width - parentMainAxisPosition) - childParentData.layoutOffset;\n  }\n  return 0.0;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/computeChildMainAxisPosition.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                },
                {
                    "name": "parentMainAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Throws an exception saying that the object does not support returning\nintrinsic dimensions if, in checked mode, we are not in the\n<a href=\"rendering\/RenderObject\/debugCheckingIntrinsics.html\">RenderObject.debugCheckingIntrinsics<\/a> mode.<\/p>\n<p>This is used by <a href=\"rendering\/RenderViewportBase\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> et al because viewports do not\ngenerally support returning intrinsic dimensions. See the discussion at\n<a href=\"rendering\/RenderViewportBase\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool debugThrowIfNotCheckingIntrinsics() {\n  assert(() {\n    if (!RenderObject.debugCheckingIntrinsics) {\n      throw FlutterError(\n        '$runtimeType does not support returning intrinsic dimensions.\\n'\n        'Calculating the intrinsic dimensions would require instantiating every child of '\n        'the viewport, which defeats the point of viewports being lazy.\\n'\n        'If you are merely trying to shrink-wrap the viewport in the main axis direction, '\n        'you should be able to achieve that effect by just giving the viewport loose '\n        'constraints, without needing to measure its intrinsic dimensions.'\n      );\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/debugThrowIfNotCheckingIntrinsics.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": []
        },
        {
            "desc": "<p>A short string to identify the child with the given index.<\/p>\n<p>Used by <a href=\"rendering\/RenderViewportBase\/debugDescribeChildren.html\">debugDescribeChildren<\/a> to label the children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString labelForChild(int index) =&gt; 'child $index';<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/labelForChild.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the total scroll obstruction extent of all slivers in the viewport\nbefore <code>child<\/code>.<\/p>\n<p>This is the extent by which the actual area in which content can scroll\nis reduced. For example, an app bar that is pinned at the top will reduce\nthe area in which content can actually scroll by the height of the app bar.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble maxScrollObstructionExtentBefore(RenderSliver child) {\n  assert(child.parent == this);\n  assert(child.constraints.growthDirection == GrowthDirection.forward);\n  double pinnedExtent = 0.0;\n  RenderSliver current = firstChild;\n  while (current != child) {\n    pinnedExtent += current.geometry.maxScrollObstructionExtent;\n    current = childAfter(current);\n  }\n  return pinnedExtent;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/maxScrollObstructionExtentBefore.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                }
            ]
        },
        {
            "desc": "<p>The offset at which the given <code>child<\/code> should be painted.<\/p>\n<p>The returned offset is from the top left corner of the inside of the\nviewport to the top left corner of the paint coordinate system of the\n<code>child<\/code>.<\/p>\n<p>See also <a href=\"rendering\/RenderViewportBase\/computeAbsolutePaintOffset.html\">computeAbsolutePaintOffset<\/a>, which computes the paint offset\nfrom an explicit layout offset and growth direction instead of using the\nvalues computed for the child during layout.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nOffset paintOffsetOf(RenderSliver child) {\n  final SliverLogicalParentData childParentData = child.parentData;\n  return computeAbsolutePaintOffset(child, childParentData.layoutOffset, GrowthDirection.forward);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/paintOffsetOf.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  if (firstChild == null) {\n    switch (axis) {\n      case Axis.vertical:\n        assert(constraints.hasBoundedWidth);\n        size = Size(constraints.maxWidth, constraints.minHeight);\n        break;\n      case Axis.horizontal:\n        assert(constraints.hasBoundedHeight);\n        size = Size(constraints.minWidth, constraints.maxHeight);\n        break;\n    }\n    offset.applyViewportDimension(0.0);\n    _maxScrollExtent = 0.0;\n    _shrinkWrapExtent = 0.0;\n    _hasVisualOverflow = false;\n    offset.applyContentDimensions(0.0, 0.0);\n    return;\n  }\n\n  double mainAxisExtent;\n  double crossAxisExtent;\n  switch (axis) {\n    case Axis.vertical:\n      assert(constraints.hasBoundedWidth);\n      mainAxisExtent = constraints.maxHeight;\n      crossAxisExtent = constraints.maxWidth;\n      break;\n    case Axis.horizontal:\n      assert(constraints.hasBoundedHeight);\n      mainAxisExtent = constraints.maxWidth;\n      crossAxisExtent = constraints.maxHeight;\n      break;\n  }\n\n  double correction;\n  double effectiveExtent;\n  do {\n    assert(offset.pixels != null);\n    correction = _attemptLayout(mainAxisExtent, crossAxisExtent, offset.pixels);\n    if (correction != 0.0) {\n      offset.correctBy(correction);\n    } else {\n      switch (axis) {\n        case Axis.vertical:\n          effectiveExtent = constraints.constrainHeight(_shrinkWrapExtent);\n          break;\n        case Axis.horizontal:\n          effectiveExtent = constraints.constrainWidth(_shrinkWrapExtent);\n          break;\n      }\n      final bool didAcceptViewportDimension = offset.applyViewportDimension(effectiveExtent);\n      final bool didAcceptContentDimension = offset.applyContentDimensions(0.0, math.max(0.0, _maxScrollExtent - effectiveExtent));\n      if (didAcceptViewportDimension &amp;&amp; didAcceptContentDimension)\n        break;\n    }\n  } while (true);\n  switch (axis) {\n    case Axis.vertical:\n      size = constraints.constrainDimensions(crossAxisExtent, effectiveExtent);\n      break;\n    case Axis.horizontal:\n      size = constraints.constrainDimensions(effectiveExtent, crossAxisExtent);\n      break;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/performLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": []
        },
        {
            "desc": "<p>Returns the scroll offset within the viewport for the given\n<code>scrollOffsetWithinChild<\/code> within the given <code>child<\/code>.<\/p>\n<p>The returned value is an estimate that assumes the slivers within the\nviewport do not change the layout extent in response to changes in their\nscroll offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble scrollOffsetOf(RenderSliver child, double scrollOffsetWithinChild) {\n  assert(child.parent == this);\n  assert(child.constraints.growthDirection == GrowthDirection.forward);\n  double scrollOffsetToChild = 0.0;\n  RenderSliver current = firstChild;\n  while (current != child) {\n    scrollOffsetToChild += current.geometry.scrollExtent;\n    current = childAfter(current);\n  }\n  return scrollOffsetToChild + scrollOffsetWithinChild;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/scrollOffsetOf.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                },
                {
                    "name": "scrollOffsetWithinChild",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Override to setup parent data correctly for your children.<\/p>\n<p>You can call this function to set up the parent data for child before the\nchild is added to the parent's child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderObject child) {\n  if (child.parentData is! SliverLogicalContainerParentData)\n    child.parentData = SliverLogicalContainerParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/setupParentData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Called during <a href=\"rendering\/RenderViewportBase\/layoutChildSequence.html\">layoutChildSequence<\/a> to store the layout offset for the\ngiven child.<\/p>\n<p>Different subclasses using different representations for their children's\nlayout offset (e.g., logical or physical coordinates). This function lets\nsubclasses transform the child's layout offset before storing it in the\nchild's parent data.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateChildLayoutOffset(RenderSliver child, double layoutOffset, GrowthDirection growthDirection) {\n  assert(growthDirection == GrowthDirection.forward);\n  final SliverLogicalParentData childParentData = child.parentData;\n  childParentData.layoutOffset = layoutOffset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/updateChildLayoutOffset.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                },
                {
                    "name": "growthDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.GrowthDirection"
                },
                {
                    "name": "layoutOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called during <a href=\"rendering\/RenderViewportBase\/layoutChildSequence.html\">layoutChildSequence<\/a> for each child.<\/p>\n<p>Typically used by subclasses to update any out-of-band data, such as the\nmax scroll extent, for each child.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateOutOfBandData(GrowthDirection growthDirection, SliverGeometry childLayoutGeometry) {\n  assert(growthDirection == GrowthDirection.forward);\n  _maxScrollExtent += childLayoutGeometry.scrollExtent;\n  if (childLayoutGeometry.hasVisualOverflow)\n    _hasVisualOverflow = true;\n  _shrinkWrapExtent += childLayoutGeometry.maxPaintExtent;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderShrinkWrappingViewport\/updateOutOfBandData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": [
                {
                    "name": "childLayoutGeometry",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SliverGeometry"
                },
                {
                    "name": "growthDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.GrowthDirection"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Provides an iterable that walks the children of the viewport, in the order\nthat hit-testing should use.<\/p>\n<p>This should be the reverse order of <a href=\"rendering\/RenderShrinkWrappingViewport\/childrenInPaintOrder.html\">childrenInPaintOrder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;RenderSliver&gt; get childrenInHitTestOrder sync* {\n  RenderSliver child = lastChild;\n  while (child != null) {\n    yield child;\n    child = childBefore(child);\n  }\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderShrinkWrappingViewport\/childrenInHitTestOrder.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<rendering.RenderSliver>",
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": []
        },
        {
            "desc": "<p>Provides an iterable that walks the children of the viewport, in the order\nthat they should be painted.<\/p>\n<p>This should be the reverse order of <a href=\"rendering\/RenderShrinkWrappingViewport\/childrenInHitTestOrder.html\">childrenInHitTestOrder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;RenderSliver&gt; get childrenInPaintOrder sync* {\n  RenderSliver child = firstChild;\n  while (child != null) {\n    yield child;\n    child = childAfter(child);\n  }\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderShrinkWrappingViewport\/childrenInPaintOrder.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<rendering.RenderSliver>",
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": []
        },
        {
            "desc": "<p>Whether the contents of this viewport would paint outside the bounds of\nthe viewport if <a href=\"rendering\/RenderViewportBase\/paint.html\">paint<\/a> did not clip.<\/p>\n<p>This property enables an optimization whereby <a href=\"rendering\/RenderViewportBase\/paint.html\">paint<\/a> can skip apply a\nclip of the contents of the viewport are known to paint entirely within\nthe bounds of the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get hasVisualOverflow =&gt; _hasVisualOverflow;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderShrinkWrappingViewport\/hasVisualOverflow.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": []
        },
        {
            "desc": "<p>The index of the first child of the viewport relative to the center child.<\/p>\n<p>For example, the center child has index zero and the first child in the\nreverse growth direction has index -1.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get indexOfFirstChild =&gt; 0;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderShrinkWrappingViewport\/indexOfFirstChild.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.RenderShrinkWrappingViewport",
            "params": []
        }
    ]
}