{
    "desc": "<p>Property with an <code>Iterable&lt;T&gt;<\/code> <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> that can be displayed with\ndifferent <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> for custom rendering.<\/p>\n<p>If <a href=\"foundation\/DiagnosticsNode\/style.html\">style<\/a> is <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.singleLine<\/a>, the iterable is described\nas a comma separated list, otherwise the iterable is described as a line\nbreak separated list.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "foundation\/IterableProperty-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "foundation",
    "name": "foundation.IterableProperty",
    "shortname": "IterableProperty",
    "extends": [
        "dart:core.Iterable",
        "foundation.DiagnosticsProperty",
        "foundation.DiagnosticsNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a diagnostics property for iterables (e.g. lists).<\/p>\n<p>The <code>ifEmpty<\/code> argument is used to indicate how an iterable <code>value<\/code> with 0\nelements is displayed. If <code>ifEmpty<\/code> equals null that indicates that an\nempty iterable <code>value<\/code> is not interesting to display similar to how\n<code>defaultValue<\/code> is used to indicate that a specific concrete value is not\ninteresting to display.<\/p>\n<p>The <code>style<\/code>, <code>showName<\/code>, and <code>level<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IterableProperty(\n  String name,\n  Iterable&lt;T&gt; value, {\n  Object defaultValue = kNoDefaultValue,\n  String ifNull,\n  String ifEmpty = '[]',\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,\n  bool showName = true,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(style != null),\n     assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  defaultValue: defaultValue,\n  ifNull: ifNull,\n  ifEmpty: ifEmpty,\n  style: style,\n  showName: showName,\n  level: level,\n);<\/code><\/pre>\n    ",
            "href": "foundation\/IterableProperty\/IterableProperty.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.IterableProperty",
            "params": [
                {
                    "name": "defaultValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "ifEmpty",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "ifNull",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "level",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.DiagnosticLevel"
                },
                {
                    "name": "name",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "showName",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "style",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.DiagnosticsTreeStyle"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (value != null) {\n    json['values'] = value.map&lt;String&gt;((T value) =&gt; value.toString()).toList();\n  }\n  return json;\n}<\/code><\/pre>\n    ",
            "href": "foundation\/IterableProperty\/toJsonMap.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.IterableProperty",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/IterableProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == null)\n    return value.toString();\n\n  if (value.isEmpty)\n    return ifEmpty ?? '[]';\n\n  if (parentConfiguration != null &amp;&amp; !parentConfiguration.lineBreakProperties) {\n    \/\/ Always display the value as a single line and enclose the iterable\n    \/\/ value in brackets to avoid ambiguity.\n    return '[${value.join(', ')}]';\n  }\n\n  return value.join(style == DiagnosticsTreeStyle.singleLine ? ', ' : '\\n');\n}<\/code><\/pre>\n    ",
            "href": "foundation\/IterableProperty\/valueToString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.IterableProperty",
            "params": [
                {
                    "name": "parentConfiguration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.TextTreeConfiguration"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>If <a href=\"foundation\/DiagnosticsProperty\/ifEmpty.html\">ifEmpty<\/a> is null and the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is an empty <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> then level\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> is returned in a similar way to how an\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> handles when <a href=\"foundation\/DiagnosticsProperty\/ifNull.html\">ifNull<\/a> is null and the <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is\nnull.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (ifEmpty == null &amp;&amp; value != null &amp;&amp; value.isEmpty &amp;&amp; super.level != DiagnosticLevel.hidden)\n    return DiagnosticLevel.fine;\n  return super.level;\n}<\/code><\/pre>\n        ",
            "href": "foundation\/IterableProperty\/level.html",
            "isDeprecated": "0",
            "type": "foundation.DiagnosticLevel",
            "memberOf": "foundation.IterableProperty",
            "params": []
        }
    ]
}