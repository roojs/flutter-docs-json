{
    "name": "stream_channel.MultiChannel",
    "extends": [],
    "memberOf": "stream_channel",
    "events": [],
    "methods": [
        {
            "name": "MultiChannel",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> that sends and receives messages over\n<code>inner<\/code>.<\/p>\n<p>The inner channel must take JSON-like objects.<\/p>\n    ",
            "static": false,
            "memberOf": "stream_channel.MultiChannel",
            "sig": "",
            "params": [
                {
                    "name": "inner",
                    "type": "stream_channel.StreamChannel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-stream_channel_stream_channel\/MultiChannel\/MultiChannel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory MultiChannel(StreamChannel&lt;dynamic&gt; inner) =&gt;\n    new _MultiChannel&lt;T&gt;(inner);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "virtualChannel",
            "type": "stream_channel.VirtualChannel",
            "desc": "<p>Creates a new virtual channel.<\/p>\n<p>If <code>id<\/code> is not passed, this creates a virtual channel from scratch. Before\nit's used, its <a href=\"package-stream_channel_stream_channel\/VirtualChannel\/id.html\">VirtualChannel.id<\/a> must be sent to the remote endpoint\nwhere <a href=\"package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html\">virtualChannel<\/a> should be called with that id.<\/p>\n<p>If <code>id<\/code> is passed, this creates a virtual channel corresponding to the\nchannel with that id on the remote channel.<\/p>\n<p>Throws an <a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> if a virtual channel already exists for <code>id<\/code>.\nThrows a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the underlying channel is closed.<\/p>\n    ",
            "static": false,
            "memberOf": "stream_channel.MultiChannel",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VirtualChannel&lt;T&gt; virtualChannel([int id]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "sink",
            "type": "dart:async.StreamSink",
            "types": [],
            "desc": "<p>The default output stream.<\/p>\n<p>This connects to the remote <a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">stream<\/a>. If this is closed, the remote\n<a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">stream<\/a> will close, but other virtual channels will remain open and new\nvirtual channels may be opened.<\/p>\n        ",
            "memberOf": "stream_channel.MultiChannel",
            "isConstant": false,
            "href": "package-stream_channel_stream_channel\/MultiChannel\/sink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamSink&lt;T&gt; get sink;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "stream",
            "type": "dart:async.Stream",
            "types": [],
            "desc": "<p>The default input stream.<\/p>\n<p>This connects to the remote <a href=\"package-stream_channel_stream_channel\/MultiChannel\/sink.html\">sink<\/a>.<\/p>\n        ",
            "memberOf": "stream_channel.MultiChannel",
            "isConstant": false,
            "href": "package-stream_channel_stream_channel\/MultiChannel\/stream.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-stream_channel_stream_channel\/MultiChannel-class.html",
    "desc": "<p>A class that multiplexes multiple virtual channels across a single\nunderlying transport layer.<\/p>\n<p>This should be connected to another <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> on the other end of the\nunderlying channel. It starts with a single default virtual channel,\naccessible via <a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">stream<\/a> and <a href=\"package-stream_channel_stream_channel\/MultiChannel\/sink.html\">sink<\/a>. Additional virtual channels can be\ncreated with <a href=\"package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html\">virtualChannel<\/a>.<\/p>\n<p>When a virtual channel is created by one endpoint, the other must connect to\nit before messages may be sent through it. The first endpoint passes its\n<a href=\"package-stream_channel_stream_channel\/VirtualChannel\/id.html\">VirtualChannel.id<\/a> to the second, which then creates a channel from that id\nalso using <a href=\"package-stream_channel_stream_channel\/MultiChannel\/virtualChannel.html\">virtualChannel<\/a>. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ First endpoint\nvar virtual = multiChannel.virtualChannel();\nmultiChannel.sink.add({\n  \"channel\": virtual.id\n});\n\n\/\/ Second endpoint\nmultiChannel.stream.listen((message) {\n  var virtual = multiChannel.virtualChannel(message[\"channel\"]);\n  \/\/ ...\n});\n<\/code><\/pre>\n<p>Sending errors across a <a href=\"package-stream_channel_stream_channel\/MultiChannel-class.html\">MultiChannel<\/a> is not supported. Any errors from the\nunderlying stream will be reported only via the default\n<a href=\"package-stream_channel_stream_channel\/MultiChannel\/stream.html\">MultiChannel.stream<\/a>.<\/p>\n<p>Each virtual channel may be closed individually. When all of them are\nclosed, the underlying <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> is closed automatically.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "MultiChannel"
}