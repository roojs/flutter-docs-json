{
    "desc": "<p>Searches a widget tree and returns nodes that match a particular\npattern.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "flutter_test\/Finder-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_test",
    "name": "flutter_test.Finder",
    "shortname": "Finder",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initializes a Finder. Used by subclasses to initialize the <code>skipOffstage<\/code>\nproperty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder({ this.skipOffstage = true });<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/Finder.html",
            "isDeprecated": false,
            "type": "",
            "name": "Finder",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": [
                {
                    "name": "skipOffstage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns all the elements in the given list that match this\nfinder's pattern.<\/p>\n<p>When implementing your own Finders that inherit directly from\n<a href=\"flutter_test\/Finder-class.html\">Finder<\/a>, this is the main method to override. If your finder\ncan efficiently be described just in terms of a predicate\nfunction, consider extending <a href=\"flutter_test\/MatchFinder-class.html\">MatchFinder<\/a> instead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; apply(Iterable&lt;Element&gt; candidates);<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/apply.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable<widgets.Element>",
            "name": "apply",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": [
                {
                    "name": "candidates",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<widgets.Element>"
                }
            ]
        },
        {
            "desc": "<p>Returns a variant of this finder that only matches the element at the\ngiven index matched by this finder.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder at(int index) =&gt; _IndexFinder(this, index);<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/at.html",
            "isDeprecated": false,
            "type": "flutter_test.Finder",
            "name": "at",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the current result. If <a href=\"flutter_test\/Finder\/precache.html\">precache<\/a> was called and returned true, this will\ncheaply return the result that was computed then. Otherwise, it creates a new\niterable to compute the answer.<\/p>\n<p>Calling this clears the cache from <a href=\"flutter_test\/Finder\/precache.html\">precache<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Element&gt; evaluate() {\n  final Iterable&lt;Element&gt; result = _cachedResult ?? apply(allCandidates);\n  _cachedResult = null;\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/evaluate.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable<widgets.Element>",
            "name": "evaluate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": []
        },
        {
            "desc": "<p>Returns a variant of this finder that only matches elements reachable by\na hit test.<\/p>\n<p>The <code>at<\/code> parameter specifies the location relative to the size of the\ntarget element where the hit test is performed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Finder hitTestable({ Alignment at = Alignment.center }) =&gt; _HitTestableFinder(this, at);<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/hitTestable.html",
            "isDeprecated": false,
            "type": "flutter_test.Finder",
            "name": "hitTestable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": [
                {
                    "name": "at",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Alignment"
                }
            ]
        },
        {
            "desc": "<p>Attempts to evaluate the finder. Returns whether any elements in the tree\nmatched the finder. If any did, then the result is cached and can be obtained\nfrom <a href=\"flutter_test\/Finder\/evaluate.html\">evaluate<\/a>.<\/p>\n<p>If this returns true, you must call <a href=\"flutter_test\/Finder\/evaluate.html\">evaluate<\/a> before you call <a href=\"flutter_test\/Finder\/precache.html\">precache<\/a> again.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool precache() {\n  assert(_cachedResult == null);\n  final Iterable&lt;Element&gt; result = apply(allCandidates);\n  if (result.isNotEmpty) {\n    _cachedResult = result;\n    return true;\n  }\n  _cachedResult = null;\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/precache.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "precache",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String additional = skipOffstage ? ' (ignoring offstage widgets)' : '';\n  final List&lt;Element&gt; widgets = evaluate().toList();\n  final int count = widgets.length;\n  if (count == 0)\n    return 'zero widgets with $description$additional';\n  if (count == 1)\n    return 'exactly one widget with $description$additional: ${widgets.single}';\n  if (count &lt; 4)\n    return '$count widgets with $description$additional: $widgets';\n  return '$count widgets with $description$additional: ${widgets[0]}, ${widgets[1]}, ${widgets[2]}, ...';\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/Finder\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.Finder",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns all the <a href=\"widgets\/Element-class.html\">Element<\/a>s that will be considered by this finder.<\/p>\n<p>See <a href=\"flutter_test\/collectAllElementsFrom.html\">collectAllElementsFrom<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nIterable&lt;Element&gt; get allCandidates {\n  return collectAllElementsFrom(\n    WidgetsBinding.instance.renderViewElement,\n    skipOffstage: skipOffstage,\n  );\n}<\/code><\/pre>\n        ",
            "href": "flutter_test\/Finder\/allCandidates.html",
            "name": "allCandidates",
            "isDeprecated": false,
            "type": "dart:core.Iterable<widgets.Element>",
            "memberOf": "flutter_test.Finder",
            "params": []
        },
        {
            "desc": "<p>Describes what the finder is looking for. The description should be\na brief English noun phrase describing the finder's pattern.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get description;<\/code><\/pre>\n        ",
            "href": "flutter_test\/Finder\/description.html",
            "name": "description",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "flutter_test.Finder",
            "params": []
        },
        {
            "desc": "<p>Returns a variant of this finder that only matches the first element\nmatched by this finder.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Finder get first =&gt; _FirstFinder(this);<\/code><\/pre>\n        ",
            "href": "flutter_test\/Finder\/first.html",
            "name": "first",
            "isDeprecated": false,
            "type": "flutter_test.Finder",
            "memberOf": "flutter_test.Finder",
            "params": []
        },
        {
            "desc": "<p>Returns a variant of this finder that only matches the last element\nmatched by this finder.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Finder get last =&gt; _LastFinder(this);<\/code><\/pre>\n        ",
            "href": "flutter_test\/Finder\/last.html",
            "name": "last",
            "isDeprecated": false,
            "type": "flutter_test.Finder",
            "memberOf": "flutter_test.Finder",
            "params": []
        },
        {
            "desc": "<p>Whether this finder skips nodes that are offstage.<\/p>\n<p>If this is true, then the elements are walked using\n<a href=\"widgets\/Element\/debugVisitOnstageChildren.html\">Element.debugVisitOnstageChildren<\/a>. This skips offstage children of\n<a href=\"widgets\/Offstage-class.html\">Offstage<\/a> widgets, as well as children of inactive <a href=\"widgets\/Route-class.html\">Route<\/a>s.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool skipOffstage\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/Finder\/skipOffstage.html",
            "name": "skipOffstage",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "flutter_test.Finder",
            "params": []
        }
    ]
}