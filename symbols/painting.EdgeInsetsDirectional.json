{
    "name": "painting.EdgeInsetsDirectional",
    "extends": [
        "painting.EdgeInsetsGeometry",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator %",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_modulo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator %(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start % other,\n    top % other,\n    end % other,\n    bottom % other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator *",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Scales the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object in each dimension by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator *(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start * other,\n    top * other,\n    end * other,\n    bottom * other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator +",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsDirectional operator +(EdgeInsetsDirectional other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start + other.start,\n    top + other.top,\n    end + other.end,\n    bottom + other.bottom,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator -",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsDirectional operator -(EdgeInsetsDirectional other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start - other.start,\n    top - other.top,\n    end - other.end,\n    bottom - other.bottom,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator \/",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Divides the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object in each dimension by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator \/(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start \/ other,\n    top \/ other,\n    end \/ other,\n    bottom \/ other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsDirectional\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry add(EdgeInsetsGeometry other) {\n  if (other is EdgeInsetsDirectional)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "EdgeInsetsDirectional.fromSTEB",
            "type": "",
            "desc": "<p>Creates insets from offsets from the start, top, end, and bottom.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/EdgeInsetsDirectional\/EdgeInsetsDirectional.fromSTEB.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsetsDirectional.fromSTEB(this.start, this.top, this.end, this.bottom);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/EdgeInsetsDirectional\/zero-constant.html\">EdgeInsetsDirectional.zero<\/a>.<\/p>\n<p>To interpolate between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects of arbitrary type\n(either <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), consider the\n<a href=\"painting\/EdgeInsetsDirectional\/lerp.html\">EdgeInsetsGeometry.lerp<\/a> static method.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EdgeInsetsDirectional lerp(EdgeInsetsDirectional a, EdgeInsetsDirectional b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return EdgeInsetsDirectional.fromSTEB(\n    ui.lerpDouble(a.start, b.start, t),\n    ui.lerpDouble(a.top, b.top, t),\n    ui.lerpDouble(a.end, b.end, t),\n    ui.lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "EdgeInsetsDirectional.only",
            "type": "",
            "desc": "<p>Creates insets with only the given values non-zero.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA margin indent of 40 pixels on the leading side:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsetsDirectional.only(start: 40.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/EdgeInsetsDirectional\/EdgeInsetsDirectional.only.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsetsDirectional.only({\n  this.start = 0.0,\n  this.top = 0.0,\n  this.end = 0.0,\n  this.bottom = 0.0,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "resolve",
            "type": "painting.EdgeInsets",
            "desc": "<p>Convert this instance into an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, which uses literal coordinates\n(i.e. the <code>left<\/code> coordinate being explicitly a distance from the left, and\nthe <code>right<\/code> coordinate being explicitly a distance from the right).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/resolve.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets resolve(TextDirection direction) {\n  assert(direction != null);\n  switch (direction) {\n    case TextDirection.rtl:\n      return EdgeInsets.fromLTRB(end, top, start, bottom);\n    case TextDirection.ltr:\n      return EdgeInsets.fromLTRB(start, top, end, bottom);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "subtract",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsDirectional\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/EdgeInsetsDirectional\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/subtract.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry subtract(EdgeInsetsGeometry other) {\n  if (other is EdgeInsetsDirectional)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator unary-",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Returns the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object with each dimension negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_unary_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator -() {\n  return EdgeInsetsDirectional.fromSTEB(\n    -start,\n    -top,\n    -end,\n    -bottom,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~\/",
            "type": "painting.EdgeInsetsDirectional",
            "desc": "<p>Integer divides the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object in each dimension by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsDirectional",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsDirectional\/operator_truncate_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator ~\/(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    (start ~\/ other).toDouble(),\n    (top ~\/ other).toDouble(),\n    (end ~\/ other).toDouble(),\n    (bottom ~\/ other).toDouble(),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bottom",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset from the bottom.<\/p>\n<p>This value is passed through to <a href=\"painting\/EdgeInsetsDirectional\/bottom.html\">EdgeInsets.bottom<\/a> unmodified by the\n<a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsDirectional",
            "isConstant": false,
            "href": "painting\/EdgeInsetsDirectional\/bottom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "end",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset from the end side, the side on which the user ends reading\ntext.<\/p>\n<p>This value is normalized into an <a href=\"painting\/EdgeInsets\/left.html\">EdgeInsets.left<\/a> or <a href=\"painting\/EdgeInsets\/right.html\">EdgeInsets.right<\/a>\nvalue by the <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsDirectional",
            "isConstant": false,
            "href": "painting\/EdgeInsetsDirectional\/end.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double end\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "flipped",
            "type": "painting.EdgeInsetsDirectional",
            "types": [],
            "desc": "<p>An <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> with <a href=\"painting\/EdgeInsetsDirectional\/top.html\">top<\/a> and <a href=\"painting\/EdgeInsetsDirectional\/bottom.html\">bottom<\/a> as well as <a href=\"painting\/EdgeInsetsDirectional\/start.html\">start<\/a> and <a href=\"painting\/EdgeInsetsDirectional\/end.html\">end<\/a> flipped.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsDirectional",
            "isConstant": false,
            "href": "painting\/EdgeInsetsDirectional\/flipped.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional get flipped =&gt; EdgeInsetsDirectional.fromSTEB(end, bottom, start, top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isNonNegative",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether every dimension is non-negative.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsDirectional",
            "isConstant": false,
            "href": "painting\/EdgeInsetsDirectional\/isNonNegative.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isNonNegative =&gt; start &gt;= 0.0 &amp;&amp; top &gt;= 0.0 &amp;&amp; end &gt;= 0.0 &amp;&amp; bottom &gt;= 0.0;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "start",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset from the start side, the side from which the user will start\nreading text.<\/p>\n<p>This value is normalized into an <a href=\"painting\/EdgeInsets\/left.html\">EdgeInsets.left<\/a> or <a href=\"painting\/EdgeInsets\/right.html\">EdgeInsets.right<\/a>\nvalue by the <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsDirectional",
            "isConstant": false,
            "href": "painting\/EdgeInsetsDirectional\/start.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double start\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "top",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset from the top.<\/p>\n<p>This value is passed through to <a href=\"painting\/EdgeInsetsDirectional\/top.html\">EdgeInsets.top<\/a> unmodified by the\n<a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsDirectional",
            "isConstant": false,
            "href": "painting\/EdgeInsetsDirectional\/top.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "painting\/EdgeInsetsDirectional\/zero-constant.html",
            "desc": "<p>An <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> with zero offsets in each direction.<\/p>\n<p>Consider using <a href=\"painting\/EdgeInsetsDirectional\/zero-constant.html\">EdgeInsets.zero<\/a> instead, since that object has the same\neffect, but will be cheaper to <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const EdgeInsetsDirectional zero = EdgeInsetsDirectional.only()\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "zero",
            "memberOf": "painting.EdgeInsetsDirectional"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/EdgeInsetsDirectional-class.html",
    "desc": "<p>An immutable set of offsets in each of the four cardinal directions, but\nwhose horizontal components are dependent on the writing direction.<\/p>\n<p>This can be used to indicate padding from the left in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>\ntext and padding from the right in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> text without having\nto be aware of the current text direction.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, a variant that uses physical labels (left and right instead\nof start and end).<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "EdgeInsetsDirectional"
}