{
    "desc": "<p>Implements a tabbed iOS application's root layout and behavior structure.<\/p>\n<p>The scaffold lays out the tab bar at the bottom and the content between or\nbehind the tab bar.<\/p>\n<p>A <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> and a <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a> are required. The <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>\nwill automatically listen to the provided <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>'s tap callbacks\nto change the active tab.<\/p>\n<p>Tabs' contents are built with the provided <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a> at the active\ntab index. The <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a> must be able to build the same number of\npages as there are <code>tabBar.items<\/code>. Inactive tabs will be moved <a href=\"widgets\/Offstage-class.html\">Offstage<\/a>\nand their animations disabled.<\/p>\n<p>Use <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a> as the content of each tab to support tabs with parallel\nnavigation state and history.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA sample code implementing a typical iOS information architecture with tabs.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CupertinoTabScaffold(\n  tabBar: CupertinoTabBar(\n    items: &lt;BottomNavigationBarItem&gt; [\n      \/\/ ...\n    ],\n  ),\n  tabBuilder: (BuildContext context, int index) {\n    return CupertinoTabView(\n      builder: (BuildContext context) {\n        return CupertinoPageScaffold(\n          navigationBar: CupertinoNavigationBar(\n            middle: Text('Page 1 of tab $index'),\n          ),\n          child: Center(\n            child: CupertinoButton(\n              child: const Text('Next page'),\n              onPressed: () {\n                Navigator.of(context).push(\n                  CupertinoPageRoute&lt;void&gt;(\n                    builder: (BuildContext context) {\n                      return CupertinoPageScaffold(\n                        navigationBar: CupertinoNavigationBar(\n                          middle: Text('Page 2 of tab $index'),\n                        ),\n                        child: Center(\n                          child: CupertinoButton(\n                            child: const Text('Back'),\n                            onPressed: () { Navigator.of(context).pop(); },\n                          ),\n                        ),\n                      );\n                    },\n                  ),\n                );\n              },\n            ),\n          ),\n        );\n      },\n    );\n  },\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>To push a route above all tabs instead of inside the currently selected one\n(such as when showing a dialog on top of this scaffold), use\n<code>Navigator.of(rootNavigator: true)<\/code> from inside the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> of a\n<a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>, the bottom tab bar inserted in the scaffold.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>, the typical root content of each tab that holds its own\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> stack.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>, a route hosting modal pages with iOS style transitions.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>, typical contents of an iOS modal page implementing\nlayout with a navigation bar on top.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "cupertino\/CupertinoTabScaffold-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "cupertino",
    "name": "cupertino.CupertinoTabScaffold",
    "shortname": "CupertinoTabScaffold",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>An <a href=\"widgets\/IndexedWidgetBuilder.html\">IndexedWidgetBuilder<\/a> that's called when tabs become active.<\/p>\n<p>The widgets built by <a href=\"widgets\/IndexedWidgetBuilder.html\">IndexedWidgetBuilder<\/a> is typically a <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>\nin order to achieve the parallel hierarchies information architecture seen\non iOS apps with tab bars.<\/p>\n<p>When the tab becomes inactive, its content is still cached in the widget\ntree <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> and its animations disabled.<\/p>\n<p>Content can slide under the <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> when they're translucent.\nIn that case, the child's <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>'s <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> will have a\nbottom padding indicating the area of obstructing overlap from the\n<a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a>.<\/p>\n<p>Must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IndexedWidgetBuilder tabBuilder\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTabScaffold\/tabBuilder.html",
            "isDeprecated": "0",
            "type": "widgets.IndexedWidgetBuilder",
            "memberOf": "cupertino.CupertinoTabScaffold",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a layout for applications with a tab bar at the bottom.<\/p>\n<p>The <code>tabBar<\/code> and <code>tabBuilder<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTabScaffold({\n  Key key,\n  @required this.tabBar,\n  @required this.tabBuilder,\n  this.backgroundColor,\n  this.resizeToAvoidBottomInset = true,\n}) : assert(tabBar != null),\n     assert(tabBuilder != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoTabScaffold\/CupertinoTabScaffold.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "cupertino.CupertinoTabScaffold",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "resizeToAvoidBottomInset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "tabBar",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "cupertino.CupertinoTabBar"
                },
                {
                    "name": "tabBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.IndexedWidgetBuilder"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoTabScaffold\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoTabScaffoldState createState() =&gt; _CupertinoTabScaffoldState();<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoTabScaffold\/createState.html",
            "isDeprecated": "0",
            "type": "<_CupertinoTabScaffoldState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoTabScaffold",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The color of the widget that underlies the entire scaffold.<\/p>\n<p>By default uses <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>scaffoldBackgroundColor<\/code> when null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTabScaffold\/backgroundColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "cupertino.CupertinoTabScaffold",
            "params": []
        },
        {
            "desc": "<p>Whether the <code>child<\/code> should size itself to avoid the window's bottom inset.<\/p>\n<p>For example, if there is an onscreen keyboard displayed above the\nscaffold, the body can be resized to avoid overlapping the keyboard, which\nprevents widgets inside the body from being obscured by the keyboard.<\/p>\n<p>Defaults to true and cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool resizeToAvoidBottomInset\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTabScaffold\/resizeToAvoidBottomInset.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTabScaffold",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> is a <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a> drawn at the bottom of the screen\nthat lets the user switch between different tabs in the main content area\nwhen present.<\/p>\n<p>Setting and changing <a href=\"cupertino\/CupertinoTabBar\/currentIndex.html\">CupertinoTabBar.currentIndex<\/a> programmatically will\nchange the currently selected tab item in the <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> as well as change\nthe currently focused tab from the <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a>.\nIf <a href=\"cupertino\/CupertinoTabBar\/onTap.html\">CupertinoTabBar.onTap<\/a> is provided, it will still be called.\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a> automatically also listen to the\n<a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>'s <code>onTap<\/code> to change the <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>'s <code>currentIndex<\/code>\nand change the actively displayed tab in <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>'s own\nmain content area.<\/p>\n<p>If translucent, the main content may slide behind it.\nOtherwise, the main content's bottom margin will be offset by its height.<\/p>\n<p>Must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoTabBar tabBar\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTabScaffold\/tabBar.html",
            "isDeprecated": "0",
            "type": "cupertino.CupertinoTabBar",
            "memberOf": "cupertino.CupertinoTabScaffold",
            "params": []
        }
    ]
}