{
    "name": "widgets.AsyncSnapshot",
    "extends": [],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"widgets\/AsyncSnapshot\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AsyncSnapshot",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/AsyncSnapshot\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! AsyncSnapshot&lt;T&gt;)\n    return false;\n  final AsyncSnapshot&lt;T&gt; typedOther = other;\n  return connectionState == typedOther.connectionState\n      &amp;&amp; data == typedOther.data\n      &amp;&amp; error == typedOther.error;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "inState",
            "type": "widgets.AsyncSnapshot",
            "desc": "<p>Returns a snapshot like this one, but in the specified <code>state<\/code>.<\/p>\n<p>The <a href=\"widgets\/AsyncSnapshot\/data.html\">data<\/a> and <a href=\"widgets\/AsyncSnapshot\/error.html\">error<\/a> fields persist unmodified, even if the new state is\n<a href=\"widgets\/ConnectionState-class.html\">ConnectionState.none<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AsyncSnapshot",
            "sig": "",
            "params": [
                {
                    "name": "state",
                    "type": "widgets.ConnectionState",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/AsyncSnapshot\/inState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AsyncSnapshot&lt;T&gt; inState(ConnectionState state) =&gt; AsyncSnapshot&lt;T&gt;._(state, data, error);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "AsyncSnapshot.nothing",
            "type": "",
            "desc": "<p>Creates an <a href=\"widgets\/AsyncSnapshot-class.html\">AsyncSnapshot<\/a> in <a href=\"widgets\/ConnectionState-class.html\">ConnectionState.none<\/a> with null data and error.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AsyncSnapshot",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "widgets\/AsyncSnapshot\/AsyncSnapshot.nothing.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsyncSnapshot.nothing() : this._(ConnectionState.none, null, null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AsyncSnapshot",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/AsyncSnapshot\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($connectionState, $data, $error)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "AsyncSnapshot.withData",
            "type": "",
            "desc": "<p>Creates an <a href=\"widgets\/AsyncSnapshot-class.html\">AsyncSnapshot<\/a> in the specified <code>state<\/code> and with the specified <code>data<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AsyncSnapshot",
            "sig": "",
            "params": [
                {
                    "name": "state",
                    "type": "widgets.ConnectionState",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "data",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "widgets\/AsyncSnapshot\/AsyncSnapshot.withData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsyncSnapshot.withData(ConnectionState state, T data) : this._(state, data, null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "AsyncSnapshot.withError",
            "type": "",
            "desc": "<p>Creates an <a href=\"widgets\/AsyncSnapshot-class.html\">AsyncSnapshot<\/a> in the specified <code>state<\/code> and with the specified <code>error<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AsyncSnapshot",
            "sig": "",
            "params": [
                {
                    "name": "state",
                    "type": "widgets.ConnectionState",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "error",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/AsyncSnapshot\/AsyncSnapshot.withError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsyncSnapshot.withError(ConnectionState state, Object error) : this._(state, null, error);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "connectionState",
            "type": "widgets.ConnectionState",
            "types": [],
            "desc": "<p>Current state of connection to the asynchronous computation.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/connectionState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ConnectionState connectionState\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "data",
            "type": "",
            "types": [],
            "desc": "<p>The latest data received by the asynchronous computation.<\/p>\n<p>If this is non-null, <a href=\"widgets\/AsyncSnapshot\/hasData.html\">hasData<\/a> will be true.<\/p>\n<p>If <a href=\"widgets\/AsyncSnapshot\/error.html\">error<\/a> is not null, this will be null. See <a href=\"widgets\/AsyncSnapshot\/hasError.html\">hasError<\/a>.<\/p>\n<p>If the asynchronous computation has never returned a value, this may be\nset to an initial data value specified by the relevant widget. See\n<a href=\"widgets\/FutureBuilder\/initialData.html\">FutureBuilder.initialData<\/a> and <a href=\"widgets\/StreamBuilder\/initialData.html\">StreamBuilder.initialData<\/a>.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/data.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T data\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "error",
            "type": "dart:core.Object",
            "types": [],
            "desc": "<p>The latest error object received by the asynchronous computation.<\/p>\n<p>If this is non-null, <a href=\"widgets\/AsyncSnapshot\/hasError.html\">hasError<\/a> will be true.<\/p>\n<p>If <a href=\"widgets\/AsyncSnapshot\/data.html\">data<\/a> is not null, this will be null.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/error.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object error\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hasData",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns whether this snapshot contains a non-null <a href=\"widgets\/AsyncSnapshot\/data.html\">data<\/a> value.<\/p>\n<p>This can be false even when the asynchronous computation has completed\nsuccessfully, if the computation did not return a non-null value. For\nexample, a <a href=\"dart-async\/Future-class.html\">Future&lt;void&gt;<\/a> will complete with the null value even if it\ncompletes successfully.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/hasData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasData =&gt; data != null;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hasError",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns whether this snapshot contains a non-null <a href=\"widgets\/AsyncSnapshot\/error.html\">error<\/a> value.<\/p>\n<p>This is always true if the asynchronous computation's last result was\nfailure.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/hasError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasError =&gt; error != null;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"widgets\/AsyncSnapshot\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"widgets\/AsyncSnapshot\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"widgets\/AsyncSnapshot\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"widgets\/AsyncSnapshot\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"widgets\/AsyncSnapshot\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"widgets\/AsyncSnapshot\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(connectionState, data, error);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "requireData",
            "type": "",
            "types": [],
            "desc": "<p>Returns latest data received, failing if there is no data.<\/p>\n<p>Throws <a href=\"widgets\/AsyncSnapshot\/error.html\">error<\/a>, if <a href=\"widgets\/AsyncSnapshot\/hasError.html\">hasError<\/a>. Throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>, if neither <a href=\"widgets\/AsyncSnapshot\/hasData.html\">hasData<\/a>\nnor <a href=\"widgets\/AsyncSnapshot\/hasError.html\">hasError<\/a>.<\/p>\n        ",
            "memberOf": "widgets.AsyncSnapshot",
            "isConstant": false,
            "href": "widgets\/AsyncSnapshot\/requireData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get requireData {\n  if (hasData)\n    return data;\n  if (hasError)\n    throw error;\n  throw StateError('Snapshot has neither data nor error');\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.StreamBuilder"
    ],
    "realImplementors": [
        "widgets.StreamBuilder"
    ],
    "cn": [],
    "href": "widgets\/AsyncSnapshot-class.html",
    "desc": "<p>Immutable representation of the most recent interaction with an asynchronous\ncomputation.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/StreamBuilder-class.html\">StreamBuilder<\/a>, which builds itself based on a snapshot from interacting\nwith a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/li>\n<li>\n<a href=\"widgets\/FutureBuilder-class.html\">FutureBuilder<\/a>, which builds itself based on a snapshot from interacting\nwith a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AsyncSnapshot"
}