{
    "desc": "<p>A reference to a directory (or <em>folder<\/em>) on the file system.<\/p>\n<p>A Directory instance is an object holding a <a href=\"dart-io\/Directory\/path.html\">path<\/a> on which operations can\nbe performed. The path to the directory can be <a href=\"dart-io\/Directory\/absolute.html\">absolute<\/a> or relative.\nYou can get the parent directory using the getter <a href=\"dart-io\/FileSystemEntity\/parent.html\">parent<\/a>,\na property inherited from <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>In addition to being used as an instance to access the file system,\nDirectory has a number of static properties, such as <a href=\"dart-io\/Directory\/systemTemp.html\">systemTemp<\/a>,\nwhich gets the system's temporary directory, and the getter and setter\n<a href=\"dart-io\/Directory\/current.html\">current<\/a>, which you can use to access or change the current directory.<\/p>\n<p>Create a new Directory object with a pathname to access the specified\ndirectory on the file system from your program.<\/p>\n<pre class=\"language-dart\"><code>var myDir = new Directory('myDir');\n<\/code><\/pre>\n<p>Most methods in this class occur in synchronous and asynchronous pairs,\nfor example, <a href=\"dart-io\/Directory\/create.html\">create<\/a> and <a href=\"dart-io\/Directory\/createSync.html\">createSync<\/a>.\nUnless you have a specific reason for using the synchronous version\nof a method, prefer the asynchronous version to avoid blocking your program.<\/p>\n<h2 id=\"create-a-directory\">Create a directory<\/h2>\n<p>The following code sample creates a directory using the <a href=\"dart-io\/Directory\/create.html\">create<\/a> method.\nBy setting the <code>recursive<\/code> parameter to true, you can create the\nnamed directory and all its necessary parent directories,\nif they do not already exist.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  \/\/ Creates dir\/ and dir\/subdir\/.\n  new Directory('dir\/subdir').create(recursive: true)\n    \/\/ The created directory is returned as a Future.\n    .then((Directory directory) {\n      print(directory.path);\n  });\n}\n<\/code><\/pre>\n<h2 id=\"list-a-directory\">List a directory<\/h2>\n<p>Use the <a href=\"dart-io\/Directory\/list.html\">list<\/a> or <a href=\"dart-io\/Directory\/listSync.html\">listSync<\/a> methods to get the files and directories\ncontained by a directory.\nSet <code>recursive<\/code> to true to recursively list all subdirectories.\nSet <code>followLinks<\/code> to true to follow symbolic links.\nThe list method returns a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> that provides FileSystemEntity\nobjects. Use the listen callback function to process each object\nas it become available.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  \/\/ Get the system temp directory.\n  var systemTempDir = Directory.systemTemp;\n\n  \/\/ List directory contents, recursing into sub-directories,\n  \/\/ but not following symbolic links.\n  systemTempDir.list(recursive: true, followLinks: false)\n    .listen((FileSystemEntity entity) {\n      print(entity.path);\n    });\n}\n<\/code><\/pre>\n<h2 id=\"the-use-of-futures\">The use of Futures<\/h2>\n<p>I\/O operations can block a program for some period of time while it waits for\nthe operation to complete. To avoid this, all\nmethods involving I\/O have an asynchronous variant which returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>.\nThis future completes when the I\/O operation finishes. While the I\/O\noperation is in progress, the Dart program is not blocked,\nand can perform other operations.<\/p>\n<p>For example,\nthe <a href=\"dart-io\/FileSystemEntity\/exists.html\">exists<\/a> method, which determines whether the directory exists,\nreturns a boolean value using a Future.\nUse <code>then<\/code> to register a callback function, which is called when\nthe value is ready.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  final myDir = new Directory('dir');\n  myDir.exists().then((isThere) {\n    isThere ? print('exists') : print('non-existent');\n  });\n}\n<\/code><\/pre>\n<p>In addition to exists, the <a href=\"dart-io\/FileSystemEntity\/stat.html\">stat<\/a>, <a href=\"dart-io\/Directory\/rename.html\">rename<\/a>, and\nother methods, return Futures.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<ul>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#files-directories-and-symlinks\">Dart by Example<\/a>\nprovides additional task-oriented code samples that show how to use\nvarious API from the Directory class and the related <a href=\"dart-io\/File-class.html\">File<\/a> class.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#dartio---io-for-command-line-apps\">I\/O for Command-Line\nApps<\/a>\na section from <em>A Tour of the Dart Libraries<\/em> covers files and directories.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/tutorials\/cmdline\/\">Write Command-Line Apps<\/a>,\na tutorial about writing command-line apps, includes information about\nfiles and directories.<\/p>\n<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/Directory-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.Directory",
    "shortname": "Directory",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"dart-io\/Directory-class.html\">Directory<\/a> object.<\/p>\n<p>If <code>path<\/code> is a relative path, it will be interpreted relative to the\ncurrent working directory (see <a href=\"dart-io\/Directory\/current.html\">Directory.current<\/a>), when used.<\/p>\n<p>If <code>path<\/code> is an absolute path, it will be immune to changes to the\ncurrent working directory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Directory(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return new _Directory(path);\n  }\n  return overrides.createDirectory(path);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/Directory.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "path",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with this\ndirectory once it has been created. If the directory cannot be\ncreated the future completes with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Directory&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/create.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.Directory>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Synchronously creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>If the directory cannot be created an exception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void createSync({bool recursive: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/createSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a temporary directory in this directory. Additional random\ncharacters are appended to <code>prefix<\/code> to produce a unique directory\nname. If <code>prefix<\/code> is missing or null, the empty string is used\nfor <code>prefix<\/code>.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with the newly\ncreated temporary directory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Directory&gt; createTemp([String prefix]);<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/createTemp.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.Directory>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously creates a temporary directory in this directory.\nAdditional random characters are appended to <code>prefix<\/code> to produce\na unique directory name. If <code>prefix<\/code> is missing or null, the empty\nstring is used for <code>prefix<\/code>.<\/p>\n<p>Returns the newly created temporary directory.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory createTempSync([String prefix]);<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/createTempSync.html",
            "isDeprecated": "0",
            "type": "dart:io.Directory",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Lists the sub-directories and files of this <a href=\"dart-io\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects.\nIf a symbolic link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"dart-io\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>The result is a stream of <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects\nfor the directories, files, and links.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;FileSystemEntity&gt; list(\n    {bool recursive: false, bool followLinks: true});<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/list.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream<dart:io.FileSystemEntity>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "followLinks",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Lists the sub-directories and files of this <a href=\"dart-io\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects.\nIf a link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"dart-io\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>Returns a <a href=\"dart-core\/List-class.html\">List<\/a> containing <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects for the\ndirectories, files, and links.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;FileSystemEntity&gt; listSync(\n    {bool recursive: false, bool followLinks: true});<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/listSync.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:io.FileSystemEntity>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "followLinks",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "recursive",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Renames this directory. Returns a <code>Future&lt;Directory&gt;<\/code> that completes\nwith a <a href=\"dart-io\/Directory-class.html\">Directory<\/a> instance for the renamed directory.<\/p>\n<p>If newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file, the operation\nfails and the future completes with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Directory&gt; rename(String newPath);<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/rename.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.Directory>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "newPath",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously renames this directory. Returns a <a href=\"dart-io\/Directory-class.html\">Directory<\/a>\ninstance for the renamed directory.<\/p>\n<p>If newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file the operation\nfails and an exception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory renameSync(String newPath);<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/renameSync.html",
            "isDeprecated": "0",
            "type": "dart:io.Directory",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": [
                {
                    "name": "newPath",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Directory\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; resolveSymbolicLinks();<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/resolveSymbolicLinks.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.String>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": []
        },
        {
            "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Directory\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String resolveSymbolicLinksSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/resolveSymbolicLinksSync.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": []
        },
        {
            "desc": "<p>Returns a human readable string for this Directory instance.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "href": "dart-io\/Directory\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Directory",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a <a href=\"dart-io\/Directory-class.html\">Directory<\/a> instance whose path is the absolute path to <a href=\"dart-io\/Directory-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get absolute;<\/code><\/pre>\n        ",
            "href": "dart-io\/Directory\/absolute.html",
            "isDeprecated": "0",
            "type": "dart:io.Directory",
            "memberOf": "dart:io.Directory",
            "params": []
        },
        {
            "desc": "<p>Creates a directory object pointing to the current working\ndirectory.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Directory get current {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _Directory.current;\n  }\n  return overrides.getCurrentDirectory();\n}<\/code><\/pre>\n        ",
            "href": "dart-io\/Directory\/current.html",
            "isDeprecated": "0",
            "type": "dart:io.Directory",
            "memberOf": "dart:io.Directory",
            "params": []
        },
        {
            "desc": "<p>Gets the path of this directory.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
            "href": "dart-io\/Directory\/path.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.Directory",
            "params": []
        },
        {
            "desc": "<p>Gets the system temp directory.<\/p>\n<p>Gets the directory provided by the operating system for creating\ntemporary files and directories in.\nThe location of the system temp directory is platform-dependent,\nand may be set by an environment variable.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Directory get systemTemp {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _Directory.systemTemp;\n  }\n  return overrides.getSystemTempDirectory();\n}<\/code><\/pre>\n        ",
            "href": "dart-io\/Directory\/systemTemp.html",
            "isDeprecated": "0",
            "type": "dart:io.Directory",
            "memberOf": "dart:io.Directory",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> representing the directory's location.<\/p>\n<p>The returned URI's scheme is always \"file\" if the entity's <a href=\"dart-io\/Directory\/path.html\">path<\/a> is\nabsolute, otherwise the scheme will be empty.\nThe returned URI's path always ends in a slash ('\/').<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri;<\/code><\/pre>\n        ",
            "href": "dart-io\/Directory\/uri.html",
            "isDeprecated": "0",
            "type": "dart:core.Uri",
            "memberOf": "dart:io.Directory",
            "params": []
        }
    ]
}