{
    "desc": "<p>RawSecureSocket provides a secure (SSL or TLS) network connection.\nClient connections to a server are provided by calling\nRawSecureSocket.connect.  A secure server, created with\n<a href=\"dart-io\/RawSecureServerSocket-class.html\">RawSecureServerSocket<\/a>, also returns RawSecureSocket objects representing\nthe server end of a secure connection.\nThe certificate provided by the server is checked\nusing the trusted certificates set in the SecurityContext object.\nThe default <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> object contains a built-in set of trusted\nroot certificates for well-known certificate authorities.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-io\/RawSecureSocket-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.RawSecureSocket",
    "shortname": "RawSecureSocket",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": null,
            "href": "dart-io\/RawSecureSocket\/RawSecureSocket.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.RawSecureSocket",
            "params": []
        },
        {
            "desc": "<p>Constructs a new secure client socket and connect it to the given\nhost on the given port. The returned <a href=\"dart-async\/Future-class.html\">Future<\/a> is completed with the\nRawSecureSocket when it is connected and ready for subscription.<\/p>\n<p>The certificate provided by the server is checked using the trusted\ncertificates set in the SecurityContext object If a certificate and key are\nset on the client, using <a href=\"dart-io\/SecurityContext\/useCertificateChain.html\">SecurityContext.useCertificateChain<\/a> and\n<a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">SecurityContext.usePrivateKey<\/a>, and the server asks for a client\ncertificate, then that client certificate is sent to the server.<\/p>\n<p><code>onBadCertificate<\/code> is an optional handler for unverifiable certificates.\nThe handler receives the <a href=\"dart-io\/X509Certificate-class.html\">X509Certificate<\/a>, and can inspect it and\ndecide (or let the user decide) whether to accept\nthe connection or not.  The handler should return true\nto continue the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> connection.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negotiation with the\nserver.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/RawSecureSocket\/selectedProtocol.html\">RawSecureSocket.selectedProtocol<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureSocket&gt; connect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols,\n    Duration timeout}) {\n  _RawSecureSocket._verifyFields(\n      host, port, false, false, false, onBadCertificate);\n  return RawSocket.connect(host, port, timeout: timeout).then((socket) {\n    return secure(socket,\n        context: context,\n        onBadCertificate: onBadCertificate,\n        supportedProtocols: supportedProtocols);\n  });\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureSocket\/connect.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawSecureSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureSocket",
            "params": [
                {
                    "name": "certificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.X509Certificate"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.SecurityContext"
                },
                {
                    "name": "host",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "supportedProtocols",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                },
                {
                    "name": "timeout",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Renegotiate an existing secure connection, renewing the session keys\nand possibly changing the connection properties.<\/p>\n<p>This repeats the SSL or TLS handshake, with options that allow clearing\nthe session cache and requesting a client certificate.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void renegotiate(\n    {bool useSessionCache: true,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureSocket\/renegotiate.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureSocket",
            "params": [
                {
                    "name": "requestClientCertificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "requireClientCertificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "useSessionCache",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Takes an already connected <code>socket<\/code> and starts client side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is prepared for TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, pass the existing\nsubscription in the <code>subscription<\/code> parameter. The <a href=\"dart-io\/RawSecureSocket\/secure.html\">secure<\/a>\noperation will take over the subscription by replacing the\nhandlers with it own secure processing. The caller must not touch\nthis subscription anymore. Passing a paused subscription is an\nerror.<\/p>\n<p>If the <code>host<\/code> argument is passed it will be used as the host name\nfor the TLS handshake. If <code>host<\/code> is not passed the host name from\nthe <code>socket<\/code> will be used. The <code>host<\/code> can be either a <a href=\"dart-core\/String-class.html\">String<\/a> or\nan <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>.<\/p>\n<p>Calling this function will <em>not<\/em> cause a DNS host lookup. If the\n<code>host<\/code> passed is a <a href=\"dart-core\/String-class.html\">String<\/a> the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> for the\nresulting <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> will have this passed in <code>host<\/code> as its\nhost value and the internet address of the already connected\nsocket as its address value.<\/p>\n<p>See <a href=\"dart-io\/RawSecureSocket\/connect.html\">connect<\/a> for more information on the arguments.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureSocket&gt; secure(RawSocket socket,\n    {StreamSubscription&lt;RawSocketEvent&gt; subscription,\n    host,\n    SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols}) {\n  socket.readEventsEnabled = false;\n  socket.writeEventsEnabled = false;\n  return _RawSecureSocket.connect(\n      host != null ? host : socket.address.host, socket.port,\n      is_server: false,\n      socket: socket,\n      subscription: subscription,\n      context: context,\n      onBadCertificate: onBadCertificate,\n      supportedProtocols: supportedProtocols);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureSocket\/secure.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawSecureSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureSocket",
            "params": [
                {
                    "name": "certificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.X509Certificate"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.SecurityContext"
                },
                {
                    "name": "host",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "socket",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.RawSocket"
                },
                {
                    "name": "subscription",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.StreamSubscription<dart:io.RawSocketEvent>"
                },
                {
                    "name": "supportedProtocols",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Takes an already connected <code>socket<\/code> and starts server side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is going to start the TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, pass the existing\nsubscription in the <code>subscription<\/code> parameter. The <a href=\"dart-io\/RawSecureSocket\/secureServer.html\">secureServer<\/a>\noperation will take over the subscription by replacing the\nhandlers with it own secure processing. The caller must not touch\nthis subscription anymore. Passing a paused subscription is an\nerror.<\/p>\n<p>If some of the data of the TLS handshake has already been read\nfrom the socket this data can be passed in the <code>bufferedData<\/code>\nparameter. This data will be processed before any other data\navailable on the socket.<\/p>\n<p>See <a href=\"dart-io\/RawSecureServerSocket\/bind.html\">RawSecureServerSocket.bind<\/a> for more information on the\narguments.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureSocket&gt; secureServer(\n    RawSocket socket, SecurityContext context,\n    {StreamSubscription&lt;RawSocketEvent&gt; subscription,\n    List&lt;int&gt; bufferedData,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols}) {\n  socket.readEventsEnabled = false;\n  socket.writeEventsEnabled = false;\n  return _RawSecureSocket.connect(socket.address, socket.remotePort,\n      context: context,\n      is_server: true,\n      socket: socket,\n      subscription: subscription,\n      bufferedData: bufferedData,\n      requestClientCertificate: requestClientCertificate,\n      requireClientCertificate: requireClientCertificate,\n      supportedProtocols: supportedProtocols);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureSocket\/secureServer.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawSecureSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureSocket",
            "params": [
                {
                    "name": "bufferedData",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.SecurityContext"
                },
                {
                    "name": "requestClientCertificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "requireClientCertificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "socket",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.RawSocket"
                },
                {
                    "name": "subscription",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.StreamSubscription<dart:io.RawSocketEvent>"
                },
                {
                    "name": "supportedProtocols",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Like <a href=\"dart-io\/RawSecureSocket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> is no\nlonger needed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ConnectionTask&lt;RawSecureSocket&gt;&gt; startConnect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols}) {\n  return RawSocket.startConnect(host, port)\n      .then((ConnectionTask&lt;RawSocket&gt; rawState) {\n    Future&lt;RawSecureSocket&gt; socket = rawState.socket.then((rawSocket) {\n      return secure(rawSocket,\n          context: context,\n          onBadCertificate: onBadCertificate,\n          supportedProtocols: supportedProtocols);\n    });\n    return new ConnectionTask&lt;RawSecureSocket&gt;._(\n        socket: socket, onCancel: rawState._onCancel);\n  });\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSecureSocket\/startConnect.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.RawSecureSocket>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSecureSocket",
            "params": [
                {
                    "name": "certificate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.X509Certificate"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.SecurityContext"
                },
                {
                    "name": "host",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "supportedProtocols",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Get the peer certificate for a connected RawSecureSocket.  If this\nRawSecureSocket is the server end of a secure socket connection,\n<a href=\"dart-io\/RawSecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the client certificate, or null, if no\nclient certificate was received.  If it is the client end,\n<a href=\"dart-io\/RawSecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the server's certificate.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">X509Certificate get peerCertificate;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureSocket\/peerCertificate.html",
            "isDeprecated": "0",
            "type": "dart:io.X509Certificate",
            "memberOf": "dart:io.RawSecureSocket",
            "params": []
        },
        {
            "desc": "<p>The protocol which was selected during protocol negotiation.<\/p>\n<p>Returns null if one of the peers does not have support for ALPN, did not\nspecify a list of supported ALPN protocols or there was no common\nprotocol between client and server.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get selectedProtocol;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSecureSocket\/selectedProtocol.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.RawSecureSocket",
            "params": []
        }
    ]
}