{
    "desc": "<p>A sliver with multiple box children.<\/p>\n<p><a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a> is a base class for slivers that have multiple\nbox children. The children are managed by a <a href=\"rendering\/RenderSliverBoxChildManager-class.html\">RenderSliverBoxChildManager<\/a>,\nwhich lets subclasses create children lazily during layout. Typically\nsubclasses will create only those children that are actually needed to fill\nthe <a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a>.<\/p>\n<p>The contract for adding and removing children from this render object is\nmore strict than for normal render objects:<\/p>\n<ul>\n<li>Children can be removed except during a layout pass if they have already\nbeen laid out during that layout pass.<\/li>\n<li>Children cannot be added except during a call to <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childManager.html\">childManager<\/a>, and\nthen only if there is no child corresponding to that index (or the child\nchild corresponding to that index was first removed).<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSliverToBoxAdapter-class.html\">RenderSliverToBoxAdapter<\/a>, which has a single box child.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverList-class.html\">RenderSliverList<\/a>, which places its children in a linear\narray.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverFixedExtentList-class.html\">RenderSliverFixedExtentList<\/a>, which places its children in a linear\narray with a fixed extent in the main axis.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverGrid-class.html\">RenderSliverGrid<\/a>, which places its children in arbitrary positions.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverMultiBoxAdaptor-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverMultiBoxAdaptor",
    "shortname": "RenderSliverMultiBoxAdaptor",
    "extends": [
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [
        "rendering.RenderSliverFillViewport",
        "rendering.RenderSliverFixedExtentList",
        "rendering.RenderSliverGrid",
        "rendering.RenderSliverList"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a sliver with multiple box children.<\/p>\n<p>The <code>childManager<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverMultiBoxAdaptor({\n  @required RenderSliverBoxChildManager childManager,\n}) : assert(childManager != null),\n     _childManager = childManager;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/RenderSliverMultiBoxAdaptor.html",
            "isDeprecated": "0",
            "type": "",
            "name": "RenderSliverMultiBoxAdaptor",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "childManager",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderSliverBoxChildManager"
                }
            ]
        },
        {
            "desc": "<p>Called during layout to create and add the child with the given index and\nscroll offset.<\/p>\n<p>Calls <a href=\"rendering\/RenderSliverBoxChildManager\/createChild.html\">RenderSliverBoxChildManager.createChild<\/a> to actually create and add\nthe child if necessary. The child may instead be obtained from a cache;\nsee <a href=\"rendering\/KeepAliveParentDataMixin\/keepAlive.html\">SliverMultiBoxAdaptorParentData.keepAlive<\/a>.<\/p>\n<p>Returns false if there was no cached child and <code>createChild<\/code> did not add\nany child, otherwise returns true.<\/p>\n<p>Does not layout the new child.<\/p>\n<p>When this is called, there are no visible children, so no children can be\nremoved during the call to <code>createChild<\/code>. No child should be added during\nthat call either, except for the one that is created and returned by\n<code>createChild<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool addInitialChild({ int index = 0, double layoutOffset = 0.0 }) {\n  assert(_debugAssertChildListLocked());\n  assert(firstChild == null);\n  _createOrObtainChild(index, after: null);\n  if (firstChild != null) {\n    assert(firstChild == lastChild);\n    assert(indexOf(firstChild) == index);\n    final SliverMultiBoxAdaptorParentData firstChildParentData = firstChild.parentData;\n    firstChildParentData.layoutOffset = layoutOffset;\n    return true;\n  }\n  childManager.setDidUnderflow(true);\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/addInitialChild.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "addInitialChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "layoutOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called by subclasses when they decide a render object is a child.<\/p>\n<p>Only for use by subclasses when changing their child lists. Calling this\nin other cases will lead to an inconsistent tree and probably cause crashes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid adoptChild(RenderObject child) {\n  super.adoptChild(child);\n  final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n  if (!childParentData._keptAlive)\n    childManager.didAdoptChild(child);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/adoptChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "adoptChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Applies the transform that would be applied when painting the given child\nto the given matrix.<\/p>\n<p>Used by coordinate conversion functions to translate coordinates local to\none render object into coordinates local to another render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid applyPaintTransform(RenderObject child, Matrix4 transform) {\n  applyPaintTransformForBoxChild(child, transform);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/applyPaintTransform.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "applyPaintTransform",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "transform",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  for (RenderBox child in _keepAliveBucket.values)\n    child.attach(owner);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/attach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "attach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "owner",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PipelineOwner"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the leading <em>visible<\/em> edge of the sliver to the\nside of the given child closest to that edge.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the top\nof the visible portion of the sliver to the top of the child. On the other\nhand, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then this is the distance from the bottom\nof the visible portion of the sliver to the bottom of the child. In both\ncases, this is the direction of increasing\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a> and\n<a href=\"rendering\/SliverLogicalParentData\/layoutOffset.html\">SliverLogicalParentData.layoutOffset<\/a>.<\/p>\n<p>For children that are <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s, the leading edge of the <em>child<\/em>\nwill be the leading <em>visible<\/em> edge of the child, not the part of the child\nthat would locally be a scroll offset 0.0. For children that are not\n<a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s, for example a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> child, it's the actual distance\nto the edge of the box, since those boxes do not know how to handle being\nscrolled.<\/p>\n<p>This method differs from <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childScrollOffset.html\">childScrollOffset<\/a> in that\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childMainAxisPosition.html\">childMainAxisPosition<\/a> gives the distance from the leading <em>visible<\/em> edge\nof the sliver whereas <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childScrollOffset.html\">childScrollOffset<\/a> gives the distance from the\nsliver's zero scroll offset.<\/p>\n<p>Calling this for a child that is not visible is not valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childMainAxisPosition(RenderBox child) {\n  return childScrollOffset(child) - constraints.scrollOffset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/childMainAxisPosition.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "name": "childMainAxisPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Returns the scroll offset for the leading edge of the given child.<\/p>\n<p>The <code>child<\/code> must be a child of this sliver.<\/p>\n<p>This method differs from <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childMainAxisPosition.html\">childMainAxisPosition<\/a> in that\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childMainAxisPosition.html\">childMainAxisPosition<\/a> gives the distance from the leading <em>visible<\/em> edge\nof the sliver whereas <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childScrollOffset.html\">childScrollOffset<\/a> gives the distance from sliver's\nzero scroll offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childScrollOffset(RenderObject child) {\n  assert(child != null);\n  assert(child.parent == this);\n  final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n  assert(childParentData.layoutOffset != null);\n  return childParentData.layoutOffset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/childScrollOffset.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "name": "childScrollOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Called after layout with the number of children that can be garbage\ncollected at the head and tail of the child list.<\/p>\n<p>Children whose <a href=\"rendering\/KeepAliveParentDataMixin\/keepAlive.html\">SliverMultiBoxAdaptorParentData.keepAlive<\/a> property is\nset to true will be removed to a cache instead of being dropped.<\/p>\n<p>This method also collects any children that were previously kept alive but\nare now no longer necessary. As such, it should be called every time\n<a href=\"rendering\/RenderObject\/performLayout.html\">performLayout<\/a> is run, even if the arguments are both zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid collectGarbage(int leadingGarbage, int trailingGarbage) {\n  assert(_debugAssertChildListLocked());\n  assert(childCount &gt;= leadingGarbage + trailingGarbage);\n  invokeLayoutCallback&lt;SliverConstraints&gt;((SliverConstraints constraints) {\n    while (leadingGarbage &gt; 0) {\n      _destroyOrCacheChild(firstChild);\n      leadingGarbage -= 1;\n    }\n    while (trailingGarbage &gt; 0) {\n      _destroyOrCacheChild(lastChild);\n      trailingGarbage -= 1;\n    }\n    \/\/ Ask the child manager to remove the children that are no longer being\n    \/\/ kept alive. (This should cause _keepAliveBucket to change, so we have\n    \/\/ to prepare our list ahead of time.)\n    _keepAliveBucket.values.where((RenderBox child) {\n      final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n      return !childParentData.keepAlive;\n    }).toList().forEach(_childManager.removeChild);\n    assert(_keepAliveBucket.values.where((RenderBox child) {\n      final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n      return !childParentData.keepAlive;\n    }).isEmpty);\n  });\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/collectGarbage.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "collectGarbage",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "leadingGarbage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "trailingGarbage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Asserts that the reified child list is not empty and has a contiguous\nsequence of indices.<\/p>\n<p>Always returns true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertChildListIsNonEmptyAndContiguous() {\n  assert(() {\n    assert(firstChild != null);\n    int index = indexOf(firstChild);\n    RenderBox child = childAfter(firstChild);\n    while (child != null) {\n      index += 1;\n      assert(indexOf(child) == index);\n      child = childAfter(child);\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/debugAssertChildListIsNonEmptyAndContiguous.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "debugAssertChildListIsNonEmptyAndContiguous",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": []
        },
        {
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"rendering\/RenderObject\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  final List&lt;DiagnosticsNode&gt; children = &lt;DiagnosticsNode&gt;[];\n  if (firstChild != null) {\n    RenderBox child = firstChild;\n    while (true) {\n      final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n      children.add(child.toDiagnosticsNode(name: 'child with index ${childParentData.index}'));\n      if (child == lastChild)\n        break;\n      child = childParentData.nextSibling;\n    }\n  }\n  if (_keepAliveBucket.isNotEmpty) {\n    final List&lt;int&gt; indices = _keepAliveBucket.keys.toList()..sort();\n    for (int index in indices) {\n      children.add(_keepAliveBucket[index].toDiagnosticsNode(\n        name: 'child with index $index (kept alive but not laid out)',\n        style: DiagnosticsTreeStyle.offstage,\n      ));\n    }\n  }\n  return children;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/debugDescribeChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "name": "debugDescribeChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsNode.message(firstChild != null ? 'currently live children: ${indexOf(firstChild)} to ${indexOf(lastChild)}' : 'no children current live'));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  super.detach();\n  for (RenderBox child in _keepAliveBucket.values)\n    child.detach();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/detach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": []
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>Used by <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n<p>For a discussion of the semantics of the arguments, see <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { @required double mainAxisPosition, @required double crossAxisPosition }) {\n  RenderBox child = lastChild;\n  while (child != null) {\n    if (hitTestBoxChild(result, child, mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition))\n      return true;\n    child = childBefore(child);\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/hitTestChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "hitTestChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "crossAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "mainAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "result",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Returns the index of the given child, as given by the\n<a href=\"rendering\/SliverMultiBoxAdaptorParentData\/index.html\">SliverMultiBoxAdaptorParentData.index<\/a> field of the child's <a href=\"rendering\/RenderObject\/parentData.html\">parentData<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(RenderBox child) {\n  assert(child != null);\n  final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n  assert(childParentData.index != null);\n  return childParentData.index;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/indexOf.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "name": "indexOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Insert child into this render object's child list after the given child.<\/p>\n<p>If <code>after<\/code> is null, then this inserts the child at the start of the list,\nand the child becomes the new <a href=\"rendering\/ContainerRenderObjectMixin\/firstChild.html\">firstChild<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid insert(RenderBox child, { RenderBox after }) {\n  assert(!_keepAliveBucket.containsValue(child));\n  super.insert(child, after: after);\n  assert(firstChild != null);\n  assert(() {\n    int index = indexOf(firstChild);\n    RenderBox child = childAfter(firstChild);\n    while (child != null) {\n      assert(indexOf(child) &gt; index);\n      index = indexOf(child);\n      child = childAfter(child);\n    }\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/insert.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "insert",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "after",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Called during layout to create, add, and layout the child after\nthe given child.<\/p>\n<p>Calls <a href=\"rendering\/RenderSliverBoxChildManager\/createChild.html\">RenderSliverBoxChildManager.createChild<\/a> to actually create and add\nthe child if necessary. The child may instead be obtained from a cache;\nsee <a href=\"rendering\/KeepAliveParentDataMixin\/keepAlive.html\">SliverMultiBoxAdaptorParentData.keepAlive<\/a>.<\/p>\n<p>Returns the new child. It is the responsibility of the caller to configure\nthe child's scroll offset.<\/p>\n<p>Children after the <code>after<\/code> child may be removed in the process. Only the\nnew child may be added.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nRenderBox insertAndLayoutChild(\n  BoxConstraints childConstraints, {\n  @required RenderBox after,\n  bool parentUsesSize = false,\n}) {\n  assert(_debugAssertChildListLocked());\n  assert(after != null);\n  final int index = indexOf(after) + 1;\n  _createOrObtainChild(index, after: after);\n  final RenderBox child = childAfter(after);\n  if (child != null &amp;&amp; indexOf(child) == index) {\n    child.layout(childConstraints, parentUsesSize: parentUsesSize);\n    return child;\n  }\n  childManager.setDidUnderflow(true);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/insertAndLayoutChild.html",
            "isDeprecated": "0",
            "type": "rendering.RenderBox",
            "name": "insertAndLayoutChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "after",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "childConstraints",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.BoxConstraints"
                },
                {
                    "name": "parentUsesSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Called during layout to create, add, and layout the child before\n<a href=\"rendering\/ContainerRenderObjectMixin\/firstChild.html\">firstChild<\/a>.<\/p>\n<p>Calls <a href=\"rendering\/RenderSliverBoxChildManager\/createChild.html\">RenderSliverBoxChildManager.createChild<\/a> to actually create and add\nthe child if necessary. The child may instead be obtained from a cache;\nsee <a href=\"rendering\/KeepAliveParentDataMixin\/keepAlive.html\">SliverMultiBoxAdaptorParentData.keepAlive<\/a>.<\/p>\n<p>Returns the new child or null if no child was obtained.<\/p>\n<p>The child that was previously the first child, as well as any subsequent\nchildren, may be removed by this call if they have not yet been laid out\nduring this layout pass. No child should be added during that call except\nfor the one that is created and returned by <code>createChild<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nRenderBox insertAndLayoutLeadingChild(\n  BoxConstraints childConstraints, {\n  bool parentUsesSize = false,\n}) {\n  assert(_debugAssertChildListLocked());\n  final int index = indexOf(firstChild) - 1;\n  _createOrObtainChild(index, after: null);\n  if (indexOf(firstChild) == index) {\n    firstChild.layout(childConstraints, parentUsesSize: parentUsesSize);\n    return firstChild;\n  }\n  childManager.setDidUnderflow(true);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/insertAndLayoutLeadingChild.html",
            "isDeprecated": "0",
            "type": "rendering.RenderBox",
            "name": "insertAndLayoutLeadingChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "childConstraints",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.BoxConstraints"
                },
                {
                    "name": "parentUsesSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (firstChild == null)\n    return;\n  \/\/ offset is to the top-left corner, regardless of our axis direction.\n  \/\/ originOffset gives us the delta from the real origin to the origin in the axis direction.\n  Offset mainAxisUnit, crossAxisUnit, originOffset;\n  bool addExtent;\n  switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n    case AxisDirection.up:\n      mainAxisUnit = const Offset(0.0, -1.0);\n      crossAxisUnit = const Offset(1.0, 0.0);\n      originOffset = offset + Offset(0.0, geometry.paintExtent);\n      addExtent = true;\n      break;\n    case AxisDirection.right:\n      mainAxisUnit = const Offset(1.0, 0.0);\n      crossAxisUnit = const Offset(0.0, 1.0);\n      originOffset = offset;\n      addExtent = false;\n      break;\n    case AxisDirection.down:\n      mainAxisUnit = const Offset(0.0, 1.0);\n      crossAxisUnit = const Offset(1.0, 0.0);\n      originOffset = offset;\n      addExtent = false;\n      break;\n    case AxisDirection.left:\n      mainAxisUnit = const Offset(-1.0, 0.0);\n      crossAxisUnit = const Offset(0.0, 1.0);\n      originOffset = offset + Offset(geometry.paintExtent, 0.0);\n      addExtent = true;\n      break;\n  }\n  assert(mainAxisUnit != null);\n  assert(addExtent != null);\n  RenderBox child = firstChild;\n  while (child != null) {\n    final double mainAxisDelta = childMainAxisPosition(child);\n    final double crossAxisDelta = childCrossAxisPosition(child);\n    Offset childOffset = Offset(\n      originOffset.dx + mainAxisUnit.dx * mainAxisDelta + crossAxisUnit.dx * crossAxisDelta,\n      originOffset.dy + mainAxisUnit.dy * mainAxisDelta + crossAxisUnit.dy * crossAxisDelta,\n    );\n    if (addExtent)\n      childOffset += mainAxisUnit * paintExtentOf(child);\n\n    \/\/ If the child's visible interval (mainAxisDelta, mainAxisDelta + paintExtentOf(child))\n    \/\/ does not intersect the paint extent interval (0, constraints.remainingPaintExtent), it's hidden.\n    if (mainAxisDelta &lt; constraints.remainingPaintExtent &amp;&amp; mainAxisDelta + paintExtentOf(child) &gt; 0)\n      context.paintChild(child, childOffset);\n\n    child = childAfter(child);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the dimension of the given child in the main axis, as given by the\nchild's <a href=\"rendering\/RenderBox\/size.html\">RenderBox.size<\/a> property. This is only valid after layout.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble paintExtentOf(RenderBox child) {\n  assert(child != null);\n  assert(child.hasSize);\n  switch (constraints.axis) {\n    case Axis.horizontal:\n      return child.size.width;\n    case Axis.vertical:\n      return child.size.height;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/paintExtentOf.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "name": "paintExtentOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Adjust the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of this node's children, if any.<\/p>\n<p>Override this method in subclasses with child nodes to call <a href=\"foundation\/AbstractNode\/redepthChild.html\">redepthChild<\/a>\nfor each child. Do not call this method directly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid redepthChildren() {\n  super.redepthChildren();\n  _keepAliveBucket.values.forEach(redepthChild);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/redepthChildren.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "redepthChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": []
        },
        {
            "desc": "<p>Remove this child from the child list.<\/p>\n<p>Requires the child to be present in the child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid remove(RenderBox child) {\n  final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n  if (!childParentData._keptAlive) {\n    super.remove(child);\n    return;\n  }\n  assert(_keepAliveBucket[childParentData.index] == child);\n  _keepAliveBucket.remove(childParentData.index);\n  dropChild(child);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/remove.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Remove all their children from this render object's child list.<\/p>\n<p>More efficient than removing them individually.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeAll() {\n  super.removeAll();\n  _keepAliveBucket.values.forEach(dropChild);\n  _keepAliveBucket.clear();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/removeAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "removeAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": []
        },
        {
            "desc": "<p>Alerts the developer that the child's parentData needs to be of type\n<a href=\"rendering\/KeepAliveParentDataMixin-mixin.html\">KeepAliveParentDataMixin<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderObject child) {\n  if (child.parentData is! SliverMultiBoxAdaptorParentData)\n    child.parentData = SliverMultiBoxAdaptorParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/setupParentData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "setupParentData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Calls visitor for each immediate child of this render object.<\/p>\n<p>Override in subclasses with children and call the visitor for each child.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildren(RenderObjectVisitor visitor) {\n  super.visitChildren(visitor);\n  _keepAliveBucket.values.forEach(visitor);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/visitChildren.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "visitChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObjectVisitor"
                }
            ]
        },
        {
            "desc": "<p>Called when collecting the semantics of this node.<\/p>\n<p>The implementation has to return the children in paint order skipping all\nchildren that are not semantically relevant (e.g. because they are\ninvisible).<\/p>\n<p>The default implementation mirrors the behavior of\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor\/visitChildren.html\">visitChildren()<\/a> (which is supposed to walk all the children).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildrenForSemantics(RenderObjectVisitor visitor) {\n  super.visitChildren(visitor);\n  \/\/ Do not visit children in [_keepAliveBucket].\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/visitChildrenForSemantics.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "visitChildrenForSemantics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObjectVisitor"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The delegate that manages the children of this object.<\/p>\n<p>Rather than having a concrete list of children, a\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor-class.html\">RenderSliverMultiBoxAdaptor<\/a> uses a <a href=\"rendering\/RenderSliverBoxChildManager-class.html\">RenderSliverBoxChildManager<\/a> to\ncreate children during layout in order to fill the\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nRenderSliverBoxChildManager get childManager =&gt; _childManager;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverMultiBoxAdaptor\/childManager.html",
            "name": "childManager",
            "isDeprecated": false,
            "type": "rendering.RenderSliverBoxChildManager",
            "memberOf": "rendering.RenderSliverMultiBoxAdaptor",
            "params": []
        }
    ]
}