{
    "desc": "<p>Simple delegating wrapper around a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a>.<\/p>\n<p>Subclasses can override individual methods.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/DelegatingStreamSubscription-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.DelegatingStreamSubscription",
    "shortname": "DelegatingStreamSubscription",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create delegating subscription forwarding calls to <code>sourceSubscription<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DelegatingStreamSubscription(StreamSubscription&lt;T&gt; sourceSubscription)\n    : _source = sourceSubscription;<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/DelegatingStreamSubscription.html",
            "isDeprecated": "0",
            "type": "",
            "name": "DelegatingStreamSubscription",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "sourceSubscription",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:async.StreamSubscription"
                }
            ]
        },
        {
            "desc": "<p>Returns a future that handles the <a href=\"package-async_async\/DelegatingStreamSubscription\/onDone.html\">onDone<\/a> and <a href=\"package-async_async\/DelegatingStreamSubscription\/onError.html\">onError<\/a> callbacks.<\/p>\n<p>This method <em>overwrites<\/em> the existing <a href=\"package-async_async\/DelegatingStreamSubscription\/onDone.html\">onDone<\/a> and <a href=\"package-async_async\/DelegatingStreamSubscription\/onError.html\">onError<\/a> callbacks\nwith new ones that complete the returned future.<\/p>\n<p>In case of an error the subscription will automatically cancel (even\nwhen it was listening with <code>cancelOnError<\/code> set to <code>false<\/code>).<\/p>\n<p>In case of a <code>done<\/code> event the future completes with the given\n<code>futureValue<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;E&gt; asFuture&lt;E&gt;([E futureValue]) =&gt; _source.asFuture(futureValue);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/asFuture.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "asFuture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "futureValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Cancels this subscription.<\/p>\n<p>After this call, the subscription no longer receives events.<\/p>\n<p>The stream may need to shut down the source of events and clean up after\nthe subscription is canceled.<\/p>\n<p>Returns a future that is completed once the stream has finished\nits cleanup.<\/p>\n<p>For historical reasons, may also return <code>null<\/code> if no cleanup was necessary.\nReturning <code>null<\/code> is deprecated and should be avoided.<\/p>\n<p>Typically, futures are returned when the stream needs to release resources.\nFor example, a stream might need to close an open file (as an asynchronous\noperation). If the listener wants to delete the file after having\ncanceled the subscription, it must wait for the cleanup future to complete.<\/p>\n<p>A returned future completes with a <code>null<\/code> value.\nIf the cleanup throws, which it really shouldn't, the returned future\ncompletes with that error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future cancel() =&gt; _source.cancel();<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/cancel.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "cancel",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": []
        },
        {
            "desc": "<p>Replaces the data event handler of this subscription.<\/p>\n<p>The <code>handleData<\/code> function is called for each element of the stream\nafter this function is called.\nIf <code>handleData<\/code> is <code>null<\/code>, further elements are ignored.<\/p>\n<p>This method replaces the current handler set by the invocation of\n<a href=\"dart-async\/Stream\/listen.html\">Stream.listen<\/a> or by a previous call to <a href=\"package-async_async\/DelegatingStreamSubscription\/onData.html\">onData<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void onData(void handleData(T data)) {\n  _source.onData(handleData);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/onData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "onData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Replaces the done event handler of this subscription.<\/p>\n<p>The <code>handleDone<\/code> function is called when the stream closes.\nThe value may be <code>null<\/code>, in which case no function is called.<\/p>\n<p>This method replaces the current handler set by the invocation of\n<a href=\"dart-async\/Stream\/listen.html\">Stream.listen<\/a>, by calling <a href=\"package-async_async\/DelegatingStreamSubscription\/asFuture.html\">asFuture<\/a>, or by a previous call to <a href=\"package-async_async\/DelegatingStreamSubscription\/onDone.html\">onDone<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void onDone(void handleDone()) {\n  _source.onDone(handleDone);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/onDone.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "onDone",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "handleDone",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<void>"
                }
            ]
        },
        {
            "desc": "<p>Replaces the error event handler of this subscription.<\/p>\n<p>The <code>handleError<\/code> function must be able to be called with either\none positional argument, or with two positional arguments\nwhere the seconds is always a <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a>.<\/p>\n<p>The <code>handleError<\/code> argument may be <code>null<\/code>, in which case further\nerror events are considered unhandled, and will be reported to\n<a href=\"dart-async\/Zone\/handleUncaughtError.html\">Zone.handleUncaughtError<\/a>.<\/p>\n<p>The provided function is called for all error events from the\nstream subscription.<\/p>\n<p>This method replaces the current handler set by the invocation of\n<a href=\"dart-async\/Stream\/listen.html\">Stream.listen<\/a>, by calling <a href=\"package-async_async\/DelegatingStreamSubscription\/asFuture.html\">asFuture<\/a>, or by a previous call to <a href=\"package-async_async\/DelegatingStreamSubscription\/onError.html\">onError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void onError(Function handleError) {\n  _source.onError(handleError);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/onError.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "onError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "handleError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        },
        {
            "desc": "<p>Request that the stream pauses events until further notice.<\/p>\n<p>While paused, the subscription will not fire any events.\nIf it receives events from its source, they will be buffered until\nthe subscription is resumed.\nFor non-broadcast streams, the underlying source is usually informed\nabout the pause,\nso it can stop generating events until the subscription is resumed.<\/p>\n<p>To avoid buffering events on a broadcast stream, it is better to\ncancel this subscription, and start to listen again when events\nare needed, if the intermediate events are not important.<\/p>\n<p>If <code>resumeSignal<\/code> is provided, the stream subscription will undo the pause\nwhen the future completes, as if by a call to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a>.\nIf the future completes with an error,\nthe stream will still resume, but the error will be considered unhandled\nand is passed to <a href=\"dart-async\/Zone\/handleUncaughtError.html\">Zone.handleUncaughtError<\/a>.<\/p>\n<p>A call to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a> will also undo a pause.<\/p>\n<p>If the subscription is paused more than once, an equal number\nof resumes must be performed to resume the stream.\nCalls to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a> and the completion of a <code>resumeSignal<\/code> are\ninterchangeable - the <a href=\"package-async_async\/DelegatingStreamSubscription\/pause.html\">pause<\/a> which was passed a <code>resumeSignal<\/code> may be\nended by a call to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a>, and completing the <code>resumeSignal<\/code> may end a\ndifferent <a href=\"package-async_async\/DelegatingStreamSubscription\/pause.html\">pause<\/a>.<\/p>\n<p>It is safe to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a> or complete a <code>resumeSignal<\/code> even when the\nsubscription is not paused, and the resume will have no effect.<\/p>\n<p>Currently DOM streams silently drop events when the stream is paused. This\nis a bug and will be fixed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pause([Future resumeFuture]) {\n  _source.pause(resumeFuture);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/pause.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "pause",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "resumeFuture",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Resume after a pause.<\/p>\n<p>This undoes one previous call to <a href=\"package-async_async\/DelegatingStreamSubscription\/pause.html\">pause<\/a>.\nWhen all previously calls to <a href=\"package-async_async\/DelegatingStreamSubscription\/pause.html\">pause<\/a> have been matched by a calls to\n<a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a>, possibly through a <code>resumeSignal<\/code> passed to <a href=\"package-async_async\/DelegatingStreamSubscription\/pause.html\">pause<\/a>,\nthe stream subscription may emit events again.<\/p>\n<p>It is safe to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a> even when the subscription is not paused, and the\nresume will have no effect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void resume() {\n  _source.resume();\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/resume.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "resume",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": []
        },
        {
            "desc": "<p>Creates a wrapper which throws if <code>subscription<\/code>'s events aren't instances\nof <code>T<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> to a <code>StreamSubscription&lt;T&gt;<\/code>,\nregardless of its original generic type, by asserting that its events are\ninstances of <code>T<\/code> whenever they're provided. If they're not, the\nsubscription throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static StreamSubscription&lt;T&gt; typed&lt;T&gt;(StreamSubscription subscription) =&gt;\n    subscription is StreamSubscription&lt;T&gt;\n        ? subscription\n        : new TypeSafeStreamSubscription&lt;T&gt;(subscription);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamSubscription\/typed.html",
            "isDeprecated": "0",
            "type": "dart:async.StreamSubscription",
            "name": "typed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamSubscription",
            "params": [
                {
                    "name": "subscription",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.StreamSubscription"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> is currently paused.<\/p>\n<p>If there have been more calls to <a href=\"package-async_async\/DelegatingStreamSubscription\/pause.html\">pause<\/a> than to <a href=\"package-async_async\/DelegatingStreamSubscription\/resume.html\">resume<\/a> on this\nstream subscription, the subscription is paused, and this getter\nreturns <code>true<\/code>.<\/p>\n<p>Returns <code>false<\/code> if the stream can currently emit events, or if\nthe subscription has completed or been cancelled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isPaused =&gt; _source.isPaused;<\/code><\/pre>\n        ",
            "href": "package-async_async\/DelegatingStreamSubscription\/isPaused.html",
            "name": "isPaused",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "async.DelegatingStreamSubscription",
            "params": []
        }
    ]
}