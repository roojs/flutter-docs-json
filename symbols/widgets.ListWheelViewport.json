{
    "name": "widgets.ListWheelViewport",
    "extends": [
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "ListWheelViewport",
            "type": "",
            "desc": "<p>Creates a viewport where children are rendered onto a wheel.<\/p>\n<p>The <code>diameterRatio<\/code> argument defaults to 2.0 and must not be null.<\/p>\n<p>The <code>perspective<\/code> argument defaults to 0.003 and must not be null.<\/p>\n<p>The <code>itemExtent<\/code> argument in pixels must be provided and must be positive.<\/p>\n<p>The <code>clipToSize<\/code> argument defaults to true and must not be null.<\/p>\n<p>The <code>renderChildrenOutsideViewport<\/code> argument defaults to false and must\nnot be null.<\/p>\n<p>The <code>offset<\/code> argument must be provided and must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListWheelViewport",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "diameterRatio",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "perspective",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offAxisFraction",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "useMagnifier",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "magnification",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "itemExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "clipToSize",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderChildrenOutsideViewport",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "rendering.ViewportOffset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childDelegate",
                    "type": "widgets.ListWheelChildDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/ListWheelViewport\/ListWheelViewport.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ListWheelViewport({\n  Key key,\n  this.diameterRatio = RenderListWheelViewport.defaultDiameterRatio,\n  this.perspective = RenderListWheelViewport.defaultPerspective,\n  this.offAxisFraction = 0.0,\n  this.useMagnifier = false,\n  this.magnification = 1.0,\n  @required this.itemExtent,\n  this.clipToSize = true,\n  this.renderChildrenOutsideViewport = false,\n  @required this.offset,\n  @required this.childDelegate,\n}) : assert(childDelegate != null),\n     assert(offset != null),\n     assert(diameterRatio != null),\n     assert(diameterRatio &gt; 0, RenderListWheelViewport.diameterRatioZeroMessage),\n     assert(perspective != null),\n     assert(perspective &gt; 0),\n     assert(perspective &lt;= 0.01, RenderListWheelViewport.perspectiveTooHighMessage),\n     assert(itemExtent != null),\n     assert(itemExtent &gt; 0),\n     assert(clipToSize != null),\n     assert(renderChildrenOutsideViewport != null),\n     assert(\n       !renderChildrenOutsideViewport || !clipToSize,\n       RenderListWheelViewport.clipToSizeAndRenderChildrenOutsideViewportConflict,\n     ),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createElement",
            "type": "widgets.ListWheelElement",
            "desc": "<p>RenderObjectWidgets always inflate to a <a href=\"widgets\/RenderObjectElement-class.html\">RenderObjectElement<\/a> subclass.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListWheelViewport",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/ListWheelViewport\/createElement.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nListWheelElement createElement() =&gt; ListWheelElement(this);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderListWheelViewport",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/ListWheelViewport\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListWheelViewport",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ListWheelViewport\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderListWheelViewport createRenderObject(BuildContext context) {\n  final ListWheelElement childManager = context;\n  return RenderListWheelViewport(\n    childManager: childManager,\n    offset: offset,\n    diameterRatio: diameterRatio,\n    perspective: perspective,\n    offAxisFraction: offAxisFraction,\n    useMagnifier: useMagnifier,\n    magnification: magnification,\n    itemExtent: itemExtent,\n    clipToSize: clipToSize,\n    renderChildrenOutsideViewport: renderChildrenOutsideViewport,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "updateRenderObject",
            "type": "",
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/ListWheelViewport\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/ListWheelViewport\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListWheelViewport",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "rendering.RenderListWheelViewport",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ListWheelViewport\/updateRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderListWheelViewport renderObject) {\n  renderObject\n    ..offset = offset\n    ..diameterRatio = diameterRatio\n    ..perspective = perspective\n    ..offAxisFraction = offAxisFraction\n    ..useMagnifier = useMagnifier\n    ..magnification = magnification\n    ..itemExtent = itemExtent\n    ..clipToSize = clipToSize\n    ..renderChildrenOutsideViewport = renderChildrenOutsideViewport;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "childDelegate",
            "type": "widgets.ListWheelChildDelegate",
            "types": [],
            "desc": "<p>A delegate that lazily instantiates children.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/childDelegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ListWheelChildDelegate childDelegate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "clipToSize",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to clip painted children to the inside of this viewport.<\/p>\n<p>Defaults to <code>true<\/code>. Must not be null.<\/p>\n<p>If this is false and <a href=\"widgets\/ListWheelViewport\/renderChildrenOutsideViewport.html\">renderChildrenOutsideViewport<\/a> is false, the\nfirst and last children may be painted partly outside of this scroll view.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/clipToSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool clipToSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "diameterRatio",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>A ratio between the diameter of the cylinder and the viewport's size\nin the main axis.<\/p>\n<p>A value of 1 means the cylinder has the same diameter as the viewport's\nsize.<\/p>\n<p>A value smaller than 1 means items at the edges of the cylinder are\nentirely contained inside the viewport.<\/p>\n<p>A value larger than 1 means angles less than \u00b1<a href=\"dart-math\/pi-constant.html\">pi<\/a> \/ 2 from the\ncenter of the cylinder are visible.<\/p>\n<p>The same number of children will be visible in the viewport regardless of\nthe <a href=\"widgets\/ListWheelViewport\/diameterRatio.html\">diameterRatio<\/a>. The number of children visible is based on the\nviewport's length along the main axis divided by the children's\n<a href=\"widgets\/ListWheelViewport\/itemExtent.html\">itemExtent<\/a>. Then the children are evenly distributed along the visible\nangles up to \u00b1<a href=\"dart-math\/pi-constant.html\">pi<\/a> \/ 2.<\/p>\n<p>Just as it's impossible to stretch a paper to cover the an entire\nhalf of a cylinder's surface where the cylinder has the same diameter\nas the paper's length, choosing a <a href=\"widgets\/ListWheelViewport\/diameterRatio.html\">diameterRatio<\/a> smaller than <a href=\"dart-math\/pi-constant.html\">pi<\/a>\nwill leave same gaps between the children.<\/p>\n<p>Defaults to an arbitrary but aesthetically reasonable number of 2.0.<\/p>\n<p>Must not be null and must be positive.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/diameterRatio.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double diameterRatio\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "itemExtent",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The size of the children along the main axis. Children <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>es will\nbe given the <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> of this exact size.<\/p>\n<p>Must not be null and must be positive.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/itemExtent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double itemExtent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "magnification",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The zoomed-in rate of the magnifier, if it is used.<\/p>\n<p>The default value is 1.0, which will not change anything.\nIf the value is &gt; 1.0, the center item will be zoomed in by that rate, and\nit will also be rendered as flat, not cylindrical like the rest of the list.\nThe item will be zoomed out if magnification &lt; 1.0.<\/p>\n<p>Must be positive.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/magnification.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double magnification\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "offAxisFraction",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>How much the wheel is horizontally off-center, as a fraction of its width.\nThis property creates the visual effect of looking at a vertical wheel from\nits side where its vanishing points at the edge curves to one side instead\nof looking at the wheel head-on.<\/p>\n<p>The value is horizontal distance between the wheel's center and the vertical\nvanishing line at the edges of the wheel, represented as a fraction of the\nwheel's width.<\/p>\n<p>The value <code>0.0<\/code> means the wheel is looked at head-on and its vanishing\nline runs through the center of the wheel. Negative values means moving\nthe wheel to the left of the observer, thus the edges curve to the right.\nPositive values means moving the wheel to the right of the observer,\nthus the edges curve to the left.<\/p>\n<p>The visual effect causes the wheel's edges to curve rather than moving\nthe center. So a value of <code>0.5<\/code> means the edges' vanishing line will touch\nthe wheel's size's left edge.<\/p>\n<p>Defaults to 0.0, which means looking at the wheel head-on.\nThe visual effect can be unaesthetic if this value is too far from the\nrange <code>-0.5, 0.5<\/code>.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/offAxisFraction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double offAxisFraction\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "offset",
            "type": "rendering.ViewportOffset",
            "types": [],
            "desc": "<p><a href=\"rendering\/ViewportOffset-class.html\">ViewportOffset<\/a> object describing the content that should be visible\nin the viewport.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/offset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ViewportOffset offset\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "perspective",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Perspective of the cylindrical projection.<\/p>\n<p>A number between 0 and 0.01 where 0 means looking at the cylinder from\ninfinitely far with an infinitely small field of view and 1 means looking\nat the cylinder from infinitely close with an infinitely large field of\nview (which cannot be rendered).<\/p>\n<p>Defaults to an arbitrary but aesthetically reasonable number of 0.003.\nA larger number brings the vanishing point closer and a smaller number\npushes the vanishing point further.<\/p>\n<p>Must not be null and must be positive.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/perspective.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double perspective\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "renderChildrenOutsideViewport",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to paint children inside the viewport only.<\/p>\n<p>If false, every child will be painted. However the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> is still\nthe size of the viewport and detects gestures inside only.<\/p>\n<p>Defaults to <code>false<\/code>. Must not be null. Cannot be true if <a href=\"widgets\/ListWheelViewport\/clipToSize.html\">clipToSize<\/a>\nis also true since children outside the viewport will be clipped, and\ntherefore cannot render children outside the viewport.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/renderChildrenOutsideViewport.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool renderChildrenOutsideViewport\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "useMagnifier",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to use the magnifier for the center item of the wheel.<\/p>\n        ",
            "memberOf": "widgets.ListWheelViewport",
            "isConstant": false,
            "href": "widgets\/ListWheelViewport\/useMagnifier.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool useMagnifier\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/ListWheelViewport-class.html",
    "desc": "<p>A viewport showing a subset of children on a wheel.<\/p>\n<p>Typically used with <a href=\"widgets\/ListWheelScrollView-class.html\">ListWheelScrollView<\/a>, this viewport is similar to\n<a href=\"widgets\/Viewport-class.html\">Viewport<\/a> in that it shows a subset of children in a scrollable based\non the scrolling offset and the children's dimensions. But uses\n<a href=\"rendering\/RenderListWheelViewport-class.html\">RenderListWheelViewport<\/a> to display the children on a wheel.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListWheelScrollView-class.html\">ListWheelScrollView<\/a>, widget that combines this viewport with a scrollable.<\/li>\n<li>\n<a href=\"rendering\/RenderListWheelViewport-class.html\">RenderListWheelViewport<\/a>, the render object that renders the children\non a wheel.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ListWheelViewport"
}