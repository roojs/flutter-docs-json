{
    "name": "pub_semver.VersionConstraint",
    "extends": [],
    "memberOf": "pub_semver",
    "events": [],
    "methods": [
        {
            "name": "allows",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if this constraint allows <code>version<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "version",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/allows.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version version);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "allowsAll",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/allowsAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "allowsAny",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/allowsAny.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "VersionConstraint.compatibleWith",
            "type": "",
            "desc": "<p>Creates a version constraint which allows all versions that are\nbackward compatible with <code>version<\/code>.<\/p>\n<p>Versions are considered backward compatible with <code>version<\/code> if they\nare greater than or equal to <code>version<\/code>, but less than the next breaking\nversion (<a href=\"package-pub_semver_pub_semver\/Version\/nextBreaking.html\">Version.nextBreaking<\/a>) of <code>version<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "version",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.compatibleWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.compatibleWith(Version version) =&gt;\n    new CompatibleWithVersionRange(version);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "difference",
            "type": "pub_semver.VersionConstraint",
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/difference.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersect",
            "type": "pub_semver.VersionConstraint",
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/intersect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "VersionConstraint.intersection",
            "type": "",
            "desc": "<p>Creates a new version constraint that is the intersection of\n<code>constraints<\/code>.<\/p>\n<p>It only allows versions that all of those constraints allow. If\nconstraints is empty, then it returns a VersionConstraint that allows\nall versions.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "constraints",
                    "type": "dart:core.Iterable<pub_semver.VersionConstraint>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "pub_semver.VersionConstraint"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.intersection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.intersection(\n    Iterable&lt;VersionConstraint&gt; constraints) {\n  var constraint = new VersionRange();\n  for (var other in constraints) {\n    constraint = constraint.intersect(other);\n  }\n  return constraint;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "VersionConstraint.parse",
            "type": "",
            "desc": "<p>Parses a version constraint.<\/p>\n<p>This string is one of:<\/p>\n<ul>\n<li>\"any\". <a href=\"package-pub_semver_pub_semver\/VersionConstraint\/any.html\">any<\/a> version.<\/li>\n<li>\"^\" followed by a version string. Versions compatible with\n(<a href=\"package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.compatibleWith.html\">VersionConstraint.compatibleWith<\/a>) the version.<\/li>\n<li>a series of version parts. Each part can be one of:<ul>\n<li>A version string like <code>1.2.3<\/code>. In other words, anything that can be\nparsed by <a href=\"package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.parse.html\">Version.parse()<\/a>.<\/li>\n<li>A comparison operator (<code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, or <code>&gt;=<\/code>) followed by a\nversion string.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Whitespace is ignored.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>any\n^0.7.2\n^1.0.0-alpha\n1.2.3-alpha\n&lt;=5.1.4\n&gt;2.0.4 &lt;= 2.4.6\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.parse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.parse(String text) {\n  var originalText = text;\n\n  skipWhitespace() {\n    text = text.trim();\n  }\n\n  skipWhitespace();\n\n  \/\/ Handle the \"any\" constraint.\n  if (text == \"any\") return any;\n\n  \/\/ Try to parse and consume a version number.\n  Version matchVersion() {\n    var version = START_VERSION.firstMatch(text);\n    if (version == null) return null;\n\n    text = text.substring(version.end);\n    return new Version.parse(version[0]);\n  }\n\n  \/\/ Try to parse and consume a comparison operator followed by a version.\n  VersionRange matchComparison() {\n    var comparison = START_COMPARISON.firstMatch(text);\n    if (comparison == null) return null;\n\n    var op = comparison[0];\n    text = text.substring(comparison.end);\n    skipWhitespace();\n\n    var version = matchVersion();\n    if (version == null) {\n      throw new FormatException('Expected version number after \"$op\" in '\n          '\"$originalText\", got \"$text\".');\n    }\n\n    switch (op) {\n      case '&lt;=':\n        return new VersionRange(max: version, includeMax: true);\n      case '&lt;':\n        return new VersionRange(\n            max: version,\n            includeMax: false,\n            alwaysIncludeMaxPreRelease: true);\n      case '&gt;=':\n        return new VersionRange(min: version, includeMin: true);\n      case '&gt;':\n        return new VersionRange(min: version, includeMin: false);\n    }\n    throw \"Unreachable.\";\n  }\n\n  \/\/ Try to parse the \"^\" operator followed by a version.\n  matchCompatibleWith() {\n    if (!text.startsWith(COMPATIBLE_WITH)) return null;\n\n    text = text.substring(COMPATIBLE_WITH.length);\n    skipWhitespace();\n\n    var version = matchVersion();\n    if (version == null) {\n      throw new FormatException('Expected version number after '\n          '\"$COMPATIBLE_WITH\" in \"$originalText\", got \"$text\".');\n    }\n\n    if (text.isNotEmpty) {\n      throw new FormatException('Cannot include other constraints with '\n          '\"$COMPATIBLE_WITH\" constraint in \"$originalText\".');\n    }\n\n    return new VersionConstraint.compatibleWith(version);\n  }\n\n  var compatibleWith = matchCompatibleWith();\n  if (compatibleWith != null) return compatibleWith;\n\n  Version min;\n  var includeMin = false;\n  Version max;\n  var includeMax = false;\n\n  while (true) {\n    skipWhitespace();\n\n    if (text.isEmpty) break;\n\n    var newRange = matchVersion() ?? matchComparison();\n    if (newRange == null) {\n      throw new FormatException('Could not parse version \"$originalText\". '\n          'Unknown text at \"$text\".');\n    }\n\n    if (newRange.min != null) {\n      if (min == null || newRange.min &gt; min) {\n        min = newRange.min;\n        includeMin = newRange.includeMin;\n      } else if (newRange.min == min &amp;&amp; !newRange.includeMin) {\n        includeMin = false;\n      }\n    }\n\n    if (newRange.max != null) {\n      if (max == null || newRange.max &lt; max) {\n        max = newRange.max;\n        includeMax = newRange.includeMax;\n      } else if (newRange.max == max &amp;&amp; !newRange.includeMax) {\n        includeMax = false;\n      }\n    }\n  }\n\n  if (min == null &amp;&amp; max == null) {\n    throw new FormatException('Cannot parse an empty string.');\n  }\n\n  if (min != null &amp;&amp; max != null) {\n    if (min &gt; max) return VersionConstraint.empty;\n    if (min == max) {\n      if (includeMin &amp;&amp; includeMax) return min;\n      return VersionConstraint.empty;\n    }\n  }\n\n  return new VersionRange(\n      min: min, includeMin: includeMin, max: max, includeMax: includeMax);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "union",
            "type": "pub_semver.VersionConstraint",
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/union.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "VersionConstraint.unionOf",
            "type": "",
            "desc": "<p>Creates a new version constraint that is the union of <code>constraints<\/code>.<\/p>\n<p>It allows any versions that any of those constraints allows. If\n<code>constraints<\/code> is empty, this returns a constraint that allows no versions.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.VersionConstraint",
            "sig": "",
            "params": [
                {
                    "name": "constraints",
                    "type": "dart:core.Iterable<pub_semver.VersionConstraint>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "pub_semver.VersionConstraint"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/VersionConstraint.unionOf.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory VersionConstraint.unionOf(Iterable&lt;VersionConstraint&gt; constraints) {\n  var flattened = constraints.expand((constraint) {\n    if (constraint.isEmpty) return [];\n    if (constraint is VersionUnion) return constraint.ranges;\n    return [constraint];\n  }).toList();\n\n  if (flattened.isEmpty) return VersionConstraint.empty;\n\n  if (flattened.any((constraint) =&gt; constraint.isAny)) {\n    return VersionConstraint.any;\n  }\n\n  \/\/ Only allow Versions and VersionRanges here so we can more easily reason\n  \/\/ about everything in [flattened]. _EmptyVersions and VersionUnions are\n  \/\/ filtered out above.\n  for (var constraint in flattened) {\n    if (constraint is VersionRange) continue;\n    throw new ArgumentError('Unknown VersionConstraint type $constraint.');\n  }\n\n  flattened.sort();\n\n  var merged = &lt;VersionRange&gt;[];\n  for (var constraint in flattened) {\n    \/\/ Merge this constraint with the previous one, but only if they touch.\n    if (merged.isEmpty ||\n        (!merged.last.allowsAny(constraint) &amp;&amp;\n            !areAdjacent(merged.last, constraint))) {\n      merged.add(constraint);\n    } else {\n      merged[merged.length - 1] = merged.last.union(constraint);\n    }\n  }\n\n  if (merged.length == 1) return merged.single;\n  return new VersionUnion.fromRanges(merged);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "any",
            "type": "pub_semver.VersionConstraint",
            "types": [],
            "desc": "<p>A <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows all versions.<\/p>\n        ",
            "memberOf": "pub_semver.VersionConstraint",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/any.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static VersionConstraint any = new VersionRange()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "empty",
            "type": "pub_semver.VersionConstraint",
            "types": [],
            "desc": "<p>A <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows no versions -- the empty set.<\/p>\n        ",
            "memberOf": "pub_semver.VersionConstraint",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/empty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static VersionConstraint empty = const _EmptyVersion()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isAny",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
            "memberOf": "pub_semver.VersionConstraint",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/isAny.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
            "memberOf": "pub_semver.VersionConstraint",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/VersionConstraint\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-pub_semver_pub_semver\/VersionConstraint-class.html",
    "desc": "<p>A <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> is a predicate that can determine whether a given\nversion is valid or not.<\/p>\n<p>For example, a \"&gt;= 2.0.0\" constraint allows any version that is \"2.0.0\" or\ngreater. Version objects themselves implement this to match a specific\nversion.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "VersionConstraint"
}