{
    "name": "widgets.ScrollPhysics",
    "extends": [],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "ScrollPhysics",
            "type": "",
            "desc": "<p>Creates an object with the default scroll physics.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "parent",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/ScrollPhysics\/ScrollPhysics.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ScrollPhysics({ this.parent });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "applyBoundaryConditions",
            "type": "dart:core.double",
            "desc": "<p>Determines the overscroll by applying the boundary conditions.<\/p>\n<p>Called by <a href=\"widgets\/ScrollPhysics\/applyBoundaryConditions.html\">ScrollPosition.applyBoundaryConditions<\/a>, which is called by\n<a href=\"widgets\/ScrollPosition\/setPixels.html\">ScrollPosition.setPixels<\/a> just before the <a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a> value\nis updated, to determine how much of the offset is to be clamped off and\nsent to <a href=\"widgets\/ScrollPosition\/didOverscrollBy.html\">ScrollPosition.didOverscrollBy<\/a>.<\/p>\n<p>The <code>value<\/code> argument is guaranteed to not equal the <a href=\"widgets\/ScrollMetrics\/pixels.html\">ScrollMetrics.pixels<\/a>\nof the <code>position<\/code> argument when this is called.<\/p>\n<p>It is possible for this method to be called when the <code>position<\/code> describes\nan already-out-of-bounds position. In that case, the boundary conditions\nshould usually only prevent a further increase in the extent to which the\nposition is out of bounds, allowing a decrease to be applied successfully,\nso that (for instance) an animation can smoothly snap an out of bounds\nposition to the bounds. See <a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a>.<\/p>\n<p>This method must not clamp parts of the offset that are entirely within\nthe bounds described by the given <code>position<\/code>.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<p><a href=\"widgets\/BouncingScrollPhysics-class.html\">BouncingScrollPhysics<\/a> returns zero. In other words, it allows scrolling\npast the boundary unhindered.<\/p>\n<p><a href=\"widgets\/ClampingScrollPhysics-class.html\">ClampingScrollPhysics<\/a> returns the amount by which the value is beyond\nthe position or the boundary, whichever is furthest from the content. In\nother words, it disallows scrolling past the boundary, but allows\nscrolling back from being overscrolled, if for some reason the position\nends up overscrolled.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollMetrics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/applyBoundaryConditions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double applyBoundaryConditions(ScrollMetrics position, double value) {\n  if (parent == null)\n    return 0.0;\n  return parent.applyBoundaryConditions(position, value);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "applyPhysicsToUserOffset",
            "type": "dart:core.double",
            "desc": "<p>Used by <a href=\"widgets\/DragScrollActivity-class.html\">DragScrollActivity<\/a> and other user-driven activities to convert\nan offset in logical pixels as provided by the <a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a> into a\ndelta to apply (subtract from the current position) using\n<a href=\"widgets\/ScrollActivityDelegate\/setPixels.html\">ScrollActivityDelegate.setPixels<\/a>.<\/p>\n<p>This is used by some <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> subclasses to apply friction during\noverscroll situations.<\/p>\n<p>This method must not adjust parts of the offset that are entirely within\nthe bounds described by the given <code>position<\/code>.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollMetrics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/applyPhysicsToUserOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double applyPhysicsToUserOffset(ScrollMetrics position, double offset) {\n  if (parent == null)\n    return offset;\n  return parent.applyPhysicsToUserOffset(position, offset);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "applyTo",
            "type": "widgets.ScrollPhysics",
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> where the <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> has been replaced with the <code>ancestor<\/code>.<\/p>\n<p>If this scroll physics object already has a parent, then this method\nis applied recursively and ancestor will appear at the end of the\nexisting chain of parents.<\/p>\n<p>The returned object will combine some of the behaviors from this\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> instance and some of the behaviors from <code>ancestor<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPhysics\/buildParent.html\">buildParent<\/a>, a utility method that's often used to define <a href=\"widgets\/ScrollPhysics\/applyTo.html\">applyTo<\/a>\nmethods for ScrollPhysics subclasses.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "ancestor",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/applyTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return ScrollPhysics(parent: buildParent(ancestor));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "buildParent",
            "type": "widgets.ScrollPhysics",
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return ancestor, otherwise recursively build a\nScrollPhysics that has <code>ancestor<\/code> as its parent.<\/p>\n<p>This method is typically used to define <a href=\"widgets\/ScrollPhysics\/applyTo.html\">applyTo<\/a> methods like:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">FooScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return FooScrollPhysics(parent: buildParent(ancestor));\n}\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "ancestor",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/buildParent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nScrollPhysics buildParent(ScrollPhysics ancestor) =&gt; parent?.applyTo(ancestor) ?? ancestor;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "carriedMomentum",
            "type": "dart:core.double",
            "desc": "<p>Returns the velocity carried on repeated flings.<\/p>\n<p>The function is applied to the existing scroll velocity when another\nscroll drag is applied in the same direction.<\/p>\n<p>By default, physics for platforms other than iOS doesn't carry momentum.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "existingVelocity",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/carriedMomentum.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double carriedMomentum(double existingVelocity) {\n  if (parent == null)\n    return 0.0;\n  return parent.carriedMomentum(existingVelocity);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createBallisticSimulation",
            "type": "physics.Simulation",
            "desc": "<p>Returns a simulation for ballistic scrolling starting from the given\nposition with the given velocity.<\/p>\n<p>This is used by <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> in the\n<a href=\"widgets\/ScrollPositionWithSingleContext\/goBallistic.html\">ScrollPositionWithSingleContext.goBallistic<\/a> method. If the result\nis non-null, <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> will begin a\n<a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a> with the returned value. Otherwise, it will\nbegin an idle activity instead.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollMetrics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "velocity",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/createBallisticSimulation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Simulation createBallisticSimulation(ScrollMetrics position, double velocity) {\n  if (parent == null)\n    return null;\n  return parent.createBallisticSimulation(position, velocity);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "shouldAcceptUserOffset",
            "type": "dart:core.bool",
            "desc": "<p>Whether the scrollable should let the user adjust the scroll offset, for\nexample by dragging.<\/p>\n<p>By default, the user can manipulate the scroll offset if, and only if,\nthere is actually content outside the viewport to reveal.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollMetrics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/shouldAcceptUserOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldAcceptUserOffset(ScrollMetrics position) {\n  if (parent == null)\n    return position.pixels != 0.0 || position.minScrollExtent != position.maxScrollExtent;\n  return parent.shouldAcceptUserOffset(position);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScrollPhysics",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/ScrollPhysics\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (parent == null)\n    return runtimeType.toString();\n  return '$runtimeType -&gt; $parent';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "allowImplicitScrolling",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether a viewport is allowed to change its scroll position implicitly in\nresponds to a call to <a href=\"rendering\/RenderObject\/showOnScreen.html\">RenderObject.showOnScreen<\/a>.<\/p>\n<p><a href=\"rendering\/RenderObject\/showOnScreen.html\">RenderObject.showOnScreen<\/a> is for example used to bring a text field\nfully on screen after it has received focus. This property controls\nwhether the viewport associated with this object is allowed to change the\nscroll position to fulfill such a request.<\/p>\n        ",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/allowImplicitScrolling.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get allowImplicitScrolling =&gt; true;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "dragStartDistanceMotionThreshold",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The minimum amount of pixel distance drags must move by to start motion\nthe first time or after each time the drag motion stopped.<\/p>\n<p>If null, no minimum threshold is enforced.<\/p>\n        ",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/dragStartDistanceMotionThreshold.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get dragStartDistanceMotionThreshold =&gt; parent?.dragStartDistanceMotionThreshold;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "maxFlingVelocity",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Scroll fling velocity magnitudes will be clamped to this value.<\/p>\n        ",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/maxFlingVelocity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get maxFlingVelocity =&gt; parent?.maxFlingVelocity ?? kMaxFlingVelocity;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "minFlingDistance",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The minimum distance an input pointer drag must have moved to\nto be considered a scroll fling gesture.<\/p>\n<p>This value is typically compared with the distance traveled along the\nscrolling axis.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/VelocityTracker\/getVelocityEstimate.html\">VelocityTracker.getVelocityEstimate<\/a>, which computes the velocity\nof a press-drag-release gesture.<\/li><\/ul>",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/minFlingDistance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minFlingDistance =&gt; parent?.minFlingDistance ?? kTouchSlop;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "minFlingVelocity",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The minimum velocity for an input pointer drag to be considered a\nscroll fling.<\/p>\n<p>This value is typically compared with the magnitude of fling gesture's\nvelocity along the scrolling axis.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/VelocityTracker\/getVelocityEstimate.html\">VelocityTracker.getVelocityEstimate<\/a>, which computes the velocity\nof a press-drag-release gesture.<\/li><\/ul>",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/minFlingVelocity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minFlingVelocity =&gt; parent?.minFlingVelocity ?? kMinFlingVelocity;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "parent",
            "type": "widgets.ScrollPhysics",
            "types": [],
            "desc": "<p>If non-null, determines the default behavior for each method.<\/p>\n<p>If a subclass of <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> does not override a method, that subclass\nwill inherit an implementation from this base class that defers to\n<a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a>. This mechanism lets you assemble novel combinations of\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> subclasses at runtime.<\/p>\n        ",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/parent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics parent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "spring",
            "type": "physics.SpringDescription",
            "types": [],
            "desc": "<p>The spring to use for ballistic simulations.<\/p>\n        ",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/spring.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SpringDescription get spring =&gt; parent?.spring ?? _kDefaultSpring;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tolerance",
            "type": "physics.Tolerance",
            "types": [],
            "desc": "<p>The tolerance to use for ballistic simulations.<\/p>\n        ",
            "memberOf": "widgets.ScrollPhysics",
            "isConstant": false,
            "href": "widgets\/ScrollPhysics\/tolerance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Tolerance get tolerance =&gt; parent?.tolerance ?? _kDefaultTolerance;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.AlwaysScrollableScrollPhysics",
        "widgets.BouncingScrollPhysics",
        "widgets.ClampingScrollPhysics",
        "widgets.FixedExtentScrollPhysics",
        "widgets.NeverScrollableScrollPhysics",
        "widgets.PageScrollPhysics"
    ],
    "realImplementors": [
        "widgets.AlwaysScrollableScrollPhysics",
        "widgets.BouncingScrollPhysics",
        "widgets.ClampingScrollPhysics",
        "widgets.FixedExtentScrollPhysics",
        "widgets.NeverScrollableScrollPhysics",
        "widgets.PageScrollPhysics"
    ],
    "cn": [],
    "href": "widgets\/ScrollPhysics-class.html",
    "desc": "<p>Determines the physics of a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n<p>For example, determines how the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> will behave when the user\nreaches the maximum scroll extent or when the user stops scrolling.<\/p>\n<p>When starting a physics <a href=\"physics\/Simulation-class.html\">Simulation<\/a>, the current scroll position and\nvelocity are used as the initial conditions for the particle in the\nsimulation. The movement of the particle in the simulation is then used to\ndetermine the scroll position for the widget.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ScrollPhysics"
}