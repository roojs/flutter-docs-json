{
    "desc": "<p>A widget that displays a <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a> directly.<\/p>\n<p>The image is painted using <a href=\"painting\/paintImage.html\">paintImage<\/a>, which describes the meanings of the\nvarious fields on this class in more detail.<\/p>\n<p>This widget is rarely used directly. Instead, consider using <a href=\"widgets\/Image-class.html\">Image<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "widgets\/RawImage-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.RawImage",
    "shortname": "RawImage",
    "extends": [
        "widgets.LeafRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that displays an image.<\/p>\n<p>The <code>scale<\/code>, <code>alignment<\/code>, <code>repeat<\/code>, <code>matchTextDirection<\/code> and <code>filterQuality<\/code> arguments must\nnot be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawImage({\n  Key key,\n  this.image,\n  this.width,\n  this.height,\n  this.scale = 1.0,\n  this.color,\n  this.colorBlendMode,\n  this.fit,\n  this.alignment = Alignment.center,\n  this.repeat = ImageRepeat.noRepeat,\n  this.centerSlice,\n  this.matchTextDirection = false,\n  this.invertColors = false,\n  this.filterQuality = FilterQuality.low,\n}) : assert(scale != null),\n     assert(alignment != null),\n     assert(repeat != null),\n     assert(matchTextDirection != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/RawImage\/RawImage.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.RawImage",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "centerSlice",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "colorBlendMode",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.BlendMode"
                },
                {
                    "name": "filterQuality",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.FilterQuality"
                },
                {
                    "name": "fit",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.BoxFit"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "image",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Image"
                },
                {
                    "name": "invertColors",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "matchTextDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "repeat",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ImageRepeat"
                },
                {
                    "name": "scale",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/LeafRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderImage createRenderObject(BuildContext context) {\n  assert((!matchTextDirection &amp;&amp; alignment is Alignment) || debugCheckHasDirectionality(context));\n  return RenderImage(\n    image: image,\n    width: width,\n    height: height,\n    scale: scale,\n    color: color,\n    colorBlendMode: colorBlendMode,\n    fit: fit,\n    alignment: alignment,\n    repeat: repeat,\n    centerSlice: centerSlice,\n    matchTextDirection: matchTextDirection,\n    textDirection: matchTextDirection || alignment is! Alignment ? Directionality.of(context) : null,\n    invertColors: invertColors,\n    filterQuality: filterQuality,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RawImage\/createRenderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderImage",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RawImage",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/RawImage\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;ui.Image&gt;('image', image));\n  properties.add(DoubleProperty('width', width, defaultValue: null));\n  properties.add(DoubleProperty('height', height, defaultValue: null));\n  properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('color', color, defaultValue: null));\n  properties.add(EnumProperty&lt;BlendMode&gt;('colorBlendMode', colorBlendMode, defaultValue: null));\n  properties.add(EnumProperty&lt;BoxFit&gt;('fit', fit, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;AlignmentGeometry&gt;('alignment', alignment, defaultValue: null));\n  properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n  properties.add(DiagnosticsProperty&lt;Rect&gt;('centerSlice', centerSlice, defaultValue: null));\n  properties.add(FlagProperty('matchTextDirection', value: matchTextDirection, ifTrue: 'match text direction'));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('invertColors', invertColors));\n  properties.add(EnumProperty&lt;FilterQuality&gt;('filterQuality', filterQuality));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RawImage\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RawImage",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/RawImage\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/LeafRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderImage renderObject) {\n  renderObject\n    ..image = image\n    ..width = width\n    ..height = height\n    ..scale = scale\n    ..color = color\n    ..colorBlendMode = colorBlendMode\n    ..alignment = alignment\n    ..fit = fit\n    ..repeat = repeat\n    ..centerSlice = centerSlice\n    ..matchTextDirection = matchTextDirection\n    ..textDirection = matchTextDirection || alignment is! Alignment ? Directionality.of(context) : null\n    ..invertColors = invertColors\n    ..filterQuality = filterQuality;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RawImage\/updateRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RawImage",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderImage"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How to align the image within its bounds.<\/p>\n<p>The alignment aligns the given position in the image to the given position\nin the layout bounds. For example, an <a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (-1.0,\n-1.0) aligns the image to the top-left corner of its layout bounds, while a\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (1.0, 1.0) aligns the bottom right of the\nimage with the bottom right corner of its layout bounds. Similarly, an\nalignment of (0.0, 1.0) aligns the bottom middle of the image with the\nmiddle of the bottom edge of its layout bounds.<\/p>\n<p>To display a subpart of an image, consider using a <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> and\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>.<\/p>\n<p>If the <a href=\"widgets\/RawImage\/alignment.html\">alignment<\/a> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>-dependent (i.e. if it is a\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), then an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> widget\nmust be in scope.<\/p>\n<p>Defaults to <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/alignment.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>The center slice for a nine-patch image.<\/p>\n<p>The region of the image inside the center slice will be stretched both\nhorizontally and vertically to fit the image into its destination. The\nregion of the image above and below the center slice will be stretched\nonly horizontally and the region of the image to the left and right of\nthe center slice will be stretched only vertically.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Rect centerSlice\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/centerSlice.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>If non-null, this color is blended with each image pixel using <a href=\"widgets\/RawImage\/colorBlendMode.html\">colorBlendMode<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/color.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>Used to combine <a href=\"widgets\/RawImage\/color.html\">color<\/a> with this image.<\/p>\n<p>The default is <a href=\"dart-ui\/BlendMode-class.html\">BlendMode.srcIn<\/a>. In terms of the blend mode, <a href=\"widgets\/RawImage\/color.html\">color<\/a> is\nthe source and this image is the destination.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>, which includes an illustration of the effect of each blend mode.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BlendMode colorBlendMode\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/colorBlendMode.html",
            "isDeprecated": "0",
            "type": "dart:ui.BlendMode",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>Used to set the filterQuality of the image\nUse the \"low\" quality setting to scale the image, which corresponds to\nbilinear interpolation, rather than the default \"none\" which corresponds\nto nearest-neighbor.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FilterQuality filterQuality\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/filterQuality.html",
            "isDeprecated": "0",
            "type": "dart:ui.FilterQuality",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>How to inscribe the image into the space allocated during layout.<\/p>\n<p>The default varies based on the other fields. See the discussion at\n<a href=\"painting\/paintImage.html\">paintImage<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxFit fit\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/fit.html",
            "isDeprecated": "0",
            "type": "painting.BoxFit",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>If non-null, require the image to have this height.<\/p>\n<p>If null, the image will pick a size that best preserves its intrinsic\naspect ratio.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/height.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>The image to display.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ui.Image image\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/image.html",
            "isDeprecated": "0",
            "type": "dart:ui.Image",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>Whether the colors of the image are inverted when drawn.<\/p>\n<p>inverting the colors of an image applies a new color filter to the paint.\nIf there is another specified color filter, the invert will be applied\nafter it. This is primarily used for implementing smart invert on iOS.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/RawImage\/invertColors.html\">Paint.invertColors<\/a>, for the dart:ui implementation.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool invertColors\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/invertColors.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>Whether to paint the image in the direction of the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>If this is true, then in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> contexts, the image will be\ndrawn with its origin in the top left (the \"normal\" painting direction for\nimages); and in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> contexts, the image will be drawn with\na scaling factor of -1 in the horizontal direction so that the origin is\nin the top right.<\/p>\n<p>This is occasionally used with images in right-to-left environments, for\nimages that were designed for left-to-right locales. Be careful, when\nusing this, to not flip images with integral shadows, text, or other\neffects that will look incorrect when flipped.<\/p>\n<p>If this is true, there must be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> widget in\nscope.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool matchTextDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/matchTextDirection.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>How to paint any portions of the layout bounds not covered by the image.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageRepeat repeat\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/repeat.html",
            "isDeprecated": "0",
            "type": "painting.ImageRepeat",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>Specifies the image's scale.<\/p>\n<p>Used when determining the best display size for the image.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/scale.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.RawImage",
            "params": []
        },
        {
            "desc": "<p>If non-null, require the image to have this width.<\/p>\n<p>If null, the image will pick a size that best preserves its intrinsic\naspect ratio.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawImage\/width.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.RawImage",
            "params": []
        }
    ]
}