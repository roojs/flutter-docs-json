{
    "desc": "<p>Runs asynchronous functions and caches the result for a period of time.<\/p>\n<p>This class exists to cover the pattern of having potentially expensive code\nsuch as file I\/O, network access, or isolate computation that's unlikely to\nchange quickly run fewer times. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">final _usersCache = new AsyncCache&lt;List&lt;String&gt;&gt;(const Duration(hours: 1));\n\n\/\/\/ Uses the cache if it exists, otherwise calls the closure:\nFuture&lt;List&lt;String&gt;&gt; get onlineUsers =&gt; _usersCache.fetch(() {\n  \/\/ Actually fetch online users here.\n});\n<\/code><\/pre>\n<p>This class's timing can be mocked using <a href=\"https:\/\/pub.dartlang.org\/packages\/fake_async\"><code>fake_async<\/code><\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/AsyncCache-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.AsyncCache",
    "shortname": "AsyncCache",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a cache that invalidates its contents after <code>duration<\/code> has passed.<\/p>\n<p>The <code>duration<\/code> starts counting after the Future returned by <a href=\"package-async_async\/AsyncCache\/fetch.html\">fetch<\/a>\ncompletes, or after the Stream returned by <a href=\"package-async_async\/AsyncCache\/fetchStream.html\">fetchStream<\/a> emits a done\nevent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AsyncCache(this._duration);<\/code><\/pre>\n    ",
            "href": "package-async_async\/AsyncCache\/AsyncCache.html",
            "isDeprecated": false,
            "type": "",
            "name": "AsyncCache",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.AsyncCache",
            "params": [
                {
                    "name": "_duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Returns a cached value from a previous call to <a href=\"package-async_async\/AsyncCache\/fetch.html\">fetch<\/a>, or runs <code>callback<\/code>\nto compute a new one.<\/p>\n<p>If <a href=\"package-async_async\/AsyncCache\/fetch.html\">fetch<\/a> has been called recently enough, returns its previous return\nvalue. Otherwise, runs <code>callback<\/code> and returns its new return value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; fetch(Future&lt;T&gt; callback()) async {\n  if (_cachedStreamSplitter != null) {\n    throw new StateError('Previously used to cache via `fetchStream`');\n  }\n  if (_cachedValueFuture == null) {\n    _cachedValueFuture = callback();\n    await _cachedValueFuture;\n    _startStaleTimer();\n  }\n  return _cachedValueFuture;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/AsyncCache\/fetch.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "fetch",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.AsyncCache",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Returns a cached stream from a previous call to <a href=\"package-async_async\/AsyncCache\/fetchStream.html\">fetchStream<\/a>, or runs\n<code>callback<\/code> to compute a new stream.<\/p>\n<p>If <a href=\"package-async_async\/AsyncCache\/fetchStream.html\">fetchStream<\/a> has been called recently enough, returns a copy of its\nprevious return value. Otherwise, runs <code>callback<\/code> and returns its new\nreturn value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; fetchStream(Stream&lt;T&gt; callback()) {\n  if (_cachedValueFuture != null) {\n    throw new StateError('Previously used to cache via `fetch`');\n  }\n  if (_cachedStreamSplitter == null) {\n    _cachedStreamSplitter = new StreamSplitter(callback()\n        .transform(new StreamTransformer.fromHandlers(handleDone: (sink) {\n      _startStaleTimer();\n      sink.close();\n    })));\n  }\n  return _cachedStreamSplitter.split();\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/AsyncCache\/fetchStream.html",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "name": "fetchStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.AsyncCache",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Removes any cached value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void invalidate() {\n  \/\/ TODO: This does not return a future, but probably should.\n  _cachedValueFuture = null;\n  \/\/ TODO: This does not await, but probably should.\n  _cachedStreamSplitter?.close();\n  _cachedStreamSplitter = null;\n  _stale?.cancel();\n  _stale = null;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/AsyncCache\/invalidate.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "invalidate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.AsyncCache",
            "params": []
        }
    ],
    "props": []
}