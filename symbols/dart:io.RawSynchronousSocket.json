{
    "desc": "<p>A low-level class for communicating synchronously over a TCP socket.<\/p>\n<p>Warning: <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a> should probably only be used to connect to\n'localhost'. The operations below will block the calling thread to wait for\na response from the network. The thread can process no other events while\nwaiting for these operations to complete. <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a> is not\nsuitable for applications that require high performance or asynchronous I\/O\nsuch as a server. Instead such applications should use the non-blocking\nsockets and asynchronous operations in the Socket or RawSocket classes.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/RawSynchronousSocket-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.RawSynchronousSocket",
    "shortname": "RawSynchronousSocket",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-io\/RawSynchronousSocket\/RawSynchronousSocket.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        },
        {
            "desc": "<p>Returns the number of received and unread bytes in the socket that can be\nread.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int available();<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/available.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        },
        {
            "desc": "<p>Closes the <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a>.<\/p>\n<p>Once <a href=\"dart-io\/RawSynchronousSocket\/closeSync.html\">closeSync<\/a> has been called, attempting to call <a href=\"dart-io\/RawSynchronousSocket\/readSync.html\">readSync<\/a>,\n<a href=\"dart-io\/RawSynchronousSocket\/readIntoSync.html\">readIntoSync<\/a>, <a href=\"dart-io\/RawSynchronousSocket\/writeFromSync.html\">writeFromSync<\/a>, <a href=\"dart-io\/RawSynchronousSocket\/remoteAddress.html\">remoteAddress<\/a>, and <a href=\"dart-io\/RawSynchronousSocket\/remotePort.html\">remotePort<\/a> will\ncause a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> to be thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void closeSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/closeSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        },
        {
            "desc": "<p>Creates a new socket connection and returns a <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a>.<\/p>\n<p><code>host<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>host<\/code> is a\n<a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawSynchronousSocket\/connectSync.html\">connectSync<\/a> will perform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and try\nall returned <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es, until connected. Unless a\nconnection was established, the error from the first failing connection is\nreturned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static RawSynchronousSocket connectSync(host, int port);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/connectSync.html",
            "isDeprecated": "0",
            "type": "dart:io.RawSynchronousSocket",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": [
                {
                    "name": "host",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the socket into the range:\n[<code>start<\/code>,<code>end<\/code>).<\/p>\n<p>Reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the socket. If <code>start<\/code> is present,\nthe bytes will be filled into <code>buffer<\/code> from index <code>start<\/code>, otherwise index<\/p>\n<ol start=\"0\"><li>If <code>end<\/code> is present, <code>end<\/code> - <code>start<\/code> bytes will be read into <code>buffer<\/code>,\notherwise up to <code>buffer.length<\/code>. If <code>end<\/code> == <code>start<\/code>, no bytes are read.\nReturns the number of bytes read.<\/li><\/ol>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readIntoSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/readIntoSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": [
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Reads up to <code>bytes<\/code> bytes from the socket.<\/p>\n<p>Blocks and waits for a response of up to a specified number of bytes\nsent by the socket. <code>bytes<\/code> specifies the maximum number of bytes to\nbe read. Returns the list of bytes read, which could be less than the\nvalue specified by <code>bytes<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; readSync(int bytes);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/readSync.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": [
                {
                    "name": "bytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Shutdown a socket in the provided direction.<\/p>\n<p>Calling shutdown will never throw an exception and calling it several times\nis supported. If both <a class=\"deprecated\" href=\"dart-io\/SocketDirection\/RECEIVE-constant.html\">SocketDirection.RECEIVE<\/a> and <a class=\"deprecated\" href=\"dart-io\/SocketDirection\/SEND-constant.html\">SocketDirection.SEND<\/a>\ndirections are closed, the socket is closed completely, the same as if\n<a href=\"dart-io\/RawSynchronousSocket\/closeSync.html\">closeSync<\/a> has been called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shutdown(SocketDirection direction);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/shutdown.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": [
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.SocketDirection"
                }
            ]
        },
        {
            "desc": "<p>Writes data from a specified range in a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> to the socket.<\/p>\n<p>Writes into the socket from a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a>. If <code>start<\/code> is present, the bytes\nwill be written to the socket starting from index <code>start<\/code>. If <code>start<\/code> is\nnot present, the bytes will be written starting from index 0. If <code>end<\/code> is\npresent, the <code>end<\/code> - <code>start<\/code> bytes will be written into the socket starting\nat index <code>start<\/code>. If <code>end<\/code> is not provided, <code>buffer.length<\/code> elements will\nbe written to the socket starting from index <code>start<\/code>. If <code>end<\/code> == <code>start<\/code>,\nnothing happens.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeFromSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawSynchronousSocket\/writeFromSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": [
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> used to connect this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSynchronousSocket\/address.html",
            "isDeprecated": "0",
            "type": "dart:io.InternetAddress",
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        },
        {
            "desc": "<p>The port used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSynchronousSocket\/port.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        },
        {
            "desc": "<p>The remote <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> connected to by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get remoteAddress;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSynchronousSocket\/remoteAddress.html",
            "isDeprecated": "0",
            "type": "dart:io.InternetAddress",
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        },
        {
            "desc": "<p>The remote port connected to by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get remotePort;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawSynchronousSocket\/remotePort.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:io.RawSynchronousSocket",
            "params": []
        }
    ]
}