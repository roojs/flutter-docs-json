{
    "name": "gestures.MultiDragPointerState",
    "extends": [],
    "memberOf": "gestures",
    "events": [],
    "methods": [
        {
            "name": "MultiDragPointerState",
            "type": "",
            "desc": "<p>Creates per-pointer state for a <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>.<\/p>\n<p>The <code>initialPosition<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.MultiDragPointerState",
            "sig": "",
            "params": [
                {
                    "name": "initialPosition",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "gestures\/MultiDragPointerState\/MultiDragPointerState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MultiDragPointerState(this.initialPosition)\n  : assert(initialPosition != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "accepted",
            "type": "",
            "desc": "<p>Called when the gesture was accepted.<\/p>\n<p>Either immediately or at some future point before the gesture is disposed,\ncall starter(), passing it initialPosition, to start the drag.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.MultiDragPointerState",
            "sig": "",
            "params": [
                {
                    "name": "starter",
                    "type": "gestures.GestureMultiDragStartCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/MultiDragPointerState\/accepted.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid accepted(GestureMultiDragStartCallback starter);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "checkForResolutionAfterMove",
            "type": "",
            "desc": "<p>Override this to call resolve() if the drag should be accepted or rejected.\nThis is called when a pointer movement is received, but only if the gesture\nhas not yet been resolved.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.MultiDragPointerState",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/MultiDragPointerState\/checkForResolutionAfterMove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid checkForResolutionAfterMove() { }<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>Releases any resources used by the object.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.MultiDragPointerState",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/MultiDragPointerState\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid dispose() {\n  _arenaEntry?.resolve(GestureDisposition.rejected);\n  _arenaEntry = null;\n  assert(() { _pendingDelta = null; return true; }());\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "rejected",
            "type": "",
            "desc": "<p>Called when the gesture was rejected.<\/p>\n<p>The <a href=\"gestures\/MultiDragPointerState\/dispose.html\">dispose<\/a> method will be called immediately following this.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.MultiDragPointerState",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/MultiDragPointerState\/rejected.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid rejected() {\n  assert(_arenaEntry != null);\n  assert(_client == null);\n  assert(pendingDelta != null);\n  _pendingDelta = null;\n  _lastPendingEventTimestamp = null;\n  _arenaEntry = null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "resolve",
            "type": "",
            "desc": "<p>Resolve this pointer's entry in the <a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> with the given disposition.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.MultiDragPointerState",
            "sig": "",
            "params": [
                {
                    "name": "disposition",
                    "type": "gestures.GestureDisposition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/MultiDragPointerState\/resolve.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid resolve(GestureDisposition disposition) {\n  _arenaEntry.resolve(disposition);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "initialPosition",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The global coordinates of the pointer when the pointer contacted the screen.<\/p>\n        ",
            "memberOf": "gestures.MultiDragPointerState",
            "isConstant": false,
            "href": "gestures\/MultiDragPointerState\/initialPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset initialPosition\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pendingDelta",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset of the pointer from the last position that was reported to the client.<\/p>\n<p>After the pointer contacts the screen, the pointer might move some\ndistance before this movement will be recognized as a drag. This field\naccumulates that movement so that we can report it to the client after\nthe drag starts.<\/p>\n        ",
            "memberOf": "gestures.MultiDragPointerState",
            "isConstant": false,
            "href": "gestures\/MultiDragPointerState\/pendingDelta.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get pendingDelta =&gt; _pendingDelta;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "gestures\/MultiDragPointerState-class.html",
    "desc": "<p>Per-pointer state for a <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>.<\/p>\n<p>A <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> tracks each pointer separately. The state for\neach pointer is a subclass of <a href=\"gestures\/MultiDragPointerState-class.html\">MultiDragPointerState<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "MultiDragPointerState"
}