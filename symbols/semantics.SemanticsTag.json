{
    "name": "semantics.SemanticsTag",
    "extends": [],
    "memberOf": "semantics",
    "events": [],
    "methods": [
        {
            "name": "SemanticsTag",
            "type": "",
            "desc": "<p>Creates a <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a>.<\/p>\n<p>The provided <code>name<\/code> is only used for debugging. Two tags created with the\nsame <code>name<\/code> and the <code>new<\/code> operator are not considered identical. However,\ntwo tags created with the same <code>name<\/code> and the <code>const<\/code> operator are always\nidentical.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsTag",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "semantics\/SemanticsTag\/SemanticsTag.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsTag(this.name);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsTag",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "semantics\/SemanticsTag\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($name)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "name",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A human-readable name for this tag used for debugging.<\/p>\n<p>This string is not used to determine if two tags are identical.<\/p>\n        ",
            "memberOf": "semantics.SemanticsTag",
            "isConstant": false,
            "href": "semantics\/SemanticsTag\/name.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "semantics\/SemanticsTag-class.html",
    "desc": "<p>A tag for a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>Tags can be interpreted by the parent of a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>\nand depending on the presence of a tag the parent can for example decide\nhow to add the tagged node as a child. Tags are not sent to the engine.<\/p>\n<p>As an example, the <a href=\"rendering\/RenderSemanticsGestureHandler-class.html\">RenderSemanticsGestureHandler<\/a> uses tags to determine\nif a child node should be excluded from the scrollable area for semantic\npurposes.<\/p>\n<p>The provided <a href=\"semantics\/SemanticsTag\/name.html\">name<\/a> is only used for debugging. Two tags created with the\nsame <a href=\"semantics\/SemanticsTag\/name.html\">name<\/a> and the <code>new<\/code> operator are not considered identical. However,\ntwo tags created with the same <a href=\"semantics\/SemanticsTag\/name.html\">name<\/a> and the <code>const<\/code> operator are always\nidentical.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SemanticsTag"
}