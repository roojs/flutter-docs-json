{
    "desc": "<p>This is the default shape of a <a href=\"material\/Slider-class.html\">Slider<\/a>'s track.<\/p>\n<p>It paints a solid colored rectangle, vertically centered in the\n<code>parentBox<\/code>. The track rectangle extends to the bounds of the <code>parentBox<\/code>,\nbut is padded by the <a href=\"material\/RoundSliderOverlayShape-class.html\">RoundSliderOverlayShape<\/a> radius. The height is defined\nby the <a href=\"material\/SliderThemeData\/trackHeight.html\">SliderThemeData.trackHeight<\/a>. The color is determined by the\n<a href=\"material\/Slider-class.html\">Slider<\/a>'s enabled state and the track piece's active state which are\ndefined by:\n  <a href=\"material\/SliderThemeData\/activeTrackColor.html\">SliderThemeData.activeTrackColor<\/a>,\n  <a href=\"material\/SliderThemeData\/inactiveTrackColor.html\">SliderThemeData.inactiveTrackColor<\/a>,\n  <a href=\"material\/SliderThemeData\/disabledActiveTrackColor.html\">SliderThemeData.disabledActiveTrackColor<\/a>,\n  <a href=\"material\/SliderThemeData\/disabledInactiveTrackColor.html\">SliderThemeData.disabledInactiveTrackColor<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Slider-class.html\">Slider<\/a> for the component that this is meant to display this shape.<\/li>\n<li>\n<a href=\"material\/SliderThemeData-class.html\">SliderThemeData<\/a> where an instance of this class is set to inform the\nslider of the visual details of the its track.<\/li>\n<li>\n<a href=\"material\/SliderTrackShape-class.html\">SliderTrackShape<\/a> Base component for creating other custom track\nshapes.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/RectangularSliderTrackShape-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.RectangularSliderTrackShape",
    "shortname": "RectangularSliderTrackShape",
    "extends": [
        "material.SliderTrackShape",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a slider track that draws 2 rectangles.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RectangularSliderTrackShape({ this.disabledThumbGapWidth = 2.0 });<\/code><\/pre>\n    ",
            "href": "material\/RectangularSliderTrackShape\/RectangularSliderTrackShape.html",
            "isDeprecated": false,
            "type": "",
            "name": "RectangularSliderTrackShape",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.RectangularSliderTrackShape",
            "params": [
                {
                    "name": "disabledThumbGapWidth",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the preferred bounds of the shape.<\/p>\n<p>It is used to provide horizontal boundaries for the thumb's position, and\nto help position the slider thumb and tick marks relative to the track.<\/p>\n<p><code>parentBox<\/code> can be used to help determine the preferredRect relative to\nattributes of the render box of the slider itself, such as size.<\/p>\n<p><code>offset<\/code> is relative to the caller's bounding box. It can be used to\nconvert gesture coordinates from global to slider-relative coordinates.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.<\/p>\n<p><code>isDiscrete<\/code> is true if <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> is non-null. If true, the\nslider will render tick marks on top of the track.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRect getPreferredRect({\n  RenderBox parentBox,\n  Offset offset = Offset.zero,\n  SliderThemeData sliderTheme,\n  bool isEnabled,\n  bool isDiscrete,\n}) {\n  final double overlayWidth = sliderTheme.overlayShape.getPreferredSize(isEnabled, isDiscrete).width;\n  final double trackHeight = sliderTheme.trackHeight;\n  assert(overlayWidth &gt;= 0);\n  assert(trackHeight &gt;= 0);\n  assert(parentBox.size.width &gt;= overlayWidth);\n  assert(parentBox.size.height &gt;= trackHeight);\n\n  final double trackLeft = offset.dx + overlayWidth \/ 2;\n  final double trackTop = offset.dy + (parentBox.size.height - trackHeight) \/ 2;\n  \/\/ TODO(clocksmith): Although this works for a material, perhaps the default\n  \/\/ rectangular track should be padded not just by the overlay, but by the\n  \/\/ max of the thumb and the overlay, in case there is no overlay.\n  final double trackWidth = parentBox.size.width - overlayWidth;\n  return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight);\n}<\/code><\/pre>\n    ",
            "href": "material\/RectangularSliderTrackShape\/getPreferredRect.html",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "name": "getPreferredRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RectangularSliderTrackShape",
            "params": [
                {
                    "name": "isDiscrete",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isEnabled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "parentBox",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "sliderTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                }
            ]
        },
        {
            "desc": "<p>Paints the track shape based on the state passed to it.<\/p>\n<p><code>context<\/code> is the same context for the render box of the <a href=\"material\/Slider-class.html\">Slider<\/a>.<\/p>\n<p><code>offset<\/code> is the offset of the origin of the <code>parentBox<\/code> to the origin of\nits <code>context<\/code> canvas. This shape must be painted relative to this\noffset. See <a href=\"rendering\/PaintingContextCallback.html\">PaintingContextCallback<\/a>.<\/p>\n<p><code>parentBox<\/code> is the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> of the <a href=\"material\/Slider-class.html\">Slider<\/a>. Its attributes, such as\nsize, can be used to assist in painting this shape.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>enableAnimation<\/code> is an animation triggered when the <a href=\"material\/Slider-class.html\">Slider<\/a> is enabled,\nand it reverses when the slider is disabled. Enabled is the\n<code>Slider.isInteractive<\/code> state. Use this to paint intermediate frames for\nthis shape when the slider changes enabled state.<\/p>\n<p><code>thumbCenter<\/code> is the offset of the center of the thumb relative to the\norigin of the <a href=\"rendering\/PaintingContext\/canvas.html\">PaintingContext.canvas<\/a>. It can be used as the point that\ndivides the track into 2 segments.<\/p>\n<p><code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.<\/p>\n<p><code>isDiscrete<\/code> is true if <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> is non-null. If true, the\nslider will render tick marks on top of the track.<\/p>\n<p><code>textDirection<\/code> can be used to determine how the track segments are\npainted depending on whether they are active or not. The track segment\nbetween the start of the slider and the thumb is the active track segment.\nThe track segment between the thumb and the end of the slider is the\ninactive track segment. In LTR text direction, the start of the slider is\non the left, and in RTL text direction, the start of the slider is on the\nright.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  PaintingContext context,\n  Offset offset, {\n  RenderBox parentBox,\n  SliderThemeData sliderTheme,\n  Animation&lt;double&gt; enableAnimation,\n  TextDirection textDirection,\n  Offset thumbCenter,\n  bool isDiscrete,\n  bool isEnabled,\n}) {\n  \/\/ If the slider track height is 0, then it makes no difference whether the\n  \/\/ track is painted or not, therefore the painting can be a no-op.\n  if (sliderTheme.trackHeight == 0) {\n    return;\n  }\n\n  \/\/ Assign the track segment paints, which are left: active, right: inactive,\n  \/\/ but reversed for right to left text.\n  final ColorTween activeTrackColorTween = ColorTween(begin: sliderTheme.disabledActiveTrackColor , end: sliderTheme.activeTrackColor);\n  final ColorTween inactiveTrackColorTween = ColorTween(begin: sliderTheme.disabledInactiveTrackColor , end: sliderTheme.inactiveTrackColor);\n  final Paint activePaint = Paint()..color = activeTrackColorTween.evaluate(enableAnimation);\n  final Paint inactivePaint = Paint()..color = inactiveTrackColorTween.evaluate(enableAnimation);\n  Paint leftTrackPaint;\n  Paint rightTrackPaint;\n  switch (textDirection) {\n    case TextDirection.ltr:\n      leftTrackPaint = activePaint;\n      rightTrackPaint = inactivePaint;\n      break;\n    case TextDirection.rtl:\n      leftTrackPaint = inactivePaint;\n      rightTrackPaint = activePaint;\n      break;\n  }\n\n  \/\/ Used to create a gap around the thumb iff the slider is disabled.\n  \/\/ If the slider is enabled, the track can be drawn beneath the thumb\n  \/\/ without a gap. But when the slider is disabled, the track is shortened\n  \/\/ and this gap helps determine how much shorter it should be.\n  \/\/ TODO(clocksmith): The new Material spec has a gray circle in place of this gap.\n  double horizontalAdjustment = 0.0;\n  if (!isEnabled) {\n    final double disabledThumbRadius = sliderTheme.thumbShape.getPreferredSize(false, isDiscrete).width \/ 2.0;\n    final double gap = disabledThumbGapWidth * (1.0 - enableAnimation.value);\n    horizontalAdjustment = disabledThumbRadius + gap;\n  }\n\n  final Rect trackRect = getPreferredRect(\n      parentBox: parentBox,\n      offset: offset,\n      sliderTheme: sliderTheme,\n      isEnabled: isEnabled,\n      isDiscrete: isDiscrete,\n  );\n  final Rect leftTrackSegment = Rect.fromLTRB(trackRect.left, trackRect.top, thumbCenter.dx - horizontalAdjustment, trackRect.bottom);\n  context.canvas.drawRect(leftTrackSegment, leftTrackPaint);\n  final Rect rightTrackSegment = Rect.fromLTRB(thumbCenter.dx + horizontalAdjustment, trackRect.top, trackRect.right, trackRect.bottom);\n  context.canvas.drawRect(rightTrackSegment, rightTrackPaint);\n}<\/code><\/pre>\n    ",
            "href": "material\/RectangularSliderTrackShape\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RectangularSliderTrackShape",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "enableAnimation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "isDiscrete",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isEnabled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "parentBox",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "sliderTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "thumbCenter",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Horizontal spacing, or gap, between the disabled thumb and the track.<\/p>\n<p>This is only used when the slider is disabled. There is no gap around\nthe thumb and any part of the track when the slider is enabled. The\nMaterial spec defaults this gap width 2, which is half of the disabled\nthumb radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double disabledThumbGapWidth\n\n<\/code><\/pre>\n        ",
            "href": "material\/RectangularSliderTrackShape\/disabledThumbGapWidth.html",
            "name": "disabledThumbGapWidth",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RectangularSliderTrackShape",
            "params": []
        }
    ]
}