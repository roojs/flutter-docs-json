{
    "name": "widgets.GridView",
    "extends": [
        "widgets.BoxScrollView",
        "widgets.ScrollView",
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "GridView",
            "type": "",
            "desc": "<p>Creates a scrollable, 2D array of widgets with a custom\n<a href=\"rendering\/SliverGridDelegate-class.html\">SliverGridDelegate<\/a>.<\/p>\n<p>The <code>gridDelegate<\/code> argument must not be null.<\/p>\n<p>The <code>addAutomaticKeepAlives<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildListDelegate\/addAutomaticKeepAlives.html\">SliverChildListDelegate.addAutomaticKeepAlives<\/a> property. The\n<code>addRepaintBoundaries<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildListDelegate\/addRepaintBoundaries.html\">SliverChildListDelegate.addRepaintBoundaries<\/a> property. Both must not be\nnull.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.GridView",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDirection",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controller",
                    "type": "widgets.ScrollController",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shrinkWrap",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gridDelegate",
                    "type": "rendering.SliverGridDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addAutomaticKeepAlives",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addRepaintBoundaries",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addSemanticIndexes",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cacheExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "children",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                },
                {
                    "name": "semanticChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/GridView\/GridView.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GridView({\n  Key key,\n  Axis scrollDirection = Axis.vertical,\n  bool reverse = false,\n  ScrollController controller,\n  bool primary,\n  ScrollPhysics physics,\n  bool shrinkWrap = false,\n  EdgeInsetsGeometry padding,\n  @required this.gridDelegate,\n  bool addAutomaticKeepAlives = true,\n  bool addRepaintBoundaries = true,\n  bool addSemanticIndexes = true,\n  double cacheExtent,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n  int semanticChildCount,\n}) : assert(gridDelegate != null),\n     childrenDelegate = SliverChildListDelegate(\n       children,\n       addAutomaticKeepAlives: addAutomaticKeepAlives,\n       addRepaintBoundaries: addRepaintBoundaries,\n       addSemanticIndexes: addSemanticIndexes,\n     ),\n     super(\n       key: key,\n       scrollDirection: scrollDirection,\n       reverse: reverse,\n       controller: controller,\n       primary: primary,\n       physics: physics,\n       shrinkWrap: shrinkWrap,\n       padding: padding,\n       cacheExtent: cacheExtent,\n       semanticChildCount: semanticChildCount ?? children.length,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "buildChildLayout",
            "type": "widgets.Widget",
            "desc": "<p>Subclasses should override this method to build the layout model.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.GridView",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/GridView\/buildChildLayout.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildChildLayout(BuildContext context) {\n  return SliverGrid(\n    delegate: childrenDelegate,\n    gridDelegate: gridDelegate,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "GridView.builder",
            "type": "",
            "desc": "<p>Creates a scrollable, 2D array of widgets that are created on demand.<\/p>\n<p>This constructor is appropriate for grid views with a large (or infinite)\nnumber of children because the builder is called only for those children\nthat are actually visible.<\/p>\n<p>Providing a non-null <code>itemCount<\/code> improves the ability of the <a href=\"widgets\/GridView-class.html\">GridView<\/a> to\nestimate the maximum scroll extent.<\/p>\n<p><code>itemBuilder<\/code> will be called only with indices greater than or equal to\nzero and less than <code>itemCount<\/code>.<\/p>\n<p>The <code>gridDelegate<\/code> argument must not be null.<\/p>\n<p>The <code>addAutomaticKeepAlives<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildBuilderDelegate\/addAutomaticKeepAlives.html\">SliverChildBuilderDelegate.addAutomaticKeepAlives<\/a> property. The\n<code>addRepaintBoundaries<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildBuilderDelegate\/addRepaintBoundaries.html\">SliverChildBuilderDelegate.addRepaintBoundaries<\/a> property. Both must not\nbe null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.GridView",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDirection",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controller",
                    "type": "widgets.ScrollController",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shrinkWrap",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gridDelegate",
                    "type": "rendering.SliverGridDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "itemBuilder",
                    "type": "widgets.IndexedWidgetBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "itemCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addAutomaticKeepAlives",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addRepaintBoundaries",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addSemanticIndexes",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cacheExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/GridView\/GridView.builder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GridView.builder({\n  Key key,\n  Axis scrollDirection = Axis.vertical,\n  bool reverse = false,\n  ScrollController controller,\n  bool primary,\n  ScrollPhysics physics,\n  bool shrinkWrap = false,\n  EdgeInsetsGeometry padding,\n  @required this.gridDelegate,\n  @required IndexedWidgetBuilder itemBuilder,\n  int itemCount,\n  bool addAutomaticKeepAlives = true,\n  bool addRepaintBoundaries = true,\n  bool addSemanticIndexes = true,\n  double cacheExtent,\n  int semanticChildCount,\n}) : assert(gridDelegate != null),\n     childrenDelegate = SliverChildBuilderDelegate(\n       itemBuilder,\n       childCount: itemCount,\n       addAutomaticKeepAlives: addAutomaticKeepAlives,\n       addRepaintBoundaries: addRepaintBoundaries,\n       addSemanticIndexes: addSemanticIndexes,\n     ),\n     super(\n       key: key,\n       scrollDirection: scrollDirection,\n       reverse: reverse,\n       controller: controller,\n       primary: primary,\n       physics: physics,\n       shrinkWrap: shrinkWrap,\n       padding: padding,\n       cacheExtent: cacheExtent,\n       semanticChildCount: semanticChildCount ?? itemCount,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "GridView.count",
            "type": "",
            "desc": "<p>Creates a scrollable, 2D array of widgets with a fixed number of tiles in\nthe cross axis.<\/p>\n<p>Uses a <a href=\"rendering\/SliverGridDelegateWithFixedCrossAxisCount-class.html\">SliverGridDelegateWithFixedCrossAxisCount<\/a> as the <a href=\"widgets\/GridView\/gridDelegate.html\">gridDelegate<\/a>.<\/p>\n<p>The <code>addAutomaticKeepAlives<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildListDelegate\/addAutomaticKeepAlives.html\">SliverChildListDelegate.addAutomaticKeepAlives<\/a> property. The\n<code>addRepaintBoundaries<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildListDelegate\/addRepaintBoundaries.html\">SliverChildListDelegate.addRepaintBoundaries<\/a> property. Both must not be\nnull.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GridView\/GridView.count.html\">new SliverGrid.count<\/a>, the equivalent constructor for <a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a>.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.GridView",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDirection",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controller",
                    "type": "widgets.ScrollController",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shrinkWrap",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "crossAxisCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "mainAxisSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "crossAxisSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childAspectRatio",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addAutomaticKeepAlives",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addRepaintBoundaries",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addSemanticIndexes",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cacheExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "children",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                },
                {
                    "name": "semanticChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "dragStartBehavior",
                    "type": "gestures.DragStartBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/GridView\/GridView.count.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GridView.count({\n  Key key,\n  Axis scrollDirection = Axis.vertical,\n  bool reverse = false,\n  ScrollController controller,\n  bool primary,\n  ScrollPhysics physics,\n  bool shrinkWrap = false,\n  EdgeInsetsGeometry padding,\n  @required int crossAxisCount,\n  double mainAxisSpacing = 0.0,\n  double crossAxisSpacing = 0.0,\n  double childAspectRatio = 1.0,\n  bool addAutomaticKeepAlives = true,\n  bool addRepaintBoundaries = true,\n  bool addSemanticIndexes = true,\n  double cacheExtent,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n  int semanticChildCount,\n  DragStartBehavior dragStartBehavior = DragStartBehavior.start,\n}) : gridDelegate = SliverGridDelegateWithFixedCrossAxisCount(\n       crossAxisCount: crossAxisCount,\n       mainAxisSpacing: mainAxisSpacing,\n       crossAxisSpacing: crossAxisSpacing,\n       childAspectRatio: childAspectRatio,\n     ),\n     childrenDelegate = SliverChildListDelegate(\n       children,\n       addAutomaticKeepAlives: addAutomaticKeepAlives,\n       addRepaintBoundaries: addRepaintBoundaries,\n       addSemanticIndexes: addSemanticIndexes,\n     ),\n     super(\n       key: key,\n       scrollDirection: scrollDirection,\n       reverse: reverse,\n       controller: controller,\n       primary: primary,\n       physics: physics,\n       shrinkWrap: shrinkWrap,\n       padding: padding,\n       cacheExtent: cacheExtent,\n       semanticChildCount: semanticChildCount ?? children.length,\n       dragStartBehavior: dragStartBehavior,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "GridView.custom",
            "type": "",
            "desc": "<p>Creates a scrollable, 2D array of widgets with both a custom\n<a href=\"rendering\/SliverGridDelegate-class.html\">SliverGridDelegate<\/a> and a custom <a href=\"widgets\/SliverChildDelegate-class.html\">SliverChildDelegate<\/a>.<\/p>\n<p>To use an <a href=\"widgets\/IndexedWidgetBuilder.html\">IndexedWidgetBuilder<\/a> callback to build children, either use\na <a href=\"widgets\/SliverChildBuilderDelegate-class.html\">SliverChildBuilderDelegate<\/a> or use the <a href=\"widgets\/GridView\/GridView.builder.html\">GridView.builder<\/a> constructor.<\/p>\n<p>The <code>gridDelegate<\/code> and <code>childrenDelegate<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.GridView",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDirection",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controller",
                    "type": "widgets.ScrollController",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shrinkWrap",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gridDelegate",
                    "type": "rendering.SliverGridDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childrenDelegate",
                    "type": "widgets.SliverChildDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cacheExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "dragStartBehavior",
                    "type": "gestures.DragStartBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/GridView\/GridView.custom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const GridView.custom({\n  Key key,\n  Axis scrollDirection = Axis.vertical,\n  bool reverse = false,\n  ScrollController controller,\n  bool primary,\n  ScrollPhysics physics,\n  bool shrinkWrap = false,\n  EdgeInsetsGeometry padding,\n  @required this.gridDelegate,\n  @required this.childrenDelegate,\n  double cacheExtent,\n  int semanticChildCount,\n  DragStartBehavior dragStartBehavior = DragStartBehavior.start,\n}) : assert(gridDelegate != null),\n     assert(childrenDelegate != null),\n     super(\n       key: key,\n       scrollDirection: scrollDirection,\n       reverse: reverse,\n       controller: controller,\n       primary: primary,\n       physics: physics,\n       shrinkWrap: shrinkWrap,\n       padding: padding,\n       cacheExtent: cacheExtent,\n       semanticChildCount: semanticChildCount,\n       dragStartBehavior: dragStartBehavior,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "GridView.extent",
            "type": "",
            "desc": "<p>Creates a scrollable, 2D array of widgets with tiles that each have a\nmaximum cross-axis extent.<\/p>\n<p>Uses a <a href=\"rendering\/SliverGridDelegateWithMaxCrossAxisExtent-class.html\">SliverGridDelegateWithMaxCrossAxisExtent<\/a> as the <a href=\"widgets\/GridView\/gridDelegate.html\">gridDelegate<\/a>.<\/p>\n<p>The <code>addAutomaticKeepAlives<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildListDelegate\/addAutomaticKeepAlives.html\">SliverChildListDelegate.addAutomaticKeepAlives<\/a> property. The\n<code>addRepaintBoundaries<\/code> argument corresponds to the\n<a href=\"widgets\/SliverChildListDelegate\/addRepaintBoundaries.html\">SliverChildListDelegate.addRepaintBoundaries<\/a> property. Both must not be\nnull.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/GridView\/GridView.extent.html\">new SliverGrid.extent<\/a>, the equivalent constructor for <a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a>.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.GridView",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDirection",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controller",
                    "type": "widgets.ScrollController",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shrinkWrap",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxCrossAxisExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "mainAxisSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "crossAxisSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childAspectRatio",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addAutomaticKeepAlives",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addRepaintBoundaries",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addSemanticIndexes",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "children",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                },
                {
                    "name": "semanticChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "dragStartBehavior",
                    "type": "gestures.DragStartBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/GridView\/GridView.extent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GridView.extent({\n  Key key,\n  Axis scrollDirection = Axis.vertical,\n  bool reverse = false,\n  ScrollController controller,\n  bool primary,\n  ScrollPhysics physics,\n  bool shrinkWrap = false,\n  EdgeInsetsGeometry padding,\n  @required double maxCrossAxisExtent,\n  double mainAxisSpacing = 0.0,\n  double crossAxisSpacing = 0.0,\n  double childAspectRatio = 1.0,\n  bool addAutomaticKeepAlives = true,\n  bool addRepaintBoundaries = true,\n  bool addSemanticIndexes = true,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n  int semanticChildCount,\n  DragStartBehavior dragStartBehavior = DragStartBehavior.start,\n}) : gridDelegate = SliverGridDelegateWithMaxCrossAxisExtent(\n       maxCrossAxisExtent: maxCrossAxisExtent,\n       mainAxisSpacing: mainAxisSpacing,\n       crossAxisSpacing: crossAxisSpacing,\n       childAspectRatio: childAspectRatio,\n     ),\n     childrenDelegate = SliverChildListDelegate(\n       children,\n       addAutomaticKeepAlives: addAutomaticKeepAlives,\n       addRepaintBoundaries: addRepaintBoundaries,\n       addSemanticIndexes: addSemanticIndexes,\n     ),\n     super(\n       key: key,\n       scrollDirection: scrollDirection,\n       reverse: reverse,\n       controller: controller,\n       primary: primary,\n       physics: physics,\n       shrinkWrap: shrinkWrap,\n       padding: padding,\n       semanticChildCount: semanticChildCount ?? children.length,\n       dragStartBehavior: dragStartBehavior,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "childrenDelegate",
            "type": "widgets.SliverChildDelegate",
            "types": [],
            "desc": "<p>A delegate that provides the children for the <a href=\"widgets\/GridView-class.html\">GridView<\/a>.<\/p>\n<p>The <a href=\"widgets\/GridView\/GridView.custom.html\">GridView.custom<\/a> constructor lets you specify this delegate\nexplicitly. The other constructors create a <a href=\"widgets\/GridView\/childrenDelegate.html\">childrenDelegate<\/a> that wraps\nthe given child list.<\/p>\n        ",
            "memberOf": "widgets.GridView",
            "isConstant": false,
            "href": "widgets\/GridView\/childrenDelegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliverChildDelegate childrenDelegate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "gridDelegate",
            "type": "rendering.SliverGridDelegate",
            "types": [],
            "desc": "<p>A delegate that controls the layout of the children within the <a href=\"widgets\/GridView-class.html\">GridView<\/a>.<\/p>\n<p>The <a href=\"widgets\/GridView-class.html\">GridView<\/a> and <a href=\"widgets\/GridView\/GridView.custom.html\">GridView.custom<\/a> constructors let you specify this\ndelegate explicitly. The other constructors create a <a href=\"widgets\/GridView\/gridDelegate.html\">gridDelegate<\/a>\nimplicitly.<\/p>\n        ",
            "memberOf": "widgets.GridView",
            "isConstant": false,
            "href": "widgets\/GridView\/gridDelegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliverGridDelegate gridDelegate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/GridView-class.html",
    "desc": "<p>A scrollable, 2D array of widgets.<\/p>\n<p>The main axis direction of a grid is the direction in which it scrolls (the\n<a href=\"widgets\/ScrollView\/scrollDirection.html\">scrollDirection<\/a>).<\/p>\n<p>The most commonly used grid layouts are <a href=\"widgets\/GridView\/GridView.count.html\">GridView.count<\/a>, which creates a\nlayout with a fixed number of tiles in the cross axis, and\n<a href=\"widgets\/GridView\/GridView.extent.html\">GridView.extent<\/a>, which creates a layout with tiles that have a maximum\ncross-axis extent. A custom <a href=\"rendering\/SliverGridDelegate-class.html\">SliverGridDelegate<\/a> can produce an arbitrary 2D\narrangement of children, including arrangements that are unaligned or\noverlapping.<\/p>\n<p>To create a grid with a large (or infinite) number of children, use the\n<a href=\"widgets\/GridView\/GridView.builder.html\">GridView.builder<\/a> constructor with either a\n<a href=\"rendering\/SliverGridDelegateWithFixedCrossAxisCount-class.html\">SliverGridDelegateWithFixedCrossAxisCount<\/a> or a\n<a href=\"rendering\/SliverGridDelegateWithMaxCrossAxisExtent-class.html\">SliverGridDelegateWithMaxCrossAxisExtent<\/a> for the <a href=\"widgets\/GridView\/gridDelegate.html\">gridDelegate<\/a>.<\/p>\n<p>To use a custom <a href=\"widgets\/SliverChildDelegate-class.html\">SliverChildDelegate<\/a>, use <a href=\"widgets\/GridView\/GridView.custom.html\">GridView.custom<\/a>.<\/p>\n<p>To create a linear array of children, use a <a href=\"widgets\/ListView-class.html\">ListView<\/a>.<\/p>\n<p>To control the initial scroll offset of the scroll view, provide a\n<a href=\"widgets\/ScrollView\/controller.html\">controller<\/a> with its <a href=\"widgets\/ScrollController\/initialScrollOffset.html\">ScrollController.initialScrollOffset<\/a> property set.<\/p>\n<h2 id=\"transitioning-to-customscrollview\">Transitioning to <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>\n<\/h2>\n<p>A <a href=\"widgets\/GridView-class.html\">GridView<\/a> is basically a <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> with a single <a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a> in\nits <a href=\"widgets\/CustomScrollView\/slivers.html\">CustomScrollView.slivers<\/a> property.<\/p>\n<p>If <a href=\"widgets\/GridView-class.html\">GridView<\/a> is no longer sufficient, for example because the scroll view\nis to have both a grid and a list, or because the grid is to be combined\nwith a <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, etc, it is straight-forward to port code from using\n<a href=\"widgets\/GridView-class.html\">GridView<\/a> to using <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> directly.<\/p>\n<p>The <a href=\"widgets\/Widget\/key.html\">key<\/a>, <a href=\"widgets\/ScrollView\/scrollDirection.html\">scrollDirection<\/a>, <a href=\"widgets\/ScrollView\/reverse.html\">reverse<\/a>, <a href=\"widgets\/ScrollView\/controller.html\">controller<\/a>, <a href=\"widgets\/ScrollView\/primary.html\">primary<\/a>, <a href=\"widgets\/ScrollView\/physics.html\">physics<\/a>,\nand <a href=\"widgets\/ScrollView\/shrinkWrap.html\">shrinkWrap<\/a> properties on <a href=\"widgets\/GridView-class.html\">GridView<\/a> map directly to the identically\nnamed properties on <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/p>\n<p>The <a href=\"widgets\/CustomScrollView\/slivers.html\">CustomScrollView.slivers<\/a> property should be a list containing just a\n<a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a>.<\/p>\n<p>The <a href=\"widgets\/GridView\/childrenDelegate.html\">childrenDelegate<\/a> property on <a href=\"widgets\/GridView-class.html\">GridView<\/a> corresponds to the\n<a href=\"widgets\/SliverMultiBoxAdaptorWidget\/delegate.html\">SliverGrid.delegate<\/a> property, and the <a href=\"widgets\/GridView\/gridDelegate.html\">gridDelegate<\/a> property on the\n<a href=\"widgets\/GridView-class.html\">GridView<\/a> corresponds to the <a href=\"widgets\/GridView\/gridDelegate.html\">SliverGrid.gridDelegate<\/a> property.<\/p>\n<p>The <a href=\"widgets\/GridView\/GridView.html\">new GridView<\/a>, <a href=\"widgets\/GridView\/GridView.count.html\">new GridView.count<\/a>, and <a href=\"widgets\/GridView\/GridView.extent.html\">new GridView.extent<\/a>\nconstructors' <code>children<\/code> arguments correspond to the <a href=\"widgets\/GridView\/childrenDelegate.html\">childrenDelegate<\/a>\nbeing a <a href=\"widgets\/SliverChildListDelegate-class.html\">SliverChildListDelegate<\/a> with that same argument. The <a href=\"widgets\/GridView\/GridView.builder.html\">new\nGridView.builder<\/a> constructor's <code>itemBuilder<\/code> and <code>childCount<\/code> arguments\ncorrespond to the <a href=\"widgets\/GridView\/childrenDelegate.html\">childrenDelegate<\/a> being a <a href=\"widgets\/SliverChildBuilderDelegate-class.html\">SliverChildBuilderDelegate<\/a>\nwith the matching arguments.<\/p>\n<p>The <a href=\"widgets\/GridView\/GridView.count.html\">new GridView.count<\/a> and <a href=\"widgets\/GridView\/GridView.extent.html\">new GridView.extent<\/a> constructors create\ncustom grid delegates, and have equivalently named constructors on\n<a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a> to ease the transition: <a href=\"widgets\/GridView\/GridView.count.html\">new SliverGrid.count<\/a> and <a href=\"widgets\/GridView\/GridView.extent.html\">new\nSliverGrid.extent<\/a> respectively.<\/p>\n<p>The <a href=\"widgets\/BoxScrollView\/padding.html\">padding<\/a> property corresponds to having a <a href=\"widgets\/SliverPadding-class.html\">SliverPadding<\/a> in the\n<a href=\"widgets\/CustomScrollView\/slivers.html\">CustomScrollView.slivers<\/a> property instead of the grid itself, and having\nthe <a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a> instead be a child of the <a href=\"widgets\/SliverPadding-class.html\">SliverPadding<\/a>.<\/p>\n<p>By default, <a href=\"widgets\/ListView-class.html\">ListView<\/a> will automatically pad the list's scrollable\nextremities to avoid partial obstructions indicated by <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>'s\npadding. To avoid this behavior, override with a zero <a href=\"widgets\/BoxScrollView\/padding.html\">padding<\/a> property.<\/p>\n<p>Once code has been ported to use <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>, other slivers, such as\n<a href=\"widgets\/SliverList-class.html\">SliverList<\/a> or <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, can be put in the <a href=\"widgets\/CustomScrollView\/slivers.html\">CustomScrollView.slivers<\/a>\nlist.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere are two brief snippets showing a <a href=\"widgets\/GridView-class.html\">GridView<\/a> and its equivalent using\n<a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">GridView.count(\n  primary: false,\n  padding: const EdgeInsets.all(20.0),\n  crossAxisSpacing: 10.0,\n  crossAxisCount: 2,\n  children: &lt;Widget&gt;[\n    const Text('He\\'d have you all unravel at the'),\n    const Text('Heed not the rabble'),\n    const Text('Sound of screams but the'),\n    const Text('Who scream'),\n    const Text('Revolution is coming...'),\n    const Text('Revolution, they...'),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CustomScrollView(\n  primary: false,\n  slivers: &lt;Widget&gt;[\n    SliverPadding(\n      padding: const EdgeInsets.all(20.0),\n      sliver: SliverGrid.count(\n        crossAxisSpacing: 10.0,\n        crossAxisCount: 2,\n        children: &lt;Widget&gt;[\n          const Text('He\\'d have you all unravel at the'),\n          const Text('Heed not the rabble'),\n          const Text('Sound of screams but the'),\n          const Text('Who scream'),\n          const Text('Revolution is coming...'),\n          const Text('Revolution, they...'),\n        ],\n      ),\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>, which is a scrollable widget that has a single\nchild.<\/li>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which is scrollable, linear list of widgets.<\/li>\n<li>\n<a href=\"widgets\/PageView-class.html\">PageView<\/a>, which is a scrolling list of child widgets that are each the\nsize of the viewport.<\/li>\n<li>\n<a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>, which is a scrollable widget that creates custom\nscroll effects using slivers.<\/li>\n<li>\n<a href=\"rendering\/SliverGridDelegateWithFixedCrossAxisCount-class.html\">SliverGridDelegateWithFixedCrossAxisCount<\/a>, which creates a layout with\na fixed number of tiles in the cross axis.<\/li>\n<li>\n<a href=\"rendering\/SliverGridDelegateWithMaxCrossAxisExtent-class.html\">SliverGridDelegateWithMaxCrossAxisExtent<\/a>, which creates a layout with\ntiles that have a maximum cross-axis extent.<\/li>\n<li>\n<a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> and <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>, which can be used to watch\nthe scroll position without using a <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a>.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "GridView"
}