{
    "desc": "<p>A simple material design dialog.<\/p>\n<p>A simple dialog offers the user a choice between several options. A simple\ndialog has an optional title that is displayed above the choices.<\/p>\n<p>Choices are normally represented using <a href=\"material\/SimpleDialogOption-class.html\">SimpleDialogOption<\/a> widgets. If\nother widgets are used, see <a href=\"material\/SimpleDialog\/contentPadding.html\">contentPadding<\/a> for notes regarding the\nconventions for obtaining the spacing expected by Material Design.<\/p>\n<p>For dialogs that inform the user about a situation, consider using an\n<a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a>.<\/p>\n<p>Typically passed as the child widget to <a href=\"material\/showDialog.html\">showDialog<\/a>, which displays the\ndialog.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn this example, the user is asked to select between two options. These\noptions are represented as an enum. The <a href=\"material\/showDialog.html\">showDialog<\/a> method here returns\na <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes to a value of that enum. If the user cancels\nthe dialog (e.g. by hitting the back button on Android, or tapping on the\nmask behind the dialog) then the future completes with the null value.\n<p>The return value in this example is used as the index for a switch statement.\nOne advantage of using an enum as the return value and then using that to\ndrive a switch statement is that the analyzer will flag any switch statement\nthat doesn't mention every value in the enum.\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Future&lt;void&gt; _askedToLead() async {\n  switch (await showDialog&lt;Department&gt;(\n    context: context,\n    builder: (BuildContext context) {\n      return SimpleDialog(\n        title: const Text('Select assignment'),\n        children: &lt;Widget&gt;[\n          SimpleDialogOption(\n            onPressed: () { Navigator.pop(context, Department.treasury); },\n            child: const Text('Treasury department'),\n          ),\n          SimpleDialogOption(\n            onPressed: () { Navigator.pop(context, Department.state); },\n            child: const Text('State department'),\n          ),\n        ],\n      );\n    }\n  )) {\n    case Department.treasury:\n      \/\/ Let's go.\n      \/\/ ...\n    break;\n    case Department.state:\n      \/\/ ...\n    break;\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/SimpleDialogOption-class.html\">SimpleDialogOption<\/a>, which are options used in this type of dialog.<\/li>\n<li>\n<a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a>, for dialogs that have a row of buttons below the body.<\/li>\n<li>\n<a href=\"material\/Dialog-class.html\">Dialog<\/a>, on which <a href=\"material\/SimpleDialog-class.html\">SimpleDialog<\/a> and <a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a> are based.<\/li>\n<li>\n<a href=\"material\/showDialog.html\">showDialog<\/a>, which actually displays the dialog and returns its result.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/dialogs.html#simple-dialog\">material.io\/design\/components\/dialogs.html#simple-dialog<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/SimpleDialog-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.SimpleDialog",
    "shortname": "SimpleDialog",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a simple dialog.<\/p>\n<p>Typically used in conjunction with <a href=\"material\/showDialog.html\">showDialog<\/a>.<\/p>\n<p>The <code>titlePadding<\/code> and <code>contentPadding<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SimpleDialog({\n  Key key,\n  this.title,\n  this.titlePadding = const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),\n  this.children,\n  this.contentPadding = const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),\n  this.backgroundColor,\n  this.elevation,\n  this.semanticLabel,\n  this.shape,\n}) : assert(titlePadding != null),\n     assert(contentPadding != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/SimpleDialog\/SimpleDialog.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.SimpleDialog",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "contentPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "semanticLabel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "title",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "titlePadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/SimpleDialog\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterialLocalizations(context));\n  final List&lt;Widget&gt; body = &lt;Widget&gt;[];\n  String label = semanticLabel;\n\n  if (title != null) {\n    body.add(Padding(\n      padding: titlePadding,\n      child: DefaultTextStyle(\n        style: Theme.of(context).textTheme.title,\n        child: Semantics(namesRoute: true, child: title),\n      ),\n    ));\n  } else {\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.iOS:\n        label = semanticLabel;\n        break;\n      case TargetPlatform.android:\n      case TargetPlatform.fuchsia:\n        label = semanticLabel ?? MaterialLocalizations.of(context)?.dialogLabel;\n    }\n  }\n\n  if (children != null) {\n    body.add(Flexible(\n      child: SingleChildScrollView(\n        padding: contentPadding,\n        child: ListBody(children: children),\n      ),\n    ));\n  }\n\n  Widget dialogChild = IntrinsicWidth(\n    stepWidth: 56.0,\n    child: ConstrainedBox(\n      constraints: const BoxConstraints(minWidth: 280.0),\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: body,\n      ),\n    ),\n  );\n\n  if (label != null)\n    dialogChild = Semantics(\n      namesRoute: true,\n      label: label,\n      child: dialogChild,\n    );\n  return Dialog(\n    backgroundColor: backgroundColor,\n    elevation: elevation,\n    shape: shape,\n    child: dialogChild,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/SimpleDialog\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SimpleDialog",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The background color of the surface of this <a href=\"material\/Dialog-class.html\">Dialog<\/a>.<\/p>\n<p>This sets the <a href=\"material\/Material\/color.html\">Material.color<\/a> on this <a href=\"material\/Dialog-class.html\">Dialog<\/a>'s <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>If <code>null<\/code>, <a href=\"material\/ThemeData\/cardColor.html\">ThemeData.cardColor<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/backgroundColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>The (optional) content of the dialog is displayed in a\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a> underneath the title.<\/p>\n<p>Typically a list of <a href=\"material\/SimpleDialogOption-class.html\">SimpleDialogOption<\/a>s.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; children\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/children.html",
            "isDeprecated": "0",
            "type": "dart:core.List<widgets.Widget>",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>Padding around the content.<\/p>\n<p>By default, this is 12 pixels on the top and 16 pixels on the bottom. This\nis intended to be combined with children that have 24 pixels of padding on\nthe left and right, and 8 pixels of padding on the top and bottom, so that\nthe content ends up being indented 20 pixels from the title, 24 pixels\nfrom the bottom, and 24 pixels from the sides.<\/p>\n<p>The <a href=\"material\/SimpleDialogOption-class.html\">SimpleDialogOption<\/a> widget uses such padding.<\/p>\n<p>If there is no <a href=\"material\/SimpleDialog\/title.html\">title<\/a>, the <a href=\"material\/SimpleDialog\/contentPadding.html\">contentPadding<\/a> should be adjusted so that\nthe top padding ends up being 24 pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry contentPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/contentPadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate of this <a href=\"material\/Dialog-class.html\">Dialog<\/a>.<\/p>\n<p>If null then <a href=\"material\/SimpleDialog\/elevation.html\">DialogTheme.elevation<\/a> is used, and if that's null then the\ndialog's elevation is 24.0.\nThe z-coordinate at which to place this material relative to its parent.<\/p>\n<p>This controls the size of the shadow below the material.<\/p>\n<p>If this is non-zero, the contents of the material are clipped, because the\nwidget conceptually defines an independent printed piece of material.<\/p>\n<p>Defaults to 0. Changing this value will cause the shadow to animate over\n<code>animationDuration<\/code>.<\/p>\n<p>The value is non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/elevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>The semantic label of the dialog used by accessibility frameworks to\nannounce screen transitions when the dialog is opened and closed.<\/p>\n<p>If this label is not provided, a semantic label will be inferred from the\n<a href=\"material\/SimpleDialog\/title.html\">title<\/a> if it is not null.  If there is no title, the label will be taken\nfrom <a href=\"material\/MaterialLocalizations\/dialogLabel.html\">MaterialLocalizations.dialogLabel<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>SemanticsConfiguration.isRouteName<\/code>, for a description of how this\nvalue is used.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticLabel\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/semanticLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>The shape of this dialog's border.<\/p>\n<p>Defines the dialog's <a href=\"material\/SimpleDialog\/shape.html\">Material.shape<\/a>.<\/p>\n<p>The default shape is a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> with a radius of 2.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/shape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>The (optional) title of the dialog is displayed in a large font at the top\nof the dialog.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/title.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.SimpleDialog",
            "params": []
        },
        {
            "desc": "<p>Padding around the title.<\/p>\n<p>If there is no title, no padding will be provided.<\/p>\n<p>By default, this provides the recommend Material Design padding of 24\npixels around the left, top, and right edges of the title.<\/p>\n<p>See <a href=\"material\/SimpleDialog\/contentPadding.html\">contentPadding<\/a> for the conventions regarding padding between the\n<a href=\"material\/SimpleDialog\/title.html\">title<\/a> and the <a href=\"material\/SimpleDialog\/children.html\">children<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry titlePadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/SimpleDialog\/titlePadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.SimpleDialog",
            "params": []
        }
    ]
}