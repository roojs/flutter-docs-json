{
    "desc": "<p>Allows subtrees to request to be kept alive in lazy lists.<\/p>\n<p>This widget is like <a href=\"widgets\/KeepAlive-class.html\">KeepAlive<\/a> but instead of being explicitly configured,\nit listens to <a href=\"widgets\/KeepAliveNotification-class.html\">KeepAliveNotification<\/a> messages from the <a href=\"widgets\/AutomaticKeepAlive\/child.html\">child<\/a> and other\ndescendants.<\/p>\n<p>The subtree is kept alive whenever there is one or more descendant that has\nsent a <a href=\"widgets\/KeepAliveNotification-class.html\">KeepAliveNotification<\/a> and not yet triggered its\n<a href=\"widgets\/KeepAliveNotification\/handle.html\">KeepAliveNotification.handle<\/a>.<\/p>\n<p>To send these notifications, consider using <a href=\"widgets\/AutomaticKeepAliveClientMixin-mixin.html\">AutomaticKeepAliveClientMixin<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/AutomaticKeepAlive-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.AutomaticKeepAlive",
    "shortname": "AutomaticKeepAlive",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that listens to <a href=\"widgets\/KeepAliveNotification-class.html\">KeepAliveNotification<\/a>s and maintains a\n<a href=\"widgets\/KeepAlive-class.html\">KeepAlive<\/a> widget appropriately.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AutomaticKeepAlive({\n  Key key,\n  this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/AutomaticKeepAlive\/AutomaticKeepAlive.html",
            "isDeprecated": false,
            "type": "",
            "name": "AutomaticKeepAlive",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.AutomaticKeepAlive",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/AutomaticKeepAlive\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_AutomaticKeepAliveState createState() =&gt; _AutomaticKeepAliveState();<\/code><\/pre>\n    ",
            "href": "widgets\/AutomaticKeepAlive\/createState.html",
            "isDeprecated": false,
            "type": "<_AutomaticKeepAliveState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AutomaticKeepAlive",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AutomaticKeepAlive\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.AutomaticKeepAlive",
            "params": []
        }
    ]
}