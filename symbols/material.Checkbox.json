{
    "desc": "<p>A material design checkbox.<\/p>\n<p>The checkbox itself does not maintain any state. Instead, when the state of\nthe checkbox changes, the widget calls the <a href=\"material\/Checkbox\/onChanged.html\">onChanged<\/a> callback. Most\nwidgets that use a checkbox will listen for the <a href=\"material\/Checkbox\/onChanged.html\">onChanged<\/a> callback and\nrebuild the checkbox with a new <a href=\"material\/Checkbox\/value.html\">value<\/a> to update the visual appearance of\nthe checkbox.<\/p>\n<p>The checkbox can optionally display three values - true, false, and null -\nif <a href=\"material\/Checkbox\/tristate.html\">tristate<\/a> is true. When <a href=\"material\/Checkbox\/value.html\">value<\/a> is null a dash is displayed. By default\n<a href=\"material\/Checkbox\/tristate.html\">tristate<\/a> is false and the checkbox's <a href=\"material\/Checkbox\/value.html\">value<\/a> must be true or false.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/CheckboxListTile-class.html\">CheckboxListTile<\/a>, which combines this widget with a <a href=\"material\/ListTile-class.html\">ListTile<\/a> so that\nyou can give the checkbox a label.<\/li>\n<li>\n<a href=\"material\/Switch-class.html\">Switch<\/a>, a widget with semantics similar to <a href=\"material\/Checkbox-class.html\">Checkbox<\/a>.<\/li>\n<li>\n<a href=\"material\/Radio-class.html\">Radio<\/a>, for selecting among a set of explicit values.<\/li>\n<li>\n<a href=\"material\/Slider-class.html\">Slider<\/a>, for selecting a value in a range.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/selection-controls.html#checkboxes\">material.io\/design\/components\/selection-controls.html#checkboxes<\/a><\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/lists.html#types\">material.io\/design\/components\/lists.html#types<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Checkbox-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Checkbox",
    "shortname": "Checkbox",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the value of the checkbox should change.<\/p>\n<p>The checkbox passes the new value to the callback but does not actually\nchange state until the parent widget rebuilds the checkbox with the new\nvalue.<\/p>\n<p>If this callback is null, the checkbox will be displayed as disabled\nand will not respond to input gestures.<\/p>\n<p>When the checkbox is tapped, if <a href=\"material\/Checkbox\/tristate.html\">tristate<\/a> is false (the default) then\nthe <a href=\"material\/Checkbox\/onChanged.html\">onChanged<\/a> callback will be applied to <code>!value<\/code>. If <a href=\"material\/Checkbox\/tristate.html\">tristate<\/a> is\ntrue this callback cycle from false to true to null.<\/p>\n<p>The callback provided to <a href=\"material\/Checkbox\/onChanged.html\">onChanged<\/a> should update the state of the parent\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the parent\ngets rebuilt; for example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Checkbox(\n  value: _throwShotAway,\n  onChanged: (bool newValue) {\n    setState(() {\n      _throwShotAway = newValue;\n    });\n  },\n)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/Checkbox\/onChanged.html",
            "isDeprecated": false,
            "type": "foundation.ValueChanged<dart:core.bool>",
            "name": "onChanged",
            "memberOf": "material.Checkbox",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a material design checkbox.<\/p>\n<p>The checkbox itself does not maintain any state. Instead, when the state of\nthe checkbox changes, the widget calls the <code>onChanged<\/code> callback. Most\nwidgets that use a checkbox will listen for the <code>onChanged<\/code> callback and\nrebuild the checkbox with a new <code>value<\/code> to update the visual appearance of\nthe checkbox.<\/p>\n<p>The following arguments are required:<\/p>\n<ul>\n<li>\n<code>value<\/code>, which determines whether the checkbox is checked. The <code>value<\/code>\ncan only be null if <code>tristate<\/code> is true.<\/li>\n<li>\n<code>onChanged<\/code>, which is called when the value of the checkbox should\nchange. It can be set to null to disable the checkbox.<\/li>\n<\/ul>\n<p>The value of <code>tristate<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Checkbox({\n  Key key,\n  @required this.value,\n  this.tristate = false,\n  @required this.onChanged,\n  this.activeColor,\n  this.checkColor,\n  this.materialTapTargetSize,\n}) : assert(tristate != null),\n     assert(tristate || value != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Checkbox\/Checkbox.html",
            "isDeprecated": false,
            "type": "",
            "name": "Checkbox",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Checkbox",
            "params": [
                {
                    "name": "activeColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "checkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "onChanged",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.bool>"
                },
                {
                    "name": "tristate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/Checkbox\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CheckboxState createState() =&gt; _CheckboxState();<\/code><\/pre>\n    ",
            "href": "material\/Checkbox\/createState.html",
            "isDeprecated": false,
            "type": "<_CheckboxState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Checkbox",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use when this checkbox is checked.<\/p>\n<p>Defaults to <a href=\"material\/ThemeData\/toggleableActiveColor.html\">ThemeData.toggleableActiveColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/Checkbox\/activeColor.html",
            "name": "activeColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Checkbox",
            "params": []
        },
        {
            "desc": "<p>The color to use for the check icon when this checkbox is checked<\/p>\n<p>Defaults to Color(0xFFFFFFFF)<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color checkColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/Checkbox\/checkColor.html",
            "name": "checkColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Checkbox",
            "params": []
        },
        {
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/Checkbox\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/Checkbox\/materialTapTargetSize.html",
            "name": "materialTapTargetSize",
            "isDeprecated": false,
            "type": "material.MaterialTapTargetSize",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Checkbox",
            "params": []
        },
        {
            "desc": "<p>If true the checkbox's <a href=\"material\/Checkbox\/value.html\">value<\/a> can be true, false, or null.<\/p>\n<p>Checkbox displays a dash when its value is null.<\/p>\n<p>When a tri-state checkbox is tapped its <a href=\"material\/Checkbox\/onChanged.html\">onChanged<\/a> callback will be\napplied to true if the current value is null or false, false otherwise.\nTypically tri-state checkboxes are disabled (the onChanged callback is\nnull) so they don't respond to taps.<\/p>\n<p>If tristate is false (the default), <a href=\"material\/Checkbox\/value.html\">value<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool tristate\n\n<\/code><\/pre>\n        ",
            "href": "material\/Checkbox\/tristate.html",
            "name": "tristate",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Checkbox",
            "params": []
        },
        {
            "desc": "<p>Whether this checkbox is checked.<\/p>\n<p>This property must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool value\n\n<\/code><\/pre>\n        ",
            "href": "material\/Checkbox\/value.html",
            "name": "value",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Checkbox",
            "params": []
        }
    ]
}