{
    "name": "painting.DecorationImage",
    "extends": [],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/DecorationImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImage",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/DecorationImage\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final DecorationImage typedOther = other;\n  return image == typedOther.image\n      &amp;&amp; colorFilter == typedOther.colorFilter\n      &amp;&amp; fit == typedOther.fit\n      &amp;&amp; alignment == typedOther.alignment\n      &amp;&amp; centerSlice == typedOther.centerSlice\n      &amp;&amp; repeat == typedOther.repeat\n      &amp;&amp; matchTextDirection == typedOther.matchTextDirection;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "DecorationImage",
            "type": "",
            "desc": "<p>Creates an image to show in a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>.<\/p>\n<p>The <code>image<\/code>, <code>alignment<\/code>, <code>repeat<\/code>, and <code>matchTextDirection<\/code> arguments\nmust not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImage",
            "sig": "",
            "params": [
                {
                    "name": "image",
                    "type": "painting.ImageProvider",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colorFilter",
                    "type": "dart:ui.ColorFilter",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fit",
                    "type": "painting.BoxFit",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "painting.AlignmentGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "centerSlice",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "repeat",
                    "type": "painting.ImageRepeat",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matchTextDirection",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/DecorationImage\/DecorationImage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DecorationImage({\n  @required this.image,\n  this.colorFilter,\n  this.fit,\n  this.alignment = Alignment.center,\n  this.centerSlice,\n  this.repeat = ImageRepeat.noRepeat,\n  this.matchTextDirection = false,\n}) : assert(image != null),\n     assert(alignment != null),\n     assert(repeat != null),\n     assert(matchTextDirection != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createPainter",
            "type": "painting.DecorationImagePainter",
            "desc": "<p>Creates a <a href=\"painting\/DecorationImagePainter-class.html\">DecorationImagePainter<\/a> for this <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>.<\/p>\n<p>The <code>onChanged<\/code> argument must not be null. It will be called whenever the\nimage needs to be repainted, e.g. because it is loading incrementally or\nbecause it is animated.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImage",
            "sig": "",
            "params": [
                {
                    "name": "onChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/DecorationImage\/createPainter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DecorationImagePainter createPainter(VoidCallback onChanged) {\n  assert(onChanged != null);\n  return DecorationImagePainter._(this, onChanged);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImage",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/DecorationImage\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; properties = &lt;String&gt;[];\n  properties.add('$image');\n  if (colorFilter != null)\n    properties.add('$colorFilter');\n  if (fit != null &amp;&amp;\n      !(fit == BoxFit.fill &amp;&amp; centerSlice != null) &amp;&amp;\n      !(fit == BoxFit.scaleDown &amp;&amp; centerSlice == null))\n    properties.add('$fit');\n  properties.add('$alignment');\n  if (centerSlice != null)\n    properties.add('centerSlice: $centerSlice');\n  if (repeat != ImageRepeat.noRepeat)\n    properties.add('$repeat');\n  if (matchTextDirection)\n    properties.add('match text direction');\n  return '$runtimeType(${properties.join(\", \")})';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "alignment",
            "type": "painting.AlignmentGeometry",
            "types": [],
            "desc": "<p>How to align the image within its bounds.<\/p>\n<p>The alignment aligns the given position in the image to the given position\nin the layout bounds. For example, an <a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (-1.0,\n-1.0) aligns the image to the top-left corner of its layout bounds, while a\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (1.0, 1.0) aligns the bottom right of the\nimage with the bottom right corner of its layout bounds. Similarly, an\nalignment of (0.0, 1.0) aligns the bottom middle of the image with the\nmiddle of the bottom edge of its layout bounds.<\/p>\n<p>To display a subpart of an image, consider using a <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> and\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>.<\/p>\n<p>If the <a href=\"painting\/DecorationImage\/alignment.html\">alignment<\/a> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>-dependent (i.e. if it is a\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), then a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> must be available\nwhen the image is painted.<\/p>\n<p>Defaults to <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/alignment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "centerSlice",
            "type": "dart:ui.Rect",
            "types": [],
            "desc": "<p>The center slice for a nine-patch image.<\/p>\n<p>The region of the image inside the center slice will be stretched both\nhorizontally and vertically to fit the image into its destination. The\nregion of the image above and below the center slice will be stretched\nonly horizontally and the region of the image to the left and right of\nthe center slice will be stretched only vertically.<\/p>\n<p>The stretching will be applied in order to make the image fit into the box\nspecified by <a href=\"painting\/DecorationImage\/fit.html\">fit<\/a>. When <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> is not null, <a href=\"painting\/DecorationImage\/fit.html\">fit<\/a> defaults to\n<a href=\"painting\/BoxFit-class.html\">BoxFit.fill<\/a>, which distorts the destination image size relative to the\nimage's original aspect ratio. Values of <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> which do not distort the\ndestination image size will result in <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> having no effect\n(since the nine regions of the image will be rendered with the same\nscaling, as if it wasn't specified).<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/centerSlice.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Rect centerSlice\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "colorFilter",
            "type": "dart:ui.ColorFilter",
            "types": [],
            "desc": "<p>A color filter to apply to the image before painting it.<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/colorFilter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ColorFilter colorFilter\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fit",
            "type": "painting.BoxFit",
            "types": [],
            "desc": "<p>How the image should be inscribed into the box.<\/p>\n<p>The default is <a href=\"painting\/BoxFit-class.html\">BoxFit.scaleDown<\/a> if <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> is null, and\n<a href=\"painting\/BoxFit-class.html\">BoxFit.fill<\/a> if <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> is not null.<\/p>\n<p>See the discussion at <a href=\"painting\/paintImage.html\">paintImage<\/a> for more details.<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/fit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxFit fit\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/DecorationImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(image, colorFilter, fit, alignment, centerSlice, repeat, matchTextDirection);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "image",
            "type": "painting.ImageProvider",
            "types": [],
            "desc": "<p>The image to be painted into the decoration.<\/p>\n<p>Typically this will be an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> (for an image shipped with the\napplication) or a <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a> (for an image obtained from the network).<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/image.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider image\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "matchTextDirection",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to paint the image in the direction of the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>If this is true, then in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> contexts, the image will be\ndrawn with its origin in the top left (the \"normal\" painting direction for\nimages); and in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> contexts, the image will be drawn with\na scaling factor of -1 in the horizontal direction so that the origin is\nin the top right.<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/matchTextDirection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool matchTextDirection\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "repeat",
            "type": "painting.ImageRepeat",
            "types": [],
            "desc": "<p>How to paint any portions of the box that would not otherwise be covered\nby the image.<\/p>\n        ",
            "memberOf": "painting.DecorationImage",
            "isConstant": false,
            "href": "painting\/DecorationImage\/repeat.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageRepeat repeat\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/DecorationImage-class.html",
    "desc": "<p>An image for a box decoration.<\/p>\n<p>The image is painted using <a href=\"painting\/paintImage.html\">paintImage<\/a>, which describes the meanings of the\nvarious fields on this class in more detail.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DecorationImage"
}