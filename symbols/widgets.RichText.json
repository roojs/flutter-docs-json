{
    "desc": "<p>A paragraph of rich text.<\/p>\n<p>The <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget displays text that uses multiple different styles. The\ntext to display is described using a tree of <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects, each of\nwhich has an associated style that is used for that subtree. The text might\nbreak across multiple lines or might all be displayed on the same line\ndepending on the layout constraints.<\/p>\n<p>Text displayed in a <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget must be explicitly styled. When\npicking which style to use, consider using <a href=\"widgets\/DefaultTextStyle\/of.html\">DefaultTextStyle.of<\/a> the current\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> to provide defaults. For more details on how to style text in\na <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget, see the documentation for <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<p>Consider using the <a href=\"widgets\/Text-class.html\">Text<\/a> widget to integrate with the <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>\nautomatically. When all the text uses the same style, the default constructor\nis less verbose. The <a href=\"widgets\/Text\/Text.rich.html\">Text.rich<\/a> constructor allows you to style multiple\nspans with the default text style while still allowing specified styles per\nspan.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">RichText(\n  text: TextSpan(\n    text: 'Hello ',\n    style: DefaultTextStyle.of(context).style,\n    children: &lt;TextSpan&gt;[\n      TextSpan(text: 'bold', style: TextStyle(fontWeight: FontWeight.bold)),\n      TextSpan(text: ' world!'),\n    ],\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>, which discusses how to style text.<\/li>\n<li>\n<a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, which is used to describe the text in a paragraph.<\/li>\n<li>\n<a href=\"widgets\/Text-class.html\">Text<\/a>, which automatically applies the ambient styles described by a\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> to a single string.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "widgets\/RichText-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.RichText",
    "shortname": "RichText",
    "extends": [
        "widgets.LeafRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a paragraph of rich text.<\/p>\n<p>The <code>text<\/code>, <code>textAlign<\/code>, <code>softWrap<\/code>, <code>overflow<\/code>, and <code>textScaleFactor<\/code>\narguments must not be null.<\/p>\n<p>The <code>maxLines<\/code> property may be null (and indeed defaults to null), but if\nit is not null, it must be greater than zero.<\/p>\n<p>The <code>textDirection<\/code>, if null, defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>,\nwhich in that case must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RichText({\n  Key key,\n  @required this.text,\n  this.textAlign = TextAlign.start,\n  this.textDirection,\n  this.softWrap = true,\n  this.overflow = TextOverflow.clip,\n  this.textScaleFactor = 1.0,\n  this.maxLines,\n  this.locale,\n  this.strutStyle,\n}) : assert(text != null),\n     assert(textAlign != null),\n     assert(softWrap != null),\n     assert(overflow != null),\n     assert(textScaleFactor != null),\n     assert(maxLines == null || maxLines &gt; 0),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/RichText\/RichText.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.RichText",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "locale",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                },
                {
                    "name": "maxLines",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "overflow",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TextOverflow"
                },
                {
                    "name": "softWrap",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "strutStyle",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.StrutStyle"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextSpan"
                },
                {
                    "name": "textAlign",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textScaleFactor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/LeafRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderParagraph createRenderObject(BuildContext context) {\n  assert(textDirection != null || debugCheckHasDirectionality(context));\n  return RenderParagraph(text,\n    textAlign: textAlign,\n    textDirection: textDirection ?? Directionality.of(context),\n    softWrap: softWrap,\n    overflow: overflow,\n    textScaleFactor: textScaleFactor,\n    maxLines: maxLines,\n    strutStyle: strutStyle,\n    locale: locale ?? Localizations.localeOf(context, nullOk: true),\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RichText\/createRenderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderParagraph",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RichText",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/RichText\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: TextAlign.start));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(FlagProperty('softWrap', value: softWrap, ifTrue: 'wrapping at box width', ifFalse: 'no wrapping except at line break characters', showName: true));\n  properties.add(EnumProperty&lt;TextOverflow&gt;('overflow', overflow, defaultValue: TextOverflow.clip));\n  properties.add(DoubleProperty('textScaleFactor', textScaleFactor, defaultValue: 1.0));\n  properties.add(IntProperty('maxLines', maxLines, ifNull: 'unlimited'));\n  properties.add(StringProperty('text', text.toPlainText()));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RichText\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RichText",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/RichText\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/LeafRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderParagraph renderObject) {\n  assert(textDirection != null || debugCheckHasDirectionality(context));\n  renderObject\n    ..text = text\n    ..textAlign = textAlign\n    ..textDirection = textDirection ?? Directionality.of(context)\n    ..softWrap = softWrap\n    ..overflow = overflow\n    ..textScaleFactor = textScaleFactor\n    ..maxLines = maxLines\n    ..strutStyle = strutStyle\n    ..locale = locale ?? Localizations.localeOf(context, nullOk: true);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RichText\/updateRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RichText",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderParagraph"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Used to select a font when the same Unicode character can\nbe rendered differently, depending on the locale.<\/p>\n<p>It's rarely necessary to set this property. By default its value\nis inherited from the enclosing app with <code>Localizations.localeOf(context)<\/code>.<\/p>\n<p>See <a href=\"widgets\/RichText\/locale.html\">RenderParagraph.locale<\/a> for more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/locale.html",
            "isDeprecated": "0",
            "type": "dart:ui.Locale",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>An optional maximum number of lines for the text to span, wrapping if necessary.\nIf the text exceeds the given number of lines, it will be truncated according\nto <a href=\"widgets\/RichText\/overflow.html\">overflow<\/a>.<\/p>\n<p>If this is 1, text will not wrap. Otherwise, text will be wrapped at the\nedge of the box.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLines\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/maxLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>How visual overflow should be handled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextOverflow overflow\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/overflow.html",
            "isDeprecated": "0",
            "type": "rendering.TextOverflow",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>Whether the text should break at soft line breaks.<\/p>\n<p>If false, the glyphs in the text will be positioned as if there was unlimited horizontal space.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool softWrap\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/softWrap.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>The strut style to use. Strut style defines the strut, which sets minimum\nvertical layout metrics.<\/p>\n<p>Omitting or providing null will disable strut.<\/p>\n<p>Omitting or providing null for any properties of <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> will result in\ndefault values being used. It is highly recommended to at least specify a\n<code>fontSize<\/code>.<\/p>\n<p>See <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StrutStyle strutStyle\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/strutStyle.html",
            "isDeprecated": "0",
            "type": "painting.StrutStyle",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>The text to display in this widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSpan text\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/text.html",
            "isDeprecated": "0",
            "type": "painting.TextSpan",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>How the text should be aligned horizontally.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAlign textAlign\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/textAlign.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextAlign",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>The directionality of the text.<\/p>\n<p>This decides how <a href=\"widgets\/RichText\/textAlign.html\">textAlign<\/a> values like <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a> are interpreted.<\/p>\n<p>This is also used to disambiguate how to render bidirectional text. For\nexample, if the <a href=\"widgets\/RichText\/text.html\">text<\/a> is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, if any. If there is no ambient\n<a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, then this must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.RichText",
            "params": []
        },
        {
            "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double textScaleFactor\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RichText\/textScaleFactor.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.RichText",
            "params": []
        }
    ]
}