{
    "name": "vector_math_64.Aabb3",
    "extends": [],
    "memberOf": "vector_math_64",
    "events": [],
    "methods": [
        {
            "name": "Aabb3",
            "type": "",
            "desc": "<p>Create a new AABB with <a href=\"vector_math_64\/Aabb3\/min.html\">min<\/a> and <a href=\"vector_math_64\/Aabb3\/max.html\">max<\/a> set to the origin.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Aabb3()\n    : _min = new Vector3.zero(),\n      _max = new Vector3.zero();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.centerAndHalfExtents",
            "type": "",
            "desc": "<p>Create a new AABB with a <code>center<\/code> and <code>halfExtents<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "halfExtents",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.centerAndHalfExtents.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Aabb3.centerAndHalfExtents(Vector3 center, Vector3 halfExtents) =&gt;\n    new Aabb3()..setCenterAndHalfExtents(center, halfExtents);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsAabb3",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> contains <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/containsAabb3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAabb3(Aabb3 other) {\n  final Vector3 otherMax = other._max;\n  final Vector3 otherMin = other._min;\n\n  return (_min.x &lt; otherMin.x) &amp;&amp;\n      (_min.y &lt; otherMin.y) &amp;&amp;\n      (_min.z &lt; otherMin.z) &amp;&amp;\n      (_max.x &gt; otherMax.x) &amp;&amp;\n      (_max.y &gt; otherMax.y) &amp;&amp;\n      (_max.z &gt; otherMax.z);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsSphere",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> contains <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Sphere",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/containsSphere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsSphere(Sphere other) {\n  final Vector3 boxExtends = new Vector3.all(other._radius);\n  final Aabb3 sphereBox =\n      new Aabb3.centerAndHalfExtents(other._center, boxExtends);\n\n  return containsAabb3(sphereBox);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsTriangle",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> contains <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Triangle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/containsTriangle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsTriangle(Triangle other) =&gt;\n    containsVector3(other._point0) &amp;&amp;\n    containsVector3(other._point1) &amp;&amp;\n    containsVector3(other._point2);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsVector3",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> contains <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/containsVector3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsVector3(Vector3 other) =&gt;\n    (_min.x &lt; other.x) &amp;&amp;\n    (_min.y &lt; other.y) &amp;&amp;\n    (_min.z &lt; other.z) &amp;&amp;\n    (_max.x &gt; other.x) &amp;&amp;\n    (_max.y &gt; other.y) &amp;&amp;\n    (_max.z &gt; other.z);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.copy",
            "type": "",
            "desc": "<p>Create a new AABB as a copy of <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.copy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Aabb3.copy(Aabb3 other)\n    : _min = new Vector3.copy(other._min),\n      _max = new Vector3.copy(other._max);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyCenter",
            "type": "",
            "desc": "<p>Copy the <code>center<\/code> of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/copyCenter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void copyCenter(Vector3 center) {\n  center\n    ..setFrom(_min)\n    ..add(_max)\n    ..scale(0.5);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "copyCenterAndHalfExtents",
            "type": "",
            "desc": "<p>Copy the <code>center<\/code> and the <code>halfExtends<\/code> of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "halfExtents",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/copyCenterAndHalfExtents.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void copyCenterAndHalfExtents(Vector3 center, Vector3 halfExtents) {\n  center\n    ..setFrom(_min)\n    ..add(_max)\n    ..scale(0.5);\n  halfExtents\n    ..setFrom(_max)\n    ..sub(_min)\n    ..scale(0.5);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "copyFrom",
            "type": "",
            "desc": "<p>Copy the <a href=\"vector_math_64\/Aabb3\/min.html\">min<\/a> and <a href=\"vector_math_64\/Aabb3\/max.html\">max<\/a> from <code>other<\/code> into <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/copyFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void copyFrom(Aabb3 other) {\n  _min.setFrom(other._min);\n  _max.setFrom(other._max);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "Aabb3.fromBuffer",
            "type": "",
            "desc": "<p>Constructs <a href=\"vector_math_64\/Aabb3-class.html\">Aabb3<\/a> with a min\/max <code>storage<\/code> that views given <code>buffer<\/code>\nstarting at <code>offset<\/code>. <code>offset<\/code> has to be multiple of\n<a href=\"dart-typed_data\/Float64List\/bytesPerElement-constant.html\">Float64List.bytesPerElement<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "buffer",
                    "type": "dart:typed_data.ByteBuffer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.fromBuffer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Aabb3.fromBuffer(ByteBuffer buffer, int offset)\n    : _min = new Vector3.fromBuffer(buffer, offset),\n      _max = new Vector3.fromBuffer(\n          buffer, offset + Float64List.bytesPerElement * 3);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.fromObb3",
            "type": "",
            "desc": "<p>Create a new AABB that encloses a <code>obb<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "obb",
                    "type": "vector_math_64.Obb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.fromObb3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Aabb3.fromObb3(Obb3 obb) =&gt; new Aabb3()..setObb3(obb);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.fromQuad",
            "type": "",
            "desc": "<p>Create a new AABB that encloses a <code>quad<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "quad",
                    "type": "vector_math_64.Quad",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.fromQuad.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Aabb3.fromQuad(Quad quad) =&gt; new Aabb3()..setQuad(quad);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.fromRay",
            "type": "",
            "desc": "<p>Create a new AABB that encloses a limited <code>ray<\/code> (or line segment) that has\na minLimit and maxLimit.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "ray",
                    "type": "vector_math_64.Ray",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "limitMin",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "limitMax",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.fromRay.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Aabb3.fromRay(Ray ray, double limitMin, double limitMax) =&gt;\n    new Aabb3()..setRay(ray, limitMin, limitMax);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.fromSphere",
            "type": "",
            "desc": "<p>Create a new AABB that encloses a <code>sphere<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "sphere",
                    "type": "vector_math_64.Sphere",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.fromSphere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Aabb3.fromSphere(Sphere sphere) =&gt; new Aabb3()..setSphere(sphere);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.fromTriangle",
            "type": "",
            "desc": "<p>Create a new AABB that encloses a <code>triangle<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "triangle",
                    "type": "vector_math_64.Triangle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.fromTriangle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Aabb3.fromTriangle(Triangle triangle) =&gt;\n    new Aabb3()..setTriangle(triangle);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getPN",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "planeNormal",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "outP",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "outN",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/getPN.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void getPN(Vector3 planeNormal, Vector3 outP, Vector3 outN) {\n  if (planeNormal.x &lt; 0.0) {\n    outP.x = _min.x;\n    outN.x = _max.x;\n  } else {\n    outP.x = _max.x;\n    outN.x = _min.x;\n  }\n\n  if (planeNormal.y &lt; 0.0) {\n    outP.y = _min.y;\n    outN.y = _max.y;\n  } else {\n    outP.y = _max.y;\n    outN.y = _min.y;\n  }\n\n  if (planeNormal.z &lt; 0.0) {\n    outP.z = _min.z;\n    outN.z = _max.z;\n  } else {\n    outP.z = _max.z;\n    outN.z = _min.z;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hull",
            "type": "",
            "desc": "<p>Set the min and max of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> so that <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> is a hull of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> and\n<code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/hull.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hull(Aabb3 other) {\n  Vector3.min(_min, other._min, _min);\n  Vector3.max(_max, other._max, _max);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hullPoint",
            "type": "",
            "desc": "<p>Set the min and max of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> so that <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> contains <code>point<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "point",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/hullPoint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hullPoint(Vector3 point) {\n  Vector3.min(_min, point, _min);\n  Vector3.max(_max, point, _max);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "intersectsWithAabb3",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> intersects with <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/intersectsWithAabb3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithAabb3(Aabb3 other) {\n  final Vector3 otherMax = other._max;\n  final Vector3 otherMin = other._min;\n\n  return (_min.x &lt;= otherMax.x) &amp;&amp;\n      (_min.y &lt;= otherMax.y) &amp;&amp;\n      (_min.z &lt;= otherMax.z) &amp;&amp;\n      (_max.x &gt;= otherMin.x) &amp;&amp;\n      (_max.y &gt;= otherMin.y) &amp;&amp;\n      (_max.z &gt;= otherMin.z);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersectsWithPlane",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> intersects with <code>other<\/code><\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Plane",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "result",
                    "type": "vector_math_64.IntersectionResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/intersectsWithPlane.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithPlane(Plane other, {IntersectionResult result}) {\n  \/\/ This line is not necessary with a (center, extents) AABB representation\n  copyCenterAndHalfExtents(_aabbCenter, _aabbHalfExtents);\n\n  \/\/ Compute the projection interval radius of b onto L(t) = b.c + t * p.n\n  final double r = _aabbHalfExtents[0] * other.normal[0].abs() +\n      _aabbHalfExtents[1] * other.normal[1].abs() +\n      _aabbHalfExtents[2] * other.normal[2].abs();\n  \/\/ Compute distance of box center from plane\n  final double s = other.normal.dot(_aabbCenter) - other.constant;\n  \/\/ Intersection occurs when distance s falls within [-r,+r] interval\n  if (s.abs() &lt;= r) {\n    final double a = s - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      result.axis.setFrom(other.normal);\n    }\n    return true;\n  }\n\n  return false;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersectsWithQuad",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> intersects with <code>other<\/code>.\n<code>epsilon<\/code> allows the caller to specify a custum eplsilon value that should\nbe used for the test. If <code>result<\/code> is specified and an intersection is\nfound, result is modified to contain more details about the type of\nintersection.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Quad",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "result",
                    "type": "vector_math_64.IntersectionResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/intersectsWithQuad.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithQuad(Quad other, {IntersectionResult result}) {\n  other.copyTriangles(_quadTriangle0, _quadTriangle1);\n\n  return intersectsWithTriangle(_quadTriangle0, result: result) ||\n      intersectsWithTriangle(_quadTriangle1, result: result);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersectsWithSphere",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> intersects with <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Sphere",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/intersectsWithSphere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithSphere(Sphere other) {\n  final Vector3 center = other._center;\n  final double radius = other._radius;\n  double d = 0.0;\n  double e = 0.0;\n\n  for (int i = 0; i &lt; 3; ++i) {\n    if ((e = center[i] - _min[i]) &lt; 0.0) {\n      if (e &lt; -radius) {\n        return false;\n      }\n\n      d = d + e * e;\n    } else {\n      if ((e = center[i] - _max[i]) &gt; 0.0) {\n        if (e &gt; radius) {\n          return false;\n        }\n\n        d = d + e * e;\n      }\n    }\n  }\n\n  return d &lt;= radius * radius;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersectsWithTriangle",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> intersects with <code>other<\/code>.\n<code>epsilon<\/code> allows the caller to specify a custum eplsilon value that should\nbe used for the test. If <code>result<\/code> is specified and an intersection is\nfound, result is modified to contain more details about the type of\nintersection.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Triangle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "epsilon",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "result",
                    "type": "vector_math_64.IntersectionResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/intersectsWithTriangle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithTriangle(Triangle other,\n    {double epsilon: 1e-3, IntersectionResult result}) {\n  double p0, p1, p2, r, len;\n  double a;\n\n  \/\/ This line isn't required if we are using center and half extents to\n  \/\/ define a aabb\n  copyCenterAndHalfExtents(_aabbCenter, _aabbHalfExtents);\n\n  \/\/ Translate triangle as conceptually moving AABB to origin\n  _v0\n    ..setFrom(other.point0)\n    ..sub(_aabbCenter);\n  _v1\n    ..setFrom(other.point1)\n    ..sub(_aabbCenter);\n  _v2\n    ..setFrom(other.point2)\n    ..sub(_aabbCenter);\n\n  \/\/ Translate triangle as conceptually moving AABB to origin\n  _f0\n    ..setFrom(_v1)\n    ..sub(_v0);\n  _f1\n    ..setFrom(_v2)\n    ..sub(_v1);\n  _f2\n    ..setFrom(_v0)\n    ..sub(_v2);\n\n  \/\/ Test axes a00..a22 (category 3)\n  \/\/ Test axis a00\n  len = _f0.y * _f0.y + _f0.z * _f0.z;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.z * _f0.y - _v0.y * _f0.z;\n    p2 = _v2.z * _f0.y - _v2.y * _f0.z;\n    r = _aabbHalfExtents[1] * _f0.z.abs() + _aabbHalfExtents[2] * _f0.y.abs();\n    if (math.max(-math.max(p0, p2), math.min(p0, p2)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p2) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u0.crossInto(_f0, result.axis);\n    }\n  }\n\n  \/\/ Test axis a01\n  len = _f1.y * _f1.y + _f1.z * _f1.z;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.z * _f1.y - _v0.y * _f1.z;\n    p1 = _v1.z * _f1.y - _v1.y * _f1.z;\n    r = _aabbHalfExtents[1] * _f1.z.abs() + _aabbHalfExtents[2] * _f1.y.abs();\n    if (math.max(-math.max(p0, p1), math.min(p0, p1)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p1) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u0.crossInto(_f1, result.axis);\n    }\n  }\n\n  \/\/ Test axis a02\n  len = _f2.y * _f2.y + _f2.z * _f2.z;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.z * _f2.y - _v0.y * _f2.z;\n    p1 = _v1.z * _f2.y - _v1.y * _f2.z;\n    r = _aabbHalfExtents[1] * _f2.z.abs() + _aabbHalfExtents[2] * _f2.y.abs();\n    if (math.max(-math.max(p0, p1), math.min(p0, p1)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p1) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u0.crossInto(_f2, result.axis);\n    }\n  }\n\n  \/\/ Test axis a10\n  len = _f0.x * _f0.x + _f0.z * _f0.z;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.x * _f0.z - _v0.z * _f0.x;\n    p2 = _v2.x * _f0.z - _v2.z * _f0.x;\n    r = _aabbHalfExtents[0] * _f0.z.abs() + _aabbHalfExtents[2] * _f0.x.abs();\n    if (math.max(-math.max(p0, p2), math.min(p0, p2)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p2) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u1.crossInto(_f0, result.axis);\n    }\n  }\n\n  \/\/ Test axis a11\n  len = _f1.x * _f1.x + _f1.z * _f1.z;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.x * _f1.z - _v0.z * _f1.x;\n    p1 = _v1.x * _f1.z - _v1.z * _f1.x;\n    r = _aabbHalfExtents[0] * _f1.z.abs() + _aabbHalfExtents[2] * _f1.x.abs();\n    if (math.max(-math.max(p0, p1), math.min(p0, p1)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p1) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u1.crossInto(_f1, result.axis);\n    }\n  }\n\n  \/\/ Test axis a12\n  len = _f2.x * _f2.x + _f2.z * _f2.z;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.x * _f2.z - _v0.z * _f2.x;\n    p1 = _v1.x * _f2.z - _v1.z * _f2.x;\n    r = _aabbHalfExtents[0] * _f2.z.abs() + _aabbHalfExtents[2] * _f2.x.abs();\n    if (math.max(-math.max(p0, p1), math.min(p0, p1)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p1) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u1.crossInto(_f2, result.axis);\n    }\n  }\n\n  \/\/ Test axis a20\n  len = _f0.x * _f0.x + _f0.y * _f0.y;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.y * _f0.x - _v0.x * _f0.y;\n    p2 = _v2.y * _f0.x - _v2.x * _f0.y;\n    r = _aabbHalfExtents[0] * _f0.y.abs() + _aabbHalfExtents[1] * _f0.x.abs();\n    if (math.max(-math.max(p0, p2), math.min(p0, p2)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p2) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u2.crossInto(_f0, result.axis);\n    }\n  }\n\n  \/\/ Test axis a21\n  len = _f1.x * _f1.x + _f1.y * _f1.y;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.y * _f1.x - _v0.x * _f1.y;\n    p1 = _v1.y * _f1.x - _v1.x * _f1.y;\n    r = _aabbHalfExtents[0] * _f1.y.abs() + _aabbHalfExtents[1] * _f1.x.abs();\n    if (math.max(-math.max(p0, p1), math.min(p0, p1)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p1) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u2.crossInto(_f1, result.axis);\n    }\n  }\n\n  \/\/ Test axis a22\n  len = _f2.x * _f2.x + _f2.y * _f2.y;\n  if (len &gt; epsilon) {\n    \/\/ Ignore tests on degenerate axes.\n    p0 = _v0.y * _f2.x - _v0.x * _f2.y;\n    p1 = _v1.y * _f2.x - _v1.x * _f2.y;\n    r = _aabbHalfExtents[0] * _f2.y.abs() + _aabbHalfExtents[1] * _f2.x.abs();\n    if (math.max(-math.max(p0, p1), math.min(p0, p1)) &gt; r + epsilon) {\n      return false; \/\/ Axis is a separating axis\n    }\n\n    a = math.min(p0, p1) - r;\n    if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n      result._depth = a;\n      _u2.crossInto(_f2, result.axis);\n    }\n  }\n\n  \/\/ Test the three axes corresponding to the face normals of AABB b (category 1). \/\/ Exit if...\n  \/\/ ... [-e0, e0] and [min(v0.x,v1.x,v2.x), max(v0.x,v1.x,v2.x)] do not overlap\n  if (math.max(_v0.x, math.max(_v1.x, _v2.x)) &lt; -_aabbHalfExtents[0] ||\n      math.min(_v0.x, math.min(_v1.x, _v2.x)) &gt; _aabbHalfExtents[0]) {\n    return false;\n  }\n  a = math.min(_v0.x, math.min(_v1.x, _v2.x)) - _aabbHalfExtents[0];\n  if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n    result._depth = a;\n    result.axis.setFrom(_u0);\n  }\n  \/\/ ... [-e1, e1] and [min(v0.y,v1.y,v2.y), max(v0.y,v1.y,v2.y)] do not overlap\n  if (math.max(_v0.y, math.max(_v1.y, _v2.y)) &lt; -_aabbHalfExtents[1] ||\n      math.min(_v0.y, math.min(_v1.y, _v2.y)) &gt; _aabbHalfExtents[1]) {\n    return false;\n  }\n  a = math.min(_v0.y, math.min(_v1.y, _v2.y)) - _aabbHalfExtents[1];\n  if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n    result._depth = a;\n    result.axis.setFrom(_u1);\n  }\n  \/\/ ... [-e2, e2] and [min(v0.z,v1.z,v2.z), max(v0.z,v1.z,v2.z)] do not overlap\n  if (math.max(_v0.z, math.max(_v1.z, _v2.z)) &lt; -_aabbHalfExtents[2] ||\n      math.min(_v0.z, math.min(_v1.z, _v2.z)) &gt; _aabbHalfExtents[2]) {\n    return false;\n  }\n  a = math.min(_v0.z, math.min(_v1.z, _v2.z)) - _aabbHalfExtents[2];\n  if (result != null &amp;&amp; (result._depth == null || result._depth &lt; a)) {\n    result._depth = a;\n    result.axis.setFrom(_u2);\n  }\n\n  \/\/ It seems like that wee need to move the edges before creating the\n  \/\/ plane\n  _v0.add(_aabbCenter);\n\n  \/\/ Test separating axis corresponding to triangle face normal (category 2)\n  _f0.crossInto(_f1, _trianglePlane.normal);\n  _trianglePlane.constant = _trianglePlane.normal.dot(_v0);\n  return intersectsWithPlane(_trianglePlane, result: result);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersectsWithVector3",
            "type": "dart:core.bool",
            "desc": "<p>Return if <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> intersects with <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/intersectsWithVector3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithVector3(Vector3 other) =&gt;\n    (_min.x &lt;= other.x) &amp;&amp;\n    (_min.y &lt;= other.y) &amp;&amp;\n    (_min.z &lt;= other.z) &amp;&amp;\n    (_max.x &gt;= other.x) &amp;&amp;\n    (_max.y &gt;= other.y) &amp;&amp;\n    (_max.z &gt;= other.z);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Aabb3.minMax",
            "type": "",
            "desc": "<p>Create a new AABB with a <code>min<\/code> and <code>max<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "min",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "max",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math_64\/Aabb3\/Aabb3.minMax.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Aabb3.minMax(Vector3 min, Vector3 max)\n    : _min = new Vector3.copy(min),\n      _max = new Vector3.copy(max);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "rotate",
            "type": "",
            "desc": "<p>Rotate <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> by the rotation matrix <code>t<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/rotate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void rotate(Matrix4 t) {\n  final Vector3 center = new Vector3.zero();\n  final Vector3 halfExtents = new Vector3.zero();\n  copyCenterAndHalfExtents(center, halfExtents);\n  t.absoluteRotate(halfExtents);\n  _min\n    ..setFrom(center)\n    ..sub(halfExtents);\n  _max\n    ..setFrom(center)\n    ..add(halfExtents);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "rotated",
            "type": "vector_math_64.Aabb3",
            "desc": "<p>Create a copy of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> that is rotated by the rotation matrix <code>t<\/code> and\nstore it in <code>out<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "out",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/rotated.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Aabb3 rotated(Matrix4 t, Aabb3 out) =&gt; out\n  ..copyFrom(this)\n  ..rotate(t);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setCenterAndHalfExtents",
            "type": "",
            "desc": "<p>Set the AABB by a <code>center<\/code> and <code>halfExtents<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "halfExtents",
                    "type": "vector_math_64.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/setCenterAndHalfExtents.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCenterAndHalfExtents(Vector3 center, Vector3 halfExtents) {\n  _min\n    ..setFrom(center)\n    ..sub(halfExtents);\n  _max\n    ..setFrom(center)\n    ..add(halfExtents);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setObb3",
            "type": "",
            "desc": "<p>Set the AABB to enclose a <code>obb<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "obb",
                    "type": "vector_math_64.Obb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/setObb3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setObb3(Obb3 obb) {\n  final Vector3 corner = new Vector3.zero();\n\n  obb.copyCorner(0, corner);\n  _min.setFrom(corner);\n  _max.setFrom(corner);\n\n  obb.copyCorner(1, corner);\n  hullPoint(corner);\n\n  obb.copyCorner(2, corner);\n  hullPoint(corner);\n\n  obb.copyCorner(3, corner);\n  hullPoint(corner);\n\n  obb.copyCorner(4, corner);\n  hullPoint(corner);\n\n  obb.copyCorner(5, corner);\n  hullPoint(corner);\n\n  obb.copyCorner(6, corner);\n  hullPoint(corner);\n\n  obb.copyCorner(7, corner);\n  hullPoint(corner);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setQuad",
            "type": "",
            "desc": "<p>Set the AABB to enclose a <code>quad<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "quad",
                    "type": "vector_math_64.Quad",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/setQuad.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setQuad(Quad quad) {\n  _min.setValues(\n      math.min(quad._point0.x,\n          math.min(quad._point1.x, math.min(quad._point2.x, quad._point3.x))),\n      math.min(quad._point0.y,\n          math.min(quad._point1.y, math.min(quad._point2.y, quad._point3.y))),\n      math.min(\n          quad._point0.z,\n          math.min(\n              quad._point1.z, math.min(quad._point2.z, quad._point3.z))));\n  _max.setValues(\n      math.max(quad._point0.x,\n          math.max(quad._point1.x, math.max(quad._point2.x, quad._point3.x))),\n      math.max(quad._point0.y,\n          math.max(quad._point1.y, math.max(quad._point2.y, quad._point3.y))),\n      math.max(\n          quad._point0.z,\n          math.max(\n              quad._point1.z, math.max(quad._point2.z, quad._point3.z))));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setRay",
            "type": "",
            "desc": "<p>Set the AABB to enclose a limited <code>ray<\/code> (or line segment) that is limited\nby <code>limitMin<\/code> and <code>limitMax<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "ray",
                    "type": "vector_math_64.Ray",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "limitMin",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "limitMax",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/setRay.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRay(Ray ray, double limitMin, double limitMax) {\n  ray..copyAt(_min, limitMin)..copyAt(_max, limitMax);\n\n  if (_max.x &lt; _min.x) {\n    final double temp = _max.x;\n    _max.x = _min.x;\n    _min.x = temp;\n  }\n\n  if (_max.y &lt; _min.y) {\n    final double temp = _max.y;\n    _max.y = _min.y;\n    _min.y = temp;\n  }\n\n  if (_max.z &lt; _min.z) {\n    final double temp = _max.z;\n    _max.z = _min.z;\n    _min.z = temp;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setSphere",
            "type": "",
            "desc": "<p>Set the AABB to enclose a <code>sphere<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "sphere",
                    "type": "vector_math_64.Sphere",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/setSphere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setSphere(Sphere sphere) {\n  _min\n    ..splat(-sphere._radius)\n    ..add(sphere._center);\n  _max\n    ..splat(sphere._radius)\n    ..add(sphere._center);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setTriangle",
            "type": "",
            "desc": "<p>Set the AABB to enclose a <code>triangle<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "triangle",
                    "type": "vector_math_64.Triangle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/setTriangle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setTriangle(Triangle triangle) {\n  _min.setValues(\n      math.min(triangle._point0.x,\n          math.min(triangle._point1.x, triangle._point2.x)),\n      math.min(triangle._point0.y,\n          math.min(triangle._point1.y, triangle._point2.y)),\n      math.min(triangle._point0.z,\n          math.min(triangle._point1.z, triangle._point2.z)));\n  _max.setValues(\n      math.max(triangle._point0.x,\n          math.max(triangle._point1.x, triangle._point2.x)),\n      math.max(triangle._point0.y,\n          math.max(triangle._point1.y, triangle._point2.y)),\n      math.max(triangle._point0.z,\n          math.max(triangle._point1.z, triangle._point2.z)));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "transform",
            "type": "",
            "desc": "<p>Transform <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> by the transform <code>t<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/transform.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void transform(Matrix4 t) {\n  final Vector3 center = new Vector3.zero();\n  final Vector3 halfExtents = new Vector3.zero();\n  copyCenterAndHalfExtents(center, halfExtents);\n  t\n    ..transform3(center)\n    ..absoluteRotate(halfExtents);\n  _min\n    ..setFrom(center)\n    ..sub(halfExtents);\n  _max\n    ..setFrom(center)\n    ..add(halfExtents);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "transformed",
            "type": "vector_math_64.Aabb3",
            "desc": "<p>Create a copy of <a href=\"vector_math_64\/Aabb3-class.html\">this<\/a> that is transformed by the transform <code>t<\/code> and store\nit in <code>out<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math_64.Aabb3",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "out",
                    "type": "vector_math_64.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math_64\/Aabb3\/transformed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Aabb3 transformed(Matrix4 t, Aabb3 out) =&gt; out\n  ..copyFrom(this)\n  ..transform(t);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "center",
            "type": "vector_math_64.Vector3",
            "types": [],
            "desc": "<p>The center of the AABB.<\/p>\n        ",
            "memberOf": "vector_math_64.Aabb3",
            "isConstant": false,
            "href": "vector_math_64\/Aabb3\/center.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Vector3 get center =&gt; _min.clone()\n  ..add(_max)\n  ..scale(0.5);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "max",
            "type": "vector_math_64.Vector3",
            "types": [],
            "desc": "",
            "memberOf": "vector_math_64.Aabb3",
            "isConstant": false,
            "href": "vector_math_64\/Aabb3\/max.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Vector3 get max =&gt; _max;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "min",
            "type": "vector_math_64.Vector3",
            "types": [],
            "desc": "",
            "memberOf": "vector_math_64.Aabb3",
            "isConstant": false,
            "href": "vector_math_64\/Aabb3\/min.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Vector3 get min =&gt; _min;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "vector_math_64\/Aabb3-class.html",
    "desc": "<p>Defines a 3-dimensional axis-aligned bounding box between a <a href=\"vector_math_64\/Aabb3\/min.html\">min<\/a> and a\n<a href=\"vector_math_64\/Aabb3\/max.html\">max<\/a> position.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Aabb3"
}