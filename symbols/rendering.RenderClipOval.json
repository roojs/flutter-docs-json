{
    "desc": "<p>Clips its child using an oval.<\/p>\n<p>By default, inscribes an axis-aligned oval into its layout dimensions and\nprevents its child from painting outside that oval, but the size and\nlocation of the clip oval can be customized using a custom <a href=\"rendering\/RenderClipOval\/clipper.html\">clipper<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderClipOval-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.RenderClipOval",
    "shortname": "RenderClipOval",
    "extends": [
        "rendering.RenderProxyBox",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an oval-shaped clip.<\/p>\n<p>If <code>clipper<\/code> is null, the oval will be inscribed into the layout size and\nposition of the child.<\/p>\n<p>The <code>clipBehavior<\/code> cannot be <a href=\"dart-ui\/Clip-class.html\">Clip.none<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderClipOval({\n  RenderBox child,\n  CustomClipper&lt;Rect&gt; clipper,\n  Clip clipBehavior = Clip.antiAlias,\n}) : assert(clipBehavior != Clip.none),\n     super(child: child, clipper: clipper, clipBehavior: clipBehavior);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/RenderClipOval.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderClipOval",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "clipBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "clipper",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.CustomClipper<dart:ui.Rect>"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderClipOval\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderClipOval\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/RenderClipOval\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  _clipper?._reclip?.addListener(_markNeedsClip);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/attach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "attach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": [
                {
                    "name": "owner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PipelineOwner"
                }
            ]
        },
        {
            "desc": "<p>In debug mode, paints a border around this render box.<\/p>\n<p>Called for every <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> when <a href=\"rendering\/debugPaintSizeEnabled.html\">debugPaintSizeEnabled<\/a> is true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugPaintSize(PaintingContext context, Offset offset) {\n  assert(() {\n    if (child != null) {\n      super.debugPaintSize(context, offset);\n      context.canvas.drawPath(_getClipPath(_clip).shift(offset), _debugPaint);\n      _debugText.paint(context.canvas, offset + Offset((_clip.width - _debugText.width) \/ 2.0, -_debugText.text.style.fontSize * 1.1));\n    }\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/debugPaintSize.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugPaintSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns a rect in this object's coordinate system that describes\nthe approximate bounding box of the clip rect that would be\napplied to the given child during the paint phase, if any.<\/p>\n<p>Returns null if the child would not be clipped.<\/p>\n<p>This is used in the semantics phase to avoid including children\nthat are not physically visible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRect describeApproximatePaintClip(RenderObject child) {\n  return _clipper?.getApproximateClipRect(size) ?? Offset.zero &amp; size;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/describeApproximatePaintClip.html",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "name": "describeApproximatePaintClip",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderClipOval\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderClipOval\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderClipOval\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _clipper?._reclip?.removeListener(_markNeedsClip);\n  super.detach();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/detach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": []
        },
        {
            "desc": "<p>Determines the set of render objects located at the given position.<\/p>\n<p>Returns true, and adds any render objects that contain the point to the\ngiven hit test result, if this render object or one of its descendants\nabsorbs the hit (preventing objects below this one from being hit).\nReturns false if the hit can continue to other objects below this one.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Hit testing requires layout to be up-to-date but does not require painting\nto be up-to-date. That means a render object can rely upon <a href=\"rendering\/RenderClipOval\/performLayout.html\">performLayout<\/a>\nhaving been called in <a href=\"rendering\/RenderClipOval\/hitTest.html\">hitTest<\/a> but cannot rely upon <a href=\"rendering\/RenderClipOval\/paint.html\">paint<\/a> having been\ncalled. For example, a render object might be a child of a <a href=\"rendering\/RenderOpacity-class.html\">RenderOpacity<\/a>\nobject, which calls <a href=\"rendering\/RenderClipOval\/hitTest.html\">hitTest<\/a> on its children when its opacity is zero\neven through it does not <a href=\"rendering\/RenderClipOval\/paint.html\">paint<\/a> its children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(HitTestResult result, { Offset position }) {\n  _updateClip();\n  assert(_clip != null);\n  final Offset center = _clip.center;\n  \/\/ convert the position to an offset from the center of the unit circle\n  final Offset offset = Offset((position.dx - center.dx) \/ _clip.width,\n                                   (position.dy - center.dy) \/ _clip.height);\n  \/\/ check if the point is outside the unit circle\n  if (offset.distanceSquared &gt; 0.25) \/\/ x^2 + y^2 &gt; r^2\n    return false;\n  return super.hitTest(result, position: position);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/hitTest.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "result",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (child != null) {\n    _updateClip();\n    context.pushClipPath(needsCompositing, offset, _clip, _getClipPath(_clip), super.paint, clipBehavior: clipBehavior);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  final Size oldSize = hasSize ? size : null;\n  super.performLayout();\n  if (oldSize != size)\n    _clip = null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderClipOval\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderClipOval",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderClipOval\/clipBehavior.html",
            "name": "clipBehavior",
            "isDeprecated": false,
            "type": "dart:ui.Clip",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderClipOval",
            "params": []
        },
        {
            "desc": "<p>If non-null, determines which clip to use on the child.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CustomClipper&lt;T&gt; get clipper =&gt; _clipper;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderClipOval\/clipper.html",
            "name": "clipper",
            "isDeprecated": false,
            "type": "rendering.CustomClipper<dart:ui.Rect>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderClipOval",
            "params": []
        }
    ]
}