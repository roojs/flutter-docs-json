{
    "name": "pub_semver.Version",
    "extends": [],
    "memberOf": "pub_semver",
    "events": [],
    "methods": [
        {
            "name": "operator <",
            "type": "dart:core.bool",
            "desc": "",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/operator_less.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &lt;(Version other) =&gt; compareTo(other) &lt; 0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator <=",
            "type": "dart:core.bool",
            "desc": "",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/operator_less_equal.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &lt;=(Version other) =&gt; compareTo(other) &lt;= 0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"package-pub_semver_pub_semver\/Version\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) {\n  if (other is! Version) return false;\n  return major == other.major &amp;&amp;\n      minor == other.minor &amp;&amp;\n      patch == other.patch &amp;&amp;\n      _equality.equals(preRelease, other.preRelease) &amp;&amp;\n      _equality.equals(build, other.build);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator >",
            "type": "dart:core.bool",
            "desc": "",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/operator_greater.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &gt;(Version other) =&gt; compareTo(other) &gt; 0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator >=",
            "type": "dart:core.bool",
            "desc": "",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/operator_greater_equal.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator &gt;=(Version other) =&gt; compareTo(other) &gt;= 0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Version",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a> object.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "major",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "minor",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "patch",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "pre",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "build",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-pub_semver_pub_semver\/Version\/Version.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Version(int major, int minor, int patch, {String pre, String build}) {\n  var text = \"$major.$minor.$patch\";\n  if (pre != null) text += \"-$pre\";\n  if (build != null) text += \"+$build\";\n\n  return new Version._(major, minor, patch, pre, build, text);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "allows",
            "type": "dart:core.bool",
            "desc": "<p>Tests if <code>other<\/code> matches this version exactly.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/allows.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version other) =&gt; this == other;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "allowsAll",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/allowsAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other) =&gt; other.isEmpty || other == this;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "allowsAny",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/allowsAny.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other) =&gt; other.allows(this);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "antiprioritize",
            "type": "dart:core.int",
            "desc": "<p>Like <a href=\"package-pub_semver_pub_semver\/Version\/prioritize.html\">prioritize<\/a>, but lower version numbers are considered greater than\nhigher version numbers.<\/p>\n<p>This still considers prerelease versions to be lower than non-prerelease\nversions. Pub uses this when downgrading -- it chooses the lowest version\nbut still excludes pre-release versions when possible.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/antiprioritize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int antiprioritize(Version a, Version b) {\n  if (a.isPreRelease &amp;&amp; !b.isPreRelease) return -1;\n  if (!a.isPreRelease &amp;&amp; b.isPreRelease) return 1;\n\n  return b.compareTo(a);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "compareTo",
            "type": "dart:core.int",
            "desc": "<p>Compares this object to another <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a><\/p>\n<p>Returns a value like a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> when comparing <code>this<\/code> to <code>other<\/code>.\nThat is, it returns a negative integer if <code>this<\/code> is ordered before <code>other<\/code>,\na positive integer if <code>this<\/code> is ordered after <code>other<\/code>,\nand zero if <code>this<\/code> and <code>other<\/code> are ordered together.<\/p>\n<p>The <code>other<\/code> argument must be a value that is comparable to this object.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionRange",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/compareTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(VersionRange other) {\n  if (other is Version) {\n    if (major != other.major) return major.compareTo(other.major);\n    if (minor != other.minor) return minor.compareTo(other.minor);\n    if (patch != other.patch) return patch.compareTo(other.patch);\n\n    \/\/ Pre-releases always come before no pre-release string.\n    if (!isPreRelease &amp;&amp; other.isPreRelease) return 1;\n    if (!other.isPreRelease &amp;&amp; isPreRelease) return -1;\n\n    var comparison = _compareLists(preRelease, other.preRelease);\n    if (comparison != 0) return comparison;\n\n    \/\/ Builds always come after no build string.\n    if (build.isEmpty &amp;&amp; other.build.isNotEmpty) return -1;\n    if (other.build.isEmpty &amp;&amp; build.isNotEmpty) return 1;\n    return _compareLists(build, other.build);\n  } else {\n    return -other.compareTo(this);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "difference",
            "type": "pub_semver.VersionConstraint",
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/difference.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other) =&gt;\n    other.allows(this) ? VersionConstraint.empty : this;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersect",
            "type": "pub_semver.VersionConstraint",
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/intersect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other) =&gt;\n    other.allows(this) ? this : VersionConstraint.empty;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Version.parse",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a> by parsing <code>text<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-pub_semver_pub_semver\/Version\/Version.parse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Version.parse(String text) {\n  final match = COMPLETE_VERSION.firstMatch(text);\n  if (match == null) {\n    throw new FormatException('Could not parse \"$text\".');\n  }\n\n  try {\n    int major = int.parse(match[1]);\n    int minor = int.parse(match[2]);\n    int patch = int.parse(match[3]);\n\n    String preRelease = match[5];\n    String build = match[8];\n\n    return new Version._(major, minor, patch, preRelease, build, text);\n  } on FormatException {\n    throw new FormatException('Could not parse \"$text\".');\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "primary",
            "type": "pub_semver.Version",
            "desc": "<p>Returns the primary version out of a list of candidates.<\/p>\n<p>This is the highest-numbered stable (non-prerelease) version. If there\nare no stable versions, it's just the highest-numbered version.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "versions",
                    "type": "dart:core.List<pub_semver.Version>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "pub_semver.Version"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/primary.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Version primary(List&lt;Version&gt; versions) {\n  var primary;\n  for (var version in versions) {\n    if (primary == null ||\n        (!version.isPreRelease &amp;&amp; primary.isPreRelease) ||\n        (version.isPreRelease == primary.isPreRelease &amp;&amp; version &gt; primary)) {\n      primary = version;\n    }\n  }\n  return primary;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "prioritize",
            "type": "dart:core.int",
            "desc": "<p>Compares <code>a<\/code> and <code>b<\/code> to see which takes priority over the other.<\/p>\n<p>Returns <code>1<\/code> if <code>a<\/code> takes priority over <code>b<\/code> and <code>-1<\/code> if vice versa. If\n<code>a<\/code> and <code>b<\/code> are equivalent, returns <code>0<\/code>.<\/p>\n<p>Unlike <a href=\"package-pub_semver_pub_semver\/Version\/compareTo.html\">compareTo<\/a>, which <em>orders<\/em> versions, this determines which\nversion a user is likely to prefer. In particular, it prioritizes\npre-release versions lower than stable versions, regardless of their\nversion numbers. Pub uses this when determining which version to prefer\nwhen a number of versions are allowed. In that case, it will always\nchoose a stable version when possible.<\/p>\n<p>When used to sort a list, orders in ascending priority so that the\nhighest priority version is <em>last<\/em> in the result.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "pub_semver.Version",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/prioritize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int prioritize(Version a, Version b) {\n  \/\/ Sort all prerelease versions after all normal versions. This way\n  \/\/ the solver will prefer stable packages over unstable ones.\n  if (a.isPreRelease &amp;&amp; !b.isPreRelease) return -1;\n  if (!a.isPreRelease &amp;&amp; b.isPreRelease) return 1;\n\n  return a.compareTo(b);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _text;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "union",
            "type": "pub_semver.VersionConstraint",
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "pub_semver.Version",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "pub_semver.VersionConstraint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-pub_semver_pub_semver\/Version\/union.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other) {\n  if (other.allows(this)) return other;\n\n  if (other is VersionRange) {\n    if (other.min == this) {\n      return new VersionRange(\n          min: other.min,\n          max: other.max,\n          includeMin: true,\n          includeMax: other.includeMax,\n          alwaysIncludeMaxPreRelease: true);\n    }\n\n    if (other.max == this) {\n      return new VersionRange(\n          min: other.min,\n          max: other.max,\n          includeMin: other.includeMin,\n          includeMax: true,\n          alwaysIncludeMaxPreRelease: true);\n    }\n  }\n\n  return new VersionConstraint.unionOf([this, other]);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "build",
            "type": "dart:core.List",
            "types": [],
            "desc": "<p>The build identifier: \"foo\" in \"1.2.3+foo\".<\/p>\n<p>This is split into a list of components, each of which may be either a\nstring or a non-negative integer. It may also be empty, indicating that\nthis version has no build identifier.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List build\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "firstPreRelease",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>Returns the first possible pre-release of this version.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/firstPreRelease.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get firstPreRelease =&gt; new Version(major, minor, patch, pre: \"0\");<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-pub_semver_pub_semver\/Version\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-pub_semver_pub_semver\/Version\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt;\n    major ^\n    minor ^\n    patch ^\n    _equality.hash(preRelease) ^\n    _equality.hash(build);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "includeMax",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>If <code>true<\/code>, then <a href=\"package-pub_semver_pub_semver\/Version\/max.html\">max<\/a> is allowed by the range.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/includeMax.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get includeMax =&gt; true;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "includeMin",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>If <code>true<\/code> then <a href=\"package-pub_semver_pub_semver\/Version\/min.html\">min<\/a> is allowed by the range.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/includeMin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get includeMin =&gt; true;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isAny",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/isAny.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny =&gt; false;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; false;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isFirstPreRelease",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns whether this is the first possible pre-release of its version.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/isFirstPreRelease.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFirstPreRelease =&gt; preRelease.length == 1 &amp;&amp; preRelease.first == 0;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isPreRelease",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether or not this is a pre-release version.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/isPreRelease.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isPreRelease =&gt; preRelease.isNotEmpty;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "major",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The major version number: \"1\" in \"1.2.3\".<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/major.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int major\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "max",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>The maximum end of the range.<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/Version\/includeMax.html\">includeMax<\/a> is <code>true<\/code>, this will be the maximum allowed version.\nOtherwise, it will be the lowest version above the range that is not\nallowed.<\/p>\n<p>This may be <code>null<\/code> in which case the range has no maximum end and allows\nany version greater than the minimum.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/max.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get max =&gt; this;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "min",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>The minimum end of the range.<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/Version\/includeMin.html\">includeMin<\/a> is <code>true<\/code>, this will be the minimum allowed version.\nOtherwise, it will be the highest version below the range that is not\nallowed.<\/p>\n<p>This may be <code>null<\/code> in which case the range has no minimum end and allows\nany version less than the maximum.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/min.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get min =&gt; this;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "minor",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The minor version number: \"2\" in \"1.2.3\".<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/minor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "nextBreaking",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>Gets the next breaking version number that follows this one.<\/p>\n<p>Increments <a href=\"package-pub_semver_pub_semver\/Version\/major.html\">major<\/a> if it's greater than zero, otherwise <a href=\"package-pub_semver_pub_semver\/Version\/minor.html\">minor<\/a>, resets\nsubsequent digits to zero, and strips any <a href=\"package-pub_semver_pub_semver\/Version\/preRelease.html\">preRelease<\/a> or <a href=\"package-pub_semver_pub_semver\/Version\/build.html\">build<\/a>\nsuffix.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/nextBreaking.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextBreaking {\n  if (major == 0) {\n    return _incrementMinor();\n  }\n\n  return _incrementMajor();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "nextMajor",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>Gets the next major version number that follows this one.<\/p>\n<p>If this version is a pre-release of a major version release (i.e. the\nminor and patch versions are zero), then it just strips the pre-release\nsuffix. Otherwise, it increments the major version and resets the minor\nand patch.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/nextMajor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextMajor {\n  if (isPreRelease &amp;&amp; minor == 0 &amp;&amp; patch == 0) {\n    return new Version(major, minor, patch);\n  }\n\n  return _incrementMajor();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "nextMinor",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>Gets the next minor version number that follows this one.<\/p>\n<p>If this version is a pre-release of a minor version release (i.e. the\npatch version is zero), then it just strips the pre-release suffix.\nOtherwise, it increments the minor version and resets the patch.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/nextMinor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextMinor {\n  if (isPreRelease &amp;&amp; patch == 0) {\n    return new Version(major, minor, patch);\n  }\n\n  return _incrementMinor();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "nextPatch",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>Gets the next patch version number that follows this one.<\/p>\n<p>If this version is a pre-release, then it just strips the pre-release\nsuffix. Otherwise, it increments the patch version.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/nextPatch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Version get nextPatch {\n  if (isPreRelease) {\n    return new Version(major, minor, patch);\n  }\n\n  return _incrementPatch();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "none",
            "type": "pub_semver.Version",
            "types": [],
            "desc": "<p>No released version: i.e. \"0.0.0\".<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/none.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Version get none =&gt; new Version(0, 0, 0);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "patch",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The patch version number: \"3\" in \"1.2.3\".<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/patch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int patch\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "preRelease",
            "type": "dart:core.List",
            "types": [],
            "desc": "<p>The pre-release identifier: \"foo\" in \"1.2.3-foo\".<\/p>\n<p>This is split into a list of components, each of which may be either a\nstring or a non-negative integer. It may also be empty, indicating that\nthis version has no pre-release identifier.<\/p>\n        ",
            "memberOf": "pub_semver.Version",
            "isConstant": false,
            "href": "package-pub_semver_pub_semver\/Version\/preRelease.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List preRelease\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-pub_semver_pub_semver\/Version-class.html",
    "desc": "<p>A parsed semantic version number.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Version"
}