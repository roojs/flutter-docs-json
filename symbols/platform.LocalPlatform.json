{
    "desc": "<p><code>Platform<\/code> implementation that delegates directly to <code>dart:io<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-platform_platform\/LocalPlatform-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "platform",
    "name": "platform.LocalPlatform",
    "shortname": "LocalPlatform",
    "extends": [
        "platform.Platform",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new <a href=\"package-platform_platform\/LocalPlatform-class.html\">LocalPlatform<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LocalPlatform();<\/code><\/pre>\n    ",
            "href": "package-platform_platform\/LocalPlatform\/LocalPlatform.html",
            "isDeprecated": false,
            "type": "",
            "name": "LocalPlatform",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "platform.LocalPlatform",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The environment for this process.<\/p>\n<p>The returned environment is an unmodifiable map whose content is\nretrieved from the operating system on its first use.<\/p>\n<p>Environment variables on Windows are case-insensitive. The map\nreturned on Windows is therefore case-insensitive and will convert\nall keys to upper case. On other platforms the returned map is\na standard case-sensitive map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, String&gt; get environment =&gt; io.Platform.environment;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/environment.html",
            "name": "environment",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The path of the executable used to run the script in this isolate.<\/p>\n<p>The path returned is the literal path used to run the script. This\npath might be relative or just be a name from which the executable\nwas found by searching the <code>PATH<\/code>.<\/p>\n<p>To get the absolute path to the resolved executable use\n<a href=\"package-platform_platform\/LocalPlatform\/resolvedExecutable.html\">resolvedExecutable<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get executable =&gt; io.Platform.executable;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/executable.html",
            "name": "executable",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The flags passed to the executable used to run the script in this\nisolate. These are the command-line flags between the executable name\nand the script name. Each fetch of <code>executableArguments<\/code> returns a new\nlist containing the flags passed to the executable.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;String&gt; get executableArguments =&gt; io.Platform.executableArguments;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/executableArguments.html",
            "name": "executableArguments",
            "isDeprecated": false,
            "type": "dart:core.List<dart:core.String>",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>Get the local hostname for the system.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get localHostname =&gt; io.Platform.localHostname;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/localHostname.html",
            "name": "localHostname",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>Get the name of the current locale.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get localeName =&gt; io.Platform.localeName;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/localeName.html",
            "name": "localeName",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The number of processors of the machine.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get numberOfProcessors =&gt; io.Platform.numberOfProcessors;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/numberOfProcessors.html",
            "name": "numberOfProcessors",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>A string (<code>linux<\/code>, <code>macos<\/code>, <code>windows<\/code>, <code>android<\/code>, <code>ios<\/code>, or <code>fuchsia<\/code>)\nrepresenting the operating system.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get operatingSystem =&gt; io.Platform.operatingSystem;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/operatingSystem.html",
            "name": "operatingSystem",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The value of the <code>--packages<\/code> flag passed to the executable\nused to run the script in this isolate. This is the configuration which\nspecifies how Dart packages are looked up.<\/p>\n<p>If there is no <code>--packages<\/code> flag, <code>null<\/code> is returned.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get packageConfig =&gt; io.Platform.packageConfig;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/packageConfig.html",
            "name": "packageConfig",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The value of the <code>--package-root<\/code> flag passed to the executable\nused to run the script in this isolate.  This is the directory in which\nDart packages are looked up.<\/p>\n<p>If there is no <code>--package-root<\/code> flag, <code>null<\/code> is returned.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get packageRoot =&gt; io.Platform.packageRoot;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/packageRoot.html",
            "name": "packageRoot",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The path separator used by the operating system to separate\ncomponents in file paths.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get pathSeparator =&gt; io.Platform.pathSeparator;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/pathSeparator.html",
            "name": "pathSeparator",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The path of the executable used to run the script in this\nisolate after it has been resolved by the OS.<\/p>\n<p>This is the absolute path, with all symlinks resolved, to the\nexecutable used to run the script.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get resolvedExecutable =&gt; io.Platform.resolvedExecutable;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/resolvedExecutable.html",
            "name": "resolvedExecutable",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The absolute URI of the script being run in this\nisolate.<\/p>\n<p>If the script argument on the command line is relative,\nit is resolved to an absolute URI before fetching the script, and\nthis absolute URI is returned.<\/p>\n<p>URI resolution only does string manipulation on the script path, and this\nmay be different from the file system's path resolution behavior. For\nexample, a symbolic link immediately followed by '..' will not be\nlooked up.<\/p>\n<p>If the executable environment does not support <a href=\"package-platform_platform\/LocalPlatform\/script.html\">script<\/a> an empty\n<a href=\"dart-core\/Uri-class.html\">Uri<\/a> is returned.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nUri get script =&gt; io.Platform.script;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/script.html",
            "name": "script",
            "isDeprecated": false,
            "type": "dart:core.Uri",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>When stdin is connected to a terminal, whether ANSI codes are supported.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get stdinSupportsAnsi =&gt; io.stdin.supportsAnsiEscapes;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/stdinSupportsAnsi.html",
            "name": "stdinSupportsAnsi",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>When stdout is connected to a terminal, whether ANSI codes are supported.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get stdoutSupportsAnsi =&gt; io.stdout.supportsAnsiEscapes;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/stdoutSupportsAnsi.html",
            "name": "stdoutSupportsAnsi",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "platform.LocalPlatform",
            "params": []
        },
        {
            "desc": "<p>The version of the current Dart runtime.<\/p>\n<p>The returned <code>String<\/code> is formatted as the <a href=\"http:\/\/semver.org\">semver<\/a>\nversion string of the current dart runtime, possibly followed by\nwhitespace and other version and build details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get version =&gt; io.Platform.version;<\/code><\/pre>\n        ",
            "href": "package-platform_platform\/LocalPlatform\/version.html",
            "name": "version",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "platform.LocalPlatform",
            "params": []
        }
    ]
}