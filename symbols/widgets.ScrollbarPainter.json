{
    "desc": "<p>A <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> for painting scrollbars.<\/p>\n<p>Unlike <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>s that subclasses <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> and only repaint\nwhen <a href=\"widgets\/ScrollbarPainter\/shouldRepaint.html\">shouldRepaint<\/a> returns true (which requires this <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> to\nbe rebuilt), this painter has the added optimization of repainting and not\nrebuilding when:<\/p>\n<ul>\n<li>the scroll position changes; and<\/li>\n<li>when the scrollbar fades away.<\/li>\n<\/ul>\n<p>Calling <a href=\"widgets\/ScrollbarPainter\/update.html\">update<\/a> with the new <a href=\"widgets\/ScrollMetrics-class.html\">ScrollMetrics<\/a> will repaint the new scrollbar\nposition.<\/p>\n<p>Updating the value on the provided <a href=\"widgets\/ScrollbarPainter\/fadeoutOpacityAnimation.html\">fadeoutOpacityAnimation<\/a> will repaint\nwith the new opacity.<\/p>\n<p>You must call <a href=\"widgets\/ScrollbarPainter\/dispose.html\">dispose<\/a> on this <a href=\"widgets\/ScrollbarPainter-class.html\">ScrollbarPainter<\/a> when it's no longer used.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Scrollbar-class.html\">Scrollbar<\/a> for a widget showing a scrollbar around a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> in the\nMaterial Design style.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoScrollbar-class.html\">CupertinoScrollbar<\/a> for a widget showing a scrollbar around a\n<a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> in the iOS style.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ScrollbarPainter-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ScrollbarPainter",
    "shortname": "ScrollbarPainter",
    "extends": [
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Returns a function that builds semantic information for the picture drawn\nby this painter.<\/p>\n<p>If the returned function is null, this painter will not contribute new\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s to the semantics tree and the <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> corresponding\nto this painter will not create a semantics boundary. However, if\n<a href=\"widgets\/SingleChildRenderObjectWidget\/child.html\">CustomPaint.child<\/a> is not null, the child may contribute <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s\nto the tree.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">SemanticsConfiguration.isSemanticBoundary<\/a>, which causes new\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s to be added to the semantics tree.<\/li>\n<li>\n<a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a>, which uses this getter to build semantics.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSemanticsBuilderCallback get semanticsBuilder =&gt; null;<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/semanticsBuilder.html",
            "isDeprecated": false,
            "type": "rendering.SemanticsBuilderCallback",
            "name": "semanticsBuilder",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a scrollbar with customizations given by construction arguments.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScrollbarPainter({\n  @required this.color,\n  @required this.textDirection,\n  @required this.thickness,\n  @required this.fadeoutOpacityAnimation,\n  this.mainAxisMargin = 0.0,\n  this.crossAxisMargin = 0.0,\n  this.radius,\n  this.minLength = _kMinThumbExtent,\n  this.minOverscrollLength = _kMinThumbExtent,\n}) : assert(color != null),\n     assert(textDirection != null),\n     assert(thickness != null),\n     assert(fadeoutOpacityAnimation != null),\n     assert(mainAxisMargin != null),\n     assert(crossAxisMargin != null),\n     assert(minLength != null) {\n  fadeoutOpacityAnimation.addListener(notifyListeners);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/ScrollbarPainter.html",
            "isDeprecated": "0",
            "type": "",
            "name": "ScrollbarPainter",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": [
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "crossAxisMargin",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "fadeoutOpacityAnimation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "mainAxisMargin",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "minLength",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "minOverscrollLength",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radius",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Radius"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "thickness",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  fadeoutOpacityAnimation.removeListener(notifyListeners);\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>Called whenever a hit test is being performed on an object that is using\nthis custom paint delegate.<\/p>\n<p>The given point is relative to the same coordinate space as the last\n<a href=\"widgets\/ScrollbarPainter\/paint.html\">paint<\/a> call.<\/p>\n<p>The default behavior is to consider all points to be hits for\nbackground painters, and no points to be hits for foreground painters.<\/p>\n<p>Return true if the given position corresponds to a point on the drawn\nimage that should be considered a \"hit\", false if it corresponds to a\npoint that should be considered outside the painted image, and null to use\nthe default behavior.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(Offset position) =&gt; null;<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/hitTest.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "hitTest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Called whenever the object needs to paint. The given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> has its\ncoordinate space configured such that the origin is at the top left of the\nbox. The area of the box is the size of the <code>size<\/code> argument.<\/p>\n<p>Paint operations should remain inside the given area. Graphical operations\noutside the bounds may be silently ignored, clipped, or not clipped.<\/p>\n<p>Implementations should be wary of correctly pairing any calls to\n<a href=\"dart-ui\/Canvas\/save.html\">Canvas.save<\/a>\/<a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a>, otherwise all\nsubsequent painting on this canvas may be affected, with potentially\nhilarious but confusing results.<\/p>\n<p>To paint text on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>.<\/p>\n<p>To paint an image on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>:<\/p>\n<ol>\n<li>\n<p>Obtain an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>, for example by calling <a href=\"painting\/ImageProvider\/resolve.html\">ImageProvider.resolve<\/a>\non an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> or <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a> object.<\/p>\n<\/li>\n<li>\n<p>Whenever the <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>'s underlying <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object changes\n(see <a href=\"foundation\/ChangeNotifier\/addListener.html\">ImageStream.addListener<\/a>), create a new instance of your custom\npaint delegate, giving it the new <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object.<\/p>\n<\/li>\n<li>\n<p>In your delegate's <a href=\"widgets\/ScrollbarPainter\/paint.html\">paint<\/a> method, call the <a href=\"dart-ui\/Canvas\/drawImage.html\">Canvas.drawImage<\/a>,\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>, or <a href=\"dart-ui\/Canvas\/drawImageNine.html\">Canvas.drawImageNine<\/a> methods to paint the\n<a href=\"painting\/ImageInfo\/image.html\">ImageInfo.image<\/a> object, applying the <a href=\"painting\/ImageInfo\/scale.html\">ImageInfo.scale<\/a> value to\nobtain the correct rendering size.<\/p>\n<\/li>\n<\/ol>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Size size) {\n  if (_lastAxisDirection == null\n      || _lastMetrics == null\n      || fadeoutOpacityAnimation.value == 0.0)\n    return;\n  switch (_lastAxisDirection) {\n    case AxisDirection.down:\n      _paintThumb(_lastMetrics.extentBefore, _lastMetrics.extentInside, _lastMetrics.extentAfter, size.height, canvas, size, _paintVerticalThumb);\n      break;\n    case AxisDirection.up:\n      _paintThumb(_lastMetrics.extentAfter, _lastMetrics.extentInside, _lastMetrics.extentBefore, size.height, canvas, size, _paintVerticalThumb);\n      break;\n    case AxisDirection.right:\n      _paintThumb(_lastMetrics.extentBefore, _lastMetrics.extentInside, _lastMetrics.extentAfter, size.width, canvas, size, _paintHorizontalThumb);\n      break;\n    case AxisDirection.left:\n      _paintThumb(_lastMetrics.extentAfter, _lastMetrics.extentInside, _lastMetrics.extentBefore, size.width, canvas, size, _paintHorizontalThumb);\n      break;\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": [
                {
                    "name": "canvas",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a new instance of the custom painter delegate class is\nprovided to the <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> object, or any time that a new\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> object is created with a new instance of the custom painter\ndelegate class (which amounts to the same thing, because the latter is\nimplemented in terms of the former).<\/p>\n<p>If the new instance would cause <a href=\"widgets\/ScrollbarPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> to create different\nsemantics information, then this method should return true, otherwise it\nshould return false.<\/p>\n<p>If the method returns false, then the <a href=\"widgets\/ScrollbarPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> call might be\noptimized away.<\/p>\n<p>It's possible that the <a href=\"widgets\/ScrollbarPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> will get called even if\n<a href=\"widgets\/ScrollbarPainter\/shouldRebuildSemantics.html\">shouldRebuildSemantics<\/a> would return false. For example, it is called\nwhen the <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> is rendered for the very first time, or when the\nbox changes its size.<\/p>\n<p>By default this method delegates to <a href=\"widgets\/ScrollbarPainter\/shouldRepaint.html\">shouldRepaint<\/a> under the assumption\nthat in most cases semantics change when something new is drawn.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool shouldRebuildSemantics(CustomPainter oldDelegate) =&gt; false;<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/shouldRebuildSemantics.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "shouldRebuildSemantics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.CustomPainter"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a new instance of the custom painter delegate class is\nprovided to the <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> object, or any time that a new\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> object is created with a new instance of the custom painter\ndelegate class (which amounts to the same thing, because the latter is\nimplemented in terms of the former).<\/p>\n<p>If the new instance represents different information than the old\ninstance, then the method should return true, otherwise it should return\nfalse.<\/p>\n<p>If the method returns false, then the <a href=\"widgets\/ScrollbarPainter\/paint.html\">paint<\/a> call might be optimized\naway.<\/p>\n<p>It's possible that the <a href=\"widgets\/ScrollbarPainter\/paint.html\">paint<\/a> method will get called even if\n<a href=\"widgets\/ScrollbarPainter\/shouldRepaint.html\">shouldRepaint<\/a> returns false (e.g. if an ancestor or descendant needed to\nbe repainted). It's also possible that the <a href=\"widgets\/ScrollbarPainter\/paint.html\">paint<\/a> method will get called\nwithout <a href=\"widgets\/ScrollbarPainter\/shouldRepaint.html\">shouldRepaint<\/a> being called at all (e.g. if the box changes\nsize).<\/p>\n<p>If a custom delegate has a particularly expensive paint function such that\nrepaints should be avoided as much as possible, a <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> or\n<a href=\"rendering\/RenderRepaintBoundary-class.html\">RenderRepaintBoundary<\/a> (or other render object with\n<a href=\"rendering\/RenderObject\/isRepaintBoundary.html\">RenderObject.isRepaintBoundary<\/a> set to true) might be helpful.<\/p>\n<p>The <code>oldDelegate<\/code> argument will never be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool shouldRepaint(ScrollbarPainter old) {\n  \/\/ Should repaint if any properties changed.\n  return color != old.color\n      || textDirection != old.textDirection\n      || thickness != old.thickness\n      || fadeoutOpacityAnimation != old.fadeoutOpacityAnimation\n      || mainAxisMargin != old.mainAxisMargin\n      || crossAxisMargin != old.crossAxisMargin\n      || radius != old.radius\n      || minLength != old.minLength;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/shouldRepaint.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "shouldRepaint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": [
                {
                    "name": "old",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollbarPainter"
                }
            ]
        },
        {
            "desc": "<p>Update with new <a href=\"widgets\/ScrollMetrics-class.html\">ScrollMetrics<\/a>. The scrollbar will show and redraw itself\nbased on these new metrics.<\/p>\n<p>The scrollbar will remain on screen.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void update(\n  ScrollMetrics metrics,\n  AxisDirection axisDirection,\n) {\n  _lastMetrics = metrics;\n  _lastAxisDirection = axisDirection;\n  notifyListeners();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollbarPainter\/update.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "update",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollbarPainter",
            "params": [
                {
                    "name": "axisDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "metrics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p><a href=\"dart-ui\/Color-class.html\">Color<\/a> of the thumb. Mustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>Distance from the scrollbar's side to the nearest edge in pixels. Must not\nbe null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double crossAxisMargin\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/crossAxisMargin.html",
            "name": "crossAxisMargin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>An opacity <a href=\"animation\/Animation-class.html\">Animation<\/a> that dictates the opacity of the thumb.\nChanges in value of this <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> will automatically trigger repaints.\nMustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; fadeoutOpacityAnimation\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/fadeoutOpacityAnimation.html",
            "name": "fadeoutOpacityAnimation",
            "isDeprecated": false,
            "type": "animation.Animation<dart:core.double>",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>Distance from the scrollbar's start and end to the edge of the viewport in\npixels. Mustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double mainAxisMargin\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/mainAxisMargin.html",
            "name": "mainAxisMargin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>The smallest size the scrollbar can shrink to when the total scrollable\nextent is large and the current visible viewport is small, and the\nviewport is not overscrolled. Mustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minLength\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/minLength.html",
            "name": "minLength",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>The smallest size the scrollbar can shrink to when viewport is\noverscrolled. Mustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minOverscrollLength\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/minOverscrollLength.html",
            "name": "minOverscrollLength",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p><a href=\"dart-ui\/Radius-class.html\">Radius<\/a> of corners if the scrollbar should have rounded corners.<\/p>\n<p>Scrollbar will be rectangular if <a href=\"widgets\/ScrollbarPainter\/radius.html\">radius<\/a> is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius radius\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/radius.html",
            "name": "radius",
            "isDeprecated": false,
            "type": "dart:ui.Radius",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p><a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> of the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> which dictates the side of the\nscreen the scrollbar appears in (the trailing side). Mustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        },
        {
            "desc": "<p>Thickness of the scrollbar in its cross-axis in pixels. Mustn't be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double thickness\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollbarPainter\/thickness.html",
            "name": "thickness",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.ScrollbarPainter",
            "params": []
        }
    ]
}