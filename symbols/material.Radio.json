{
    "desc": "<p>A material design radio button.<\/p>\n<p>Used to select between a number of mutually exclusive values. When one radio\nbutton in a group is selected, the other radio buttons in the group cease to\nbe selected. The values are of type <code>T<\/code>, the type parameter of the <a href=\"material\/Radio-class.html\">Radio<\/a>\nclass. Enums are commonly used for this purpose.<\/p>\n<p>The radio button itself does not maintain any state. Instead, when the state\nof the radio button changes, the widget calls the <a href=\"material\/Radio\/onChanged.html\">onChanged<\/a> callback.\nMost widget that use a radio button will listen for the <a href=\"material\/Radio\/onChanged.html\">onChanged<\/a>\ncallback and rebuild the radio button with a new <a href=\"material\/Radio\/groupValue.html\">groupValue<\/a> to update the\nvisual appearance of the radio button.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/RadioListTile-class.html\">RadioListTile<\/a>, which combines this widget with a <a href=\"material\/ListTile-class.html\">ListTile<\/a> so that\nyou can give the radio button a label.<\/li>\n<li>\n<a href=\"material\/Slider-class.html\">Slider<\/a>, for selecting a value in a range.<\/li>\n<li>\n<a href=\"material\/Checkbox-class.html\">Checkbox<\/a> and <a href=\"material\/Switch-class.html\">Switch<\/a>, for toggling a particular value on or off.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/selection-controls.html#radio-buttons\">material.io\/design\/components\/selection-controls.html#radio-buttons<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/Radio-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Radio",
    "shortname": "Radio",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Called when the user selects this radio button.<\/p>\n<p>The radio button passes <a href=\"material\/Radio\/value.html\">value<\/a> as a parameter to this callback. The radio\nbutton does not actually change state until the parent widget rebuilds the\nradio button with the new <a href=\"material\/Radio\/groupValue.html\">groupValue<\/a>.<\/p>\n<p>If null, the radio button will be displayed as disabled.<\/p>\n<p>The callback provided to <a href=\"material\/Radio\/onChanged.html\">onChanged<\/a> should update the state of the parent\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the parent\ngets rebuilt; for example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Radio&lt;SingingCharacter&gt;(\n  value: SingingCharacter.lafayette,\n  groupValue: _character,\n  onChanged: (SingingCharacter newValue) {\n    setState(() {\n      _character = newValue;\n    });\n  },\n)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;T&gt; onChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/Radio\/onChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged",
            "memberOf": "material.Radio",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a material design radio button.<\/p>\n<p>The radio button itself does not maintain any state. Instead, when the\nradio button is selected, the widget calls the <code>onChanged<\/code> callback. Most\nwidgets that use a radio button will listen for the <code>onChanged<\/code> callback\nand rebuild the radio button with a new <code>groupValue<\/code> to update the visual\nappearance of the radio button.<\/p>\n<p>The following arguments are required:<\/p>\n<ul>\n<li>\n<code>value<\/code> and <code>groupValue<\/code> together determine whether the radio button is\nselected.<\/li>\n<li>\n<code>onChanged<\/code> is called when the user selects this radio button.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Radio({\n  Key key,\n  @required this.value,\n  @required this.groupValue,\n  @required this.onChanged,\n  this.activeColor,\n  this.materialTapTargetSize,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Radio\/Radio.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Radio",
            "params": [
                {
                    "name": "activeColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "groupValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<T>"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "onChanged",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/Radio\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_RadioState&lt;T&gt; createState() =&gt; _RadioState&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "material\/Radio\/createState.html",
            "isDeprecated": "0",
            "type": "<_RadioState<T>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Radio",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use when this radio button is selected.<\/p>\n<p>Defaults to <a href=\"material\/ThemeData\/toggleableActiveColor.html\">ThemeData.toggleableActiveColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/Radio\/activeColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.Radio",
            "params": []
        },
        {
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/Radio\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/Radio\/materialTapTargetSize.html",
            "isDeprecated": "0",
            "type": "material.MaterialTapTargetSize",
            "memberOf": "material.Radio",
            "params": []
        }
    ]
}