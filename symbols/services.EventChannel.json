{
    "desc": "<p>A named channel for communicating with platform plugins using event streams.<\/p>\n<p>Stream setup requests are encoded into binary before being sent,\nand binary events and errors received are decoded into Dart values.\nThe <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> used must be compatible with the one used by the platform\nplugin. This can be achieved by creating an <code>EventChannel<\/code> counterpart of\nthis channel on the platform side. The Dart type of events sent and received\nis <code>dynamic<\/code>, but only values supported by the specified <a href=\"services\/MethodCodec-class.html\">MethodCodec<\/a> can\nbe used.<\/p>\n<p>The logical identity of the channel is given by its name. Identically named\nchannels will interfere with each other's communication.<\/p>\n<p>See: <a href=\"https:\/\/flutter.io\/platform-channels\/\">flutter.io\/platform-channels\/<\/a><\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/EventChannel-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "services",
    "name": "services.EventChannel",
    "shortname": "EventChannel",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an <a href=\"services\/EventChannel-class.html\">EventChannel<\/a> with the specified <code>name<\/code>.<\/p>\n<p>The <code>codec<\/code> used will be <a href=\"services\/StandardMethodCodec-class.html\">StandardMethodCodec<\/a>, unless otherwise\nspecified.<\/p>\n<p>Neither <code>name<\/code> nor <code>codec<\/code> may be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EventChannel(this.name, [this.codec = const StandardMethodCodec()]);<\/code><\/pre>\n    ",
            "href": "services\/EventChannel\/EventChannel.html",
            "isDeprecated": false,
            "type": "",
            "name": "EventChannel",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.EventChannel",
            "params": [
                {
                    "name": "codec",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "services.MethodCodec"
                },
                {
                    "name": "name",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets up a broadcast stream for receiving events on this channel.<\/p>\n<p>Returns a broadcast <a href=\"dart-async\/Stream-class.html\">Stream<\/a> which emits events to listeners as follows:<\/p>\n<ul>\n<li>a decoded data event (possibly null) for each successful event\nreceived from the platform plugin;<\/li>\n<li>an error event containing a <a href=\"services\/PlatformException-class.html\">PlatformException<\/a> for each error event\nreceived from the platform plugin.<\/li>\n<\/ul>\n<p>Errors occurring during stream activation or deactivation are reported\nthrough the <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a> facility. Stream activation happens only when\nstream listener count changes from 0 to 1. Stream deactivation happens\nonly when stream listener count changes from 1 to 0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;dynamic&gt; receiveBroadcastStream([ dynamic arguments ]) {\n  final MethodChannel methodChannel = MethodChannel(name, codec);\n  StreamController&lt;dynamic&gt; controller;\n  controller = StreamController&lt;dynamic&gt;.broadcast(onListen: () async {\n    BinaryMessages.setMessageHandler(name, (ByteData reply) async {\n      if (reply == null) {\n        controller.close();\n      } else {\n        try {\n          controller.add(codec.decodeEnvelope(reply));\n        } on PlatformException catch (e) {\n          controller.addError(e);\n        }\n      }\n      return null;\n    });\n    try {\n      await methodChannel.invokeMethod&lt;void&gt;('listen', arguments);\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: exception,\n        stack: stack,\n        library: 'services library',\n        context: 'while activating platform stream on channel $name',\n      ));\n    }\n  }, onCancel: () async {\n    BinaryMessages.setMessageHandler(name, null);\n    try {\n      await methodChannel.invokeMethod&lt;void&gt;('cancel', arguments);\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: exception,\n        stack: stack,\n        library: 'services library',\n        context: 'while de-activating platform stream on channel $name',\n      ));\n    }\n  });\n  return controller.stream;\n}<\/code><\/pre>\n    ",
            "href": "services\/EventChannel\/receiveBroadcastStream.html",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "name": "receiveBroadcastStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.EventChannel",
            "params": [
                {
                    "name": "arguments",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The message codec used by this channel, not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MethodCodec codec\n\n<\/code><\/pre>\n        ",
            "href": "services\/EventChannel\/codec.html",
            "name": "codec",
            "isDeprecated": false,
            "type": "services.MethodCodec",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.EventChannel",
            "params": []
        },
        {
            "desc": "<p>The logical channel on which communication happens, not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
            "href": "services\/EventChannel\/name.html",
            "name": "name",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.EventChannel",
            "params": []
        }
    ]
}