{
    "desc": "<p>Abstract base class for vector lists. See <a href=\"vector_math_lists\/Vector2List-class.html\">Vector2List<\/a>, <a href=\"vector_math_lists\/Vector3List-class.html\">Vector3List<\/a>, and\n<a href=\"vector_math_lists\/Vector4List-class.html\">Vector4List<\/a> for implementations of this class.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "vector_math_lists\/VectorList-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "vector_math_lists",
    "name": "vector_math_lists.VectorList",
    "shortname": "VectorList",
    "extends": [],
    "realImplementors": [
        "vector_math_lists.Vector2List",
        "vector_math_lists.Vector3List",
        "vector_math_lists.Vector4List"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a new vector list with <code>length<\/code> elements that have a size of\n<code>vectorLength<\/code>. Optionally it is possible to specify an <code>offset<\/code> in the\n<a href=\"vector_math_lists\/VectorList\/buffer.html\">buffer<\/a> and a <code>stride<\/code> between each vector.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VectorList(int length, int vectorLength, [int offset = 0, int stride = 0])\n    : _vectorLength = vectorLength,\n      _offset = offset,\n      _stride = stride == 0 ? vectorLength : stride,\n      _length = length,\n      _buffer = new Float32List(\n          VectorList._listLength(offset, stride, vectorLength, length)) {\n  if (_stride &lt; _vectorLength) {\n    throw new ArgumentError('Stride cannot be smaller than the vector size.');\n  }\n}<\/code><\/pre>\n    ",
            "href": "vector_math_lists\/VectorList\/VectorList.html",
            "isDeprecated": false,
            "type": "",
            "name": "VectorList",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": [
                {
                    "name": "length",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "stride",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "vectorLength",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Copy a range of <code>count<\/code> vectors beginning at <code>srcOffset<\/code> from <code>src<\/code> into\nthis list starting at <code>offset<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void copy(VectorList&lt;T&gt; src,\n    {int srcOffset: 0, int offset: 0, int count: 0}) {\n  if (count == 0) {\n    count = math.min(length - offset, src.length - srcOffset);\n  }\n  final int minVectorLength = math.min(_vectorLength, src._vectorLength);\n  for (int i = 0; i &lt; count; i++) {\n    int index = _vectorIndexToBufferIndex(i + offset);\n    int srcIndex = src._vectorIndexToBufferIndex(i + srcOffset);\n    for (int j = 0; j &lt; minVectorLength; j++) {\n      _buffer[index++] = src._buffer[srcIndex++];\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "vector_math_lists\/VectorList\/copy.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "copy",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": [
                {
                    "name": "count",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "src",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "vector_math_lists.VectorList"
                },
                {
                    "name": "srcOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Retrieves the vector at <code>index<\/code> and stores it in <code>vector<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void load(int index, T vector);<\/code><\/pre>\n    ",
            "href": "vector_math_lists\/VectorList\/load.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "load",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "vector",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Create a new instance of <code>T<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T newVector();<\/code><\/pre>\n    ",
            "href": "vector_math_lists\/VectorList\/newVector.html",
            "isDeprecated": false,
            "type": "<T>",
            "name": "newVector",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": []
        },
        {
            "desc": "<p>Store <code>vector<\/code> in the list at <code>index<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void store(int index, T vector);<\/code><\/pre>\n    ",
            "href": "vector_math_lists\/VectorList\/store.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "store",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "vector",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The internal storage buffer of this list.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Float32List get buffer =&gt; _buffer;<\/code><\/pre>\n        ",
            "href": "vector_math_lists\/VectorList\/buffer.html",
            "name": "buffer",
            "isDeprecated": false,
            "type": "dart:typed_data.Float32List",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": []
        },
        {
            "desc": "<p>The count of vectors in this list.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
            "href": "vector_math_lists\/VectorList\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "vector_math_lists.VectorList",
            "params": []
        }
    ]
}