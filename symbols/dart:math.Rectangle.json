{
    "name": "dart:math.Rectangle",
    "extends": [],
    "memberOf": "dart:math",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-math\/Rectangle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(dynamic other) =&gt;\n    \/\/ Can't change argument type to `Object` since subclasses inherit it\n    \/\/ and uses their argument dynamically.\n    other is Rectangle &amp;&amp;\n    left == other.left &amp;&amp;\n    top == other.top &amp;&amp;\n    right == other.right &amp;&amp;\n    bottom == other.bottom;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Rectangle",
            "type": "",
            "desc": "<p>Create a rectangle spanned by <code>(left, top)<\/code> and\n<code>(left+width, top+height)<\/code>.<\/p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>left<\/code> and <code>left + width<\/code>, and\nwith y-coordinate between <code>top<\/code> and <code>top + height<\/code>, both inclusive.<\/p>\n<p>The <code>width<\/code> and <code>height<\/code> should be non-negative.\nIf <code>width<\/code> or <code>height<\/code> are negative, they are clamped to zero.<\/p>\n<p>If <code>width<\/code> and <code>height<\/code> are zero, the \"rectangle\" comprises only the\nsingle point <code>(left, top)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "left",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "top",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "width",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "height",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-math\/Rectangle\/Rectangle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Rectangle(this.left, this.top, T width, T height)\n    : this.width = (width &lt; 0) ? -width * 0 : width, \/\/ Inline _clampToZero.\n      this.height = (height &lt; 0) ? -height * 0 : height;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "boundingBox",
            "type": "dart:math.Rectangle",
            "desc": "<p>Returns a new rectangle which completely contains <code>this<\/code> and <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Rectangle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/boundingBox.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rectangle&lt;T&gt; boundingBox(Rectangle&lt;T&gt; other) {\n  var right = max(this.left + this.width, other.left + other.width);\n  var bottom = max(this.top + this.height, other.top + other.height);\n\n  var left = min(this.left, other.left);\n  var top = min(this.top, other.top);\n\n  return Rectangle&lt;T&gt;(left, top, right - left, bottom - top);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsPoint",
            "type": "dart:core.bool",
            "desc": "<p>Tests whether <code>another<\/code> is inside or along the edges of <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "another",
                    "type": "dart:math.Point<dart:core.num>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:math.Point",
                        "dart:core.num"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/containsPoint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsPoint(Point&lt;num&gt; another) {\n  return another.x &gt;= left &amp;&amp;\n      another.x &lt;= left + width &amp;&amp;\n      another.y &gt;= top &amp;&amp;\n      another.y &lt;= top + height;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "containsRectangle",
            "type": "dart:core.bool",
            "desc": "<p>Tests whether <code>this<\/code> entirely contains <code>another<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "another",
                    "type": "dart:math.Rectangle<dart:core.num>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:math.Rectangle",
                        "dart:core.num"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/containsRectangle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsRectangle(Rectangle&lt;num&gt; another) {\n  return left &lt;= another.left &amp;&amp;\n      left + width &gt;= another.left + another.width &amp;&amp;\n      top &lt;= another.top &amp;&amp;\n      top + height &gt;= another.top + another.height;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Rectangle.fromPoints",
            "type": "",
            "desc": "<p>Create a rectangle spanned by the points <code>a<\/code> and <code>b<\/code>;<\/p>\n<p>The rectangle contains the points\nwith x-coordinate between <code>a.x<\/code> and <code>b.x<\/code>, and\nwith y-coordinate between <code>a.y<\/code> and <code>b.y<\/code>, both inclusive.<\/p>\n<p>If the distance between <code>a.x<\/code> and <code>b.x<\/code> is not representable\n(which can happen if one or both is a double),\nthe actual right edge might be slightly off from <code>max(a.x, b.x)<\/code>.\nSimilar for the y-coordinates and the bottom edge.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:math.Point",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:math.Point",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-math\/Rectangle\/Rectangle.fromPoints.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Rectangle.fromPoints(Point&lt;T&gt; a, Point&lt;T&gt; b) {\n  T left = min(a.x, b.x);\n  T width = max(a.x, b.x) - left;\n  T top = min(a.y, b.y);\n  T height = max(a.y, b.y) - top;\n  return Rectangle&lt;T&gt;(left, top, width, height);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersection",
            "type": "dart:math.Rectangle",
            "desc": "<p>Computes the intersection of <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>The intersection of two axis-aligned rectangles, if any, is always another\naxis-aligned rectangle.<\/p>\n<p>Returns the intersection of this and <code>other<\/code>, or <code>null<\/code> if they don't\nintersect.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Rectangle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/intersection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rectangle&lt;T&gt; intersection(Rectangle&lt;T&gt; other) {\n  var x0 = max(left, other.left);\n  var x1 = min(left + width, other.left + other.width);\n\n  if (x0 &lt;= x1) {\n    var y0 = max(top, other.top);\n    var y1 = min(top + height, other.top + other.height);\n\n    if (y0 &lt;= y1) {\n      return Rectangle&lt;T&gt;(x0, y0, x1 - x0, y1 - y0);\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersects",
            "type": "dart:core.bool",
            "desc": "<p>Returns true if <code>this<\/code> intersects <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Rectangle<dart:core.num>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:math.Rectangle",
                        "dart:core.num"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/intersects.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersects(Rectangle&lt;num&gt; other) {\n  return (left &lt;= other.left + other.width &amp;&amp;\n      other.left &lt;= left + width &amp;&amp;\n      top &lt;= other.top + other.height &amp;&amp;\n      other.top &lt;= top + height);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Rectangle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-math\/Rectangle\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return 'Rectangle ($left, $top) $width x $height';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bottom",
            "type": "",
            "types": [],
            "desc": "<p>The y-coordinate of the bottom edge.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/bottom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get bottom =&gt; top + height;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bottomLeft",
            "type": "dart:math.Point",
            "types": [],
            "desc": "",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/bottomLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get bottomLeft =&gt; Point&lt;T&gt;(this.left, this.top + this.height);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bottomRight",
            "type": "dart:math.Point",
            "types": [],
            "desc": "",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/bottomRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get bottomRight =&gt;\n    Point&lt;T&gt;(this.left + this.width, this.top + this.height);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-math\/Rectangle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-math\/Rectangle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; _JenkinsSmiHash.hash4(\n    left.hashCode, top.hashCode, right.hashCode, bottom.hashCode);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "height",
            "type": "",
            "types": [],
            "desc": "<p>The height of the rectangle.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T height\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "left",
            "type": "",
            "types": [],
            "desc": "<p>The x-coordinate of the left edge.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/left.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T left\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "right",
            "type": "",
            "types": [],
            "desc": "<p>The x-coordinate of the right edge.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/right.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get right =&gt; left + width;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "top",
            "type": "",
            "types": [],
            "desc": "<p>The y-coordinate of the top edge.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/top.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T top\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topLeft",
            "type": "dart:math.Point",
            "types": [],
            "desc": "",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/topLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get topLeft =&gt; Point&lt;T&gt;(this.left, this.top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topRight",
            "type": "dart:math.Point",
            "types": [],
            "desc": "",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/topRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; get topRight =&gt; Point&lt;T&gt;(this.left + this.width, this.top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "width",
            "type": "",
            "types": [],
            "desc": "<p>The width of the rectangle.<\/p>\n        ",
            "memberOf": "dart:math.Rectangle",
            "isConstant": false,
            "href": "dart-math\/Rectangle\/width.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T width\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-math\/Rectangle-class.html",
    "desc": "<p>A class for representing two-dimensional rectangles whose properties are\nimmutable.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Rectangle"
}