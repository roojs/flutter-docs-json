{
    "desc": "<p>This class converts UTF-8 code units (lists of unsigned 8-bit integers)\nto a string.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-convert\/Utf8Decoder-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:convert",
    "name": "dart:convert.Utf8Decoder",
    "shortname": "Utf8Decoder",
    "extends": [
        "dart:core.String",
        "dart:core.int",
        "dart:core.List",
        "dart:convert.Converter",
        "dart:core.String",
        "dart:core.int",
        "dart:core.List",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Instantiates a new <a href=\"dart-convert\/Utf8Decoder-class.html\">Utf8Decoder<\/a>.<\/p>\n<p>The optional <code>allowMalformed<\/code> argument defines how <a href=\"dart-convert\/Utf8Decoder\/convert.html\">convert<\/a> deals\nwith invalid or unterminated character sequences.<\/p>\n<p>If it is <code>true<\/code> <a href=\"dart-convert\/Utf8Decoder\/convert.html\">convert<\/a> replaces invalid (or unterminated) character\nsequences with the Unicode Replacement character <code>U+FFFD<\/code> (\ufffd). Otherwise\nit throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Utf8Decoder({bool allowMalformed = false})\n    : _allowMalformed = allowMalformed;<\/code><\/pre>\n    ",
            "href": "dart-convert\/Utf8Decoder\/Utf8Decoder.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:convert.Utf8Decoder",
            "params": [
                {
                    "name": "allowMalformed",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
            "href": "dart-convert\/Utf8Decoder\/bind.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream<dart:core.String>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Utf8Decoder",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                }
            ]
        },
        {
            "desc": "<p>Converts the UTF-8 <code>codeUnits<\/code> (a list of unsigned 8-bit integers) to the\ncorresponding string.<\/p>\n<p>Uses the code units from <code>start<\/code> to, but no including, <code>end<\/code>.\nIf <code>end<\/code> is omitted, it defaults to <code>codeUnits.length<\/code>.<\/p>\n<p>If the <code>codeUnits<\/code> start with the encoding of a\n<a href=\"dart-convert\/unicodeBomCharacterRune-constant.html\">unicodeBomCharacterRune<\/a>, that character is discarded.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; codeUnits, [int start = 0, int end]) {\n  \/\/ Allow the implementation to intercept and specialize based on the type\n  \/\/ of codeUnits.\n  var result = _convertIntercepted(_allowMalformed, codeUnits, start, end);\n  if (result != null) {\n    return result;\n  }\n\n  var length = codeUnits.length;\n  end = RangeError.checkValidRange(start, end, length);\n\n  \/\/ Fast case for ASCII strings avoids StringBuffer\/_Utf8Decoder.\n  int oneBytes = _scanOneByteCharacters(codeUnits, start, end);\n  StringBuffer buffer;\n  bool isFirstCharacter = true;\n  if (oneBytes &gt; 0) {\n    var firstPart = String.fromCharCodes(codeUnits, start, start + oneBytes);\n    start += oneBytes;\n    if (start == end) {\n      return firstPart;\n    }\n    buffer = StringBuffer(firstPart);\n    isFirstCharacter = false;\n  }\n\n  buffer ??= StringBuffer();\n  var decoder = _Utf8Decoder(buffer, _allowMalformed);\n  decoder._isFirstCharacter = isFirstCharacter;\n  decoder.convert(codeUnits, start, end);\n  decoder.flush(codeUnits, end);\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/Utf8Decoder\/convert.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Utf8Decoder",
            "params": [
                {
                    "name": "codeUnits",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this<\/code> before converting with <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external Converter&lt;List&lt;int&gt;, T&gt; fuse&lt;T&gt;(Converter&lt;String, T&gt; next);<\/code><\/pre>\n    ",
            "href": "dart-convert\/Utf8Decoder\/fuse.html",
            "isDeprecated": "0",
            "type": "dart:convert.Converter<dart:core.List<dart:core.int>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Utf8Decoder",
            "params": [
                {
                    "name": "next",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Converter<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  StringConversionSink stringSink;\n  if (sink is StringConversionSink) {\n    stringSink = sink;\n  } else {\n    stringSink = StringConversionSink.from(sink);\n  }\n  return stringSink.asUtf8Sink(_allowMalformed);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/Utf8Decoder\/startChunkedConversion.html",
            "isDeprecated": "0",
            "type": "dart:convert.ByteConversionSink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Utf8Decoder",
            "params": [
                {
                    "name": "sink",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Sink<dart:core.String>"
                }
            ]
        }
    ],
    "props": []
}