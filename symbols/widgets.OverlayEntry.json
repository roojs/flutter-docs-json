{
    "desc": "<p>A place in an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> that can contain a widget.<\/p>\n<p>Overlay entries are inserted into an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> using the\n<a href=\"widgets\/OverlayState\/insert.html\">OverlayState.insert<\/a> or <a href=\"widgets\/OverlayState\/insertAll.html\">OverlayState.insertAll<\/a> functions. To find the\nclosest enclosing overlay for a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, use the <a href=\"widgets\/Overlay\/of.html\">Overlay.of<\/a>\nfunction.<\/p>\n<p>An overlay entry can be in at most one overlay at a time. To remove an entry\nfrom its overlay, call the <a href=\"widgets\/OverlayEntry\/remove.html\">remove<\/a> function on the overlay entry.<\/p>\n<p>Because an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> uses a <a href=\"widgets\/Stack-class.html\">Stack<\/a> layout, overlay entries can use\n<a href=\"widgets\/Positioned-class.html\">Positioned<\/a> and <a href=\"widgets\/AnimatedPositioned-class.html\">AnimatedPositioned<\/a> to position themselves within the\noverlay.<\/p>\n<p>For example, <a href=\"widgets\/Draggable-class.html\">Draggable<\/a> uses an <a href=\"widgets\/OverlayEntry-class.html\">OverlayEntry<\/a> to show the drag avatar that\nfollows the user's finger across the screen after the drag begins. Using the\noverlay to display the drag avatar lets the avatar float over the other\nwidgets in the app. As the user's finger moves, draggable calls\n<a href=\"widgets\/OverlayEntry\/markNeedsBuild.html\">markNeedsBuild<\/a> on the overlay entry to cause it to rebuild. It its build,\nthe entry includes a <a href=\"widgets\/Positioned-class.html\">Positioned<\/a> with its top and left property set to\nposition the drag avatar near the user's finger. When the drag is over,\n<a href=\"widgets\/Draggable-class.html\">Draggable<\/a> removes the entry from the overlay to remove the drag avatar\nfrom view.<\/p>\n<p>By default, if there is an entirely <a href=\"widgets\/OverlayEntry\/opaque.html\">opaque<\/a> entry over this one, then this\none will not be included in the widget tree (in particular, stateful widgets\nwithin the overlay entry will not be instantiated). To ensure that your\noverlay entry is still built even if it is not visible, set <a href=\"widgets\/OverlayEntry\/maintainState.html\">maintainState<\/a>\nto true. This is more expensive, so should be done with care. In particular,\nif widgets in an overlay entry with <a href=\"widgets\/OverlayEntry\/maintainState.html\">maintainState<\/a> set to true repeatedly\ncall <a href=\"widgets\/State\/setState.html\">State.setState<\/a>, the user's battery will be drained unnecessarily.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/Overlay-class.html\">Overlay<\/a><\/li>\n<li><a href=\"widgets\/OverlayState-class.html\">OverlayState<\/a><\/li>\n<li><a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a><\/li>\n<li><a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/OverlayEntry-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.OverlayEntry",
    "shortname": "OverlayEntry",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>This entry will include the widget built by this builder in the overlay at\nthe entry's position.<\/p>\n<p>To cause this builder to be called again, call <a href=\"widgets\/OverlayEntry\/markNeedsBuild.html\">markNeedsBuild<\/a> on this\noverlay entry.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WidgetBuilder builder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/OverlayEntry\/builder.html",
            "isDeprecated": false,
            "type": "widgets.WidgetBuilder",
            "name": "builder",
            "memberOf": "widgets.OverlayEntry",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates an overlay entry.<\/p>\n<p>To insert the entry into an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a>, first find the overlay using\n<a href=\"widgets\/Overlay\/of.html\">Overlay.of<\/a> and then call <a href=\"widgets\/OverlayState\/insert.html\">OverlayState.insert<\/a>. To remove the entry,\ncall <a href=\"widgets\/OverlayEntry\/remove.html\">remove<\/a> on the overlay entry itself.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OverlayEntry({\n  @required this.builder,\n  bool opaque = false,\n  bool maintainState = false,\n}) : assert(builder != null),\n     assert(opaque != null),\n     assert(maintainState != null),\n     _opaque = opaque,\n     _maintainState = maintainState;<\/code><\/pre>\n    ",
            "href": "widgets\/OverlayEntry\/OverlayEntry.html",
            "isDeprecated": false,
            "type": "",
            "name": "OverlayEntry",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.OverlayEntry",
            "params": [
                {
                    "name": "builder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.WidgetBuilder"
                },
                {
                    "name": "maintainState",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "opaque",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Cause this entry to rebuild during the next pipeline flush.<\/p>\n<p>You need to call this function if the output of <a href=\"widgets\/OverlayEntry\/builder.html\">builder<\/a> has changed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void markNeedsBuild() {\n  _key.currentState?._markNeedsBuild();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/OverlayEntry\/markNeedsBuild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "markNeedsBuild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.OverlayEntry",
            "params": []
        },
        {
            "desc": "<p>Remove this entry from the overlay.<\/p>\n<p>This should only be called once.<\/p>\n<p>If this method is called while the <a href=\"scheduler\/SchedulerBinding\/schedulerPhase.html\">SchedulerBinding.schedulerPhase<\/a> is\n<a href=\"scheduler\/SchedulerPhase-class.html\">SchedulerPhase.persistentCallbacks<\/a>, i.e. during the build, layout, or\npaint phases (see <a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>), then the removal is\ndelayed until the post-frame callbacks phase. Otherwise the removal is\ndone synchronously. This means that it is safe to call during builds, but\nalso that if you do call this during a build, the UI will not update until\nthe next frame (i.e. many milliseconds later).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void remove() {\n  assert(_overlay != null);\n  final OverlayState overlay = _overlay;\n  _overlay = null;\n  if (SchedulerBinding.instance.schedulerPhase == SchedulerPhase.persistentCallbacks) {\n    SchedulerBinding.instance.addPostFrameCallback((Duration duration) {\n      overlay._remove(this);\n    });\n  } else {\n    overlay._remove(this);\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/OverlayEntry\/remove.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.OverlayEntry",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}(opaque: $opaque; maintainState: $maintainState)';<\/code><\/pre>\n    ",
            "href": "widgets\/OverlayEntry\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.OverlayEntry",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this entry must be included in the tree even if there is a fully\n<a href=\"widgets\/OverlayEntry\/opaque.html\">opaque<\/a> entry above it.<\/p>\n<p>By default, if there is an entirely <a href=\"widgets\/OverlayEntry\/opaque.html\">opaque<\/a> entry over this one, then this\none will not be included in the widget tree (in particular, stateful widgets\nwithin the overlay entry will not be instantiated). To ensure that your\noverlay entry is still built even if it is not visible, set <a href=\"widgets\/OverlayEntry\/maintainState.html\">maintainState<\/a>\nto true. This is more expensive, so should be done with care. In particular,\nif widgets in an overlay entry with <a href=\"widgets\/OverlayEntry\/maintainState.html\">maintainState<\/a> set to true repeatedly\ncall <a href=\"widgets\/State\/setState.html\">State.setState<\/a>, the user's battery will be drained unnecessarily.<\/p>\n<p>This is used by the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> and <a href=\"widgets\/Route-class.html\">Route<\/a> objects to ensure that routes\nare kept around even when in the background, so that <a href=\"dart-async\/Future-class.html\">Future<\/a>s promised\nfrom subsequent routes will be handled properly when they complete.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get maintainState =&gt; _maintainState;<\/code><\/pre>\n        ",
            "href": "widgets\/OverlayEntry\/maintainState.html",
            "name": "maintainState",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.OverlayEntry",
            "params": []
        },
        {
            "desc": "<p>Whether this entry occludes the entire overlay.<\/p>\n<p>If an entry claims to be opaque, then, for efficiency, the overlay will\nskip building entries below that entry unless they have <a href=\"widgets\/OverlayEntry\/maintainState.html\">maintainState<\/a>\nset.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get opaque =&gt; _opaque;<\/code><\/pre>\n        ",
            "href": "widgets\/OverlayEntry\/opaque.html",
            "name": "opaque",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.OverlayEntry",
            "params": []
        }
    ]
}