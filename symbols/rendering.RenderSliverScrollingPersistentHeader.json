{
    "desc": "<p>A sliver with a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> child which scrolls normally, except that when\nit hits the leading edge (typically the top) of the viewport, it shrinks to\na minimum size before continuing to scroll.<\/p>\n<p>This sliver makes no effort to avoid overlapping other content.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverScrollingPersistentHeader-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverScrollingPersistentHeader",
    "shortname": "RenderSliverScrollingPersistentHeader",
    "extends": [
        "rendering.RenderSliverPersistentHeader",
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a sliver that shrinks when it hits the start of the viewport, then\nscrolls off.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverScrollingPersistentHeader({\n  RenderBox child,\n}) : super(child: child);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverScrollingPersistentHeader\/RenderSliverScrollingPersistentHeader.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderSliverScrollingPersistentHeader",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverScrollingPersistentHeader",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the leading <em>visible<\/em> edge of the sliver to the\nside of the child closest to that edge, in the scroll axis direction.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the top\nof the visible portion of the sliver to the top of the child. If the child\nis scrolled partially off the top of the viewport, then this will be\nnegative. On the other hand, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as\nhaving an axis direction of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then this is the distance\nfrom the bottom of the visible portion of the sliver to the bottom of the\nchild. In both cases, this is the direction of increasing\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a>.<\/p>\n<p>Calling this when the child is not visible is not valid.<\/p>\n<p>The argument must be the value of the <code>child<\/code> property.<\/p>\n<p>This must be implemented by <a href=\"rendering\/RenderSliverPersistentHeader-class.html\">RenderSliverPersistentHeader<\/a> subclasses.<\/p>\n<p>If there is no child, this should return 0.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childMainAxisPosition(RenderBox child) {\n  assert(child == this.child);\n  return _childPosition;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverScrollingPersistentHeader\/childMainAxisPosition.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "childMainAxisPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverScrollingPersistentHeader",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderSliver\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  final double maxExtent = this.maxExtent;\n  layoutChild(constraints.scrollOffset, maxExtent);\n  final double paintExtent = maxExtent - constraints.scrollOffset;\n  geometry = SliverGeometry(\n    scrollExtent: maxExtent,\n    paintOrigin: math.min(constraints.overlap, 0.0),\n    paintExtent: paintExtent.clamp(0.0, constraints.remainingPaintExtent),\n    maxPaintExtent: maxExtent,\n    hasVisualOverflow: true, \/\/ Conservatively say we do have overflow to avoid complexity.\n  );\n  _childPosition = math.min(0.0, paintExtent - childExtent);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverScrollingPersistentHeader\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverScrollingPersistentHeader",
            "params": []
        }
    ],
    "props": []
}