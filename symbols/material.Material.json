{
    "desc": "<p>A piece of material.<\/p>\n<p>The Material widget is responsible for:<\/p>\n<ol>\n<li>Clipping: If <a href=\"material\/Material\/clipBehavior.html\">clipBehavior<\/a> is not <a href=\"dart-ui\/Clip-class.html\">Clip.none<\/a>, Material clips its widget\nsub-tree to the shape specified by <a href=\"material\/Material\/shape.html\">shape<\/a>, <a href=\"material\/Material\/type.html\">type<\/a>, and <a href=\"material\/Material\/borderRadius.html\">borderRadius<\/a>.\nBy default, <a href=\"material\/Material\/clipBehavior.html\">clipBehavior<\/a> is <a href=\"dart-ui\/Clip-class.html\">Clip.none<\/a> for performance considerations.<\/li>\n<li>Elevation: Material elevates its widget sub-tree on the Z axis by\n<a href=\"material\/Material\/elevation.html\">elevation<\/a> pixels, and draws the appropriate shadow.<\/li>\n<li>Ink effects: Material shows ink effects implemented by <a href=\"material\/InkFeature-class.html\">InkFeature<\/a>s\nlike <a href=\"material\/InkSplash-class.html\">InkSplash<\/a> and <a href=\"material\/InkHighlight-class.html\">InkHighlight<\/a> below its children.<\/li>\n<\/ol>\n<h2 id=\"the-material-metaphor\">The Material Metaphor<\/h2>\n<p>Material is the central metaphor in material design. Each piece of material\nexists at a given elevation, which influences how that piece of material\nvisually relates to other pieces of material and how that material casts\nshadows.<\/p>\n<p>Most user interface elements are either conceptually printed on a piece of\nmaterial or themselves made of material. Material reacts to user input using\n<a href=\"material\/InkSplash-class.html\">InkSplash<\/a> and <a href=\"material\/InkHighlight-class.html\">InkHighlight<\/a> effects. To trigger a reaction on the\nmaterial, use a <a href=\"material\/MaterialInkController-class.html\">MaterialInkController<\/a> obtained via <a href=\"material\/Material\/of.html\">Material.of<\/a>.<\/p>\n<p>In general, the features of a <a href=\"material\/Material-class.html\">Material<\/a> should not change over time (e.g. a\n<a href=\"material\/Material-class.html\">Material<\/a> should not change its <a href=\"material\/Material\/color.html\">color<\/a>, <a href=\"material\/Material\/shadowColor.html\">shadowColor<\/a> or <a href=\"material\/Material\/type.html\">type<\/a>).\nChanges to <a href=\"material\/Material\/elevation.html\">elevation<\/a> and <a href=\"material\/Material\/shadowColor.html\">shadowColor<\/a> are animated for <a href=\"material\/Material\/animationDuration.html\">animationDuration<\/a>.\nChanges to <a href=\"material\/Material\/shape.html\">shape<\/a> are animated if <a href=\"material\/Material\/type.html\">type<\/a> is not <a href=\"material\/MaterialType-class.html\">MaterialType.transparency<\/a>\nand <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a> between the previous and next <a href=\"material\/Material\/shape.html\">shape<\/a> values is\nsupported. Shape changes are also animated for <a href=\"material\/Material\/animationDuration.html\">animationDuration<\/a>.<\/p>\n<h2 id=\"shape\">Shape<\/h2>\n<p>The shape for material is determined by <a href=\"material\/Material\/shape.html\">shape<\/a>, <a href=\"material\/Material\/type.html\">type<\/a>, and <a href=\"material\/Material\/borderRadius.html\">borderRadius<\/a>.<\/p>\n<ul>\n<li>If <a href=\"material\/Material\/shape.html\">shape<\/a> is non null, it determines the shape.<\/li>\n<li>If <a href=\"material\/Material\/shape.html\">shape<\/a> is null and <a href=\"material\/Material\/borderRadius.html\">borderRadius<\/a> is non null, the shape is a\nrounded rectangle, with corners specified by <a href=\"material\/Material\/borderRadius.html\">borderRadius<\/a>.<\/li>\n<li>If <a href=\"material\/Material\/shape.html\">shape<\/a> and <a href=\"material\/Material\/borderRadius.html\">borderRadius<\/a> are null, <a href=\"material\/Material\/type.html\">type<\/a> determines the\nshape as follows:<ul>\n<li>\n<a href=\"material\/MaterialType-class.html\">MaterialType.canvas<\/a>: the default material shape is a rectangle.<\/li>\n<li>\n<a href=\"material\/MaterialType-class.html\">MaterialType.card<\/a>: the default material shape is a rectangle with\nrounded edges. The edge radii is specified by <a href=\"material\/kMaterialEdges.html\">kMaterialEdges<\/a>.<\/li>\n<li>\n<a href=\"material\/MaterialType-class.html\">MaterialType.circle<\/a>: the default material shape is a circle.<\/li>\n<li>\n<a href=\"material\/MaterialType-class.html\">MaterialType.button<\/a>: the default material shape is a rectangle with\nrounded edges. The edge radii is specified by <a href=\"material\/kMaterialEdges.html\">kMaterialEdges<\/a>.<\/li>\n<li>\n<a href=\"material\/MaterialType-class.html\">MaterialType.transparency<\/a>: the default material shape is a rectangle.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2 id=\"border\">Border<\/h2>\n<p>If <a href=\"material\/Material\/shape.html\">shape<\/a> is not null, then its border will also be painted (if any).<\/p>\n<h2 id=\"layout-change-notifications\">Layout change notifications<\/h2>\n<p>If the layout changes (e.g. because there's a list on the material, and it's\nbeen scrolled), a <a href=\"widgets\/LayoutChangedNotification-class.html\">LayoutChangedNotification<\/a> must be dispatched at the\nrelevant subtree. This in particular means that transitions (e.g.\n<a href=\"widgets\/SlideTransition-class.html\">SlideTransition<\/a>) should not be placed inside <a href=\"material\/Material-class.html\">Material<\/a> widgets so as to\nmove subtrees that contain <a href=\"material\/InkResponse-class.html\">InkResponse<\/a>s, <a href=\"material\/InkWell-class.html\">InkWell<\/a>s, <a href=\"material\/Ink-class.html\">Ink<\/a>s, or other\nwidgets that use the <a href=\"material\/InkFeature-class.html\">InkFeature<\/a> mechanism. Otherwise, in-progress ink\nfeatures (e.g., ink splashes and ink highlights) won't move to account for\nthe new layout.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/MergeableMaterial-class.html\">MergeableMaterial<\/a>, a piece of material that can split and re-merge.<\/li>\n<li>\n<a href=\"material\/Card-class.html\">Card<\/a>, a wrapper for a <a href=\"material\/Material-class.html\">Material<\/a> of <a href=\"material\/Material\/type.html\">type<\/a> <a href=\"material\/MaterialType-class.html\">MaterialType.card<\/a>.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/\">material.io\/design\/<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/Material-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Material",
    "shortname": "Material",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a piece of material.<\/p>\n<p>The <code>type<\/code>, <code>elevation<\/code>, <code>shadowColor<\/code>, <code>borderOnForeground<\/code> and\n<code>animationDuration<\/code> arguments must not be null. Additionally, <code>elevation<\/code>\nmust be non-negative.<\/p>\n<p>If a <code>shape<\/code> is specified, then the <code>borderRadius<\/code> property must be\nnull and the <code>type<\/code> property must not be <a href=\"material\/MaterialType-class.html\">MaterialType.circle<\/a>. If the\n<code>borderRadius<\/code> is specified, then the <code>type<\/code> property must not be\n<a href=\"material\/MaterialType-class.html\">MaterialType.circle<\/a>. In both cases, these restrictions are intended to\ncatch likely errors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Material({\n  Key key,\n  this.type = MaterialType.canvas,\n  this.elevation = 0.0,\n  this.color,\n  this.shadowColor = const Color(0xFF000000),\n  this.textStyle,\n  this.borderRadius,\n  this.shape,\n  this.borderOnForeground = true,\n  this.clipBehavior = Clip.none,\n  this.animationDuration = kThemeChangeDuration,\n  this.child,\n}) : assert(type != null),\n     assert(elevation != null &amp;&amp; elevation &gt;= 0.0),\n     assert(shadowColor != null),\n     assert(!(shape != null &amp;&amp; borderRadius != null)),\n     assert(animationDuration != null),\n     assert(!(identical(type, MaterialType.circle) &amp;&amp; (borderRadius != null || shape != null))),\n     assert(clipBehavior != null),\n     assert(borderOnForeground != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Material\/Material.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Material",
            "params": [
                {
                    "name": "animationDuration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "borderOnForeground",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "borderRadius",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.BorderRadiusGeometry"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "shadowColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "textStyle",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "type",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialType"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/Material\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MaterialState createState() =&gt; _MaterialState();<\/code><\/pre>\n    ",
            "href": "material\/Material\/createState.html",
            "isDeprecated": "0",
            "type": "<_MaterialState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/Material\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;MaterialType&gt;('type', type));\n  properties.add(DoubleProperty('elevation', elevation, defaultValue: 0.0));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('color', color, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('shadowColor', shadowColor, defaultValue: const Color(0xFF000000)));\n  textStyle?.debugFillProperties(properties, prefix: 'textStyle.');\n  properties.add(DiagnosticsProperty&lt;ShapeBorder&gt;('shape', shape, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('borderOnForeground', borderOnForeground, defaultValue: true));\n  properties.add(DiagnosticsProperty&lt;BorderRadiusGeometry&gt;('borderRadius', borderRadius, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "material\/Material\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Material",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>The ink controller from the closest instance of this class that\nencloses the given context.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">MaterialInkController inkController = Material.of(context);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static MaterialInkController of(BuildContext context) {\n  final _RenderInkFeatures result = context.ancestorRenderObjectOfType(const TypeMatcher&lt;_RenderInkFeatures&gt;());\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "material\/Material\/of.html",
            "isDeprecated": "0",
            "type": "material.MaterialInkController",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Material",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Defines the duration of animated changes for <a href=\"material\/Material\/shape.html\">shape<\/a>, <a href=\"material\/Material\/elevation.html\">elevation<\/a>,\nand <a href=\"material\/Material\/shadowColor.html\">shadowColor<\/a>.<\/p>\n<p>The default value is <a href=\"material\/kThemeChangeDuration-constant.html\">kThemeChangeDuration<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration animationDuration\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/animationDuration.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>Whether to paint the <a href=\"material\/Material\/shape.html\">shape<\/a> border in front of the <a href=\"material\/Material\/child.html\">child<\/a>.<\/p>\n<p>The default value is true.\nIf false, the border will be painted behind the <a href=\"material\/Material\/child.html\">child<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool borderOnForeground\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/borderOnForeground.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>If non-null, the corners of this box are rounded by this\n<a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> value.<\/p>\n<p>Otherwise, the corners specified for the current <a href=\"material\/Material\/type.html\">type<\/a> of material are\nused.<\/p>\n<p>If <a href=\"material\/Material\/shape.html\">shape<\/a> is non null then the border radius is ignored.<\/p>\n<p>Must be null if <a href=\"material\/Material\/type.html\">type<\/a> is <a href=\"material\/MaterialType-class.html\">MaterialType.circle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadiusGeometry borderRadius\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/borderRadius.html",
            "isDeprecated": "0",
            "type": "painting.BorderRadiusGeometry",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/clipBehavior.html",
            "isDeprecated": "0",
            "type": "dart:ui.Clip",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The color to paint the material.<\/p>\n<p>Must be opaque. To create a transparent piece of material, use\n<a href=\"material\/MaterialType-class.html\">MaterialType.transparency<\/a>.<\/p>\n<p>By default, the color is derived from the <a href=\"material\/Material\/type.html\">type<\/a> of material.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/color.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this material relative to its parent.<\/p>\n<p>This controls the size of the shadow below the material.<\/p>\n<p>If this is non-zero, the contents of the material are clipped, because the\nwidget conceptually defines an independent printed piece of material.<\/p>\n<p>Defaults to 0. Changing this value will cause the shadow to animate over\n<a href=\"material\/Material\/animationDuration.html\">animationDuration<\/a>.<\/p>\n<p>The value is non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/elevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The color to paint the shadow below the material.<\/p>\n<p>Defaults to fully opaque black.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color shadowColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/shadowColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>Defines the material's shape as well its shadow.<\/p>\n<p>If shape is non null, the <a href=\"material\/Material\/borderRadius.html\">borderRadius<\/a> is ignored and the material's\nclip boundary and shadow are defined by the shape.<\/p>\n<p>A shadow is only displayed if the <a href=\"material\/Material\/elevation.html\">elevation<\/a> is greater than\nzero.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/shape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The typographical style to use for text within this material.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle textStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/textStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.Material",
            "params": []
        },
        {
            "desc": "<p>The kind of material to show (e.g., card or canvas). This\naffects the shape of the widget, the roundness of its corners if\nthe shape is rectangular, and the default color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialType type\n\n<\/code><\/pre>\n        ",
            "href": "material\/Material\/type.html",
            "isDeprecated": "0",
            "type": "material.MaterialType",
            "memberOf": "material.Material",
            "params": []
        }
    ]
}