{
    "name": "dart:convert.StringConversionSink",
    "extends": [
        "dart:core.String",
        "dart:convert.ChunkedConversionSink",
        "dart:core.Object"
    ],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "StringConversionSink",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-convert\/StringConversionSink\/StringConversionSink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "addSlice",
            "type": "",
            "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the substring defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [
                {
                    "name": "chunk",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isLast",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/StringConversionSink\/addSlice.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(String chunk, int start, int end, bool isLast);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "asStringSink",
            "type": "dart:convert.ClosableStringSink",
            "desc": "<p>Returns <code>this<\/code> as a <a href=\"dart-convert\/ClosableStringSink-class.html\">ClosableStringSink<\/a>.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-convert\/StringConversionSink\/asStringSink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ClosableStringSink asStringSink();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "asUtf8Sink",
            "type": "dart:convert.ByteConversionSink",
            "desc": "<p>Returns <code>this<\/code> as a sink that accepts UTF-8 input.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [
                {
                    "name": "allowMalformed",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/StringConversionSink\/asUtf8Sink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink asUtf8Sink(bool allowMalformed);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StringConversionSink.from",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/StringConversionSink\/StringConversionSink.from.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StringConversionSink.from(Sink&lt;String&gt; sink) = _StringAdapterSink;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StringConversionSink.fromStringSink",
            "type": "",
            "desc": "<p>Creates a new instance wrapping the given <code>sink<\/code>.<\/p>\n<p>Every string that is added to the returned instance is forwarded to\nthe <code>sink<\/code>. The instance is allowed to buffer and is not required to\nforward immediately.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.StringSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/StringConversionSink\/StringConversionSink.fromStringSink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StringConversionSink.fromStringSink(StringSink sink) =\n    _StringSinkConversionSink&lt;StringSink&gt;;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StringConversionSink.withCallback",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:convert.StringConversionSink",
            "sig": "",
            "params": [
                {
                    "name": "accumulated",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "accumulated",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/StringConversionSink\/StringConversionSink.withCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StringConversionSink.withCallback(void callback(String accumulated)) =\n    _StringCallbackSink;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/StringConversionSink-class.html",
    "desc": "<p>This class provides an interface for converters to\nefficiently transmit String data.<\/p>\n<p>Instead of limiting the interface to one non-chunked String it accepts\npartial strings or can be transformed into a byte sink that\naccepts UTF-8 code units.<\/p>\n<p>This abstract class will likely get more methods over time. Implementers are\nurged to extend <a href=\"dart-convert\/StringConversionSinkBase-class.html\">StringConversionSinkBase<\/a> or to mix in\n<a href=\"dart-convert\/StringConversionSinkMixin-class.html\">StringConversionSinkMixin<\/a>, to ensure that their class covers the newly\nadded methods.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StringConversionSink"
}