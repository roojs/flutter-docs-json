{
    "desc": "<p>Layout constraints for <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> objects.<\/p>\n<p>Instances of this class are typically used with <a href=\"dart-ui\/Paragraph\/layout.html\">Paragraph.layout<\/a>.<\/p>\n<p>The only constraint that can be specified is the <a href=\"dart-ui\/ParagraphConstraints\/width.html\">width<\/a>. See the discussion\nat <a href=\"dart-ui\/ParagraphConstraints\/width.html\">width<\/a> for more details.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/ParagraphConstraints-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "dart:ui",
    "name": "dart:ui.ParagraphConstraints",
    "shortname": "ParagraphConstraints",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates constraints for laying out a paragraph.<\/p>\n<p>The <code>width<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ParagraphConstraints({\n  this.width,\n}) : assert(width != null);<\/code><\/pre>\n    ",
            "href": "dart-ui\/ParagraphConstraints\/ParagraphConstraints.html",
            "isDeprecated": false,
            "type": "",
            "name": "ParagraphConstraints",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:ui.ParagraphConstraints",
            "params": [
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(width: $width)';<\/code><\/pre>\n    ",
            "href": "dart-ui\/ParagraphConstraints\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.ParagraphConstraints",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/ParagraphConstraints\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/ParagraphConstraints\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; width.hashCode;<\/code><\/pre>\n        ",
            "href": "dart-ui\/ParagraphConstraints\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.ParagraphConstraints",
            "params": []
        },
        {
            "desc": "<p>The width the paragraph should use whey computing the positions of glyphs.<\/p>\n<p>If possible, the paragraph will select a soft line break prior to reaching\nthis width. If no soft line break is available, the paragraph will select\na hard line break prior to reaching this width. If that would force a line\nbreak without any characters having been placed (i.e. if the next\ncharacter to be laid out does not fit within the given width constraint)\nthen the next character is allowed to overflow the width constraint and a\nforced line break is placed after it (even if an explicit line break\nfollows).<\/p>\n<p>The width influences how ellipses are applied. See the discussion at <a href=\"dart-ui\/ParagraphStyle\/ParagraphStyle.html\">new\nParagraphStyle<\/a> for more details.<\/p>\n<p>This width is also used to position glyphs according to the <a href=\"dart-ui\/TextAlign-class.html\">TextAlign<\/a>\nalignment described in the <a href=\"dart-ui\/ParagraphStyle-class.html\">ParagraphStyle<\/a> used when building the\n<a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> with a <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
            "href": "dart-ui\/ParagraphConstraints\/width.html",
            "name": "width",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.ParagraphConstraints",
            "params": []
        }
    ]
}