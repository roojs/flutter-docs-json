{
    "name": "dart:ui.Rect",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Rect\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final Rect typedOther = other;\n  for (int i = 0; i &lt; _kDataSize; i += 1) {\n    if (_value[i] != typedOther._value[i])\n      return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "contains",
            "type": "dart:core.bool",
            "desc": "<p>Whether the point specified by the given offset (which is assumed to be\nrelative to the origin) lies between the left and right and the top and\nbottom edges of this rectangle.<\/p>\n<p>Rectangles include their top and left edges but exclude their bottom and\nright edges.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/contains.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset offset) {\n  return offset.dx &gt;= left &amp;&amp; offset.dx &lt; right &amp;&amp; offset.dy &gt;= top &amp;&amp; offset.dy &lt; bottom;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "deflate",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns a new rectangle with edges moved inwards by the given delta.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "delta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/deflate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect deflate(double delta) =&gt; inflate(-delta);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "expandToInclude",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns a new rectangle which is the bounding box containing this\nrectangle and the given rectangle.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/expandToInclude.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect expandToInclude(Rect other) {\n  return new Rect.fromLTRB(\n      math.min(left, other.left),\n      math.min(top, other.top),\n      math.max(right, other.right),\n      math.max(bottom, other.bottom),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Rect.fromCircle",
            "type": "",
            "desc": "<p>Construct a rectangle that bounds the given circle.<\/p>\n<p>The <code>center<\/code> argument is assumed to be an offset from the origin.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Rect\/Rect.fromCircle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect.fromCircle({ Offset center, double radius }) {\n  _value\n    ..[0] = center.dx - radius\n    ..[1] = center.dy - radius\n    ..[2] = center.dx + radius\n    ..[3] = center.dy + radius;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Rect.fromLTRB",
            "type": "",
            "desc": "<p>Construct a rectangle from its left, top, right, and bottom edges.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Rect\/Rect.fromLTRB.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nRect.fromLTRB(double left, double top, double right, double bottom) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = right\n    ..[3] = bottom;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Rect.fromLTWH",
            "type": "",
            "desc": "<p>Construct a rectangle from its left and top edges, its width, and its\nheight.<\/p>\n<p>To construct a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> from an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> and a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, you can use the\nrectangle constructor operator <code>&amp;<\/code>. See <a href=\"dart-ui\/Offset\/operator_bitwise_and.html\">Offset.&amp;<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Rect\/Rect.fromLTWH.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect.fromLTWH(double left, double top, double width, double height) {\n  _value\n    ..[0] = left\n    ..[1] = top\n    ..[2] = left + width\n    ..[3] = top + height;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Rect.fromPoints",
            "type": "",
            "desc": "<p>Construct the smallest rectangle that encloses the given offsets, treating\nthem as vectors from the origin.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Rect\/Rect.fromPoints.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect.fromPoints(Offset a, Offset b) {\n  _value\n    ..[0] = math.min(a.dx, b.dx)\n    ..[1] = math.min(a.dy, b.dy)\n    ..[2] = math.max(a.dx, b.dx)\n    ..[3] = math.max(a.dy, b.dy);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "inflate",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns a new rectangle with edges moved outwards by the given delta.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "delta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/inflate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect inflate(double delta) {\n  return new Rect.fromLTRB(left - delta, top - delta, right + delta, bottom + delta);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersect",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns a new rectangle that is the intersection of the given\nrectangle and this rectangle. The two rectangles must overlap\nfor this to be meaningful. If the two rectangles do not overlap,\nthen the resulting Rect will have a negative width or height.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/intersect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect intersect(Rect other) {\n  return new Rect.fromLTRB(\n    math.max(left, other.left),\n    math.max(top, other.top),\n    math.min(right, other.right),\n    math.min(bottom, other.bottom)\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "dart:ui.Rect",
            "desc": "<p>Linearly interpolate between two rectangles.<\/p>\n<p>If either rect is null, <a href=\"dart-ui\/Rect\/zero.html\">Rect.zero<\/a> is used as a substitute.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Rect lerp(Rect a, Rect b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return new Rect.fromLTRB(b.left * t, b.top * t, b.right * t, b.bottom * t);\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new Rect.fromLTRB(a.left * k, a.top * k, a.right * k, a.bottom * k);\n  }\n  return new Rect.fromLTRB(\n    lerpDouble(a.left, b.left, t),\n    lerpDouble(a.top, b.top, t),\n    lerpDouble(a.right, b.right, t),\n    lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "overlaps",
            "type": "dart:core.bool",
            "desc": "<p>Whether <code>other<\/code> has a nonzero area of overlap with this rectangle.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/overlaps.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool overlaps(Rect other) {\n  if (right &lt;= other.left || other.right &lt;= left)\n    return false;\n  if (bottom &lt;= other.top || other.bottom &lt;= top)\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "shift",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns a new rectangle translated by the given offset.<\/p>\n<p>To translate a rectangle by separate x and y components rather than by an\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, consider <a href=\"dart-ui\/Rect\/translate.html\">translate<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/shift.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect shift(Offset offset) {\n  return new Rect.fromLTRB(left + offset.dx, top + offset.dy, right + offset.dx, bottom + offset.dy);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Rect.fromLTRB(${left.toStringAsFixed(1)}, ${top.toStringAsFixed(1)}, ${right.toStringAsFixed(1)}, ${bottom.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "translate",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns a new rectangle with translateX added to the x components and\ntranslateY added to the y components.<\/p>\n<p>To translate a rectangle by an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> rather than by separate x and y\ncomponents, consider <a href=\"dart-ui\/Rect\/shift.html\">shift<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Rect",
            "sig": "",
            "params": [
                {
                    "name": "translateX",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "translateY",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Rect\/translate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect translate(double translateX, double translateY) {\n  return new Rect.fromLTRB(left + translateX, top + translateY, right + translateX, bottom + translateY);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bottom",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset of the bottom edge of this rectangle from the y axis.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/bottom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get bottom =&gt; _value[3];<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bottomCenter",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the center of the bottom edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/bottomLeft.html\">Size.bottomLeft<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/bottomCenter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomCenter =&gt; new Offset(left + width \/ 2.0, bottom);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bottomLeft",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the intersection of the bottom and left edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/bottomLeft.html\">Size.bottomLeft<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/bottomLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomLeft =&gt; new Offset(left, bottom);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bottomRight",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the intersection of the bottom and right edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/bottomRight.html\">Size.bottomRight<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/bottomRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomRight =&gt; new Offset(right, bottom);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "center",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the point halfway between the left and right and the top and\nbottom edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/center.html\">Size.center<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/center.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get center =&gt; new Offset(left + width \/ 2.0, top + height \/ 2.0);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "centerLeft",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the center of the left edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/centerLeft.html\">Size.centerLeft<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/centerLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get centerLeft =&gt; new Offset(left, top + height \/ 2.0);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "centerRight",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the center of the right edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/centerLeft.html\">Size.centerLeft<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/centerRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get centerRight =&gt; new Offset(right, top + height \/ 2.0);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Rect\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Rect\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashList(_value);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "height",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The distance between the top and bottom edges of this rectangle.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height =&gt; bottom - top;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this rectangle encloses a non-zero area. Negative areas are\nconsidered empty.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; left &gt;= right || top &gt;= bottom;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isFinite",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether all coordinates of this rectangle are finite.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/isFinite.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite =&gt; left.isFinite &amp;&amp; top.isFinite &amp;&amp; right.isFinite &amp;&amp; bottom.isFinite;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isInfinite",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether any of the coordinates of this rectangle are equal to positive infinity.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/isInfinite.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ included for consistency with Offset and Size\nbool get isInfinite {\n  return left &gt;= double.infinity\n      || top &gt;= double.infinity\n      || right &gt;= double.infinity\n      || bottom &gt;= double.infinity;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "largest",
            "type": "dart:ui.Rect",
            "types": [],
            "desc": "<p>A rectangle that covers the entire coordinate space.<\/p>\n<p>This covers the space from -1e9,-1e9 to 1e9,1e9.\nThis is the space over which graphics operations are valid.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/largest.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Rect largest = new Rect.fromLTRB(-_giantScalar, -_giantScalar, _giantScalar, _giantScalar)\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "left",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset of the left edge of this rectangle from the x axis.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/left.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get left =&gt; _value[0];<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "longestSide",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The greater of the magnitudes of the <a href=\"dart-ui\/Rect\/width.html\">width<\/a> and the <a href=\"dart-ui\/Rect\/height.html\">height<\/a> of this\nrectangle.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/longestSide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get longestSide =&gt; math.max(width.abs(), height.abs());<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "right",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset of the right edge of this rectangle from the x axis.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/right.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get right =&gt; _value[2];<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shortestSide",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The lesser of the magnitudes of the <a href=\"dart-ui\/Rect\/width.html\">width<\/a> and the <a href=\"dart-ui\/Rect\/height.html\">height<\/a> of this\nrectangle.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/shortestSide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get shortestSide =&gt; math.min(width.abs(), height.abs());<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "size",
            "type": "dart:ui.Size",
            "types": [],
            "desc": "<p>The distance between the upper-left corner and the lower-right corner of\nthis rectangle.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/size.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get size =&gt; new Size(width, height);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "top",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The offset of the top edge of this rectangle from the y axis.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/top.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get top =&gt; _value[1];<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topCenter",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the center of the top edge of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/topCenter.html\">Size.topCenter<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/topCenter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topCenter =&gt; new Offset(left + width \/ 2.0, top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topLeft",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the intersection of the top and left edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/topLeft.html\">Size.topLeft<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/topLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topLeft =&gt; new Offset(left, top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topRight",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The offset to the intersection of the top and right edges of this rectangle.<\/p>\n<p>See also <a href=\"dart-ui\/Rect\/topRight.html\">Size.topRight<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/topRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topRight =&gt; new Offset(right, top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "width",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The distance between the left and right edges of this rectangle.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/width.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width =&gt; right - left;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "zero",
            "type": "dart:ui.Rect",
            "types": [],
            "desc": "<p>A rectangle with left, top, right, and bottom edges all at zero.<\/p>\n        ",
            "memberOf": "dart:ui.Rect",
            "isConstant": false,
            "href": "dart-ui\/Rect\/zero.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Rect zero = new Rect._()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "animation.RectTween",
        "material.MaterialRectArcTween",
        "material.MaterialRectCenterArcTween"
    ],
    "realImplementors": [
        "animation.RectTween",
        "material.MaterialRectArcTween",
        "material.MaterialRectCenterArcTween"
    ],
    "cn": [],
    "href": "dart-ui\/Rect-class.html",
    "desc": "<p>An immutable, 2D, axis-aligned, floating-point rectangle whose coordinates\nare relative to a given origin.<\/p>\n<p>A Rect can be created with one its constructors or from an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> and a\n<a href=\"dart-ui\/Size-class.html\">Size<\/a> using the <code>&amp;<\/code> operator:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Rect myRect = const Offset(1.0, 2.0) &amp; const Size(3.0, 4.0);\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Rect"
}