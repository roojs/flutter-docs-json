{
    "desc": "<p>Add annotations to the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> for this subtree.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSemanticsAnnotations-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSemanticsAnnotations",
    "shortname": "RenderSemanticsAnnotations",
    "extends": [
        "rendering.RenderProxyBox",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/copy-constant.html\">SemanticsAction.copy<\/a>.<\/p>\n<p>This is a request to copy the current selection to the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onCopy =&gt; _onCopy;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onCopy.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/cut-constant.html\">SemanticsAction.cut<\/a>.<\/p>\n<p>This is a request to cut the current selection and place it in the\nclipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onCut =&gt; _onCut;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onCut.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/p>\n<p>This is a request to decrease the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume down button.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDecrease =&gt; _onDecrease;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onDecrease.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didGainAccessibilityFocus-constant.html\">SemanticsAction.didGainAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler gains\nthe accessibility focus. The accessibility focus is the\ngreen (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSemanticsAnnotations\/onDidLoseAccessibilityFocus.html\">onDidLoseAccessibilityFocus<\/a>, which is invoked when the accessibility\nfocus is removed from the node.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDidGainAccessibilityFocus =&gt; _onDidGainAccessibilityFocus;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onDidGainAccessibilityFocus.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didLoseAccessibilityFocus-constant.html\">SemanticsAction.didLoseAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler\nloses the accessibility focus. The accessibility focus is\nthe green (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSemanticsAnnotations\/onDidGainAccessibilityFocus.html\">onDidGainAccessibilityFocus<\/a>, which is invoked when the node gains\naccessibility focus.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDidLoseAccessibilityFocus =&gt; _onDidLoseAccessibilityFocus;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onDidLoseAccessibilityFocus.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/dismiss-constant.html\">SemanticsAction.dismiss<\/a>.<\/p>\n<p>This is a request to dismiss the currently focused node.<\/p>\n<p>TalkBack users on Android can trigger this action in the local context\nmenu, and VoiceOver users on iOS can trigger this action with a standard\ngesture or menu option.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDismiss =&gt; _onDismiss;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onDismiss.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/p>\n<p>This is a request to increase the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume up button.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onIncrease =&gt; _onIncrease;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onIncrease.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/longPress-constant.html\">SemanticsAction.longPress<\/a>.<\/p>\n<p>This is the semantic equivalent of a user pressing and holding the screen\nwith the finger for a few seconds without moving it.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen without lifting the finger after the\nsecond tap.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onLongPress =&gt; _onLongPress;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onLongPress.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"rendering\/RenderSemanticsAnnotations\/onMoveCursorBackwardByCharacter.html\">SemanticsAction.onMoveCursorBackwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorBackwardByCharacter =&gt; _onMoveCursorBackwardByCharacter;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onMoveCursorBackwardByCharacter.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"rendering\/RenderSemanticsAnnotations\/onMoveCursorBackwardByWord.html\">SemanticsAction.onMoveCursorBackwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorBackwardByWord =&gt; _onMoveCursorBackwardByWord;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onMoveCursorBackwardByWord.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"rendering\/RenderSemanticsAnnotations\/onMoveCursorForwardByCharacter.html\">SemanticsAction.onMoveCursorForwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field forward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume up key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorForwardByCharacter =&gt; _onMoveCursorForwardByCharacter;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onMoveCursorForwardByCharacter.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"rendering\/RenderSemanticsAnnotations\/onMoveCursorForwardByWord.html\">SemanticsAction.onMoveCursorForwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorForwardByWord =&gt; _onMoveCursorForwardByWord;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onMoveCursorForwardByWord.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/paste-constant.html\">SemanticsAction.paste<\/a>.<\/p>\n<p>This is a request to paste the current content of the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onPaste =&gt; _onPaste;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onPaste.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollDown-constant.html\">SemanticsAction.scrollDown<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from top to bottom. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"rendering\/RenderSemanticsAnnotations\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"rendering\/RenderSemanticsAnnotations\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollDown =&gt; _onScrollDown;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onScrollDown.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollLeft-constant.html\">SemanticsAction.scrollLeft<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from right to left. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping left with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"rendering\/RenderSemanticsAnnotations\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"rendering\/RenderSemanticsAnnotations\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollLeft =&gt; _onScrollLeft;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onScrollLeft.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollRight-constant.html\">SemanticsAction.scrollRight<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from left to right. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping right with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"rendering\/RenderSemanticsAnnotations\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"rendering\/RenderSemanticsAnnotations\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollRight =&gt; _onScrollRight;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onScrollRight.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollUp-constant.html\">SemanticsAction.scrollUp<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from bottom to top. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"rendering\/RenderSemanticsAnnotations\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"rendering\/RenderSemanticsAnnotations\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollUp =&gt; _onScrollUp;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onScrollUp.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/setSelection-constant.html\">SemanticsAction.setSelection<\/a>.<\/p>\n<p>This handler is invoked when the user either wants to change the currently\nselected text in a text field or change the position of the cursor.<\/p>\n<p>TalkBack users can trigger this handler by selecting \"Move cursor to\nbeginning\/end\" or \"Select all\" from the local context menu.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SetSelectionHandler get onSetSelection =&gt; _onSetSelection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onSetSelection.html",
            "isDeprecated": "0",
            "type": "semantics.SetSelectionHandler",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/tap-constant.html\">SemanticsAction.tap<\/a>.<\/p>\n<p>This is the semantic equivalent of a user briefly tapping the screen with\nthe finger without moving it. For example, a button should implement this\naction.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen while an element is focused.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onTap =&gt; _onTap;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/onTap.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a render object that attaches a semantic annotation.<\/p>\n<p>The <code>container<\/code> argument must not be null.<\/p>\n<p>If the <code>label<\/code> is not null, the <code>textDirection<\/code> must also not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSemanticsAnnotations({\n  RenderBox child,\n  bool container = false,\n  bool explicitChildNodes,\n  bool excludeSemantics = false,\n  bool enabled,\n  bool checked,\n  bool toggled,\n  bool selected,\n  bool button,\n  bool header,\n  bool textField,\n  bool focused,\n  bool inMutuallyExclusiveGroup,\n  bool obscured,\n  bool scopesRoute,\n  bool namesRoute,\n  bool hidden,\n  bool image,\n  bool liveRegion,\n  String label,\n  String value,\n  String increasedValue,\n  String decreasedValue,\n  String hint,\n  SemanticsHintOverrides hintOverrides,\n  TextDirection textDirection,\n  SemanticsSortKey sortKey,\n  VoidCallback onTap,\n  VoidCallback onDismiss,\n  VoidCallback onLongPress,\n  VoidCallback onScrollLeft,\n  VoidCallback onScrollRight,\n  VoidCallback onScrollUp,\n  VoidCallback onScrollDown,\n  VoidCallback onIncrease,\n  VoidCallback onDecrease,\n  VoidCallback onCopy,\n  VoidCallback onCut,\n  VoidCallback onPaste,\n  MoveCursorHandler onMoveCursorForwardByCharacter,\n  MoveCursorHandler onMoveCursorBackwardByCharacter,\n  MoveCursorHandler onMoveCursorForwardByWord,\n  MoveCursorHandler onMoveCursorBackwardByWord,\n  SetSelectionHandler onSetSelection,\n  VoidCallback onDidGainAccessibilityFocus,\n  VoidCallback onDidLoseAccessibilityFocus,\n  Map&lt;CustomSemanticsAction, VoidCallback&gt; customSemanticsActions,\n}) : assert(container != null),\n     _container = container,\n     _explicitChildNodes = explicitChildNodes,\n     _excludeSemantics = excludeSemantics,\n     _enabled = enabled,\n     _checked = checked,\n     _toggled = toggled,\n     _selected = selected,\n     _button = button,\n     _header = header,\n     _textField = textField,\n     _focused = focused,\n     _inMutuallyExclusiveGroup = inMutuallyExclusiveGroup,\n     _obscured = obscured,\n     _scopesRoute = scopesRoute,\n     _namesRoute = namesRoute,\n     _liveRegion = liveRegion,\n     _hidden = hidden,\n     _image = image,\n     _onDismiss = onDismiss,\n     _label = label,\n     _value = value,\n     _increasedValue = increasedValue,\n     _decreasedValue = decreasedValue,\n     _hint = hint,\n     _hintOverrides = hintOverrides,\n     _textDirection = textDirection,\n     _sortKey = sortKey,\n     _onTap = onTap,\n     _onLongPress = onLongPress,\n     _onScrollLeft = onScrollLeft,\n     _onScrollRight = onScrollRight,\n     _onScrollUp = onScrollUp,\n     _onScrollDown = onScrollDown,\n     _onIncrease = onIncrease,\n     _onDecrease = onDecrease,\n     _onCopy = onCopy,\n     _onCut = onCut,\n     _onPaste = onPaste,\n     _onMoveCursorForwardByCharacter = onMoveCursorForwardByCharacter,\n     _onMoveCursorBackwardByCharacter = onMoveCursorBackwardByCharacter,\n     _onMoveCursorForwardByWord = onMoveCursorForwardByWord,\n     _onMoveCursorBackwardByWord = onMoveCursorBackwardByWord,\n     _onSetSelection = onSetSelection,\n     _onDidGainAccessibilityFocus = onDidGainAccessibilityFocus,\n     _onDidLoseAccessibilityFocus = onDidLoseAccessibilityFocus,\n     _customSemanticsActions = customSemanticsActions,\n     super(child);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSemanticsAnnotations\/RenderSemanticsAnnotations.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "checked",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "container",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "customSemanticsActions",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>"
                },
                {
                    "name": "decreasedValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "enabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "excludeSemantics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "explicitChildNodes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focused",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "header",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hidden",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "hintOverrides",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.SemanticsHintOverrides"
                },
                {
                    "name": "image",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "inMutuallyExclusiveGroup",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "increasedValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "label",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "liveRegion",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "namesRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "obscured",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onCopy",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onCut",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDecrease",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDidGainAccessibilityFocus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDidLoseAccessibilityFocus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDismiss",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onIncrease",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onLongPress",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onMoveCursorBackwardByCharacter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorBackwardByWord",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorForwardByCharacter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorForwardByWord",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onPaste",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollDown",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollLeft",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollRight",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollUp",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onSetSelection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.SetSelectionHandler"
                },
                {
                    "name": "onTap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "scopesRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "selected",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "sortKey",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.SemanticsSortKey"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textField",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "toggled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"rendering\/RenderSemanticsAnnotations\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration(SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n  config.isSemanticBoundary = container;\n  config.explicitChildNodes = explicitChildNodes;\n  assert((scopesRoute == true &amp;&amp; explicitChildNodes == true) || scopesRoute != true,\n    'explicitChildNodes must be set to true if scopes route is true');\n  assert(!(toggled == true &amp;&amp; checked == true),\n    'A semantics node cannot be toggled and checked at the same time');\n\n  if (enabled != null)\n    config.isEnabled = enabled;\n  if (checked != null)\n    config.isChecked = checked;\n  if (toggled != null)\n    config.isToggled = toggled;\n  if (selected != null)\n    config.isSelected = selected;\n  if (button != null)\n    config.isButton = button;\n  if (header != null)\n    config.isHeader = header;\n  if (textField != null)\n    config.isTextField = textField;\n  if (focused != null)\n    config.isFocused = focused;\n  if (inMutuallyExclusiveGroup != null)\n    config.isInMutuallyExclusiveGroup = inMutuallyExclusiveGroup;\n  if (obscured != null)\n    config.isObscured = obscured;\n  if (hidden != null)\n    config.isHidden = hidden;\n  if (image != null)\n    config.isImage = image;\n  if (label != null)\n    config.label = label;\n  if (value != null)\n    config.value = value;\n  if (increasedValue != null)\n    config.increasedValue = increasedValue;\n  if (decreasedValue != null)\n    config.decreasedValue = decreasedValue;\n  if (hint != null)\n    config.hint = hint;\n  if (hintOverrides != null &amp;&amp; hintOverrides.isNotEmpty)\n    config.hintOverrides = hintOverrides;\n  if (scopesRoute != null)\n    config.scopesRoute = scopesRoute;\n  if (namesRoute != null)\n    config.namesRoute = namesRoute;\n  if (liveRegion != null)\n    config.liveRegion = liveRegion;\n  if (textDirection != null)\n    config.textDirection = textDirection;\n  if (sortKey != null)\n    config.sortKey = sortKey;\n  \/\/ Registering _perform* as action handlers instead of the user provided\n  \/\/ ones to ensure that changing a user provided handler from a non-null to\n  \/\/ another non-null value doesn't require a semantics update.\n  if (onTap != null)\n    config.onTap = _performTap;\n  if (onLongPress != null)\n    config.onLongPress = _performLongPress;\n  if (onDismiss != null)\n    config.onDismiss = _performDismiss;\n  if (onScrollLeft != null)\n    config.onScrollLeft = _performScrollLeft;\n  if (onScrollRight != null)\n    config.onScrollRight = _performScrollRight;\n  if (onScrollUp != null)\n    config.onScrollUp = _performScrollUp;\n  if (onScrollDown != null)\n    config.onScrollDown = _performScrollDown;\n  if (onIncrease != null)\n    config.onIncrease = _performIncrease;\n  if (onDecrease != null)\n    config.onDecrease = _performDecrease;\n  if (onCopy != null)\n    config.onCopy = _performCopy;\n  if (onCut != null)\n    config.onCut = _performCut;\n  if (onPaste != null)\n    config.onPaste = _performPaste;\n  if (onMoveCursorForwardByCharacter != null)\n    config.onMoveCursorForwardByCharacter = _performMoveCursorForwardByCharacter;\n  if (onMoveCursorBackwardByCharacter != null)\n    config.onMoveCursorBackwardByCharacter = _performMoveCursorBackwardByCharacter;\n  if (onMoveCursorForwardByWord != null)\n    config.onMoveCursorForwardByWord = _performMoveCursorForwardByWord;\n  if (onMoveCursorBackwardByWord != null)\n    config.onMoveCursorBackwardByWord = _performMoveCursorBackwardByWord;\n  if (onSetSelection != null)\n    config.onSetSelection = _performSetSelection;\n  if (onDidGainAccessibilityFocus != null)\n    config.onDidGainAccessibilityFocus = _performDidGainAccessibilityFocus;\n  if (onDidLoseAccessibilityFocus != null)\n    config.onDidLoseAccessibilityFocus = _performDidLoseAccessibilityFocus;\n  if (customSemanticsActions != null)\n    config.customSemanticsActions = _customSemanticsActions;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSemanticsAnnotations\/describeSemanticsConfiguration.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": [
                {
                    "name": "config",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Called when collecting the semantics of this node.<\/p>\n<p>The implementation has to return the children in paint order skipping all\nchildren that are not semantically relevant (e.g. because they are\ninvisible).<\/p>\n<p>The default implementation mirrors the behavior of\n<a href=\"rendering\/RenderObjectWithChildMixin\/visitChildren.html\">visitChildren()<\/a> (which is supposed to walk all the children).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildrenForSemantics(RenderObjectVisitor visitor) {\n  if (excludeSemantics)\n    return;\n  super.visitChildrenForSemantics(visitor);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSemanticsAnnotations\/visitChildrenForSemantics.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObjectVisitor"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isButton<\/code> semantic to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get button =&gt; _button;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/button.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.hasCheckedState<\/code> semantic to true and\nthe <code>SemanticsNode.isChecked<\/code> semantic to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get checked =&gt; _checked;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/checked.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If 'container' is true, this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> will introduce a new\nnode in the semantics tree. Otherwise, the semantics will be\nmerged with the semantics of any ancestors.<\/p>\n<p>Whether descendants of this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> can add their semantic information\nto the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> introduced by this configuration is controlled by\n<a href=\"rendering\/RenderSemanticsAnnotations\/explicitChildNodes.html\">explicitChildNodes<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get container =&gt; _container;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/container.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>The handlers and supported <a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>s for this node.<\/p>\n<p>These handlers are called whenever the user performs the associated\ncustom accessibility action from a special platform menu. Providing any\ncustom actions here also adds <a href=\"dart-ui\/SemanticsAction\/customAction-constant.html\">SemanticsAction.customAction<\/a> to the node.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>, for an explanation of custom actions.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;CustomSemanticsAction, VoidCallback&gt; get customSemanticsActions =&gt; _customSemanticsActions;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/customSemanticsActions.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/decreasedValue.html\">SemanticsNode.decreasedValue<\/a> semantic to the given\nvalue.<\/p>\n<p>The reading direction is given by <a href=\"rendering\/RenderSemanticsAnnotations\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get decreasedValue =&gt; _decreasedValue;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/decreasedValue.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.hasEnabledState<\/code> semantic to true and\nthe <code>SemanticsNode.isEnabled<\/code> semantic to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get enabled =&gt; _enabled;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/enabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>Whether descendants of this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> should have their semantic\ninformation ignored.<\/p>\n<p>When this flag is set to true, all child semantics nodes are ignored.\nThis can be used as a convenience for cases where a child is wrapped in\nan <a href=\"widgets\/ExcludeSemantics-class.html\">ExcludeSemantics<\/a> widget and then another <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get excludeSemantics =&gt; _excludeSemantics;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/excludeSemantics.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>Whether descendants of this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> are allowed to add semantic\ninformation to the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> annotated by this widget.<\/p>\n<p>When set to false descendants are allowed to annotate <code>SemanticNode<\/code>s of\ntheir parent with the semantic information they want to contribute to the\nsemantic tree.\nWhen set to true the only way for descendants to contribute semantic\ninformation to the semantic tree is to introduce new explicit\n<code>SemanticNode<\/code>s to the tree.<\/p>\n<p>This setting is often used in combination with <code>isSemanticBoundary<\/code> to\ncreate semantic boundaries that are either writable or not for children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get explicitChildNodes =&gt; _explicitChildNodes;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/explicitChildNodes.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isFocused<\/code> semantic to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get focused =&gt; _focused;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/focused.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isHeader<\/code> semantic to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get header =&gt; _header;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/header.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isHidden<\/code> semantic to the given\nvalue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hidden =&gt; _hidden;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/hidden.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/hint.html\">SemanticsNode.hint<\/a> semantic to the given value.<\/p>\n<p>The reading direction is given by <a href=\"rendering\/RenderSemanticsAnnotations\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get hint =&gt; _hint;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/hint.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.hintOverride<\/code> to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsHintOverrides get hintOverrides =&gt; _hintOverrides;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/hintOverrides.html",
            "isDeprecated": "0",
            "type": "semantics.SemanticsHintOverrides",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isImage<\/code> semantic to the given\nvalue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get image =&gt; _image;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/image.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isInMutuallyExclusiveGroup<\/code> semantic\nto the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get inMutuallyExclusiveGroup =&gt; _inMutuallyExclusiveGroup;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/inMutuallyExclusiveGroup.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/increasedValue.html\">SemanticsNode.increasedValue<\/a> semantic to the given\nvalue.<\/p>\n<p>The reading direction is given by <a href=\"rendering\/RenderSemanticsAnnotations\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get increasedValue =&gt; _increasedValue;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/increasedValue.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/label.html\">SemanticsNode.label<\/a> semantic to the given value.<\/p>\n<p>The reading direction is given by <a href=\"rendering\/RenderSemanticsAnnotations\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get label =&gt; _label;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/label.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isLiveRegion<\/code> semantic to the given\nvalue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get liveRegion =&gt; _liveRegion;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/liveRegion.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/namesRoute.html\">SemanticsNode.namesRoute<\/a> semantic to the give value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get namesRoute =&gt; _namesRoute;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/namesRoute.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isObscured<\/code> semantic to the given\nvalue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get obscured =&gt; _obscured;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/obscured.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/scopesRoute.html\">SemanticsNode.scopesRoute<\/a> semantic to the give value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get scopesRoute =&gt; _scopesRoute;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/scopesRoute.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isSelected<\/code> semantic to the given\nvalue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get selected =&gt; _selected;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/selected.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>Sets the <a href=\"rendering\/RenderSemanticsAnnotations\/sortKey.html\">SemanticsNode.sortKey<\/a> to the given value.<\/p>\n<p>This defines how this node is sorted among the sibling semantics nodes\nto determine the order in which they are traversed by the accessibility\nservices on the platform (e.g. VoiceOver on iOS and TalkBack on Android).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsSortKey get sortKey =&gt; _sortKey;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/sortKey.html",
            "isDeprecated": "0",
            "type": "semantics.SemanticsSortKey",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/textDirection.html\">SemanticsNode.textDirection<\/a> semantic to the given value.<\/p>\n<p>This must not be null if <a href=\"rendering\/RenderSemanticsAnnotations\/label.html\">label<\/a>, <a href=\"rendering\/RenderSemanticsAnnotations\/hint.html\">hint<\/a>, <a href=\"rendering\/RenderSemanticsAnnotations\/value.html\">value<\/a>, <a href=\"rendering\/RenderSemanticsAnnotations\/increasedValue.html\">increasedValue<\/a>, or\n<a href=\"rendering\/RenderSemanticsAnnotations\/decreasedValue.html\">decreasedValue<\/a> are not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isTextField<\/code> semantic to the given value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get textField =&gt; _textField;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/textField.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <code>SemanticsNode.isToggled<\/code> semantic to the given\nvalue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get toggled =&gt; _toggled;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/toggled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        },
        {
            "desc": "<p>If non-null, sets the <a href=\"rendering\/RenderSemanticsAnnotations\/value.html\">SemanticsNode.value<\/a> semantic to the given value.<\/p>\n<p>The reading direction is given by <a href=\"rendering\/RenderSemanticsAnnotations\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get value =&gt; _value;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSemanticsAnnotations\/value.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "rendering.RenderSemanticsAnnotations",
            "params": []
        }
    ]
}