{
    "desc": "<p>Describes the configuration for an <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n<p>Widgets are the central class hierarchy in the Flutter framework. A widget\nis an immutable description of part of a user interface. Widgets can be\ninflated into elements, which manage the underlying render tree.<\/p>\n<p>Widgets themselves have no mutable state (all their fields must be final).\nIf you wish to associate mutable state with a widget, consider using a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, which creates a <a href=\"widgets\/State-class.html\">State<\/a> object (via\n<a href=\"widgets\/StatefulWidget\/createState.html\">StatefulWidget.createState<\/a>) whenever it is inflated into an element and\nincorporated into the tree.<\/p>\n<p>A given widget can be included in the tree zero or more times. In particular\na given widget can be placed in the tree multiple times. Each time a widget\nis placed in the tree, it is inflated into an <a href=\"widgets\/Element-class.html\">Element<\/a>, which means a\nwidget that is incorporated into the tree multiple times will be inflated\nmultiple times.<\/p>\n<p>The <a href=\"widgets\/Widget\/key.html\">key<\/a> property controls how one widget replaces another widget in the\ntree. If the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and <a href=\"widgets\/Widget\/key.html\">key<\/a> properties of the two widgets are\n<a href=\"dart-core\/Object\/operator_equals.html\">operator==<\/a>, respectively, then the new widget replaces the old widget by\nupdating the underlying element (i.e., by calling <a href=\"widgets\/Element\/update.html\">Element.update<\/a> with the\nnew widget). Otherwise, the old element is removed from the tree, the new\nwidget is inflated into an element, and the new element is inserted into the\ntree.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> and <a href=\"widgets\/State-class.html\">State<\/a>, for widgets that can build differently\nseveral times over their lifetime.<\/li>\n<li>\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>, for widgets that introduce ambient state that can\nbe read by descendant widgets.<\/li>\n<li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, for widgets that always build the same way given a\nparticular configuration and ambient state.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Widget-class.html",
    "isAbstract": true,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Widget",
    "shortname": "Widget",
    "extends": [
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "cupertino.CupertinoActionSheet",
        "cupertino.CupertinoActionSheetAction",
        "cupertino.CupertinoActivityIndicator",
        "cupertino.CupertinoAlertDialog",
        "cupertino.CupertinoApp",
        "cupertino.CupertinoButton",
        "cupertino.CupertinoDatePicker",
        "cupertino.CupertinoDialog",
        "cupertino.CupertinoDialogAction",
        "cupertino.CupertinoFullscreenDialogTransition",
        "cupertino.CupertinoNavigationBar",
        "cupertino.CupertinoNavigationBarBackButton",
        "cupertino.CupertinoPageScaffold",
        "cupertino.CupertinoPageTransition",
        "cupertino.CupertinoPicker",
        "cupertino.CupertinoPopupSurface",
        "cupertino.CupertinoScrollbar",
        "cupertino.CupertinoSegmentedControl",
        "cupertino.CupertinoSlider",
        "cupertino.CupertinoSliverNavigationBar",
        "cupertino.CupertinoSliverRefreshControl",
        "cupertino.CupertinoSwitch",
        "cupertino.CupertinoTabBar",
        "cupertino.CupertinoTabScaffold",
        "cupertino.CupertinoTabView",
        "cupertino.CupertinoTextField",
        "cupertino.CupertinoTheme",
        "cupertino.CupertinoTimerPicker",
        "material.AboutDialog",
        "material.AboutListTile",
        "material.ActionChip",
        "material.AlertDialog",
        "material.AnimatedIcon",
        "material.AnimatedTheme",
        "material.AppBar",
        "material.BackButton",
        "material.BackButtonIcon",
        "material.BottomAppBar",
        "material.BottomNavigationBar",
        "material.BottomSheet",
        "material.ButtonBar",
        "material.ButtonTheme",
        "material.Card",
        "material.Checkbox",
        "material.CheckboxListTile",
        "material.CheckedPopupMenuItem",
        "material.Chip",
        "material.ChipTheme",
        "material.ChoiceChip",
        "material.CircleAvatar",
        "material.CircularProgressIndicator",
        "material.CloseButton",
        "material.DataTable",
        "material.DayPicker",
        "material.DefaultTabController",
        "material.Dialog",
        "material.Divider",
        "material.Drawer",
        "material.DrawerController",
        "material.DrawerHeader",
        "material.DropdownButton",
        "material.DropdownButtonFormField",
        "material.DropdownButtonHideUnderline",
        "material.DropdownMenuItem",
        "material.ExpandIcon",
        "material.ExpansionPanelList",
        "material.ExpansionTile",
        "material.FilterChip",
        "material.FlatButton",
        "material.FlexibleSpaceBar",
        "material.FlexibleSpaceBarSettings",
        "material.FloatingActionButton",
        "material.FlutterLogo",
        "material.GridTile",
        "material.GridTileBar",
        "material.IconButton",
        "material.Ink",
        "material.InkResponse",
        "material.InkWell",
        "material.InputChip",
        "material.InputDecorator",
        "material.LicensePage",
        "material.LinearProgressIndicator",
        "material.ListTile",
        "material.ListTileTheme",
        "material.Material",
        "material.MaterialApp",
        "material.MaterialButton",
        "material.MergeableMaterial",
        "material.MonthPicker",
        "material.OutlineButton",
        "material.PaginatedDataTable",
        "material.PopupMenuButton",
        "material.PopupMenuDivider",
        "material.PopupMenuItem",
        "material.Radio",
        "material.RadioListTile",
        "material.RaisedButton",
        "material.RawChip",
        "material.RawMaterialButton",
        "material.RefreshIndicator",
        "material.RefreshProgressIndicator",
        "material.ReorderableListView",
        "material.Scaffold",
        "material.Scrollbar",
        "material.SimpleDialog",
        "material.SimpleDialogOption",
        "material.Slider",
        "material.SliderTheme",
        "material.SliverAppBar",
        "material.SnackBar",
        "material.SnackBarAction",
        "material.Stepper",
        "material.Switch",
        "material.SwitchListTile",
        "material.Tab",
        "material.TabBar",
        "material.TabBarView",
        "material.TabPageSelector",
        "material.TabPageSelectorIndicator",
        "material.TableRowInkWell",
        "material.TextField",
        "material.TextFormField",
        "material.Theme",
        "material.Tooltip",
        "material.UserAccountsDrawerHeader",
        "material.VerticalDivider",
        "material.YearPicker",
        "widgets.AbsorbPointer",
        "widgets.Align",
        "widgets.AlignTransition",
        "widgets.AndroidView",
        "widgets.AnimatedAlign",
        "widgets.AnimatedBuilder",
        "widgets.AnimatedContainer",
        "widgets.AnimatedCrossFade",
        "widgets.AnimatedDefaultTextStyle",
        "widgets.AnimatedList",
        "widgets.AnimatedModalBarrier",
        "widgets.AnimatedOpacity",
        "widgets.AnimatedPadding",
        "widgets.AnimatedPhysicalModel",
        "widgets.AnimatedPositioned",
        "widgets.AnimatedPositionedDirectional",
        "widgets.AnimatedSize",
        "widgets.AnimatedSwitcher",
        "widgets.AnnotatedRegion",
        "widgets.AspectRatio",
        "widgets.AutomaticKeepAlive",
        "widgets.BackdropFilter",
        "widgets.Banner",
        "widgets.Baseline",
        "widgets.BlockSemantics",
        "widgets.Builder",
        "widgets.Center",
        "widgets.CheckedModeBanner",
        "widgets.ClipOval",
        "widgets.ClipPath",
        "widgets.ClipRRect",
        "widgets.ClipRect",
        "widgets.Column",
        "widgets.CompositedTransformFollower",
        "widgets.CompositedTransformTarget",
        "widgets.ConstrainedBox",
        "widgets.Container",
        "widgets.CustomMultiChildLayout",
        "widgets.CustomPaint",
        "widgets.CustomScrollView",
        "widgets.CustomSingleChildLayout",
        "widgets.DecoratedBox",
        "widgets.DecoratedBoxTransition",
        "widgets.DefaultAssetBundle",
        "widgets.DefaultTextStyle",
        "widgets.DefaultTextStyleTransition",
        "widgets.Directionality",
        "widgets.Dismissible",
        "widgets.DragTarget",
        "widgets.Draggable",
        "widgets.EditableText",
        "widgets.ErrorWidget",
        "widgets.ExcludeSemantics",
        "widgets.Expanded",
        "widgets.FadeInImage",
        "widgets.FadeTransition",
        "widgets.FittedBox",
        "widgets.Flex",
        "widgets.Flexible",
        "widgets.Flow",
        "widgets.FocusScope",
        "widgets.Form",
        "widgets.FormField",
        "widgets.FractionalTranslation",
        "widgets.FractionallySizedBox",
        "widgets.FutureBuilder",
        "widgets.GestureDetector",
        "widgets.GlowingOverscrollIndicator",
        "widgets.GridPaper",
        "widgets.GridView",
        "widgets.Hero",
        "widgets.Icon",
        "widgets.IconTheme",
        "widgets.IgnorePointer",
        "widgets.Image",
        "widgets.ImageIcon",
        "widgets.IndexedSemantics",
        "widgets.IndexedStack",
        "widgets.IntrinsicHeight",
        "widgets.IntrinsicWidth",
        "widgets.KeepAlive",
        "widgets.KeyedSubtree",
        "widgets.LayoutBuilder",
        "widgets.LayoutId",
        "widgets.LimitedBox",
        "widgets.ListBody",
        "widgets.ListView",
        "widgets.ListWheelScrollView",
        "widgets.ListWheelViewport",
        "widgets.Listener",
        "widgets.Localizations",
        "widgets.LongPressDraggable",
        "widgets.MediaQuery",
        "widgets.MergeSemantics",
        "widgets.MetaData",
        "widgets.ModalBarrier",
        "widgets.NavigationToolbar",
        "widgets.Navigator",
        "widgets.NestedScrollView",
        "widgets.NestedScrollViewViewport",
        "widgets.NotificationListener",
        "widgets.Offstage",
        "widgets.Opacity",
        "widgets.OrientationBuilder",
        "widgets.OverflowBox",
        "widgets.Overlay",
        "widgets.Padding",
        "widgets.PageStorage",
        "widgets.PageView",
        "widgets.PerformanceOverlay",
        "widgets.PhysicalModel",
        "widgets.PhysicalShape",
        "widgets.Placeholder",
        "widgets.Positioned",
        "widgets.PositionedDirectional",
        "widgets.PositionedTransition",
        "widgets.PreferredSize",
        "widgets.PrimaryScrollController",
        "widgets.RawGestureDetector",
        "widgets.RawImage",
        "widgets.RawKeyboardListener",
        "widgets.RelativePositionedTransition",
        "widgets.RenderObjectToWidgetAdapter",
        "widgets.RepaintBoundary",
        "widgets.RichText",
        "widgets.RotatedBox",
        "widgets.RotationTransition",
        "widgets.Row",
        "widgets.SafeArea",
        "widgets.ScaleTransition",
        "widgets.ScrollConfiguration",
        "widgets.Scrollable",
        "widgets.Semantics",
        "widgets.SemanticsDebugger",
        "widgets.ShaderMask",
        "widgets.ShrinkWrappingViewport",
        "widgets.SingleChildScrollView",
        "widgets.SizeChangedLayoutNotifier",
        "widgets.SizeTransition",
        "widgets.SizedBox",
        "widgets.SizedOverflowBox",
        "widgets.SlideTransition",
        "widgets.SliverFillRemaining",
        "widgets.SliverFillViewport",
        "widgets.SliverFixedExtentList",
        "widgets.SliverGrid",
        "widgets.SliverList",
        "widgets.SliverOverlapAbsorber",
        "widgets.SliverOverlapInjector",
        "widgets.SliverPadding",
        "widgets.SliverPersistentHeader",
        "widgets.SliverPrototypeExtentList",
        "widgets.SliverSafeArea",
        "widgets.SliverToBoxAdapter",
        "widgets.Spacer",
        "widgets.Stack",
        "widgets.StatefulBuilder",
        "widgets.StreamBuilder",
        "widgets.Table",
        "widgets.TableCell",
        "widgets.Text",
        "widgets.TextSelectionGestureDetector",
        "widgets.Texture",
        "widgets.TickerMode",
        "widgets.Title",
        "widgets.Transform",
        "widgets.UiKitView",
        "widgets.UnconstrainedBox",
        "widgets.ValueListenableBuilder",
        "widgets.Viewport",
        "widgets.Visibility",
        "widgets.WidgetInspector",
        "widgets.WidgetToRenderBoxAdapter",
        "widgets.WidgetsApp",
        "widgets.WillPopScope",
        "widgets.Wrap"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initializes <code>key<\/code> for subclasses.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Widget({ this.key });<\/code><\/pre>\n    ",
            "href": "widgets\/Widget\/Widget.html",
            "isDeprecated": false,
            "type": "",
            "name": "Widget",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Widget",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Whether the <code>newWidget<\/code> can be used to update an <a href=\"widgets\/Element-class.html\">Element<\/a> that currently\nhas the <code>oldWidget<\/code> as its configuration.<\/p>\n<p>An element that uses a given widget as its configuration can be updated to\nuse another widget as its configuration if, and only if, the two widgets\nhave <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and <a href=\"widgets\/Widget\/key.html\">key<\/a> properties that are <a href=\"dart-core\/Object\/operator_equals.html\">operator==<\/a>.<\/p>\n<p>If the widgets have no key (their key is null), then they are considered a\nmatch if they have the same type, even if their children are completely\ndifferent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool canUpdate(Widget oldWidget, Widget newWidget) {\n  return oldWidget.runtimeType == newWidget.runtimeType\n      &amp;&amp; oldWidget.key == newWidget.key;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Widget\/canUpdate.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "canUpdate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Widget",
            "params": [
                {
                    "name": "newWidget",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "oldWidget",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Widget"
                }
            ]
        },
        {
            "desc": "<p>Inflates this configuration to a concrete instance.<\/p>\n<p>A given widget can be included in the tree zero or more times. In particular\na given widget can be placed in the tree multiple times. Each time a widget\nis placed in the tree, it is inflated into an <a href=\"widgets\/Element-class.html\">Element<\/a>, which means a\nwidget that is incorporated into the tree multiple times will be inflated\nmultiple times.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nElement createElement();<\/code><\/pre>\n    ",
            "href": "widgets\/Widget\/createElement.html",
            "isDeprecated": false,
            "type": "widgets.Element",
            "name": "createElement",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Widget",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Widget\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.dense;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Widget\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Widget",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>A short, textual description of this widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() {\n  return key == null ? '$runtimeType' : '$runtimeType-$key';\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Widget\/toStringShort.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringShort",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Widget",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Controls how one widget replaces another widget in the tree.<\/p>\n<p>If the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and <a href=\"widgets\/Widget\/key.html\">key<\/a> properties of the two widgets are\n<a href=\"dart-core\/Object\/operator_equals.html\">operator==<\/a>, respectively, then the new widget replaces the old widget by\nupdating the underlying element (i.e., by calling <a href=\"widgets\/Element\/update.html\">Element.update<\/a> with the\nnew widget). Otherwise, the old element is removed from the tree, the new\nwidget is inflated into an element, and the new element is inserted into the\ntree.<\/p>\n<p>In addition, using a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> as the widget's <a href=\"widgets\/Widget\/key.html\">key<\/a> allows the element\nto be moved around the tree (changing parent) without losing state. When a\nnew widget is found (its key and type do not match a previous widget in\nthe same location), but there was a widget with that same global key\nelsewhere in the tree in the previous frame, then that widget's element is\nmoved to the new location.<\/p>\n<p>Generally, a widget that is the only child of another widget does not need\nan explicit key.<\/p>\n<p>See also the discussions at <a href=\"foundation\/Key-class.html\">Key<\/a> and <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Key key\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Widget\/key.html",
            "name": "key",
            "isDeprecated": false,
            "type": "foundation.Key",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Widget",
            "params": []
        }
    ]
}