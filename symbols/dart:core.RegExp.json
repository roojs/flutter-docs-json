{
    "desc": "<p>A regular expression pattern.<\/p>\n<p>Regular expressions are <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a>s, and can as such be used to match strings\nor parts of strings.<\/p>\n<p>Dart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<a href=\"http:\/\/ecma-international.org\/ecma-262\/5.1\/#sec-15.10\">ecma-international.org\/ecma-262\/5.1\/#sec-15.10<\/a>\nfor the specification of JavaScript regular expressions.<\/p>\n<p><a href=\"dart-core\/RegExp\/firstMatch.html\">firstMatch<\/a> is the main implementation method that applies a regular\nexpression to a string and returns the first <a href=\"dart-core\/Match-class.html\">Match<\/a>. All\nother methods in <a href=\"dart-core\/RegExp-class.html\">RegExp<\/a> can build on it.<\/p>\n<p>Use <a href=\"dart-core\/RegExp\/allMatches.html\">allMatches<\/a> to look for all matches of a regular expression in\na string.<\/p>\n<p>The following example finds all matches of a regular expression in\na string.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">RegExp exp = new RegExp(r\"(\\w+)\");\nString str = \"Parse my string\";\nIterable&lt;Match&gt; matches = exp.allMatches(str);\n<\/code><\/pre>\n<p>Note the use of a <em>raw string<\/em> (a string prefixed with <code>r<\/code>)\nin the example above. Use a raw string to treat each character in a string\nas a literal character.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-core\/RegExp-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.RegExp",
    "shortname": "RegExp",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Constructs a regular expression.<\/p>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if <code>source<\/code> is not valid regular\nexpression syntax.<\/p>\n<p>If <code>multiLine<\/code> is enabled, then <code>^<\/code> and <code>$<\/code> will match the beginning and\nend of a <em>line<\/em>, in addition to matching beginning and end of input,\nrespectively.<\/p>\n<p>If <code>caseSensitive<\/code> is disabled, then case is ignored.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var wordPattern = RegExp(r\"(\\w+)\");\nvar bracketedNumberValue = RegExp(\"$key: \\\\[\\\\d+\\\\]\");\n<\/code><\/pre>\n<p>Notice the use of a <em>raw string<\/em> in the first example, and a regular\nstring in the second. Because of the many character classes used in\nregular expressions, it is common to use a raw string here, unless string\ninterpolation is required.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory RegExp(String source,\n    {bool multiLine: false, bool caseSensitive: true});<\/code><\/pre>\n    ",
            "href": "dart-core\/RegExp\/RegExp.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.RegExp",
            "params": [
                {
                    "name": "caseSensitive",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "multiLine",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "source",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns an iterable of the matches of the regular expression on <code>input<\/code>.<\/p>\n<p>If <code>start<\/code> is provided, only start looking for matches at <code>start<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Match&gt; allMatches(String input, [int start = 0]);<\/code><\/pre>\n    ",
            "href": "dart-core\/RegExp\/allMatches.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<dart:core.Match>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.RegExp",
            "params": [
                {
                    "name": "input",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a regular expression that matches <code>text<\/code>.<\/p>\n<p>If <code>text<\/code> contains characters that are meaningful in regular expressions,\nthe resulting regular expression will match those characters literally.\nIf <code>text<\/code> contains no characters that have special meaning in a regular\nexpression, it is returned unmodified.<\/p>\n<p>The characters that have special meaning in regular expressions are:\n<code>(<\/code>, <code>)<\/code>, <code>[<\/code>, <code>]<\/code>, <code>{<\/code>, <code>}<\/code>, <code>*<\/code>, <code>+<\/code>, <code>?<\/code>, <code>.<\/code>, <code>^<\/code>, <code>$<\/code>, <code>|<\/code> and <code>\\<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static String escape(String text);<\/code><\/pre>\n    ",
            "href": "dart-core\/RegExp\/escape.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.RegExp",
            "params": [
                {
                    "name": "text",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Searches for the first match of the regular expression\nin the string <code>input<\/code>. Returns <code>null<\/code> if there is no match.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Match firstMatch(String input);<\/code><\/pre>\n    ",
            "href": "dart-core\/RegExp\/firstMatch.html",
            "isDeprecated": "0",
            "type": "dart:core.Match",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.RegExp",
            "params": [
                {
                    "name": "input",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns whether the regular expression has a match in the string <code>input<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasMatch(String input);<\/code><\/pre>\n    ",
            "href": "dart-core\/RegExp\/hasMatch.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.RegExp",
            "params": [
                {
                    "name": "input",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns the first substring match of this regular expression in <code>input<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String stringMatch(String input);<\/code><\/pre>\n    ",
            "href": "dart-core\/RegExp\/stringMatch.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.RegExp",
            "params": [
                {
                    "name": "input",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this regular expression is case sensitive.<\/p>\n<p>If the regular expression is not case sensitive, it will match an input\nletter with a pattern letter even if the two letters are different case\nversions of the same letter.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCaseSensitive;<\/code><\/pre>\n        ",
            "href": "dart-core\/RegExp\/isCaseSensitive.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.RegExp",
            "params": []
        },
        {
            "desc": "<p>Whether this regular expression matches multiple lines.<\/p>\n<p>If the regexp does match multiple lines, the \"^\" and \"$\" characters\nmatch the beginning and end of lines. If not, the character match the\nbeginning and end of the input.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMultiLine;<\/code><\/pre>\n        ",
            "href": "dart-core\/RegExp\/isMultiLine.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.RegExp",
            "params": []
        },
        {
            "desc": "<p>The source regular expression string used to create this <code>RegExp<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get pattern;<\/code><\/pre>\n        ",
            "href": "dart-core\/RegExp\/pattern.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:core.RegExp",
            "params": []
        }
    ]
}