{
    "name": "dart:core.Function",
    "extends": [],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>Test whether another object is equal to this function.<\/p>\n<p>System-created function objects are only equal to other functions.<\/p>\n<p>Two function objects are known to represent the same function if<\/p>\n<ul>\n<li>It is the same object. Static and top-level functions are compile time\nconstants when used as values, so referring to the same function twice\nalways give the same object,<\/li>\n<li>or if they refer to the same member method extracted from the same object.\nExtracting a member method as a function value twice gives equal, but\nnot necessarily identical, function values.<\/li>\n<\/ul>\n<p>Function expressions never give rise to equal function objects. Each time\na function expression is evaluated, it creates a new closure value that\nis not known to be equal to other closures created by the same expression.<\/p>\n<p>Classes implementing <code>Function<\/code> by having a <code>call<\/code> method should have their\nown <code>operator==<\/code> and <code>hashCode<\/code> depending on the object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.Function",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/Function\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(Object other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Function",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:core.Function",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-core\/Function\/Function.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "apply",
            "type": "",
            "desc": "<p>Dynamically call <code>function<\/code> with the specified arguments.<\/p>\n<p>Acts the same as calling function with positional arguments\ncorresponding to the elements of <code>positionalArguments<\/code> and\nnamed arguments corresponding to the elements of <code>namedArguments<\/code>.<\/p>\n<p>This includes giving the same errors if <code>function<\/code> isn't callable or\nif it expects different parameters.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>Function.apply(foo, [1,2,3], {#f: 4, #g: 5});\n<\/code><\/pre>\n<p>gives exactly the same result as<\/p>\n<pre class=\"language-dart\"><code>foo(1, 2, 3, f: 4, g: 5).\n<\/code><\/pre>\n<p>If <code>positionalArguments<\/code> is null, it's considered an empty list.\nIf <code>namedArguments<\/code> is omitted or null, it is considered an empty map.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.Function",
            "sig": "",
            "params": [
                {
                    "name": "function",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "positionalArguments",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "namedArguments",
                    "type": "dart:core.Map<dart:core.Symbol>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.Symbol"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/Function\/apply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static apply(Function function, List positionalArguments,\n    [Map&lt;Symbol, dynamic&gt; namedArguments]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns a hash code value that is compatible with <code>operator==<\/code>.<\/p>\n        ",
            "memberOf": "dart:core.Function",
            "isConstant": false,
            "href": "dart-core\/Function\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-core\/Function-class.html",
    "desc": "<p>The base class for all function types.<\/p>\n<p>A function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of <a href=\"dart-core\/Function-class.html\">Function<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Function"
}