{
    "desc": "<p>The base class for all function types.<\/p>\n<p>A function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of <a href=\"dart-core\/Function-class.html\">Function<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/Function-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Function",
    "shortname": "Function",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-core\/Function\/Function.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Function",
            "params": []
        },
        {
            "desc": "<p>Dynamically call <code>function<\/code> with the specified arguments.<\/p>\n<p>Acts the same as calling function with positional arguments\ncorresponding to the elements of <code>positionalArguments<\/code> and\nnamed arguments corresponding to the elements of <code>namedArguments<\/code>.<\/p>\n<p>This includes giving the same errors if <code>function<\/code> isn't callable or\nif it expects different parameters.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>Function.apply(foo, [1,2,3], {#f: 4, #g: 5});\n<\/code><\/pre>\n<p>gives exactly the same result as<\/p>\n<pre class=\"language-dart\"><code>foo(1, 2, 3, f: 4, g: 5).\n<\/code><\/pre>\n<p>If <code>positionalArguments<\/code> is null, it's considered an empty list.\nIf <code>namedArguments<\/code> is omitted or null, it is considered an empty map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static apply(Function function, List positionalArguments,\n    [Map&lt;Symbol, dynamic&gt; namedArguments]);<\/code><\/pre>\n    ",
            "href": "dart-core\/Function\/apply.html",
            "isDeprecated": "0",
            "type": "<dynamic>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Function",
            "params": [
                {
                    "name": "function",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "namedArguments",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map<dart:core.Symbol>"
                },
                {
                    "name": "positionalArguments",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a hash code value that is compatible with <code>operator==<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
            "href": "dart-core\/Function\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Function",
            "params": []
        }
    ]
}