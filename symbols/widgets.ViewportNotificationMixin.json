{
    "name": "widgets.ViewportNotificationMixin",
    "extends": [],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "ViewportNotificationMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "widgets.ViewportNotificationMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "widgets\/ViewportNotificationMixin\/ViewportNotificationMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "debugFillDescription",
            "type": "",
            "desc": "<p>Add additional information to the given description for use by <a href=\"widgets\/Notification\/toString.html\">toString<\/a>.<\/p>\n<p>This method makes it easier for subclasses to coordinate to provide a\nhigh-quality <a href=\"widgets\/Notification\/toString.html\">toString<\/a> implementation. The <a href=\"widgets\/Notification\/toString.html\">toString<\/a> implementation on\nthe <a href=\"widgets\/Notification-class.html\">Notification<\/a> base class calls <a href=\"widgets\/ViewportNotificationMixin\/debugFillDescription.html\">debugFillDescription<\/a> to collect\nuseful information from subclasses to incorporate into its return value.<\/p>\n<p>If you override this, make sure to start your method with a call to\n<code>super.debugFillDescription(description)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ViewportNotificationMixin",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ViewportNotificationMixin\/debugFillDescription.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillDescription(List&lt;String&gt; description) {\n  super.debugFillDescription(description);\n  description.add('depth: $depth (${ depth == 0 ? \"local\" : \"remote\"})');\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "visitAncestor",
            "type": "dart:core.bool",
            "desc": "<p>Applied to each ancestor of the <a href=\"widgets\/Notification\/dispatch.html\">dispatch<\/a> target.<\/p>\n<p>The <a href=\"widgets\/Notification-class.html\">Notification<\/a> class implementation of this method dispatches the\ngiven <a href=\"widgets\/Notification-class.html\">Notification<\/a> to each ancestor <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a> widget.<\/p>\n<p>Subclasses can override this to apply additional filtering or to update\nthe notification as it is bubbled (for example, increasing a <code>depth<\/code> field\nfor each ancestor of a particular type).<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ViewportNotificationMixin",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "widgets.Element",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ViewportNotificationMixin\/visitAncestor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool visitAncestor(Element element) {\n  if (element is RenderObjectElement &amp;&amp; element.renderObject is RenderAbstractViewport)\n    _depth += 1;\n  return super.visitAncestor(element);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "depth",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The number of viewports that this notification has bubbled through.<\/p>\n<p>Typically listeners only respond to notifications with a <a href=\"widgets\/ViewportNotificationMixin\/depth.html\">depth<\/a> of zero.<\/p>\n<p>Specifically, this is the number of <a href=\"widgets\/Widget-class.html\">Widget<\/a>s representing\n<a href=\"rendering\/RenderAbstractViewport-class.html\">RenderAbstractViewport<\/a> render objects through which this notification\nhas bubbled.<\/p>\n        ",
            "memberOf": "widgets.ViewportNotificationMixin",
            "isConstant": false,
            "href": "widgets\/ViewportNotificationMixin\/depth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get depth =&gt; _depth;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/ViewportNotificationMixin-mixin.html",
    "desc": "<p>Mixin for <a href=\"widgets\/Notification-class.html\">Notification<\/a>s that track how many <a href=\"rendering\/RenderAbstractViewport-class.html\">RenderAbstractViewport<\/a> they\nhave bubbled through.<\/p>\n<p>This is used by <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> and <a href=\"widgets\/OverscrollIndicatorNotification-class.html\">OverscrollIndicatorNotification<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "ViewportNotificationMixin"
}