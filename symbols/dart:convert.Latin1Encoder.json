{
    "name": "dart:convert.Latin1Encoder",
    "extends": [
        "dart:core.int",
        "dart:core.List",
        "dart:core.String",
        "dart:convert.Converter",
        "dart:core.int",
        "dart:core.List",
        "dart:core.String",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "Latin1Encoder",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:convert.Latin1Encoder",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-convert\/Latin1Encoder\/Latin1Encoder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Latin1Encoder() : super(_latin1Mask);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bind",
            "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.Latin1Encoder",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/Latin1Encoder\/bind.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; bind(Stream&lt;String&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Stream",
                "dart:core.List",
                "dart:core.int"
            ]
        },
        {
            "name": "convert",
            "type": "dart:typed_data.Uint8List",
            "desc": "<p>Converts the <a href=\"dart-core\/String-class.html\">String<\/a> into a list of its code units.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the substring\n<code>string.substring(start, end)<\/code> is used as input to the conversion.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.Latin1Encoder",
            "sig": "",
            "params": [
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/Latin1Encoder\/convert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List convert(String string, [int start = 0, int end]) {\n  var stringLength = string.length;\n  end = RangeError.checkValidRange(start, end, stringLength);\n  var length = end - start;\n  var result = Uint8List(length);\n  for (var i = 0; i &lt; length; i++) {\n    var codeUnit = string.codeUnitAt(start + i);\n    if ((codeUnit &amp; ~_subsetMask) != 0) {\n      throw ArgumentError.value(\n          string, \"string\", \"Contains invalid characters.\");\n    }\n    result[i] = codeUnit;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "startChunkedConversion",
            "type": "dart:convert.StringConversionSink",
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.Latin1Encoder",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<dart:core.List<dart:core.int>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/Latin1Encoder\/startChunkedConversion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  return _UnicodeSubsetEncoderSink(_subsetMask,\n      sink is ByteConversionSink ? sink : ByteConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/Latin1Encoder-class.html",
    "desc": "<p>This class converts strings of only ISO Latin-1 characters to bytes.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Latin1Encoder"
}