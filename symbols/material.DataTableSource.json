{
    "name": "material.DataTableSource",
    "extends": [
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "DataTableSource",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "material.DataTableSource",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "material\/DataTableSource\/DataTableSource.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "getRow",
            "type": "material.DataRow",
            "desc": "<p>Called to obtain the data about a particular row.<\/p>\n<p>The <a href=\"material\/DataRow\/DataRow.byIndex.html\">new DataRow.byIndex<\/a> constructor provides a convenient way to construct\n<a href=\"material\/DataRow-class.html\">DataRow<\/a> objects for this callback's purposes without having to worry about\nindependently keying each row.<\/p>\n<p>If the given index does not correspond to a row, or if no data is yet\navailable for a row, then return null. The row will be left blank and a\nloading indicator will be displayed over the table. Once data is available\nor once it is firmly established that the row index in question is beyond\nthe end of the table, call <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>.<\/p>\n<p>Data returned from this method must be consistent for the lifetime of the\nobject. If the row count changes, then a new delegate must be provided.<\/p>\n    ",
            "static": false,
            "memberOf": "material.DataTableSource",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/DataTableSource\/getRow.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DataRow getRow(int index);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "isRowCountApproximate",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Called to establish if <a href=\"material\/DataTableSource\/rowCount.html\">rowCount<\/a> is a precise number or might be an\nover-estimate. If this returns true (i.e. the count is approximate), and\nthen later the exact number becomes available, then call\n<a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>.<\/p>\n        ",
            "memberOf": "material.DataTableSource",
            "isConstant": false,
            "href": "material\/DataTableSource\/isRowCountApproximate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRowCountApproximate;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "rowCount",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Called to obtain the number of rows to tell the user are available.<\/p>\n<p>If <a href=\"material\/DataTableSource\/isRowCountApproximate.html\">isRowCountApproximate<\/a> is false, then this must be an accurate number,\nand <a href=\"material\/DataTableSource\/getRow.html\">getRow<\/a> must return a non-null value for all indices in the range 0\nto one less than the row count.<\/p>\n<p>If <a href=\"material\/DataTableSource\/isRowCountApproximate.html\">isRowCountApproximate<\/a> is true, then the user will be allowed to\nattempt to display rows up to this <a href=\"material\/DataTableSource\/rowCount.html\">rowCount<\/a>, and the display will\nindicate that the count is approximate. The row count should therefore be\ngreater than the actual number of rows if at all possible.<\/p>\n<p>If the row count changes, call <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>.<\/p>\n        ",
            "memberOf": "material.DataTableSource",
            "isConstant": false,
            "href": "material\/DataTableSource\/rowCount.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get rowCount;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selectedRowCount",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Called to obtain the number of rows that are currently selected.<\/p>\n<p>If the selected row count changes, call <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>.<\/p>\n        ",
            "memberOf": "material.DataTableSource",
            "isConstant": false,
            "href": "material\/DataTableSource\/selectedRowCount.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get selectedRowCount;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/DataTableSource-class.html",
    "desc": "<p>A data source for obtaining row data for <a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a> objects.<\/p>\n<p>A data table source provides two main pieces of information:<\/p>\n<ul>\n<li>The number of rows in the data table (<a href=\"material\/DataTableSource\/rowCount.html\">rowCount<\/a>).<\/li>\n<li>The data for each row (indexed from <code>0<\/code> to <code>rowCount - 1<\/code>).<\/li>\n<\/ul>\n<p>It also provides a listener API (<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a>\/<a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a>) so that\nconsumers of the data can be notified when it changes. When the data\nchanges, call <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a> to send the notifications.<\/p>\n<p>DataTableSource objects are expected to be long-lived, not recreated with\neach build.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DataTableSource"
}