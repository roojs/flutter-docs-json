{
    "desc": "<p>Paints a <a href=\"widgets\/Banner-class.html\">Banner<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/BannerPainter-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.BannerPainter",
    "shortname": "BannerPainter",
    "extends": [
        "rendering.CustomPainter",
        "foundation.Listenable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a banner painter.<\/p>\n<p>The <code>message<\/code>, <code>textDirection<\/code>, <code>location<\/code>, and <code>layoutDirection<\/code>\narguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BannerPainter({\n  @required this.message,\n  @required this.textDirection,\n  @required this.location,\n  @required this.layoutDirection,\n  this.color = _kColor,\n  this.textStyle = _kTextStyle,\n}) : assert(message != null),\n     assert(textDirection != null),\n     assert(location != null),\n     assert(color != null),\n     assert(textStyle != null);<\/code><\/pre>\n    ",
            "href": "widgets\/BannerPainter\/BannerPainter.html",
            "isDeprecated": false,
            "type": "",
            "name": "BannerPainter",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.BannerPainter",
            "params": [
                {
                    "name": "color",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "layoutDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "location",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.BannerLocation"
                },
                {
                    "name": "message",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a hit test is being performed on an object that is using\nthis custom paint delegate.<\/p>\n<p>The given point is relative to the same coordinate space as the last\n<a href=\"widgets\/BannerPainter\/paint.html\">paint<\/a> call.<\/p>\n<p>The default behavior is to consider all points to be hits for\nbackground painters, and no points to be hits for foreground painters.<\/p>\n<p>Return true if the given position corresponds to a point on the drawn\nimage that should be considered a \"hit\", false if it corresponds to a\npoint that should be considered outside the painted image, and null to use\nthe default behavior.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(Offset position) =&gt; false;<\/code><\/pre>\n    ",
            "href": "widgets\/BannerPainter\/hitTest.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BannerPainter",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Called whenever the object needs to paint. The given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> has its\ncoordinate space configured such that the origin is at the top left of the\nbox. The area of the box is the size of the <code>size<\/code> argument.<\/p>\n<p>Paint operations should remain inside the given area. Graphical operations\noutside the bounds may be silently ignored, clipped, or not clipped.<\/p>\n<p>Implementations should be wary of correctly pairing any calls to\n<a href=\"dart-ui\/Canvas\/save.html\">Canvas.save<\/a>\/<a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a>, otherwise all\nsubsequent painting on this canvas may be affected, with potentially\nhilarious but confusing results.<\/p>\n<p>To paint text on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>.<\/p>\n<p>To paint an image on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>:<\/p>\n<ol>\n<li>\n<p>Obtain an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>, for example by calling <a href=\"painting\/ImageProvider\/resolve.html\">ImageProvider.resolve<\/a>\non an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> or <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a> object.<\/p>\n<\/li>\n<li>\n<p>Whenever the <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>'s underlying <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object changes\n(see <a href=\"rendering\/CustomPainter\/addListener.html\">ImageStream.addListener<\/a>), create a new instance of your custom\npaint delegate, giving it the new <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object.<\/p>\n<\/li>\n<li>\n<p>In your delegate's <a href=\"widgets\/BannerPainter\/paint.html\">paint<\/a> method, call the <a href=\"dart-ui\/Canvas\/drawImage.html\">Canvas.drawImage<\/a>,\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>, or <a href=\"dart-ui\/Canvas\/drawImageNine.html\">Canvas.drawImageNine<\/a> methods to paint the\n<a href=\"painting\/ImageInfo\/image.html\">ImageInfo.image<\/a> object, applying the <a href=\"painting\/ImageInfo\/scale.html\">ImageInfo.scale<\/a> value to\nobtain the correct rendering size.<\/p>\n<\/li>\n<\/ol>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Size size) {\n  if (!_prepared)\n    _prepare();\n  canvas\n    ..translate(_translationX(size.width), _translationY(size.height))\n    ..rotate(_rotation)\n    ..drawRect(_kRect, _paintShadow)\n    ..drawRect(_kRect, _paintBanner);\n  const double width = _kOffset * 2.0;\n  _textPainter.layout(minWidth: width, maxWidth: width);\n  _textPainter.paint(canvas, _kRect.topLeft + Offset(0.0, (_kRect.height - _textPainter.height) \/ 2.0));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BannerPainter\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BannerPainter",
            "params": [
                {
                    "name": "canvas",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "size",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a new instance of the custom painter delegate class is\nprovided to the <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> object, or any time that a new\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> object is created with a new instance of the custom painter\ndelegate class (which amounts to the same thing, because the latter is\nimplemented in terms of the former).<\/p>\n<p>If the new instance represents different information than the old\ninstance, then the method should return true, otherwise it should return\nfalse.<\/p>\n<p>If the method returns false, then the <a href=\"widgets\/BannerPainter\/paint.html\">paint<\/a> call might be optimized\naway.<\/p>\n<p>It's possible that the <a href=\"widgets\/BannerPainter\/paint.html\">paint<\/a> method will get called even if\n<a href=\"widgets\/BannerPainter\/shouldRepaint.html\">shouldRepaint<\/a> returns false (e.g. if an ancestor or descendant needed to\nbe repainted). It's also possible that the <a href=\"widgets\/BannerPainter\/paint.html\">paint<\/a> method will get called\nwithout <a href=\"widgets\/BannerPainter\/shouldRepaint.html\">shouldRepaint<\/a> being called at all (e.g. if the box changes\nsize).<\/p>\n<p>If a custom delegate has a particularly expensive paint function such that\nrepaints should be avoided as much as possible, a <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> or\n<a href=\"rendering\/RenderRepaintBoundary-class.html\">RenderRepaintBoundary<\/a> (or other render object with\n<a href=\"rendering\/RenderObject\/isRepaintBoundary.html\">RenderObject.isRepaintBoundary<\/a> set to true) might be helpful.<\/p>\n<p>The <code>oldDelegate<\/code> argument will never be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool shouldRepaint(BannerPainter oldDelegate) {\n  return message != oldDelegate.message\n      || location != oldDelegate.location\n      || color != oldDelegate.color\n      || textStyle != oldDelegate.textStyle;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BannerPainter\/shouldRepaint.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "shouldRepaint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BannerPainter",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BannerPainter"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color to paint behind the <a href=\"widgets\/BannerPainter\/message.html\">message<\/a>.<\/p>\n<p>Defaults to a dark red.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BannerPainter\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.BannerPainter",
            "params": []
        },
        {
            "desc": "<p>The directionality of the layout.<\/p>\n<p>This value is used to interpret the <a href=\"widgets\/BannerPainter\/location.html\">location<\/a> of the banner.<\/p>\n<p>See also <a href=\"widgets\/BannerPainter\/textDirection.html\">textDirection<\/a>, which controls the reading direction of the\n<a href=\"widgets\/BannerPainter\/message.html\">message<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection layoutDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BannerPainter\/layoutDirection.html",
            "name": "layoutDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.BannerPainter",
            "params": []
        },
        {
            "desc": "<p>Where to show the banner (e.g., the upper right corner).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BannerLocation location\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BannerPainter\/location.html",
            "name": "location",
            "isDeprecated": false,
            "type": "widgets.BannerLocation",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.BannerPainter",
            "params": []
        },
        {
            "desc": "<p>The message to show in the banner.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BannerPainter\/message.html",
            "name": "message",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.BannerPainter",
            "params": []
        },
        {
            "desc": "<p>The directionality of the text.<\/p>\n<p>This value is used to disambiguate how to render bidirectional text. For\nexample, if the message is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>See also <a href=\"widgets\/BannerPainter\/layoutDirection.html\">layoutDirection<\/a>, which controls the interpretation of values in\n<a href=\"widgets\/BannerPainter\/location.html\">location<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BannerPainter\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.BannerPainter",
            "params": []
        },
        {
            "desc": "<p>The text style to use for the <a href=\"widgets\/BannerPainter\/message.html\">message<\/a>.<\/p>\n<p>Defaults to bold, white text.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle textStyle\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BannerPainter\/textStyle.html",
            "name": "textStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.BannerPainter",
            "params": []
        }
    ]
}