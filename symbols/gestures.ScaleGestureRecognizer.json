{
    "desc": "<p>Recognizes a scale gesture.<\/p>\n<p><a href=\"gestures\/ScaleGestureRecognizer-class.html\">ScaleGestureRecognizer<\/a> tracks the pointers in contact with the screen and\ncalculates their focal point, indicated scale, and rotation. When a focal\npointer is established, the recognizer calls <a href=\"gestures\/ScaleGestureRecognizer\/onStart.html\">onStart<\/a>. As the focal point,\nscale, rotation change, the recognizer calls <a href=\"gestures\/ScaleGestureRecognizer\/onUpdate.html\">onUpdate<\/a>. When the pointers\nare no longer in contact with the screen, the recognizer calls <a href=\"gestures\/ScaleGestureRecognizer\/onEnd.html\">onEnd<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "gestures\/ScaleGestureRecognizer-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "gestures",
    "name": "gestures.ScaleGestureRecognizer",
    "shortname": "ScaleGestureRecognizer",
    "extends": [
        "gestures.OneSequenceGestureRecognizer",
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>The pointers are no longer in contact with the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureScaleEndCallback onEnd\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ScaleGestureRecognizer\/onEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureScaleEndCallback",
            "name": "onEnd",
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The pointers in contact with the screen have established a focal point and\ninitial scale of 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureScaleStartCallback onStart\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ScaleGestureRecognizer\/onStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureScaleStartCallback",
            "name": "onStart",
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The pointers in contact with the screen have indicated a new focal point\nand\/or scale.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureScaleUpdateCallback onUpdate\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/ScaleGestureRecognizer\/onUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureScaleUpdateCallback",
            "name": "onUpdate",
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Create a gesture recognizer for interactions intended for scaling content.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ScaleGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/ScaleGestureRecognizer.html",
            "isDeprecated": false,
            "type": "",
            "name": "ScaleGestureRecognizer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": [
                {
                    "name": "debugOwner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "kind",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.PointerDeviceKind"
                }
            ]
        },
        {
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  if (_state == _ScaleState.possible) {\n    _state = _ScaleState.started;\n    _dispatchOnStartCallbackIfNeeded();\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/acceptGesture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "acceptGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/ScaleGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  startTrackingPointer(event.pointer);\n  _velocityTrackers[event.pointer] = VelocityTracker();\n  if (_state == _ScaleState.ready) {\n    _state = _ScaleState.possible;\n    _initialSpan = 0.0;\n    _currentSpan = 0.0;\n    _initialHorizontalSpan = 0.0;\n    _currentHorizontalSpan = 0.0;\n    _initialVerticalSpan = 0.0;\n    _currentVerticalSpan = 0.0;\n    _pointerLocations = &lt;int, Offset&gt;{};\n    _pointerQueue = &lt;int&gt;[];\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/addAllowedPointer.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addAllowedPointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  switch (_state) {\n    case _ScaleState.possible:\n      resolve(GestureDisposition.rejected);\n      break;\n    case _ScaleState.ready:\n      assert(false); \/\/ We should have not seen a pointer yet\n      break;\n    case _ScaleState.accepted:\n      break;\n    case _ScaleState.started:\n      assert(false); \/\/ We should be in the accepted state when user is done\n      break;\n  }\n  _state = _ScaleState.ready;\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/didStopTrackingLastPointer.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didStopTrackingLastPointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _velocityTrackers.clear();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/dispose.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(_state != _ScaleState.ready);\n  bool didChangeConfiguration = false;\n  bool shouldStartIfAccepted = false;\n  if (event is PointerMoveEvent) {\n    final VelocityTracker tracker = _velocityTrackers[event.pointer];\n    assert(tracker != null);\n    if (!event.synthesized)\n      tracker.addPosition(event.timeStamp, event.position);\n    _pointerLocations[event.pointer] = event.position;\n    shouldStartIfAccepted = true;\n  } else if (event is PointerDownEvent) {\n    _pointerLocations[event.pointer] = event.position;\n    _pointerQueue.add(event.pointer);\n    didChangeConfiguration = true;\n    shouldStartIfAccepted = true;\n  } else if (event is PointerUpEvent || event is PointerCancelEvent) {\n    _pointerLocations.remove(event.pointer);\n    _pointerQueue.remove(event.pointer);\n    didChangeConfiguration = true;\n  }\n\n  _updateLines();\n  _update();\n\n  if (!didChangeConfiguration || _reconfigure(event.pointer))\n    _advanceStateMachine(shouldStartIfAccepted);\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/handleEvent.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "handleEvent",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  stopTrackingPointer(pointer);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/ScaleGestureRecognizer\/rejectGesture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "rejectGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'scale';<\/code><\/pre>\n        ",
            "href": "gestures\/ScaleGestureRecognizer\/debugDescription.html",
            "name": "debugDescription",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.ScaleGestureRecognizer",
            "params": []
        }
    ]
}