{
    "desc": "<p>A layer that is displayed at an offset from its parent layer.<\/p>\n<p>Offset layers are key to efficient repainting because they are created by\nrepaint boundaries in the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> tree (see\n<a href=\"rendering\/RenderObject\/isRepaintBoundary.html\">RenderObject.isRepaintBoundary<\/a>). When a render object that is a repaint\nboundary is asked to paint at given offset in a <a href=\"rendering\/PaintingContext-class.html\">PaintingContext<\/a>, the\nrender object first checks whether it needs to repaint itself. If not, it\nreuses its existing <a href=\"rendering\/OffsetLayer-class.html\">OffsetLayer<\/a> (and its entire subtree) by mutating its\n<a href=\"rendering\/OffsetLayer\/offset.html\">offset<\/a> property, cutting off the paint walk.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/OffsetLayer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.OffsetLayer",
    "shortname": "OffsetLayer",
    "extends": [
        "rendering.ContainerLayer",
        "rendering.Layer",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [
        "rendering.TransformLayer"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an offset layer.<\/p>\n<p>By default, <code>offset<\/code> is zero. It must be non-null before the compositing\nphase of the pipeline.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OffsetLayer({ Offset offset = Offset.zero }) : _offset = offset;<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/OffsetLayer.html",
            "isDeprecated": false,
            "type": "",
            "name": "OffsetLayer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Override this method to upload this layer to the engine.<\/p>\n<p>Return the engine layer for retained rendering. When there's no\ncorresponding engine layer, null is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nui.EngineLayer addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]) {\n  \/\/ Skia has a fast path for concatenating scale\/translation only matrices.\n  \/\/ Hence pushing a translation-only transform layer should be fast. For\n  \/\/ retained rendering, we don't want to push the offset down to each leaf\n  \/\/ node. Otherwise, changing an offset layer on the very high level could\n  \/\/ cascade the change to too many leaves.\n  final ui.EngineLayer engineLayer = builder.pushOffset(layerOffset.dx + offset.dx, layerOffset.dy + offset.dy);\n  addChildrenToScene(builder);\n  builder.pop();\n  return engineLayer;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/addToScene.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "addToScene",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "builder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.SceneBuilder"
                },
                {
                    "name": "layerOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Applies the transform that would be applied when compositing the given\nchild to the given matrix.<\/p>\n<p>Specifically, this should apply the transform that is applied to child's\n<em>origin<\/em>. When using <a href=\"rendering\/OffsetLayer\/applyTransform.html\">applyTransform<\/a> with a chain of layers, results will\nbe unreliable unless the deepest layer in the chain collapses the\n<code>layerOffset<\/code> in <a href=\"rendering\/OffsetLayer\/addToScene.html\">addToScene<\/a> to zero, meaning that it passes\n<a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a> to its children, and bakes any incoming <code>layerOffset<\/code> into\nthe <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> as (for instance) a transform (which is then also\nincluded in the transformation applied by <a href=\"rendering\/OffsetLayer\/applyTransform.html\">applyTransform<\/a>).<\/p>\n<p>For example, if <a href=\"rendering\/OffsetLayer\/addToScene.html\">addToScene<\/a> applies the <code>layerOffset<\/code> and then\npasses <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a> to the children, then it should be included in the\ntransform applied here, whereas if <a href=\"rendering\/OffsetLayer\/addToScene.html\">addToScene<\/a> just passes the\n<code>layerOffset<\/code> to the child, then it should not be included in the\ntransform applied here.<\/p>\n<p>This method is only valid immediately after <a href=\"rendering\/OffsetLayer\/addToScene.html\">addToScene<\/a> has been called,\nbefore any of the properties have been changed.<\/p>\n<p>The default implementation does nothing, since <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a>, by\ndefault, composites its children at the origin of the <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a>\nitself.<\/p>\n<p>The <code>child<\/code> argument should generally not be null, since in principle a\nlayer could transform each child independently. However, certain layers\nmay explicitly allow null as a value, for example if they know that they\ntransform all their children identically.<\/p>\n<p>The <code>transform<\/code> argument must not be null.<\/p>\n<p>Used by <a href=\"rendering\/FollowerLayer-class.html\">FollowerLayer<\/a> to transform its child to a <a href=\"rendering\/LeaderLayer-class.html\">LeaderLayer<\/a>'s\nposition.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid applyTransform(Layer child, Matrix4 transform) {\n  assert(child != null);\n  assert(transform != null);\n  transform.multiply(Matrix4.translationValues(offset.dx, offset.dy, 0.0));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/applyTransform.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "applyTransform",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.Layer"
                },
                {
                    "name": "transform",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Consider this layer as the root and build a scene (a tree of layers)\nin the engine.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ui.Scene buildScene(ui.SceneBuilder builder) {\n  updateSubtreeNeedsAddToScene();\n  addToScene(builder);\n  return builder.build();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/buildScene.html",
            "isDeprecated": false,
            "type": "dart:ui.Scene",
            "name": "buildScene",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "builder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.SceneBuilder"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/OffsetLayer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('offset', offset));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Returns the value of <code>S<\/code> that corresponds to the point described by\n<code>regionOffset<\/code>.<\/p>\n<p>Returns null if no matching region is found.<\/p>\n<p>The main way for a value to be assigned here is by pushing an\n<a href=\"rendering\/AnnotatedRegionLayer-class.html\">AnnotatedRegionLayer<\/a> into the layer tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/AnnotatedRegionLayer-class.html\">AnnotatedRegionLayer<\/a>, for placing values in the layer tree.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nS find&lt;S&gt;(Offset regionOffset) {\n  return super.find&lt;S&gt;(regionOffset - offset);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/find.html",
            "isDeprecated": false,
            "type": "<S>",
            "name": "find",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "regionOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Capture an image of the current state of this layer and its children.<\/p>\n<p>The returned <a href=\"dart-ui\/Image-class.html\">ui.Image<\/a> has uncompressed raw RGBA bytes, will be offset\nby the top-left corner of <code>bounds<\/code>, and have dimensions equal to the size\nof <code>bounds<\/code> multiplied by <code>pixelRatio<\/code>.<\/p>\n<p>The <code>pixelRatio<\/code> describes the scale between the logical pixels and the\nsize of the output image. It is independent of the\n<code>window.devicePixelRatio<\/code> for the device, so specifying 1.0 (the default)\nwill give you a 1:1 mapping between logical pixels and the output pixels\nin the image.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/OffsetLayer\/toImage.html\">RenderRepaintBoundary.toImage<\/a> for a similar API at the render object level.<\/li>\n<li>\n<a href=\"rendering\/OffsetLayer\/toImage.html\">dart:ui.Scene.toImage<\/a> for more information about the image returned.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ui.Image&gt; toImage(Rect bounds, { double pixelRatio = 1.0 }) async {\n  assert(bounds != null);\n  assert(pixelRatio != null);\n  final ui.SceneBuilder builder = ui.SceneBuilder();\n  final Matrix4 transform = Matrix4.translationValues(\n    (-bounds.left  - offset.dx) * pixelRatio,\n    (-bounds.top - offset.dy) * pixelRatio,\n    0.0,\n  );\n  transform.scale(pixelRatio, pixelRatio);\n  builder.pushTransform(transform.storage);\n  final ui.Scene scene = buildScene(builder);\n  try {\n    \/\/ Size is rounded up to the next pixel to make sure we don't clip off\n    \/\/ anything.\n    return await scene.toImage(\n      (pixelRatio * bounds.width).ceil(),\n      (pixelRatio * bounds.height).ceil(),\n    );\n  } finally {\n    scene.dispose();\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/OffsetLayer\/toImage.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:ui.Image>",
            "name": "toImage",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.OffsetLayer",
            "params": [
                {
                    "name": "bounds",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "pixelRatio",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Offset from parent in the parent's coordinate system.<\/p>\n<p>The scene must be explicitly recomposited after this property is changed\n(as described at <a href=\"rendering\/Layer-class.html\">Layer<\/a>).<\/p>\n<p>The <a href=\"rendering\/OffsetLayer\/offset.html\">offset<\/a> property must be non-null before the compositing phase of the\npipeline.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get offset =&gt; _offset;<\/code><\/pre>\n        ",
            "href": "rendering\/OffsetLayer\/offset.html",
            "name": "offset",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "memberOf": "rendering.OffsetLayer",
            "params": []
        }
    ]
}