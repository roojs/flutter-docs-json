{
    "desc": "<p>A curve that is 0.0 until <a href=\"animation\/Interval\/begin.html\">begin<\/a>, then curved (according to <a href=\"animation\/Interval\/curve.html\">curve<\/a> from\n0.0 to 1.0 at <a href=\"animation\/Interval\/end.html\">end<\/a>, then 1.0.<\/p>\n<p>An <a href=\"animation\/Interval-class.html\">Interval<\/a> can be used to delay an animation. For example, a six second\nanimation that uses an <a href=\"animation\/Interval-class.html\">Interval<\/a> with its <a href=\"animation\/Interval\/begin.html\">begin<\/a> set to 0.5 and its <a href=\"animation\/Interval\/end.html\">end<\/a>\nset to 1.0 will essentially become a three-second animation that starts\nthree seconds later.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_interval.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n    ",
    "dtype": "class",
    "example": "",
    "href": "animation\/Interval-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "animation",
    "name": "animation.Interval",
    "shortname": "Interval",
    "extends": [
        "animation.Curve",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an interval curve.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Interval(this.begin, this.end, { this.curve = Curves.linear })\n  : assert(begin != null),\n    assert(end != null),\n    assert(curve != null);<\/code><\/pre>\n    ",
            "href": "animation\/Interval\/Interval.html",
            "isDeprecated": false,
            "type": "",
            "name": "Interval",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "animation.Interval",
            "params": [
                {
                    "name": "begin",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "curve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (curve is! _Linear)\n    return '$runtimeType($begin\\u22EF$end)\\u27A9$curve';\n  return '$runtimeType($begin\\u22EF$end)';\n}<\/code><\/pre>\n    ",
            "href": "animation\/Interval\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Interval",
            "params": []
        },
        {
            "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble transformInternal(double t) {\n  assert(begin &gt;= 0.0);\n  assert(begin &lt;= 1.0);\n  assert(end &gt;= 0.0);\n  assert(end &lt;= 1.0);\n  assert(end &gt;= begin);\n  t = ((t - begin) \/ (end - begin)).clamp(0.0, 1.0);\n  if (t == 0.0 || t == 1.0)\n    return t;\n  return curve.transform(t);\n}<\/code><\/pre>\n    ",
            "href": "animation\/Interval\/transformInternal.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "transformInternal",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Interval",
            "params": [
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The largest value for which this interval is 0.0.<\/p>\n<p>From t=0.0 to t=<code>begin<\/code>, the interval's value is 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double begin\n\n<\/code><\/pre>\n        ",
            "href": "animation\/Interval\/begin.html",
            "name": "begin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "animation.Interval",
            "params": []
        },
        {
            "desc": "<p>The curve to apply between <a href=\"animation\/Interval\/begin.html\">begin<\/a> and <a href=\"animation\/Interval\/end.html\">end<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve curve\n\n<\/code><\/pre>\n        ",
            "href": "animation\/Interval\/curve.html",
            "name": "curve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "animation.Interval",
            "params": []
        },
        {
            "desc": "<p>The smallest value for which this interval is 1.0.<\/p>\n<p>From t=<code>end<\/code> to t=1.0, the interval's value is 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double end\n\n<\/code><\/pre>\n        ",
            "href": "animation\/Interval\/end.html",
            "name": "end",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "animation.Interval",
            "params": []
        }
    ]
}