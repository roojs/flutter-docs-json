{
    "desc": "<p>Implements the basic material design visual layout structure.<\/p>\n<p>This class provides APIs for showing drawers, snack bars, and bottom sheets.<\/p>\n<p>To display a snackbar or a persistent bottom sheet, obtain the\n<a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a> for the current <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> via <a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a> and use the\n<a href=\"material\/ScaffoldState\/showSnackBar.html\">ScaffoldState.showSnackBar<\/a> and <a href=\"material\/ScaffoldState\/showBottomSheet.html\">ScaffoldState.showBottomSheet<\/a> functions.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example shows a <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> with an <a href=\"material\/AppBar-class.html\">AppBar<\/a>, a <a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a> and a\n<a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>. The <a href=\"material\/Scaffold\/body.html\">body<\/a> is a <a href=\"widgets\/Text-class.html\">Text<\/a> placed in a <a href=\"widgets\/Center-class.html\">Center<\/a> in order\nto center the text within the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> and the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> is\ncentered and docked within the <a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a> using\n<a href=\"material\/FloatingActionButtonLocation\/centerDocked-constant.html\">FloatingActionButtonLocation.centerDocked<\/a>. The <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> is\nconnected to a callback that increments a counter.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int _count = 0;\n\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Sample Code'),\n    ),\n    body: Center(\n      child: Text('You have pressed the button $_count times.'),\n    ),\n    bottomNavigationBar: BottomAppBar(\n      child: Container(height: 50.0,),\n    ),\n    floatingActionButton: FloatingActionButton(\n      onPressed: () =&gt; setState(() {\n        _count++;\n      }),\n      tooltip: 'Increment Counter',\n      child: Icon(Icons.add),\n    ),\n    floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.Scaffold.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.Scaffold.1\n\n\/\/ This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a\n\/\/ [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order\n\/\/ to center the text within the [Scaffold] and the [FloatingActionButton] is\n\/\/ centered and docked within the [BottomAppBar] using\n\/\/ [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is\n\/\/ connected to a callback that increments a counter.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatefulWidget(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  int _count = 0;\n\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sample Code'),\n      ),\n      body: Center(\n        child: Text('You have pressed the button $_count times.'),\n      ),\n      bottomNavigationBar: BottomAppBar(\n        child: Container(\n          height: 50.0,\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () =&gt; setState(() {\n              _count++;\n            }),\n        tooltip: 'Increment Counter',\n        child: Icon(Icons.add),\n      ),\n      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h2 id=\"scaffold-layout-the-keyboard-and-display-notches\">Scaffold layout, the keyboard, and display \"notches\"<\/h2>\n<p>The scaffold will expand to fill the available space. That usually\nmeans that it will occupy its entire window or device screen. When\nthe device's keyboard appears the Scaffold's ancestor <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>\nwidget's <a href=\"widgets\/MediaQueryData\/viewInsets.html\">MediaQueryData.viewInsets<\/a> changes and the Scaffold will\nbe rebuilt. By default the scaffold's <a href=\"material\/Scaffold\/body.html\">body<\/a> is resized to make\nroom for the keyboard. To prevent the resize set\n<a href=\"material\/Scaffold\/resizeToAvoidBottomInset.html\">resizeToAvoidBottomInset<\/a> to false. In either case the focused\nwidget will be scrolled into view if it's within a scrollable\ncontainer.<\/p>\n<p>The <a href=\"widgets\/MediaQueryData\/padding.html\">MediaQueryData.padding<\/a> value defines areas that might\nnot be completely visible, like the display \"notch\" on the iPhone\nX. The scaffold's <a href=\"material\/Scaffold\/body.html\">body<\/a> is not inset by this padding value\nalthough an <a href=\"material\/Scaffold\/appBar.html\">appBar<\/a> or <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> will typically\ncause the body to avoid the padding. The <a href=\"widgets\/SafeArea-class.html\">SafeArea<\/a>\nwidget can be used within the scaffold's body to avoid areas\nlike display notches.<\/p>\n<h2 id=\"troubleshooting\">Troubleshooting<\/h2>\n<h3 id=\"nested-scaffolds\">Nested Scaffolds<\/h3>\n<p>The Scaffold was designed to be the single top level container for\na <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> and it's typically not necessary to nest\nscaffolds. For example in a tabbed UI, where the\n<a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> is a <a href=\"material\/TabBar-class.html\">TabBar<\/a> and the body is a\n<a href=\"material\/TabBarView-class.html\">TabBarView<\/a>, you might be tempted to make each tab bar view a\nscaffold with a differently titled AppBar. It would be better to add a\nlistener to the <a href=\"material\/TabController-class.html\">TabController<\/a> that updates the AppBar.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nAdd a listener to the app's tab controller so that the <a href=\"material\/AppBar-class.html\">AppBar<\/a> title of the\napp's one and only scaffold is reset each time a new tab is selected.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">TabController(vsync: tickerProvider, length: tabCount)..addListener(() {\n  if (!tabController.indexIsChanging) {\n    setState(() {\n      \/\/ Rebuild the enclosing scaffold with a new AppBar title\n      appBarTitle = 'Tab ${tabController.index}';\n    });\n  }\n})<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Although there are some use cases, like a presentation app that\nshows embedded flutter content, where nested scaffolds are\nappropriate, it's best to avoid nesting scaffolds.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/AppBar-class.html\">AppBar<\/a>, which is a horizontal bar typically shown at the top of an app\nusing the <a href=\"material\/Scaffold\/appBar.html\">appBar<\/a> property.<\/li>\n<li>\n<a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a>, which is a horizontal bar typically shown at the bottom\nof an app using the <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> property.<\/li>\n<li>\n<a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>, which is a circular button typically shown in the\nbottom right corner of the app using the <a href=\"material\/Scaffold\/floatingActionButton.html\">floatingActionButton<\/a> property.<\/li>\n<li>\n<a href=\"material\/Drawer-class.html\">Drawer<\/a>, which is a vertical panel that is typically displayed to the\nleft of the body (and often hidden on phones) using the <a href=\"material\/Scaffold\/drawer.html\">drawer<\/a>\nproperty.<\/li>\n<li>\n<a href=\"material\/BottomNavigationBar-class.html\">BottomNavigationBar<\/a>, which is a horizontal array of buttons typically\nshown along the bottom of the app using the <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a>\nproperty.<\/li>\n<li>\n<a href=\"material\/SnackBar-class.html\">SnackBar<\/a>, which is a temporary notification typically shown near the\nbottom of the app using the <a href=\"material\/ScaffoldState\/showSnackBar.html\">ScaffoldState.showSnackBar<\/a> method.<\/li>\n<li>\n<a href=\"material\/BottomSheet-class.html\">BottomSheet<\/a>, which is an overlay typically shown near the bottom of the\napp. A bottom sheet can either be persistent, in which case it is shown\nusing the <a href=\"material\/ScaffoldState\/showBottomSheet.html\">ScaffoldState.showBottomSheet<\/a> method, or modal, in which case\nit is shown using the <a href=\"material\/showModalBottomSheet.html\">showModalBottomSheet<\/a> function.<\/li>\n<li>\n<a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a>, which is the state associated with this widget.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/layout\/responsive-layout-grid.html\">material.io\/design\/layout\/responsive-layout-grid.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Scaffold-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Scaffold",
    "shortname": "Scaffold",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "material.ScaffoldState"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a visual scaffold for material design widgets.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Scaffold({\n  Key key,\n  this.appBar,\n  this.body,\n  this.floatingActionButton,\n  this.floatingActionButtonLocation,\n  this.floatingActionButtonAnimator,\n  this.persistentFooterButtons,\n  this.drawer,\n  this.endDrawer,\n  this.bottomNavigationBar,\n  this.bottomSheet,\n  this.backgroundColor,\n  this.resizeToAvoidBottomPadding,\n  this.resizeToAvoidBottomInset,\n  this.primary = true,\n  this.drawerDragStartBehavior = DragStartBehavior.start,\n  this.extendBody = false,\n}) : assert(primary != null),\n     assert(extendBody != null),\n     assert(drawerDragStartBehavior != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Scaffold\/Scaffold.html",
            "isDeprecated": false,
            "type": "",
            "name": "Scaffold",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Scaffold",
            "params": [
                {
                    "name": "appBar",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.PreferredSizeWidget"
                },
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "body",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "bottomNavigationBar",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "bottomSheet",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "drawer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "drawerDragStartBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "endDrawer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "extendBody",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "floatingActionButton",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "floatingActionButtonAnimator",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.FloatingActionButtonAnimator"
                },
                {
                    "name": "floatingActionButtonLocation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.FloatingActionButtonLocation"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "persistentFooterButtons",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "primary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "resizeToAvoidBottomInset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "resizeToAvoidBottomPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/Scaffold\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nScaffoldState createState() =&gt; ScaffoldState();<\/code><\/pre>\n    ",
            "href": "material\/Scaffold\/createState.html",
            "isDeprecated": false,
            "type": "material.ScaffoldState",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> for the <a href=\"material\/ScaffoldGeometry-class.html\">ScaffoldGeometry<\/a> for the closest\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a> ancestor of the given context.<\/p>\n<p>The <a href=\"foundation\/ValueListenable\/value.html\">ValueListenable.value<\/a> is only available at paint time.<\/p>\n<p>Notifications are guaranteed to be sent before the first paint pass\nwith the new geometry, but there is no guarantee whether a build or\nlayout passes are going to happen between the notification and the next\npaint pass.<\/p>\n<p>The closest <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> ancestor for the context might change, e.g when\nan element is moved from one scaffold to another. For <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>s\nusing this listenable, a change of the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> ancestor will\ntrigger a <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>.<\/p>\n<p>A typical pattern for listening to the scaffold geometry would be to\ncall <a href=\"material\/Scaffold\/geometryOf.html\">Scaffold.geometryOf<\/a> in <a href=\"widgets\/State\/didChangeDependencies.html\">State.didChangeDependencies<\/a>, compare the\nreturn value with the previous listenable, if it has changed, unregister\nthe listener, and register a listener to the new <a href=\"material\/ScaffoldGeometry-class.html\">ScaffoldGeometry<\/a>\nlistenable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ValueListenable&lt;ScaffoldGeometry&gt; geometryOf(BuildContext context) {\n  final _ScaffoldScope scaffoldScope = context.inheritFromWidgetOfExactType(_ScaffoldScope);\n  if (scaffoldScope == null)\n    throw FlutterError(\n      'Scaffold.geometryOf() called with a context that does not contain a Scaffold.\\n'\n      'This usually happens when the context provided is from the same StatefulWidget as that '\n      'whose build function actually creates the Scaffold widget being sought.\\n'\n      'There are several ways to avoid this problem. The simplest is to use a Builder to get a '\n      'context that is \"under\" the Scaffold. For an example of this, please see the '\n      'documentation for Scaffold.of():\\n'\n      '  https:\/\/docs.flutter.io\/flutter\/material\/Scaffold\/of.html\\n'\n      'A more efficient solution is to split your build function into several widgets. This '\n      'introduces a new context from which you can obtain the Scaffold. In this solution, '\n      'you would have an outer widget that creates the Scaffold populated by instances of '\n      'your new inner widgets, and then in these inner widgets you would use Scaffold.geometryOf().\\n'\n      'The context used was:\\n'\n      '  $context'\n    );\n\n  return scaffoldScope.geometryNotifier;\n}<\/code><\/pre>\n    ",
            "href": "material\/Scaffold\/geometryOf.html",
            "isDeprecated": false,
            "type": "foundation.ValueListenable<material.ScaffoldGeometry>",
            "name": "geometryOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Scaffold",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Whether the Scaffold that most tightly encloses the given context has a\ndrawer.<\/p>\n<p>If this is being used during a build (for example to decide whether to\nshow an \"open drawer\" button), set the <code>registerForUpdates<\/code> argument to\ntrue. This will then set up an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> relationship with the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a> so that the client widget gets rebuilt whenever the <a href=\"material\/Scaffold\/hasDrawer.html\">hasDrawer<\/a>\nvalue changes.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a>, which provides access to the <a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a> object as a\nwhole, from which you can show snackbars, bottom sheets, and so forth.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool hasDrawer(BuildContext context, { bool registerForUpdates = true }) {\n  assert(registerForUpdates != null);\n  assert(context != null);\n  if (registerForUpdates) {\n    final _ScaffoldScope scaffold = context.inheritFromWidgetOfExactType(_ScaffoldScope);\n    return scaffold?.hasDrawer ?? false;\n  } else {\n    final ScaffoldState scaffold = context.ancestorStateOfType(const TypeMatcher&lt;ScaffoldState&gt;());\n    return scaffold?.hasDrawer ?? false;\n  }\n}<\/code><\/pre>\n    ",
            "href": "material\/Scaffold\/hasDrawer.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hasDrawer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Scaffold",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "registerForUpdates",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>The state from the closest instance of this class that encloses the given context.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nTypical usage of the <a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a> function is to call it from within the\n<code>build<\/code> method of a child of a <a href=\"material\/Scaffold-class.html\">Scaffold<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">import 'package:flutter\/material.dart';\n\n\/\/ ...\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/ ...\n\nclass MyApp extends StatelessWidget {\n  \/\/ This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Code Sample for Scaffold.of.',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: MyScaffoldBody(),\n        appBar: AppBar(title: Text('Scaffold.of Example')),\n      ),\n      color: Colors.white,\n    );\n  }\n}\n\n\/\/ ...\n\nclass MyScaffoldBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: RaisedButton(\n        child: Text('SHOW A SNACKBAR'),\n        onPressed: () {\n          Scaffold.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Have a snack!'),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.Scaffold.of.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.Scaffold.of.1\n\n\/\/ Typical usage of the [Scaffold.of] function is to call it from within the\n\/\/ `build` method of a child of a [Scaffold].\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  \/\/ This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Code Sample for Scaffold.of.',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: MyScaffoldBody(),\n        appBar: AppBar(title: Text('Scaffold.of Example')),\n      ),\n      color: Colors.white,\n    );\n  }\n}\n\nclass MyScaffoldBody extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: RaisedButton(\n        child: Text('SHOW A SNACKBAR'),\n        onPressed: () {\n          Scaffold.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Have a snack!'),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nWhen the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> is actually created in the same <code>build<\/code> function, the\n<code>context<\/code> argument to the <code>build<\/code> function can't be used to find the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a> (since it's \"above\" the widget being returned in the widget\ntree). In such cases, the following technique with a <a href=\"widgets\/Builder-class.html\">Builder<\/a> can be used\nto provide a new scope with a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> that is \"under\" the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Demo')\n    ),\n    body: Builder(\n      \/\/ Create an inner BuildContext so that the onPressed methods\n      \/\/ can refer to the Scaffold with Scaffold.of().\n      builder: (BuildContext context) {\n        return Center(\n          child: RaisedButton(\n            child: Text('SHOW A SNACKBAR'),\n            onPressed: () {\n              Scaffold.of(context).showSnackBar(SnackBar(\n                content: Text('Have a snack!'),\n              ));\n            },\n          ),\n        );\n      },\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.Scaffold.of.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.Scaffold.of.2\n\n\/\/ When the [Scaffold] is actually created in the same `build` function, the\n\/\/ `context` argument to the `build` function can't be used to find the\n\/\/ [Scaffold] (since it's \"above\" the widget being returned in the widget\n\/\/ tree). In such cases, the following technique with a [Builder] can be used\n\/\/ to provide a new scope with a [BuildContext] that is \"under\" the\n\/\/ [Scaffold]:\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatelessWidget(),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Demo')),\n      body: Builder(\n        \/\/ Create an inner BuildContext so that the onPressed methods\n        \/\/ can refer to the Scaffold with Scaffold.of().\n        builder: (BuildContext context) {\n          return Center(\n            child: RaisedButton(\n              child: Text('SHOW A SNACKBAR'),\n              onPressed: () {\n                Scaffold.of(context).showSnackBar(SnackBar(\n                  content: Text('Have a snack!'),\n                ));\n              },\n            ),\n          );\n        },\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>A more efficient solution is to split your build function into several\nwidgets. This introduces a new context from which you can obtain the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>. In this solution, you would have an outer widget that creates\nthe <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> populated by instances of your new inner widgets, and then\nin these inner widgets you would use <a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a>.<\/p>\n<p>A less elegant but more expedient solution is assign a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> to the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, then use the <code>key.currentState<\/code> property to obtain the\n<a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a> rather than using the <a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a> function.<\/p>\n<p>If there is no <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> in scope, then this will throw an exception.\nTo return null if there is no <a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, then pass <code>nullOk: true<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ScaffoldState of(BuildContext context, { bool nullOk = false }) {\n  assert(nullOk != null);\n  assert(context != null);\n  final ScaffoldState result = context.ancestorStateOfType(const TypeMatcher&lt;ScaffoldState&gt;());\n  if (nullOk || result != null)\n    return result;\n  throw FlutterError(\n    'Scaffold.of() called with a context that does not contain a Scaffold.\\n'\n    'No Scaffold ancestor could be found starting from the context that was passed to Scaffold.of(). '\n    'This usually happens when the context provided is from the same StatefulWidget as that '\n    'whose build function actually creates the Scaffold widget being sought.\\n'\n    'There are several ways to avoid this problem. The simplest is to use a Builder to get a '\n    'context that is \"under\" the Scaffold. For an example of this, please see the '\n    'documentation for Scaffold.of():\\n'\n    '  https:\/\/docs.flutter.io\/flutter\/material\/Scaffold\/of.html\\n'\n    'A more efficient solution is to split your build function into several widgets. This '\n    'introduces a new context from which you can obtain the Scaffold. In this solution, '\n    'you would have an outer widget that creates the Scaffold populated by instances of '\n    'your new inner widgets, and then in these inner widgets you would use Scaffold.of().\\n'\n    'A less elegant but more expedient solution is assign a GlobalKey to the Scaffold, '\n    'then use the key.currentState property to obtain the ScaffoldState rather than '\n    'using the Scaffold.of() function.\\n'\n    'The context used was:\\n'\n    '  $context'\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Scaffold\/of.html",
            "isDeprecated": false,
            "type": "material.ScaffoldState",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Scaffold",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "nullOk",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>An app bar to display at the top of the scaffold.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PreferredSizeWidget appBar\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/appBar.html",
            "name": "appBar",
            "isDeprecated": false,
            "type": "widgets.PreferredSizeWidget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>The color of the <a href=\"material\/Material-class.html\">Material<\/a> widget that underlies the entire Scaffold.<\/p>\n<p>The theme's <a href=\"material\/ThemeData\/scaffoldBackgroundColor.html\">ThemeData.scaffoldBackgroundColor<\/a> by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>The primary content of the scaffold.<\/p>\n<p>Displayed below the <a href=\"material\/Scaffold\/appBar.html\">appBar<\/a>, above the bottom of the ambient\n<a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>'s <a href=\"widgets\/MediaQueryData\/viewInsets.html\">MediaQueryData.viewInsets<\/a>, and behind the\n<a href=\"material\/Scaffold\/floatingActionButton.html\">floatingActionButton<\/a> and <a href=\"material\/Scaffold\/drawer.html\">drawer<\/a>. If <a href=\"material\/Scaffold\/resizeToAvoidBottomInset.html\">resizeToAvoidBottomInset<\/a> is\nfalse then the body is not resized when the onscreen keyboard appears,\ni.e. it is not inset by <code>viewInsets.bottom<\/code>.<\/p>\n<p>The widget in the body of the scaffold is positioned at the top-left of\nthe available space between the app bar and the bottom of the scaffold. To\ncenter this widget instead, consider putting it in a <a href=\"widgets\/Center-class.html\">Center<\/a> widget and\nhaving that be the body. To expand this widget instead, consider\nputting it in a <a href=\"widgets\/SizedBox\/SizedBox.expand.html\">SizedBox.expand<\/a>.<\/p>\n<p>If you have a column of widgets that should normally fit on the screen,\nbut may overflow and would in such cases need to scroll, consider using a\n<a href=\"widgets\/ListView-class.html\">ListView<\/a> as the body of the scaffold. This is also a good choice for\nthe case where your body is a scrollable list.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget body\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/body.html",
            "name": "body",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>A bottom navigation bar to display at the bottom of the scaffold.<\/p>\n<p>Snack bars slide from underneath the bottom navigation bar while bottom\nsheets are stacked on top.<\/p>\n<p>The <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> is rendered below the <a href=\"material\/Scaffold\/persistentFooterButtons.html\">persistentFooterButtons<\/a>\nand the <a href=\"material\/Scaffold\/body.html\">body<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget bottomNavigationBar\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/bottomNavigationBar.html",
            "name": "bottomNavigationBar",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>The persistent bottom sheet to display.<\/p>\n<p>A persistent bottom sheet shows information that supplements the primary\ncontent of the app. A persistent bottom sheet remains visible even when\nthe user interacts with other parts of the app.<\/p>\n<p>A closely related widget is a modal bottom sheet, which is an alternative\nto a menu or a dialog and prevents the user from interacting with the rest\nof the app. Modal bottom sheets can be created and displayed with the\n<a href=\"material\/showModalBottomSheet.html\">showModalBottomSheet<\/a> function.<\/p>\n<p>Unlike the persistent bottom sheet displayed by <a href=\"material\/showBottomSheet.html\">showBottomSheet<\/a>\nthis bottom sheet is not a <a href=\"widgets\/LocalHistoryEntry-class.html\">LocalHistoryEntry<\/a> and cannot be dismissed\nwith the scaffold appbar's back button.<\/p>\n<p>If a persistent bottom sheet created with <a href=\"material\/showBottomSheet.html\">showBottomSheet<\/a> is already\nvisible, it must be closed before building the Scaffold with a new\n<a href=\"material\/Scaffold\/bottomSheet.html\">bottomSheet<\/a>.<\/p>\n<p>The value of <a href=\"material\/Scaffold\/bottomSheet.html\">bottomSheet<\/a> can be any widget at all. It's unlikely to\nactually be a <a href=\"material\/BottomSheet-class.html\">BottomSheet<\/a>, which is used by the implementations of\n<a href=\"material\/showBottomSheet.html\">showBottomSheet<\/a> and <a href=\"material\/showModalBottomSheet.html\">showModalBottomSheet<\/a>. Typically it's a widget\nthat includes <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/showBottomSheet.html\">showBottomSheet<\/a>, which displays a bottom sheet as a route that can\nbe dismissed with the scaffold's back button.<\/li>\n<li>\n<a href=\"material\/showModalBottomSheet.html\">showModalBottomSheet<\/a>, which displays a modal bottom sheet.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget bottomSheet\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/bottomSheet.html",
            "name": "bottomSheet",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>A panel displayed to the side of the <a href=\"material\/Scaffold\/body.html\">body<\/a>, often hidden on mobile\ndevices. Swipes in from either left-to-right (<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>) or\nright-to-left (<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>)<\/p>\n<p>In the uncommon case that you wish to open the drawer manually, use the\n<a href=\"material\/ScaffoldState\/openDrawer.html\">ScaffoldState.openDrawer<\/a> function.<\/p>\n<p>Typically a <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget drawer\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/drawer.html",
            "name": "drawer",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, the drag behavior used for opening\nand closing a drawer will begin upon the detection of a drag gesture. If\nset to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first\ndetected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/DragGestureRecognizer\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior drawerDragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/drawerDragStartBehavior.html",
            "name": "drawerDragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>A panel displayed to the side of the <a href=\"material\/Scaffold\/body.html\">body<\/a>, often hidden on mobile\ndevices. Swipes in from right-to-left (<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>) or\nleft-to-right (<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>)<\/p>\n<p>In the uncommon case that you wish to open the drawer manually, use the\n<a href=\"material\/ScaffoldState\/openEndDrawer.html\">ScaffoldState.openEndDrawer<\/a> function.<\/p>\n<p>Typically a <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget endDrawer\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/endDrawer.html",
            "name": "endDrawer",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>If true, and <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> or <a href=\"material\/Scaffold\/persistentFooterButtons.html\">persistentFooterButtons<\/a>\nis specified, then the <a href=\"material\/Scaffold\/body.html\">body<\/a> extends to the bottom of the Scaffold,\ninstead of only extending to the top of the <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a>\nor the <a href=\"material\/Scaffold\/persistentFooterButtons.html\">persistentFooterButtons<\/a>.<\/p>\n<p>If true, a <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> widget whose bottom padding matches the\nthe height of the <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> will be added above the\nscaffold's <a href=\"material\/Scaffold\/body.html\">body<\/a>.<\/p>\n<p>This property is often useful when the <a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> has\na non-rectangular shape, like <a href=\"painting\/CircularNotchedRectangle-class.html\">CircularNotchedRectangle<\/a>, which\nadds a <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> sized notch to the top edge of the bar.\nIn this case specifying <code>extendBody: true<\/code> ensures that that scaffold's\nbody will be visible through the bottom navigation bar's notch.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool extendBody\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/extendBody.html",
            "name": "extendBody",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>A button displayed floating above <a href=\"material\/Scaffold\/body.html\">body<\/a>, in the bottom right corner.<\/p>\n<p>Typically a <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget floatingActionButton\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/floatingActionButton.html",
            "name": "floatingActionButton",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>Animator to move the <a href=\"material\/Scaffold\/floatingActionButton.html\">floatingActionButton<\/a> to a new <a href=\"material\/Scaffold\/floatingActionButtonLocation.html\">floatingActionButtonLocation<\/a>.<\/p>\n<p>If null, the <a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a> will use the default animator, <a href=\"material\/FloatingActionButtonAnimator\/scaling-constant.html\">FloatingActionButtonAnimator.scaling<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FloatingActionButtonAnimator floatingActionButtonAnimator\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/floatingActionButtonAnimator.html",
            "name": "floatingActionButtonAnimator",
            "isDeprecated": false,
            "type": "material.FloatingActionButtonAnimator",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>Responsible for determining where the <a href=\"material\/Scaffold\/floatingActionButton.html\">floatingActionButton<\/a> should go.<\/p>\n<p>If null, the <a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a> will use the default location, <a href=\"material\/FloatingActionButtonLocation\/endFloat-constant.html\">FloatingActionButtonLocation.endFloat<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FloatingActionButtonLocation floatingActionButtonLocation\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/floatingActionButtonLocation.html",
            "name": "floatingActionButtonLocation",
            "isDeprecated": false,
            "type": "material.FloatingActionButtonLocation",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>A set of buttons that are displayed at the bottom of the scaffold.<\/p>\n<p>Typically this is a list of <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> widgets. These buttons are\npersistently visible, even if the <a href=\"material\/Scaffold\/body.html\">body<\/a> of the scaffold scrolls.<\/p>\n<p>These widgets will be wrapped in a <a href=\"material\/ButtonBar-class.html\">ButtonBar<\/a>.<\/p>\n<p>The <a href=\"material\/Scaffold\/persistentFooterButtons.html\">persistentFooterButtons<\/a> are rendered above the\n<a href=\"material\/Scaffold\/bottomNavigationBar.html\">bottomNavigationBar<\/a> but below the <a href=\"material\/Scaffold\/body.html\">body<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; persistentFooterButtons\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/persistentFooterButtons.html",
            "name": "persistentFooterButtons",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.Widget>",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>Whether this scaffold is being displayed at the top of the screen.<\/p>\n<p>If true then the height of the <a href=\"material\/Scaffold\/appBar.html\">appBar<\/a> will be extended by the height\nof the screen's status bar, i.e. the top padding for <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>.<\/p>\n<p>The default value of this property, like the default value of\n<a href=\"material\/Scaffold\/primary.html\">AppBar.primary<\/a>, is true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool primary\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/primary.html",
            "name": "primary",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>If true the <a href=\"material\/Scaffold\/body.html\">body<\/a> and the scaffold's floating widgets should size\nthemselves to avoid the onscreen keyboard whose height is defined by the\nambient <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>'s <a href=\"widgets\/MediaQueryData\/viewInsets.html\">MediaQueryData.viewInsets<\/a> <code>bottom<\/code> property.<\/p>\n<p>For example, if there is an onscreen keyboard displayed above the\nscaffold, the body can be resized to avoid overlapping the keyboard, which\nprevents widgets inside the body from being obscured by the keyboard.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool resizeToAvoidBottomInset\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/resizeToAvoidBottomInset.html",
            "name": "resizeToAvoidBottomInset",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "material.Scaffold",
            "params": []
        },
        {
            "desc": "<p>This flag is deprecated, please use <a href=\"material\/Scaffold\/resizeToAvoidBottomInset.html\">resizeToAvoidBottomInset<\/a>\ninstead.<\/p>\n<p>Originally the name referred <a href=\"widgets\/MediaQueryData\/padding.html\">MediaQueryData.padding<\/a>. Now it refers\n<a href=\"widgets\/MediaQueryData\/viewInsets.html\">MediaQueryData.viewInsets<\/a>, so using <a href=\"material\/Scaffold\/resizeToAvoidBottomInset.html\">resizeToAvoidBottomInset<\/a>\nshould be clearer to readers.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool resizeToAvoidBottomPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/Scaffold\/resizeToAvoidBottomPadding.html",
            "name": "resizeToAvoidBottomPadding",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "material.Scaffold",
            "params": []
        }
    ]
}