{
    "desc": "<p>A <a href=\"dart-convert\/JsonCodec-class.html\">JsonCodec<\/a> encodes JSON objects to strings and decodes strings to\nJSON objects.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>var encoded = json.encode([1, 2, { \"a\": null }]);\nvar decoded = json.decode('[\"foo\", { \"bar\": 499 }]');\n<\/code><\/pre>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-convert\/JsonCodec-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:convert",
    "name": "dart:convert.JsonCodec",
    "shortname": "JsonCodec",
    "extends": [
        "dart:core.String",
        "dart:core.Object",
        "dart:convert.Codec",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <code>JsonCodec<\/code> with the given reviver and encoding function.<\/p>\n<p>The <code>reviver<\/code> function is called during decoding. It is invoked once for\neach object or list property that has been parsed.\nThe <code>key<\/code> argument is either the integer list index for a list property,\nthe string map key for object properties, or <code>null<\/code> for the final result.<\/p>\n<p>If <code>reviver<\/code> is omitted, it defaults to returning the value argument.<\/p>\n<p>The <code>toEncodable<\/code> function is used during encoding. It is invoked for\nvalues that are not directly encodable to a string (a value that is not a\nnumber, boolean, string, null, list or a map with string keys). The\nfunction must return an object that is directly encodable. The elements of\na returned list and values of a returned map do not need to be directly\nencodable, and if they aren't, <code>toEncodable<\/code> will be used on them as well.\nPlease notice that it is possible to cause an infinite recursive regress\nin this way, by effectively creating an infinite data structure through\nrepeated call to <code>toEncodable<\/code>.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to a function that returns the\nresult of calling <code>.toJson()<\/code> on the unencodable object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonCodec({reviver(Object key, Object value), toEncodable(var object)})\n    : _reviver = reviver,\n      _toEncodable = toEncodable;<\/code><\/pre>\n    ",
            "href": "dart-convert\/JsonCodec\/JsonCodec.html",
            "isDeprecated": false,
            "type": "",
            "name": "JsonCodec",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:convert.JsonCodec",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "object",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<dynamic>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Parses the string and returns the resulting Json object.<\/p>\n<p>The optional <code>reviver<\/code> function is called once for each object or list\nproperty that has been parsed during decoding. The <code>key<\/code> argument is either\nthe integer list index for a list property, the string map key for object\nproperties, or <code>null<\/code> for the final result.<\/p>\n<p>The default <code>reviver<\/code> (when not provided) is the identity function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic decode(String source, {reviver(Object key, Object value)}) {\n  reviver ??= _reviver;\n  if (reviver == null) return decoder.convert(source);\n  return JsonDecoder(reviver).convert(source);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/JsonCodec\/decode.html",
            "isDeprecated": false,
            "type": "<dynamic>",
            "name": "decode",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.JsonCodec",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "source",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Converts <code>value<\/code> to a JSON string.<\/p>\n<p>If value contains objects that are not directly encodable to a JSON\nstring (a value that is not a number, boolean, string, null, list or a map\nwith string keys), the <code>toEncodable<\/code> function is used to convert it to an\nobject that must be directly encodable.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to a function that returns the\nresult of calling <code>.toJson()<\/code> on the unencodable object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String encode(Object value, {toEncodable(object)}) {\n  toEncodable ??= _toEncodable;\n  if (toEncodable == null) return encoder.convert(value);\n  return JsonEncoder(toEncodable).convert(value);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/JsonCodec\/encode.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "encode",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.JsonCodec",
            "params": [
                {
                    "name": "object",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>T<\/code> to <code>S<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">JsonDecoder get decoder {\n  if (_reviver == null) return const JsonDecoder();\n  return JsonDecoder(_reviver);\n}<\/code><\/pre>\n        ",
            "href": "dart-convert\/JsonCodec\/decoder.html",
            "name": "decoder",
            "isDeprecated": false,
            "type": "dart:convert.JsonDecoder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:convert.JsonCodec",
            "params": []
        },
        {
            "desc": "<p>Returns the encoder from <code>S<\/code> to <code>T<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">JsonEncoder get encoder {\n  if (_toEncodable == null) return const JsonEncoder();\n  return JsonEncoder(_toEncodable);\n}<\/code><\/pre>\n        ",
            "href": "dart-convert\/JsonCodec\/encoder.html",
            "name": "encoder",
            "isDeprecated": false,
            "type": "dart:convert.JsonEncoder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:convert.JsonCodec",
            "params": []
        }
    ]
}