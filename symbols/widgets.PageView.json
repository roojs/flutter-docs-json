{
    "desc": "<p>A scrollable list that works page by page.<\/p>\n<p>Each child of a page view is forced to be the same size as the viewport.<\/p>\n<p>You can use a <a href=\"widgets\/PageController-class.html\">PageController<\/a> to control which page is visible in the view.\nIn addition to being able to control the pixel offset of the content inside\nthe <a href=\"widgets\/PageView-class.html\">PageView<\/a>, a <a href=\"widgets\/PageController-class.html\">PageController<\/a> also lets you control the offset in terms\nof pages, which are increments of the viewport size.<\/p>\n<p>The <a href=\"widgets\/PageController-class.html\">PageController<\/a> can also be used to control the\n<a href=\"widgets\/PageController\/initialPage.html\">PageController.initialPage<\/a>, which determines which page is shown when the\n<a href=\"widgets\/PageView-class.html\">PageView<\/a> is first constructed, and the <a href=\"widgets\/PageController\/viewportFraction.html\">PageController.viewportFraction<\/a>,\nwhich determines the size of the pages as a fraction of the viewport size.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageController-class.html\">PageController<\/a>, which controls which page is visible in the view.<\/li>\n<li>\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>, when you need to make a single child scrollable.<\/li>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, for a scrollable list of boxes.<\/li>\n<li>\n<a href=\"widgets\/GridView-class.html\">GridView<\/a>, for a scrollable grid of boxes.<\/li>\n<li>\n<a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> and <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>, which can be used to watch\nthe scroll position without using a <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/PageView-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.PageView",
    "shortname": "PageView",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called whenever the page in the center of the viewport changes.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;int&gt; onPageChanged\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/onPageChanged.html",
            "isDeprecated": false,
            "type": "foundation.ValueChanged<dart:core.int>",
            "name": "onPageChanged",
            "memberOf": "widgets.PageView",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a scrollable list that works page by page from an explicit <a href=\"dart-core\/List-class.html\">List<\/a>\nof widgets.<\/p>\n<p>This constructor is appropriate for page views with a small number of\nchildren because constructing the <a href=\"dart-core\/List-class.html\">List<\/a> requires doing work for every\nchild that could possibly be displayed in the page view, instead of just\nthose children that are actually visible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PageView({\n  Key key,\n  this.scrollDirection = Axis.horizontal,\n  this.reverse = false,\n  PageController controller,\n  this.physics,\n  this.pageSnapping = true,\n  this.onPageChanged,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : controller = controller ?? _defaultPageController,\n     childrenDelegate = SliverChildListDelegate(children),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/PageView\/PageView.html",
            "isDeprecated": false,
            "type": "",
            "name": "PageView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.PageView",
            "params": [
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "controller",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.PageController"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onPageChanged",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.int>"
                },
                {
                    "name": "pageSnapping",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "physics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                },
                {
                    "name": "reverse",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "scrollDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/PageView\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_PageViewState createState() =&gt; _PageViewState();<\/code><\/pre>\n    ",
            "href": "widgets\/PageView\/createState.html",
            "isDeprecated": false,
            "type": "<_PageViewState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.PageView",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>A delegate that provides the children for the <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n<p>The <a href=\"widgets\/PageView\/PageView.custom.html\">PageView.custom<\/a> constructor lets you specify this delegate\nexplicitly. The <a href=\"widgets\/PageView-class.html\">PageView<\/a> and <a href=\"widgets\/PageView\/PageView.builder.html\">PageView.builder<\/a> constructors create a\n<a href=\"widgets\/PageView\/childrenDelegate.html\">childrenDelegate<\/a> that wraps the given <a href=\"dart-core\/List-class.html\">List<\/a> and <a href=\"widgets\/IndexedWidgetBuilder.html\">IndexedWidgetBuilder<\/a>,\nrespectively.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliverChildDelegate childrenDelegate\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/childrenDelegate.html",
            "name": "childrenDelegate",
            "isDeprecated": false,
            "type": "widgets.SliverChildDelegate",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        },
        {
            "desc": "<p>An object that can be used to control the position to which this page\nview is scrolled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PageController controller\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/controller.html",
            "name": "controller",
            "isDeprecated": false,
            "type": "widgets.PageController",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/PageView\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        },
        {
            "desc": "<p>Set to false to disable page snapping, useful for custom scroll behavior.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool pageSnapping\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/pageSnapping.html",
            "name": "pageSnapping",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        },
        {
            "desc": "<p>How the page view should respond to user input.<\/p>\n<p>For example, determines how the page view continues to animate after the\nuser stops dragging the page view.<\/p>\n<p>The physics are modified to snap to page boundaries using\n<a href=\"widgets\/PageScrollPhysics-class.html\">PageScrollPhysics<\/a> prior to being used.<\/p>\n<p>Defaults to matching platform conventions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics physics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/physics.html",
            "name": "physics",
            "isDeprecated": false,
            "type": "widgets.ScrollPhysics",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        },
        {
            "desc": "<p>Whether the page view scrolls in the reading direction.<\/p>\n<p>For example, if the reading direction is left-to-right and\n<a href=\"widgets\/PageView\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then the page view scrolls from\nleft to right when <a href=\"widgets\/PageView\/reverse.html\">reverse<\/a> is false and from right to left when\n<a href=\"widgets\/PageView\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Similarly, if <a href=\"widgets\/PageView\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, then the page view\nscrolls from top to bottom when <a href=\"widgets\/PageView\/reverse.html\">reverse<\/a> is false and from bottom to top\nwhen <a href=\"widgets\/PageView\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool reverse\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/reverse.html",
            "name": "reverse",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        },
        {
            "desc": "<p>The axis along which the page view scrolls.<\/p>\n<p>Defaults to <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis scrollDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/PageView\/scrollDirection.html",
            "name": "scrollDirection",
            "isDeprecated": false,
            "type": "painting.Axis",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.PageView",
            "params": []
        }
    ]
}