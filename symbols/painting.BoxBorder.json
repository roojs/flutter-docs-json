{
    "desc": "<p>Base class for box borders that can paint as rectangles, circles, or rounded\nrectangles.<\/p>\n<p>This class is extended by <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> to provide\nconcrete versions of four-sided borders using different conventions for\nspecifying the sides.<\/p>\n<p>The only API difference that this class introduces over <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> is\nthat its <a href=\"painting\/BoxBorder\/paint.html\">paint<\/a> method takes additional arguments.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>, another way of describing a box's border.<\/li>\n<li>\n<a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>, another way of describing a circle border.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which uses a <a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a> to describe its borders.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/BoxBorder-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.BoxBorder",
    "shortname": "BoxBorder",
    "extends": [
        "painting.ShapeBorder",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BoxBorder();<\/code><\/pre>\n    ",
            "href": "painting\/BoxBorder\/BoxBorder.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.BoxBorder",
            "params": []
        },
        {
            "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxBorder add(ShapeBorder other, { bool reversed = false }) =&gt; null;<\/code><\/pre>\n    ",
            "href": "painting\/BoxBorder\/add.html",
            "isDeprecated": "0",
            "type": "painting.BoxBorder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxBorder",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "reversed",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { @required TextDirection textDirection }) {\n  assert(textDirection != null, 'The textDirection argument to $runtimeType.getInnerPath must not be null.');\n  return Path()\n    ..addRect(dimensions.resolve(textDirection).deflateRect(rect));\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxBorder\/getInnerPath.html",
            "isDeprecated": "0",
            "type": "dart:ui.Path",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxBorder",
            "params": [
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { @required TextDirection textDirection }) {\n  assert(textDirection != null, 'The textDirection argument to $runtimeType.getOuterPath must not be null.');\n  return Path()\n    ..addRect(rect);\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxBorder\/getOuterPath.html",
            "isDeprecated": "0",
            "type": "dart:ui.Path",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxBorder",
            "params": [
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two borders.<\/p>\n<p>If a border is null, it is treated as having four <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nborders.<\/p>\n<p>This supports interpolating between <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>\nobjects. If both objects are different types but both have sides on one or\nboth of their lateral edges (the two sides that aren't the top and bottom)\nother than <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>, then the sides are interpolated by reducing\n<code>a<\/code>'s lateral edges to <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a> over the first half of the\nanimation, and then bringing <code>b<\/code>'s lateral edges <em>from<\/em> <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nover the second half of the animation.<\/p>\n<p>For a more flexible approach, consider <a href=\"painting\/BoxBorder\/lerp.html\">ShapeBorder.lerp<\/a>, which would\ninstead <a href=\"painting\/BoxBorder\/add.html\">add<\/a> the two sets of sides and interpolate them simultaneously.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BoxBorder lerp(BoxBorder a, BoxBorder b, double t) {\n  assert(t != null);\n  if ((a is Border || a == null) &amp;&amp; (b is Border || b == null))\n    return Border.lerp(a, b, t);\n  if ((a is BorderDirectional || a == null) &amp;&amp; (b is BorderDirectional || b == null))\n    return BorderDirectional.lerp(a, b, t);\n  if (b is Border &amp;&amp; a is BorderDirectional) {\n    final BoxBorder c = b;\n    b = a;\n    a = c;\n    t = 1.0 - t;\n    \/\/ fall through to next case\n  }\n  if (a is Border &amp;&amp; b is BorderDirectional) {\n    if (b.start == BorderSide.none &amp;&amp; b.end == BorderSide.none) {\n      \/\/ The fact that b is a BorderDirectional really doesn't matter, it turns out.\n      return Border(\n        top: BorderSide.lerp(a.top, b.top, t),\n        right: BorderSide.lerp(a.right, BorderSide.none, t),\n        bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n        left: BorderSide.lerp(a.left, BorderSide.none, t),\n      );\n    }\n    if (a.left == BorderSide.none &amp;&amp; a.right == BorderSide.none) {\n      \/\/ The fact that a is a Border really doesn't matter, it turns out.\n      return BorderDirectional(\n        top: BorderSide.lerp(a.top, b.top, t),\n        start: BorderSide.lerp(BorderSide.none, b.start, t),\n        end: BorderSide.lerp(BorderSide.none, b.end, t),\n        bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n      );\n    }\n    \/\/ Since we have to swap a visual border for a directional one,\n    \/\/ we speed up the horizontal sides' transitions and switch from\n    \/\/ one mode to the other at t=0.5.\n    if (t &lt; 0.5) {\n      return Border(\n        top: BorderSide.lerp(a.top, b.top, t),\n        right: BorderSide.lerp(a.right, BorderSide.none, t * 2.0),\n        bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n        left: BorderSide.lerp(a.left, BorderSide.none, t * 2.0),\n      );\n    }\n    return BorderDirectional(\n      top: BorderSide.lerp(a.top, b.top, t),\n      start: BorderSide.lerp(BorderSide.none, b.start, (t - 0.5) * 2.0),\n      end: BorderSide.lerp(BorderSide.none, b.end, (t - 0.5) * 2.0),\n      bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n    );\n  }\n  throw FlutterError(\n    'BoxBorder.lerp can only interpolate Border and BorderDirectional classes.\\n'\n    'BoxBorder.lerp() was called with two objects of type ${a.runtimeType} and ${b.runtimeType}:\\n'\n    '  $a\\n'\n    '  $b\\n'\n    'However, only Border and BorderDirectional classes are supported by this method. '\n    'For a more general interpolation method, consider using ShapeBorder.lerp instead.'\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxBorder\/lerp.html",
            "isDeprecated": "0",
            "type": "painting.BoxBorder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxBorder",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.BoxBorder"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.BoxBorder"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>This is an extension of the <a href=\"painting\/BoxBorder\/paint.html\">ShapeBorder.paint<\/a> method. It allows\n<a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a> borders to be applied to different <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a>s and with\ndifferent <code>borderRadius<\/code> parameters, without changing the <a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a>\nobject itself.<\/p>\n<p>The <code>shape<\/code> argument specifies the <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a> to draw the border on.<\/p>\n<p>If the <code>shape<\/code> is specifies a rectangular box shape\n(<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>), then the <code>borderRadius<\/code> argument describes the\ncorners of the rectangle.<\/p>\n<p>The <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> and <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> methods do not know about the\n<code>shape<\/code> and <code>borderRadius<\/code> arguments.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/paintBorder.html\">paintBorder<\/a>, which is used if the border is not uniform.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  Canvas canvas,\n  Rect rect, {\n  TextDirection textDirection,\n  BoxShape shape = BoxShape.rectangle,\n  BorderRadius borderRadius,\n});<\/code><\/pre>\n    ",
            "href": "painting\/BoxBorder\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxBorder",
            "params": [
                {
                    "name": "borderRadius",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.BorderRadius"
                },
                {
                    "name": "canvas",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.BoxShape"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The bottom side of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide get bottom;<\/code><\/pre>\n        ",
            "href": "painting\/BoxBorder\/bottom.html",
            "isDeprecated": "0",
            "type": "painting.BorderSide",
            "memberOf": "painting.BoxBorder",
            "params": []
        },
        {
            "desc": "<p>Whether all four sides of the border are identical. Uniform borders are\ntypically more efficient to paint.<\/p>\n<p>A uniform border by definition has no text direction dependency and\ntherefore could be expressed as a <a href=\"painting\/Border-class.html\">Border<\/a>, even if it is currently a\n<a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. A uniform border can also be expressed as a\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isUniform;<\/code><\/pre>\n        ",
            "href": "painting\/BoxBorder\/isUniform.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "painting.BoxBorder",
            "params": []
        },
        {
            "desc": "<p>The top side of this border.<\/p>\n<p>This getter is available on both <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. If\n<a href=\"painting\/BoxBorder\/isUniform.html\">isUniform<\/a> is true, then this is the same style as all the other sides.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide get top;<\/code><\/pre>\n        ",
            "href": "painting\/BoxBorder\/top.html",
            "isDeprecated": "0",
            "type": "painting.BorderSide",
            "memberOf": "painting.BoxBorder",
            "params": []
        }
    ]
}