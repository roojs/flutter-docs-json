{
    "desc": "<p>A command element capable of holding both a raw and sanitized value.<\/p>\n<p>Instances of this type can be used in the <code>command<\/code> list of the\n<a href=\"package-process_process\/ProcessManager\/start.html\">ProcessManager.start<\/a>, <a href=\"package-process_process\/ProcessManager\/run.html\">ProcessManager.run<\/a>, and <a href=\"package-process_process\/ProcessManager\/runSync.html\">ProcessManager.runSync<\/a>\nmethods.<\/p>\n<p>Each command element has:<\/p>\n<ul>\n<li>A raw value, which is the value that should passed to the underlying\noperating system to invoke the process.<\/li>\n<li>A sanitized value, which is the value that's serialized when used with\n<a href=\"package-process_record_replay\/RecordingProcessManager-class.html\">RecordingProcessManager<\/a> and looked up in the replay log when used\nwith <a href=\"package-process_record_replay\/ReplayProcessManager-class.html\">ReplayProcessManager<\/a>. Sanitized values typically will remove\nuser-specific segments (such as the user's home directory) or random\nsegments (such as temporary file names). Sanitizing values allows you\nto guarantee determinism in your process invocation lookups, thus\nremoving flakiness in tests.<\/li>\n<\/ul>\n<p>This class implements <a href=\"package-process_record_replay\/CommandElement\/toString.html\">toString<\/a> to return the element's raw value, meaning\ninstances of this class can be passed directly to <a href=\"package-process_process\/LocalProcessManager-class.html\">LocalProcessManager<\/a>\nand will work as intended.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-process_record_replay\/CommandElement-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "record_replay",
    "name": "record_replay.CommandElement",
    "shortname": "CommandElement",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new command element with the specified <code>raw<\/code> value.<\/p>\n<p>If a <code>sanitizer<\/code> is specified, it will be used to generate this command\nelement's <a href=\"package-process_record_replay\/CommandElement\/sanitized.html\">sanitized<\/a> value. If it is unspecified, the raw value will be\nused as the sanitized value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CommandElement(this.raw, {CommandSanitizer sanitizer})\n    : _sanitizer = sanitizer;<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/CommandElement\/CommandElement.html",
            "isDeprecated": false,
            "type": "",
            "name": "CommandElement",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "record_replay.CommandElement",
            "params": [
                {
                    "name": "raw",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "sanitizer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "record_replay.CommandSanitizer"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; raw;<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/CommandElement\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.CommandElement",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>This command element's raw, unsanitized, value.<\/p>\n<p>This value is liable to contain non-deterministic segments, such as\nOS-generated temporary file names. It is suitable for passing to the\noperating system to invoke a process, but it is not suitable for\nrecord\/replay.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String raw\n\n<\/code><\/pre>\n        ",
            "href": "package-process_record_replay\/CommandElement\/raw.html",
            "name": "raw",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "record_replay.CommandElement",
            "params": []
        },
        {
            "desc": "<p>This command element's sanitized value.<\/p>\n<p>This value has been stripped of any non-deterministic segments, such as\nOS-generated temporary file names or user-specific values. It is suitable\nfor record\/replay, but it is not suitable for passing to the operating\nsystem to invoke a process.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get sanitized =&gt; _sanitizer == null ? raw : _sanitizer(raw);<\/code><\/pre>\n        ",
            "href": "package-process_record_replay\/CommandElement\/sanitized.html",
            "name": "sanitized",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "record_replay.CommandElement",
            "params": []
        }
    ]
}