{
    "name": "material.RefreshIndicator",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [
        {
            "name": "onRefresh",
            "type": "material.RefreshCallback",
            "desc": "<p>A function that's called when the user has dragged the refresh indicator\nfar enough to demonstrate that they want the app to refresh. The returned\n<a href=\"dart-async\/Future-class.html\">Future<\/a> must complete when the refresh operation is finished.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RefreshIndicator\/onRefresh.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RefreshCallback onRefresh\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "RefreshIndicator",
            "type": "",
            "desc": "<p>Creates a refresh indicator.<\/p>\n<p>The <code>onRefresh<\/code>, <code>child<\/code>, and <code>notificationPredicate<\/code> arguments must be\nnon-null. The default\n<code>displacement<\/code> is 40.0 logical pixels.<\/p>\n<p>The <code>semanticsLabel<\/code> is used to specify an accessibility label for this widget.\nIf it is null, it will be defaulted to <a href=\"material\/MaterialLocalizations\/refreshIndicatorSemanticLabel.html\">MaterialLocalizations.refreshIndicatorSemanticLabel<\/a>.\nAn empty string may be passed to avoid having anything read by screen reading software.\nThe <code>semanticsValue<\/code> may be used to specify progress on the widget.<\/p>\n    ",
            "static": false,
            "memberOf": "material.RefreshIndicator",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "displacement",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onRefresh",
                    "type": "material.RefreshCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "notificationPredicate",
                    "type": "widgets.ScrollNotificationPredicate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/RefreshIndicator\/RefreshIndicator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RefreshIndicator({\n  Key key,\n  @required this.child,\n  this.displacement = 40.0,\n  @required this.onRefresh,\n  this.color,\n  this.backgroundColor,\n  this.notificationPredicate = defaultScrollNotificationPredicate,\n  this.semanticsLabel,\n  this.semanticsValue,\n}) : assert(child != null),\n     assert(onRefresh != null),\n     assert(notificationPredicate != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "material.RefreshIndicatorState",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/RefreshIndicator\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.RefreshIndicator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RefreshIndicator\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRefreshIndicatorState createState() =&gt; RefreshIndicatorState();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "backgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The progress indicator's background color. The current theme's\n<a href=\"material\/ThemeData\/canvasColor.html\">ThemeData.canvasColor<\/a> by default.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/backgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>The refresh indicator will be stacked on top of this child. The indicator\nwill appear when child's Scrollable descendant is over-scrolled.<\/p>\n<p>Typically a <a href=\"widgets\/ListView-class.html\">ListView<\/a> or <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "color",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The progress indicator's foreground color. The current theme's\n<a href=\"material\/ThemeData\/accentColor.html\">ThemeData.accentColor<\/a> by default.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/color.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "displacement",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The distance from the child's top or bottom edge to where the refresh\nindicator will settle. During the drag that exposes the refresh indicator,\nits actual displacement may significantly exceed this value.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/displacement.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double displacement\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "notificationPredicate",
            "type": "widgets.ScrollNotificationPredicate",
            "types": [],
            "desc": "<p>A check that specifies whether a <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> should be\nhandled by this widget.<\/p>\n<p>By default, checks whether <code>notification.depth == 0<\/code>. Set it to something\nelse for more complicated layouts.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/notificationPredicate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollNotificationPredicate notificationPredicate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticsLabel",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The <code>Semantics.label<\/code> for this progress indicator.<\/p>\n<p>This value indicates the purpose of the progress bar, and will be\nread out by screen readers to indicate the purpose of this progress\nindicator.<\/p>\n<p>This will be defaulted to <a href=\"material\/MaterialLocalizations\/refreshIndicatorSemanticLabel.html\">MaterialLocalizations.refreshIndicatorSemanticLabel<\/a>\nif it is null.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/semanticsLabel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticsLabel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticsValue",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The <code>Semantics.value<\/code> for this progress indicator.<\/p>\n<p>This will be used in conjunction with the <a href=\"material\/RefreshIndicator\/semanticsLabel.html\">semanticsLabel<\/a> by\nscreen reading software to identify the widget, and is primarily\nintended for use with determinate progress indicators to announce\nhow far along they are.<\/p>\n<p>For determinate progress indicators, this will be defaulted to <code>value<\/code>\nexpressed as a percentage, i.e. <code>0.1<\/code> will become '10%'.<\/p>\n        ",
            "memberOf": "material.RefreshIndicator",
            "isConstant": false,
            "href": "material\/RefreshIndicator\/semanticsValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticsValue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "material.RefreshIndicatorState"
    ],
    "realImplementors": [
        "material.RefreshIndicatorState"
    ],
    "cn": [],
    "href": "material\/RefreshIndicator-class.html",
    "desc": "<p>A widget that supports the Material \"swipe to refresh\" idiom.<\/p>\n<p>When the child's <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> descendant overscrolls, an animated circular\nprogress indicator is faded into view. When the scroll ends, if the\nindicator has been dragged far enough for it to become completely opaque,\nthe <a href=\"material\/RefreshIndicator\/onRefresh.html\">onRefresh<\/a> callback is called. The callback is expected to update the\nscrollable's contents and then complete the <a href=\"dart-async\/Future-class.html\">Future<\/a> it returns. The refresh\nindicator disappears after the callback's <a href=\"dart-async\/Future-class.html\">Future<\/a> has completed.<\/p>\n<p>If the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> might not have enough content to overscroll, consider\nsettings its <code>physics<\/code> property to <a href=\"widgets\/AlwaysScrollableScrollPhysics-class.html\">AlwaysScrollableScrollPhysics<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">ListView(\n  physics: const AlwaysScrollableScrollPhysics(),\n  children: ...\n<\/code><\/pre>\n<p>Using <a href=\"widgets\/AlwaysScrollableScrollPhysics-class.html\">AlwaysScrollableScrollPhysics<\/a> will ensure that the scroll view is\nalways scrollable and, therefore, can trigger the <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a>.<\/p>\n<p>A <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a> can only be used with a vertical scroll view.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"https:\/\/material.io\/design\/platform-guidance\/android-swipe-to-refresh.html\">material.io\/design\/platform-guidance\/android-swipe-to-refresh.html<\/a><\/li>\n<li>\n<a href=\"material\/RefreshIndicatorState-class.html\">RefreshIndicatorState<\/a>, can be used to programmatically show the refresh indicator.<\/li>\n<li>\n<a href=\"material\/RefreshProgressIndicator-class.html\">RefreshProgressIndicator<\/a>, widget used by <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a> to show\nthe inner circular progress spinner during refreshes.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoSliverRefreshControl-class.html\">CupertinoSliverRefreshControl<\/a>, an iOS equivalent of the pull-to-refresh pattern.\nMust be used as a sliver inside a <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> instead of wrapping\naround a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> because it's a part of the scrollable instead of\nbeing overlaid on top of it.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RefreshIndicator"
}