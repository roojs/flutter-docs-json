{
    "desc": "<p>A base class for material style toggleable controls with toggle animations.<\/p>\n<p>This class handles storing the current value, dispatching ValueChanged on a\ntap gesture and driving a changed animation. Subclasses are responsible for\npainting.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/RenderToggleable-class.html",
    "isAbstract": true,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.RenderToggleable",
    "shortname": "RenderToggleable",
    "extends": [
        "rendering.RenderConstrainedBox",
        "rendering.RenderProxyBox",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the control changes value.<\/p>\n<p>If the control is tapped, <a href=\"material\/RenderToggleable\/onChanged.html\">onChanged<\/a> is called immediately with the new\nvalue. If the control changes value due to an animation (see\n<a href=\"material\/RenderToggleable\/positionController.html\">positionController<\/a>), the callback is called when the animation\ncompletes.<\/p>\n<p>The control is considered interactive (see <a href=\"material\/RenderToggleable\/isInteractive.html\">isInteractive<\/a>) if this\ncallback is non-null. If the callback is null, then the control is\ndisabled, and non-interactive. A disabled checkbox, for example, is\ndisplayed using a grey color and its value cannot be changed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueChanged&lt;bool&gt; get onChanged =&gt; _onChanged;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/onChanged.html",
            "isDeprecated": false,
            "type": "foundation.ValueChanged<dart:core.bool>",
            "name": "onChanged",
            "memberOf": "material.RenderToggleable",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a toggleable render object.<\/p>\n<p>The <code>activeColor<\/code>, and <code>inactiveColor<\/code> arguments must not be\nnull. The <code>value<\/code> can only be null if tristate is true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderToggleable({\n  @required bool value,\n  bool tristate = false,\n  @required Color activeColor,\n  @required Color inactiveColor,\n  ValueChanged&lt;bool&gt; onChanged,\n  BoxConstraints additionalConstraints,\n  @required TickerProvider vsync,\n}) : assert(tristate != null),\n     assert(tristate || value != null),\n     assert(activeColor != null),\n     assert(inactiveColor != null),\n     assert(vsync != null),\n     _value = value,\n     _tristate = tristate,\n     _activeColor = activeColor,\n     _inactiveColor = inactiveColor,\n     _onChanged = onChanged,\n     _vsync = vsync,\n     super(additionalConstraints: additionalConstraints) {\n  _tap = TapGestureRecognizer()\n    ..onTapDown = _handleTapDown\n    ..onTap = _handleTap\n    ..onTapUp = _handleTapUp\n    ..onTapCancel = _handleTapCancel;\n  _positionController = AnimationController(\n    duration: _kToggleDuration,\n    value: value == false ? 0.0 : 1.0,\n    vsync: vsync,\n  );\n  _position = CurvedAnimation(\n    parent: _positionController,\n    curve: Curves.linear,\n  )..addListener(markNeedsPaint)\n   ..addStatusListener(_handlePositionStateChanged);\n  _reactionController = AnimationController(\n    duration: kRadialReactionDuration,\n    vsync: vsync,\n  );\n  _reaction = CurvedAnimation(\n    parent: _reactionController,\n    curve: Curves.fastOutSlowIn,\n  )..addListener(markNeedsPaint);\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/RenderToggleable.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderToggleable",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "activeColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "additionalConstraints",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.BoxConstraints"
                },
                {
                    "name": "inactiveColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "onChanged",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.bool>"
                },
                {
                    "name": "tristate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "vsync",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "scheduler.TickerProvider"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"material\/RenderToggleable\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"material\/RenderToggleable\/attach.html\">attach<\/a> method, and then <a href=\"material\/RenderToggleable\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  if (value == false)\n    _positionController.reverse();\n  else\n    _positionController.forward();\n  if (isInteractive) {\n    switch (_reactionController.status) {\n      case AnimationStatus.forward:\n        _reactionController.forward();\n        break;\n      case AnimationStatus.reverse:\n        _reactionController.reverse();\n        break;\n      case AnimationStatus.dismissed:\n      case AnimationStatus.completed:\n        \/\/ nothing to do\n        break;\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/attach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "attach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "owner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PipelineOwner"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/RenderToggleable\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('value', value: value, ifTrue: 'checked', ifFalse: 'unchecked', showName: true));\n  properties.add(FlagProperty('isInteractive', value: isInteractive, ifTrue: 'enabled', ifFalse: 'disabled', defaultValue: true));\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"material\/RenderToggleable\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration(SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n\n  config.isEnabled = isInteractive;\n  if (isInteractive)\n    config.onTap = _handleTap;\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/describeSemanticsConfiguration.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "describeSemanticsConfiguration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "config",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"material\/RenderToggleable\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"material\/RenderToggleable\/detach.html\">detach<\/a> method, and then <a href=\"material\/RenderToggleable\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _positionController.stop();\n  _reactionController.stop();\n  super.detach();\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/detach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>Override this method to handle pointer events that hit this render object.<\/p>\n<p>For <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> objects, the <code>entry<\/code> argument is a <a href=\"rendering\/BoxHitTestEntry-class.html\">BoxHitTestEntry<\/a>. From this\nobject you can determine the <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a>'s position in local coordinates.\n(This is useful because <a href=\"material\/RenderToggleable\/position.html\">PointerEvent.position<\/a> is in global coordinates.)<\/p>\n<p>If you override this, consider calling <a href=\"rendering\/RenderBox\/debugHandleEvent.html\">debugHandleEvent<\/a> as follows, so\nthat you can support <a href=\"rendering\/debugPaintPointersEnabled.html\">debugPaintPointersEnabled<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, HitTestEntry entry) {\n  assert(debugHandleEvent(event, entry));\n  \/\/ ... handle the event ...\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, BoxHitTestEntry entry) {\n  assert(debugHandleEvent(event, entry));\n  if (event is PointerDownEvent &amp;&amp; isInteractive)\n    _tap.addPointer(event);\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/handleEvent.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "handleEvent",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "entry",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.BoxHitTestEntry"
                },
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Override this method if this render object can be hit even if its\nchildren were not hit.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestSelf(Offset position) =&gt; true;<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/hitTestSelf.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTestSelf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Used by subclasses to paint the radial ink reaction for this control.<\/p>\n<p>The reaction is painted on the given canvas at the given offset. The\norigin is the center point of the reaction (usually distinct from the\npoint at which the user interacted with the control, which is handled\nautomatically).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paintRadialReaction(Canvas canvas, Offset offset, Offset origin) {\n  if (!_reaction.isDismissed) {\n    \/\/ TODO(abarth): We should have a different reaction color when position is zero.\n    final Paint reactionPaint = Paint()..color = activeColor.withAlpha(kRadialReactionAlpha);\n    final Offset center = Offset.lerp(_downPosition ?? origin, origin, _reaction.value);\n    final double radius = _kRadialReactionRadiusTween.evaluate(_reaction);\n    canvas.drawCircle(center + offset, radius, reactionPaint);\n  }\n}<\/code><\/pre>\n    ",
            "href": "material\/RenderToggleable\/paintRadialReaction.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paintRadialReaction",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RenderToggleable",
            "params": [
                {
                    "name": "canvas",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "origin",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color that should be used in the active state (i.e., when <a href=\"material\/RenderToggleable\/value.html\">value<\/a> is true).<\/p>\n<p>For example, a checkbox should use this color when checked.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get activeColor =&gt; _activeColor;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/activeColor.html",
            "name": "activeColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>The color that should be used in the inactive state (i.e., when <a href=\"material\/RenderToggleable\/value.html\">value<\/a> is false).<\/p>\n<p>For example, a checkbox should use this color when unchecked.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get inactiveColor =&gt; _inactiveColor;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/inactiveColor.html",
            "name": "inactiveColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>Whether <a href=\"material\/RenderToggleable\/value.html\">value<\/a> of this control can be changed by user interaction.<\/p>\n<p>The control is considered interactive if the <a href=\"material\/RenderToggleable\/onChanged.html\">onChanged<\/a> callback is\nnon-null. If the callback is null, then the control is disabled, and\nnon-interactive. A disabled checkbox, for example, is displayed using a\ngrey color and its value cannot be changed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInteractive =&gt; onChanged != null;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/isInteractive.html",
            "name": "isInteractive",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>The visual value of the control.<\/p>\n<p>When the control is inactive, the <a href=\"material\/RenderToggleable\/value.html\">value<\/a> is false and this animation has\nthe value 0.0. When the control is active, the value either true or tristate\nis true and the value is null. When the control is active the animation\nhas a value of 1.0. When the control is changing from inactive\nto active (or vice versa), <a href=\"material\/RenderToggleable\/value.html\">value<\/a> is the target value and this animation\ngradually updates from 0.0 to 1.0 (or vice versa).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CurvedAnimation get position =&gt; _position;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/position.html",
            "name": "position",
            "isDeprecated": false,
            "type": "animation.CurvedAnimation",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>Used by subclasses to manipulate the visual value of the control.<\/p>\n<p>Some controls respond to user input by updating their visual value. For\nexample, the thumb of a switch moves from one position to another when\ndragged. These controls manipulate this animation controller to update\ntheir <a href=\"material\/RenderToggleable\/position.html\">position<\/a> and eventually trigger an <a href=\"material\/RenderToggleable\/onChanged.html\">onChanged<\/a> callback when the\nanimation reaches either 0.0 or 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nAnimationController get positionController =&gt; _positionController;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/positionController.html",
            "name": "positionController",
            "isDeprecated": false,
            "type": "animation.AnimationController",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>Used by subclasses to control the radial reaction animation.<\/p>\n<p>Some controls have a radial ink reaction to user input. This animation\ncontroller can be used to start or stop these ink reactions.<\/p>\n<p>Subclasses should call <a href=\"material\/RenderToggleable\/paintRadialReaction.html\">paintRadialReaction<\/a> to actually paint the radial\nreaction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nAnimationController get reactionController =&gt; _reactionController;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/reactionController.html",
            "name": "reactionController",
            "isDeprecated": false,
            "type": "animation.AnimationController",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>If true, <a href=\"material\/RenderToggleable\/value.html\">value<\/a> can be true, false, or null, otherwise <a href=\"material\/RenderToggleable\/value.html\">value<\/a> must\nbe true or false.<\/p>\n<p>When <a href=\"material\/RenderToggleable\/tristate.html\">tristate<\/a> is true and <a href=\"material\/RenderToggleable\/value.html\">value<\/a> is null, then the control is\nconsidered to be in its third or \"indeterminate\" state.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get tristate =&gt; _tristate;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/tristate.html",
            "name": "tristate",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>False if this control is \"inactive\" (not checked, off, or unselected).<\/p>\n<p>If value is true then the control \"active\" (checked, on, or selected). If\ntristate is true and value is null, then the control is considered to be\nin its third or \"indeterminate\" state.<\/p>\n<p>When the value changes, this object starts the <a href=\"material\/RenderToggleable\/positionController.html\">positionController<\/a> and\n<a href=\"material\/RenderToggleable\/position.html\">position<\/a> animations to animate the visual appearance of the control to\nthe new value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get value =&gt; _value;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/value.html",
            "name": "value",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> for the <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>s that run the animations.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TickerProvider get vsync =&gt; _vsync;<\/code><\/pre>\n        ",
            "href": "material\/RenderToggleable\/vsync.html",
            "name": "vsync",
            "isDeprecated": false,
            "type": "scheduler.TickerProvider",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RenderToggleable",
            "params": []
        }
    ]
}