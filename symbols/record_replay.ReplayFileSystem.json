{
    "desc": "<p>A file system that replays invocations from a prior recording for use\nin tests.<\/p>\n<p>This will replay all invocations (methods, property getters, and property\nsetters) that occur on it, based on an opaque recording that was generated\nin <a href=\"package-file_record_replay\/RecordingFileSystem-class.html\">RecordingFileSystem<\/a>. All activity in the <a href=\"package-file_file\/File-class.html\">File<\/a>, <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, <a href=\"package-file_file\/Link-class.html\">Link<\/a>,\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>, and <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> instances returned from this API will also\nbe replayed from the same recording.<\/p>\n<p>Once an invocation has been replayed once, it is marked as such and will\nnot be eligible for further replay. If an eligible invocation cannot be\nfound that matches an incoming invocation, a <a href=\"package-file_record_replay\/NoMatchingInvocationError-class.html\">NoMatchingInvocationError<\/a>\nwill be thrown.<\/p>\n<p>This class is intended for use in tests, where you would otherwise have to\nset up complex mocks or fake file systems. With this class, the process is\nas follows:<\/p>\n<ul>\n<li>You record the file system activity during a real run of your program\nby injecting a <code>RecordingFileSystem<\/code> that delegates to your real file\nsystem.<\/li>\n<li>You serialize that recording to disk as your program finishes.<\/li>\n<li>You use that recording in tests to create a mock file system that knows\nhow to respond to the exact invocations your program makes. Any\ninvocations that aren't in the recording will throw, and you can make\nassertions in your tests about which methods were invoked and in what\norder.<\/li>\n<\/ul>\n<p><em>Implementation note<\/em>: this class uses <a href=\"dart-core\/Object\/noSuchMethod.html\">noSuchMethod<\/a> to dynamically handle\ninvocations. As a result, method references on objects herein will not pass\n<code>is<\/code> checks or checked-mode checks on type. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">typedef FileStat StatSync(String path);\nFileSystem fs = new ReplayFileSystem(directory);\n\nStatSync method = fs.statSync;     \/\/ Will fail in checked-mode\nfs.statSync is StatSync            \/\/ Will return false\nfs.statSync is Function            \/\/ Will return false\n\ndynamic method2 = fs.statSync;     \/\/ OK\nFileStat stat = method2('\/path');  \/\/ OK\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul><li><a href=\"package-file_record_replay\/RecordingFileSystem-class.html\">RecordingFileSystem<\/a><\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "package-file_record_replay\/ReplayFileSystem-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "record_replay",
    "name": "record_replay.ReplayFileSystem",
    "shortname": "ReplayFileSystem",
    "extends": [
        "file.FileSystem",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new <code>ReplayFileSystem<\/code>.<\/p>\n<p>Recording data will be loaded from the specified <code>recording<\/code> location.\nThis location must have been created by <a href=\"package-file_record_replay\/RecordingFileSystem-class.html\">RecordingFileSystem<\/a>, or an\n<a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> will be thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory ReplayFileSystem({\n  @required Directory recording,\n}) {\n  String dirname = recording.path;\n  String path = recording.fileSystem.path.join(dirname, kManifestName);\n  File manifestFile = recording.fileSystem.file(path);\n  if (!manifestFile.existsSync()) {\n    throw new ArgumentError('Not a valid recording directory: $dirname');\n  }\n  List&lt;Map&lt;String, dynamic&gt;&gt; manifest = new JsonDecoder()\n      .convert(manifestFile.readAsStringSync())\n      .cast&lt;Map&lt;String, dynamic&gt;&gt;();\n  return new ReplayFileSystemImpl(recording, manifest);\n}<\/code><\/pre>\n    ",
            "href": "package-file_record_replay\/ReplayFileSystem\/ReplayFileSystem.html",
            "isDeprecated": false,
            "type": "",
            "name": "ReplayFileSystem",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "record_replay.ReplayFileSystem",
            "params": [
                {
                    "name": "recording",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "file.Directory"
                }
            ]
        }
    ],
    "props": []
}