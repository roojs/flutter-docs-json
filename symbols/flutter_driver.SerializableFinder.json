{
    "desc": "<p>Base class for Flutter Driver finders, objects that describe how the driver\nshould search for elements.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "flutter_driver\/SerializableFinder-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_driver",
    "name": "flutter_driver.SerializableFinder",
    "shortname": "SerializableFinder",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": null,
            "href": "flutter_driver\/SerializableFinder\/SerializableFinder.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "flutter_driver.SerializableFinder",
            "params": []
        },
        {
            "desc": "<p>Deserializes a finder from JSON generated by <a href=\"flutter_driver\/SerializableFinder\/serialize.html\">serialize<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static SerializableFinder deserialize(Map&lt;String, String&gt; json) {\n  final String finderType = json['finderType'];\n  switch (finderType) {\n    case 'ByType': return ByType.deserialize(json);\n    case 'ByValueKey': return ByValueKey.deserialize(json);\n    case 'ByTooltipMessage': return ByTooltipMessage.deserialize(json);\n    case 'BySemanticsLabel': return BySemanticsLabel.deserialize(json);\n    case 'ByText': return ByText.deserialize(json);\n    case 'PageBack': return PageBack();\n  }\n  throw DriverError('Unsupported search specification type $finderType');\n}<\/code><\/pre>\n    ",
            "href": "flutter_driver\/SerializableFinder\/deserialize.html",
            "isDeprecated": "0",
            "type": "flutter_driver.SerializableFinder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_driver.SerializableFinder",
            "params": [
                {
                    "name": "json",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>"
                }
            ]
        },
        {
            "desc": "<p>Serializes common fields to JSON.<\/p>\n<p>Methods that override <a href=\"flutter_driver\/SerializableFinder\/serialize.html\">serialize<\/a> are expected to call <code>super.serialize<\/code>\nand add more fields to the returned <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nMap&lt;String, String&gt; serialize() =&gt; &lt;String, String&gt;{\n  'finderType': finderType,\n};<\/code><\/pre>\n    ",
            "href": "flutter_driver\/SerializableFinder\/serialize.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_driver.SerializableFinder",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Identifies the type of finder to be used by the driver extension.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get finderType;<\/code><\/pre>\n        ",
            "href": "flutter_driver\/SerializableFinder\/finderType.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "flutter_driver.SerializableFinder",
            "params": []
        }
    ]
}