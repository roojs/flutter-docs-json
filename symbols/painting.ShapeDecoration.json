{
    "desc": "<p>An immutable description of how to paint an arbitrary shape.<\/p>\n<p>The <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> class provides a way to draw a <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>,\noptionally filling it with a color or a gradient, optionally painting an\nimage into it, and optionally casting a shadow.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following example uses the <a href=\"widgets\/Container-class.html\">Container<\/a> widget from the widgets layer to\ndraw a white rectangle with a 24-pixel multicolor outline, with the text\n\"RGB\" inside it:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: ShapeDecoration(\n    color: Colors.white,\n    shape: Border.all(\n      color: Colors.red,\n      width: 8.0,\n    ) + Border.all(\n      color: Colors.green,\n      width: 8.0,\n    ) + Border.all(\n      color: Colors.blue,\n      width: 8.0,\n    ),\n  ),\n  child: const Text('RGB', textAlign: TextAlign.center),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> and <a href=\"widgets\/Container-class.html\">Container<\/a>, widgets that can be configured with\n<a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, a similar <a href=\"painting\/Decoration-class.html\">Decoration<\/a> that is optimized for rectangles\nspecifically.<\/li>\n<li>\n<a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>, the base class for the objects that are used in the\n<a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a> property.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/ShapeDecoration-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.ShapeDecoration",
    "shortname": "ShapeDecoration",
    "extends": [
        "painting.Decoration",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a shape decoration.<\/p>\n<ul>\n<li>If <code>color<\/code> is null, this decoration does not paint a background color.<\/li>\n<li>If <code>gradient<\/code> is null, this decoration does not paint gradients.<\/li>\n<li>If <code>image<\/code> is null, this decoration does not paint a background image.<\/li>\n<li>If <code>shadows<\/code> is null, this decoration does not paint a shadow.<\/li>\n<\/ul>\n<p>The <code>color<\/code> and <code>gradient<\/code> properties are mutually exclusive, one (or\nboth) of them must be null.<\/p>\n<p>The <code>shape<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ShapeDecoration({\n  this.color,\n  this.image,\n  this.gradient,\n  this.shadows,\n  @required this.shape,\n}) : assert(!(color != null &amp;&amp; gradient != null)),\n     assert(shape != null);<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/ShapeDecoration.html",
            "isDeprecated": false,
            "type": "",
            "name": "ShapeDecoration",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "gradient",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Gradient"
                },
                {
                    "name": "image",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.DecorationImage"
                },
                {
                    "name": "shadows",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<painting.BoxShadow>"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ShapeDecorationPainter createBoxPainter([ VoidCallback onChanged ]) {\n  assert(onChanged != null || image == null);\n  return _ShapeDecorationPainter(this, onChanged);\n}<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/createBoxPainter.html",
            "isDeprecated": false,
            "type": "<_ShapeDecorationPainter>",
            "name": "createBoxPainter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "onChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/ShapeDecoration\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.whitespace;\n  properties.add(DiagnosticsProperty&lt;Color&gt;('color', color, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Gradient&gt;('gradient', gradient, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;DecorationImage&gt;('image', image, defaultValue: null));\n  properties.add(IterableProperty&lt;BoxShadow&gt;('shadows', shadows, defaultValue: null, style: DiagnosticsTreeStyle.whitespace));\n  properties.add(DiagnosticsProperty&lt;ShapeBorder&gt;('shape', shape));\n}<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Tests whether the given point, on a rectangle of a given size,\nwould be considered to hit the decoration or not. For example,\nif the decoration only draws a circle, this function might\nreturn true if the point was inside the circle and false\notherwise.<\/p>\n<p>The decoration may be sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\n<code>textDirection<\/code> argument should therefore be provided. If it is known that\nthe decoration is not affected by the text direction, then the argument\nmay be omitted or set to null.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <code>textDirection<\/code> parameter will be populated\nbased on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> (by way of the <a href=\"rendering\/RenderDecoratedBox-class.html\">RenderDecoratedBox<\/a>\nrenderer).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(Size size, Offset position, { TextDirection textDirection }) {\n  return shape.getOuterPath(Offset.zero &amp; size, textDirection: textDirection).contains(position);\n}<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/hitTest.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Size"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two shapes.<\/p>\n<p>Interpolates each parameter of the decoration separately.<\/p>\n<p>If both values are null, this returns null. Otherwise, it returns a\nnon-null value, with null arguments treated like a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> whose\nfields are all null (including the <a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a>, which cannot normally be\nnull).<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>, which can interpolate between any two types of\n<a href=\"painting\/Decoration-class.html\">Decoration<\/a>s, not just <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>s.<\/li>\n<li>\n<a href=\"painting\/ShapeDecoration\/lerpFrom.html\">lerpFrom<\/a> and <a href=\"painting\/ShapeDecoration\/lerpTo.html\">lerpTo<\/a>, which are used to implement <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>\nand which use <a href=\"painting\/ShapeDecoration\/lerp.html\">ShapeDecoration.lerp<\/a> when interpolating two\n<a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>s or a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> to or from null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ShapeDecoration lerp(ShapeDecoration a, ShapeDecoration b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a != null &amp;&amp; b != null) {\n    if (t == 0.0)\n      return a;\n    if (t == 1.0)\n      return b;\n  }\n  return ShapeDecoration(\n    color: Color.lerp(a?.color, b?.color, t),\n    gradient: Gradient.lerp(a?.gradient, b?.gradient, t),\n    image: t &lt; 0.5 ? a.image : b.image, \/\/ TODO(ianh): cross-fade the image\n    shadows: BoxShadow.lerpList(a?.shadows, b?.shadows, t),\n    shape: ShapeBorder.lerp(a?.shape, b?.shape, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/lerp.html",
            "isDeprecated": false,
            "type": "painting.ShapeDecoration",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.ShapeDecoration"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.ShapeDecoration"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeDecoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/ShapeDecoration\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeDecoration lerpFrom(Decoration a, double t) {\n  if (a is BoxDecoration) {\n    return ShapeDecoration.lerp(ShapeDecoration.fromBoxDecoration(a), this, t);\n  } else if (a == null || a is ShapeDecoration) {\n    return ShapeDecoration.lerp(a, this, t);\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/lerpFrom.html",
            "isDeprecated": false,
            "type": "painting.ShapeDecoration",
            "name": "lerpFrom",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Decoration"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/ShapeDecoration\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeDecoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeDecoration lerpTo(Decoration b, double t) {\n  if (b is BoxDecoration) {\n    return ShapeDecoration.lerp(this, ShapeDecoration.fromBoxDecoration(b), t);\n  } else if (b == null || b is ShapeDecoration) {\n    return ShapeDecoration.lerp(this, b, t);\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "href": "painting\/ShapeDecoration\/lerpTo.html",
            "isDeprecated": false,
            "type": "painting.ShapeDecoration",
            "name": "lerpTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.ShapeDecoration",
            "params": [
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Decoration"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color to fill in the background of the shape.<\/p>\n<p>The color is under the <a href=\"painting\/ShapeDecoration\/image.html\">image<\/a>.<\/p>\n<p>If a <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a> is specified, <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a> must be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>A gradient to use when filling the shape.<\/p>\n<p>The gradient is under the <a href=\"painting\/ShapeDecoration\/image.html\">image<\/a>.<\/p>\n<p>If a <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a> is specified, <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a> must be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Gradient gradient\n\n<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/gradient.html",
            "name": "gradient",
            "isDeprecated": false,
            "type": "painting.Gradient",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ShapeDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    color,\n    gradient,\n    image,\n    shape,\n    shadows,\n  );\n}<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>An image to paint inside the shape (clipped to its outline).<\/p>\n<p>The image is drawn over the <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a> or <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DecorationImage image\n\n<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/image.html",
            "name": "image",
            "isDeprecated": false,
            "type": "painting.DecorationImage",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>Whether this decoration is complex enough to benefit from caching its painting.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isComplex =&gt; shadows != null;<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/isComplex.html",
            "name": "isComplex",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>The inset space occupied by the <a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a>'s border.<\/p>\n<p>This value may be misleading. See the discussion at <a href=\"painting\/ShapeBorder\/dimensions.html\">ShapeBorder.dimensions<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets get padding =&gt; shape.dimensions;<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/padding.html",
            "name": "padding",
            "isDeprecated": false,
            "type": "painting.EdgeInsets",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>A list of shadows cast by this shape behind the shape.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;BoxShadow&gt; shadows\n\n<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/shadows.html",
            "name": "shadows",
            "isDeprecated": false,
            "type": "dart:core.List<painting.BoxShadow>",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        },
        {
            "desc": "<p>The shape to fill the <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a>, <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a>, and <a href=\"painting\/ShapeDecoration\/image.html\">image<\/a> into and to cast as\nthe <a href=\"painting\/ShapeDecoration\/shadows.html\">shadows<\/a>.<\/p>\n<p>Shapes can be stacked (using the <code>+<\/code> operator). The color, gradient, and\nimage are drawn into the inner-most shape specified.<\/p>\n<p>The <a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a> property specifies the outline (border) of the decoration. The\nshape must not be null.<\/p>\n<h2 id=\"directionality-dependent-shapes\">Directionality-dependent shapes<\/h2>\n<p>Some <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses are sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\ndirection that is provided to the border (e.g. for its <a href=\"painting\/ShapeBorder\/paint.html\">ShapeBorder.paint<\/a>\nmethod) is the one specified in the <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a>\n(<a href=\"painting\/ImageConfiguration\/textDirection.html\">ImageConfiguration.textDirection<\/a>) provided to the <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> (via its\n[BoxPainter.paint method). The <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> is obtained when\n<a href=\"painting\/ShapeDecoration\/createBoxPainter.html\">createBoxPainter<\/a> is called.<\/p>\n<p>When a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> is used with a <a href=\"widgets\/Container-class.html\">Container<\/a> widget or a\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> widget (which is what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> specified in the <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> is obtained from the\nambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, using <a href=\"widgets\/createLocalImageConfiguration.html\">createLocalImageConfiguration<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "painting\/ShapeDecoration\/shape.html",
            "name": "shape",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "memberOf": "painting.ShapeDecoration",
            "params": []
        }
    ]
}