{
    "desc": "<p>A stream of <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> events at <a href=\"quiver.async\/Metronome\/interval.html\">interval<\/a>s centered on <a href=\"quiver.async\/Metronome\/anchor.html\">anchor<\/a>.<\/p>\n<p>This stream accounts for drift but only guarantees that events are\ndelivered on or after the interval. If the system is busy for longer than\ntwo <a href=\"quiver.async\/Metronome\/interval.html\">interval<\/a>s, only one will be delivered.<\/p>\n<p><a href=\"quiver.async\/Metronome\/anchor.html\">anchor<\/a> defaults to <code>clock.now<\/code>, which means the stream represents a\nself-correcting periodic timer. If anchor is the epoch, then the stream is\nsynchronized to wall-clock time. It can be anchored anywhere in time, but\nthis does not delay the first delivery.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>new Metronome.epoch(aMinute).listen((d) =&gt; print(d));\n<\/code><\/pre>\n<p>Could print the following stream of events, anchored by epoch, till the\nstream is canceled:<\/p>\n<pre class=\"language-dart\"><code>2014-05-04 14:06:00.001\n2014-05-04 14:07:00.000\n2014-05-04 14:08:00.003\n...\n<\/code><\/pre>\n<p>Example anchored in the future (now = 2014-05-05 20:06:00.123)<\/p>\n<pre class=\"language-dart\"><code>new IsochronousStream.periodic(aMillisecond * 100,\n    anchorMs: DateTime.parse(\"2014-05-05 21:07:00\"))\n    .listen(print);\n\n2014-05-04 20:06:00.223\n2014-05-04 20:06:00.324\n2014-05-04 20:06:00.423\n...\n<\/code><\/pre>\n    ",
    "dtype": "class",
    "example": "",
    "href": "quiver.async\/Metronome-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "quiver.async",
    "name": "quiver.async.Metronome",
    "shortname": "Metronome",
    "extends": [
        "dart:core.DateTime",
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;DateTime&gt; listen(void onData(DateTime event),\n        {Function onError, void onDone(), bool cancelOnError}) =&gt;\n    _controller.stream.listen(onData,\n        onError: onError, onDone: onDone, cancelOnError: cancelOnError);<\/code><\/pre>\n    ",
            "href": "quiver.async\/Metronome\/listen.html",
            "isDeprecated": "0",
            "type": "dart:async.StreamSubscription<dart:core.DateTime>",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.Metronome",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                },
                {
                    "name": "onDone",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime anchor\n\n<\/code><\/pre>\n        ",
            "href": "quiver.async\/Metronome\/anchor.html",
            "name": "anchor",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "memberOf": "quiver.async.Metronome",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clock clock\n\n<\/code><\/pre>\n        ",
            "href": "quiver.async\/Metronome\/clock.html",
            "name": "clock",
            "isDeprecated": false,
            "type": "quiver.time.Clock",
            "memberOf": "quiver.async.Metronome",
            "params": []
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration interval\n\n<\/code><\/pre>\n        ",
            "href": "quiver.async\/Metronome\/interval.html",
            "name": "interval",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "memberOf": "quiver.async.Metronome",
            "params": []
        },
        {
            "desc": "<p>Whether this stream is a broadcast stream.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isBroadcast =&gt; true;<\/code><\/pre>\n        ",
            "href": "quiver.async\/Metronome\/isBroadcast.html",
            "name": "isBroadcast",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "quiver.async.Metronome",
            "params": []
        }
    ]
}