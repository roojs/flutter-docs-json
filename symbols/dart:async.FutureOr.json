{
    "desc": "<p>A type representing values that are either <code>Future&lt;T&gt;<\/code> or <code>T<\/code>.<\/p>\n<p>This class declaration is a public stand-in for an internal\nfuture-or-value generic type. References to this class are resolved to the\ninternal type.<\/p>\n<p>It is a compile-time error for any class to extend, mix in or implement\n<code>FutureOr<\/code>.<\/p>\n<p>Note: the <code>FutureOr&lt;T&gt;<\/code> type is interpreted as <code>dynamic<\/code> in non strong-mode.<\/p>\n<h1 id=\"examples\">Examples<\/h1>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The `Future&lt;T&gt;.then` function takes a callback [f] that returns either\n\/\/ an `S` or a `Future&lt;S&gt;`.\nFuture&lt;S&gt; then&lt;S&gt;(FutureOr&lt;S&gt; f(T x), ...);\n\n\/\/ `Completer&lt;T&gt;.complete` takes either a `T` or `Future&lt;T&gt;`.\nvoid complete(FutureOr&lt;T&gt; value);\n<\/code><\/pre>\n<h1 id=\"advanced\">Advanced<\/h1>\n<p>The <code>FutureOr&lt;int&gt;<\/code> type is actually the \"type union\" of the types <code>int<\/code> and\n<code>Future&lt;int&gt;<\/code>. This type union is defined in such a way that\n<code>FutureOr&lt;Object&gt;<\/code> is both a super- and sub-type of <code>Object<\/code> (sub-type\nbecause <code>Object<\/code> is one of the types of the union, super-type because\n<code>Object<\/code> is a super-type of both of the types of the union). Together it\nmeans that <code>FutureOr&lt;Object&gt;<\/code> is equivalent to <code>Object<\/code>.<\/p>\n<p>As a corollary, <code>FutureOr&lt;Object&gt;<\/code> is equivalent to\n<code>FutureOr&lt;FutureOr&lt;Object&gt;&gt;<\/code>, <code>FutureOr&lt;Future&lt;Object&gt;&gt;<\/code> is equivalent to\n<code>Future&lt;Object&gt;<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-async\/FutureOr-class.html",
    "isAbstract": true,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "dart:async",
    "name": "dart:async.FutureOr",
    "shortname": "FutureOr",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [],
    "props": []
}