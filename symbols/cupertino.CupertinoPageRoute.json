{
    "desc": "<p>A modal route that replaces the entire screen with an iOS transition.<\/p>\n<p>The page slides in from the right and exits in reverse. The page also shifts\nto the left in parallax when another page enters to cover it.<\/p>\n<p>The page slides in from the bottom and exits in reverse with no parallax\neffect for fullscreen dialogs.<\/p>\n<p>By default, when a modal route is replaced by another, the previous route\nremains in memory. To free all the resources when this is not necessary, set\n<a href=\"cupertino\/CupertinoPageRoute\/maintainState.html\">maintainState<\/a> to false.<\/p>\n<p>The type <code>T<\/code> specifies the return type of the route which can be supplied as\nthe route is popped from the stack via <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a> when an optional\n<code>result<\/code> can be provided.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/MaterialPageRoute-class.html\">MaterialPageRoute<\/a>, for an adaptive <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> that uses a\nplatform-appropriate transition.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>, for applications that have one page with a fixed\nnavigation bar on top.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>, for applications that have a tab bar at the\nbottom with multiple pages.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "cupertino\/CupertinoPageRoute-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "cupertino",
    "name": "cupertino.CupertinoPageRoute",
    "shortname": "CupertinoPageRoute",
    "extends": [
        "widgets.PageRoute",
        "widgets.ModalRoute",
        "widgets.TransitionRoute",
        "widgets.OverlayRoute",
        "widgets.Route",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Builds the primary contents of the route.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WidgetBuilder builder\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/builder.html",
            "isDeprecated": "0",
            "type": "widgets.WidgetBuilder",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a page route for use in an iOS designed app.<\/p>\n<p>The <code>builder<\/code>, <code>maintainState<\/code>, and <code>fullscreenDialog<\/code> arguments must not\nbe null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoPageRoute({\n  @required this.builder,\n  this.title,\n  RouteSettings settings,\n  this.maintainState = true,\n  bool fullscreenDialog = false,\n}) : assert(builder != null),\n     assert(maintainState != null),\n     assert(fullscreenDialog != null),\n     assert(opaque),\n     super(settings: settings, fullscreenDialog: fullscreenDialog);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/CupertinoPageRoute.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "builder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.WidgetBuilder"
                },
                {
                    "name": "fullscreenDialog",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "maintainState",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "settings",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.RouteSettings"
                },
                {
                    "name": "title",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Override this method to build the primary content of this route.<\/p>\n<p>The arguments have the following meanings:<\/p>\n<ul>\n<li>\n<code>context<\/code>: The context in which the route is being built.<\/li>\n<li>\n<code>animation<\/code>: The animation for this route's transition. When entering,\nthe animation runs forward from 0.0 to 1.0. When exiting, this animation\nruns backwards from 1.0 to 0.0.<\/li>\n<li>\n<code>secondaryAnimation<\/code>: The animation for the route being pushed on top of\nthis route. This animation lets this route coordinate with the entrance\nand exit transition of routes pushed on top of this route.<\/li>\n<\/ul>\n<p>This method is only called when the route is first built, and rarely\nthereafter. In particular, it is not automatically called again when the\nroute's state changes unless it uses <a href=\"widgets\/ModalRoute\/of.html\">ModalRoute.of<\/a>. For a builder that\nis called every time the route's state changes, consider\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a>. For widgets that change their behavior when the\nroute's state changes, consider <a href=\"widgets\/ModalRoute\/of.html\">ModalRoute.of<\/a> to obtain a reference to\nthe route; this will cause the widget to be rebuilt each time the route\nchanges state.<\/p>\n<p>In general, <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a> should be used to build the page contents, and\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> for the widgets that change as the page is brought in\nand out of view. Avoid using <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> for content that never\nchanges; building such content once from <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a> is more efficient.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildPage(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation) {\n  final Widget result = Semantics(\n    scopesRoute: true,\n    explicitChildNodes: true,\n    child: builder(context),\n  );\n  assert(() {\n    if (result == null) {\n      throw FlutterError(\n        'The builder for route \"${settings.name}\" returned null.\\n'\n        'Route builders must never return null.'\n      );\n    }\n    return true;\n  }());\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/buildPage.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "animation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "secondaryAnimation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"cupertino\/CupertinoFullscreenDialogTransition-class.html\">CupertinoFullscreenDialogTransition<\/a> if <code>route<\/code> is a full\nscreen dialog, otherwise a <a href=\"cupertino\/CupertinoPageTransition-class.html\">CupertinoPageTransition<\/a> is returned.<\/p>\n<p>Used by <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">CupertinoPageRoute.buildTransitions<\/a>.<\/p>\n<p>This method can be applied to any <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>, not just\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>. It's typically used to provide a Cupertino style\nhorizontal transition for material widgets when the target platform\nis <a href=\"foundation\/TargetPlatform-class.html\">TargetPlatform.iOS<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/CupertinoPageTransitionsBuilder-class.html\">CupertinoPageTransitionsBuilder<\/a>, which uses this method to define a\n<a href=\"material\/PageTransitionsBuilder-class.html\">PageTransitionsBuilder<\/a> for the <a href=\"material\/PageTransitionsTheme-class.html\">PageTransitionsTheme<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Widget buildPageTransitions&lt;T&gt;(\n  PageRoute&lt;T&gt; route,\n  BuildContext context,\n  Animation&lt;double&gt; animation,\n  Animation&lt;double&gt; secondaryAnimation,\n  Widget child,\n) {\n  if (route.fullscreenDialog) {\n    return CupertinoFullscreenDialogTransition(\n      animation: animation,\n      child: child,\n    );\n  } else {\n    return CupertinoPageTransition(\n      primaryRouteAnimation: animation,\n      secondaryRouteAnimation: secondaryAnimation,\n      \/\/ In the middle of a back gesture drag, let the transition be linear to\n      \/\/ match finger motions.\n      linearTransition: _popGestureInProgress.contains(route),\n      child: _CupertinoBackGestureDetector&lt;T&gt;(\n        enabledCallback: () =&gt; _isPopGestureEnabled&lt;T&gt;(route),\n        onStartPopGesture: () =&gt; _startPopGesture&lt;T&gt;(route),\n        child: child,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/buildPageTransitions.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "animation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "route",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.PageRoute"
                },
                {
                    "name": "secondaryAnimation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                }
            ]
        },
        {
            "desc": "<p>Override this method to wrap the <code>child<\/code> with one or more transition\nwidgets that define how the route arrives on and leaves the screen.<\/p>\n<p>By default, the child (which contains the widget returned by <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>)\nis not wrapped in any transition widgets.<\/p>\n<p>The <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method, in contrast to <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>, is called each\ntime the <a href=\"widgets\/Route-class.html\">Route<\/a>'s state changes (e.g. the value of <a href=\"widgets\/ModalRoute\/canPop.html\">canPop<\/a>).<\/p>\n<p>The <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method is typically used to define transitions\nthat animate the new topmost route's comings and goings. When the\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack, the new route's\nprimary <code>animation<\/code> runs from 0.0 to 1.0. When the Navigator pops the\ntopmost route, e.g. because the use pressed the back button, the\nprimary animation runs from 1.0 to 0.0.<\/p>\n<p>The following example uses the primary animation to drive a\n<a href=\"widgets\/SlideTransition-class.html\">SlideTransition<\/a> that translates the top of the new route vertically\nfrom the bottom of the screen when it is pushed on the Navigator's\nstack. When the route is popped the SlideTransition translates the\nroute from the top of the screen back to the bottom.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">PageRouteBuilder(\n  pageBuilder: (BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n  ) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Hello')),\n      body: Center(\n        child: Text('Hello World'),\n      ),\n    );\n  },\n  transitionsBuilder: (\n      BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n   ) {\n    return SlideTransition(\n      position: Tween&lt;Offset&gt;(\n        begin: const Offset(0.0, 1.0),\n        end: Offset.zero,\n      ).animate(animation),\n      child: child, \/\/ child is the value returned by pageBuilder\n    );\n  },\n);\n<\/code><\/pre>\n<p>We've used <a href=\"widgets\/PageRouteBuilder-class.html\">PageRouteBuilder<\/a> to demonstrate the <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method\nhere. The body of an override of the <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method would be\ndefined in the same way.<\/p>\n<p>When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack, the\n<code>secondaryAnimation<\/code> can be used to define how the route that was on\nthe top of the stack leaves the screen. Similarly when the topmost route\nis popped, the secondaryAnimation can be used to define how the route\nbelow it reappears on the screen. When the Navigator pushes a new route\non the top of its stack, the old topmost route's secondaryAnimation\nruns from 0.0 to 1.0. When the Navigator pops the topmost route, the\nsecondaryAnimation for the route below it runs from 1.0 to 0.0.<\/p>\n<p>The example below adds a transition that's driven by the\n<code>secondaryAnimation<\/code>. When this route disappears because a new route has\nbeen pushed on top of it, it translates in the opposite direction of\nthe new route. Likewise when the route is exposed because the topmost\nroute has been popped off.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">  transitionsBuilder: (\n      BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n  ) {\n    return SlideTransition(\n      position: AlignmentTween(\n        begin: const Offset(0.0, 1.0),\n        end: Offset.zero,\n      ).animate(animation),\n      child: SlideTransition(\n        position: TweenOffset(\n          begin: Offset.zero,\n          end: const Offset(0.0, 1.0),\n        ).animate(secondaryAnimation),\n        child: child,\n      ),\n    );\n  }\n<\/code><\/pre>\n<p>In practice the <code>secondaryAnimation<\/code> is used pretty rarely.<\/p>\n<p>The arguments to this method are as follows:<\/p>\n<ul>\n<li>\n<code>context<\/code>: The context in which the route is being built.<\/li>\n<li>\n<code>animation<\/code>: When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack,\nthe new route's primary <code>animation<\/code> runs from 0.0 to 1.0. When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>\npops the topmost route this animation runs from 1.0 to 0.0.<\/li>\n<li>\n<code>secondaryAnimation<\/code>: When the Navigator pushes a new route\non the top of its stack, the old topmost route's <code>secondaryAnimation<\/code>\nruns from 0.0 to 1.0. When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pops the topmost route, the\n<code>secondaryAnimation<\/code> for the route below it runs from 1.0 to 0.0.<\/li>\n<li>\n<code>child<\/code>, the page contents, as returned by <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>, which is used to describe the actual contents of the page,\nand whose result is passed to the <code>child<\/code> argument of this method.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildTransitions(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation, Widget child) {\n  return buildPageTransitions&lt;T&gt;(this, context, animation, secondaryAnimation, child);\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/buildTransitions.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "animation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "secondaryAnimation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                }
            ]
        },
        {
            "desc": "<p>Returns true if <code>previousRoute<\/code> should animate when this route\nis pushed on top of it or when then this route is popped off of it.<\/p>\n<p>Subclasses can override this method to restrict the set of routes they\nneed to coordinate transitions with.<\/p>\n<p>If true, and <code>previousRoute.canTransitionTo()<\/code> is true, then the\nprevious route's <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> will\nrun from 0.0 - 1.0 when this route is pushed on top of\nit. Similarly, if this route is popped off of <code>previousRoute<\/code>\nthe previous route's <code>secondaryAnimation<\/code> will run from 1.0 - 0.0.<\/p>\n<p>If false, then the previous route's <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a>\n<code>secondaryAnimation<\/code> value will be kAlwaysDismissedAnimation. In\nother words <code>previousRoute<\/code> will not animate when this route is\npushed on top of it or when then this route is popped off of it.<\/p>\n<p>Returns true by default.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/canTransitionTo.html\">canTransitionTo<\/a>, which must be true for <code>previousRoute<\/code> for its\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> to run.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool canTransitionFrom(TransitionRoute&lt;dynamic&gt; previousRoute) {\n  return previousRoute is CupertinoPageRoute;\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/canTransitionFrom.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "previousRoute",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.TransitionRoute"
                }
            ]
        },
        {
            "desc": "<p>Returns true if this route supports a transition animation that runs\nwhen <code>nextRoute<\/code> is pushed on top of it or when <code>nextRoute<\/code> is popped\noff of it.<\/p>\n<p>Subclasses can override this method to restrict the set of routes they\nneed to coordinate transitions with.<\/p>\n<p>If true, and <code>nextRoute.canTransitionFrom()<\/code> is true, then the\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> will run from 0.0 - 1.0\nwhen <code>nextRoute<\/code> is pushed on top of this one.  Similarly, if\nthe <code>nextRoute<\/code> is popped off of this route, the\n<code>secondaryAnimation<\/code> will run from 1.0 - 0.0.<\/p>\n<p>If false, this route's <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> parameter\nvalue will be <a href=\"animation\/kAlwaysDismissedAnimation-constant.html\">kAlwaysDismissedAnimation<\/a>. In other words, this route\nwill not animate when when <code>nextRoute<\/code> is pushed on top of it or when\n<code>nextRoute<\/code> is popped off of it.<\/p>\n<p>Returns true by default.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/canTransitionFrom.html\">canTransitionFrom<\/a>, which must be true for <code>nextRoute<\/code> for the\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> to run.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool canTransitionTo(TransitionRoute&lt;dynamic&gt; nextRoute) {\n  \/\/ Don't perform outgoing animation if the next route is a fullscreen dialog.\n  return nextRoute is CupertinoPageRoute &amp;&amp; !nextRoute.fullscreenDialog;\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/canTransitionTo.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "nextRoute",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.TransitionRoute"
                }
            ]
        },
        {
            "desc": "<p>This route's previous route has changed to the given new route. This is\ncalled on a route whenever the previous route changes for any reason, so\nlong as it is in the history. <code>previousRoute<\/code> will be null if there's no\nprevious route.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didChangePrevious(Route&lt;dynamic&gt; previousRoute) {\n  final String previousTitleString = previousRoute is CupertinoPageRoute\n      ? previousRoute.title\n      : null;\n  if (_previousTitle == null) {\n    _previousTitle = ValueNotifier&lt;String&gt;(previousTitleString);\n  } else {\n    _previousTitle.value = previousTitleString;\n  }\n  super.didChangePrevious(previousRoute);\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/didChangePrevious.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "previousRoute",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>The route should remove its overlays and free any other resources.<\/p>\n<p>This route is no longer referenced by the navigator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _popGestureInProgress.remove(this);\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>True if a Cupertino pop gesture is currently underway for <code>route<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/popGestureEnabled.html\">popGestureEnabled<\/a>, which returns true if a user-triggered pop gesture\nwould be allowed.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isPopGestureInProgress(PageRoute&lt;dynamic&gt; route) =&gt; _popGestureInProgress.contains(route);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": [
                {
                    "name": "route",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.PageRoute"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use for the modal barrier. If this is null, the barrier will\nbe transparent.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>The color is ignored, and the barrier made invisible, when <a href=\"widgets\/ModalRoute\/offstage.html\">offstage<\/a> is\ntrue.<\/p>\n<p>While the route is animating into position, the color is animated from\ntransparent to the specified color.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRoute\/barrierDismissible.html\">barrierDismissible<\/a>, which controls the behavior of the barrier when\ntapped.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nColor get barrierColor =&gt; null;<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/barrierColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>The semantic label used for a dismissible barrier.<\/p>\n<p>If the barrier is dismissible, this label will be read out if\naccessibility tools (like VoiceOver on iOS) focus on the barrier.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRoute\/barrierDismissible.html\">barrierDismissible<\/a>, which controls the behavior of the barrier when\ntapped.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get barrierLabel =&gt; null;<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/barrierLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>A short description of this route useful for debugging.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugLabel =&gt; '${super.debugLabel}(${settings.name})';<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/debugLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>Whether the route should remain in memory when it is inactive.<\/p>\n<p>If this is true, then the route is maintained, so that any futures it is\nholding from the next route will properly resolve when the next route\npops. If this is not necessary, this can be set to false to allow the\nframework to entirely discard the route's widget hierarchy when it is not\nvisible.<\/p>\n<p>The value of this getter should not change during the lifetime of the\nobject. It is used by <a href=\"widgets\/ModalRoute\/createOverlayEntries.html\">createOverlayEntries<\/a>, which is called by\n<a href=\"widgets\/ModalRoute\/install.html\">install<\/a> near the beginning of the route lifecycle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainState\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/maintainState.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>Whether a pop gesture can be started by the user.<\/p>\n<p>Returns true if the user can edge-swipe to a previous route.<\/p>\n<p>Returns false once <a href=\"cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html\">isPopGestureInProgress<\/a> is true, but\n<a href=\"cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html\">isPopGestureInProgress<\/a> can only become true if <a href=\"cupertino\/CupertinoPageRoute\/popGestureEnabled.html\">popGestureEnabled<\/a> was\ntrue first.<\/p>\n<p>This should only be used between frames, not during build.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get popGestureEnabled =&gt; _isPopGestureEnabled(this);<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/popGestureEnabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>True if a Cupertino pop gesture is currently underway for this route.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html\">isPopGestureInProgress<\/a>, which returns true if a Cupertino pop gesture\nis currently underway for specific route.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute\/popGestureEnabled.html\">popGestureEnabled<\/a>, which returns true if a user-triggered pop gesture\nwould be allowed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get popGestureInProgress =&gt; isPopGestureInProgress(this);<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/popGestureInProgress.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>The title string of the previous <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.<\/p>\n<p>The <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a>'s value is readable after the route is installed\nonto a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>. The <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> will also notify its listeners\nif the value changes (such as by replacing the previous route).<\/p>\n<p>The <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> itself will be null before the route is installed.\nIts content value will be null if the previous route has no title or\nis not a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ValueListenableBuilder-class.html\">ValueListenableBuilder<\/a>, which can be used to listen and rebuild\nwidgets based on a ValueListenable.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueListenable&lt;String&gt; get previousTitle {\n  assert(\n    _previousTitle != null,\n    'Cannot read the previousTitle for a route that has not yet been installed',\n  );\n  return _previousTitle;\n}<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/previousTitle.html",
            "isDeprecated": "0",
            "type": "foundation.ValueListenable<dart:core.String>",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>A title string for this route.<\/p>\n<p>Used to auto-populate <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> and\n<a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>'s <code>middle<\/code>\/<code>largeTitle<\/code> widgets when\none is not manually supplied.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String title\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/title.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        },
        {
            "desc": "<p>The duration the transition lasts.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ A relatively rigorous eyeball estimation.\nDuration get transitionDuration =&gt; const Duration(milliseconds: 400);<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageRoute\/transitionDuration.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "memberOf": "cupertino.CupertinoPageRoute",
            "params": []
        }
    ]
}