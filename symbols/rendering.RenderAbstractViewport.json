{
    "name": "rendering.RenderAbstractViewport",
    "extends": [
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "getOffsetToReveal",
            "type": "rendering.RevealedOffset",
            "desc": "<p>Returns the offset that would be needed to reveal the <code>target<\/code>\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>The optional <code>rect<\/code> parameter describes which area of that <code>target<\/code> object\nshould be revealed in the viewport. If <code>rect<\/code> is null, the entire\n<code>target<\/code> <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> (as defined by its <a href=\"rendering\/RenderObject\/paintBounds.html\">RenderObject.paintBounds<\/a>)\nwill be revealed. If <code>rect<\/code> is provided it has to be given in the\ncoordinate system of the <code>target<\/code> object.<\/p>\n<p>The <code>alignment<\/code> argument describes where the target should be positioned\nafter applying the returned offset. If <code>alignment<\/code> is 0.0, the child must\nbe positioned as close to the leading edge of the viewport as possible. If\n<code>alignment<\/code> is 1.0, the child must be positioned as close to the trailing\nedge of the viewport as possible. If <code>alignment<\/code> is 0.5, the child must be\npositioned as close to the center of the viewport as possible.<\/p>\n<p>The <code>target<\/code> might not be a direct child of this viewport but it must be a\ndescendant of the viewport. Other viewports in between this viewport and\nthe <code>target<\/code> will not be adjusted.<\/p>\n<p>This method assumes that the content of the viewport moves linearly, i.e.\nwhen the offset of the viewport is changed by x then <code>target<\/code> also moves\nby x within the viewport.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RevealedOffset-class.html\">RevealedOffset<\/a>, which describes the return value of this method.<\/li><\/ul>",
            "static": false,
            "memberOf": "rendering.RenderAbstractViewport",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderAbstractViewport\/getOffsetToReveal.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RevealedOffset getOffsetToReveal(RenderObject target, double alignment, { Rect rect });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "of",
            "type": "rendering.RenderAbstractViewport",
            "desc": "<p>Returns the <a href=\"rendering\/RenderAbstractViewport-class.html\">RenderAbstractViewport<\/a> that most tightly encloses the given\nrender object.<\/p>\n<p>If the object does not have a <a href=\"rendering\/RenderAbstractViewport-class.html\">RenderAbstractViewport<\/a> as an ancestor,\nthis function returns null.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderAbstractViewport",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderAbstractViewport\/of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RenderAbstractViewport of(RenderObject object) {\n  while (object != null) {\n    if (object is RenderAbstractViewport)\n      return object;\n    object = object.parent;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "type": "",
            "href": "rendering\/RenderAbstractViewport\/defaultCacheExtent-constant.html",
            "desc": "<p>The default value for the cache extent of the viewport.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderViewportBase\/cacheExtent.html\">RenderViewportBase.cacheExtent<\/a> for a definition of the cache extent.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double defaultCacheExtent = 250.0\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "defaultCacheExtent",
            "memberOf": "rendering.RenderAbstractViewport"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/RenderAbstractViewport-class.html",
    "desc": "<p>An interface for render objects that are bigger on the inside.<\/p>\n<p>Some render objects, such as <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a>, present a portion of their\ncontent, which can be controlled by a <a href=\"rendering\/ViewportOffset-class.html\">ViewportOffset<\/a>. This interface lets\nthe framework recognize such render objects and interact with them without\nhaving specific knowledge of all the various types of viewports.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RenderAbstractViewport"
}