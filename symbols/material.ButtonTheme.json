{
    "desc": "<p>Used with <a href=\"material\/ButtonThemeData-class.html\">ButtonThemeData<\/a> to configure the color and geometry of buttons.<\/p>\n<p>A button theme can be specified as part of the overall Material theme\nusing <a href=\"material\/ThemeData\/buttonTheme.html\">ThemeData.buttonTheme<\/a>. The Material theme's button theme data\ncan be overridden with <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>.<\/p>\n<p>The actual appearance of buttons depends on the button theme, the\nbutton's enabled state, its elevation (if any), and the overall <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/FlatButton-class.html\">FlatButton<\/a> <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, and <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>, which are styled\nbased on the ambient button theme.<\/li>\n<li>\n<a href=\"material\/RawMaterialButton-class.html\">RawMaterialButton<\/a>, which can be used to configure a button that doesn't\ndepend on any inherited themes.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/ButtonTheme-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.ButtonTheme",
    "shortname": "ButtonTheme",
    "extends": [
        "widgets.InheritedWidget",
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a button theme.<\/p>\n<p>The <code>textTheme<\/code>, <code>minWidth<\/code>, <code>height<\/code>, and <code>colorScheme<\/code> arguments\nmust not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ButtonTheme({\n  Key key,\n  ButtonTextTheme textTheme = ButtonTextTheme.normal,\n  ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded,\n  double minWidth = 88.0,\n  double height = 36.0,\n  EdgeInsetsGeometry padding,\n  ShapeBorder shape,\n  bool alignedDropdown = false,\n  Color buttonColor,\n  Color disabledColor,\n  Color highlightColor,\n  Color splashColor,\n  ColorScheme colorScheme,\n  MaterialTapTargetSize materialTapTargetSize,\n  Widget child,\n}) : assert(textTheme != null),\n     assert(minWidth != null &amp;&amp; minWidth &gt;= 0.0),\n     assert(height != null &amp;&amp; height &gt;= 0.0),\n     assert(alignedDropdown != null),\n     assert(layoutBehavior != null),\n     data = ButtonThemeData(\n       textTheme: textTheme,\n       minWidth: minWidth,\n       height: height,\n       padding: padding,\n       shape: shape,\n       alignedDropdown: alignedDropdown,\n       layoutBehavior: layoutBehavior,\n       buttonColor: buttonColor,\n       disabledColor: disabledColor,\n       highlightColor: highlightColor,\n       splashColor: splashColor,\n       colorScheme: colorScheme,\n       materialTapTargetSize: materialTapTargetSize,\n     ),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "material\/ButtonTheme\/ButtonTheme.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ButtonTheme",
            "params": [
                {
                    "name": "alignedDropdown",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "buttonColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "colorScheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "disabledColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "highlightColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "layoutBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ButtonBarLayoutBehavior"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "minWidth",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "splashColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textTheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ButtonTextTheme"
                }
            ]
        },
        {
            "desc": "<p>The closest instance of this class that encloses the given context.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">ButtonThemeData theme = ButtonTheme.of(context);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ButtonThemeData of(BuildContext context) {\n  final ButtonTheme inheritedButtonTheme = context.inheritFromWidgetOfExactType(ButtonTheme);\n  ButtonThemeData buttonTheme = inheritedButtonTheme?.data;\n  if (buttonTheme?.colorScheme == null) { \/\/ if buttonTheme or buttonTheme.colorScheme is null\n    final ThemeData theme = Theme.of(context);\n    buttonTheme ??= theme.buttonTheme;\n    if (buttonTheme.colorScheme == null) {\n      buttonTheme = buttonTheme.copyWith(\n        colorScheme: theme.buttonTheme.colorScheme ?? theme.colorScheme,\n      );\n      assert(buttonTheme.colorScheme != null);\n    }\n  }\n  return buttonTheme;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonTheme\/of.html",
            "isDeprecated": "0",
            "type": "material.ButtonThemeData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonTheme",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(ButtonTheme oldWidget) =&gt; data != oldWidget.data;<\/code><\/pre>\n    ",
            "href": "material\/ButtonTheme\/updateShouldNotify.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonTheme",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.ButtonTheme"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Specifies the color and geometry of buttons.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ButtonThemeData data\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonTheme\/data.html",
            "isDeprecated": "0",
            "type": "material.ButtonThemeData",
            "memberOf": "material.ButtonTheme",
            "params": []
        }
    ]
}