{
    "name": "material.VerticalDivider",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "VerticalDivider",
            "type": "",
            "desc": "<p>Creates a material design divider.<\/p>\n<p>The width must be positive.<\/p>\n    ",
            "static": false,
            "memberOf": "material.VerticalDivider",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "indent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/VerticalDivider\/VerticalDivider.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const VerticalDivider({\n  Key key,\n  this.width = 16.0,\n  this.indent = 0.0,\n  this.color,\n}) : assert(width &gt;= 0.0),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/VerticalDivider\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.VerticalDivider",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/VerticalDivider\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return SizedBox(\n    width: width,\n    child: Center(\n      child: Container(\n        width: 0.0,\n        margin: EdgeInsetsDirectional.only(start: indent),\n        decoration: BoxDecoration(\n          border: Border(\n            left: Divider.createBorderSide(context, color: color),\n          ),\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "color",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color to use when painting the line.<\/p>\n<p>Defaults to the current theme's divider color, given by\n<a href=\"material\/ThemeData\/dividerColor.html\">ThemeData.dividerColor<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Divider(\n  color: Colors.deepOrange,\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "memberOf": "material.VerticalDivider",
            "isConstant": false,
            "href": "material\/VerticalDivider\/color.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "indent",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The amount of empty space to the left of the divider.<\/p>\n        ",
            "memberOf": "material.VerticalDivider",
            "isConstant": false,
            "href": "material\/VerticalDivider\/indent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double indent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "width",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The divider's width.<\/p>\n<p>The divider itself is always drawn as one device pixel thick\nline that is centered within the width specified by this value.<\/p>\n<p>A divider with a <a href=\"material\/VerticalDivider\/width.html\">width<\/a> of 0.0 is always drawn as a line with a width\nof exactly one device pixel, without any padding around it.<\/p>\n        ",
            "memberOf": "material.VerticalDivider",
            "isConstant": false,
            "href": "material\/VerticalDivider\/width.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/VerticalDivider-class.html",
    "desc": "<p>A one device pixel thick vertical line, with padding on either\nside.<\/p>\n<p>In the material design language, this represents a divider.<\/p>\n<p>Dividers can be used in lists, <a href=\"material\/Drawer-class.html\">Drawer<\/a>s, and elsewhere to separate content\nhorizontally. To create a one-pixel divider between items in a list,\nconsider using <a href=\"material\/ListTile\/divideTiles.html\">ListTile.divideTiles<\/a>, which is optimized for this case.<\/p>\n<p>The box's total width is controlled by <a href=\"material\/VerticalDivider\/width.html\">width<\/a>. The appropriate\npadding is automatically computed from the width.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/PopupMenuDivider-class.html\">PopupMenuDivider<\/a>, which is the equivalent but for popup menus.<\/li>\n<li>\n<a href=\"material\/ListTile\/divideTiles.html\">ListTile.divideTiles<\/a>, another approach to dividing widgets in a list.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/dividers.html\">material.io\/design\/components\/dividers.html<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "VerticalDivider"
}