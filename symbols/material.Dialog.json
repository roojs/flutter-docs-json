{
    "desc": "<p>A material design dialog.<\/p>\n<p>This dialog widget does not have any opinion about the contents of the\ndialog. Rather than using this widget directly, consider using <a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a>\nor <a href=\"material\/SimpleDialog-class.html\">SimpleDialog<\/a>, which implement specific kinds of material design\ndialogs.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/AlertDialog-class.html\">AlertDialog<\/a>, for dialogs that have a message and some buttons.<\/li>\n<li>\n<a href=\"material\/SimpleDialog-class.html\">SimpleDialog<\/a>, for dialogs that offer a variety of options.<\/li>\n<li>\n<a href=\"material\/showDialog.html\">showDialog<\/a>, which actually displays the dialog and returns its result.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/dialogs.html\">material.io\/design\/components\/dialogs.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Dialog-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Dialog",
    "shortname": "Dialog",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a dialog.<\/p>\n<p>Typically used in conjunction with <a href=\"material\/showDialog.html\">showDialog<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Dialog({\n  Key key,\n  this.backgroundColor,\n  this.elevation,\n  this.insetAnimationDuration = const Duration(milliseconds: 100),\n  this.insetAnimationCurve = Curves.decelerate,\n  this.shape,\n  this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Dialog\/Dialog.html",
            "isDeprecated": false,
            "type": "",
            "name": "Dialog",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Dialog",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "insetAnimationCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "insetAnimationDuration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/Dialog\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final DialogTheme dialogTheme = DialogTheme.of(context);\n  return AnimatedPadding(\n    padding: MediaQuery.of(context).viewInsets + const EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0),\n    duration: insetAnimationDuration,\n    curve: insetAnimationCurve,\n    child: MediaQuery.removeViewInsets(\n      removeLeft: true,\n      removeTop: true,\n      removeRight: true,\n      removeBottom: true,\n      context: context,\n      child: Center(\n        child: ConstrainedBox(\n          constraints: const BoxConstraints(minWidth: 280.0),\n          child: Material(\n            color: backgroundColor ?? dialogTheme.backgroundColor ?? Theme.of(context).dialogBackgroundColor,\n            elevation: elevation ?? dialogTheme.elevation ?? _defaultElevation,\n            shape: shape ?? dialogTheme.shape ?? _defaultDialogShape,\n            type: MaterialType.card,\n            child: child,\n          ),\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Dialog\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Dialog",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The background color of the surface of this <a href=\"material\/Dialog-class.html\">Dialog<\/a>.<\/p>\n<p>This sets the <a href=\"material\/Material\/color.html\">Material.color<\/a> on this <a href=\"material\/Dialog-class.html\">Dialog<\/a>'s <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>If <code>null<\/code>, <a href=\"material\/ThemeData\/cardColor.html\">ThemeData.cardColor<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/Dialog\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.Dialog",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/Dialog\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Dialog",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate of this <a href=\"material\/Dialog-class.html\">Dialog<\/a>.<\/p>\n<p>If null then <a href=\"material\/Dialog\/elevation.html\">DialogTheme.elevation<\/a> is used, and if that's null then the\ndialog's elevation is 24.0.The z-coordinate at which to place this material relative to its parent.<\/p>\n<p>This controls the size of the shadow below the material.<\/p>\n<p>If this is non-zero, the contents of the material are clipped, because the\nwidget conceptually defines an independent printed piece of material.<\/p>\n<p>Defaults to 0. Changing this value will cause the shadow to animate over\n<code>animationDuration<\/code>.<\/p>\n<p>The value is non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/Dialog\/elevation.html",
            "name": "elevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "material.Dialog",
            "params": []
        },
        {
            "desc": "<p>The curve to use for the animation shown when the system keyboard intrudes\ninto the space that the dialog is placed in.<\/p>\n<p>Defaults to <a href=\"animation\/Curves\/fastOutSlowIn-constant.html\">Curves.fastOutSlowIn<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve insetAnimationCurve\n\n<\/code><\/pre>\n        ",
            "href": "material\/Dialog\/insetAnimationCurve.html",
            "name": "insetAnimationCurve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "memberOf": "material.Dialog",
            "params": []
        },
        {
            "desc": "<p>The duration of the animation to show when the system keyboard intrudes\ninto the space that the dialog is placed in.<\/p>\n<p>Defaults to 100 milliseconds.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration insetAnimationDuration\n\n<\/code><\/pre>\n        ",
            "href": "material\/Dialog\/insetAnimationDuration.html",
            "name": "insetAnimationDuration",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "memberOf": "material.Dialog",
            "params": []
        },
        {
            "desc": "<p>The shape of this dialog's border.<\/p>\n<p>Defines the dialog's <a href=\"material\/Dialog\/shape.html\">Material.shape<\/a>.<\/p>\n<p>The default shape is a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> with a radius of 2.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/Dialog\/shape.html",
            "name": "shape",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "memberOf": "material.Dialog",
            "params": []
        }
    ]
}