{
    "name": "dart:core.RangeError",
    "extends": [
        "dart:core.ArgumentError",
        "dart:core.Error",
        "dart:core.Object"
    ],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "RangeError",
            "type": "",
            "desc": "<p>Create a new <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> with the given <code>message<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/RangeError\/RangeError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nRangeError(var message)\n    : start = null,\n      end = null,\n      super(message);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "checkNotNegative",
            "type": "",
            "desc": "<p>Check that an integer value isn't negative.<\/p>\n<p>Throws if the value is negative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/RangeError\/checkNotNegative.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void checkNotNegative(int value, [String name, String message]) {\n  if (value &lt; 0) throw new RangeError.range(value, 0, null, name, message);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "checkValidIndex",
            "type": "",
            "desc": "<p>Check that a value is a valid index into an indexable object.<\/p>\n<p>Throws if <code>index<\/code> is not a valid index into <code>indexable<\/code>.<\/p>\n<p>An indexable object is one that has a <code>length<\/code> and a and index-operator\n<code>[]<\/code> that accepts an index if <code>0 &lt;= index &lt; length<\/code>.<\/p>\n<p>If <code>length<\/code> is provided, it is used as the length of the indexable object,\notherwise the length is found as <code>indexable.length<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "indexable",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/RangeError\/checkValidIndex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void checkValidIndex(int index, dynamic indexable,\n    [String name, int length, String message]) {\n  length ??= indexable.length;\n  \/\/ Comparing with `0` as receiver produces better dart2js type inference.\n  if (0 &gt; index || index &gt;= length) {\n    name ??= \"index\";\n    throw new RangeError.index(index, indexable, name, message, length);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "checkValidRange",
            "type": "dart:core.int",
            "desc": "<p>Check that a range represents a slice of an indexable object.<\/p>\n<p>Throws if the range is not valid for an indexable object with\nthe given <code>length<\/code>.\nA range is valid for an indexable object with a given <code>length<\/code><\/p>\n<p>if <code>0 &lt;= [start] &lt;= [end] &lt;= [length]<\/code>.\nAn <code>end<\/code> of <code>null<\/code> is considered equivalent to <code>length<\/code>.<\/p>\n<p>The <code>startName<\/code> and <code>endName<\/code> defaults to <code>\"start\"<\/code> and <code>\"end\"<\/code>,\nrespectively.<\/p>\n<p>Returns the actual <code>end<\/code> value, which is <code>length<\/code> if <code>end<\/code> is <code>null<\/code>,\nand <code>end<\/code> otherwise.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "startName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/RangeError\/checkValidRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int checkValidRange(int start, int end, int length,\n    [String startName, String endName, String message]) {\n  \/\/ Comparing with `0` as receiver produces better dart2js type inference.\n  \/\/ Ditto `start &gt; end` below.\n  if (0 &gt; start || start &gt; length) {\n    startName ??= \"start\";\n    throw new RangeError.range(start, 0, length, startName, message);\n  }\n  if (end != null) {\n    if (start &gt; end || end &gt; length) {\n      endName ??= \"end\";\n      throw new RangeError.range(end, start, length, endName, message);\n    }\n    return end;\n  }\n  return length;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "checkValueInInterval",
            "type": "",
            "desc": "<p>Check that a <code>value<\/code> lies in a specific interval.<\/p>\n<p>Throws if <code>value<\/code> is not in the interval.\nThe interval is from <code>minValue<\/code> to <code>maxValue<\/code>, both inclusive.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "minValue",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxValue",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/RangeError\/checkValueInInterval.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void checkValueInInterval(int value, int minValue, int maxValue,\n    [String name, String message]) {\n  if (value &lt; minValue || value &gt; maxValue) {\n    throw new RangeError.range(value, minValue, maxValue, name, message);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "RangeError.index",
            "type": "",
            "desc": "<p>Creates a new <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> stating that <code>index<\/code> is not a valid index\ninto <code>indexable<\/code>.<\/p>\n<p>An optional <code>name<\/code> can specify the argument name that has the\ninvalid value, and the <code>message<\/code> can override the default error\ndescription.<\/p>\n<p>The <code>length<\/code> is the length of <code>indexable<\/code> at the time of the error.\nIf <code>length<\/code> is omitted, it defaults to <code>indexable.length<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "indexable",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/RangeError\/RangeError.index.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RangeError.index(int index, dynamic indexable,\n    [String name, String message, int length]) = IndexError;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "RangeError.range",
            "type": "",
            "desc": "<p>Create a new <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> for a value being outside the valid range.<\/p>\n<p>The allowed range is from <code>minValue<\/code> to <code>maxValue<\/code>, inclusive.\nIf <code>minValue<\/code> or <code>maxValue<\/code> are <code>null<\/code>, the range is infinite in\nthat direction.<\/p>\n<p>For a range from 0 to the length of something, end exclusive, use\n<a href=\"dart-core\/RangeError\/RangeError.index.html\">RangeError.index<\/a>.<\/p>\n<p>An optional <code>name<\/code> can specify the argument name that has the\ninvalid value, and the <code>message<\/code> can override the default error\ndescription.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "invalidValue",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "minValue",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxValue",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/RangeError\/RangeError.range.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nRangeError.range(num invalidValue, int minValue, int maxValue,\n    [String name, String message])\n    : start = minValue,\n      end = maxValue,\n      super.value(\n          invalidValue, name, (message != null) ? message : \"Invalid value\");<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "RangeError.value",
            "type": "",
            "desc": "<p>Create a new <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> with a message for the given <code>value<\/code>.<\/p>\n<p>An optional <code>name<\/code> can specify the argument name that has the\ninvalid value, and the <code>message<\/code> can override the default error\ndescription.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.RangeError",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/RangeError\/RangeError.value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RangeError.value(num value, [String name, String message])\n    : start = null,\n      end = null,\n      super.value(\n          value, name, (message != null) ? message : \"Value not in range\");<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "end",
            "type": "dart:core.num",
            "types": [],
            "desc": "<p>The maximum value that <a href=\"dart-core\/RangeError\/RangeError.value.html\">value<\/a> is allowed to assume.<\/p>\n        ",
            "memberOf": "dart:core.RangeError",
            "isConstant": false,
            "href": "dart-core\/RangeError\/end.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final num end\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "start",
            "type": "dart:core.num",
            "types": [],
            "desc": "<p>The minimum value that <a href=\"dart-core\/RangeError\/RangeError.value.html\">value<\/a> is allowed to assume.<\/p>\n        ",
            "memberOf": "dart:core.RangeError",
            "isConstant": false,
            "href": "dart-core\/RangeError\/start.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final num start\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-core\/RangeError-class.html",
    "desc": "<p>Error thrown due to an index being outside a valid range.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RangeError"
}