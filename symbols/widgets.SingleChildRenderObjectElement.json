{
    "desc": "<p>An <a href=\"widgets\/Element-class.html\">Element<\/a> that uses a <a href=\"widgets\/SingleChildRenderObjectWidget-class.html\">SingleChildRenderObjectWidget<\/a> as its configuration.<\/p>\n<p>The child is optional.<\/p>\n<p>This element subclass can be used for RenderObjectWidgets whose\nRenderObjects use the <a href=\"rendering\/RenderObjectWithChildMixin-mixin.html\">RenderObjectWithChildMixin<\/a> mixin. Such widgets are\nexpected to inherit from <a href=\"widgets\/SingleChildRenderObjectWidget-class.html\">SingleChildRenderObjectWidget<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/SingleChildRenderObjectElement-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.SingleChildRenderObjectElement",
    "shortname": "SingleChildRenderObjectElement",
    "extends": [
        "widgets.RenderObjectElement",
        "widgets.Element",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an element that uses the given widget as its configuration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SingleChildRenderObjectElement(SingleChildRenderObjectWidget widget) : super(widget);<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/SingleChildRenderObjectElement.html",
            "isDeprecated": "0",
            "type": "",
            "name": "SingleChildRenderObjectElement",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "widget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.SingleChildRenderObjectWidget"
                }
            ]
        },
        {
            "desc": "<p>Remove the given child from the element's child list, in preparation for\nthe child being reused elsewhere in the element tree.<\/p>\n<p>This updates the child model such that, e.g., <a href=\"widgets\/SingleChildRenderObjectElement\/visitChildren.html\">visitChildren<\/a> does not\nwalk that child anymore.<\/p>\n<p>The element will still have a valid parent when this is called. After this\nis called, <a href=\"widgets\/Element\/deactivateChild.html\">deactivateChild<\/a> is called to sever the link to this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid forgetChild(Element child) {\n  assert(child == _child);\n  _child = null;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/forgetChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "forgetChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Insert the given child into <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a> at the given slot.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid insertChildRenderObject(RenderObject child, dynamic slot) {\n  final RenderObjectWithChildMixin&lt;RenderObject&gt; renderObject = this.renderObject;\n  assert(slot == null);\n  assert(renderObject.debugValidateChild(child));\n  renderObject.child = child;\n  assert(renderObject == this.renderObject);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/insertChildRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "insertChildRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "slot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Add this element to the tree in the given slot of the given parent.<\/p>\n<p>The framework calls this function when a newly created element is added to\nthe tree for the first time. Use this method to initialize state that\ndepends on having a parent. State that is independent of the parent can\nmore easily be initialized in the constructor.<\/p>\n<p>This method transitions the element from the \"initial\" lifecycle state to\nthe \"active\" lifecycle state.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid mount(Element parent, dynamic newSlot) {\n  super.mount(parent, newSlot);\n  _child = updateChild(_child, widget.child, null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/mount.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "mount",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "newSlot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "parent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Move the given child to the given slot.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid moveChildRenderObject(RenderObject child, dynamic slot) {\n  assert(false);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/moveChildRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "moveChildRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "slot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Remove the given child from <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a>.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeChildRenderObject(RenderObject child) {\n  final RenderObjectWithChildMixin&lt;RenderObject&gt; renderObject = this.renderObject;\n  assert(renderObject.child == child);\n  renderObject.child = null;\n  assert(renderObject == this.renderObject);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/removeChildRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "removeChildRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Change the widget used to configure this element.<\/p>\n<p>The framework calls this function when the parent wishes to use a\ndifferent widget to configure this element. The new widget is guaranteed\nto have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as the old widget.<\/p>\n<p>This function is called only during the \"active\" lifecycle state.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid update(SingleChildRenderObjectWidget newWidget) {\n  super.update(newWidget);\n  assert(widget == newWidget);\n  _child = updateChild(_child, widget.child, null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/update.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "update",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "newWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.SingleChildRenderObjectWidget"
                }
            ]
        },
        {
            "desc": "<p>Calls the argument for each child. Must be overridden by subclasses that\nsupport having children.<\/p>\n<p>There is no guaranteed order in which the children will be visited, though\nit should be consistent over time.<\/p>\n<p>Calling this during build is dangerous: the child list might still be\nbeing updated at that point, so the children might not be constructed yet,\nor might be old children that are going to be replaced. This method should\nonly be called if it is provable that the children are available.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildren(ElementVisitor visitor) {\n  if (_child != null)\n    visitor(_child);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/SingleChildRenderObjectElement\/visitChildren.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "visitChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ElementVisitor"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The configuration for this element.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSingleChildRenderObjectWidget get widget =&gt; super.widget;<\/code><\/pre>\n        ",
            "href": "widgets\/SingleChildRenderObjectElement\/widget.html",
            "name": "widget",
            "isDeprecated": false,
            "type": "widgets.SingleChildRenderObjectWidget",
            "memberOf": "widgets.SingleChildRenderObjectElement",
            "params": []
        }
    ]
}