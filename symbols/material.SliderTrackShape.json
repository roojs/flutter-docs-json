{
    "name": "material.SliderTrackShape",
    "extends": [],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "SliderTrackShape",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "material.SliderTrackShape",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "material\/SliderTrackShape\/SliderTrackShape.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SliderTrackShape();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getPreferredRect",
            "type": "dart:ui.Rect",
            "desc": "<p>Returns the preferred bounds of the shape.<\/p>\n<p>It is used to provide horizontal boundaries for the thumb's position, and\nto help position the slider thumb and tick marks relative to the track.<\/p>\n<p><code>parentBox<\/code> can be used to help determine the preferredRect relative to\nattributes of the render box of the slider itself, such as size.<\/p>\n<p><code>offset<\/code> is relative to the caller's bounding box. It can be used to\nconvert gesture coordinates from global to slider-relative coordinates.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.<\/p>\n<p><code>isDiscrete<\/code> is true if <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> is non-null. If true, the\nslider will render tick marks on top of the track.<\/p>\n    ",
            "static": false,
            "memberOf": "material.SliderTrackShape",
            "sig": "",
            "params": [
                {
                    "name": "parentBox",
                    "type": "rendering.RenderBox",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sliderTheme",
                    "type": "material.SliderThemeData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDiscrete",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/SliderTrackShape\/getPreferredRect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect getPreferredRect({\n  RenderBox parentBox,\n  Offset offset = Offset.zero,\n  SliderThemeData sliderTheme,\n  bool isEnabled,\n  bool isDiscrete,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "paint",
            "type": "",
            "desc": "<p>Paints the track shape based on the state passed to it.<\/p>\n<p><code>context<\/code> is the same context for the render box of the <a href=\"material\/Slider-class.html\">Slider<\/a>.<\/p>\n<p><code>offset<\/code> is the offset of the origin of the <code>parentBox<\/code> to the origin of\nits <code>context<\/code> canvas. This shape must be painted relative to this\noffset. See <a href=\"rendering\/PaintingContextCallback.html\">PaintingContextCallback<\/a>.<\/p>\n<p><code>parentBox<\/code> is the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> of the <a href=\"material\/Slider-class.html\">Slider<\/a>. Its attributes, such as\nsize, can be used to assist in painting this shape.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>enableAnimation<\/code> is an animation triggered when the <a href=\"material\/Slider-class.html\">Slider<\/a> is enabled,\nand it reverses when the slider is disabled. Enabled is the\n<code>Slider.isInteractive<\/code> state. Use this to paint intermediate frames for\nthis shape when the slider changes enabled state.<\/p>\n<p><code>thumbCenter<\/code> is the offset of the center of the thumb relative to the\norigin of the <a href=\"rendering\/PaintingContext\/canvas.html\">PaintingContext.canvas<\/a>. It can be used as the point that\ndivides the track into 2 segments.<\/p>\n<p><code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.<\/p>\n<p><code>isDiscrete<\/code> is true if <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> is non-null. If true, the\nslider will render tick marks on top of the track.<\/p>\n<p><code>textDirection<\/code> can be used to determine how the track segments are\npainted depending on whether they are active or not. The track segment\nbetween the start of the slider and the thumb is the active track segment.\nThe track segment between the thumb and the end of the slider is the\ninactive track segment. In LTR text direction, the start of the slider is\non the left, and in RTL text direction, the start of the slider is on the\nright.<\/p>\n    ",
            "static": false,
            "memberOf": "material.SliderTrackShape",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "rendering.PaintingContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "parentBox",
                    "type": "rendering.RenderBox",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sliderTheme",
                    "type": "material.SliderThemeData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "enableAnimation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "thumbCenter",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDiscrete",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/SliderTrackShape\/paint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(\n  PaintingContext context,\n  Offset offset, {\n  RenderBox parentBox,\n  SliderThemeData sliderTheme,\n  Animation&lt;double&gt; enableAnimation,\n  Offset thumbCenter,\n  bool isEnabled,\n  bool isDiscrete,\n  TextDirection textDirection,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "material.RectangularSliderTrackShape"
    ],
    "realImplementors": [
        "material.RectangularSliderTrackShape"
    ],
    "cn": [],
    "href": "material\/SliderTrackShape-class.html",
    "desc": "<p><a href=\"package-path_path\/context.html\">context<\/a> is the same context for the render box of the <a href=\"material\/Slider-class.html\">Slider<\/a>.\n<a href=\"quiver.strings\/center.html\">center<\/a> is the offset of the center where this shape should be painted.\nThis offset is relative to the origin of the <a href=\"package-path_path\/context.html\">context<\/a> canvas.\n<code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.\n<code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.\n<code>enableAnimation<\/code> is an animation triggered when the <a href=\"material\/Slider-class.html\">Slider<\/a> is enabled,\nand it reverses when the slider is disabled. Enabled is the\n<code>Slider.isInteractive<\/code> state. Use this to paint intermediate frames for\nthis shape when the slider changes enabled state.\n<code>isDiscrete<\/code> is true if <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> is non-null. If true, the\nslider will render tick marks on top of the track.\n<code>parentBox<\/code> is the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> of the <a href=\"material\/Slider-class.html\">Slider<\/a>. Its attributes, such as\nsize, can be used to assist in painting this shape.Base class for slider track shapes.<\/p>\n<p>The slider's thumb moves along the track. A discrete slider's tick marks\nare drawn after the track, but before the thumb, and are aligned with the\ntrack.<\/p>\n<p>The <a href=\"material\/SliderTrackShape\/getPreferredRect.html\">getPreferredRect<\/a> helps position the slider thumb and tick marks\nrelative to the track.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/RectangularSliderTrackShape-class.html\">RectangularSliderTrackShape<\/a>, which is the default track shape.<\/li>\n<li>\n<a href=\"material\/SliderTickMarkShape-class.html\">SliderTickMarkShape<\/a>, which is the default tick mark shape.<\/li>\n<li>\n<a href=\"material\/SliderComponentShape-class.html\">SliderComponentShape<\/a>, which is the base class for custom a component\nshape.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SliderTrackShape"
}