{
    "desc": "<p>A <a href=\"widgets\/Stack-class.html\">Stack<\/a> of entries that can be managed independently.<\/p>\n<p>Overlays let independent child widgets \"float\" visual elements on top of\nother widgets by inserting them into the overlay's <a href=\"widgets\/Stack-class.html\">Stack<\/a>. The overlay lets\neach of these widgets manage their participation in the overlay using\n<a href=\"widgets\/OverlayEntry-class.html\">OverlayEntry<\/a> objects.<\/p>\n<p>Although you can create an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> directly, it's most common to use the\noverlay created by the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> in a <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> or a <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>. The\nnavigator uses its overlay to manage the visual appearance of its routes.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/OverlayEntry-class.html\">OverlayEntry<\/a>.<\/li>\n<li>\n<a href=\"widgets\/OverlayState-class.html\">OverlayState<\/a>.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>.<\/li>\n<li>\n<a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Overlay-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Overlay",
    "shortname": "Overlay",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "widgets.OverlayState"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an overlay.<\/p>\n<p>The initial entries will be inserted into the overlay when its associated\n<a href=\"widgets\/OverlayState-class.html\">OverlayState<\/a> is initialized.<\/p>\n<p>Rather than creating an overlay, consider using the overlay that is\ncreated by the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> or the <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> for the application.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Overlay({\n  Key key,\n  this.initialEntries = const &lt;OverlayEntry&gt;[],\n}) : assert(initialEntries != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Overlay\/Overlay.html",
            "isDeprecated": false,
            "type": "",
            "name": "Overlay",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Overlay",
            "params": [
                {
                    "name": "initialEntries",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.OverlayEntry>"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/Overlay\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nOverlayState createState() =&gt; OverlayState();<\/code><\/pre>\n    ",
            "href": "widgets\/Overlay\/createState.html",
            "isDeprecated": false,
            "type": "widgets.OverlayState",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Overlay",
            "params": []
        },
        {
            "desc": "<p>The state from the closest instance of this class that encloses the given context.<\/p>\n<p>In debug mode, if the <code>debugRequiredFor<\/code> argument is provided then this\nfunction will assert that an overlay was found and will throw an exception\nif not. The exception attempts to explain that the calling <a href=\"widgets\/Widget-class.html\">Widget<\/a> (the\none given by the <code>debugRequiredFor<\/code> argument) needs an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> to be\npresent to function.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">OverlayState overlay = Overlay.of(context);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static OverlayState of(BuildContext context, { Widget debugRequiredFor }) {\n  final OverlayState result = context.ancestorStateOfType(const TypeMatcher&lt;OverlayState&gt;());\n  assert(() {\n    if (debugRequiredFor != null &amp;&amp; result == null) {\n      final String additional = context.widget != debugRequiredFor\n        ? '\\nThe context from which that widget was searching for an overlay was:\\n  $context'\n        : '';\n      throw FlutterError(\n        'No Overlay widget found.\\n'\n        '${debugRequiredFor.runtimeType} widgets require an Overlay widget ancestor for correct operation.\\n'\n        'The most common way to add an Overlay to an application is to include a MaterialApp or Navigator widget in the runApp() call.\\n'\n        'The specific widget that failed to find an overlay was:\\n'\n        '  $debugRequiredFor'\n        '$additional'\n      );\n    }\n    return true;\n  }());\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Overlay\/of.html",
            "isDeprecated": false,
            "type": "widgets.OverlayState",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Overlay",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "debugRequiredFor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Widget"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The entries to include in the overlay initially.<\/p>\n<p>These entries are only used when the <a href=\"widgets\/OverlayState-class.html\">OverlayState<\/a> is initialized. If you\nare providing a new <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> description for an overlay that's already in\nthe tree, then the new entries are ignored.<\/p>\n<p>To add entries to an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> that is already in the tree, use\n<a href=\"widgets\/Overlay\/of.html\">Overlay.of<\/a> to obtain the <a href=\"widgets\/OverlayState-class.html\">OverlayState<\/a> (or assign a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> to the\n<a href=\"widgets\/Overlay-class.html\">Overlay<\/a> widget and obtain the <a href=\"widgets\/OverlayState-class.html\">OverlayState<\/a> via\n<a href=\"widgets\/GlobalKey\/currentState.html\">GlobalKey.currentState<\/a>), and then use <a href=\"widgets\/OverlayState\/insert.html\">OverlayState.insert<\/a> or\n<a href=\"widgets\/OverlayState\/insertAll.html\">OverlayState.insertAll<\/a>.<\/p>\n<p>To remove an entry from an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a>, use <a href=\"widgets\/OverlayEntry\/remove.html\">OverlayEntry.remove<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;OverlayEntry&gt; initialEntries\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Overlay\/initialEntries.html",
            "name": "initialEntries",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.OverlayEntry>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Overlay",
            "params": []
        }
    ]
}