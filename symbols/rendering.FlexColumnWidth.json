{
    "name": "rendering.FlexColumnWidth",
    "extends": [
        "rendering.TableColumnWidth",
        "dart:core.Object"
    ],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "FlexColumnWidth",
            "type": "",
            "desc": "<p>Creates a column width based on a fraction of the remaining space once all\nthe other columns have been laid out.<\/p>\n<p>The <code>value<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.FlexColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "rendering\/FlexColumnWidth\/FlexColumnWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlexColumnWidth([this.value = 1.0]) : assert(value != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "flex",
            "type": "dart:core.double",
            "desc": "<p>The flex factor to apply to the cell if there is any room left\nover when laying out the table. The remaining space is\ndistributed to any columns with flex in proportion to their flex\nvalue (higher values get more space).<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.FlexColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "rendering\/FlexColumnWidth\/flex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble flex(Iterable&lt;RenderBox&gt; cells) {\n  return value;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "maxIntrinsicWidth",
            "type": "dart:core.double",
            "desc": "<p>The ideal width that the column should have. This must be equal\nto or greater than the <a href=\"rendering\/FlexColumnWidth\/minIntrinsicWidth.html\">minIntrinsicWidth<\/a>. The column might be\nbigger than this width, e.g. if the column is flexible or if the\ntable's width ends up being forced to be bigger than the sum of\nall the maxIntrinsicWidth values.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.FlexColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                },
                {
                    "name": "containerWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/FlexColumnWidth\/maxIntrinsicWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble maxIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth) {\n  return 0.0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "minIntrinsicWidth",
            "type": "dart:core.double",
            "desc": "<p>The smallest width that the column can have.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.FlexColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                },
                {
                    "name": "containerWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/FlexColumnWidth\/minIntrinsicWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble minIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth) {\n  return 0.0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.FlexColumnWidth",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/FlexColumnWidth\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($value)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "value",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The reaction of the of the remaining space once all the other columns have\nbeen laid out that this column should occupy.<\/p>\n        ",
            "memberOf": "rendering.FlexColumnWidth",
            "isConstant": false,
            "href": "rendering\/FlexColumnWidth\/value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double value\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/FlexColumnWidth-class.html",
    "desc": "<p>Sizes the column by taking a part of the remaining space once all\nthe other columns have been laid out.<\/p>\n<p>For example, if two columns have a <a href=\"rendering\/FlexColumnWidth-class.html\">FlexColumnWidth<\/a>, then half the\nspace will go to one and half the space will go to the other.<\/p>\n<p>This is a cheap way to size a column.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FlexColumnWidth"
}