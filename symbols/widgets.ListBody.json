{
    "name": "widgets.ListBody",
    "extends": [
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "ListBody",
            "type": "",
            "desc": "<p>Creates a layout widget that arranges its children sequentially along a\ngiven axis.<\/p>\n<p>By default, the <code>mainAxis<\/code> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListBody",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "mainAxis",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "children",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "widgets\/ListBody\/ListBody.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ListBody({\n  Key key,\n  this.mainAxis = Axis.vertical,\n  this.reverse = false,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : assert(mainAxis != null),\n     super(key: key, children: children);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderListBody",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListBody",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ListBody\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderListBody createRenderObject(BuildContext context) {\n  return RenderListBody(axisDirection: _getDirection(context));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "updateRenderObject",
            "type": "",
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/ListBody\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ListBody",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "rendering.RenderListBody",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ListBody\/updateRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderListBody renderObject) {\n  renderObject.axisDirection = _getDirection(context);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "mainAxis",
            "type": "painting.Axis",
            "types": [],
            "desc": "<p>The direction to use as the main axis.<\/p>\n        ",
            "memberOf": "widgets.ListBody",
            "isConstant": false,
            "href": "widgets\/ListBody\/mainAxis.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis mainAxis\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "reverse",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the list body positions children in the reading direction.<\/p>\n<p>For example, if the reading direction is left-to-right and\n<a href=\"widgets\/ListBody\/mainAxis.html\">mainAxis<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then the list body positions children\nfrom left to right when <a href=\"widgets\/ListBody\/reverse.html\">reverse<\/a> is false and from right to left when\n<a href=\"widgets\/ListBody\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Similarly, if <a href=\"widgets\/ListBody\/mainAxis.html\">mainAxis<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, then the list body positions\nfrom top to bottom when <a href=\"widgets\/ListBody\/reverse.html\">reverse<\/a> is false and from bottom to top when\n<a href=\"widgets\/ListBody\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "memberOf": "widgets.ListBody",
            "isConstant": false,
            "href": "widgets\/ListBody\/reverse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool reverse\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/ListBody-class.html",
    "desc": "<p>A widget that arranges its children sequentially along a given axis, forcing\nthem to the dimension of the parent in the other axis.<\/p>\n<p>This widget is rarely used directly. Instead, consider using <a href=\"widgets\/ListView-class.html\">ListView<\/a>,\nwhich combines a similar layout algorithm with scrolling behavior, or\n<a href=\"widgets\/Column-class.html\">Column<\/a>, which gives you more flexible control over the layout of a\nvertical set of boxes.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderListBody-class.html\">RenderListBody<\/a>, which implements this layout algorithm and the\ndocumentation for which describes some of its subtleties.<\/li>\n<li>\n<a href=\"widgets\/SingleChildScrollView-class.html\">SingleChildScrollView<\/a>, which is sometimes used with <a href=\"widgets\/ListBody-class.html\">ListBody<\/a> to\nmake the contents scrollable.<\/li>\n<li>\n<a href=\"widgets\/Column-class.html\">Column<\/a> and <a href=\"widgets\/Row-class.html\">Row<\/a>, which implement a more elaborate version of\nthis layout algorithm (at the cost of being slightly less efficient).<\/li>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which implements an efficient scrolling version of this\nlayout algorithm.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ListBody"
}