{
    "name": "vector_math.Frustum",
    "extends": [],
    "memberOf": "vector_math",
    "events": [],
    "methods": [
        {
            "name": "Frustum",
            "type": "",
            "desc": "<p>Create a new frustum without initializing its bounds.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "vector_math\/Frustum\/Frustum.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Frustum()\n    : _plane0 = new Plane(),\n      _plane1 = new Plane(),\n      _plane2 = new Plane(),\n      _plane3 = new Plane(),\n      _plane4 = new Plane(),\n      _plane5 = new Plane();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "calculateCorners",
            "type": "",
            "desc": "<p>Calculate the corners of a <code>frustum<\/code> at write them into <code>corner0<\/code> to<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "corner0",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner1",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner2",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner3",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner4",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner5",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner6",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "corner7",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math\/Frustum\/calculateCorners.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ [corner7].\nvoid calculateCorners(\n    Vector3 corner0,\n    Vector3 corner1,\n    Vector3 corner2,\n    Vector3 corner3,\n    Vector3 corner4,\n    Vector3 corner5,\n    Vector3 corner6,\n    Vector3 corner7) {\n  Plane.intersection(_plane0, _plane2, _plane4, corner0);\n  Plane.intersection(_plane0, _plane3, _plane4, corner1);\n  Plane.intersection(_plane0, _plane3, _plane5, corner2);\n  Plane.intersection(_plane0, _plane2, _plane5, corner3);\n  Plane.intersection(_plane1, _plane2, _plane4, corner4);\n  Plane.intersection(_plane1, _plane3, _plane4, corner5);\n  Plane.intersection(_plane1, _plane3, _plane5, corner6);\n  Plane.intersection(_plane1, _plane2, _plane5, corner7);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "containsVector3",
            "type": "dart:core.bool",
            "desc": "<p>Check if <a href=\"vector_math\/Frustum-class.html\">this<\/a> contains a <code>point<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "point",
                    "type": "vector_math.Vector3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math\/Frustum\/containsVector3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsVector3(Vector3 point) {\n  if (_plane0.distanceToVector3(point) &lt; 0.0) {\n    return false;\n  }\n\n  if (_plane1.distanceToVector3(point) &lt; 0.0) {\n    return false;\n  }\n\n  if (_plane2.distanceToVector3(point) &lt; 0.0) {\n    return false;\n  }\n\n  if (_plane3.distanceToVector3(point) &lt; 0.0) {\n    return false;\n  }\n\n  if (_plane4.distanceToVector3(point) &lt; 0.0) {\n    return false;\n  }\n\n  if (_plane5.distanceToVector3(point) &lt; 0.0) {\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Frustum.copy",
            "type": "",
            "desc": "<p>Create a new frustum as a copy of <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math.Frustum",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math\/Frustum\/Frustum.copy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Frustum.copy(Frustum other) =&gt; new Frustum()..copyFrom(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyFrom",
            "type": "",
            "desc": "<p>Copy the <code>other<\/code> frustum into <a href=\"vector_math\/Frustum-class.html\">this<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "vector_math.Frustum",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math\/Frustum\/copyFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void copyFrom(Frustum other) {\n  _plane0.copyFrom(other._plane0);\n  _plane1.copyFrom(other._plane1);\n  _plane2.copyFrom(other._plane2);\n  _plane3.copyFrom(other._plane3);\n  _plane4.copyFrom(other._plane4);\n  _plane5.copyFrom(other._plane5);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "intersectsWithAabb3",
            "type": "dart:core.bool",
            "desc": "<p>Check if <a href=\"vector_math\/Frustum-class.html\">this<\/a> intersects with <code>aabb<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "aabb",
                    "type": "vector_math.Aabb3",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math\/Frustum\/intersectsWithAabb3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithAabb3(Aabb3 aabb) {\n  if (_intersectsWithAabb3CheckPlane(aabb, _plane0)) {\n    return false;\n  }\n\n  if (_intersectsWithAabb3CheckPlane(aabb, _plane1)) {\n    return false;\n  }\n\n  if (_intersectsWithAabb3CheckPlane(aabb, _plane2)) {\n    return false;\n  }\n\n  if (_intersectsWithAabb3CheckPlane(aabb, _plane3)) {\n    return false;\n  }\n\n  if (_intersectsWithAabb3CheckPlane(aabb, _plane4)) {\n    return false;\n  }\n\n  if (_intersectsWithAabb3CheckPlane(aabb, _plane5)) {\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersectsWithSphere",
            "type": "dart:core.bool",
            "desc": "<p>Check if <a href=\"vector_math\/Frustum-class.html\">this<\/a> intersects with <code>sphere<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "sphere",
                    "type": "vector_math.Sphere",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math\/Frustum\/intersectsWithSphere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool intersectsWithSphere(Sphere sphere) {\n  final double negativeRadius = -sphere._radius;\n  final Vector3 center = sphere.center;\n\n  if (_plane0.distanceToVector3(center) &lt; negativeRadius) {\n    return false;\n  }\n\n  if (_plane1.distanceToVector3(center) &lt; negativeRadius) {\n    return false;\n  }\n\n  if (_plane2.distanceToVector3(center) &lt; negativeRadius) {\n    return false;\n  }\n\n  if (_plane3.distanceToVector3(center) &lt; negativeRadius) {\n    return false;\n  }\n\n  if (_plane4.distanceToVector3(center) &lt; negativeRadius) {\n    return false;\n  }\n\n  if (_plane5.distanceToVector3(center) &lt; negativeRadius) {\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Frustum.matrix",
            "type": "",
            "desc": "<p>Create a new furstum from a <code>matrix<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "matrix",
                    "type": "vector_math.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "vector_math\/Frustum\/Frustum.matrix.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Frustum.matrix(Matrix4 matrix) =&gt;\n    new Frustum()..setFromMatrix(matrix);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setFromMatrix",
            "type": "",
            "desc": "<p>Set <a href=\"vector_math\/Frustum-class.html\">this<\/a> from <code>matrix<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "vector_math.Frustum",
            "sig": "",
            "params": [
                {
                    "name": "matrix",
                    "type": "vector_math.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "vector_math\/Frustum\/setFromMatrix.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFromMatrix(Matrix4 matrix) {\n  final Float32List me = matrix.storage;\n  final double me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\n  final double me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\n  final double me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\n  final double me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\n\n  _plane0\n    ..setFromComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12)\n    ..normalize();\n  _plane1\n    ..setFromComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12)\n    ..normalize();\n  _plane2\n    ..setFromComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13)\n    ..normalize();\n  _plane3\n    ..setFromComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13)\n    ..normalize();\n  _plane4\n    ..setFromComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14)\n    ..normalize();\n  _plane5\n    ..setFromComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14)\n    ..normalize();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "plane0",
            "type": "vector_math.Plane",
            "types": [],
            "desc": "<p>The first plane that defines the bounds of this frustum.<\/p>\n        ",
            "memberOf": "vector_math.Frustum",
            "isConstant": false,
            "href": "vector_math\/Frustum\/plane0.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Plane get plane0 =&gt; _plane0;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "plane1",
            "type": "vector_math.Plane",
            "types": [],
            "desc": "<p>The second plane that defines the bounds of this frustum.<\/p>\n        ",
            "memberOf": "vector_math.Frustum",
            "isConstant": false,
            "href": "vector_math\/Frustum\/plane1.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Plane get plane1 =&gt; _plane1;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "plane2",
            "type": "vector_math.Plane",
            "types": [],
            "desc": "<p>The third plane that defines the bounds of this frustum.<\/p>\n        ",
            "memberOf": "vector_math.Frustum",
            "isConstant": false,
            "href": "vector_math\/Frustum\/plane2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Plane get plane2 =&gt; _plane2;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "plane3",
            "type": "vector_math.Plane",
            "types": [],
            "desc": "<p>The fourth plane that defines the bounds of this frustum.<\/p>\n        ",
            "memberOf": "vector_math.Frustum",
            "isConstant": false,
            "href": "vector_math\/Frustum\/plane3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Plane get plane3 =&gt; _plane3;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "plane4",
            "type": "vector_math.Plane",
            "types": [],
            "desc": "<p>The fifth plane that defines the bounds of this frustum.<\/p>\n        ",
            "memberOf": "vector_math.Frustum",
            "isConstant": false,
            "href": "vector_math\/Frustum\/plane4.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Plane get plane4 =&gt; _plane4;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "plane5",
            "type": "vector_math.Plane",
            "types": [],
            "desc": "<p>The sixed plane that defines the bounds of this frustum.<\/p>\n        ",
            "memberOf": "vector_math.Frustum",
            "isConstant": false,
            "href": "vector_math\/Frustum\/plane5.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Plane get plane5 =&gt; _plane5;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "vector_math\/Frustum-class.html",
    "desc": "<p>Defines a frustum constructed out of six <a href=\"vector_math\/Plane-class.html\">Plane<\/a>s.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Frustum"
}