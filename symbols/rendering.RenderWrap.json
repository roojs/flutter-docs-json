{
    "desc": "<p>Displays its children in multiple horizontal or vertical runs.<\/p>\n<p>A <a href=\"rendering\/RenderWrap-class.html\">RenderWrap<\/a> lays out each child and attempts to place the child adjacent\nto the previous child in the main axis, given by <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a>, leaving\n<a href=\"rendering\/RenderWrap\/spacing.html\">spacing<\/a> space in between. If there is not enough space to fit the child,\n<a href=\"rendering\/RenderWrap-class.html\">RenderWrap<\/a> creates a new <em>run<\/em> adjacent to the existing children in the\ncross axis.<\/p>\n<p>After all the children have been allocated to runs, the children within the\nruns are positioned according to the <a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a> in the main axis and\naccording to the <a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> in the cross axis.<\/p>\n<p>The runs themselves are then positioned in the cross axis according to the\n<a href=\"rendering\/RenderWrap\/runSpacing.html\">runSpacing<\/a> and <a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "rendering\/RenderWrap-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderWrap",
    "shortname": "RenderWrap",
    "extends": [
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a wrap render object.<\/p>\n<p>By default, the wrap layout is horizontal and both the children and the\nruns are aligned to the start.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderWrap({\n  List&lt;RenderBox&gt; children,\n  Axis direction = Axis.horizontal,\n  WrapAlignment alignment = WrapAlignment.start,\n  double spacing = 0.0,\n  WrapAlignment runAlignment = WrapAlignment.start,\n  double runSpacing = 0.0,\n  WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start,\n  TextDirection textDirection,\n  VerticalDirection verticalDirection = VerticalDirection.down,\n}) : assert(direction != null),\n     assert(alignment != null),\n     assert(spacing != null),\n     assert(runAlignment != null),\n     assert(runSpacing != null),\n     assert(crossAxisAlignment != null),\n     _direction = direction,\n     _alignment = alignment,\n     _spacing = spacing,\n     _runAlignment = runAlignment,\n     _runSpacing = runSpacing,\n     _crossAxisAlignment = crossAxisAlignment,\n     _textDirection = textDirection,\n     _verticalDirection = verticalDirection {\n  addAll(children);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/RenderWrap.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.WrapAlignment"
                },
                {
                    "name": "children",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<rendering.RenderBox>"
                },
                {
                    "name": "crossAxisAlignment",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.WrapCrossAlignment"
                },
                {
                    "name": "direction",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "runAlignment",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.WrapAlignment"
                },
                {
                    "name": "runSpacing",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "spacing",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "verticalDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.VerticalDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the y-coordinate of the position of the box to\nthe y-coordinate of the first given baseline in the box's contents, if\nany, or null otherwise.<\/p>\n<p>Do not call this function directly. If you need to know the baseline of a\nchild from an invocation of <a href=\"rendering\/RenderWrap\/performLayout.html\">performLayout<\/a> or <a href=\"rendering\/RenderWrap\/paint.html\">paint<\/a>, call\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>.<\/p>\n<p>Subclasses should override this method to supply the distances to their\nbaselines. When implementing this method, there are generally three\nstrategies:<\/p>\n<ul>\n<li>\n<p>For classes that use the <a href=\"rendering\/ContainerRenderObjectMixin-mixin.html\">ContainerRenderObjectMixin<\/a> child model,\nconsider mixing in the <a href=\"rendering\/RenderBoxContainerDefaultsMixin-mixin.html\">RenderBoxContainerDefaultsMixin<\/a> class and\nusing\n<a href=\"rendering\/RenderBoxContainerDefaultsMixin\/defaultComputeDistanceToFirstActualBaseline.html\">RenderBoxContainerDefaultsMixin.defaultComputeDistanceToFirstActualBaseline<\/a>.<\/p>\n<\/li>\n<li>\n<p>For classes that define a particular baseline themselves, return that\nvalue directly.<\/p>\n<\/li>\n<li>\n<p>For classes that have a child to which they wish to defer the\ncomputation, call <a href=\"rendering\/RenderBox\/getDistanceToActualBaseline.html\">getDistanceToActualBaseline<\/a> on the child (not\n<a href=\"rendering\/RenderWrap\/computeDistanceToActualBaseline.html\">computeDistanceToActualBaseline<\/a>, the internal implementation, and not\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>, the public entry point for this API).<\/p>\n<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeDistanceToActualBaseline(TextBaseline baseline) {\n  return defaultComputeDistanceToHighestActualBaseline(baseline);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/computeDistanceToActualBaseline.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "baseline",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextBaseline"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderWrap\/performLayout.html\">performLayout<\/a>. Should return the\nsmallest height beyond which increasing the height never decreases the\npreferred width. The preferred width is the value that would be returned\nby <a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for that height.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderWrap\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for the same width.<\/p>\n<p>Otherwise, the width argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderWrap\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a>.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicHeight(double width) {\n  switch (direction) {\n    case Axis.horizontal:\n      return _computeIntrinsicHeightForWidth(width);\n    case Axis.vertical:\n      double height = 0.0;\n      RenderBox child = firstChild;\n      while (child != null) {\n        height += child.getMaxIntrinsicHeight(double.infinity);\n        child = childAfter(child);\n      }\n      return height;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/computeMaxIntrinsicHeight.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderWrap\/performLayout.html\">performLayout<\/a>. This should return\nthe smallest width beyond which increasing the width never decreases the\npreferred height. The preferred height is the value that would be returned\nby <a href=\"rendering\/RenderWrap\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for that width.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for the same height.<\/p>\n<p>Otherwise, the height argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicWidth(double height) {\n  switch (direction) {\n    case Axis.horizontal:\n      double width = 0.0;\n      RenderBox child = firstChild;\n      while (child != null) {\n        width += child.getMaxIntrinsicWidth(double.infinity);\n        child = childAfter(child);\n      }\n      return width;\n    case Axis.vertical:\n      return _computeIntrinsicWidthForHeight(height);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/computeMaxIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderWrap\/performLayout.html\">performLayout<\/a>. Should return the\nminimum height that this box could be without failing to correctly paint\nits contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nheight-in-width-out, or if the layout algorithm uses both the incoming\nheight and width constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>width<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then the width\nargument is the width to use.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicHeight(double width) {\n  switch (direction) {\n    case Axis.horizontal:\n      return _computeIntrinsicHeightForWidth(width);\n    case Axis.vertical:\n      double height = 0.0;\n      RenderBox child = firstChild;\n      while (child != null) {\n        height = math.max(height, child.getMinIntrinsicHeight(double.infinity));\n        child = childAfter(child);\n      }\n      return height;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/computeMinIntrinsicHeight.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderWrap\/performLayout.html\">performLayout<\/a>. This method should\nreturn the minimum width that this box could be without failing to\ncorrectly paint its contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nwidth-in-height-out, or if the layout algorithm uses both the incoming\nwidth and height constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>height<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then the height\nargument is the height to use.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<h3 id=\"text\">Text<\/h3>\n<p>Text is the canonical example of a width-in-height-out algorithm. The\n<code>height<\/code> argument is therefore ignored.<\/p>\n<p>Consider the string \"Hello World\" The <em>maximum<\/em> intrinsic width (as\nreturned from <a href=\"rendering\/RenderWrap\/computeMaxIntrinsicWidth.html\">computeMaxIntrinsicWidth<\/a>) would be the width of the string\nwith no line breaks.<\/p>\n<p>The minimum intrinsic width would be the width of the widest word, \"Hello\"\nor \"World\". If the text is rendered in an even narrower width, however, it\nmight still not overflow. For example, maybe the rendering would put a\nline-break half-way through the words, as in \"Hel\u205elo\u205eWor\u205eld\". However,\nthis wouldn't be a <em>correct<\/em> rendering, and <a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> is\nsupposed to render the minimum width that the box could be without failing\nto <em>correctly<\/em> paint the contents within itself.<\/p>\n<p>The minimum intrinsic <em>height<\/em> for a given width smaller than the minimum\nintrinsic width could therefore be greater than the minimum intrinsic\nheight for the minimum intrinsic width.<\/p>\n<h3 id=\"viewports-eg-scrolling-lists\">Viewports (e.g. scrolling lists)<\/h3>\n<p>Some render boxes are intended to clip their children. For example, the\nrender box for a scrolling list might always size itself to its parents'\nsize (or rather, to the maximum incoming constraints), regardless of the\nchildren's sizes, and then clip the children and position them based on\nthe current scroll offset.<\/p>\n<p>The intrinsic dimensions in these cases still depend on the children, even\nthough the layout algorithm sizes the box in a way independent of the\nchildren. It is the size that is needed to paint the box's contents (in\nthis case, the children) <em>without clipping<\/em> that matters.<\/p>\n<h3 id=\"when-the-intrinsic-dimensions-cannot-be-known\">When the intrinsic dimensions cannot be known<\/h3>\n<p>There are cases where render objects do not have an efficient way to\ncompute their intrinsic dimensions. For example, it may be prohibitively\nexpensive to reify and measure every child of a lazy viewport (viewports\ngenerally only instantiate the actually visible children), or the\ndimensions may be computed by a callback about which the render object\ncannot reason.<\/p>\n<p>In such cases, it may be impossible (or at least impractical) to actually\nreturn a valid answer. In such cases, the intrinsic functions should throw\nwhen <a href=\"rendering\/RenderObject\/debugCheckingIntrinsics.html\">RenderObject.debugCheckingIntrinsics<\/a> is false and asserts are\nenabled, and return 0.0 otherwise.<\/p>\n<p>See the implementations of <a href=\"widgets\/LayoutBuilder-class.html\">LayoutBuilder<\/a> or <a href=\"rendering\/RenderViewportBase-class.html\">RenderViewportBase<\/a> for\nexamples (in particular,\n<a href=\"rendering\/RenderViewportBase\/debugThrowIfNotCheckingIntrinsics.html\">RenderViewportBase.debugThrowIfNotCheckingIntrinsics<\/a>).<\/p>\n<h3 id=\"aspect-ratio-driven-boxes\">Aspect-ratio-driven boxes<\/h3>\n<p>Some boxes always return a fixed size based on the constraints. For these\nboxes, the intrinsic functions should return the appropriate size when the\nincoming <code>height<\/code> or <code>width<\/code> argument is finite, treating that as a tight\nconstraint in the respective direction and treating the other direction's\nconstraints as unbounded. This is because the definitions of\n<a href=\"rendering\/RenderWrap\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> and <a href=\"rendering\/RenderWrap\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> are in terms of\nwhat the dimensions <em>could be<\/em>, and such boxes can only be one size in\nsuch cases.<\/p>\n<p>When the incoming argument is not finite, then they should return the\nactual intrinsic dimensions based on the contents, as any other box would.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicWidth(double height) {\n  switch (direction) {\n    case Axis.horizontal:\n      double width = 0.0;\n      RenderBox child = firstChild;\n      while (child != null) {\n        width = math.max(width, child.getMinIntrinsicWidth(double.infinity));\n        child = childAfter(child);\n      }\n      return width;\n    case Axis.vertical:\n      return _computeIntrinsicWidthForHeight(height);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/computeMinIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderWrap\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;Axis&gt;('direction', direction));\n  properties.add(EnumProperty&lt;WrapAlignment&gt;('alignment', alignment));\n  properties.add(DoubleProperty('spacing', spacing));\n  properties.add(EnumProperty&lt;WrapAlignment&gt;('runAlignment', runAlignment));\n  properties.add(DoubleProperty('runSpacing', runSpacing));\n  properties.add(DoubleProperty('crossAxisAlignment', runSpacing));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(EnumProperty&lt;VerticalDirection&gt;('verticalDirection', verticalDirection, defaultValue: VerticalDirection.down));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { Offset position }) {\n  return defaultHitTestChildren(result, position: position);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/hitTestChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "result",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  \/\/ TODO(ianh): move the debug flex overflow paint logic somewhere common so\n  \/\/ it can be reused here\n  if (_hasVisualOverflow)\n    context.pushClipRect(needsCompositing, offset, Offset.zero &amp; size, defaultPaint);\n  else\n    defaultPaint(context, offset);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  assert(_debugHasNecessaryDirections);\n  _hasVisualOverflow = false;\n  RenderBox child = firstChild;\n  if (child == null) {\n    size = constraints.smallest;\n    return;\n  }\n  BoxConstraints childConstraints;\n  double mainAxisLimit = 0.0;\n  bool flipMainAxis = false;\n  bool flipCrossAxis = false;\n  switch (direction) {\n    case Axis.horizontal:\n      childConstraints = BoxConstraints(maxWidth: constraints.maxWidth);\n      mainAxisLimit = constraints.maxWidth;\n      if (textDirection == TextDirection.rtl)\n        flipMainAxis = true;\n      if (verticalDirection == VerticalDirection.up)\n        flipCrossAxis = true;\n      break;\n    case Axis.vertical:\n      childConstraints = BoxConstraints(maxHeight: constraints.maxHeight);\n      mainAxisLimit = constraints.maxHeight;\n      if (verticalDirection == VerticalDirection.up)\n        flipMainAxis = true;\n      if (textDirection == TextDirection.rtl)\n        flipCrossAxis = true;\n      break;\n  }\n  assert(childConstraints != null);\n  assert(mainAxisLimit != null);\n  final double spacing = this.spacing;\n  final double runSpacing = this.runSpacing;\n  final List&lt;_RunMetrics&gt; runMetrics = &lt;_RunMetrics&gt;[];\n  double mainAxisExtent = 0.0;\n  double crossAxisExtent = 0.0;\n  double runMainAxisExtent = 0.0;\n  double runCrossAxisExtent = 0.0;\n  int childCount = 0;\n  while (child != null) {\n    child.layout(childConstraints, parentUsesSize: true);\n    final double childMainAxisExtent = _getMainAxisExtent(child);\n    final double childCrossAxisExtent = _getCrossAxisExtent(child);\n    if (childCount &gt; 0 &amp;&amp; runMainAxisExtent + spacing + childMainAxisExtent &gt; mainAxisLimit) {\n      mainAxisExtent = math.max(mainAxisExtent, runMainAxisExtent);\n      crossAxisExtent += runCrossAxisExtent;\n      if (runMetrics.isNotEmpty)\n        crossAxisExtent += runSpacing;\n      runMetrics.add(_RunMetrics(runMainAxisExtent, runCrossAxisExtent, childCount));\n      runMainAxisExtent = 0.0;\n      runCrossAxisExtent = 0.0;\n      childCount = 0;\n    }\n    runMainAxisExtent += childMainAxisExtent;\n    if (childCount &gt; 0)\n      runMainAxisExtent += spacing;\n    runCrossAxisExtent = math.max(runCrossAxisExtent, childCrossAxisExtent);\n    childCount += 1;\n    final WrapParentData childParentData = child.parentData;\n    childParentData._runIndex = runMetrics.length;\n    child = childParentData.nextSibling;\n  }\n  if (childCount &gt; 0) {\n    mainAxisExtent = math.max(mainAxisExtent, runMainAxisExtent);\n    crossAxisExtent += runCrossAxisExtent;\n    if (runMetrics.isNotEmpty)\n      crossAxisExtent += runSpacing;\n    runMetrics.add(_RunMetrics(runMainAxisExtent, runCrossAxisExtent, childCount));\n  }\n\n  final int runCount = runMetrics.length;\n  assert(runCount &gt; 0);\n\n  double containerMainAxisExtent = 0.0;\n  double containerCrossAxisExtent = 0.0;\n\n  switch (direction) {\n    case Axis.horizontal:\n      size = constraints.constrain(Size(mainAxisExtent, crossAxisExtent));\n      containerMainAxisExtent = size.width;\n      containerCrossAxisExtent = size.height;\n      break;\n    case Axis.vertical:\n      size = constraints.constrain(Size(crossAxisExtent, mainAxisExtent));\n      containerMainAxisExtent = size.height;\n      containerCrossAxisExtent = size.width;\n      break;\n  }\n\n  _hasVisualOverflow = containerMainAxisExtent &lt; mainAxisExtent || containerCrossAxisExtent &lt; crossAxisExtent;\n\n  final double crossAxisFreeSpace = math.max(0.0, containerCrossAxisExtent - crossAxisExtent);\n  double runLeadingSpace = 0.0;\n  double runBetweenSpace = 0.0;\n  switch (runAlignment) {\n    case WrapAlignment.start:\n      break;\n    case WrapAlignment.end:\n      runLeadingSpace = crossAxisFreeSpace;\n      break;\n    case WrapAlignment.center:\n      runLeadingSpace = crossAxisFreeSpace \/ 2.0;\n      break;\n    case WrapAlignment.spaceBetween:\n      runBetweenSpace = runCount &gt; 1 ? crossAxisFreeSpace \/ (runCount - 1) : 0.0;\n      break;\n    case WrapAlignment.spaceAround:\n      runBetweenSpace = crossAxisFreeSpace \/ runCount;\n      runLeadingSpace = runBetweenSpace \/ 2.0;\n      break;\n    case WrapAlignment.spaceEvenly:\n      runBetweenSpace = crossAxisFreeSpace \/ (runCount + 1);\n      runLeadingSpace = runBetweenSpace;\n      break;\n  }\n\n  runBetweenSpace += runSpacing;\n  double crossAxisOffset = flipCrossAxis ? containerCrossAxisExtent - runLeadingSpace : runLeadingSpace;\n\n  child = firstChild;\n  for (int i = 0; i &lt; runCount; ++i) {\n    final _RunMetrics metrics = runMetrics[i];\n    final double runMainAxisExtent = metrics.mainAxisExtent;\n    final double runCrossAxisExtent = metrics.crossAxisExtent;\n    final int childCount = metrics.childCount;\n\n    final double mainAxisFreeSpace = math.max(0.0, containerMainAxisExtent - runMainAxisExtent);\n    double childLeadingSpace = 0.0;\n    double childBetweenSpace = 0.0;\n\n    switch (alignment) {\n      case WrapAlignment.start:\n        break;\n      case WrapAlignment.end:\n        childLeadingSpace = mainAxisFreeSpace;\n        break;\n      case WrapAlignment.center:\n        childLeadingSpace = mainAxisFreeSpace \/ 2.0;\n        break;\n      case WrapAlignment.spaceBetween:\n        childBetweenSpace = childCount &gt; 1 ? mainAxisFreeSpace \/ (childCount - 1) : 0.0;\n        break;\n      case WrapAlignment.spaceAround:\n        childBetweenSpace = mainAxisFreeSpace \/ childCount;\n        childLeadingSpace = childBetweenSpace \/ 2.0;\n        break;\n      case WrapAlignment.spaceEvenly:\n        childBetweenSpace = mainAxisFreeSpace \/ (childCount + 1);\n        childLeadingSpace = childBetweenSpace;\n        break;\n    }\n\n    childBetweenSpace += spacing;\n    double childMainPosition = flipMainAxis ? containerMainAxisExtent - childLeadingSpace : childLeadingSpace;\n\n    if (flipCrossAxis)\n      crossAxisOffset -= runCrossAxisExtent;\n\n    while (child != null) {\n      final WrapParentData childParentData = child.parentData;\n      if (childParentData._runIndex != i)\n        break;\n      final double childMainAxisExtent = _getMainAxisExtent(child);\n      final double childCrossAxisExtent = _getCrossAxisExtent(child);\n      final double childCrossAxisOffset = _getChildCrossAxisOffset(flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent);\n      if (flipMainAxis)\n        childMainPosition -= childMainAxisExtent;\n      childParentData.offset = _getOffset(childMainPosition, crossAxisOffset + childCrossAxisOffset);\n      if (flipMainAxis)\n        childMainPosition -= childBetweenSpace;\n      else\n        childMainPosition += childMainAxisExtent + childBetweenSpace;\n      child = childParentData.nextSibling;\n    }\n\n    if (flipCrossAxis)\n      crossAxisOffset -= runBetweenSpace;\n    else\n      crossAxisOffset += runCrossAxisExtent + runBetweenSpace;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/performLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>Override to setup parent data correctly for your children.<\/p>\n<p>You can call this function to set up the parent data for child before the\nchild is added to the parent's child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderBox child) {\n  if (child.parentData is! WrapParentData)\n    child.parentData = WrapParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderWrap\/setupParentData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderWrap",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How the children within a run should be placed in the main axis.<\/p>\n<p>For example, if <a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a> is <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.center<\/a>, the children in\neach run are grouped together in the center of their run in the main axis.<\/p>\n<p>Defaults to <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a>, which controls how the runs are placed relative to each\nother in the cross axis.<\/li>\n<li>\n<a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a>, which controls how the children within each run\nare placed relative to each other in the cross axis.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">WrapAlignment get alignment =&gt; _alignment;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/alignment.html",
            "isDeprecated": "0",
            "type": "rendering.WrapAlignment",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>How the children within a run should be aligned relative to each other in\nthe cross axis.<\/p>\n<p>For example, if this is set to <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a>, and the\n<a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then the children within each\nrun will have their bottom edges aligned to the bottom edge of the run.<\/p>\n<p>Defaults to <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a>, which controls how the children within each run are placed\nrelative to each other in the main axis.<\/li>\n<li>\n<a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a>, which controls how the runs are placed relative to each\nother in the cross axis.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">WrapCrossAlignment get crossAxisAlignment =&gt; _crossAxisAlignment;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/crossAxisAlignment.html",
            "isDeprecated": "0",
            "type": "rendering.WrapCrossAlignment",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>The direction to use as the main axis.<\/p>\n<p>For example, if <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, the default, the\nchildren are placed adjacent to one another in a horizontal run until the\navailable horizontal space is consumed, at which point a subsequent\nchildren are placed in a new run vertically adjacent to the previous run.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Axis get direction =&gt; _direction;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/direction.html",
            "isDeprecated": "0",
            "type": "painting.Axis",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>How the runs themselves should be placed in the cross axis.<\/p>\n<p>For example, if <a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a> is <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.center<\/a>, the runs are\ngrouped together in the center of the overall <a href=\"rendering\/RenderWrap-class.html\">RenderWrap<\/a> in the cross\naxis.<\/p>\n<p>Defaults to <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a>, which controls how the children within each run are placed\nrelative to each other in the main axis.<\/li>\n<li>\n<a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a>, which controls how the children within each run\nare placed relative to each other in the cross axis.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">WrapAlignment get runAlignment =&gt; _runAlignment;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/runAlignment.html",
            "isDeprecated": "0",
            "type": "rendering.WrapAlignment",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>How much space to place between the runs themselves in the cross axis.<\/p>\n<p>For example, if <a href=\"rendering\/RenderWrap\/runSpacing.html\">runSpacing<\/a> is 10.0, the runs will be spaced at least\n10.0 logical pixels apart in the cross axis.<\/p>\n<p>If there is additional free space in the overall <a href=\"rendering\/RenderWrap-class.html\">RenderWrap<\/a> (e.g.,\nbecause the wrap has a minimum size that is not filled), the additional\nfree space will be allocated according to the <a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a>.<\/p>\n<p>Defaults to 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get runSpacing =&gt; _runSpacing;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/runSpacing.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>How much space to place between children in a run in the main axis.<\/p>\n<p>For example, if <a href=\"rendering\/RenderWrap\/spacing.html\">spacing<\/a> is 10.0, the children will be spaced at least\n10.0 logical pixels apart in the main axis.<\/p>\n<p>If there is additional free space in a run (e.g., because the wrap has a\nminimum size that is not filled or because some runs are longer than\nothers), the additional free space will be allocated according to the\n<a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a>.<\/p>\n<p>Defaults to 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get spacing =&gt; _spacing;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/spacing.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out horizontally and how to interpret\n<code>start<\/code> and <code>end<\/code> in the horizontal direction.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the order in which\nchildren are positioned (left-to-right or right-to-left), and the meaning\nof the <a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a> property's <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and either the\n<a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a> is either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, or\nthere's more than one child, then the <a href=\"rendering\/RenderWrap\/textDirection.html\">textDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls the order in\nwhich runs are positioned, the meaning of the <a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a> property's\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values, as well as the\n<a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> and\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and either the\n<a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a> is either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, the\n<a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is either <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> or\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a>, or there's more than one child, then the\n<a href=\"rendering\/RenderWrap\/textDirection.html\">textDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "rendering.RenderWrap",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out vertically and how to interpret\n<code>start<\/code> and <code>end<\/code> in the vertical direction.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls which order children\nare painted in (down or up), the meaning of the <a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a> property's\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and either the <a href=\"rendering\/RenderWrap\/alignment.html\">alignment<\/a>\nis either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, or there's\nmore than one child, then the <a href=\"rendering\/RenderWrap\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the order in which\nruns are positioned, the meaning of the <a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a> property's\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values, as well as the\n<a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> and\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderWrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and either the\n<a href=\"rendering\/RenderWrap\/runAlignment.html\">runAlignment<\/a> is either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, the\n<a href=\"rendering\/RenderWrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is either <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> or\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a>, or there's more than one child, then the\n<a href=\"rendering\/RenderWrap\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VerticalDirection get verticalDirection =&gt; _verticalDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderWrap\/verticalDirection.html",
            "isDeprecated": "0",
            "type": "painting.VerticalDirection",
            "memberOf": "rendering.RenderWrap",
            "params": []
        }
    ]
}