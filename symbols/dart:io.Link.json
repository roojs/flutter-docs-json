{
    "name": "dart:io.Link",
    "extends": [],
    "memberOf": "dart:io",
    "events": [],
    "methods": [
        {
            "name": "Link",
            "type": "",
            "desc": "<p>Creates a Link object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-io\/Link\/Link.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Link(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return new _Link(path);\n  }\n  return overrides.createLink(path);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "create",
            "type": "dart:async.Future<dart:io.Link>",
            "desc": "<p>Creates a symbolic link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with\nthe link when it has been created. If the link exists,\nthe future will complete with an error.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created\nonly if all directories in its path exist.\nIf <code>recursive<\/code> is true, all non-existing path\ncomponents are created. The directories in the path of <code>target<\/code> are\nnot affected, unless they are also in <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/Link\/create.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Link&gt; create(String target, {bool recursive: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.Link"
            ]
        },
        {
            "name": "createSync",
            "type": "",
            "desc": "<p>Synchronously create the link. Calling <a href=\"dart-io\/Link\/createSync.html\">createSync<\/a> on an existing link\nwill throw an exception.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created only if all\ndirectories in its path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created. The directories in\nthe path of <code>target<\/code> are not affected, unless they are also in <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/Link\/createSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void createSync(String target, {bool recursive: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "Link.fromRawPath",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "rawPath",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-io\/Link\/Link.fromRawPath.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Link.fromRawPath(Uint8List rawPath) {\n  \/\/ TODO(bkonyi): handle overrides\n  return new _Link.fromRawPath(rawPath);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Link.fromUri",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-io\/Link-class.html\">Link<\/a> object.<\/p>\n<p>If <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> is a relative path, it will be interpreted relative to the\ncurrent working directory (see <a href=\"dart-io\/Directory\/current.html\">Directory.current<\/a>), when used.<\/p>\n<p>If <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> is an absolute path, it will be immune to changes to the\ncurrent working directory.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-io\/Link\/Link.fromUri.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Link.fromUri(Uri uri) =&gt; new Link(uri.toFilePath());<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "rename",
            "type": "dart:async.Future<dart:io.Link>",
            "desc": "<p>Renames this link. Returns a <code>Future&lt;Link&gt;<\/code> that completes\nwith a <a href=\"dart-io\/Link-class.html\">Link<\/a> instance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory,\nthe operation fails and the future completes with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/Link\/rename.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Link&gt; rename(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.Link"
            ]
        },
        {
            "name": "renameSync",
            "type": "dart:io.Link",
            "desc": "<p>Synchronously renames this link. Returns a <a href=\"dart-io\/Link-class.html\">Link<\/a>\ninstance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory\nthe operation fails and an exception is thrown.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/Link\/renameSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Link renameSync(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "resolveSymbolicLinks",
            "type": "dart:async.Future<dart:core.String>",
            "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Link\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-io\/Link\/resolveSymbolicLinks.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; resolveSymbolicLinks();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.String"
            ]
        },
        {
            "name": "resolveSymbolicLinksSync",
            "type": "dart:core.String",
            "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Link\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-io\/Link\/resolveSymbolicLinksSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String resolveSymbolicLinksSync();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "target",
            "type": "dart:async.Future<dart:core.String>",
            "desc": "<p>Gets the target of the link. Returns a future that completes with\nthe path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, the future completes with\na FileSystemException.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-io\/Link\/target.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; target();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.String"
            ]
        },
        {
            "name": "targetSync",
            "type": "dart:core.String",
            "desc": "<p>Synchronously gets the target of the link. Returns the path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, throws a FileSystemException.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-io\/Link\/targetSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String targetSync();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "update",
            "type": "dart:async.Future<dart:io.Link>",
            "desc": "<p>Updates the link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with the\nlink when it has been updated.  Calling <a href=\"dart-io\/Link\/update.html\">update<\/a> on a non-existing link\nwill complete its returned future with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/Link\/update.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Link&gt; update(String target);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.Link"
            ]
        },
        {
            "name": "updateSync",
            "type": "",
            "desc": "<p>Synchronously updates the link. Calling <a href=\"dart-io\/Link\/updateSync.html\">updateSync<\/a> on a non-existing link\nwill throw an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.Link",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/Link\/updateSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateSync(String target);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "absolute",
            "type": "dart:io.Link",
            "types": [],
            "desc": "<p>Returns a <a href=\"dart-io\/Link-class.html\">Link<\/a> instance whose path is the absolute path to <a href=\"dart-io\/Link-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
            "memberOf": "dart:io.Link",
            "isConstant": false,
            "href": "dart-io\/Link\/absolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Link get absolute;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-io\/Link-class.html",
    "desc": "<p><a href=\"dart-io\/Link-class.html\">Link<\/a> objects are references to filesystem links.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Link"
}