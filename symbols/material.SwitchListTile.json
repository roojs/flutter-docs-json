{
    "desc": "<p>A <a href=\"material\/ListTile-class.html\">ListTile<\/a> with a <a href=\"material\/Switch-class.html\">Switch<\/a>. In other words, a switch with a label.<\/p>\n<p>The entire list tile is interactive: tapping anywhere in the tile toggles\nthe switch.<\/p>\n<p>The <a href=\"material\/SwitchListTile\/value.html\">value<\/a>, <a href=\"material\/SwitchListTile\/onChanged.html\">onChanged<\/a>, <a href=\"material\/SwitchListTile\/activeColor.html\">activeColor<\/a>, <a href=\"material\/SwitchListTile\/activeThumbImage.html\">activeThumbImage<\/a>, and\n<a href=\"material\/SwitchListTile\/inactiveThumbImage.html\">inactiveThumbImage<\/a> properties of this widget are identical to the\nsimilarly-named properties on the <a href=\"material\/Switch-class.html\">Switch<\/a> widget.<\/p>\n<p>The <a href=\"material\/SwitchListTile\/title.html\">title<\/a>, <a href=\"material\/SwitchListTile\/subtitle.html\">subtitle<\/a>, <a href=\"material\/SwitchListTile\/isThreeLine.html\">isThreeLine<\/a>, and <a href=\"material\/SwitchListTile\/dense.html\">dense<\/a> properties are like\nthose of the same name on <a href=\"material\/ListTile-class.html\">ListTile<\/a>.<\/p>\n<p>The <a href=\"material\/SwitchListTile\/selected.html\">selected<\/a> property on this widget is similar to the <a href=\"material\/SwitchListTile\/selected.html\">ListTile.selected<\/a>\nproperty, but the color used is that described by <a href=\"material\/SwitchListTile\/activeColor.html\">activeColor<\/a>, if any,\ndefaulting to the accent color of the current <a href=\"material\/Theme-class.html\">Theme<\/a>. No effort is made to\ncoordinate the <a href=\"material\/SwitchListTile\/selected.html\">selected<\/a> state and the <a href=\"material\/SwitchListTile\/value.html\">value<\/a> state; to have the list tile\nappear selected when the switch is on, pass the same value to both.<\/p>\n<p>The switch is shown on the right by default in left-to-right languages (i.e.\nin the <a href=\"material\/ListTile\/trailing.html\">ListTile.trailing<\/a> slot). The <a href=\"material\/SwitchListTile\/secondary.html\">secondary<\/a> widget is placed in the\n<a href=\"material\/ListTile\/leading.html\">ListTile.leading<\/a> slot. This cannot be changed; there is not sufficient\nspace in a <a href=\"material\/ListTile-class.html\">ListTile<\/a>'s <a href=\"material\/ListTile\/leading.html\">ListTile.leading<\/a> slot for a <a href=\"material\/Switch-class.html\">Switch<\/a>.<\/p>\n<p>To show the <a href=\"material\/SwitchListTile-class.html\">SwitchListTile<\/a> as disabled, pass null as the <a href=\"material\/SwitchListTile\/onChanged.html\">onChanged<\/a>\ncallback.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis widget shows a switch that, when toggled, changes the state of a <a href=\"dart-core\/bool-class.html\">bool<\/a>\nmember field called <code>_lights<\/code>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">SwitchListTile(\n  title: const Text('Lights'),\n  value: _lights,\n  onChanged: (bool value) { setState(() { _lights = value; }); },\n  secondary: const Icon(Icons.lightbulb_outline),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ListTileTheme-class.html\">ListTileTheme<\/a>, which can be used to affect the style of list tiles,\nincluding switch list tiles.<\/li>\n<li>\n<a href=\"material\/CheckboxListTile-class.html\">CheckboxListTile<\/a>, a similar widget for checkboxes.<\/li>\n<li>\n<a href=\"material\/RadioListTile-class.html\">RadioListTile<\/a>, a similar widget for radio buttons.<\/li>\n<li>\n<a href=\"material\/ListTile-class.html\">ListTile<\/a> and <a href=\"material\/Switch-class.html\">Switch<\/a>, the widgets from which this widget is made.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/SwitchListTile-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.SwitchListTile",
    "shortname": "SwitchListTile",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the user toggles the switch on or off.<\/p>\n<p>The switch passes the new value to the callback but does not actually\nchange state until the parent widget rebuilds the switch tile with the\nnew value.<\/p>\n<p>If null, the switch will be displayed as disabled.<\/p>\n<p>The callback provided to <a href=\"material\/SwitchListTile\/onChanged.html\">onChanged<\/a> should update the state of the parent\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the parent\ngets rebuilt; for example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">SwitchListTile(\n  value: _lights,\n  onChanged: (bool newValue) {\n    setState(() {\n      _lights = newValue;\n    });\n  },\n  title: Text('Lights'),\n)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/onChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.bool>",
            "memberOf": "material.SwitchListTile",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a combination of a list tile and a switch.<\/p>\n<p>The switch tile itself does not maintain any state. Instead, when the\nstate of the switch changes, the widget calls the <code>onChanged<\/code> callback.\nMost widgets that use a switch will listen for the <code>onChanged<\/code> callback\nand rebuild the switch tile with a new <code>value<\/code> to update the visual\nappearance of the switch.<\/p>\n<p>The following arguments are required:<\/p>\n<ul>\n<li>\n<code>value<\/code> determines whether this switch is on or off.<\/li>\n<li>\n<code>onChanged<\/code> is called when the user toggles the switch on or off.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SwitchListTile({\n  Key key,\n  @required this.value,\n  @required this.onChanged,\n  this.activeColor,\n  this.activeTrackColor,\n  this.inactiveThumbColor,\n  this.inactiveTrackColor,\n  this.activeThumbImage,\n  this.inactiveThumbImage,\n  this.title,\n  this.subtitle,\n  this.isThreeLine = false,\n  this.dense,\n  this.secondary,\n  this.selected = false,\n}) : _switchListTileType = _SwitchListTileType.material,\n     assert(value != null),\n     assert(isThreeLine != null),\n     assert(!isThreeLine || subtitle != null),\n     assert(selected != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/SwitchListTile\/SwitchListTile.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.SwitchListTile",
            "params": [
                {
                    "name": "activeColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "activeThumbImage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ImageProvider"
                },
                {
                    "name": "activeTrackColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dense",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "inactiveThumbColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inactiveThumbImage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ImageProvider"
                },
                {
                    "name": "inactiveTrackColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "isThreeLine",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.bool>"
                },
                {
                    "name": "secondary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "selected",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "subtitle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "title",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/SwitchListTile\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  Widget control;\n  switch (_switchListTileType) {\n    case _SwitchListTileType.adaptive:\n      control = Switch.adaptive(\n        value: value,\n        onChanged: onChanged,\n        activeColor: activeColor,\n        activeThumbImage: activeThumbImage,\n        inactiveThumbImage: inactiveThumbImage,\n        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,\n        activeTrackColor: activeTrackColor,\n        inactiveTrackColor: inactiveTrackColor,\n        inactiveThumbColor: inactiveThumbColor,\n      );\n      break;\n\n    case _SwitchListTileType.material:\n      control = Switch(\n        value: value,\n        onChanged: onChanged,\n        activeColor: activeColor,\n        activeThumbImage: activeThumbImage,\n        inactiveThumbImage: inactiveThumbImage,\n        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,\n        activeTrackColor: activeTrackColor,\n        inactiveTrackColor: inactiveTrackColor,\n        inactiveThumbColor: inactiveThumbColor,\n      );\n  }\n  return MergeSemantics(\n    child: ListTileTheme.merge(\n      selectedColor: activeColor ?? Theme.of(context).accentColor,\n      child: ListTile(\n        leading: secondary,\n        title: title,\n        subtitle: subtitle,\n        trailing: control,\n        isThreeLine: isThreeLine,\n        dense: dense,\n        enabled: onChanged != null,\n        onTap: onChanged != null ? () { onChanged(!value); } : null,\n        selected: selected,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/SwitchListTile\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SwitchListTile",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use when this switch is on.<\/p>\n<p>Defaults to accent color of the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/activeColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>An image to use on the thumb of this switch when the switch is on.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider activeThumbImage\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/activeThumbImage.html",
            "isDeprecated": "0",
            "type": "painting.ImageProvider",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>The color to use on the track when this switch is on.<\/p>\n<p>Defaults to <a href=\"material\/ThemeData\/toggleableActiveColor.html\">ThemeData.toggleableActiveColor<\/a> with the opacity set at 50%.<\/p>\n<p>Ignored if created with <a href=\"material\/SwitchListTile\/SwitchListTile.adaptive.html\">SwitchListTile.adaptive<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeTrackColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/activeTrackColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>Whether this list tile is part of a vertically dense list.<\/p>\n<p>If this property is null then its value is based on <a href=\"material\/SwitchListTile\/dense.html\">ListTileTheme.dense<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool dense\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/dense.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>The color to use on the thumb when this switch is off.<\/p>\n<p>Defaults to the colors described in the Material design specification.<\/p>\n<p>Ignored if created with <a href=\"material\/SwitchListTile\/SwitchListTile.adaptive.html\">SwitchListTile.adaptive<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color inactiveThumbColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/inactiveThumbColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>An image to use on the thumb of this switch when the switch is off.<\/p>\n<p>Ignored if created with <a href=\"material\/SwitchListTile\/SwitchListTile.adaptive.html\">SwitchListTile.adaptive<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider inactiveThumbImage\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/inactiveThumbImage.html",
            "isDeprecated": "0",
            "type": "painting.ImageProvider",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>The color to use on the track when this switch is off.<\/p>\n<p>Defaults to the colors described in the Material design specification.<\/p>\n<p>Ignored if created with <a href=\"material\/SwitchListTile\/SwitchListTile.adaptive.html\">SwitchListTile.adaptive<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color inactiveTrackColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/inactiveTrackColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>Whether this list tile is intended to display three lines of text.<\/p>\n<p>If false, the list tile is treated as having one line if the subtitle is\nnull and treated as having two lines if the subtitle is non-null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isThreeLine\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/isThreeLine.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>A widget to display on the opposite side of the tile from the switch.<\/p>\n<p>Typically an <a href=\"widgets\/Icon-class.html\">Icon<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget secondary\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/secondary.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>Whether to render icons and text in the <a href=\"material\/SwitchListTile\/activeColor.html\">activeColor<\/a>.<\/p>\n<p>No effort is made to automatically coordinate the <a href=\"material\/SwitchListTile\/selected.html\">selected<\/a> state and the\n<a href=\"material\/SwitchListTile\/value.html\">value<\/a> state. To have the list tile appear selected when the switch is\non, pass the same value to both.<\/p>\n<p>Normally, this property is left to its default value, false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool selected\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/selected.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>Additional content displayed below the title.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget subtitle\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/subtitle.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>The primary content of the list tile.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/title.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.SwitchListTile",
            "params": []
        },
        {
            "desc": "<p>Whether this switch is checked.<\/p>\n<p>This property must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool value\n\n<\/code><\/pre>\n        ",
            "href": "material\/SwitchListTile\/value.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.SwitchListTile",
            "params": []
        }
    ]
}