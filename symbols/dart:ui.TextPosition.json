{
    "desc": "<p>A position in a string of text.<\/p>\n<p>A TextPosition can be used to locate a position in a string in code (using\nthe <a href=\"dart-ui\/TextPosition\/offset.html\">offset<\/a> property), and it can also be used to locate the same position\nvisually in a rendered string of text (using <a href=\"dart-ui\/TextPosition\/offset.html\">offset<\/a> and, when needed to\nresolve ambiguity, <a href=\"dart-ui\/TextPosition\/affinity.html\">affinity<\/a>).<\/p>\n<p>The location of an offset in a rendered string is ambiguous in two cases.\nOne happens when rendered text is forced to wrap. In this case, the offset\nwhere the wrap occurs could visually appear either at the end of the first\nline or the beginning of the second line. The second way is with\nbidirectional text.  An offset at the interface between two different text\ndirections could have one of two locations in the rendered text.<\/p>\n<p>See the documentation for <a href=\"dart-ui\/TextAffinity-class.html\">TextAffinity<\/a> for more information on how\nTextAffinity disambiguates situations like these.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/TextPosition-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.TextPosition",
    "shortname": "TextPosition",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an object representing a particular position in a string.<\/p>\n<p>The arguments must not be null (so the <code>offset<\/code> argument is required).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextPosition({\n  this.offset,\n  this.affinity: TextAffinity.downstream,\n}) : assert(offset != null),\n     assert(affinity != null);<\/code><\/pre>\n    ",
            "href": "dart-ui\/TextPosition\/TextPosition.html",
            "isDeprecated": false,
            "type": "",
            "name": "TextPosition",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:ui.TextPosition",
            "params": [
                {
                    "name": "affinity",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextAffinity"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(offset: $offset, affinity: $affinity)';\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/TextPosition\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.TextPosition",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Disambiguates cases where the position in the string given by <a href=\"dart-ui\/TextPosition\/offset.html\">offset<\/a>\ncould represent two different visual positions in the rendered text. For\nexample, this can happen when text is forced to wrap, or when one string\nof text is rendered with multiple text directions.<\/p>\n<p>See the documentation for <a href=\"dart-ui\/TextAffinity-class.html\">TextAffinity<\/a> for more information on how\nTextAffinity disambiguates situations like these.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAffinity affinity\n\n<\/code><\/pre>\n        ",
            "href": "dart-ui\/TextPosition\/affinity.html",
            "name": "affinity",
            "isDeprecated": false,
            "type": "dart:ui.TextAffinity",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.TextPosition",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextPosition\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextPosition\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(offset, affinity);<\/code><\/pre>\n        ",
            "href": "dart-ui\/TextPosition\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.TextPosition",
            "params": []
        },
        {
            "desc": "<p>The index of the character that immediately follows the position in the\nstring representation of the text.<\/p>\n<p>For example, given the string <code>'Hello'<\/code>, offset 0 represents the cursor\nbeing before the <code>H<\/code>, while offset 5 represents the cursor being just\nafter the <code>o<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int offset\n\n<\/code><\/pre>\n        ",
            "href": "dart-ui\/TextPosition\/offset.html",
            "name": "offset",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.TextPosition",
            "params": []
        }
    ]
}