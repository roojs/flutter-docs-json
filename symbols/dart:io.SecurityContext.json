{
    "desc": "<p>The object containing the certificates to trust when making\na secure client connection, and the certificate chain and\nprivate key to serve from a secure server.<\/p>\n<p>The <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a>  and <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> classes take a SecurityContext\nas an argument to their connect and bind methods.<\/p>\n<p>Certificates and keys can be added to a SecurityContext from either PEM\nor PKCS12 containers.<\/p>\n<p>iOS note: Some methods to add, remove, and inspect certificates are not yet\nimplemented. However, the platform's built-in trusted certificates can\nbe used, by way of <a href=\"dart-io\/SecurityContext\/defaultContext.html\">SecurityContext.defaultContext<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/SecurityContext-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.SecurityContext",
    "shortname": "SecurityContext",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a>.<\/p>\n<p>By default, the created <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> contains no keys or certificates.\nThese can be added by calling the methods of this class.<\/p>\n<p>If <code>withTrustedRoots<\/code> is passed as <code>true<\/code>, the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> will be\nseeded by the trusted root certificates provided as explained below. To\nobtain a <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> containing trusted root certificates,\n<a href=\"dart-io\/SecurityContext\/defaultContext.html\">SecurityContext.defaultContext<\/a> is usually sufficient, and should\nbe used instead. However, if the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> containing the trusted\nroot certificates must be modified per-connection, then <code>withTrustedRoots<\/code>\nshould be used.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory SecurityContext({bool withTrustedRoots: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/SecurityContext.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "withTrustedRoots",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Sets the list of application-level protocols supported by a client\nconnection or server connection. The ALPN (application level protocol\nnegotiation) extension to TLS allows a client to send a list of\nprotocols in the TLS client hello message, and the server to pick\none and send the selected one back in its server hello message.<\/p>\n<p>Separate lists of protocols can be sent for client connections and\nfor server connections, using the same SecurityContext.  The <code>isServer<\/code>\nboolean argument specifies whether to set the list for server connections\nor client connections.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAlpnProtocols(List&lt;String&gt; protocols, bool isServer);<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/setAlpnProtocols.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "isServer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "protocols",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Sets the list of authority names that a <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> will advertise\nas accepted when requesting a client certificate from a connecting\nclient.<\/p>\n<p><code>file<\/code> is a PEM or PKCS12 file containing the accepted signing\nauthority certificates - the authority names are extracted from the\ncertificates. For PKCS12 files, <code>password<\/code> is the password for the file.\nFor PEM files, <code>password<\/code> is ignored. Assuming it is well-formatted, all\nother contents of <code>file<\/code> are ignored.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/setClientAuthoritiesBytes.html\">setClientAuthoritiesBytes<\/a>.<\/p>\n<p>iOS note: This call is not supported.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setClientAuthorities(String file, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/setClientAuthorities.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "file",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the list of authority names that a <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> will advertise\nas accepted, when requesting a client certificate from a connecting\nclient.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/setClientAuthorities.html\">setClientAuthorities<\/a> but takes the contents of the file.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setClientAuthoritiesBytes(List&lt;int&gt; authCertBytes, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/setClientAuthoritiesBytes.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "authCertBytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the set of trusted X509 certificates used by <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a>\nclient connections, when connecting to a secure server.<\/p>\n<p><code>file<\/code> is the path to a PEM or PKCS12 file containing X509 certificates,\nusually root certificates from certificate authorities. For PKCS12 files,\n<code>password<\/code> is the password for the file. For PEM files, <code>password<\/code> is\nignored. Assuming it is well-formatted, all other contents of <code>file<\/code> are\nignored.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/setTrustedCertificatesBytes.html\">setTrustedCertificatesBytes<\/a>.<\/p>\n<p>iOS note: On iOS, this call takes only the bytes for a single DER\nencoded X509 certificate. It may be called multiple times to add\nmultiple trusted certificates to the context. A DER encoded certificate\ncan be obtained from a PEM encoded certificate by using the openssl tool:<\/p>\n<p>  $ openssl x509 -outform der -in cert.pem -out cert.der<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setTrustedCertificates(String file, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/setTrustedCertificates.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "file",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the set of trusted X509 certificates used by <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a>\nclient connections, when connecting to a secure server.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/setTrustedCertificates.html\">setTrustedCertificates<\/a> but takes the contents of the file.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setTrustedCertificatesBytes(List&lt;int&gt; certBytes, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/setTrustedCertificatesBytes.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "certBytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the chain of X509 certificates served by <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a>\nwhen making secure connections, including the server certificate.<\/p>\n<p><code>file<\/code> is a PEM or PKCS12 file containing X509 certificates, starting with\nthe root authority and intermediate authorities forming the signed\nchain to the server certificate, and ending with the server certificate.\nThe private key for the server certificate is set by <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a>. For\nPKCS12 files, <code>password<\/code> is the password for the file. For PEM files,\n<code>password<\/code> is ignored. Assuming it is well-formatted, all\nother contents of <code>file<\/code> are ignored.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/useCertificateChainBytes.html\">useCertificateChainBytes<\/a>.<\/p>\n<p>iOS note: As noted above, <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a> does the job of both\nthat call and this one. On iOS, this call is a no-op.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void useCertificateChain(String file, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/useCertificateChain.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "file",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the chain of X509 certificates served by <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a>\nwhen making secure connections, including the server certificate.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/useCertificateChain.html\">useCertificateChain<\/a> but takes the contents of the file.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void useCertificateChainBytes(List&lt;int&gt; chainBytes, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/useCertificateChainBytes.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "chainBytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the private key for a server certificate or client certificate.<\/p>\n<p>A secure connection using this SecurityContext will use this key with\nthe server or client certificate to sign and decrypt messages.\n<code>file<\/code> is the path to a PEM or PKCS12 file containing an encrypted\nprivate key, encrypted with <code>password<\/code>. Assuming it is well-formatted, all\nother contents of <code>file<\/code> are ignored. An unencrypted file can be used,\nbut this is not usual.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/usePrivateKeyBytes.html\">usePrivateKeyBytes<\/a>.<\/p>\n<p>iOS note: Only PKCS12 data is supported. It should contain both the private\nkey and the certificate chain. On iOS one call to <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a> with this\ndata is used instead of two calls to <a href=\"dart-io\/SecurityContext\/useCertificateChain.html\">useCertificateChain<\/a> and\n<a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void usePrivateKey(String file, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/usePrivateKey.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "file",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sets the private key for a server certificate or client certificate.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a>, but takes the contents of the file as a list\nof bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void usePrivateKeyBytes(List&lt;int&gt; keyBytes, {String password});<\/code><\/pre>\n    ",
            "href": "dart-io\/SecurityContext\/usePrivateKeyBytes.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.SecurityContext",
            "params": [
                {
                    "name": "keyBytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "password",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the platform supports ALPN. This always returns true and will be\nremoved in a future release.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nexternal static bool get alpnSupported;<\/code><\/pre>\n        ",
            "href": "dart-io\/SecurityContext\/alpnSupported.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.SecurityContext",
            "params": []
        },
        {
            "desc": "<p>Secure networking classes with an optional <code>context<\/code> parameter\nuse the <a href=\"dart-io\/SecurityContext\/defaultContext.html\">defaultContext<\/a> object if the parameter is omitted.\nThis object can also be accessed, and modified, directly.\nEach isolate has a different <a href=\"dart-io\/SecurityContext\/defaultContext.html\">defaultContext<\/a> object.\nThe <a href=\"dart-io\/SecurityContext\/defaultContext.html\">defaultContext<\/a> object uses a list of well-known trusted\ncertificate authorities as its trusted roots. On Linux and Windows, this\nlist is taken from Mozilla, who maintains it as part of Firefox. On,\nMacOS, iOS, and Android, this list comes from the trusted certificates\nstores built in to the platforms.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static SecurityContext get defaultContext;<\/code><\/pre>\n        ",
            "href": "dart-io\/SecurityContext\/defaultContext.html",
            "isDeprecated": "0",
            "type": "dart:io.SecurityContext",
            "memberOf": "dart:io.SecurityContext",
            "params": []
        }
    ]
}