{
    "desc": "<p>Keeps state about which objects are interested in tracking mouse positions\nand notifies them when a mouse pointer enters, moves, or leaves an annotated\nregion that they are interested in.<\/p>\n<p>Owned by the <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> class.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "gestures\/MouseTracker-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "gestures",
    "name": "gestures.MouseTracker",
    "shortname": "MouseTracker",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Used to find annotations at a given logical coordinate.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MouseDetectorAnnotationFinder annotationFinder\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/MouseTracker\/annotationFinder.html",
            "isDeprecated": false,
            "type": "gestures.MouseDetectorAnnotationFinder",
            "name": "annotationFinder",
            "memberOf": "gestures.MouseTracker",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a mouse tracker to keep track of mouse locations.<\/p>\n<p>All of the parameters must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MouseTracker(PointerRouter router, this.annotationFinder)\n    : assert(router != null),\n      assert(annotationFinder != null) {\n  router.addGlobalRoute(_handleEvent);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MouseTracker\/MouseTracker.html",
            "isDeprecated": false,
            "type": "",
            "name": "MouseTracker",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.MouseTracker",
            "params": [
                {
                    "name": "annotationFinder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.MouseDetectorAnnotationFinder"
                },
                {
                    "name": "router",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.PointerRouter"
                }
            ]
        },
        {
            "desc": "<p>Track an annotation so that if the mouse enters it, we send it events.<\/p>\n<p>This is typically called when the <a href=\"widgets\/AnnotatedRegion-class.html\">AnnotatedRegion<\/a> containing this\nannotation has been added to the layer tree.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void attachAnnotation(MouseTrackerAnnotation annotation) {\n  _trackedAnnotations[annotation] = _TrackedAnnotation(annotation);\n  \/\/ Schedule a check so that we test this new annotation to see if the mouse\n  \/\/ is currently inside its region.\n  _scheduleMousePositionCheck();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MouseTracker\/attachAnnotation.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "attachAnnotation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MouseTracker",
            "params": [
                {
                    "name": "annotation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.MouseTrackerAnnotation"
                }
            ]
        },
        {
            "desc": "<p>Tells interested objects that a mouse has entered, exited, or moved, given\na callback to fetch the <a href=\"gestures\/MouseTrackerAnnotation-class.html\">MouseTrackerAnnotation<\/a> associated with a global\noffset.<\/p>\n<p>This is called from a post-frame callback when the layer tree has been\nupdated, right after rendering the frame.<\/p>\n<p>This function is only public to allow for proper testing of the\nMouseTracker. Do not call in other contexts.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nvoid collectMousePositions() {\n  void exitAnnotation(_TrackedAnnotation trackedAnnotation, int deviceId) {\n    if (trackedAnnotation.annotation?.onExit != null &amp;&amp; trackedAnnotation.activeDevices.contains(deviceId)) {\n      trackedAnnotation.annotation.onExit(PointerExitEvent.fromHoverEvent(_lastMouseEvent[deviceId]));\n      trackedAnnotation.activeDevices.remove(deviceId);\n    }\n  }\n\n  void exitAllDevices(_TrackedAnnotation trackedAnnotation) {\n    if (trackedAnnotation.activeDevices.isNotEmpty) {\n      final Set&lt;int&gt; deviceIds = trackedAnnotation.activeDevices.toSet();\n      for (int deviceId in deviceIds) {\n        exitAnnotation(trackedAnnotation, deviceId);\n      }\n    }\n  }\n\n  \/\/ This indicates that all mouse pointers were removed, or none have been\n  \/\/ connected yet. If no mouse is connected, then we want to make sure that\n  \/\/ all active annotations are exited.\n  if (!mouseIsConnected) {\n    _trackedAnnotations.values.forEach(exitAllDevices);\n    return;\n  }\n\n  for (int deviceId in _lastMouseEvent.keys) {\n    final PointerEvent lastEvent = _lastMouseEvent[deviceId];\n    final MouseTrackerAnnotation hit = annotationFinder(lastEvent.position);\n\n    \/\/ No annotation was found at this position for this deviceId, so send an\n    \/\/ exit to all active tracked annotations, since none of them were hit.\n    if (hit == null) {\n      \/\/ Send an exit to all tracked animations tracking this deviceId.\n      for (_TrackedAnnotation trackedAnnotation in _trackedAnnotations.values) {\n        exitAnnotation(trackedAnnotation, deviceId);\n      }\n      return;\n    }\n\n    final _TrackedAnnotation hitAnnotation = _findAnnotation(hit);\n    if (!hitAnnotation.activeDevices.contains(deviceId)) {\n      \/\/ A tracked annotation that just became active and needs to have an enter\n      \/\/ event sent to it.\n      hitAnnotation.activeDevices.add(deviceId);\n      if (hitAnnotation.annotation?.onEnter != null) {\n        hitAnnotation.annotation.onEnter(PointerEnterEvent.fromHoverEvent(lastEvent));\n      }\n    }\n    if (hitAnnotation.annotation?.onHover != null) {\n      hitAnnotation.annotation.onHover(lastEvent);\n    }\n\n    \/\/ Tell any tracked annotations that weren't hit that they are no longer\n    \/\/ active.\n    for (_TrackedAnnotation trackedAnnotation in _trackedAnnotations.values) {\n      if (hitAnnotation == trackedAnnotation) {\n        continue;\n      }\n      if (trackedAnnotation.activeDevices.contains(deviceId)) {\n        if (trackedAnnotation.annotation?.onExit != null) {\n          trackedAnnotation.annotation.onExit(PointerExitEvent.fromHoverEvent(lastEvent));\n        }\n        trackedAnnotation.activeDevices.remove(deviceId);\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MouseTracker\/collectMousePositions.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "collectMousePositions",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MouseTracker",
            "params": []
        },
        {
            "desc": "<p>Stops tracking an annotation, indicating that it has been removed from the\nlayer tree.<\/p>\n<p>If the associated layer is not removed, and receives a hit, then\n<a href=\"gestures\/MouseTracker\/collectMousePositions.html\">collectMousePositions<\/a> will assert the next time it is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void detachAnnotation(MouseTrackerAnnotation annotation) {\n  final _TrackedAnnotation trackedAnnotation = _findAnnotation(annotation);\n  assert(trackedAnnotation != null, \"Tried to detach an annotation that wasn't attached: $annotation\");\n  for (int deviceId in trackedAnnotation.activeDevices) {\n    annotation.onExit(PointerExitEvent.fromHoverEvent(_lastMouseEvent[deviceId]));\n  }\n  _trackedAnnotations.remove(annotation);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MouseTracker\/detachAnnotation.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "detachAnnotation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MouseTracker",
            "params": [
                {
                    "name": "annotation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.MouseTrackerAnnotation"
                }
            ]
        },
        {
            "desc": "<p>Checks if the given <a href=\"gestures\/MouseTrackerAnnotation-class.html\">MouseTrackerAnnotation<\/a> is attached to this\n<a href=\"gestures\/MouseTracker-class.html\">MouseTracker<\/a>.<\/p>\n<p>This function is only public to allow for proper testing of the\nMouseTracker. Do not call in other contexts.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nbool isAnnotationAttached(MouseTrackerAnnotation annotation) {\n  return _trackedAnnotations[annotation] != null;\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MouseTracker\/isAnnotationAttached.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isAnnotationAttached",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MouseTracker",
            "params": [
                {
                    "name": "annotation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.MouseTrackerAnnotation"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether or not a mouse is connected and has produced events.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get mouseIsConnected =&gt; _lastMouseEvent.isNotEmpty;<\/code><\/pre>\n        ",
            "href": "gestures\/MouseTracker\/mouseIsConnected.html",
            "name": "mouseIsConnected",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.MouseTracker",
            "params": []
        }
    ]
}