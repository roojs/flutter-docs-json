{
    "desc": "<p>A widget that cross-fades between two given children and animates itself\nbetween their sizes.<\/p>\n<p>The animation is controlled through the <a href=\"widgets\/AnimatedCrossFade\/crossFadeState.html\">crossFadeState<\/a> parameter.\n<a href=\"widgets\/AnimatedCrossFade\/firstCurve.html\">firstCurve<\/a> and <a href=\"widgets\/AnimatedCrossFade\/secondCurve.html\">secondCurve<\/a> represent the opacity curves of the two\nchildren. The <a href=\"widgets\/AnimatedCrossFade\/firstCurve.html\">firstCurve<\/a> is inverted, i.e. it fades out when providing a\ngrowing curve like <a href=\"animation\/Curves\/linear-constant.html\">Curves.linear<\/a>. The <a href=\"widgets\/AnimatedCrossFade\/sizeCurve.html\">sizeCurve<\/a> is the curve used to\nanimate between the size of the fading-out child and the size of the\nfading-in child.<\/p>\n<p>This widget is intended to be used to fade a pair of widgets with the same\nwidth. In the case where the two children have different heights, the\nanimation crops overflowing children during the animation by aligning their\ntop edge, which means that the bottom will be clipped.<\/p>\n<p>The animation is automatically triggered when an existing\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a> is rebuilt with a different value for the\n<a href=\"widgets\/AnimatedCrossFade\/crossFadeState.html\">crossFadeState<\/a> property.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis code fades between two representations of the Flutter logo. It depends\non a boolean field <code>_first<\/code>; when <code>_first<\/code> is true, the first logo is shown,\notherwise the second logo is shown. When the field changes state, the\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a> widget cross-fades between the two forms of the logo\nover three seconds.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">AnimatedCrossFade(\n  duration: const Duration(seconds: 3),\n  firstChild: const FlutterLogo(style: FlutterLogoStyle.horizontal, size: 100.0),\n  secondChild: const FlutterLogo(style: FlutterLogoStyle.stacked, size: 100.0),\n  crossFadeState: _first ? CrossFadeState.showFirst : CrossFadeState.showSecond,\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AnimatedSize-class.html\">AnimatedSize<\/a>, the lower-level widget which <a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a> uses to\nautomatically change size.<\/li>\n<li>\n<a href=\"widgets\/AnimatedSwitcher-class.html\">AnimatedSwitcher<\/a>, which switches out a child for a new one with a\ncustomizable transition.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/AnimatedCrossFade-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.AnimatedCrossFade",
    "shortname": "AnimatedCrossFade",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>A builder that positions the <a href=\"widgets\/AnimatedCrossFade\/firstChild.html\">firstChild<\/a> and <a href=\"widgets\/AnimatedCrossFade\/secondChild.html\">secondChild<\/a> widgets.<\/p>\n<p>The widget returned by this method is wrapped in an <a href=\"widgets\/AnimatedSize-class.html\">AnimatedSize<\/a>.<\/p>\n<p>By default, this uses <a href=\"widgets\/AnimatedCrossFade\/defaultLayoutBuilder.html\">AnimatedCrossFade.defaultLayoutBuilder<\/a>, which uses\na <a href=\"widgets\/Stack-class.html\">Stack<\/a> and aligns the <code>bottomChild<\/code> to the top of the stack while\nproviding the <code>topChild<\/code> as the non-positioned child to fill the provided\nconstraints. This works well when the <a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a> is in a position\nto change size and when the children are not flexible. However, if the\nchildren are less fussy about their sizes (for example a\n<a href=\"material\/CircularProgressIndicator-class.html\">CircularProgressIndicator<\/a> inside a <a href=\"widgets\/Center-class.html\">Center<\/a>), or if the\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a> is being forced to a particular size, then it can\nresult in the widgets jumping about when the cross-fade state is changed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AnimatedCrossFadeBuilder layoutBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/layoutBuilder.html",
            "isDeprecated": "0",
            "type": "widgets.AnimatedCrossFadeBuilder",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a cross-fade animation widget.<\/p>\n<p>The <code>duration<\/code> of the animation is the same for all components (fade in,\nfade out, and size), and you can pass <a href=\"animation\/Interval-class.html\">Interval<\/a>s instead of <a href=\"animation\/Curve-class.html\">Curve<\/a>s in\norder to have finer control, e.g., creating an overlap between the fades.<\/p>\n<p>All the arguments other than <code>key<\/code> must be non-null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnimatedCrossFade({\n  Key key,\n  @required this.firstChild,\n  @required this.secondChild,\n  this.firstCurve = Curves.linear,\n  this.secondCurve = Curves.linear,\n  this.sizeCurve = Curves.linear,\n  this.alignment = Alignment.topCenter,\n  @required this.crossFadeState,\n  @required this.duration,\n  this.layoutBuilder = defaultLayoutBuilder,\n}) : assert(firstChild != null),\n     assert(secondChild != null),\n     assert(firstCurve != null),\n     assert(secondCurve != null),\n     assert(sizeCurve != null),\n     assert(alignment != null),\n     assert(crossFadeState != null),\n     assert(duration != null),\n     assert(layoutBuilder != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedCrossFade\/AnimatedCrossFade.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.AnimatedCrossFade",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "crossFadeState",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.CrossFadeState"
                },
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "firstChild",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "firstCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "layoutBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.AnimatedCrossFadeBuilder"
                },
                {
                    "name": "secondChild",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "secondCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "sizeCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "animation.Curve"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/AnimatedCrossFade\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_AnimatedCrossFadeState createState() =&gt; _AnimatedCrossFadeState();<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedCrossFade\/createState.html",
            "isDeprecated": "0",
            "type": "<_AnimatedCrossFadeState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/AnimatedCrossFade\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;CrossFadeState&gt;('crossFadeState', crossFadeState));\n  properties.add(DiagnosticsProperty&lt;AlignmentGeometry&gt;('alignment', alignment, defaultValue: Alignment.topCenter));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedCrossFade\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedCrossFade",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>The default layout algorithm used by <a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a>.<\/p>\n<p>The top child is placed in a stack that sizes itself to match the top\nchild. The bottom child is positioned at the top of the same stack, sized\nto fit its width but without forcing the height. The stack is then\nclipped.<\/p>\n<p>This is the default value for <a href=\"widgets\/AnimatedCrossFade\/layoutBuilder.html\">layoutBuilder<\/a>. It implements\n<a href=\"widgets\/AnimatedCrossFadeBuilder.html\">AnimatedCrossFadeBuilder<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Widget defaultLayoutBuilder(Widget topChild, Key topChildKey, Widget bottomChild, Key bottomChildKey) {\n  return Stack(\n    overflow: Overflow.visible,\n    children: &lt;Widget&gt;[\n      Positioned(\n        key: bottomChildKey,\n        left: 0.0,\n        top: 0.0,\n        right: 0.0,\n        child: bottomChild,\n      ),\n      Positioned(\n        key: topChildKey,\n        child: topChild,\n      ),\n    ],\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedCrossFade\/defaultLayoutBuilder.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedCrossFade",
            "params": [
                {
                    "name": "bottomChild",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "bottomChildKey",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.Key"
                },
                {
                    "name": "topChild",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "topChildKey",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.Key"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How the children should be aligned while the size is animating.<\/p>\n<p>Defaults to <a href=\"painting\/Alignment\/topCenter-constant.html\">Alignment.topCenter<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/alignment.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The child that will be shown when the animation has completed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CrossFadeState crossFadeState\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/crossFadeState.html",
            "isDeprecated": "0",
            "type": "widgets.CrossFadeState",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The duration of the whole orchestrated animation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/duration.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The child that is visible when <a href=\"widgets\/AnimatedCrossFade\/crossFadeState.html\">crossFadeState<\/a> is\n<a href=\"widgets\/CrossFadeState-class.html\">CrossFadeState.showFirst<\/a>. It fades out when transitioning\n<a href=\"widgets\/AnimatedCrossFade\/crossFadeState.html\">crossFadeState<\/a> from <a href=\"widgets\/CrossFadeState-class.html\">CrossFadeState.showFirst<\/a> to\n<a href=\"widgets\/CrossFadeState-class.html\">CrossFadeState.showSecond<\/a> and vice versa.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget firstChild\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/firstChild.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The fade curve of the first child.<\/p>\n<p>Defaults to <a href=\"animation\/Curves\/linear-constant.html\">Curves.linear<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve firstCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/firstCurve.html",
            "isDeprecated": "0",
            "type": "animation.Curve",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The child that is visible when <a href=\"widgets\/AnimatedCrossFade\/crossFadeState.html\">crossFadeState<\/a> is\n<a href=\"widgets\/CrossFadeState-class.html\">CrossFadeState.showSecond<\/a>. It fades in when transitioning\n<a href=\"widgets\/AnimatedCrossFade\/crossFadeState.html\">crossFadeState<\/a> from <a href=\"widgets\/CrossFadeState-class.html\">CrossFadeState.showFirst<\/a> to\n<a href=\"widgets\/CrossFadeState-class.html\">CrossFadeState.showSecond<\/a> and vice versa.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget secondChild\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/secondChild.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The fade curve of the second child.<\/p>\n<p>Defaults to <a href=\"animation\/Curves\/linear-constant.html\">Curves.linear<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve secondCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/secondCurve.html",
            "isDeprecated": "0",
            "type": "animation.Curve",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        },
        {
            "desc": "<p>The curve of the animation between the two children's sizes.<\/p>\n<p>Defaults to <a href=\"animation\/Curves\/linear-constant.html\">Curves.linear<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve sizeCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedCrossFade\/sizeCurve.html",
            "isDeprecated": "0",
            "type": "animation.Curve",
            "memberOf": "widgets.AnimatedCrossFade",
            "params": []
        }
    ]
}