{
    "desc": "<p>Embeds an Android view in the Widget hierarchy.<\/p>\n<p>Requires Android API level 20 or greater.<\/p>\n<p>Embedding Android views is an expensive operation and should be avoided when a Flutter\nequivalent is possible.<\/p>\n<p>The embedded Android view is painted just like any other Flutter widget and transformations\napply to it as well.<\/p>\n<p>The widget fills all available space, the parent of this object must provide bounded layout\nconstraints.\nThe widget participates in Flutter's <code>GestureArena<\/code>s, and dispatches touch events to the\nplatform view iff it won the arena. Specific gestures that should be dispatched to the platform\nview can be specified in the <code>gestureRecognizers<\/code> constructor parameter. If\nthe set of gesture recognizers is empty, a gesture will be dispatched to the platform\nview iff it was not claimed by any other gesture recognizer.\nThe Android view object is created using a <a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewFactory.html\">PlatformViewFactory<\/a>.\nPlugins can register platform view factories with <a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewRegistry.html#registerViewFactory-java.lang.String-io.flutter.plugin.platform.PlatformViewFactory-\">PlatformViewRegistry#registerViewFactory<\/a>.<\/p>\n<p>Registration is typically done in the plugin's registerWith method, e.g:<\/p>\n<pre class=\"language-java\"><code class=\"language-java\">  public static void registerWith(Registrar registrar) {\n    registrar.platformViewRegistry().registerViewFactory(\"webview\", WebViewFactory(registrar.messenger()));\n  }\n<\/code><\/pre>\n<p>The platform view's lifetime is the same as the lifetime of the <a href=\"widgets\/State-class.html\">State<\/a> object for this widget.\nWhen the <a href=\"widgets\/State-class.html\">State<\/a> is disposed the platform view (and auxiliary resources) are lazily\nreleased (some resources are immediately released and some by platform garbage collector).\nA stateful widget's state is disposed when the widget is removed from the tree or when it is\nmoved within the tree. If the stateful widget has a key and it's only moved relative to its siblings,\nor it has a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> and it's moved within the tree, it will not be disposed.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/AndroidView-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.AndroidView",
    "shortname": "AndroidView",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Callback to invoke after the platform view has been created.<\/p>\n<p>May be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PlatformViewCreatedCallback onPlatformViewCreated\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AndroidView\/onPlatformViewCreated.html",
            "isDeprecated": false,
            "type": "services.PlatformViewCreatedCallback",
            "name": "onPlatformViewCreated",
            "memberOf": "widgets.AndroidView",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that embeds an Android view.<\/p>\n<p>The <code>viewType<\/code> and <code>hitTestBehavior<\/code> parameters must not be null.\nIf <code>creationParams<\/code> is not null then <code>creationParamsCodec<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AndroidView({\n  Key key,\n  @required this.viewType,\n  this.onPlatformViewCreated,\n  this.hitTestBehavior = PlatformViewHitTestBehavior.opaque,\n  this.layoutDirection,\n  this.gestureRecognizers,\n  this.creationParams,\n  this.creationParamsCodec,\n}) : assert(viewType != null),\n     assert(hitTestBehavior != null),\n     assert(creationParams == null || creationParamsCodec != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/AndroidView\/AndroidView.html",
            "isDeprecated": "0",
            "type": "",
            "name": "AndroidView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.AndroidView",
            "params": [
                {
                    "name": "creationParams",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<dynamic>"
                },
                {
                    "name": "creationParamsCodec",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "services.MessageCodec"
                },
                {
                    "name": "gestureRecognizers",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Set<foundation.Factory<gestures.OneSequenceGestureRecognizer>>"
                },
                {
                    "name": "hitTestBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.PlatformViewHitTestBehavior"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "layoutDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "onPlatformViewCreated",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "services.PlatformViewCreatedCallback"
                },
                {
                    "name": "viewType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/AndroidView\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;AndroidView&gt; createState() =&gt; _AndroidViewState();<\/code><\/pre>\n    ",
            "href": "widgets\/AndroidView\/createState.html",
            "isDeprecated": "0",
            "type": "widgets.State<widgets.AndroidView>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AndroidView",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The codec used to encode <code>creationParams<\/code> before sending it to the\nplatform side. It should match the codec passed to the constructor of <a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewFactory.html#PlatformViewFactory-io.flutter.plugin.common.MessageCodec-\">PlatformViewFactory<\/a>.<\/p>\n<p>This is typically one of: <a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>, <a href=\"services\/JSONMessageCodec-class.html\">JSONMessageCodec<\/a>, <a href=\"services\/StringCodec-class.html\">StringCodec<\/a>, or <a href=\"services\/BinaryCodec-class.html\">BinaryCodec<\/a>.<\/p>\n<p>This must not be null if <a href=\"widgets\/AndroidView\/creationParams.html\">creationParams<\/a> is not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MessageCodec&lt;dynamic&gt; creationParamsCodec\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AndroidView\/creationParamsCodec.html",
            "name": "creationParamsCodec",
            "isDeprecated": false,
            "type": "services.MessageCodec",
            "memberOf": "widgets.AndroidView",
            "params": []
        },
        {
            "desc": "<p>Which gestures should be forwarded to the Android view.<\/p>\n<p>The gesture recognizers built by factories in this set participate in the gesture arena for\neach pointer that was put down on the widget. If any of these recognizers win the\ngesture arena, the entire pointer event sequence starting from the pointer down event\nwill be dispatched to the platform view.<\/p>\n<p>When null, an empty set of gesture recognizer factories is used, in which case a pointer event sequence\nwill only be dispatched to the platform view if no other member of the arena claimed it.\nFor example, with the following setup vertical drags will not be dispatched to the Android\nview as the vertical drag gesture is claimed by the parent <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">GestureDetector(\n  onVerticalDragStart: (DragStartDetails d) {},\n  child: AndroidView(\n    viewType: 'webview',\n  ),\n)\n<\/code><\/pre>\n<p>To get the <a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a> to claim the vertical drag gestures we can pass a vertical drag\ngesture recognizer factory in <a href=\"widgets\/AndroidView\/gestureRecognizers.html\">gestureRecognizers<\/a> e.g:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">GestureDetector(\n  onVerticalDragStart: (DragStartDetails details) {},\n  child: SizedBox(\n    width: 200.0,\n    height: 100.0,\n    child: AndroidView(\n      viewType: 'webview',\n      gestureRecognizers: &lt;Factory&lt;OneSequenceGestureRecognizer&gt;&gt;[\n        new Factory&lt;OneSequenceGestureRecognizer&gt;(\n          () =&gt; new EagerGestureRecognizer(),\n        ),\n      ].toSet(),\n    ),\n  ),\n)\n<\/code><\/pre>\n<p>A platform view can be configured to consume all pointers that were put down in its bounds\nby passing a factory for an <a href=\"gestures\/EagerGestureRecognizer-class.html\">EagerGestureRecognizer<\/a> in <a href=\"widgets\/AndroidView\/gestureRecognizers.html\">gestureRecognizers<\/a>.\n<a href=\"gestures\/EagerGestureRecognizer-class.html\">EagerGestureRecognizer<\/a> is a special gesture recognizer that immediately claims the gesture\nafter a pointer down event.<\/p>\n<p>The <code>gestureRecognizers<\/code> property must not contain more than one factory with the same <a href=\"foundation\/Factory\/type.html\">Factory.type<\/a>.<\/p>\n<p>Changing <code>gestureRecognizers<\/code> results in rejection of any active gesture arenas (if the\nplatform view is actively participating in an arena).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Set&lt;Factory&lt;OneSequenceGestureRecognizer&gt;&gt; gestureRecognizers\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AndroidView\/gestureRecognizers.html",
            "name": "gestureRecognizers",
            "isDeprecated": false,
            "type": "dart:core.Set<foundation.Factory<gestures.OneSequenceGestureRecognizer>>",
            "memberOf": "widgets.AndroidView",
            "params": []
        },
        {
            "desc": "<p>How this widget should behave during hit testing.<\/p>\n<p>This defaults to <a href=\"rendering\/PlatformViewHitTestBehavior-class.html\">PlatformViewHitTestBehavior.opaque<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PlatformViewHitTestBehavior hitTestBehavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AndroidView\/hitTestBehavior.html",
            "name": "hitTestBehavior",
            "isDeprecated": false,
            "type": "rendering.PlatformViewHitTestBehavior",
            "memberOf": "widgets.AndroidView",
            "params": []
        },
        {
            "desc": "<p>The text direction to use for the embedded view.<\/p>\n<p>If this is null, the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> is used instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection layoutDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AndroidView\/layoutDirection.html",
            "name": "layoutDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.AndroidView",
            "params": []
        },
        {
            "desc": "<p>The unique identifier for Android view type to be embedded by this widget.<\/p>\n<p>A <a href=\"\/javadoc\/io\/flutter\/plugin\/platform\/PlatformViewFactory.html\">PlatformViewFactory<\/a>\nfor this type must have been registered.<\/p>\n<p>See also: <a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a> for an example of registering a platform view factory.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String viewType\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AndroidView\/viewType.html",
            "name": "viewType",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "widgets.AndroidView",
            "params": []
        }
    ]
}