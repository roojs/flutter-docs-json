{
    "name": "rendering.IntrinsicColumnWidth",
    "extends": [
        "rendering.TableColumnWidth",
        "dart:core.Object"
    ],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "IntrinsicColumnWidth",
            "type": "",
            "desc": "<p>Creates a column width based on intrinsic sizing.<\/p>\n<p>This sizing algorithm is very expensive.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.IntrinsicColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "flex",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "rendering\/IntrinsicColumnWidth\/IntrinsicColumnWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IntrinsicColumnWidth({ double flex }) : _flex = flex;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "flex",
            "type": "dart:core.double",
            "desc": "<p>The flex factor to apply to the cell if there is any room left\nover when laying out the table. The remaining space is\ndistributed to any columns with flex in proportion to their flex\nvalue (higher values get more space).<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.IntrinsicColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "rendering\/IntrinsicColumnWidth\/flex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble flex(Iterable&lt;RenderBox&gt; cells) =&gt; _flex;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "maxIntrinsicWidth",
            "type": "dart:core.double",
            "desc": "<p>The ideal width that the column should have. This must be equal\nto or greater than the <a href=\"rendering\/IntrinsicColumnWidth\/minIntrinsicWidth.html\">minIntrinsicWidth<\/a>. The column might be\nbigger than this width, e.g. if the column is flexible or if the\ntable's width ends up being forced to be bigger than the sum of\nall the maxIntrinsicWidth values.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.IntrinsicColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                },
                {
                    "name": "containerWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/IntrinsicColumnWidth\/maxIntrinsicWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble maxIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth) {\n  double result = 0.0;\n  for (RenderBox cell in cells)\n    result = math.max(result, cell.getMaxIntrinsicWidth(double.infinity));\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "minIntrinsicWidth",
            "type": "dart:core.double",
            "desc": "<p>The smallest width that the column can have.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.IntrinsicColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                },
                {
                    "name": "containerWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/IntrinsicColumnWidth\/minIntrinsicWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble minIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth) {\n  double result = 0.0;\n  for (RenderBox cell in cells)\n    result = math.max(result, cell.getMinIntrinsicWidth(double.infinity));\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.IntrinsicColumnWidth",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/IntrinsicColumnWidth\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(flex: ${_flex?.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/IntrinsicColumnWidth-class.html",
    "desc": "<p>Sizes the column according to the intrinsic dimensions of all the\ncells in that column.<\/p>\n<p>This is a very expensive way to size a column.<\/p>\n<p>A flex value can be provided. If specified (and non-null), the\ncolumn will participate in the distribution of remaining space\nonce all the non-flexible columns have been sized.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "IntrinsicColumnWidth"
}