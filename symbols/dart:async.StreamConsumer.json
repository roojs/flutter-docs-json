{
    "desc": "<p>Abstract interface for a \"sink\" accepting multiple entire streams.<\/p>\n<p>A consumer can accept a number of consecutive streams using <a href=\"dart-async\/StreamConsumer\/addStream.html\">addStream<\/a>,\nand when no further data need to be added, the <a href=\"dart-async\/StreamConsumer\/close.html\">close<\/a> method tells the\nconsumer to complete its work and shut down.<\/p>\n<p>The <a href=\"dart-async\/Stream\/pipe.html\">Stream.pipe<\/a> accepts a <code>StreamConsumer<\/code> and will pass the stream\nto the consumer's <a href=\"dart-async\/StreamConsumer\/addStream.html\">addStream<\/a> method. When that completes, it will\ncall <a href=\"dart-async\/StreamConsumer\/close.html\">close<\/a> and then complete its own returned future.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-async\/StreamConsumer-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:async",
    "name": "dart:async.StreamConsumer",
    "shortname": "StreamConsumer",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-async\/StreamConsumer\/StreamConsumer.html",
            "isDeprecated": false,
            "type": "",
            "name": "StreamConsumer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:async.StreamConsumer",
            "params": []
        },
        {
            "desc": "<p>Consumes the elements of <code>stream<\/code>.<\/p>\n<p>Listens on <code>stream<\/code> and does something for each event.<\/p>\n<p>Returns a future which is completed when the stream is done being added,\nand the consumer is ready to accept a new stream.\nNo further calls to <a href=\"dart-async\/StreamConsumer\/addStream.html\">addStream<\/a> or <a href=\"dart-async\/StreamConsumer\/close.html\">close<\/a> should happen before the\nreturned future has completed.<\/p>\n<p>The consumer may stop listening to the stream after an error,\nit may consume all the errors and only stop at a done event,\nor it may be canceled early if the receiver don't want any further events.<\/p>\n<p>If the consumer stops listening because of some error preventing it\nfrom continuing, it may report this error in the returned future,\notherwise it will just complete the future with <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;S&gt; stream);<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamConsumer\/addStream.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "addStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamConsumer",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Tells the consumer that no further streams will be added.<\/p>\n<p>This allows the consumer to complete any remaining work and release\nresources that are no longer needed<\/p>\n<p>Returns a future which is completed when the consumer has shut down.\nIf cleaning up can fail, the error may be reported in the returned future,\notherwise it completes with <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close();<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamConsumer\/close.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamConsumer",
            "params": []
        }
    ],
    "props": []
}