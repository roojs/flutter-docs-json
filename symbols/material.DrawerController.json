{
    "name": "material.DrawerController",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "DrawerController",
            "type": "",
            "desc": "<p>Creates a controller for a <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n<p>Rarely used directly.<\/p>\n<p>The <code>child<\/code> argument must not be null and is typically a <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.DrawerController",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "widgets.GlobalKey<widgets.State<widgets.StatefulWidget>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "widgets.GlobalKey",
                        "widgets.State",
                        "widgets.StatefulWidget"
                    ]
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "material.DrawerAlignment",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "drawerCallback",
                    "type": "material.DrawerCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "dragStartBehavior",
                    "type": "gestures.DragStartBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/DrawerController\/DrawerController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DrawerController({\n  GlobalKey key,\n  @required this.child,\n  @required this.alignment,\n  this.drawerCallback,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(child != null),\n     assert(dragStartBehavior != null),\n     assert(alignment != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "material.DrawerControllerState",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/DrawerController\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.DrawerController",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/DrawerController\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDrawerControllerState createState() =&gt; DrawerControllerState();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "alignment",
            "type": "material.DrawerAlignment",
            "types": [],
            "desc": "<p>The alignment of the <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n<p>This controls the direction in which the user should swipe to open and\nclose the drawer.<\/p>\n        ",
            "memberOf": "material.DrawerController",
            "isConstant": false,
            "href": "material\/DrawerController\/alignment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DrawerAlignment alignment\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n        ",
            "memberOf": "material.DrawerController",
            "isConstant": false,
            "href": "material\/DrawerController\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "dragStartBehavior",
            "type": "gestures.DragStartBehavior",
            "types": [],
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, the drag behavior used for opening\nand closing a drawer will begin upon the detection of a drag gesture. If\nset to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first\ndetected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/DrawerController\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "memberOf": "material.DrawerController",
            "isConstant": false,
            "href": "material\/DrawerController\/dragStartBehavior.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "drawerCallback",
            "type": "material.DrawerCallback",
            "types": [],
            "desc": "<p>Optional callback that is called when a <a href=\"material\/Drawer-class.html\">Drawer<\/a> is opened or closed.<\/p>\n        ",
            "memberOf": "material.DrawerController",
            "isConstant": false,
            "href": "material\/DrawerController\/drawerCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DrawerCallback drawerCallback\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "material.DrawerControllerState"
    ],
    "realImplementors": [
        "material.DrawerControllerState"
    ],
    "cn": [],
    "href": "material\/DrawerController-class.html",
    "desc": "<p>Provides interactive behavior for <a href=\"material\/Drawer-class.html\">Drawer<\/a> widgets.<\/p>\n<p>Rarely used directly. Drawer controllers are typically created automatically\nby <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> widgets.<\/p>\n<p>The draw controller provides the ability to open and close a drawer, either\nvia an animation or via user interaction. When closed, the drawer collapses\nto a translucent gesture detector that can be used to listen for edge\nswipes.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Drawer-class.html\">Drawer<\/a>, a container with the default width of a drawer.<\/li>\n<li>\n<a href=\"material\/Scaffold\/drawer.html\">Scaffold.drawer<\/a>, the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> slot for showing a drawer.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DrawerController"
}