{
    "desc": "<p>Base class for touch, stylus, or mouse events.<\/p>\n<p>Pointer events operate in the coordinate space of the screen, scaled to\nlogical pixels. Logical pixels approximate a grid with about 38 pixels per\ncentimeter, or 96 pixels per inch.<\/p>\n<p>This allows gestures to be recognized independent of the precise hardware\ncharacteristics of the device. In particular, features such as touch slop\n(see <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a>) can be defined in terms of roughly physical lengths so\nthat the user can shift their finger by the same distance on a high-density\ndisplay as on a low-resolution device.<\/p>\n<p>For similar reasons, pointer events are not affected by any transforms in\nthe rendering layer. This means that deltas may need to be scaled before\nbeing applied to movement within the rendering. For example, if a scrolling\nlist is shown scaled by 2x, the pointer deltas will have to be scaled by the\ninverse amount if the list is to appear to scroll with the user's finger.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Window\/devicePixelRatio.html\">Window.devicePixelRatio<\/a>, which defines the device's current resolution.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "gestures\/PointerEvent-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "gestures",
    "name": "gestures.PointerEvent",
    "shortname": "PointerEvent",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "gestures.PointerAddedEvent",
        "gestures.PointerCancelEvent",
        "gestures.PointerDownEvent",
        "gestures.PointerEnterEvent",
        "gestures.PointerExitEvent",
        "gestures.PointerHoverEvent",
        "gestures.PointerMoveEvent",
        "gestures.PointerRemovedEvent",
        "gestures.PointerScrollEvent",
        "gestures.PointerUpEvent"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PointerEvent({\n  this.timeStamp = Duration.zero,\n  this.pointer = 0,\n  this.kind = PointerDeviceKind.touch,\n  this.device = 0,\n  this.position = Offset.zero,\n  this.delta = Offset.zero,\n  this.buttons = 0,\n  this.down = false,\n  this.obscured = false,\n  this.pressure = 1.0,\n  this.pressureMin = 1.0,\n  this.pressureMax = 1.0,\n  this.distance = 0.0,\n  this.distanceMax = 0.0,\n  this.size = 0.0,\n  this.radiusMajor = 0.0,\n  this.radiusMinor = 0.0,\n  this.radiusMin = 0.0,\n  this.radiusMax = 0.0,\n  this.orientation = 0.0,\n  this.tilt = 0.0,\n  this.platformData = 0,\n  this.synthesized = false,\n});<\/code><\/pre>\n    ",
            "href": "gestures\/PointerEvent\/PointerEvent.html",
            "isDeprecated": false,
            "type": "",
            "name": "PointerEvent",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.PointerEvent",
            "params": [
                {
                    "name": "buttons",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "delta",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "device",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "distance",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "distanceMax",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "down",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "kind",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.PointerDeviceKind"
                },
                {
                    "name": "obscured",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "orientation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "platformData",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "pressure",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "pressureMax",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "pressureMin",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radiusMajor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radiusMax",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radiusMin",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radiusMinor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "size",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "synthesized",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "tilt",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "timeStamp",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/PointerEvent\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('position', position));\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('delta', delta, defaultValue: Offset.zero, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Duration&gt;('timeStamp', timeStamp, defaultValue: Duration.zero, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('pointer', pointer, level: DiagnosticLevel.debug));\n  properties.add(EnumProperty&lt;PointerDeviceKind&gt;('kind', kind, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('device', device, defaultValue: 0, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('buttons', buttons, defaultValue: 0, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('down', down, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('pressure', pressure, defaultValue: 1.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('pressureMin', pressureMin, defaultValue: 1.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('pressureMax', pressureMax, defaultValue: 1.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('distance', distance, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('distanceMin', distanceMin, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('distanceMax', distanceMax, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('size', size, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMajor', radiusMajor, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMinor', radiusMinor, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMin', radiusMin, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('radiusMax', radiusMax, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('orientation', orientation, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(DoubleProperty('tilt', tilt, defaultValue: 0.0, level: DiagnosticLevel.debug));\n  properties.add(IntProperty('platformData', platformData, defaultValue: 0, level: DiagnosticLevel.debug));\n  properties.add(FlagProperty('obscured', value: obscured, ifTrue: 'obscured', level: DiagnosticLevel.debug));\n  properties.add(FlagProperty('synthesized', value: synthesized, ifTrue: 'synthesized', level: DiagnosticLevel.debug));\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PointerEvent\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PointerEvent",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Returns a complete textual description of this event.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringFull() {\n  return toString(minLevel: DiagnosticLevel.fine);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PointerEvent\/toStringFull.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringFull",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Bit field using the *Button constants such as <a href=\"gestures\/kPrimaryMouseButton-constant.html\">kPrimaryMouseButton<\/a>,\n<a href=\"gestures\/kSecondaryStylusButton-constant.html\">kSecondaryStylusButton<\/a>, etc.<\/p>\n<p>For example, if this has the value 6 and the\n<a href=\"gestures\/PointerEvent\/kind.html\">kind<\/a> is <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a>, then this indicates an\nupside-down stylus with both its primary and secondary buttons pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int buttons\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/buttons.html",
            "name": "buttons",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Distance in logical pixels that the pointer moved since the last\n<a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>.<\/p>\n<p>This value is always 0.0 for down, up, and cancel events.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset delta\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/delta.html",
            "name": "delta",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Unique identifier for the pointing device, reused across interactions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int device\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/device.html",
            "name": "device",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The distance of the detected object from the input surface.<\/p>\n<p>For instance, this value could be the distance of a stylus or finger\nfrom a touch screen, in arbitrary units on an arbitrary (not necessarily\nlinear) scale. If the pointer is down, this is 0.0 by definition.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distance\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/distance.html",
            "name": "distance",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The maximum value that <a href=\"gestures\/PointerEvent\/distance.html\">distance<\/a> can return for this pointer.<\/p>\n<p>If this input device cannot detect \"hover touch\" input events,\nthen this will be 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double distanceMax\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/distanceMax.html",
            "name": "distanceMax",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The minimum value that <a href=\"gestures\/PointerEvent\/distance.html\">distance<\/a> can return for this pointer.<\/p>\n<p>This value is always 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get distanceMin =&gt; 0.0;<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/distanceMin.html",
            "name": "distanceMin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Set if the pointer is currently down.<\/p>\n<p>For touch and stylus pointers, this means the object (finger, pen) is in\ncontact with the input surface. For mice, it means a button is pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool down\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/down.html",
            "name": "down",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The kind of input device for which the event was generated.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerDeviceKind kind\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/kind.html",
            "name": "kind",
            "isDeprecated": false,
            "type": "dart:ui.PointerDeviceKind",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Set if an application from a different security domain is in any way\nobscuring this application's window.<\/p>\n<p>This is not currently implemented.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscured\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/obscured.html",
            "name": "obscured",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The orientation angle of the detected object, in radians.<\/p>\n<p>For <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.touch<\/a> events:<\/p>\n<p>The angle of the contact ellipse, in radians in the range:<\/p>\n<p>   -pi\/2 &lt; orientation &lt;= pi\/2<\/p>\n<p>...giving the angle of the major axis of the ellipse with the y-axis\n(negative angles indicating an orientation along the top-left \/\nbottom-right diagonal, positive angles indicating an orientation along the\ntop-right \/ bottom-left diagonal, and zero indicating an orientation\nparallel with the y-axis).<\/p>\n<p>For <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.stylus<\/a> and <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a> events:<\/p>\n<p>The angle of the stylus, in radians in the range:<\/p>\n<p>   -pi &lt; orientation &lt;= pi<\/p>\n<p>...giving the angle of the axis of the stylus projected onto the input\nsurface, relative to the positive y-axis of that surface (thus 0.0\nindicates the stylus, if projected onto that surface, would go from the\ncontact point vertically up in the positive y-axis direction, pi would\nindicate that the stylus would go down in the negative y-axis direction;\npi\/4 would indicate that the stylus goes up and to the right, -pi\/2 would\nindicate that the stylus goes to the left, etc).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double orientation\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/orientation.html",
            "name": "orientation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Opaque platform-specific data associated with the event.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int platformData\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/platformData.html",
            "name": "platformData",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Unique identifier for the pointer, not reused. Changes for each new\npointer down event.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int pointer\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/pointer.html",
            "name": "pointer",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Coordinate of the position of the pointer, in logical pixels in the global\ncoordinate space.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset position\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/position.html",
            "name": "position",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The pressure of the touch.<\/p>\n<p>This value is a number ranging from 0.0, indicating a touch with no\ndiscernible pressure, to 1.0, indicating a touch with \"normal\" pressure,\nand possibly beyond, indicating a stronger touch. For devices that do not\ndetect pressure (e.g. mice), returns 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressure\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/pressure.html",
            "name": "pressure",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The maximum value that <a href=\"gestures\/PointerEvent\/pressure.html\">pressure<\/a> can return for this pointer.<\/p>\n<p>For devices that do not detect pressure (e.g. mice), returns 1.0.\nThis will always be a greater than or equal to 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressureMax\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/pressureMax.html",
            "name": "pressureMax",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The minimum value that <a href=\"gestures\/PointerEvent\/pressure.html\">pressure<\/a> can return for this pointer.<\/p>\n<p>For devices that do not detect pressure (e.g. mice), returns 1.0.\nThis will always be a number less than or equal to 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressureMin\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/pressureMin.html",
            "name": "pressureMin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The radius of the contact ellipse along the major axis, in logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMajor\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/radiusMajor.html",
            "name": "radiusMajor",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The minimum value that could be reported for <a href=\"gestures\/PointerEvent\/radiusMajor.html\">radiusMajor<\/a> and <a href=\"gestures\/PointerEvent\/radiusMinor.html\">radiusMinor<\/a>\nfor this pointer, in logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMax\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/radiusMax.html",
            "name": "radiusMax",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The minimum value that could be reported for <a href=\"gestures\/PointerEvent\/radiusMajor.html\">radiusMajor<\/a> and <a href=\"gestures\/PointerEvent\/radiusMinor.html\">radiusMinor<\/a>\nfor this pointer, in logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMin\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/radiusMin.html",
            "name": "radiusMin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The radius of the contact ellipse along the minor axis, in logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radiusMinor\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/radiusMinor.html",
            "name": "radiusMinor",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The area of the screen being pressed.<\/p>\n<p>This value is scaled to a range between 0 and 1. It can be used to\ndetermine fat touch events. This value is only set on Android and is\na device specific approximation within the range of detectable values.\nSo, for example, the value of 0.1 could mean a touch with the tip of\nthe finger, 0.2 a touch with full finger, and 0.3 the full palm.<\/p>\n<p>Because this value uses device-specific range and is uncalibrated,\nit is of limited use and is primarily retained in order to be able\nto reconstruct original pointer events for <a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double size\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/size.html",
            "name": "size",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Set if the event was synthesized by Flutter.<\/p>\n<p>We occasionally synthesize PointerEvents that aren't exact translations\nof <code>ui.PointerData<\/code> from the engine to cover small cross-OS discrepancies\nin pointer behaviors.<\/p>\n<p>For instance, on end events, Android always drops any location changes\nthat happened between its reporting intervals when emitting the end events.<\/p>\n<p>On iOS, minor incorrect location changes from the previous move events\ncan be reported on end events. We synthesize a <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> to cover\nthe difference between the 2 events in that case.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool synthesized\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/synthesized.html",
            "name": "synthesized",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>The tilt angle of the detected object, in radians.<\/p>\n<p>For <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.stylus<\/a> and <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind.invertedStylus<\/a> events:<\/p>\n<p>The angle of the stylus, in radians in the range:<\/p>\n<p>   0 &lt;= tilt &lt;= pi\/2<\/p>\n<p>...giving the angle of the axis of the stylus, relative to the axis\nperpendicular to the input surface (thus 0.0 indicates the stylus is\northogonal to the plane of the input surface, while pi\/2 indicates that\nthe stylus is flat on that surface).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double tilt\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/tilt.html",
            "name": "tilt",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        },
        {
            "desc": "<p>Time of event dispatch, relative to an arbitrary timeline.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration timeStamp\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PointerEvent\/timeStamp.html",
            "name": "timeStamp",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.PointerEvent",
            "params": []
        }
    ]
}