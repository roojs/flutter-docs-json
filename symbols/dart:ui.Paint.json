{
    "desc": "<p>A description of the style to use when drawing on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>Most APIs on <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> take a <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object to describe the style\nto use for that operation.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/Paint-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.Paint",
    "shortname": "Paint",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "dart-ui\/Paint\/Paint.html",
            "isDeprecated": false,
            "type": "",
            "name": "Paint",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final StringBuffer result = new StringBuffer();\n  String semicolon = '';\n  result.write('Paint(');\n  if (style == PaintingStyle.stroke) {\n    result.write('$style');\n    if (strokeWidth != 0.0)\n      result.write(' ${strokeWidth.toStringAsFixed(1)}');\n    else\n      result.write(' hairline');\n    if (strokeCap != StrokeCap.butt)\n      result.write(' $strokeCap');\n    if (strokeJoin == StrokeJoin.miter) {\n      if (strokeMiterLimit != _kStrokeMiterLimitDefault)\n        result.write(' $strokeJoin up to ${strokeMiterLimit.toStringAsFixed(1)}');\n    } else {\n      result.write(' $strokeJoin');\n    }\n    semicolon = '; ';\n  }\n  if (isAntiAlias != true) {\n    result.write('${semicolon}antialias off');\n    semicolon = '; ';\n  }\n  if (color != const Color(_kColorDefault)) {\n    if (color != null)\n      result.write('$semicolon$color');\n    else\n      result.write('${semicolon}no color');\n    semicolon = '; ';\n  }\n  if (blendMode.index != _kBlendModeDefault) {\n    result.write('$semicolon$blendMode');\n    semicolon = '; ';\n  }\n  if (colorFilter != null) {\n    result.write('${semicolon}colorFilter: $colorFilter');\n    semicolon = '; ';\n  }\n  if (maskFilter != null) {\n    result.write('${semicolon}maskFilter: $maskFilter');\n    semicolon = '; ';\n  }\n  if (filterQuality != FilterQuality.none) {\n    result.write('${semicolon}filterQuality: $filterQuality');\n    semicolon = '; ';\n  }\n  if (shader != null) {\n    result.write('${semicolon}shader: $shader');\n    semicolon = '; ';\n  }\n  if (invertColors)\n    result.write('${semicolon}invert: $invertColors');\n  result.write(')');\n  return result.toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/Paint\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>A blend mode to apply when a shape is drawn or a layer is composited.<\/p>\n<p>The source colors are from the shape being drawn (e.g. from\n<a href=\"dart-ui\/Canvas\/drawPath.html\">Canvas.drawPath<\/a>) or layer being composited (the graphics that were drawn\nbetween the <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a> calls), after applying\nthe <a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>, if any.<\/p>\n<p>The destination colors are from the background onto which the shape or\nlayer is being composited.<\/p>\n<p>Defaults to <a href=\"dart-ui\/BlendMode-class.html\">BlendMode.srcOver<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a>, which uses its <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>'s <a href=\"dart-ui\/Paint\/blendMode.html\">blendMode<\/a> to composite\nthe layer when <code>restore<\/code> is called.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>, which discusses the user of <code>saveLayer<\/code> with <a href=\"dart-ui\/Paint\/blendMode.html\">blendMode<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BlendMode get blendMode {\n  final int encoded = _data.getInt32(_kBlendModeOffset, _kFakeHostEndian);\n  return BlendMode.values[encoded ^ _kBlendModeDefault];\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/blendMode.html",
            "name": "blendMode",
            "isDeprecated": false,
            "type": "dart:ui.BlendMode",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>The color to use when stroking or filling a shape.<\/p>\n<p>Defaults to opaque black.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/style.html\">style<\/a>, which controls whether to stroke or fill (or both).<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>, which overrides <a href=\"dart-ui\/Paint\/color.html\">color<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/shader.html\">shader<\/a>, which overrides <a href=\"dart-ui\/Paint\/color.html\">color<\/a> with more elaborate effects.<\/li>\n<\/ul>\n<p>This color is not used when compositing. To colorize a layer, use\n<a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get color {\n  final int encoded = _data.getInt32(_kColorOffset, _kFakeHostEndian);\n  return new Color(encoded ^ _kColorDefault);\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>A color filter to apply when a shape is drawn or when a layer is\ncomposited.<\/p>\n<p>See <a href=\"dart-ui\/ColorFilter-class.html\">ColorFilter<\/a> for details.<\/p>\n<p>When a shape is being drawn, <a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a> overrides <a href=\"dart-ui\/Paint\/color.html\">color<\/a> and <a href=\"dart-ui\/Paint\/shader.html\">shader<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ColorFilter get colorFilter {\n  switch (_data.getInt32(_kColorFilterOffset, _kFakeHostEndian)) {\n    case ColorFilter._TypeNone:\n      return null;\n    case ColorFilter._TypeMode:\n      return new ColorFilter.mode(\n        new Color(_data.getInt32(_kColorFilterColorOffset, _kFakeHostEndian)),\n        BlendMode.values[_data.getInt32(_kColorFilterBlendModeOffset, _kFakeHostEndian)],\n      );\n    case ColorFilter._TypeMatrix:\n      return new ColorFilter.matrix(_objects[_kColorFilterMatrixIndex]);\n    case ColorFilter._TypeLinearToSrgbGamma:\n      return const ColorFilter.linearToSrgbGamma();\n    case ColorFilter._TypeSrgbToLinearGamma:\n      return const ColorFilter.srgbToLinearGamma();\n  }\n\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/colorFilter.html",
            "name": "colorFilter",
            "isDeprecated": false,
            "type": "dart:ui.ColorFilter",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>Controls the performance vs quality trade-off to use when applying\nfilters, such as <a href=\"dart-ui\/Paint\/maskFilter.html\">maskFilter<\/a>, or when drawing images, as with\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a> or <a href=\"dart-ui\/Canvas\/drawImageNine.html\">Canvas.drawImageNine<\/a>.<\/p>\n<p>Defaults to <a href=\"dart-ui\/FilterQuality-class.html\">FilterQuality.none<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(ianh): verify that the image drawing methods actually respect this\nFilterQuality get filterQuality {\n  return FilterQuality.values[_data.getInt32(_kFilterQualityOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/filterQuality.html",
            "name": "filterQuality",
            "isDeprecated": false,
            "type": "dart:ui.FilterQuality",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>Whether the colors of the image are inverted when drawn.<\/p>\n<p>inverting the colors of an image applies a new color filter that will\nbe composed with any user provided color filters. This is primarily\nused for implementing smart invert on iOS.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get invertColors {\n  return _data.getInt32(_kInvertColorOffset, _kFakeHostEndian) == 1;\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/invertColors.html",
            "name": "invertColors",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>Whether to apply anti-aliasing to lines and images drawn on the\ncanvas.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAntiAlias {\n  return _data.getInt32(_kIsAntiAliasOffset, _kFakeHostEndian) == 0;\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/isAntiAlias.html",
            "name": "isAntiAlias",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>A mask filter (for example, a blur) to apply to a shape after it has been\ndrawn but before it has been composited into the image.<\/p>\n<p>See <a href=\"dart-ui\/MaskFilter-class.html\">MaskFilter<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MaskFilter get maskFilter {\n  switch (_data.getInt32(_kMaskFilterOffset, _kFakeHostEndian)) {\n    case MaskFilter._TypeNone:\n      return null;\n    case MaskFilter._TypeBlur:\n      return new MaskFilter.blur(\n        BlurStyle.values[_data.getInt32(_kMaskFilterBlurStyleOffset, _kFakeHostEndian)],\n        _data.getFloat32(_kMaskFilterSigmaOffset, _kFakeHostEndian),\n      );\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/maskFilter.html",
            "name": "maskFilter",
            "isDeprecated": false,
            "type": "dart:ui.MaskFilter",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>The shader to use when stroking or filling a shape.<\/p>\n<p>When this is null, the <a href=\"dart-ui\/Paint\/color.html\">color<\/a> is used instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Gradient-class.html\">Gradient<\/a>, a shader that paints a color gradient.<\/li>\n<li>\n<a href=\"dart-ui\/ImageShader-class.html\">ImageShader<\/a>, a shader that tiles an <a href=\"dart-ui\/Image-class.html\">Image<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a>, which overrides <a href=\"dart-ui\/Paint\/shader.html\">shader<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/color.html\">color<\/a>, which is used if <a href=\"dart-ui\/Paint\/shader.html\">shader<\/a> and <a href=\"dart-ui\/Paint\/colorFilter.html\">colorFilter<\/a> are null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Shader get shader {\n  if (_objects == null)\n    return null;\n  return _objects[_kShaderIndex];\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/shader.html",
            "name": "shader",
            "isDeprecated": false,
            "type": "dart:ui.Shader",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>The kind of finish to place on the end of lines drawn when\n<a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>.<\/p>\n<p>Defaults to <a href=\"dart-ui\/StrokeCap-class.html\">StrokeCap.butt<\/a>, i.e. no caps.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrokeCap get strokeCap {\n  return StrokeCap.values[_data.getInt32(_kStrokeCapOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/strokeCap.html",
            "name": "strokeCap",
            "isDeprecated": false,
            "type": "dart:ui.StrokeCap",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>The kind of finish to place on the joins between segments.<\/p>\n<p>This applies to paths drawn when <a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>,\nIt does not apply to points drawn as lines with <a href=\"dart-ui\/Canvas\/drawPoints.html\">Canvas.drawPoints<\/a>.<\/p>\n<p>Defaults to <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.miter<\/a>, i.e. sharp corners.<\/p>\n<p>Some examples of joins:<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_4_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/round_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_3_play_button_\" onclick=\"if (animation_3.paused) {\n                  animation_3.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_3.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_3\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_3_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_3_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/bevel_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>The centers of the line segments are colored in the diagrams above to\nhighlight the joins, but in normal usage the join is the same color as the\nline.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/strokeMiterLimit.html\">strokeMiterLimit<\/a> to control when miters are replaced by bevels when\nthis is set to <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.miter<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/strokeCap.html\">strokeCap<\/a> to control what is drawn at the ends of the stroke.<\/li>\n<li>\n<a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin<\/a> for the definitive list of stroke joins.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrokeJoin get strokeJoin {\n  return StrokeJoin.values[_data.getInt32(_kStrokeJoinOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/strokeJoin.html",
            "name": "strokeJoin",
            "isDeprecated": false,
            "type": "dart:ui.StrokeJoin",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>The limit for miters to be drawn on segments when the join is set to\n<a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.miter<\/a> and the <a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>. If\nthis limit is exceeded, then a <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.bevel<\/a> join will be drawn\ninstead. This may cause some 'popping' of the corners of a path if the\nangle between line segments is animated, as seen in the diagrams below.<\/p>\n<p>This limit is expressed as a limit on the length of the miter.<\/p>\n<p>Defaults to 4.0.  Using zero as a limit will cause a <a href=\"dart-ui\/StrokeJoin-class.html\">StrokeJoin.bevel<\/a>\njoin to be used all the time.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_0_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_4_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_3_play_button_\" onclick=\"if (animation_3.paused) {\n                  animation_3.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_3.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:300px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_3\" style=\"width:300px; height:300px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_3_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_3_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/miter_6_join.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>The centers of the line segments are colored in the diagrams above to\nhighlight the joins, but in normal usage the join is the same color as the\nline.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Paint\/strokeJoin.html\">strokeJoin<\/a> to control the kind of finish to place on the joins\nbetween segments.<\/li>\n<li>\n<a href=\"dart-ui\/Paint\/strokeCap.html\">strokeCap<\/a> to control what is drawn at the ends of the stroke.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get strokeMiterLimit {\n  return _data.getFloat32(_kStrokeMiterLimitOffset, _kFakeHostEndian);\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/strokeMiterLimit.html",
            "name": "strokeMiterLimit",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>How wide to make edges drawn when <a href=\"dart-ui\/Paint\/style.html\">style<\/a> is set to\n<a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.stroke<\/a>. The width is given in logical pixels measured in\nthe direction orthogonal to the direction of the path.<\/p>\n<p>Defaults to 0.0, which correspond to a hairline width.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get strokeWidth {\n  return _data.getFloat32(_kStrokeWidthOffset, _kFakeHostEndian);\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/strokeWidth.html",
            "name": "strokeWidth",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        },
        {
            "desc": "<p>Whether to paint inside shapes, the edges of shapes, or both.<\/p>\n<p>Defaults to <a href=\"dart-ui\/PaintingStyle-class.html\">PaintingStyle.fill<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PaintingStyle get style {\n  return PaintingStyle.values[_data.getInt32(_kStyleOffset, _kFakeHostEndian)];\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paint\/style.html",
            "name": "style",
            "isDeprecated": false,
            "type": "dart:ui.PaintingStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.Paint",
            "params": []
        }
    ]
}