{
    "desc": "<p>Contains the state for a <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a>. This class can be used to\nprogrammatically show the refresh indicator, see the <a href=\"material\/RefreshIndicatorState\/show.html\">show<\/a> method.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/RefreshIndicatorState-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.RefreshIndicatorState",
    "shortname": "RefreshIndicatorState",
    "extends": [
        "material.RefreshIndicator",
        "widgets.State",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "material\/RefreshIndicatorState\/RefreshIndicatorState.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.RefreshIndicatorState",
            "params": []
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method in a number of different situations:<\/p>\n<ul>\n<li>After calling <a href=\"material\/RefreshIndicatorState\/initState.html\">initState<\/a>.<\/li>\n<li>After calling <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>.<\/li>\n<li>After receiving a call to <a href=\"widgets\/State\/setState.html\">setState<\/a>.<\/li>\n<li>After a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes (e.g., an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by the previous <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> changes).<\/li>\n<li>After calling <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a> and then reinserting the <a href=\"widgets\/State-class.html\">State<\/a> object into\nthe tree at another location.<\/li>\n<\/ul>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor, the\ngiven <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, and the internal state of this <a href=\"widgets\/State-class.html\">State<\/a> object.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. The\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is always the same as the <code>context<\/code> property of\nthis <a href=\"widgets\/State-class.html\">State<\/a> object and will remain the same for the lifetime of this\nobject. The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is provided redundantly here so that\nthis method matches the signature for a <a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<h3 id=\"why-is-the-build-method-on-state-and-not-statefulwidget\">Why is the <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> method on <a href=\"widgets\/State-class.html\">State<\/a>, and not <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>?<\/h3>\n<p>Putting a <code>Widget build(BuildContext context)<\/code> method on <a href=\"widgets\/State-class.html\">State<\/a> rather\nputting a <code>Widget build(BuildContext context, State state)<\/code> method on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> gives developers more flexibility when subclassing\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>.<\/p>\n<p>For example, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> is a subclass of <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> that\nintroduces an abstract <code>Widget build(BuildContext context)<\/code> method for its\nsubclasses to implement. If <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> already had a <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> method\nthat took a <a href=\"widgets\/State-class.html\">State<\/a> argument, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> would be forced to provide\nits <a href=\"widgets\/State-class.html\">State<\/a> object to subclasses even though its <a href=\"widgets\/State-class.html\">State<\/a> object is an\ninternal implementation detail of <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a>.<\/p>\n<p>Conceptually, <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> could also be implemented as a subclass of\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> in a similar manner. If the <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> method were on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> rather than <a href=\"widgets\/State-class.html\">State<\/a>, that would not be possible anymore.<\/p>\n<p>Putting the <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> function on <a href=\"widgets\/State-class.html\">State<\/a> rather than <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> also\nhelps avoid a category of bugs related to closures implicitly capturing\n<code>this<\/code>. If you defined a closure in a <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> function on a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, that closure would implicitly capture <code>this<\/code>, which is\nthe current widget instance, and would have the (immutable) fields of that\ninstance in scope:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButton extends StatefulWidget {\n  ...\n  final Color color;\n\n  @override\n  Widget build(BuildContext context, MyButtonState state) {\n    ... () { print(\"color: $color\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>For example, suppose the parent builds <code>MyButton<\/code> with <code>color<\/code> being blue,\nthe <code>$color<\/code> in the print function refers to blue, as expected. Now,\nsuppose the parent rebuilds <code>MyButton<\/code> with green. The closure created by\nthe first build still implicitly refers to the original widget and the\n<code>$color<\/code> still prints blue even through the widget has been updated to\ngreen.<\/p>\n<p>In contrast, with the <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> function on the <a href=\"widgets\/State-class.html\">State<\/a> object, closures\ncreated during <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> implicitly capture the <a href=\"widgets\/State-class.html\">State<\/a> instance instead of\nthe widget instance:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButtonState extends State&lt;MyButton&gt; {\n  ...\n  @override\n  Widget build(BuildContext context) {\n    ... () { print(\"color: ${widget.color}\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>Now when the parent rebuilds <code>MyButton<\/code> with green, the closure created by\nthe first build still refers to <a href=\"widgets\/State-class.html\">State<\/a> object, which is preserved across\nrebuilds, but the framework has updated that <a href=\"widgets\/State-class.html\">State<\/a> object's <a href=\"widgets\/State\/widget.html\">widget<\/a>\nproperty to refer to the new <code>MyButton<\/code> instance and <code>${widget.color}<\/code>\nprints green, as expected.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterialLocalizations(context));\n  final Widget child = NotificationListener&lt;ScrollNotification&gt;(\n    key: _key,\n    onNotification: _handleScrollNotification,\n    child: NotificationListener&lt;OverscrollIndicatorNotification&gt;(\n      onNotification: _handleGlowNotification,\n      child: widget.child,\n    ),\n  );\n  if (_mode == null) {\n    assert(_dragOffset == null);\n    assert(_isIndicatorAtTop == null);\n    return child;\n  }\n  assert(_dragOffset != null);\n  assert(_isIndicatorAtTop != null);\n\n  final bool showIndeterminateIndicator =\n    _mode == _RefreshIndicatorMode.refresh || _mode == _RefreshIndicatorMode.done;\n\n  return Stack(\n    children: &lt;Widget&gt;[\n      child,\n      Positioned(\n        top: _isIndicatorAtTop ? 0.0 : null,\n        bottom: !_isIndicatorAtTop ? 0.0 : null,\n        left: 0.0,\n        right: 0.0,\n        child: SizeTransition(\n          axisAlignment: _isIndicatorAtTop ? 1.0 : -1.0,\n          sizeFactor: _positionFactor, \/\/ this is what brings it down\n          child: Container(\n            padding: _isIndicatorAtTop\n              ? EdgeInsets.only(top: widget.displacement)\n              : EdgeInsets.only(bottom: widget.displacement),\n            alignment: _isIndicatorAtTop\n              ? Alignment.topCenter\n              : Alignment.bottomCenter,\n            child: ScaleTransition(\n              scale: _scaleFactor,\n              child: AnimatedBuilder(\n                animation: _positionController,\n                builder: (BuildContext context, Widget child) {\n                  return RefreshProgressIndicator(\n                    semanticsLabel: widget.semanticsLabel ?? MaterialLocalizations.of(context).refreshIndicatorSemanticLabel,\n                    semanticsValue: widget.semanticsValue,\n                    value: showIndeterminateIndicator ? null : _value.value,\n                    valueColor: _valueColor,\n                    backgroundColor: widget.backgroundColor,\n                  );\n                },\n              ),\n            ),\n          ),\n        ),\n      ),\n    ],\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/RefreshIndicatorState\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RefreshIndicatorState",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Called when a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes.<\/p>\n<p>For example, if the previous call to <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> referenced an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> that later changed, the framework would call this\nmethod to notify this object about the change.<\/p>\n<p>This method is also called immediately after <a href=\"material\/RefreshIndicatorState\/initState.html\">initState<\/a>. It is safe to\ncall <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this method.<\/p>\n<p>Subclasses rarely override this method because the framework always\ncalls <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> after a dependency changes. Some subclasses do override\nthis method because they need to do some expensive work (e.g., network\nfetches) when their dependencies change, and that work would be too\nexpensive to do for every build.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didChangeDependencies() {\n  final ThemeData theme = Theme.of(context);\n  _valueColor = _positionController.drive(\n    ColorTween(\n      begin: (widget.color ?? theme.accentColor).withOpacity(0.0),\n      end: (widget.color ?? theme.accentColor).withOpacity(1.0),\n    ).chain(CurveTween(\n      curve: const Interval(0.0, 1.0 \/ _kDragSizeFactorLimit)\n    )),\n  );\n  super.didChangeDependencies();\n}<\/code><\/pre>\n    ",
            "href": "material\/RefreshIndicatorState\/didChangeDependencies.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RefreshIndicatorState",
            "params": []
        },
        {
            "desc": "<p>Called when this object is removed from the tree permanently.<\/p>\n<p>The framework calls this method when this <a href=\"widgets\/State-class.html\">State<\/a> object will never\nbuild again. After the framework calls <a href=\"material\/RefreshIndicatorState\/dispose.html\">dispose<\/a>, the <a href=\"widgets\/State-class.html\">State<\/a> object is\nconsidered unmounted and the <a href=\"widgets\/State\/mounted.html\">mounted<\/a> property is false. It is an error\nto call <a href=\"widgets\/State\/setState.html\">setState<\/a> at this point. This stage of the lifecycle is terminal:\nthere is no way to remount a <a href=\"widgets\/State-class.html\">State<\/a> object that has been disposed.<\/p>\n<p>Subclasses should override this method to release any resources retained\nby this object (e.g., stop any active animations).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"material\/RefreshIndicatorState\/initState.html\">initState<\/a>,\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"material\/RefreshIndicatorState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"material\/RefreshIndicatorState\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"material\/RefreshIndicatorState\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure to end your method with a call to\nsuper.dispose().<\/p>\n<p>See also <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a>, which is called prior to <a href=\"material\/RefreshIndicatorState\/dispose.html\">dispose<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _positionController.dispose();\n  _scaleController.dispose();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "material\/RefreshIndicatorState\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RefreshIndicatorState",
            "params": []
        },
        {
            "desc": "<p>Called when this object is inserted into the tree.<\/p>\n<p>The framework will call this method exactly once for each <a href=\"widgets\/State-class.html\">State<\/a> object\nit creates.<\/p>\n<p>Override this method to perform initialization that depends on the\nlocation at which this object was inserted into the tree (i.e., <a href=\"widgets\/State\/context.html\">context<\/a>)\nor on the widget used to configure this object (i.e., <a href=\"widgets\/State\/widget.html\">widget<\/a>).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"material\/RefreshIndicatorState\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"material\/RefreshIndicatorState\/initState.html\">initState<\/a>,\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"material\/RefreshIndicatorState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"material\/RefreshIndicatorState\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"material\/RefreshIndicatorState\/dispose.html\">dispose<\/a>, unsubscribe from the object.\nYou cannot use <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this\nmethod. However, <a href=\"material\/RefreshIndicatorState\/didChangeDependencies.html\">didChangeDependencies<\/a> will be called immediately\nfollowing this method, and <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> can\nbe used there.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.initState().<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initState() {\n  super.initState();\n  _positionController = AnimationController(vsync: this);\n  _positionFactor = _positionController.drive(_kDragSizeFactorLimitTween);\n  _value = _positionController.drive(_threeQuarterTween); \/\/ The \"value\" of the circular progress indicator during a drag.\n\n  _scaleController = AnimationController(vsync: this);\n  _scaleFactor = _scaleController.drive(_oneToZeroTween);\n}<\/code><\/pre>\n    ",
            "href": "material\/RefreshIndicatorState\/initState.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RefreshIndicatorState",
            "params": []
        },
        {
            "desc": "<p>Show the refresh indicator and run the refresh callback as if it had\nbeen started interactively. If this method is called while the refresh\ncallback is running, it quietly does nothing.<\/p>\n<p>Creating the <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a> with a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey&lt;RefreshIndicatorState&gt;<\/a>\nmakes it possible to refer to the <a href=\"material\/RefreshIndicatorState-class.html\">RefreshIndicatorState<\/a>.<\/p>\n<p>The future returned from this method completes when the\n<a href=\"material\/RefreshIndicator\/onRefresh.html\">RefreshIndicator.onRefresh<\/a> callback's future completes.<\/p>\n<p>If you await the future returned by this function from a <a href=\"widgets\/State-class.html\">State<\/a>, you\nshould check that the state is still <a href=\"widgets\/State\/mounted.html\">mounted<\/a> before calling <a href=\"widgets\/State\/setState.html\">setState<\/a>.<\/p>\n<p>When initiated in this manner, the refresh indicator is independent of any\nactual scroll view. It defaults to showing the indicator at the top. To\nshow it at the bottom, set <code>atTop<\/code> to false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; show({ bool atTop = true }) {\n  if (_mode != _RefreshIndicatorMode.refresh &amp;&amp;\n      _mode != _RefreshIndicatorMode.snap) {\n    if (_mode == null)\n      _start(atTop ? AxisDirection.down : AxisDirection.up);\n    _show();\n  }\n  return _pendingRefreshFuture;\n}<\/code><\/pre>\n    ",
            "href": "material\/RefreshIndicatorState\/show.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RefreshIndicatorState",
            "params": [
                {
                    "name": "atTop",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        }
    ],
    "props": []
}