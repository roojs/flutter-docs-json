{
    "desc": "<p>Used with <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a> to configure the color and geometry of buttons.<\/p>\n<p>A button theme can be specified as part of the overall Material theme\nusing <a href=\"material\/ThemeData\/buttonTheme.html\">ThemeData.buttonTheme<\/a>. The Material theme's button theme data\ncan be overridden with <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/ButtonThemeData-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.ButtonThemeData",
    "shortname": "ButtonThemeData",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a button theme object that can be used with <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>\nor <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>.<\/p>\n<p>The <code>textTheme<\/code>, <code>minWidth<\/code>, <code>height<\/code>, <code>alignedDropDown<\/code>, and\n<code>layoutBehavior<\/code> parameters must not be null. The <code>minWidth<\/code> and\n<code>height<\/code> parameters must greater than or equal to zero.<\/p>\n<p>The ButtonTheme's methods that have a <a href=\"material\/MaterialButton-class.html\">MaterialButton<\/a> parameter and\nhave a name with a <code>get<\/code> prefix are used by <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>,\n<a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>, and <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> to configure a <a href=\"material\/RawMaterialButton-class.html\">RawMaterialButton<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ButtonThemeData({\n  this.textTheme = ButtonTextTheme.normal,\n  this.minWidth = 88.0,\n  this.height = 36.0,\n  EdgeInsetsGeometry padding,\n  ShapeBorder shape,\n  this.layoutBehavior = ButtonBarLayoutBehavior.padded,\n  this.alignedDropdown = false,\n  Color buttonColor,\n  Color disabledColor,\n  Color highlightColor,\n  Color splashColor,\n  this.colorScheme,\n  MaterialTapTargetSize materialTapTargetSize,\n}) : assert(textTheme != null),\n     assert(minWidth != null &amp;&amp; minWidth &gt;= 0.0),\n     assert(height != null &amp;&amp; height &gt;= 0.0),\n     assert(alignedDropdown != null),\n     assert(layoutBehavior != null),\n     _buttonColor = buttonColor,\n     _disabledColor = disabledColor,\n     _highlightColor = highlightColor,\n     _splashColor = splashColor,\n     _padding = padding,\n     _shape = shape,\n     _materialTapTargetSize = materialTapTargetSize;<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/ButtonThemeData.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "alignedDropdown",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "buttonColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "colorScheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "disabledColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "highlightColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "layoutBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ButtonBarLayoutBehavior"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "minWidth",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "splashColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textTheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ButtonTextTheme"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this button theme data object with the matching fields\nreplaced with the non-null parameter values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ButtonThemeData copyWith({\n  ButtonTextTheme textTheme,\n  ButtonBarLayoutBehavior layoutBehavior,\n  double minWidth,\n  double height,\n  EdgeInsetsGeometry padding,\n  ShapeBorder shape,\n  bool alignedDropdown,\n  Color buttonColor,\n  Color disabledColor,\n  Color highlightColor,\n  Color splashColor,\n  ColorScheme colorScheme,\n  MaterialTapTargetSize materialTapTargetSize,\n}) {\n  return ButtonThemeData(\n    textTheme: textTheme ?? this.textTheme,\n    layoutBehavior: layoutBehavior ?? this.layoutBehavior,\n    minWidth: minWidth ?? this.minWidth,\n    height: height ?? this.height,\n    padding: padding ?? this.padding,\n    shape: shape ?? this.shape,\n    alignedDropdown: alignedDropdown ?? this.alignedDropdown,\n    buttonColor: buttonColor ?? _buttonColor,\n    disabledColor: disabledColor ?? _disabledColor,\n    highlightColor: highlightColor ?? _highlightColor,\n    splashColor: splashColor ?? _splashColor,\n    colorScheme: colorScheme ?? this.colorScheme,\n    materialTapTargetSize: materialTapTargetSize ?? _materialTapTargetSize,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/copyWith.html",
            "isDeprecated": "0",
            "type": "material.ButtonThemeData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "alignedDropdown",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "buttonColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "colorScheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "disabledColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "highlightColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "layoutBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.ButtonBarLayoutBehavior"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "minWidth",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "splashColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textTheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.ButtonTextTheme"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/ButtonThemeData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  const ButtonThemeData defaultTheme = ButtonThemeData();\n  properties.add(EnumProperty&lt;ButtonTextTheme&gt;('textTheme', textTheme, defaultValue: defaultTheme.textTheme));\n  properties.add(DoubleProperty('minWidth', minWidth, defaultValue: defaultTheme.minWidth));\n  properties.add(DoubleProperty('height', height, defaultValue: defaultTheme.height));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding, defaultValue: defaultTheme.padding));\n  properties.add(DiagnosticsProperty&lt;ShapeBorder&gt;('shape', shape, defaultValue: defaultTheme.shape));\n  properties.add(FlagProperty('alignedDropdown',\n    value: alignedDropdown,\n    defaultValue: defaultTheme.alignedDropdown,\n    ifTrue: 'dropdown width matches button',\n  ));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('buttonColor', _buttonColor, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledColor', _disabledColor, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('highlightColor', _highlightColor, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('splashColor', _splashColor, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;ColorScheme&gt;('colorScheme', colorScheme, defaultValue: defaultTheme.colorScheme));\n  properties.add(DiagnosticsProperty&lt;MaterialTapTargetSize&gt;('materialTapTargetSize', _materialTapTargetSize, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>The duration of the <code>button<\/code>'s highlight animation.<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/animationDuration.html\">MaterialButton.animationDuration<\/a> it if is non-null,\notherwise 200ms.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Duration getAnimationDuration(MaterialButton button) {\n  return button.animationDuration ?? kThemeChangeDuration;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getAnimationDuration.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The <code>button<\/code>'s overall brightness.<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/colorBrightness.html\">MaterialButton.colorBrightness<\/a> if it is non-null,\notherwise the color scheme's <a href=\"material\/ColorScheme\/brightness.html\">ColorScheme.brightness<\/a> is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Brightness getBrightness(MaterialButton button) {\n  return button.colorBrightness ?? colorScheme.brightness;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getBrightness.html",
            "isDeprecated": "0",
            "type": "dart:ui.Brightness",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> that the define the <code>button<\/code>'s size.<\/p>\n<p>By default this method just returns <a href=\"material\/ButtonThemeData\/constraints.html\">constraints<\/a>. Subclasses\ncould override this method to return a value that was,\nfor example, based on the button's type.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxConstraints getConstraints(MaterialButton button) =&gt; constraints;<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getConstraints.html",
            "isDeprecated": "0",
            "type": "rendering.BoxConstraints",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The <code>button<\/code>'s elevation when <a href=\"material\/MaterialButton\/onPressed.html\">MaterialButton.onPressed<\/a> is null (when\nMaterialButton.enabled is false).<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/elevation.html\">MaterialButton.elevation<\/a> if it is non-null.<\/p>\n<p>Otherwise the disabled elevation is 0.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getDisabledElevation(MaterialButton button) {\n  if (button.disabledElevation != null)\n    return button.disabledElevation;\n  return 0.0;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getDisabledElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The <code>button<\/code>'s background color when <a href=\"material\/MaterialButton\/onPressed.html\">MaterialButton.onPressed<\/a> is null\n(when <a href=\"material\/MaterialButton\/enabled.html\">MaterialButton.enabled<\/a> is false).<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/disabledColor.html\">MaterialButton.disabledColor<\/a> if it is non-null.<\/p>\n<p>Otherwise the value of the <code>disabledColor<\/code> constructor parameter\nis returned, if it is non-null.<\/p>\n<p>Otherwise the color scheme's <a href=\"material\/ColorScheme\/onSurface.html\">ColorScheme.onSurface<\/a> color is returned\nwith its opacity set to 0.3 if <a href=\"material\/ButtonThemeData\/getBrightness.html\">getBrightness<\/a> is dark, 0.38 otherwise.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color getDisabledFillColor(MaterialButton button) {\n  if (button.disabledColor != null)\n    return button.disabledColor;\n  if (_disabledColor != null)\n    return _disabledColor;\n  return _getDisabledColor(button);\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getDisabledFillColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The foreground color of the <code>button<\/code>'s text and icon when\n<a href=\"material\/MaterialButton\/onPressed.html\">MaterialButton.onPressed<\/a> is null (when MaterialButton.enabled is false).<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/disabledColor.html\">MaterialButton.disabledColor<\/a> if it is non-null.\nOtherwise the color scheme's <a href=\"material\/ColorScheme\/onSurface.html\">ColorScheme.onSurface<\/a> color is returned\nwith its opacity set to 0.30 if <a href=\"material\/ButtonThemeData\/getBrightness.html\">getBrightness<\/a> is dark, 0.38 otherwise.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color getDisabledTextColor(MaterialButton button) {\n  if (button.disabledTextColor != null)\n    return button.disabledTextColor;\n  return _getDisabledColor(button);\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getDisabledTextColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The <code>button<\/code>'s elevation when it is enabled and has not been pressed.<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/elevation.html\">MaterialButton.elevation<\/a> if it is non-null.<\/p>\n<p>If button is a <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> then elevation is 0.0, otherwise it is 2.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getElevation(MaterialButton button) {\n  if (button.elevation != null)\n    return button.elevation;\n  if (button is FlatButton)\n    return 0.0;\n  return 2.0;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The button's background fill color or null for buttons that don't have\na background color.<\/p>\n<p>Returns <a href=\"material\/MaterialButton\/color.html\">MaterialButton.color<\/a> if it is non-null and the button\nis enabled.<\/p>\n<p>Otherwise, returns <a href=\"material\/MaterialButton\/disabledColor.html\">MaterialButton.disabledColor<\/a> if it is non-null and\nthe button is disabled.<\/p>\n<p>Otherwise, if button is a <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> or an <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a> then null is\nreturned.<\/p>\n<p>Otherwise, if button is a <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, returns the <code>buttonColor<\/code>\nconstructor parameter if it was non-null and the button is enabled.<\/p>\n<p>Otherwise the fill color depends on the value of <a href=\"material\/ButtonThemeData\/getTextTheme.html\">getTextTheme<\/a>.<\/p>\n<ul>\n<li>\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.normal<\/a> or <a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.accent<\/a>, the\ncolor scheme's <a href=\"material\/ColorScheme\/primary.html\">ColorScheme.primary<\/a> color if the <code>button<\/code> is enabled\nthe value of <a href=\"material\/ButtonThemeData\/getDisabledFillColor.html\">getDisabledFillColor<\/a> otherwise.<\/li>\n<li>\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, if the <code>button<\/code> is enabled then the value\nof the <code>buttonColor<\/code> constructor parameter if it is non-null,\notherwise the color scheme's ColorScheme.primary color. If the button\nis not enabled then the colorScheme's <a href=\"material\/ColorScheme\/onSurface.html\">ColorScheme.onSurface<\/a> color\nwith opacity 0.12.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color getFillColor(MaterialButton button) {\n  final Color fillColor = button.enabled ? button.color : button.disabledColor;\n  if (fillColor != null)\n    return fillColor;\n\n  if (button is FlatButton || button is OutlineButton)\n    return null;\n\n  if (button.enabled &amp;&amp; button is RaisedButton &amp;&amp; _buttonColor != null)\n    return _buttonColor;\n\n  switch (getTextTheme(button)) {\n    case ButtonTextTheme.normal:\n    case ButtonTextTheme.accent:\n      return button.enabled ? colorScheme.primary : getDisabledFillColor(button);\n    case ButtonTextTheme.primary:\n      return button.enabled\n        ? _buttonColor ?? colorScheme.primary\n        : colorScheme.onSurface.withOpacity(0.12);\n  }\n\n  assert(false);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getFillColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The color of the overlay that appears when the <code>button<\/code> is pressed.<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/highlightColor.html\">MaterialButton.highlightColor<\/a> if it is non-null.\nOtherwise the highlight color depends on <a href=\"material\/ButtonThemeData\/getTextTheme.html\">getTextTheme<\/a>:<\/p>\n<ul>\n<li>\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.normal<\/a>, <a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.accent<\/a>: returns the\nvalue of the <code>highlightColor<\/code> constructor parameter if it is non-null,\notherwise the value of <a href=\"material\/ButtonThemeData\/getTextColor.html\">getTextColor<\/a> with opacity 0.16.<\/li>\n<li>\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, returns <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color getHighlightColor(MaterialButton button) {\n  if (button.highlightColor != null)\n    return button.highlightColor;\n\n  switch (getTextTheme(button)) {\n    case ButtonTextTheme.normal:\n    case ButtonTextTheme.accent:\n      return _highlightColor ?? getTextColor(button).withOpacity(0.16);\n    case ButtonTextTheme.primary:\n      return Colors.transparent;\n  }\n\n  assert(false);\n  return Colors.transparent;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getHighlightColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The <code>button<\/code>'s elevation when it is enabled and has been pressed.<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/highlightElevation.html\">MaterialButton.highlightElevation<\/a> if it is non-null.<\/p>\n<p>If button is a <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> or an <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a> then the highlight\nelevation is 0.0, otherwise the highlight elevation is 8.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getHighlightElevation(MaterialButton button) {\n  if (button.highlightElevation != null)\n    return button.highlightElevation;\n  if (button is FlatButton)\n    return 0.0;\n  if (button is OutlineButton)\n    return 0.0;\n  return 8.0;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getHighlightElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The minimum size of the <code>button<\/code>'s tap target.<\/p>\n<p>Returns the button's <code>MaterialButton.tapTargetSize<\/code> if it is non-null.<\/p>\n<p>Otherwise the value of the <code>materialTapTargetSize<\/code> constructor\nparameter is returned if that's non-null.<\/p>\n<p>Otherwise <a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize.padded<\/a> is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MaterialTapTargetSize getMaterialTapTargetSize(MaterialButton button) {\n  return button.materialTapTargetSize ?? _materialTapTargetSize ?? MaterialTapTargetSize.padded;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getMaterialTapTargetSize.html",
            "isDeprecated": "0",
            "type": "material.MaterialTapTargetSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>Padding for the <code>button<\/code>'s child (typically the button's label).<\/p>\n<p>Returns the button's <a href=\"material\/ButtonThemeData\/padding.html\">MaterialButton.padding<\/a> if it is non-null.<\/p>\n<p>If this is a button constructed with <a href=\"material\/RaisedButton\/RaisedButton.icon.html\">RaisedButton.icon<\/a> or\n<a href=\"material\/FlatButton\/FlatButton.icon.html\">FlatButton.icon<\/a> or <a href=\"material\/OutlineButton\/OutlineButton.icon.html\">OutlineButton.icon<\/a> then the padding is:\n<code>EdgeInsetsDirectional.only(start: 12.0, end: 16.0)<\/code>.<\/p>\n<p>Otherwise, returns <a href=\"material\/ButtonThemeData\/padding.html\">padding<\/a> if it is non-null.<\/p>\n<p>Otherwise, returns horizontal padding of 24.0 on the left and right if\n<a href=\"material\/ButtonThemeData\/getTextTheme.html\">getTextTheme<\/a> is <a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, 16.0 on the left and right\notherwise.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry getPadding(MaterialButton button) {\n  if (button.padding != null)\n    return button.padding;\n\n  if (button is MaterialButtonWithIconMixin)\n    return const EdgeInsetsDirectional.only(start: 12.0, end: 16.0);\n\n  if (_padding != null)\n    return _padding;\n\n  switch (getTextTheme(button)) {\n    case ButtonTextTheme.normal:\n    case ButtonTextTheme.accent:\n      return const EdgeInsets.symmetric(horizontal: 16.0);\n    case ButtonTextTheme.primary:\n      return const EdgeInsets.symmetric(horizontal: 24.0);\n  }\n  assert(false);\n  return EdgeInsets.zero;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getPadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The shape of the <code>button<\/code>'s <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>Returns the button's <a href=\"material\/ButtonThemeData\/shape.html\">MaterialButton.shape<\/a> if it is non-null, otherwise\n<a href=\"material\/ButtonThemeData\/shape.html\">shape<\/a> is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ShapeBorder getShape(MaterialButton button) {\n  return button.shape ?? shape;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getShape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The color of the ink \"splash\" overlay that appears when the (enabled)\n<code>button<\/code> is tapped.<\/p>\n<p>Returns the button's <a href=\"material\/MaterialButton\/splashColor.html\">MaterialButton.splashColor<\/a> if it is non-null.<\/p>\n<p>Otherwise, returns the value of the <code>splashColor<\/code> constructor parameter\nit is non-null and <code>button<\/code> is a <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a> or an <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>.<\/p>\n<p>Otherwise, returns the value of the <code>splashColor<\/code> constructor parameter\nif it is non-null and <code>button<\/code> is a <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> and\n<a href=\"material\/ButtonThemeData\/getTextTheme.html\">getTextTheme<\/a> is not <a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a><\/p>\n<p>Otherwise, returns <a href=\"material\/ButtonThemeData\/getTextColor.html\">getTextColor<\/a> with an opacity of 0.12.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color getSplashColor(MaterialButton button) {\n  if (button.splashColor != null)\n    return button.splashColor;\n\n  if (_splashColor != null &amp;&amp; (button is RaisedButton || button is OutlineButton))\n    return _splashColor;\n\n  if (_splashColor != null &amp;&amp; button is FlatButton) {\n    switch (getTextTheme(button)) {\n      case ButtonTextTheme.normal:\n      case ButtonTextTheme.accent:\n        return _splashColor;\n      case ButtonTextTheme.primary:\n        break;\n    }\n  }\n\n  return getTextColor(button).withOpacity(0.12);\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getSplashColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>The foreground color of the <code>button<\/code>'s text and icon.<\/p>\n<p>If <code>button<\/code> is not <a href=\"material\/MaterialButton\/enabled.html\">MaterialButton.enabled<\/a>, the value of\n<a href=\"material\/ButtonThemeData\/getDisabledTextColor.html\">getDisabledTextColor<\/a> is returned. If the button is enabled and\n<code>buttonTextColor<\/code> is non-null, then <code>buttonTextColor<\/code> is returned.<\/p>\n<p>Otherwise the text color depends on the value of <a href=\"material\/ButtonThemeData\/getTextTheme.html\">getTextTheme<\/a>\nand <a href=\"material\/ButtonThemeData\/getBrightness.html\">getBrightness<\/a>.<\/p>\n<ul>\n<li>\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.normal<\/a>, <a href=\"material\/Colors\/white-constant.html\">Colors.white<\/a> if <a href=\"material\/ButtonThemeData\/getBrightness.html\">getBrightness<\/a> is dark,\notherwise <a href=\"material\/Colors\/black87-constant.html\">Colors.black87<\/a>.<\/li>\n<li>ButtonTextTheme.accent], <code>colorScheme.secondary<\/code>.<\/li>\n<li>\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, if <a href=\"material\/ButtonThemeData\/getFillColor.html\">getFillColor<\/a> is dark then <a href=\"material\/Colors\/white-constant.html\">Colors.white<\/a>,\notherwise if <code>button<\/code> is a <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> or an <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a> then\n<code>colorScheme.primary<\/code>, otherwise <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color getTextColor(MaterialButton button) {\n  if (!button.enabled)\n    return getDisabledTextColor(button);\n\n  if (button.textColor != null)\n    return button.textColor;\n\n  switch (getTextTheme(button)) {\n    case ButtonTextTheme.normal:\n      return getBrightness(button) == Brightness.dark ? Colors.white : Colors.black87;\n\n    case ButtonTextTheme.accent:\n      return colorScheme.secondary;\n\n    case ButtonTextTheme.primary: {\n      final Color fillColor = getFillColor(button);\n      final bool fillIsDark = fillColor != null\n        ? ThemeData.estimateBrightnessForColor(fillColor) == Brightness.dark\n        : getBrightness(button) == Brightness.dark;\n      if (fillIsDark)\n        return Colors.white;\n      if (button is FlatButton || button is OutlineButton)\n        return colorScheme.primary;\n      return Colors.black;\n    }\n  }\n\n  assert(false);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getTextColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        },
        {
            "desc": "<p>Defines the <code>button<\/code>'s base colors, and the defaults for the button's\nminimum size, internal padding, and shape.<\/p>\n<p>Despite the name, this property is not the <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> whose\n<a href=\"material\/TextTheme\/button.html\">TextTheme.button<\/a> is used as the button text's <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ButtonTextTheme getTextTheme(MaterialButton button) {\n  return button.textTheme ?? textTheme;\n}<\/code><\/pre>\n    ",
            "href": "material\/ButtonThemeData\/getTextTheme.html",
            "isDeprecated": "0",
            "type": "material.ButtonTextTheme",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ButtonThemeData",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.MaterialButton"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>If true, then a <a href=\"material\/DropdownButton-class.html\">DropdownButton<\/a> menu's width will match the button's\nwidth.<\/p>\n<p>If false (the default), then the dropdown's menu will be wider than\nits button. In either case the dropdown button will line up the leading\nedge of the menu's value with the leading edge of the values\ndisplayed by the menu items.<\/p>\n<p>This property only affects <a href=\"material\/DropdownButton-class.html\">DropdownButton<\/a> and its menu.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool alignedDropdown\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/alignedDropdown.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>A set of thirteen colors that can be used to derive the button theme's\ncolors.<\/p>\n<p>This property was added much later than the theme's set of highly\nspecific colors, like <a href=\"material\/ThemeData\/buttonColor.html\">ThemeData.buttonColor<\/a>, <a href=\"material\/ThemeData\/highlightColor.html\">ThemeData.highlightColor<\/a>,\n<a href=\"material\/ThemeData\/splashColor.html\">ThemeData.splashColor<\/a> etc.<\/p>\n<p>The colors for new button classes can be defined exclusively in terms\nof <a href=\"material\/ButtonThemeData\/colorScheme.html\">colorScheme<\/a>. When it's possible, the existing buttons will\n(continue to) gradually migrate to it.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ColorScheme colorScheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/colorScheme.html",
            "isDeprecated": "0",
            "type": "material.ColorScheme",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>Simply a convenience that returns <a href=\"material\/ButtonThemeData\/minWidth.html\">minWidth<\/a> and <a href=\"material\/ButtonThemeData\/height.html\">height<\/a> as a\n<a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> object:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">return BoxConstraints(\n  minWidth: minWidth,\n  minHeight: height,\n);\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BoxConstraints get constraints {\n  return BoxConstraints(\n    minWidth: minWidth,\n    minHeight: height,\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/constraints.html",
            "isDeprecated": "0",
            "type": "rendering.BoxConstraints",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/ButtonThemeData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/ButtonThemeData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/ButtonThemeData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/ButtonThemeData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/ButtonThemeData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/ButtonThemeData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    textTheme,\n    minWidth,\n    height,\n    padding,\n    shape,\n    alignedDropdown,\n    _buttonColor,\n    _disabledColor,\n    _highlightColor,\n    _splashColor,\n    colorScheme,\n    _materialTapTargetSize,\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>The minimum height for buttons.<\/p>\n<p>Defaults to 36.0 logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/height.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>Defines whether a <a href=\"material\/ButtonBar-class.html\">ButtonBar<\/a> should size itself with a minimum size\nconstraint or with padding.<\/p>\n<p>Defaults to <a href=\"material\/ButtonBarLayoutBehavior-class.html\">ButtonBarLayoutBehavior.padded<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ButtonBarLayoutBehavior layoutBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/layoutBehavior.html",
            "isDeprecated": "0",
            "type": "material.ButtonBarLayoutBehavior",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>The minimum width for buttons.<\/p>\n<p>The actual horizontal space allocated for a button's child is\nat least this value less the theme's horizontal <a href=\"material\/ButtonThemeData\/padding.html\">padding<\/a>.<\/p>\n<p>Defaults to 88.0 logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minWidth\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/minWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>Padding for a button's child (typically the button's label).<\/p>\n<p>Defaults to 24.0 on the left and right if <a href=\"material\/ButtonThemeData\/textTheme.html\">textTheme<\/a> is\n<a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, 16.0 on the left and right otherwise.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/ButtonThemeData\/getPadding.html\">getPadding<\/a>, which is used by <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>\nand <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get padding {\n  if (_padding != null)\n    return _padding;\n  switch (textTheme) {\n    case ButtonTextTheme.normal:\n    case ButtonTextTheme.accent:\n      return const EdgeInsets.symmetric(horizontal: 16.0);\n    case ButtonTextTheme.primary:\n      return const EdgeInsets.symmetric(horizontal: 24.0);\n  }\n  assert(false);\n  return EdgeInsets.zero;\n}<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>The shape of a button's material.<\/p>\n<p>The button's highlight and splash are clipped to this shape. If the\nbutton has an elevation, then its drop shadow is defined by this\nshape as well.<\/p>\n<p>Defaults to a rounded rectangle with circular corner radii of 4.0 if\n<a href=\"material\/ButtonThemeData\/textTheme.html\">textTheme<\/a> is <a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, a rounded rectangle with\ncircular corner radii of 2.0 otherwise.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/ButtonThemeData\/getShape.html\">getShape<\/a>, which is used by <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, <a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>\nand <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ShapeBorder get shape {\n  if (_shape != null)\n    return _shape;\n  switch (textTheme) {\n    case ButtonTextTheme.normal:\n    case ButtonTextTheme.accent:\n      return const RoundedRectangleBorder(\n        borderRadius: BorderRadius.all(Radius.circular(2.0)),\n      );\n    case ButtonTextTheme.primary:\n      return const RoundedRectangleBorder(\n        borderRadius: BorderRadius.all(Radius.circular(4.0)),\n      );\n  }\n  return const RoundedRectangleBorder();\n}<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/shape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.ButtonThemeData",
            "params": []
        },
        {
            "desc": "<p>Defines a button's base colors, and the defaults for the button's minimum\nsize, internal padding, and shape.<\/p>\n<p>Despite the name, this property is not a <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>, its value is not a\ncollection of <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ButtonTextTheme textTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ButtonThemeData\/textTheme.html",
            "isDeprecated": "0",
            "type": "material.ButtonTextTheme",
            "memberOf": "material.ButtonThemeData",
            "params": []
        }
    ]
}