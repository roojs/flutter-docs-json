{
    "name": "flutter_test.TestWindow",
    "extends": [],
    "memberOf": "flutter_test",
    "events": [
        {
            "name": "onAccessibilityFeaturesChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked when the value of <a href=\"flutter_test\/TestWindow\/accessibilityFeatures.html\">accessibilityFeatures<\/a> changes.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onAccessibilityFeaturesChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onAccessibilityFeaturesChanged =&gt; _window.onAccessibilityFeaturesChanged;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onBeginFrame",
            "type": "dart:ui.FrameCallback",
            "desc": "<p>A callback that is invoked to notify the application that it is an\nappropriate time to provide a scene using the <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> API and the\n<a href=\"flutter_test\/TestWindow\/render.html\">render<\/a> method. When possible, this is driven by the hardware VSync\nsignal. This is only called if <a href=\"flutter_test\/TestWindow\/scheduleFrame.html\">scheduleFrame<\/a> has been called since the\nlast time this callback was invoked.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a> callback is invoked immediately after <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a>,\nafter draining any microtasks (e.g. completions of any <a href=\"dart-async\/Future-class.html\">Future<\/a>s) queued\nby the <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> handler.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.FrameCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onBeginFrame.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFrameCallback get onBeginFrame =&gt; _window.onBeginFrame;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onDrawFrame",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked for each frame after <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> has\ncompleted and after the microtask queue has been drained. This can be\nused to implement a second phase of frame rendering that happens\nafter any deferred work queued by the <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> phase.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onDrawFrame.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onDrawFrame =&gt; _window.onDrawFrame;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onLocaleChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked whenever <a href=\"flutter_test\/TestWindow\/locale.html\">locale<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onLocaleChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onLocaleChanged =&gt; _window.onLocaleChanged;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onMetricsChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked whenever the <a href=\"flutter_test\/TestWindow\/devicePixelRatio.html\">devicePixelRatio<\/a>,\n<a href=\"flutter_test\/TestWindow\/physicalSize.html\">physicalSize<\/a>, <a href=\"flutter_test\/TestWindow\/padding.html\">padding<\/a>, or <a href=\"flutter_test\/TestWindow\/viewInsets.html\">viewInsets<\/a> values change, for example\nwhen the device is rotated or when the application is resized (e.g. when\nshowing applications side-by-side on Android).<\/p>\n<p>The engine invokes this callback in the same zone in which the callback\nwas set.<\/p>\n<p>The framework registers with this callback and updates the layout\nappropriately.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nregister for notifications when this is called.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onMetricsChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onMetricsChanged =&gt; _window.onMetricsChanged;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPlatformBrightnessChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked whenever <a href=\"flutter_test\/TestWindow\/platformBrightness.html\">platformBrightness<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onPlatformBrightnessChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onPlatformBrightnessChanged =&gt; _window.onPlatformBrightnessChanged;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPlatformMessage",
            "type": "dart:ui.PlatformMessageCallback",
            "desc": "<p>Called whenever this window receives a message from a platform-specific\nplugin.<\/p>\n<p>The <code>name<\/code> parameter determines which plugin sent the message. The <code>data<\/code>\nparameter is the payload and is typically UTF-8 encoded JSON but can be\narbitrary data.<\/p>\n<p>Message handlers must call the function given in the <code>callback<\/code> parameter.\nIf the handler does not need to respond, the handler should pass null to\nthe callback.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.PlatformMessageCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onPlatformMessage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPlatformMessageCallback get onPlatformMessage =&gt; _window.onPlatformMessage;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerDataPacket",
            "type": "dart:ui.PointerDataPacketCallback",
            "desc": "<p>A callback that is invoked when pointer data is available.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a>, the Flutter framework class which manages pointer\nevents.<\/li><\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.PointerDataPacketCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onPointerDataPacket.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPointerDataPacketCallback get onPointerDataPacket =&gt; _window.onPointerDataPacket;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSemanticsAction",
            "type": "dart:ui.SemanticsActionCallback",
            "desc": "<p>A callback that is invoked whenever the user requests an action to be\nperformed.<\/p>\n<p>This callback is used when the user expresses the action they wish to\nperform based on the semantics supplied by <a href=\"flutter_test\/TestWindow\/updateSemantics.html\">updateSemantics<\/a>.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.SemanticsActionCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onSemanticsAction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSemanticsActionCallback get onSemanticsAction =&gt; _window.onSemanticsAction;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSemanticsEnabledChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked when the value of <a href=\"flutter_test\/TestWindow\/semanticsEnabled.html\">semanticsEnabled<\/a> changes.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onSemanticsEnabledChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onSemanticsEnabledChanged =&gt; _window.onSemanticsEnabledChanged;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onTextScaleFactorChanged",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>A callback that is invoked whenever <a href=\"flutter_test\/TestWindow\/textScaleFactor.html\">textScaleFactor<\/a> changes value.<\/p>\n<p>The framework invokes this callback in the same zone in which the\ncallback was set.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this callback is invoked.<\/li><\/ul>",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/onTextScaleFactorChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nVoidCallback get onTextScaleFactorChanged =&gt; _window.onTextScaleFactorChanged;<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "TestWindow",
            "type": "",
            "desc": "<p>Constructs a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> that defers all behavior to the given <code>window<\/code> unless\nexplicitly overidden for test purposes.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [
                {
                    "name": "window",
                    "type": "dart:ui.Window",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "flutter_test\/TestWindow\/TestWindow.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestWindow({\n  @required Window window,\n}) : _window = window;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "clearAccessibilityFeaturesTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test accessibility features and returns to using the real accessibility features.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearAccessibilityFeaturesTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearAccessibilityFeaturesTestValue() {\n  _accessibilityFeaturesTestValue = null;\n  onAccessibilityFeaturesChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearAllTestValues",
            "type": "",
            "desc": "<p>Delete any test value properties that have been set on this <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>\nand return to reporting the real <a href=\"dart-ui\/Window-class.html\">Window<\/a> values for all <a href=\"dart-ui\/Window-class.html\">Window<\/a> properties.<\/p>\n<p>If desired, clearing of properties can be done on an individual basis, e.g.,\n<a href=\"flutter_test\/TestWindow\/clearLocaleTestValue.html\">clearLocaleTestValue()<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearAllTestValues.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearAllTestValues() {\n  clearAccessibilityFeaturesTestValue();\n  clearAlwaysUse24HourTestValue();\n  clearDefaultRouteNameTestValue();\n  clearDevicePixelRatioTestValue();\n  clearPlatformBrightnessTestValue();\n  clearLocaleTestValue();\n  clearLocalesTestValue();\n  clearPaddingTestValue();\n  clearPhysicalSizeTestValue();\n  clearSemanticsEnabledTestValue();\n  clearTextScaleFactorTestValue();\n  clearViewInsetsTestValue();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearAlwaysUse24HourTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test clock format and returns to using the real clock format.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearAlwaysUse24HourTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearAlwaysUse24HourTestValue() {\n  _alwaysUse24HourFormatTestValue = null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearDefaultRouteNameTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test default route name and returns to using the real default route name.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearDefaultRouteNameTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearDefaultRouteNameTestValue() {\n  _defaultRouteNameTestValue = null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearDevicePixelRatioTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test device pixel ratio and returns to using the real device pixel ratio.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearDevicePixelRatioTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearDevicePixelRatioTestValue() {\n  _devicePixelRatio = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearLocaleTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test locale and returns to using the real locale.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearLocaleTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearLocaleTestValue() {\n  _localeTestValue = null;\n  onLocaleChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearLocalesTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test locales and returns to using the real locales.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearLocalesTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearLocalesTestValue() {\n  _localesTestValue = null;\n  onLocaleChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearPaddingTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test padding and returns to using the real padding.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearPaddingTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearPaddingTestValue() {\n  _paddingTestValue = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearPhysicalSizeTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test physical size and returns to using the real physical size.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearPhysicalSizeTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearPhysicalSizeTestValue() {\n  _physicalSizeTestValue = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearPlatformBrightnessTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test platform brightness and returns to using the real platform brightness.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearPlatformBrightnessTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearPlatformBrightnessTestValue() {\n  _platformBrightnessTestValue = null;\n  onPlatformBrightnessChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearSemanticsEnabledTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test semantics enabled and returns to using the real semantics enabled.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearSemanticsEnabledTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearSemanticsEnabledTestValue() {\n  _semanticsEnabledTestValue = null;\n  onSemanticsEnabledChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearTextScaleFactorTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test text scale factor and returns to using the real text scale factor.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearTextScaleFactorTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearTextScaleFactorTestValue() {\n  _textScaleFactorTestValue = null;\n  onTextScaleFactorChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clearViewInsetsTestValue",
            "type": "",
            "desc": "<p>Deletes any existing test view insets and returns to using the real view insets.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/clearViewInsetsTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearViewInsetsTestValue() {\n  _viewInsetsTestValue = null;\n  onMetricsChanged();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "render",
            "type": "",
            "desc": "<p>Updates the application's rendering on the GPU with the newly provided\n<a href=\"dart-ui\/Scene-class.html\">Scene<\/a>. This function must be called within the scope of the\n<a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a> or <a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a> callbacks being invoked. If this function\nis called a second time during a single <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a>\/<a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a>\ncallback sequence or called outside the scope of those callbacks, the call\nwill be ignored.<\/p>\n<p>To record graphical operations, first create a <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a>, then\nconstruct a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, passing that <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to its constructor.\nAfter issuing all the graphical operations, call the\n<a href=\"dart-ui\/PictureRecorder\/endRecording.html\">PictureRecorder.endRecording<\/a> function on the <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> to obtain\nthe final <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> that represents the issued graphical operations.<\/p>\n<p>Next, create a <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a>, and add the <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> to it using\n<a href=\"dart-ui\/SceneBuilder\/addPicture.html\">SceneBuilder.addPicture<\/a>. With the <a href=\"dart-ui\/SceneBuilder\/build.html\">SceneBuilder.build<\/a> method you can\nthen obtain a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> object, which you can display to the user via this\n<a href=\"flutter_test\/TestWindow\/render.html\">render<\/a> function.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li>\n<li>\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, the Flutter framework class which manages layout and\npainting.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [
                {
                    "name": "scene",
                    "type": "dart:ui.Scene",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/render.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid render(Scene scene) {\n  _window.render(scene);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "scheduleFrame",
            "type": "",
            "desc": "<p>Requests that, at the next appropriate opportunity, the <a href=\"flutter_test\/TestWindow\/onBeginFrame.html\">onBeginFrame<\/a>\nand <a href=\"flutter_test\/TestWindow\/onDrawFrame.html\">onDrawFrame<\/a> callbacks be invoked.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"scheduler\/SchedulerBinding-mixin.html\">SchedulerBinding<\/a>, the Flutter framework class which manages the\nscheduling of frames.<\/li><\/ul>",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/scheduleFrame.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid scheduleFrame() {\n  _window.scheduleFrame();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "sendPlatformMessage",
            "type": "",
            "desc": "<p>Sends a message to a platform-specific plugin.<\/p>\n<p>The <code>name<\/code> parameter determines which plugin receives the message. The\n<code>data<\/code> parameter contains the message payload and is typically UTF-8\nencoded JSON but can be arbitrary data. If the plugin replies to the\nmessage, <code>callback<\/code> will be called with the response.<\/p>\n<p>The framework invokes <code>callback<\/code> in the same zone in which this method\nwas called.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "data",
                    "type": "dart:typed_data.ByteData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "dart:ui.PlatformMessageResponseCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/sendPlatformMessage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid sendPlatformMessage(\n  String name,\n  ByteData data,\n  PlatformMessageResponseCallback callback,\n) {\n  _window.sendPlatformMessage(name, data, callback);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setIsolateDebugName",
            "type": "",
            "desc": "<p>Set the debug name associated with this window's root isolate.<\/p>\n<p>Normally debug names are automatically generated from the Dart port, entry\npoint, and source file. For example: <code>main.dart$main-1234<\/code>.<\/p>\n<p>This can be combined with flutter tools <code>--isolate-filter<\/code> flag to debug\nspecific root isolates. For example: <code>flutter attach --isolate-filter=[name]<\/code>.\nNote that this does not rename any child isolates of the root.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/setIsolateDebugName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setIsolateDebugName(String name) {\n  _window.setIsolateDebugName(name);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "updateSemantics",
            "type": "",
            "desc": "<p>Change the retained semantics data about this window.<\/p>\n<p>If <a href=\"flutter_test\/TestWindow\/semanticsEnabled.html\">semanticsEnabled<\/a> is true, the user has requested that this function\nbe called whenever the semantic content of this window changes.<\/p>\n<p>In either case, this function disposes the given update, which means the\nsemantics update cannot be used further.<\/p>\n    ",
            "static": false,
            "memberOf": "flutter_test.TestWindow",
            "sig": "",
            "params": [
                {
                    "name": "update",
                    "type": "dart:ui.SemanticsUpdate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "flutter_test\/TestWindow\/updateSemantics.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateSemantics(SemanticsUpdate update) {\n  _window.updateSemantics(update);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "accessibilityFeatures",
            "type": "dart:ui.AccessibilityFeatures",
            "types": [],
            "desc": "<p>Additional accessibility features that may be enabled by the platform.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/accessibilityFeatures.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAccessibilityFeatures get accessibilityFeatures =&gt; _accessibilityFeaturesTestValue ?? _window.accessibilityFeatures;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "accessibilityFeaturesTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real accessibility features and reports the given <code>accessibilityFeaturesTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/accessibilityFeaturesTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set accessibilityFeaturesTestValue(AccessibilityFeatures accessibilityFeaturesTestValue) {\n  _accessibilityFeaturesTestValue = accessibilityFeaturesTestValue;\n  onAccessibilityFeaturesChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "alwaysUse24HourFormat",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>The setting indicating whether time should always be shown in the 24-hour\nformat.<\/p>\n<p>This option is used by <a href=\"material\/showTimePicker.html\">showTimePicker<\/a>.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/alwaysUse24HourFormat.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get alwaysUse24HourFormat =&gt; _alwaysUse24HourFormatTestValue ?? _window.alwaysUse24HourFormat;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "alwaysUse24HourFormatTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real clock format and reports the given <code>alwaysUse24HourFormatTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/alwaysUse24HourFormatTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set alwaysUse24HourFormatTestValue(bool alwaysUse24HourFormatTestValue) {\n  _alwaysUse24HourFormatTestValue = alwaysUse24HourFormatTestValue;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "defaultRouteName",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The route or path that the embedder requested when the application was\nlaunched.<\/p>\n<p>This will be the string \"<code>\/<\/code>\" if no particular route was requested.<\/p>\n<h2 id=\"android\">Android<\/h2>\n<p>On Android, calling\n<a href=\"\/javadoc\/io\/flutter\/view\/FlutterView.html#setInitialRoute-java.lang.String-\"><code>FlutterView.setInitialRoute<\/code><\/a>\nwill set this value. The value must be set sufficiently early, i.e. before\nthe <a href=\"widgets\/runApp.html\">runApp<\/a> call is executed in Dart, for this to have any effect on the\nframework. The <code>createFlutterView<\/code> method in your <code>FlutterActivity<\/code>\nsubclass is a suitable time to set the value. The application's\n<code>AndroidManifest.xml<\/code> file must also be updated to have a suitable\n<a href=\"https:\/\/developer.android.com\/guide\/topics\/manifest\/intent-filter-element.html\"><code>&lt;intent-filter&gt;<\/code><\/a>.<\/p>\n<h2 id=\"ios\">iOS<\/h2>\n<p>On iOS, calling\n<a href=\"\/objcdoc\/Classes\/FlutterViewController.html#\/c:objc%28cs%29FlutterViewController%28im%29setInitialRoute:\"><code>FlutterViewController.setInitialRoute<\/code><\/a>\nwill set this value. The value must be set sufficiently early, i.e. before\nthe <a href=\"widgets\/runApp.html\">runApp<\/a> call is executed in Dart, for this to have any effect on the\nframework. The <code>application:didFinishLaunchingWithOptions:<\/code> method is a\nsuitable time to set this value.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, a widget that handles routing.<\/li>\n<li>\n<a href=\"services\/SystemChannels\/navigation-constant.html\">SystemChannels.navigation<\/a>, which handles subsequent navigation\nrequests from the embedder.<\/li>\n<\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/defaultRouteName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get defaultRouteName =&gt; _defaultRouteNameTestValue ?? _window.defaultRouteName;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "defaultRouteNameTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real default route name and reports the given <code>defaultRouteNameTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/defaultRouteNameTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set defaultRouteNameTestValue(String defaultRouteNameTestValue) {\n  _defaultRouteNameTestValue = defaultRouteNameTestValue;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "devicePixelRatio",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The number of device pixels for each logical pixel. This number might not\nbe a power of two. Indeed, it might not even be an integer. For example,\nthe Nexus 6 has a device pixel ratio of 3.5.<\/p>\n<p>Device pixels are also referred to as physical pixels. Logical pixels are\nalso referred to as device-independent or resolution-independent pixels.<\/p>\n<p>By definition, there are roughly 38 logical pixels per centimeter, or\nabout 96 logical pixels per inch, of the physical display. The value\nreturned by <a href=\"flutter_test\/TestWindow\/devicePixelRatio.html\">devicePixelRatio<\/a> is ultimately obtained either from the\nhardware itself, the device drivers, or a hard-coded value stored in the\noperating system or firmware, and may be inaccurate, sometimes by a\nsignificant margin.<\/p>\n<p>The Flutter framework operates in logical pixels, so it is rarely\nnecessary to directly deal with this property.<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/devicePixelRatio.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get devicePixelRatio =&gt; _devicePixelRatio ?? _window.devicePixelRatio;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "devicePixelRatioTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real device pixel ratio and reports the given <code>devicePixelRatio<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/devicePixelRatioTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set devicePixelRatioTestValue(double devicePixelRatio) {\n  _devicePixelRatio = devicePixelRatio;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "initialLifecycleState",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The lifecycle state immediately after dart isolate initialization.<\/p>\n<p>This property will not be updated as the lifecycle changes.<\/p>\n<p>It is used to initialize <a href=\"scheduler\/SchedulerBinding\/lifecycleState.html\">SchedulerBinding.lifecycleState<\/a> at startup\nwith any buffered lifecycle state events.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/initialLifecycleState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get initialLifecycleState =&gt; _initialLifecycleStateTestValue;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "initialLifecycleStateTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Sets a faked initialLifecycleState for testing.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/initialLifecycleStateTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set initialLifecycleStateTestValue(String state) {\n  _initialLifecycleStateTestValue = state;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "locale",
            "type": "dart:ui.Locale",
            "types": [],
            "desc": "<p>The system-reported default locale of the device.<\/p>\n<p>This establishes the language and formatting conventions that application\nshould, if possible, use to render their user interface.<\/p>\n<p>This is the first locale selected by the user and is the user's\nprimary locale (the locale the device UI is displayed in)<\/p>\n<p>This is equivalent to <code>locales.first<\/code> and will provide an empty non-null locale\nif the <a href=\"flutter_test\/TestWindow\/locales.html\">locales<\/a> list has not been set or is empty.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/locale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLocale get locale =&gt; _localeTestValue ?? _window.locale;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "localeTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real locale and reports the given <code>localeTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/localeTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set localeTestValue(Locale localeTestValue) {\n  _localeTestValue = localeTestValue;\n  onLocaleChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "locales",
            "type": "dart:core.List<dart:ui.Locale>",
            "types": [
                "dart:core.List",
                "dart:ui.Locale"
            ],
            "desc": "<p>The full system-reported supported locales of the device.<\/p>\n<p>This establishes the language and formatting conventions that application\nshould, if possible, use to render their user interface.<\/p>\n<p>The list is ordered in order of priority, with lower-indexed locales being\npreferred over higher-indexed ones. The first element is the primary <a href=\"flutter_test\/TestWindow\/locale.html\">locale<\/a>.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onLocaleChanged.html\">onLocaleChanged<\/a> callback is called whenever this value changes.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/locales.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;Locale&gt; get locales =&gt; _localesTestValue ?? _window.locales;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "localesTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real locales and reports the given <code>localesTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/localesTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set localesTestValue(List&lt;Locale&gt; localesTestValue) {\n  _localesTestValue = localesTestValue;\n  onLocaleChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "padding",
            "type": "dart:ui.WindowPadding",
            "types": [],
            "desc": "<p>The number of physical pixels on each side of the display rectangle into\nwhich the application can render, but which may be partially obscured by\nsystem UI (such as the system notification area), or or physical\nintrusions in the display (e.g. overscan regions on television screens or\nphone sensor housings).<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the padding in material design\napplications.<\/li>\n<\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/padding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWindowPadding get padding =&gt; _paddingTestValue ?? _window.padding;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "paddingTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real padding and reports the given <code>paddingTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/paddingTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set paddingTestValue(WindowPadding paddingTestValue) {\n  _paddingTestValue = paddingTestValue;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "physicalSize",
            "type": "dart:ui.Size",
            "types": [],
            "desc": "<p>The dimensions of the rectangle into which the application will be drawn,\nin physical pixels.<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>At startup, the size of the application window may not be known before Dart\ncode runs. If this value is observed early in the application lifecycle,\nit may report <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>This value does not take into account any on-screen keyboards or other\nsystem UI. The <a href=\"flutter_test\/TestWindow\/padding.html\">padding<\/a> and <a href=\"flutter_test\/TestWindow\/viewInsets.html\">viewInsets<\/a> properties provide a view into\nhow much of each side of the application may be obscured by system UI.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/physicalSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize get physicalSize =&gt; _physicalSizeTestValue ?? _window.physicalSize;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "physicalSizeTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real physical size and reports the given <code>physicalSizeTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/physicalSizeTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set physicalSizeTestValue (Size physicalSizeTestValue) {\n  _physicalSizeTestValue = physicalSizeTestValue;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "platformBrightness",
            "type": "dart:ui.Brightness",
            "types": [],
            "desc": "<p>The setting indicating the current brightness mode of the host platform.\nIf the platform has no preference, <a href=\"flutter_test\/TestWindow\/platformBrightness.html\">platformBrightness<\/a> defaults to <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/platformBrightness.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBrightness get platformBrightness =&gt; _platformBrightnessTestValue ?? _window.platformBrightness;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "platformBrightnessTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real text scale factor and reports the given <code>platformBrightnessTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/platformBrightnessTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set platformBrightnessTestValue(Brightness platformBrightnessTestValue) {\n  _platformBrightnessTestValue = platformBrightnessTestValue;\n  onPlatformBrightnessChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticsEnabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the user has requested that <a href=\"flutter_test\/TestWindow\/updateSemantics.html\">updateSemantics<\/a> be called when\nthe semantic contents of window changes.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onSemanticsEnabledChanged.html\">onSemanticsEnabledChanged<\/a> callback is called whenever this value\nchanges.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/semanticsEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get semanticsEnabled =&gt; _semanticsEnabledTestValue ?? _window.semanticsEnabled;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticsEnabledTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real semantics enabled and reports the given <code>semanticsEnabledTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/semanticsEnabledTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set semanticsEnabledTestValue(bool semanticsEnabledTestValue) {\n  _semanticsEnabledTestValue = semanticsEnabledTestValue;\n  onSemanticsEnabledChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textScaleFactor",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The system-reported text scale.<\/p>\n<p>This establishes the text scaling factor to use when rendering text,\naccording to the user's platform preferences.<\/p>\n<p>The <a href=\"flutter_test\/TestWindow\/onTextScaleFactorChanged.html\">onTextScaleFactorChanged<\/a> callback is called whenever this value\nchanges.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li><\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/textScaleFactor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get textScaleFactor =&gt; _textScaleFactorTestValue ?? _window.textScaleFactor;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textScaleFactorTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real text scale factor and reports the given <code>textScaleFactorTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/textScaleFactorTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set textScaleFactorTestValue(double textScaleFactorTestValue) {\n  _textScaleFactorTestValue = textScaleFactorTestValue;\n  onTextScaleFactorChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "viewInsets",
            "type": "dart:ui.WindowPadding",
            "types": [],
            "desc": "<p>The number of physical pixels on each side of the display rectangle into\nwhich the application can render, but over which the operating system\nwill likely place system UI, such as the keyboard, that fully obscures\nany content.<\/p>\n<p>When this changes, <a href=\"flutter_test\/TestWindow\/onMetricsChanged.html\">onMetricsChanged<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a>, for a mechanism at the widgets layer to\nobserve when this value changes.<\/li>\n<li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, a simpler mechanism for the same.<\/li>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which automatically applies the view insets in material\ndesign applications.<\/li>\n<\/ul>",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/viewInsets.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWindowPadding get viewInsets =&gt; _viewInsetsTestValue ??  _window.viewInsets;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "viewInsetsTestValue",
            "type": "",
            "types": [],
            "desc": "<p>Hides the real view insets and reports the given <code>viewInsetsTestValue<\/code> instead.<\/p>\n        ",
            "memberOf": "flutter_test.TestWindow",
            "isConstant": false,
            "href": "flutter_test\/TestWindow\/viewInsetsTestValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set viewInsetsTestValue(WindowPadding viewInsetsTestValue) {\n  _viewInsetsTestValue = viewInsetsTestValue;\n  onMetricsChanged();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "flutter_test\/TestWindow-class.html",
    "desc": "<p><a href=\"dart-ui\/Window-class.html\">Window<\/a> that wraps another <a href=\"dart-ui\/Window-class.html\">Window<\/a> and allows faking of some properties\nfor testing purposes.<\/p>\n<p>Tests for certain widgets, e.g., <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>, might require faking certain\nproperties of a <a href=\"dart-ui\/Window-class.html\">Window<\/a>. <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> facilitates the faking of these properties\nby overidding the properties of a real <a href=\"dart-ui\/Window-class.html\">Window<\/a> with desired fake values. The\nbinding used within tests, <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>, contains a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>\nthat is used by all tests.<\/p>\n<h2 id=\"sample-code\">Sample Code<\/h2>\n<p>A test can utilize a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> in the following way:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">testWidgets('your test name here', (WidgetTester tester) async {\n  \/\/ Retrieve the TestWidgetsFlutterBinding.\n  final TestWidgetsFlutterBinding testBinding = tester.binding;\n\n  \/\/ Fake the desired properties of the TestWindow. All code running\n  \/\/ within this test will perceive the following fake text scale\n  \/\/ factor as the real text scale factor of the window.\n  testBinding.window.textScaleFactorFakeValue = 2.5;\n\n  \/\/ Test code that depends on text scale factor here.\n});\n<\/code><\/pre>\n<p>The <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a> is recreated for each test and\ntherefore any fake values defined in one test will not persist\nto the next.<\/p>\n<p>If a test needs to override a real <a href=\"dart-ui\/Window-class.html\">Window<\/a> property and then later\nreturn to using the real <a href=\"dart-ui\/Window-class.html\">Window<\/a> property, <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a> provides\nmethods to clear each individual test value, e.g., <a href=\"flutter_test\/TestWindow\/clearLocaleTestValue.html\">clearLocaleTestValue()<\/a>.<\/p>\n<p>To clear all fake test values in a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>, consider using <a href=\"flutter_test\/TestWindow\/clearAllTestValues.html\">clearAllTestValues()<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TestWindow"
}