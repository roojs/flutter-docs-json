{
    "name": "material.SnackBar",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "SnackBar",
            "type": "",
            "desc": "<p>Creates a snack bar.<\/p>\n<p>The <code>content<\/code> argument must be non-null.<\/p>\n    ",
            "static": false,
            "memberOf": "material.SnackBar",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "content",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "action",
                    "type": "material.SnackBarAction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "animation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "material\/SnackBar\/SnackBar.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SnackBar({\n  Key key,\n  @required this.content,\n  this.backgroundColor,\n  this.action,\n  this.duration = _kSnackBarDisplayDuration,\n  this.animation,\n}) : assert(content != null),\n     assert(duration != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/SnackBar\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.SnackBar",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/SnackBar\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final MediaQueryData mediaQueryData = MediaQuery.of(context);\n  assert(animation != null);\n  final ThemeData theme = Theme.of(context);\n  final ThemeData darkTheme = ThemeData(\n    brightness: Brightness.dark,\n    accentColor: theme.accentColor,\n    accentColorBrightness: theme.accentColorBrightness,\n  );\n  final List&lt;Widget&gt; children = &lt;Widget&gt;[\n    const SizedBox(width: _kSnackBarPadding),\n    Expanded(\n      child: Container(\n        padding: const EdgeInsets.symmetric(vertical: _kSingleLineVerticalPadding),\n        child: DefaultTextStyle(\n          style: darkTheme.textTheme.subhead,\n          child: content,\n        ),\n      ),\n    ),\n  ];\n  if (action != null) {\n    children.add(ButtonTheme.bar(\n      padding: const EdgeInsets.symmetric(horizontal: _kSnackBarPadding),\n      textTheme: ButtonTextTheme.accent,\n      child: action,\n    ));\n  } else {\n    children.add(const SizedBox(width: _kSnackBarPadding));\n  }\n  final CurvedAnimation heightAnimation = CurvedAnimation(parent: animation, curve: _snackBarHeightCurve);\n  final CurvedAnimation fadeAnimation = CurvedAnimation(parent: animation, curve: _snackBarFadeCurve, reverseCurve: const Threshold(0.0));\n  Widget snackbar = SafeArea(\n    top: false,\n    child: Row(\n      children: children,\n      crossAxisAlignment: CrossAxisAlignment.center,\n    ),\n  );\n  snackbar = Semantics(\n    container: true,\n    liveRegion: true,\n    onDismiss: () {\n      Scaffold.of(context).removeCurrentSnackBar(reason: SnackBarClosedReason.dismiss);\n    },\n    child: Dismissible(\n      key: const Key('dismissible'),\n      direction: DismissDirection.down,\n      resizeDuration: null,\n      onDismissed: (DismissDirection direction) {\n        Scaffold.of(context).removeCurrentSnackBar(reason: SnackBarClosedReason.swipe);\n      },\n      child: Material(\n        elevation: 6.0,\n        color: backgroundColor ?? _kSnackBackground,\n        child: Theme(\n          data: darkTheme,\n          child: mediaQueryData.accessibleNavigation ? snackbar : FadeTransition(\n            opacity: fadeAnimation,\n            child: snackbar,\n          ),\n        ),\n      ),\n    ),\n  );\n  return ClipRect(\n    child: mediaQueryData.accessibleNavigation ? snackbar : AnimatedBuilder(\n      animation: heightAnimation,\n      builder: (BuildContext context, Widget child) {\n        return Align(\n          alignment: AlignmentDirectional.topStart,\n          heightFactor: heightAnimation.value,\n          child: child,\n        );\n      },\n      child: snackbar,\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createAnimationController",
            "type": "animation.AnimationController",
            "desc": "<p>Creates an animation controller useful for driving a snack bar's entrance and exit animation.<\/p>\n    ",
            "static": false,
            "memberOf": "material.SnackBar",
            "sig": "",
            "params": [
                {
                    "name": "vsync",
                    "type": "scheduler.TickerProvider",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/SnackBar\/createAnimationController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AnimationController createAnimationController({ @required TickerProvider vsync }) {\n  return AnimationController(\n    duration: _kSnackBarTransitionDuration,\n    debugLabel: 'SnackBar',\n    vsync: vsync,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "withAnimation",
            "type": "material.SnackBar",
            "desc": "<p>Creates a copy of this snack bar but with the animation replaced with the given animation.<\/p>\n<p>If the original snack bar lacks a key, the newly created snack bar will\nuse the given fallback key.<\/p>\n    ",
            "static": false,
            "memberOf": "material.SnackBar",
            "sig": "",
            "params": [
                {
                    "name": "newAnimation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "fallbackKey",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/SnackBar\/withAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SnackBar withAnimation(Animation&lt;double&gt; newAnimation, { Key fallbackKey }) {\n  return SnackBar(\n    key: key ?? fallbackKey,\n    content: content,\n    backgroundColor: backgroundColor,\n    action: action,\n    duration: duration,\n    animation: newAnimation,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "action",
            "type": "material.SnackBarAction",
            "types": [],
            "desc": "<p>(optional) An action that the user can take based on the snack bar.<\/p>\n<p>For example, the snack bar might let the user undo the operation that\nprompted the snackbar. Snack bars can have at most one action.<\/p>\n<p>The action should not be \"dismiss\" or \"cancel\".<\/p>\n        ",
            "memberOf": "material.SnackBar",
            "isConstant": false,
            "href": "material\/SnackBar\/action.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SnackBarAction action\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "animation",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation driving the entrance and exit of the snack bar.<\/p>\n        ",
            "memberOf": "material.SnackBar",
            "isConstant": false,
            "href": "material\/SnackBar\/animation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; animation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "backgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The Snackbar's background color. By default the color is dark grey.<\/p>\n        ",
            "memberOf": "material.SnackBar",
            "isConstant": false,
            "href": "material\/SnackBar\/backgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "content",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The primary content of the snack bar.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "memberOf": "material.SnackBar",
            "isConstant": false,
            "href": "material\/SnackBar\/content.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget content\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "duration",
            "type": "dart:core.Duration",
            "types": [],
            "desc": "<p>The amount of time the snack bar should be displayed.<\/p>\n<p>Defaults to 4.0s.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ScaffoldState\/removeCurrentSnackBar.html\">ScaffoldState.removeCurrentSnackBar<\/a>, which abruptly hides the\ncurrently displayed snack bar, if any, and allows the next to be\ndisplayed.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/snackbars.html\">material.io\/design\/components\/snackbars.html<\/a><\/li>\n<\/ul>",
            "memberOf": "material.SnackBar",
            "isConstant": false,
            "href": "material\/SnackBar\/duration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/SnackBar-class.html",
    "desc": "<p>A lightweight message with an optional action which briefly displays at the\nbottom of the screen.<\/p>\n<p>To display a snack bar, call <code>Scaffold.of(context).showSnackBar()<\/code>, passing\nan instance of <a href=\"material\/SnackBar-class.html\">SnackBar<\/a> that describes the message.<\/p>\n<p>To control how long the <a href=\"material\/SnackBar-class.html\">SnackBar<\/a> remains visible, specify a <a href=\"material\/SnackBar\/duration.html\">duration<\/a>.<\/p>\n<p>A SnackBar with an action will not time out when TalkBack or VoiceOver are\nenabled. This is controlled by <a href=\"dart-ui\/AccessibilityFeatures\/accessibleNavigation.html\">AccessibilityFeatures.accessibleNavigation<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a>, to obtain the current <a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a>, which manages the\ndisplay and animation of snack bars.<\/li>\n<li>\n<a href=\"material\/ScaffoldState\/showSnackBar.html\">ScaffoldState.showSnackBar<\/a>, which displays a <a href=\"material\/SnackBar-class.html\">SnackBar<\/a>.<\/li>\n<li>\n<a href=\"material\/ScaffoldState\/removeCurrentSnackBar.html\">ScaffoldState.removeCurrentSnackBar<\/a>, which abruptly hides the currently\ndisplayed snack bar, if any, and allows the next to be displayed.<\/li>\n<li>\n<a href=\"material\/SnackBarAction-class.html\">SnackBarAction<\/a>, which is used to specify an <a href=\"material\/SnackBar\/action.html\">action<\/a> button to show\non the snack bar.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/snackbars.html\">material.io\/design\/components\/snackbars.html<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SnackBar"
}