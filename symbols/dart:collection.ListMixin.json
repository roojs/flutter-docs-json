{
    "desc": "<p>Base implementation of a <a href=\"dart-core\/List-class.html\">List<\/a> class.<\/p>\n<p><code>ListMixin<\/code> can be used as a mixin to make a class implement\nthe <code>List<\/code> interface.<\/p>\n<p>This implements all read operations using only the <code>length<\/code> and\n<code>operator[]<\/code> members. It implements write operations using those and\n<code>length=<\/code> and <code>operator[]=<\/code><\/p>\n<p><em>NOTICE<\/em>: Forwarding just these four operations to a normal growable <a href=\"dart-core\/List-class.html\">List<\/a>\n(as created by <code>new List()<\/code>) will give very bad performance for <code>add<\/code> and\n<code>addAll<\/code> operations of <code>ListBase<\/code>. These operations are implemented by\nincreasing the length of the list by one for each <code>add<\/code> operation, and\nrepeatedly increasing the length of a growable list is not efficient.\nTo avoid this, either override 'add' and 'addAll' to also forward directly\nto the growable list, or, if possible, use <code>DelegatingList<\/code> from\n\"package:collection\/wrappers.dart\" instead.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-collection\/ListMixin-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:collection",
    "name": "dart:collection.ListMixin",
    "shortname": "ListMixin",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": null,
            "href": "dart-collection\/ListMixin\/ListMixin.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E element) {\n  this[this.length++] = element;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  int i = this.length;\n  for (E element in iterable) {\n    assert(this.length == i || (throw ConcurrentModificationError(this)));\n    this.length = i + 1;\n    this[i] = element;\n    i++;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/addAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "iterable",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (test(this[i])) return true;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/any.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap() {\n  return ListMapView&lt;E&gt;(this);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/asMap.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"dart-collection\/ListMixin\/add.html\">add<\/a> or <a href=\"dart-collection\/ListMixin\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;R&gt; cast&lt;R&gt;() =&gt; List.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/cast.html",
            "isDeprecated": "0",
            "type": "dart:core.List",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  this.length = 0;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/clear.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (this[i] == element) return true;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/contains.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-core\/List\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) =&gt; this[index];<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/elementAt.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    if (!test(this[i])) return false;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/every.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt;\n    ExpandIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/expand.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fill]) {\n  RangeError.checkValidRange(start, end, this.length);\n  for (int i = start; i &lt; end; i++) {\n    this[i] = fill;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/fillRange.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "fill",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    E element = this[i];\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/firstWhere.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    value = combine(value, this[i]);\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/fold.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "initialValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                },
                {
                    "name": "previousValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt;\n    FollowedByIterable&lt;E&gt;.firstEfficient(this, other);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/followedBy.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(E element)) {\n  int length = this.length;\n  for (int i = 0; i &lt; length; i++) {\n    action(this[i]);\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/forEach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end) {\n  RangeError.checkValidRange(start, end, this.length);\n  return SubListIterable&lt;E&gt;(this, start, end);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/getRange.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(Object element, [int start = 0]) {\n  if (start &lt; 0) start = 0;\n  for (int i = start; i &lt; this.length; i++) {\n    if (this[i] == element) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/indexOf.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexWhere(bool test(E element), [int start = 0]) {\n  if (start &lt; 0) start = 0;\n  for (int i = start; i &lt; this.length; i++) {\n    if (test(this[i])) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/indexWhere.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  ArgumentError.checkNotNull(index, \"index\");\n  RangeError.checkValueInInterval(index, 0, length, \"index\");\n  if (index == this.length) {\n    add(element);\n    return;\n  }\n  this.length++;\n  setRange(index + 1, this.length, this, index);\n  this[index] = element;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/insert.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "index",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; iterable) {\n  RangeError.checkValueInInterval(index, 0, length, \"index\");\n  if (iterable is! EfficientLengthIterable || identical(iterable, this)) {\n    iterable = iterable.toList();\n  }\n  int insertionLength = iterable.length;\n  \/\/ There might be errors after the length change, in which case the list\n  \/\/ will end up being modified but the operation not complete. Unless we\n  \/\/ always go through a \"toList\" we can't really avoid that.\n  this.length += insertionLength;\n  if (iterable.length != insertionLength) {\n    \/\/ If the iterable's length is linked to this list's length somehow,\n    \/\/ we can't insert one in the other.\n    this.length -= insertionLength;\n    throw ConcurrentModificationError(iterable);\n  }\n  setRange(index + insertionLength, this.length, this, index);\n  setAll(index, iterable);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/insertAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-collection\/ListMixin\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  if (length == 0) return \"\";\n  StringBuffer buffer = StringBuffer()..writeAll(this, separator);\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/join.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "separator",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(Object element, [int start]) {\n  if (start == null || start &gt;= this.length) start = this.length - 1;\n  for (int i = start; i &gt;= 0; i--) {\n    if (this[i] == element) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/lastIndexOf.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexWhere(bool test(E element), [int start]) {\n  if (start == null || start &gt;= this.length) start = this.length - 1;\n  for (int i = start; i &gt;= 0; i--) {\n    if (test(this[i])) return i;\n  }\n  return -1;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/lastIndexWhere.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  for (int i = length - 1; i &gt;= 0; i--) {\n    E element = this[i];\n    if (test(element)) return element;\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/lastWhere.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-collection\/ListMixin\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E element)) =&gt; MappedListIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/map.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E previousValue, E element)) {\n  int length = this.length;\n  if (length == 0) throw IterableElementError.noElement();\n  E value = this[0];\n  for (int i = 1; i &lt; length; i++) {\n    value = combine(value, this[i]);\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/reduce.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "previousValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object element) {\n  for (int i = 0; i &lt; this.length; i++) {\n    if (this[i] == element) {\n      this._closeGap(i, i + 1);\n      return true;\n    }\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/remove.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) {\n  E result = this[index];\n  _closeGap(index, index + 1);\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/removeAt.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  if (length == 0) {\n    throw IterableElementError.noElement();\n  }\n  E result = this[length - 1];\n  length--;\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/removeLast.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) {\n  RangeError.checkValidRange(start, end, this.length);\n  if (end &gt; start) {\n    _closeGap(start, end);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/removeRange.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filter(test, false);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/removeWhere.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"dart-collection\/ListMixin\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; newContents) {\n  RangeError.checkValidRange(start, end, this.length);\n  if (newContents is! EfficientLengthIterable) {\n    newContents = newContents.toList();\n  }\n  int removeLength = end - start;\n  int insertLength = newContents.length;\n  if (removeLength &gt;= insertLength) {\n    int insertEnd = start + insertLength;\n    this.setRange(start, insertEnd, newContents);\n    if (removeLength &gt; insertLength) {\n      _closeGap(insertEnd, end);\n    }\n  } else {\n    int delta = insertLength - removeLength;\n    int newLength = this.length + delta;\n    int insertEnd = start + insertLength; \/\/ aka. end + delta.\n    this.length = newLength;\n    this.setRange(insertEnd, newLength, this, end);\n    this.setRange(start, insertEnd, newContents);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/replaceRange.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "newContents",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filter(test, true);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/retainWhere.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable) {\n  if (iterable is List) {\n    setRange(index, index + iterable.length, iterable);\n  } else {\n    for (E element in iterable) {\n      this[index++] = element;\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/setAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]) {\n  RangeError.checkValidRange(start, end, this.length);\n  int length = end - start;\n  if (length == 0) return;\n  RangeError.checkNotNegative(skipCount, \"skipCount\");\n\n  List&lt;E&gt; otherList;\n  int otherStart;\n  \/\/ TODO(floitsch): Make this accept more.\n  if (iterable is List&lt;E&gt;) {\n    otherList = iterable;\n    otherStart = skipCount;\n  } else {\n    otherList = iterable.skip(skipCount).toList(growable: false);\n    otherStart = 0;\n  }\n  if (otherStart + length &gt; otherList.length) {\n    throw IterableElementError.tooFew();\n  }\n  if (otherStart &lt; start) {\n    \/\/ Copy backwards to ensure correct copy if [from] is this.\n    for (int i = length - 1; i &gt;= 0; i--) {\n      this[start + i] = otherList[otherStart + i];\n    }\n  } else {\n    for (int i = 0; i &lt; length; i++) {\n      this[start + i] = otherList[otherStart + i];\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/setRange.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "skipCount",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([Random random]) {\n  random ??= Random();\n  int length = this.length;\n  while (length &gt; 1) {\n    int pos = random.nextInt(length);\n    length -= 1;\n    var tmp = this[length];\n    this[length] = this[pos];\n    this[pos] = tmp;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/shuffle.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "random",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:math.Random"
                }
            ]
        },
        {
            "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  int length = this.length;\n  E match;\n  bool matchFound = false;\n  for (int i = 0; i &lt; length; i++) {\n    E element = this[i];\n    if (test(element)) {\n      if (matchFound) {\n        throw IterableElementError.tooMany();\n      }\n      matchFound = true;\n      match = element;\n    }\n    if (length != this.length) {\n      throw ConcurrentModificationError(this);\n    }\n  }\n  if (matchFound) return match;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/singleWhere.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) =&gt; SubListIterable&lt;E&gt;(this, count, null);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/skip.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "count",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E element)) {\n  return SkipWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/skipWhile.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]) {\n  Sort.sort(this, compare ?? _compareAny);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/sort.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"dart-core\/List\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]) {\n  int listLength = this.length;\n  end ??= listLength;\n  RangeError.checkValidRange(start, end, listLength);\n  int length = end - start;\n  List&lt;E&gt; result = &lt;E&gt;[]..length = length;\n  for (int i = 0; i &lt; length; i++) {\n    result[i] = this[start + i];\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/sublist.html",
            "isDeprecated": "0",
            "type": "dart:core.List",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) =&gt; SubListIterable&lt;E&gt;(this, 0, count);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/take.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "count",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E element)) {\n  return TakeWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/takeWhile.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable = true}) {\n  List&lt;E&gt; result;\n  if (growable) {\n    result = &lt;E&gt;[]..length = length;\n  } else {\n    result = List&lt;E&gt;(length);\n  }\n  for (int i = 0; i &lt; length; i++) {\n    result[i] = this[i];\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/toList.html",
            "isDeprecated": "0",
            "type": "dart:core.List",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "growable",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  Set&lt;E&gt; result = Set&lt;E&gt;();\n  for (int i = 0; i &lt; length; i++) {\n    result.add(this[i]);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/toSet.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '[', ']');<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; WhereIterable&lt;E&gt;(this, test);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/where.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-collection\/ListMixin\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; WhereTypeIterable&lt;T&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-collection\/ListMixin\/whereType.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.ListMixin",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; length == 0;<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListMixin\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListMixin\/isNotEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; ListIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListMixin\/iterator.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterator",
            "memberOf": "dart:collection.ListMixin",
            "params": []
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed =&gt; ReversedListIterable&lt;E&gt;(this);<\/code><\/pre>\n        ",
            "href": "dart-collection\/ListMixin\/reversed.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "memberOf": "dart:collection.ListMixin",
            "params": []
        }
    ]
}