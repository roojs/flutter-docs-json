{
    "name": "collection.UnionSetController",
    "extends": [],
    "memberOf": "collection",
    "events": [],
    "methods": [
        {
            "name": "UnionSetController",
            "type": "",
            "desc": "<p>Creates a set of sets that provides a view of the union of those sets.<\/p>\n<p>If <code>disjoint<\/code> is <code>true<\/code>, this assumes that all component sets are\ndisjoint\u2014that is, that they contain no elements in common. This makes\nmany operations including <code>length<\/code> more efficient.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.UnionSetController",
            "sig": "",
            "params": [
                {
                    "name": "disjoint",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-collection_collection\/UnionSetController\/UnionSetController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnionSetController({bool disjoint: false}) {\n  _set = new UnionSet&lt;E&gt;(_sets, disjoint: disjoint);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "",
            "desc": "<p>Adds the contents of <code>component<\/code> to <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a>.<\/p>\n<p>If the contents of <code>component<\/code> change over time, <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a> will change\naccordingly.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.UnionSetController",
            "sig": "",
            "params": [
                {
                    "name": "component",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/UnionSetController\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(Set&lt;E&gt; component) {\n  _sets.add(component);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "remove",
            "type": "dart:core.bool",
            "desc": "<p>Removes the contents of <code>component<\/code> to <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a>.<\/p>\n<p>If another set in <a href=\"package-collection_collection\/UnionSetController-class.html\">this<\/a> has overlapping elements with <code>component<\/code>, those\nelements will remain in <a href=\"package-collection_collection\/UnionSetController\/set.html\">set<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.UnionSetController",
            "sig": "",
            "params": [
                {
                    "name": "component",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/UnionSetController\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Set&lt;E&gt; component) =&gt; _sets.remove(component);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "set",
            "type": "collection.UnionSet",
            "types": [],
            "desc": "<p>The <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> that provides a view of the union of sets in <a href=\"package-collection_collection\/UnionSetController-class.html\">this<\/a>.<\/p>\n        ",
            "memberOf": "collection.UnionSetController",
            "isConstant": false,
            "href": "package-collection_collection\/UnionSetController\/set.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">UnionSet&lt;E&gt; get set =&gt; _set;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-collection_collection\/UnionSetController-class.html",
    "desc": "<p>A controller that exposes a view of the union of a collection of sets.<\/p>\n<p>This is a convenience class for creating a <a href=\"package-collection_collection\/UnionSet-class.html\">UnionSet<\/a> whose contents change\nover the lifetime of a class. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class Engine {\n  Set&lt;Test&gt; get activeTests =&gt; _activeTestsGroup.set;\n  final _activeTestsGroup = new UnionSetController&lt;Test&gt;();\n\n  void addSuite(Suite suite) {\n    _activeTestsGroup.add(suite.tests);\n    _runSuite(suite);\n    _activeTestsGroup.remove(suite.tests);\n  }\n}\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "UnionSetController"
}