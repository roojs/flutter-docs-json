{
    "name": "dart:ui.TextStyle",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/TextStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/TextStyle\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! TextStyle)\n    return false;\n  final TextStyle typedOther = other;\n  if (_fontFamily != typedOther._fontFamily ||\n      _fontSize != typedOther._fontSize ||\n      _letterSpacing != typedOther._letterSpacing ||\n      _wordSpacing != typedOther._wordSpacing ||\n      _height != typedOther._height ||\n      _decorationThickness != typedOther._decorationThickness ||\n      _locale != typedOther._locale ||\n      _background != typedOther._background ||\n      _foreground != typedOther._foreground)\n   return false;\n  for (int index = 0; index &lt; _encoded.length; index += 1) {\n    if (_encoded[index] != typedOther._encoded[index])\n      return false;\n  }\n  if (!_listEquals&lt;Shadow&gt;(_shadows, typedOther._shadows))\n    return false;\n  if (!_listEquals&lt;String&gt;(_fontFamilyFallback, typedOther._fontFamilyFallback))\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextStyle",
            "type": "",
            "desc": "<p>Creates a new TextStyle object.<\/p>\n<ul>\n<li>\n<code>color<\/code>: The color to use when painting the text. If this is specified, <code>foreground<\/code> must be null.<\/li>\n<li>\n<code>decoration<\/code>: The decorations to paint near the text (e.g., an underline).<\/li>\n<li>\n<code>decorationColor<\/code>: The color in which to paint the text decorations.<\/li>\n<li>\n<code>decorationStyle<\/code>: The style in which to paint the text decorations (e.g., dashed).<\/li>\n<li>\n<code>decorationThickness<\/code>: The thickness of the decoration as a muliplier on the thickness specified by the font.<\/li>\n<li>\n<code>fontWeight<\/code>: The typeface thickness to use when painting the text (e.g., bold).<\/li>\n<li>\n<code>fontStyle<\/code>: The typeface variant to use when drawing the letters (e.g., italics).<\/li>\n<li>\n<code>fontFamily<\/code>: The name of the font to use when painting the text (e.g., Roboto). If a <code>fontFamilyFallback<\/code> is\nprovided and <code>fontFamily<\/code> is not, then the first font family in <code>fontFamilyFallback<\/code> will take the position of\nthe preferred font family. When a higher priority font cannot be found or does not contain a glyph, a lower\npriority font will be used.<\/li>\n<li>\n<code>fontFamilyFallback<\/code>: An ordered list of the names of the fonts to fallback on when a glyph cannot\nbe found in a higher priority font. When the <code>fontFamily<\/code> is null, the first font family in this list\nis used as the preferred font. Internally, the 'fontFamily<code>is concatenated to the front of this list.\nWhen no font family is provided through 'fontFamilyFallback' (null or empty) or<\/code>fontFamily`, then the\nplatform default font will be used.<\/li>\n<li>\n<code>fontSize<\/code>: The size of glyphs (in logical pixels) to use when painting the text.<\/li>\n<li>\n<code>letterSpacing<\/code>: The amount of space (in logical pixels) to add between each letter.<\/li>\n<li>\n<code>wordSpacing<\/code>: The amount of space (in logical pixels) to add at each sequence of white-space (i.e. between each word).<\/li>\n<li>\n<code>textBaseline<\/code>: The common baseline that should be aligned between this text span and its parent text span, or, for the root text spans, with the line box.<\/li>\n<li>\n<code>height<\/code>: The height of this text span, as a multiplier of the font size.<\/li>\n<li>\n<code>locale<\/code>: The locale used to select region-specific glyphs.<\/li>\n<li>\n<code>background<\/code>: The paint drawn as a background for the text.<\/li>\n<li>\n<code>foreground<\/code>: The paint used to draw the text. If this is specified, <code>color<\/code> must be null.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "dart:ui.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decoration",
                    "type": "dart:ui.TextDecoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationStyle",
                    "type": "dart:ui.TextDecorationStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationThickness",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textBaseline",
                    "type": "dart:ui.TextBaseline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "letterSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wordSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "background",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "foreground",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shadows",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/TextStyle\/TextStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle({\n  Color color,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n  double decorationThickness,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  TextBaseline textBaseline,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  double letterSpacing,\n  double wordSpacing,\n  double height,\n  Locale locale,\n  Paint background,\n  Paint foreground,\n  List&lt;Shadow&gt; shadows,\n}) : assert(color == null || foreground == null,\n       'Cannot provide both a color and a foreground\\n'\n       'The color argument is just a shorthand for \"foreground: new Paint()..color = color\".'\n     ),\n     _encoded = _encodeTextStyle(\n       color,\n       decoration,\n       decorationColor,\n       decorationStyle,\n       decorationThickness,\n       fontWeight,\n       fontStyle,\n       textBaseline,\n       fontFamily,\n       fontFamilyFallback,\n       fontSize,\n       letterSpacing,\n       wordSpacing,\n       height,\n       locale,\n       background,\n       foreground,\n       shadows,\n     ),\n     _fontFamily = fontFamily ?? '',\n     _fontFamilyFallback = fontFamilyFallback,\n     _fontSize = fontSize,\n     _letterSpacing = letterSpacing,\n     _wordSpacing = wordSpacing,\n     _height = height,\n     _decorationThickness = decorationThickness,\n     _locale = locale,\n     _background = background,\n     _foreground = foreground,\n     _shadows = shadows;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.TextStyle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/TextStyle\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'TextStyle('\n           'color: ${              _encoded[0] &amp; 0x00002 == 0x00002  ? new Color(_encoded[1])                  : \"unspecified\"}, '\n           'decoration: ${         _encoded[0] &amp; 0x00004 == 0x00004  ? new TextDecoration._(_encoded[2])       : \"unspecified\"}, '\n           'decorationColor: ${    _encoded[0] &amp; 0x00008 == 0x00008  ? new Color(_encoded[3])                  : \"unspecified\"}, '\n           'decorationStyle: ${    _encoded[0] &amp; 0x00010 == 0x00010  ? TextDecorationStyle.values[_encoded[4]] : \"unspecified\"}, '\n           \/\/ The decorationThickness is not in encoded order in order to keep it near the other decoration properties.\n           'decorationThickness: ${_encoded[0] &amp; 0x00100 == 0x00100  ? _decorationThickness                    : \"unspecified\"}, '\n           'fontWeight: ${         _encoded[0] &amp; 0x00020 == 0x00020  ? FontWeight.values[_encoded[5]]          : \"unspecified\"}, '\n           'fontStyle: ${          _encoded[0] &amp; 0x00040 == 0x00040  ? FontStyle.values[_encoded[6]]           : \"unspecified\"}, '\n           'textBaseline: ${       _encoded[0] &amp; 0x00080 == 0x00080  ? TextBaseline.values[_encoded[7]]        : \"unspecified\"}, '\n           'fontFamily: ${         _encoded[0] &amp; 0x00200 == 0x00200\n                                   &amp;&amp; _fontFamily != null            ? _fontFamily                             : \"unspecified\"}, '\n           'fontFamilyFallback: ${ _encoded[0] &amp; 0x00200 == 0x00200\n                                   &amp;&amp; _fontFamilyFallback != null\n                                   &amp;&amp; _fontFamilyFallback.isNotEmpty ? _fontFamilyFallback                     : \"unspecified\"}, '\n           'fontSize: ${           _encoded[0] &amp; 0x00400 == 0x00400  ? _fontSize                               : \"unspecified\"}, '\n           'letterSpacing: ${      _encoded[0] &amp; 0x00800 == 0x00800  ? \"${_letterSpacing}x\"                    : \"unspecified\"}, '\n           'wordSpacing: ${        _encoded[0] &amp; 0x01000 == 0x01000  ? \"${_wordSpacing}x\"                      : \"unspecified\"}, '\n           'height: ${             _encoded[0] &amp; 0x02000 == 0x02000  ? \"${_height}x\"                           : \"unspecified\"}, '\n           'locale: ${             _encoded[0] &amp; 0x04000 == 0x04000  ? _locale                                 : \"unspecified\"}, '\n           'background: ${         _encoded[0] &amp; 0x08000 == 0x08000  ? _background                             : \"unspecified\"}, '\n           'foreground: ${         _encoded[0] &amp; 0x10000 == 0x10000  ? _foreground                             : \"unspecified\"}, '\n           'shadows: ${            _encoded[0] &amp; 0x20000 == 0x20000  ? _shadows                                : \"unspecified\"}'\n         ')';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.TextStyle",
            "isConstant": false,
            "href": "dart-ui\/TextStyle\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(hashList(_encoded), _fontFamily, _fontFamilyFallback, _fontSize, _letterSpacing, _wordSpacing, _height, _locale, _background, _foreground, _shadows, _decorationThickness);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-ui\/TextStyle-class.html",
    "desc": "<p>An opaque object that determines the size, position, and rendering of text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/painting\/TextStyle-class.html\">TextStyle<\/a>, the class in the <a href=\"painting\/painting-library.html\">painting<\/a> library.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextStyle"
}