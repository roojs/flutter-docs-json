{
    "name": "quiver.collection.DelegatingSet",
    "extends": [
        "quiver.collection.DelegatingIterable",
        "dart:core.Object"
    ],
    "memberOf": "quiver.collection",
    "events": [],
    "methods": [
        {
            "name": "DelegatingSet",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "quiver.collection\/DelegatingSet\/DelegatingSet.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "dart:core.bool",
            "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value) =&gt; delegate.add(value);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "addAll",
            "type": "",
            "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"quiver.collection\/DelegatingSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/addAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) =&gt; delegate.addAll(elements);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "cast",
            "type": "quiver.collection.DelegatingSet",
            "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"quiver.collection\/DelegatingIterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/cast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingSet&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "clear",
            "type": "",
            "desc": "<p>Removes all elements in the set.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/clear.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; delegate.clear();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "containsAll",
            "type": "dart:core.bool",
            "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/containsAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) =&gt; delegate.containsAll(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "difference",
            "type": "dart:core.Set",
            "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Set<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/difference.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) =&gt; delegate.difference(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "intersection",
            "type": "dart:core.Set",
            "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Set<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/intersection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) =&gt; delegate.intersection(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lookup",
            "type": "",
            "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"quiver.collection\/DelegatingIterable\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"quiver.collection\/DelegatingIterable\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/lookup.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object object) =&gt; delegate.lookup(object);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "remove",
            "type": "dart:core.bool",
            "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; delegate.remove(value);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "removeAll",
            "type": "",
            "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/removeAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) =&gt; delegate.removeAll(elements);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeWhere",
            "type": "",
            "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/removeWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) =&gt; delegate.removeWhere(test);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retainAll",
            "type": "",
            "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/retainAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) =&gt; delegate.retainAll(elements);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retainWhere",
            "type": "",
            "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/retainWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) =&gt; delegate.retainWhere(test);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retype",
            "type": "quiver.collection.DelegatingSet",
            "desc": "",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/retype.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingSet&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "union",
            "type": "dart:core.Set",
            "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.collection.DelegatingSet",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Set",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.collection\/DelegatingSet\/union.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) =&gt; delegate.union(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "delegate",
            "type": "dart:core.Set",
            "types": [],
            "desc": "",
            "memberOf": "quiver.collection.DelegatingSet",
            "isConstant": false,
            "href": "quiver.collection\/DelegatingSet\/delegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; get delegate;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "quiver.collection\/DelegatingSet-class.html",
    "desc": "<p>An implementation of <a href=\"dart-core\/Set-class.html\">Set<\/a> that delegates all methods to another <a href=\"dart-core\/Set-class.html\">Set<\/a>.\nFor instance you can create a FruitSet like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitSet extends DelegatingSet&lt;Fruit&gt; {\n  final Set&lt;Fruit&gt; _fruits = new Set&lt;Fruit&gt;();\n\n  Set&lt;Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DelegatingSet"
}