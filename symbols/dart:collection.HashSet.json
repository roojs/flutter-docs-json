{
    "name": "dart:collection.HashSet",
    "extends": [],
    "memberOf": "dart:collection",
    "events": [],
    "methods": [
        {
            "name": "HashSet",
            "type": "",
            "desc": "<p>Create a hash set using the provided <code>equals<\/code> as equality.<\/p>\n<p>The provided <code>equals<\/code> must define a stable equivalence relation, and\n<code>hashCode<\/code> must be consistent with <code>equals<\/code>. If the <code>equals<\/code> or <code>hashCode<\/code>\nmethods won't work on all objects, but only on some instances of E, the\n<code>isValidKey<\/code> predicate can be used to restrict the keys that the functions\nare applied to.\nAny key for which <code>isValidKey<\/code> returns false is automatically assumed\nto not be in the set when asking <code>contains<\/code>.<\/p>\n<p>If <code>equals<\/code> or <code>hashCode<\/code> are omitted, the set uses\nthe elements' intrinsic <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> and <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n<p>If the supplied <code>equals<\/code> or <code>hashCode<\/code> functions won't work on all <code>E<\/code>\nobjects, and the map will be used in a setting where a non-<code>E<\/code> object\nis passed to, e.g., <code>contains<\/code>, then the <code>isValidKey<\/code> function should\nalso be supplied.<\/p>\n<p>If <code>isValidKey<\/code> is omitted, it defaults to testing if the object is an\n<code>E<\/code> instance. That means that:<\/p>\n<pre class=\"language-dart\"><code>new HashSet&lt;int&gt;(equals: (int e1, int e2) =&gt; (e1 - e2) % 5 == 0,\n                 hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>does not need an <code>isValidKey<\/code> argument, because it defaults to only\naccepting <code>int<\/code> values which are accepted by both <code>equals<\/code> and <code>hashCode<\/code>.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all values.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting set is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/HashSet\/HashSet.identity.html\">HashSet.identity<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.HashSet",
            "sig": "",
            "params": [
                {
                    "name": "e2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e1",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "potentialKey",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "potentialKey",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/HashSet\/HashSet.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory HashSet(\n    {bool equals(E e1, E e2),\n    int hashCode(E e),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "HashSet.from",
            "type": "",
            "desc": "<p>Create a hash set containing all <code>elements<\/code>.<\/p>\n<p>Creates a hash set as by <code>new HashSet&lt;E&gt;()<\/code> and adds all given <code>elements<\/code>\nto the set. The elements are added in order. If <code>elements<\/code> contains\ntwo entries that are equal, but not identical, then the first one is\nthe one in the resulting set.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Set<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;SuperType&gt; superSet = ...;\nSet&lt;SubType&gt; subSet =\n    new HashSet&lt;SubType&gt;.from(superSet.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:collection.HashSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/HashSet\/HashSet.from.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashSet.from(Iterable elements) {\n  HashSet&lt;E&gt; result = HashSet&lt;E&gt;();\n  for (final e in elements) {\n    result.add(e);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "HashSet.identity",
            "type": "",
            "desc": "<p>Creates an unordered identity-based set.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new HashSet&lt;E&gt;(equals: identical,\n               hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:collection.HashSet",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-collection\/HashSet\/HashSet.identity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory HashSet.identity();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "HashSet.of",
            "type": "",
            "desc": "<p>Create a hash set containing all <code>elements<\/code>.<\/p>\n<p>Creates a hash set as by <code>new HashSet&lt;E&gt;()<\/code> and adds all given <code>elements<\/code>\nto the set. The elements are added in order. If <code>elements<\/code> contains\ntwo entries that are equal, but not identical, then the first one is\nthe one in the resulting set.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.HashSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/HashSet\/HashSet.of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HashSet.of(Iterable&lt;E&gt; elements) =&gt; HashSet&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "iterator",
            "type": "dart:core.Iterator",
            "types": [],
            "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is unspecified,\nbut consistent between changes to the set.<\/p>\n        ",
            "memberOf": "dart:collection.HashSet",
            "isConstant": false,
            "href": "dart-collection\/HashSet\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
            "memberOf": "dart:collection.HashSet",
            "isConstant": false,
            "href": "dart-collection\/HashSet\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-collection\/HashSet-class.html",
    "desc": "<p>An unordered hash-table based <a href=\"dart-core\/Set-class.html\">Set<\/a> implementation.<\/p>\n<p>The elements of a <code>HashSet<\/code> must have consistent equality\nand hashCode implementations. This means that the equals operation\nmust define a stable equivalence relation on the elements (reflexive,\nsymmetric, transitive, and consistent over time), and that the hashCode\nmust consistent with equality, so that the same for objects that are\nconsidered equal.<\/p>\n<p>The set allows <code>null<\/code> as an element.<\/p>\n<p>Most simple operations on <code>HashSet<\/code> are done in (potentially amortized)\nconstant time: <a href=\"dart-core\/Set\/add.html\">add<\/a>, <a href=\"dart-core\/Set\/contains.html\">contains<\/a>, <a href=\"dart-core\/Set\/remove.html\">remove<\/a>, and <a href=\"dart-collection\/HashSet\/length.html\">length<\/a>, provided the hash\ncodes of objects are well distributed.<\/p>\n<p>The iteration order of the set is not specified and depends on\nthe hashcodes of the provided elements. However, the order is stable:\nmultiple iterations over the same set produce the same order, as long as\nthe set is not modified.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "HashSet"
}