{
    "name": "crypto.Sha256",
    "extends": [
        "crypto.Hash",
        "crypto.Digest",
        "dart:core.int",
        "dart:core.List",
        "dart:convert.Converter",
        "crypto.Digest",
        "dart:core.int",
        "dart:core.List",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "memberOf": "crypto",
    "events": [],
    "methods": [
        {
            "name": "newInstance",
            "type": "crypto.Sha256",
            "desc": "",
            "static": false,
            "memberOf": "crypto.Sha256",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-crypto_crypto\/Sha256\/newInstance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Sha256 newInstance() =&gt; new Sha256._();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "startChunkedConversion",
            "type": "dart:convert.ByteConversionSink",
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
            "static": false,
            "memberOf": "crypto.Sha256",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<crypto.Digest>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "crypto.Digest"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "package-crypto_crypto\/Sha256\/startChunkedConversion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink) =&gt;\n    new ByteConversionSink.from(new _Sha256Sink(sink));<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "blockSize",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The internal block size of the hash in bytes.<\/p>\n<p>This is exposed for use by the <code>Hmac<\/code> class, which needs to know the block\nsize for the <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> it uses.<\/p>\n        ",
            "memberOf": "crypto.Sha256",
            "isConstant": false,
            "href": "package-crypto_crypto\/Sha256\/blockSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int blockSize = 16 * bytesPerWord\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-crypto_crypto\/Sha256-class.html",
    "desc": "<p>An implementation of the <a href=\"http:\/\/tools.ietf.org\/html\/rfc6234\">SHA-256<\/a> hash function.<\/p>\n<p>Note that it's almost always easier to use <a href=\"package-crypto_crypto\/sha256.html\">sha256<\/a> rather than creating a\nnew instance.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Sha256"
}