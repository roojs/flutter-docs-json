{
    "desc": "<p>Manager class for the widgets framework.<\/p>\n<p>This class tracks which widgets need rebuilding, and handles other tasks\nthat apply to widget trees as a whole, such as managing the inactive element\nlist for the tree and triggering the \"reassemble\" command when necessary\nduring hot reload when debugging.<\/p>\n<p>The main build owner is typically owned by the <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a>, and is\ndriven from the operating system along with the rest of the\nbuild\/layout\/paint pipeline.<\/p>\n<p>Additional build owners can be built to manage off-screen widget trees.<\/p>\n<p>To assign a build owner to a tree, use the\n<a href=\"widgets\/RootRenderObjectElement\/assignOwner.html\">RootRenderObjectElement.assignOwner<\/a> method on the root element of the\nwidget tree.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "widgets\/BuildOwner-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.BuildOwner",
    "shortname": "BuildOwner",
    "extends": [],
    "events": [
        {
            "desc": "<p>Called on each build pass when the first buildable element is marked\ndirty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback onBuildScheduled\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BuildOwner\/onBuildScheduled.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "widgets.BuildOwner",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates an object that manages widgets.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BuildOwner({ this.onBuildScheduled });<\/code><\/pre>\n    ",
            "href": "widgets\/BuildOwner\/BuildOwner.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.BuildOwner",
            "params": [
                {
                    "name": "onBuildScheduled",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Establishes a scope for updating the widget tree, and calls the given\n<code>callback<\/code>, if any. Then, builds all the elements that were marked as\ndirty using <a href=\"widgets\/BuildOwner\/scheduleBuildFor.html\">scheduleBuildFor<\/a>, in depth order.<\/p>\n<p>This mechanism prevents build methods from transitively requiring other\nbuild methods to run, potentially causing infinite loops.<\/p>\n<p>The dirty list is processed after <code>callback<\/code> returns, building all the\nelements that were marked as dirty using <a href=\"widgets\/BuildOwner\/scheduleBuildFor.html\">scheduleBuildFor<\/a>, in depth\norder. If elements are marked as dirty while this method is running, they\nmust be deeper than the <code>context<\/code> node, and deeper than any\npreviously-built node in this pass.<\/p>\n<p>To flush the current dirty list without performing any other work, this\nfunction can be called with no callback. This is what the framework does\neach frame, in <a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>.<\/p>\n<p>Only one <a href=\"widgets\/BuildOwner\/buildScope.html\">buildScope<\/a> can be active at a time.<\/p>\n<p>A <a href=\"widgets\/BuildOwner\/buildScope.html\">buildScope<\/a> implies a <a href=\"widgets\/BuildOwner\/lockState.html\">lockState<\/a> scope as well.<\/p>\n<p>To print a console message every time this method is called, set\n<a href=\"widgets\/debugPrintBuildScope.html\">debugPrintBuildScope<\/a> to true. This is useful when debugging problems\ninvolving widgets not getting marked dirty, or getting marked dirty too\noften.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void buildScope(Element context, [ VoidCallback callback ]) {\n  if (callback == null &amp;&amp; _dirtyElements.isEmpty)\n    return;\n  assert(context != null);\n  assert(_debugStateLockLevel &gt;= 0);\n  assert(!_debugBuilding);\n  assert(() {\n    if (debugPrintBuildScope)\n      debugPrint('buildScope called with context $context; dirty list is: $_dirtyElements');\n    _debugStateLockLevel += 1;\n    _debugBuilding = true;\n    return true;\n  }());\n  Timeline.startSync('Build', arguments: timelineWhitelistArguments);\n  try {\n    _scheduledFlushDirtyElements = true;\n    if (callback != null) {\n      assert(_debugStateLocked);\n      Element debugPreviousBuildTarget;\n      assert(() {\n        context._debugSetAllowIgnoredCallsToMarkNeedsBuild(true);\n        debugPreviousBuildTarget = _debugCurrentBuildTarget;\n        _debugCurrentBuildTarget = context;\n        return true;\n      }());\n      _dirtyElementsNeedsResorting = false;\n      try {\n        callback();\n      } finally {\n        assert(() {\n          context._debugSetAllowIgnoredCallsToMarkNeedsBuild(false);\n          assert(_debugCurrentBuildTarget == context);\n          _debugCurrentBuildTarget = debugPreviousBuildTarget;\n          _debugElementWasRebuilt(context);\n          return true;\n        }());\n      }\n    }\n    _dirtyElements.sort(Element._sort);\n    _dirtyElementsNeedsResorting = false;\n    int dirtyCount = _dirtyElements.length;\n    int index = 0;\n    while (index &lt; dirtyCount) {\n      assert(_dirtyElements[index] != null);\n      assert(_dirtyElements[index]._inDirtyList);\n      assert(!_dirtyElements[index]._active || _dirtyElements[index]._debugIsInScope(context));\n      try {\n        _dirtyElements[index].rebuild();\n      } catch (e, stack) {\n        _debugReportException(\n          'while rebuilding dirty elements', e, stack,\n          informationCollector: (StringBuffer information) {\n            information.writeln('The element being rebuilt at the time was index $index of $dirtyCount:');\n            information.write('  ${_dirtyElements[index]}');\n          },\n        );\n      }\n      index += 1;\n      if (dirtyCount &lt; _dirtyElements.length || _dirtyElementsNeedsResorting) {\n        _dirtyElements.sort(Element._sort);\n        _dirtyElementsNeedsResorting = false;\n        dirtyCount = _dirtyElements.length;\n        while (index &gt; 0 &amp;&amp; _dirtyElements[index - 1].dirty) {\n          \/\/ It is possible for previously dirty but inactive widgets to move right in the list.\n          \/\/ We therefore have to move the index left in the list to account for this.\n          \/\/ We don't know how many could have moved. However, we do know that the only possible\n          \/\/ change to the list is that nodes that were previously to the left of the index have\n          \/\/ now moved to be to the right of the right-most cleaned node, and we do know that\n          \/\/ all the clean nodes were to the left of the index. So we move the index left\n          \/\/ until just after the right-most clean node.\n          index -= 1;\n        }\n      }\n    }\n    assert(() {\n      if (_dirtyElements.any((Element element) =&gt; element._active &amp;&amp; element.dirty)) {\n        throw FlutterError(\n          'buildScope missed some dirty elements.\\n'\n          'This probably indicates that the dirty list should have been resorted but was not.\\n'\n          'The list of dirty elements at the end of the buildScope call was:\\n'\n          '  $_dirtyElements'\n        );\n      }\n      return true;\n    }());\n  } finally {\n    for (Element element in _dirtyElements) {\n      assert(element._inDirtyList);\n      element._inDirtyList = false;\n    }\n    _dirtyElements.clear();\n    _scheduledFlushDirtyElements = false;\n    _dirtyElementsNeedsResorting = null;\n    Timeline.finishSync();\n    assert(_debugBuilding);\n    assert(() {\n      _debugBuilding = false;\n      _debugStateLockLevel -= 1;\n      if (debugPrintBuildScope)\n        debugPrint('buildScope finished');\n      return true;\n    }());\n  }\n  assert(_debugStateLockLevel &gt;= 0);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BuildOwner\/buildScope.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildOwner",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Complete the element build pass by unmounting any elements that are no\nlonger active.<\/p>\n<p>This is called by <a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>.<\/p>\n<p>In debug mode, this also runs some sanity checks, for example checking for\nduplicate global keys.<\/p>\n<p>After the current call stack unwinds, a microtask that notifies listeners\nabout changes to global keys will run.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void finalizeTree() {\n  Timeline.startSync('Finalize tree', arguments: timelineWhitelistArguments);\n  try {\n    lockState(() {\n      _inactiveElements._unmountAll(); \/\/ this unregisters the GlobalKeys\n    });\n    assert(() {\n      try {\n        GlobalKey._debugVerifyIllFatedPopulation();\n        if (_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans != null &amp;&amp;\n            _debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans.isNotEmpty) {\n          final Set&lt;GlobalKey&gt; keys = HashSet&lt;GlobalKey&gt;();\n          for (Element element in _debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans.keys) {\n            if (element._debugLifecycleState != _ElementLifecycle.defunct)\n              keys.addAll(_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans[element]);\n          }\n          if (keys.isNotEmpty) {\n            final Map&lt;String, int&gt; keyStringCount = HashMap&lt;String, int&gt;();\n            for (String key in keys.map&lt;String&gt;((GlobalKey key) =&gt; key.toString())) {\n              if (keyStringCount.containsKey(key)) {\n                keyStringCount[key] += 1;\n              } else {\n                keyStringCount[key] = 1;\n              }\n            }\n            final List&lt;String&gt; keyLabels = &lt;String&gt;[];\n            keyStringCount.forEach((String key, int count) {\n              if (count == 1) {\n                keyLabels.add(key);\n              } else {\n                keyLabels.add('$key ($count different affected keys had this toString representation)');\n              }\n            });\n            final Iterable&lt;Element&gt; elements = _debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans.keys;\n            final Map&lt;String, int&gt; elementStringCount = HashMap&lt;String, int&gt;();\n            for (String element in elements.map&lt;String&gt;((Element element) =&gt; element.toString())) {\n              if (elementStringCount.containsKey(element)) {\n                elementStringCount[element] += 1;\n              } else {\n                elementStringCount[element] = 1;\n              }\n            }\n            final List&lt;String&gt; elementLabels = &lt;String&gt;[];\n            elementStringCount.forEach((String element, int count) {\n              if (count == 1) {\n                elementLabels.add(element);\n              } else {\n                elementLabels.add('$element ($count different affected elements had this toString representation)');\n              }\n            });\n            assert(keyLabels.isNotEmpty);\n            final String the = keys.length == 1 ? ' the' : '';\n            final String s = keys.length == 1 ? '' : 's';\n            final String were = keys.length == 1 ? 'was' : 'were';\n            final String their = keys.length == 1 ? 'its' : 'their';\n            final String respective = elementLabels.length == 1 ? '' : ' respective';\n            final String those = keys.length == 1 ? 'that' : 'those';\n            final String s2 = elementLabels.length == 1 ? '' : 's';\n            final String those2 = elementLabels.length == 1 ? 'that' : 'those';\n            final String they = elementLabels.length == 1 ? 'it' : 'they';\n            final String think = elementLabels.length == 1 ? 'thinks' : 'think';\n            final String are = elementLabels.length == 1 ? 'is' : 'are';\n            throw FlutterError(\n              'Duplicate GlobalKey$s detected in widget tree.\\n'\n              'The following GlobalKey$s $were specified multiple times in the widget tree. This will lead to '\n              'parts of the widget tree being truncated unexpectedly, because the second time a key is seen, '\n              'the previous instance is moved to the new location. The key$s $were:\\n'\n              '- ${keyLabels.join(\"\\n  \")}\\n'\n              'This was determined by noticing that after$the widget$s with the above global key$s $were moved '\n              'out of $their$respective previous parent$s2, $those2 previous parent$s2 never updated during this frame, meaning '\n              'that $they either did not update at all or updated before the widget$s $were moved, in either case '\n              'implying that $they still $think that $they should have a child with $those global key$s.\\n'\n              'The specific parent$s2 that did not update after having one or more children forcibly removed '\n              'due to GlobalKey reparenting $are:\\n'\n              '- ${elementLabels.join(\"\\n  \")}\\n'\n              'A GlobalKey can only be specified on one widget at a time in the widget tree.'\n            );\n          }\n        }\n      } finally {\n        _debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans?.clear();\n      }\n      return true;\n    }());\n  } catch (e, stack) {\n    _debugReportException('while finalizing the widget tree', e, stack);\n  } finally {\n    Timeline.finishSync();\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BuildOwner\/finalizeTree.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildOwner",
            "params": []
        },
        {
            "desc": "<p>Establishes a scope in which calls to <a href=\"widgets\/State\/setState.html\">State.setState<\/a> are forbidden, and\ncalls the given <code>callback<\/code>.<\/p>\n<p>This mechanism is used to ensure that, for instance, <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a> does\nnot call <a href=\"widgets\/State\/setState.html\">State.setState<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void lockState(void callback()) {\n  assert(callback != null);\n  assert(_debugStateLockLevel &gt;= 0);\n  assert(() {\n    _debugStateLockLevel += 1;\n    return true;\n  }());\n  try {\n    callback();\n  } finally {\n    assert(() {\n      _debugStateLockLevel -= 1;\n      return true;\n    }());\n  }\n  assert(_debugStateLockLevel &gt;= 0);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BuildOwner\/lockState.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildOwner",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<void>"
                }
            ]
        },
        {
            "desc": "<p>Cause the entire subtree rooted at the given <a href=\"widgets\/Element-class.html\">Element<\/a> to be entirely\nrebuilt. This is used by development tools when the application code has\nchanged and is being hot-reloaded, to cause the widget tree to pick up any\nchanged implementations.<\/p>\n<p>This is expensive and should not be called except during development.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reassemble(Element root) {\n  Timeline.startSync('Dirty Element Tree');\n  try {\n    assert(root._parent == null);\n    assert(root.owner == this);\n    root.reassemble();\n  } finally {\n    Timeline.finishSync();\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BuildOwner\/reassemble.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildOwner",
            "params": [
                {
                    "name": "root",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Adds an element to the dirty elements list so that it will be rebuilt\nwhen <a href=\"widgets\/WidgetsBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a> calls <a href=\"widgets\/BuildOwner\/buildScope.html\">buildScope<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void scheduleBuildFor(Element element) {\n  assert(element != null);\n  assert(element.owner == this);\n  assert(() {\n    if (debugPrintScheduleBuildForStacks)\n      debugPrintStack(label: 'scheduleBuildFor() called for $element${_dirtyElements.contains(element) ? \" (ALREADY IN LIST)\" : \"\"}');\n    if (!element.dirty) {\n      throw FlutterError(\n        'scheduleBuildFor() called for a widget that is not marked as dirty.\\n'\n        'The method was called for the following element:\\n'\n        '  $element\\n'\n        'This element is not current marked as dirty. Make sure to set the dirty flag before '\n        'calling scheduleBuildFor().\\n'\n        'If you did not attempt to call scheduleBuildFor() yourself, then this probably '\n        'indicates a bug in the widgets framework. Please report it: '\n        'https:\/\/github.com\/flutter\/flutter\/issues\/new?template=BUG.md'\n      );\n    }\n    return true;\n  }());\n  if (element._inDirtyList) {\n    assert(() {\n      if (debugPrintScheduleBuildForStacks)\n        debugPrintStack(label: 'BuildOwner.scheduleBuildFor() called; _dirtyElementsNeedsResorting was $_dirtyElementsNeedsResorting (now true); dirty list is: $_dirtyElements');\n      if (!_debugIsInBuildScope) {\n        throw FlutterError(\n          'BuildOwner.scheduleBuildFor() called inappropriately.\\n'\n          'The BuildOwner.scheduleBuildFor() method should only be called while the '\n          'buildScope() method is actively rebuilding the widget tree.'\n        );\n      }\n      return true;\n    }());\n    _dirtyElementsNeedsResorting = true;\n    return;\n  }\n  if (!_scheduledFlushDirtyElements &amp;&amp; onBuildScheduled != null) {\n    _scheduledFlushDirtyElements = true;\n    onBuildScheduled();\n  }\n  _dirtyElements.add(element);\n  element._inDirtyList = true;\n  assert(() {\n    if (debugPrintScheduleBuildForStacks)\n      debugPrint('...dirty list is now: $_dirtyElements');\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "widgets\/BuildOwner\/scheduleBuildFor.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.BuildOwner",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this widget tree is in the build phase.<\/p>\n<p>Only valid when asserts are enabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get debugBuilding =&gt; _debugBuilding;<\/code><\/pre>\n        ",
            "href": "widgets\/BuildOwner\/debugBuilding.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.BuildOwner",
            "params": []
        },
        {
            "desc": "<p>The object in charge of the focus tree.<\/p>\n<p>Rarely used directly. Instead, consider using <a href=\"widgets\/FocusScope\/of.html\">FocusScope.of<\/a> to obtain\nthe <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>See <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a> for more details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FocusManager focusManager = FocusManager()\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/BuildOwner\/focusManager.html",
            "isDeprecated": "0",
            "type": "widgets.FocusManager",
            "memberOf": "widgets.BuildOwner",
            "params": []
        }
    ]
}