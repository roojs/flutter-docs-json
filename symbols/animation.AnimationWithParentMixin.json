{
    "name": "animation.AnimationWithParentMixin",
    "extends": [],
    "memberOf": "animation",
    "events": [],
    "methods": [
        {
            "name": "AnimationWithParentMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "animation.AnimationWithParentMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "animation\/AnimationWithParentMixin\/AnimationWithParentMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "addListener",
            "type": "",
            "desc": "<p>Calls the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/AnimationWithParentMixin\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationWithParentMixin",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "animation\/AnimationWithParentMixin\/addListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addListener(VoidCallback listener) =&gt; parent.addListener(listener);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addStatusListener",
            "type": "",
            "desc": "<p>Calls listener every time the status of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/AnimationWithParentMixin\/removeStatusListener.html\">removeStatusListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationWithParentMixin",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "animation.AnimationStatusListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "animation\/AnimationWithParentMixin\/addStatusListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addStatusListener(AnimationStatusListener listener) =&gt; parent.addStatusListener(listener);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeListener",
            "type": "",
            "desc": "<p>Stop calling the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/AnimationWithParentMixin\/addListener.html\">addListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationWithParentMixin",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "animation\/AnimationWithParentMixin\/removeListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeListener(VoidCallback listener) =&gt; parent.removeListener(listener);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeStatusListener",
            "type": "",
            "desc": "<p>Stops calling the listener every time the status of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/AnimationWithParentMixin\/addStatusListener.html\">addStatusListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationWithParentMixin",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "animation.AnimationStatusListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "animation\/AnimationWithParentMixin\/removeStatusListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeStatusListener(AnimationStatusListener listener) =&gt; parent.removeStatusListener(listener);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "parent",
            "type": "animation.Animation",
            "types": [],
            "desc": "<p>The animation whose value this animation will proxy.<\/p>\n<p>This animation must remain the same for the lifetime of this object. If\nyou wish to proxy a different animation at different times, consider using\n<a href=\"animation\/ProxyAnimation-class.html\">ProxyAnimation<\/a>.<\/p>\n        ",
            "memberOf": "animation.AnimationWithParentMixin",
            "isConstant": false,
            "href": "animation\/AnimationWithParentMixin\/parent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;T&gt; get parent;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "status",
            "type": "animation.AnimationStatus",
            "types": [],
            "desc": "<p>The current status of this animation.<\/p>\n        ",
            "memberOf": "animation.AnimationWithParentMixin",
            "isConstant": false,
            "href": "animation\/AnimationWithParentMixin\/status.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AnimationStatus get status =&gt; parent.status;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "animation\/AnimationWithParentMixin-mixin.html",
    "desc": "<p>Implements most of the <a href=\"animation\/Animation-class.html\">Animation<\/a> interface by deferring its behavior to a\ngiven <a href=\"animation\/AnimationWithParentMixin\/parent.html\">parent<\/a> Animation.<\/p>\n<p>To implement an <a href=\"animation\/Animation-class.html\">Animation<\/a> that is driven by a parent, it is only necessary\nto mix in this class, implement <a href=\"animation\/AnimationWithParentMixin\/parent.html\">parent<\/a>, and implement <code>T get value<\/code>.<\/p>\n<p>To define a mapping from values in the range 0..1, consider subclassing\n<a href=\"animation\/Tween-class.html\">Tween<\/a> instead.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "AnimationWithParentMixin"
}