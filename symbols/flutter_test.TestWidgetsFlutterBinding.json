{
    "desc": "<p>Base class for bindings used by widgets library tests.<\/p>\n<p>The <a href=\"flutter_test\/TestWidgetsFlutterBinding\/ensureInitialized.html\">ensureInitialized<\/a> method creates (if necessary) and returns\nan instance of the appropriate subclass.<\/p>\n<p>When using these bindings, certain features are disabled. For\nexample, <a href=\"scheduler\/timeDilation.html\">timeDilation<\/a> is reset to 1.0 on initialization.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "flutter_test\/TestWidgetsFlutterBinding-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_test",
    "name": "flutter_test.TestWidgetsFlutterBinding",
    "shortname": "TestWidgetsFlutterBinding",
    "extends": [
        "foundation.BindingBase",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>The value to set <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> to while tests are running.<\/p>\n<p>This can be used to redirect console output from the framework, or to\nchange the behavior of <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>. For example,\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> uses it to make <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>\nsynchronous, disabling its normal throttling behavior.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDebugPrintCallback get debugPrintOverride =&gt; debugPrint;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/debugPrintOverride.html",
            "isDeprecated": "0",
            "type": "foundation.DebugPrintCallback",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Constructor for <a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>.<\/p>\n<p>This constructor overrides the <a href=\"foundation\/debugPrint.html\">debugPrint<\/a> global hook to point to\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/debugPrintOverride.html\">debugPrintOverride<\/a>, which can be overridden by subclasses.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestWidgetsFlutterBinding() : _window = TestWindow(window: ui.window) {\n  debugPrint = debugPrintOverride;\n  debugDisableShadows = disableShadows;\n  debugCheckIntrinsicSizes = checkIntrinsicSizes;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/TestWidgetsFlutterBinding.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Increase the timeout for the current test by the given duration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTime(Duration duration) {\n  \/\/ Noop, see [AutomatedTestWidgetsFlutterBinding. addTime] for an actual implementation.\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/addTime.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>This is called during test execution before and after the body has been\nexecuted.<\/p>\n<p>It's used by <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> to drain the microtasks\nbefore the final <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a> that happens during test cleanup.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void asyncBarrier() {\n  TestAsyncUtils.verifyAllScopesClosed();\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/asyncBarrier.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"rendering\/ViewConfiguration-class.html\">ViewConfiguration<\/a> configured for the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> based on the\ncurrent environment.<\/p>\n<p>This is called during construction and also in response to changes to the\nsystem metrics.<\/p>\n<p>Bindings can override this method to change what size or device pixel\nratio the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> will use. For example, the testing framework uses\nthis to force the display into 800x600 when a test is run on the device\nusing <code>flutter run<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nViewConfiguration createViewConfiguration() {\n  final double devicePixelRatio = window.devicePixelRatio;\n  final Size size = _surfaceSize ?? window.physicalSize \/ devicePixelRatio;\n  return ViewConfiguration(\n    size: size,\n    devicePixelRatio: devicePixelRatio,\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/createViewConfiguration.html",
            "isDeprecated": "0",
            "type": "rendering.ViewConfiguration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Dispatch an event to a hit test result's path.<\/p>\n<p>This sends the given event to every <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> in the entries of the\ngiven <a href=\"gestures\/HitTestResult-class.html\">HitTestResult<\/a>, and catches exceptions that any of the handlers\nmight throw. The <code>hitTestResult<\/code> argument may only be null for\n<a href=\"gestures\/PointerHoverEvent-class.html\">PointerHoverEvent<\/a>, <a href=\"gestures\/PointerAddedEvent-class.html\">PointerAddedEvent<\/a>, or <a href=\"gestures\/PointerRemovedEvent-class.html\">PointerRemovedEvent<\/a> events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispatchEvent(\n  PointerEvent event,\n  HitTestResult hitTestResult, {\n  TestBindingEventSource source = TestBindingEventSource.device,\n}) {\n  assert(source == TestBindingEventSource.test);\n  super.dispatchEvent(event, hitTestResult);\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/dispatchEvent.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                },
                {
                    "name": "hitTestResult",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                },
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.TestBindingEventSource"
                }
            ]
        },
        {
            "desc": "<p>Creates and initializes the binding. This function is\nidempotent; calling it a second time will just return the\npreviously-created instance.<\/p>\n<p>This function will use <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> if\nthe test was run using <code>flutter test<\/code>, and\n<a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> otherwise (e.g. if it was run\nusing <code>flutter run<\/code>). (This is determined by looking at the\nenvironment variables for a variable called <code>FLUTTER_TEST<\/code>.)<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static WidgetsBinding ensureInitialized() {\n  if (WidgetsBinding.instance == null) {\n    if (Platform.environment.containsKey('FLUTTER_TEST')) {\n      AutomatedTestWidgetsFlutterBinding();\n    } else {\n      LiveTestWidgetsFlutterBinding();\n    }\n  }\n  assert(WidgetsBinding.instance is TestWidgetsFlutterBinding);\n  return WidgetsBinding.instance;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/ensureInitialized.html",
            "isDeprecated": "0",
            "type": "widgets.WidgetsBinding",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Convert the given point from the global coordinate system (as used by\npointer events from the device) to the coordinate system used by the\ntests (an 800 by 600 window).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset globalToLocal(Offset point) =&gt; point;<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/globalToLocal.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "point",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Acts as if the application went idle.<\/p>\n<p>Runs all remaining microtasks, including those scheduled as a result of\nrunning them, until there are no more microtasks scheduled. Then, runs any\npreviously scheduled timers with zero time, and completes the returned future.<\/p>\n<p>May result in an infinite loop or run out of memory if microtasks continue\nto recursively schedule new microtasks. Will not run any timers scheduled\nafter this method was invoked, even if they are zero-time timers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; idle() {\n  return TestAsyncUtils.guard&lt;void&gt;(() {\n    final Completer&lt;void&gt; completer = Completer&lt;void&gt;();\n    Timer.run(() {\n      completer.complete();\n    });\n    return completer.future;\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/idle.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  timeDilation = 1.0; \/\/ just in case the developer has artificially changed it for development\n  HttpOverrides.global = _MockHttpOverrides();\n  _testTextInput = TestTextInput(onCleared: _resetFocusedEditable)..register();\n  super.initInstances();\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/initInstances.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Adds relevant licenses to the <a href=\"foundation\/LicenseRegistry-class.html\">LicenseRegistry<\/a>.<\/p>\n<p>By default, the <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>'s implementation of <a href=\"flutter_test\/TestWidgetsFlutterBinding\/initLicenses.html\">initLicenses<\/a> adds\nall the licenses collected by the <code>flutter<\/code> tool during compilation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initLicenses() {\n  \/\/ Do not include any licenses, because we're a test, and the LICENSE file\n  \/\/ doesn't get generated for tests.\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/initLicenses.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Convert the given point from the coordinate system used by the tests (an\n800 by 600 window) to the global coordinate system (as used by pointer\nevents from the device).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset localToGlobal(Offset point) =&gt; point;<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/localToGlobal.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "point",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> function after a test is executed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void postTest() {\n  assert(inTest);\n  FlutterError.onError = _oldExceptionHandler;\n  _pendingExceptionDetails = null;\n  _parentZone = null;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/postTest.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Triggers a frame sequence (build\/layout\/paint\/etc),\nthen flushes microtasks.<\/p>\n<p>If duration is set, then advances the clock by that much first.\nDoing this flushes microtasks.<\/p>\n<p>The supplied EnginePhase is the final phase reached during the pump pass;\nif not supplied, the whole pass is executed.<\/p>\n<p>See also <a href=\"flutter_test\/LiveTestWidgetsFlutterBindingFramePolicy-class.html\">LiveTestWidgetsFlutterBindingFramePolicy<\/a>, which affects how\nthis method works when the test is run with <code>flutter run<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; pump([ Duration duration, EnginePhase newPhase = EnginePhase.sendSemanticsUpdate ]);<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/pump.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "newPhase",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "flutter_test.EnginePhase"
                }
            ]
        },
        {
            "desc": "<p>Re-attempts the initialization of the lifecycle state after providing\ntest values in <a href=\"flutter_test\/TestWindow\/initialLifecycleStateTestValue.html\">TestWindow.initialLifecycleStateTestValue<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void readTestInitialLifecycleStateFromNativeWindow() {\n  readInitialLifecycleStateFromNativeWindow();\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/readTestInitialLifecycleStateFromNativeWindow.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Called when the framework catches an exception, even if that exception is\nbeing handled by <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>.<\/p>\n<p>This is called when there is no pending exception; if multiple exceptions\nare thrown and <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a> isn't used, then subsequent exceptions are\nlogged to the console regardless (and the test will fail).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid reportExceptionNoticed(FlutterErrorDetails exception) {\n  \/\/ By default we do nothing.\n  \/\/ The LiveTestWidgetsFlutterBinding overrides this to report the exception to the console.\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/reportExceptionNoticed.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "exception",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.FlutterErrorDetails"
                }
            ]
        },
        {
            "desc": "<p>Runs a <code>callback<\/code> that performs real asynchronous work.<\/p>\n<p>This is intended for callers who need to call asynchronous methods where\nthe methods spawn isolates or OS threads and thus cannot be executed\nsynchronously by calling <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a>.<\/p>\n<p>If <code>callback<\/code> completes successfully, this will return the future\nreturned by <code>callback<\/code>.<\/p>\n<p>If <code>callback<\/code> completes with an error, the error will be caught by the\nFlutter framework and made available via <a href=\"flutter_test\/TestWidgetsFlutterBinding\/takeException.html\">takeException<\/a>, and this method\nwill return a future that completes will <code>null<\/code>.<\/p>\n<p>Re-entrant calls to this method are not allowed; callers of this method\nare required to wait for the returned future to complete before calling\nthis method again. Attempts to do otherwise will result in a\n<a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> error being thrown.<\/p>\n<p>The <code>additionalTime<\/code> argument is used by the\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> implementation to increase the\ncurrent timeout. See <a href=\"flutter_test\/TestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a> for\ndetails. The value is ignored by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; runAsync&lt;T&gt;(\n  Future&lt;T&gt; callback(), {\n  Duration additionalTime = const Duration(milliseconds: 1000),\n});<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/runAsync.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "additionalTime",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Call the testBody inside a <a href=\"quiver.testing.async\/FakeAsync-class.html\">FakeAsync<\/a> scope on which <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a> can\nadvance time.<\/p>\n<p>Returns a future which completes when the test has run.<\/p>\n<p>Called by the <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> and <a href=\"flutter_test\/benchmarkWidgets.html\">benchmarkWidgets<\/a> functions to\nrun a test.<\/p>\n<p>The <code>invariantTester<\/code> argument is called after the <code>testBody<\/code>'s <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes. If it throws, then the test is marked as failed.<\/p>\n<p>The <code>description<\/code> is used by the <a href=\"flutter_test\/LiveTestWidgetsFlutterBinding-class.html\">LiveTestWidgetsFlutterBinding<\/a> to\nshow a label on the screen during the test. The description comes from\nthe value passed to <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a>. It must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; runTest(Future&lt;void&gt; testBody(), VoidCallback invariantTester, { String description = '' });<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/runTest.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "invariantTester",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "testBody",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Artificially calls dispatchLocalesChanged on the Widget binding,\nthen flushes microtasks.<\/p>\n<p>Passes only one single Locale. Use <a href=\"flutter_test\/TestWidgetsFlutterBinding\/setLocales.html\">setLocales<\/a> to pass a full preferred\nlocales list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setLocale(String languageCode, String countryCode) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(inTest);\n    final Locale locale = Locale(languageCode, countryCode == '' ? null : countryCode);\n    dispatchLocalesChanged(&lt;Locale&gt;[locale]);\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/setLocale.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "countryCode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "languageCode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Artificially calls dispatchLocalesChanged on the Widget binding,\nthen flushes microtasks.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setLocales(List&lt;Locale&gt; locales) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(inTest);\n    dispatchLocalesChanged(locales);\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/setLocales.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "locales",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:ui.Locale>"
                }
            ]
        },
        {
            "desc": "<p>Artificially changes the surface size to <code>size<\/code> on the Widget binding,\nthen flushes microtasks.<\/p>\n<p>Set to null to use the default surface size.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; setSurfaceSize(Size size) {\n  return TestAsyncUtils.guard&lt;void&gt;(() async {\n    assert(inTest);\n    if (_surfaceSize == size)\n      return;\n    _surfaceSize = size;\n    handleMetricsChanged();\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/setSurfaceSize.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": [
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Returns the exception most recently caught by the Flutter framework.<\/p>\n<p>Call this if you expect an exception during a test. If an exception is\nthrown and this is not called, then the exception is rethrown when\nthe <a href=\"flutter_test\/testWidgets.html\">testWidgets<\/a> call completes.<\/p>\n<p>If two exceptions are thrown in a row without the first one being\nacknowledged with a call to this method, then when the second exception is\nthrown, they are both dumped to the console and then the second is\nrethrown from the exception handler. This will likely result in the\nframework entering a highly unstable state and everything collapsing.<\/p>\n<p>It's safe to call this when there's no pending exception; it will return\nnull in that case.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic takeException() {\n  assert(inTest);\n  final dynamic result = _pendingExceptionDetails?.exception;\n  _pendingExceptionDetails = null;\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/takeException.html",
            "isDeprecated": "0",
            "type": "<dynamic>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The value to set <a href=\"rendering\/debugCheckIntrinsicSizes.html\">debugCheckIntrinsicSizes<\/a> to while tests are running.<\/p>\n<p>This can be used to enable additional checks. For example,\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> sets this to true, so that all tests\nalways run with aggressive intrinsic sizing tests enabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get checkIntrinsicSizes =&gt; false;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/checkIntrinsicSizes.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The current time.<\/p>\n<p>In the automated test environment (<code>flutter test<\/code>), this is a fake clock\nthat begins in January 2015 at the start of the test and advances each\ntime <a href=\"flutter_test\/TestWidgetsFlutterBinding\/pump.html\">pump<\/a> is called with a non-zero duration.<\/p>\n<p>In the live testing environment (<code>flutter run<\/code>), this object shows the\nactual current wall-clock time.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Clock get clock;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/clock.html",
            "isDeprecated": "0",
            "type": "quiver.time.Clock",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The default test timeout for tests when using this binding.<\/p>\n<p>The <a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> layers in an additional timeout\nmechanism beyond this, with much more aggressive timeouts. See\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/addTime.html\">AutomatedTestWidgetsFlutterBinding.addTime<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">test_package.Timeout get defaultTestTimeout;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/defaultTestTimeout.html",
            "isDeprecated": "0",
            "type": "test_api.Timeout",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The value to set <a href=\"painting\/debugDisableShadows.html\">debugDisableShadows<\/a> to while tests are running.<\/p>\n<p>This can be used to reduce the likelihood of golden file tests being\nflaky, because shadow rendering is not always deterministic. The\n<a href=\"flutter_test\/AutomatedTestWidgetsFlutterBinding-class.html\">AutomatedTestWidgetsFlutterBinding<\/a> sets this to true, so that all tests\nalways run with shadows disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get disableShadows =&gt; false;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/disableShadows.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The current client of the onscreen keyboard. Callers must pump\nan additional frame after setting this property to complete the\nthe focus change.<\/p>\n<p>Instead of setting this directly, consider using\n<a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">WidgetTester.showKeyboard<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EditableTextState get focusedEditable =&gt; _focusedEditable;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/focusedEditable.html",
            "isDeprecated": "0",
            "type": "widgets.EditableTextState",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Whether there is currently a test executing.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get inTest;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/inTest.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The number of outstanding microtasks in the queue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get microtaskCount;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/microtaskCount.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>Whether to include the output of debugDumpApp() when reporting\ntest failures.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool showAppDumpInErrors = false\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/showAppDumpInErrors.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>A stub for the system's onscreen keyboard. Callers must set the\n<a href=\"flutter_test\/TestWidgetsFlutterBinding\/focusedEditable.html\">focusedEditable<\/a> before using this value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TestTextInput get testTextInput =&gt; _testTextInput;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/testTextInput.html",
            "isDeprecated": "0",
            "type": "flutter_test.TestTextInput",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        },
        {
            "desc": "<p>The window to which this binding is bound.<\/p>\n<p>A number of additional bindings are defined as extensions of <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>,\ne.g., <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a>, <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, and <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a>. Each of\nthese bindings define behaviors that interact with a <a href=\"dart-ui\/Window-class.html\">ui.Window<\/a>, e.g.,\n<a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a> registers a <a href=\"dart-ui\/Window\/onPlatformMessage.html\">ui.Window.onPlatformMessage<\/a> handler, and\n<a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> registers <a href=\"dart-ui\/Window\/onMetricsChanged.html\">ui.Window.onMetricsChanged<\/a>,\n<a href=\"dart-ui\/Window\/onTextScaleFactorChanged.html\">ui.Window.onTextScaleFactorChanged<\/a>, <a href=\"dart-ui\/Window\/onSemanticsEnabledChanged.html\">ui.Window.onSemanticsEnabledChanged<\/a>,\nand <a href=\"dart-ui\/Window\/onSemanticsAction.html\">ui.Window.onSemanticsAction<\/a> handlers.<\/p>\n<p>Each of these other bindings could individually access a <a href=\"dart-ui\/Window-class.html\">Window<\/a> statically,\nbut that would preclude the ability to test these behaviors with a fake\nwindow for verification purposes.  Therefore, <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a> exposes this\n<a href=\"dart-ui\/Window-class.html\">Window<\/a> for use by other bindings.  A subclass of <a href=\"foundation\/BindingBase-class.html\">BindingBase<\/a>, such as\n<a href=\"flutter_test\/TestWidgetsFlutterBinding-class.html\">TestWidgetsFlutterBinding<\/a>, can override this accessor to return a\ndifferent <a href=\"dart-ui\/Window-class.html\">Window<\/a> implementation, such as a <a href=\"flutter_test\/TestWindow-class.html\">TestWindow<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTestWindow get window =&gt; _window;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestWidgetsFlutterBinding\/window.html",
            "isDeprecated": "0",
            "type": "flutter_test.TestWindow",
            "memberOf": "flutter_test.TestWidgetsFlutterBinding",
            "params": []
        }
    ]
}