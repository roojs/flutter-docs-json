{
    "name": "dart:core.Symbol",
    "extends": [],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>Symbols are equal to other symbols that correspond to the same member name.<\/p>\n<p>Qualified member names, like <code>#foo.bar<\/code> are equal only if they have the\nsame identifiers before the same final member name.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.Symbol",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/Symbol\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Symbol",
            "type": "",
            "desc": "<p>Constructs a new <a href=\"dart-core\/Symbol-class.html\">Symbol<\/a> representing the provided name.<\/p>\n<p>The name must be a valid public Dart member name,\npublic constructor name, or library name, optionally qualified.<\/p>\n<p>A qualified name is a valid name preceded by a public identifier name\nand a '<code>.<\/code>', e.g., <code>foo.bar.baz=<\/code> is a qualified version of <code>baz=<\/code>.\nThat means that the content of the <code>name<\/code> String must be either<\/p>\n<ul>\n<li>a valid public Dart identifier\n(that is, an identifier not starting with \"<code>_<\/code>\"),<\/li>\n<li>such an identifier followed by \"=\" (a setter name),<\/li>\n<li>the name of a declarable operator\n(one of \"<code>+<\/code>\", \"<code>-<\/code>\", \"<code>*<\/code>\", \"<code>\/<\/code>\", \"<code>%<\/code>\", \"<code>~\/<\/code>\", \"<code>&amp;<\/code>\", \"<code>|<\/code>\",\n\"<code>^<\/code>\", \"<code>~<\/code>\", \"<code>&lt;&lt;<\/code>\", \"<code>&gt;&gt;<\/code>\", \"<code>&lt;<\/code>\", \"<code>&lt;=<\/code>\", \"<code>&gt;<\/code>\", \"<code>&gt;=<\/code>\", \"<code>==<\/code>\",\n\"<code>[]<\/code>\", \"<code>[]=<\/code>\", or \"<code>unary-<\/code>\"),<\/li>\n<li>any of the above preceded by any number of qualifiers,\nwhere a qualifier is a non-private identifier followed by '<code>.<\/code>',<\/li>\n<li>or the empty string (the default name of a library with no library\nname declaration).<\/li>\n<\/ul>\n<p>Symbol instances created from the same <code>name<\/code> are equal,\nbut not necessarily identical, but symbols created as compile-time\nconstants are canonicalized, as all other constant object creations.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(new Symbol(\"foo\") == new Symbol(\"foo\"));\nassert(identical(const Symbol(\"foo\"), const Symbol(\"foo\")));\n<\/code><\/pre>\n<p>If <code>name<\/code> is a single identifier that does not start with an underscore,\nor it is a qualified identifier,\nor it is an operator name different from <code>unary-<\/code>,\nthen the result of <code>const Symbol(name)<\/code> is the same instance that\nthe symbol literal created by prefixing <code>#<\/code> to the content of <code>name<\/code>\nwould evaluate to.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(new Symbol(\"foo\") == #foo);\nassert(new Symbol(\"[]=\") == #[]=]);\nassert(new Symbol(\"foo.bar\") == #foo.bar);\nassert(identical(const Symbol(\"foo\"), #foo));\nassert(identical(const Symbol(\"[]=\"), #[]=]));\nassert(identical(const Symbol(\"foo.bar\"), #foo.bar));\n<\/code><\/pre>\n<p>This constructor cannot create a <a href=\"dart-core\/Symbol-class.html\">Symbol<\/a> instance that is equal to\na private symbol literal like <code>#_foo<\/code>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const Symbol(\"_foo\") \/\/ Invalid\n<\/code><\/pre>\n<p>The created instance overrides <a href=\"dart-core\/Symbol\/operator_equals.html\">Object.==<\/a>.<\/p>\n<p>The following text is non-normative:<\/p>\n<p>Creating non-const Symbol instances may result in larger output.  If\npossible, use <code>MirrorsUsed<\/code> from \"dart:mirrors\" to specify which names\nmight be passed to this constructor.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.Symbol",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/Symbol\/Symbol.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory Symbol(String name) = internal.Symbol;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "type": "",
            "href": "dart-core\/Symbol\/empty-constant.html",
            "desc": "<p>The empty symbol.<\/p>\n<p>The empty symbol is the name of libraries with no library declaration,\nand the base-name of the unnamed constructor.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Symbol empty = const Symbol(\"\")\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "empty",
            "memberOf": "dart:core.Symbol"
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns a hash code compatible with <a href=\"dart-core\/Symbol\/operator_equals.html\">operator==<\/a>.<\/p>\n<p>Equal symbols have the same hash code.<\/p>\n        ",
            "memberOf": "dart:core.Symbol",
            "isConstant": false,
            "href": "dart-core\/Symbol\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-core\/Symbol\/unaryMinus-constant.html",
            "desc": "<p>The symbol corresponding to the name of the unary minus operator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Symbol unaryMinus = const Symbol(\"unary-\")\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "unaryMinus",
            "memberOf": "dart:core.Symbol"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-core\/Symbol-class.html",
    "desc": "<p>Opaque name used by mirrors, invocations and <a href=\"dart-core\/Function\/apply.html\">Function.apply<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Symbol"
}