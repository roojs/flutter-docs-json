{
    "desc": "<p>Controls specific aspects of the operating system's graphical interface and\nhow it interacts with the application.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/SystemChrome-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.SystemChrome",
    "shortname": "SystemChrome",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Restores the system overlays to the last settings provided via\n<a href=\"services\/SystemChrome\/setEnabledSystemUIOverlays.html\">setEnabledSystemUIOverlays<\/a>. May be used when the platform force enables\/disables\nUI elements.<\/p>\n<p>For example, when the Android keyboard disables hidden status and navigation bars,\nthis can be called to re-disable the bars when the keyboard is closed.<\/p>\n<p>On Android, the system UI cannot be changed until 1 second after the previous\nchange. This is to prevent malware from permanently hiding navigation buttons.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; restoreSystemUIOverlays() async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.restoreSystemUIOverlays',\n    null,\n  );\n}<\/code><\/pre>\n    ",
            "href": "services\/SystemChrome\/restoreSystemUIOverlays.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "restoreSystemUIOverlays",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.SystemChrome",
            "params": []
        },
        {
            "desc": "<p>Specifies the description of the current state of the application as it\npertains to the application switcher (also known as \"recent tasks\").<\/p>\n<p>Any part of the description that is unsupported on the current platform\nwill be ignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setApplicationSwitcherDescription(ApplicationSwitcherDescription description) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.setApplicationSwitcherDescription',\n    &lt;String, dynamic&gt;{\n      'label': description.label,\n      'primaryColor': description.primaryColor,\n    },\n  );\n}<\/code><\/pre>\n    ",
            "href": "services\/SystemChrome\/setApplicationSwitcherDescription.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "setApplicationSwitcherDescription",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.SystemChrome",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.ApplicationSwitcherDescription"
                }
            ]
        },
        {
            "desc": "<p>Specifies the set of system overlays to have visible when the application\nis running.<\/p>\n<p>The <code>overlays<\/code> argument is a list of <a href=\"services\/SystemUiOverlay-class.html\">SystemUiOverlay<\/a> enum values\ndenoting the overlays to show.<\/p>\n<p>If a particular overlay is unsupported on the platform, enabling or\ndisabling that overlay will be ignored.<\/p>\n<p>The settings here can be overridden by the platform when System UI becomes\nnecessary for functionality.<\/p>\n<p>For example, on Android, when the keyboard becomes visible, it will enable the\nnavigation bar and status bar system UI overlays. When the keyboard is closed,\nAndroid will not restore the previous UI visibility settings, and the UI\nvisibility cannot be changed until 1 second after the keyboard is closed to\nprevent malware locking users from navigation buttons.<\/p>\n<p>To regain \"fullscreen\" after text entry, the UI overlays should be set again\nafter a delay of 1 second. This can be achieved through <a href=\"services\/SystemChrome\/restoreSystemUIOverlays.html\">restoreSystemUIOverlays<\/a>\nor calling this again. Otherwise, the original UI overlay settings will be\nautomatically restored only when the application loses and regains focus.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setEnabledSystemUIOverlays(List&lt;SystemUiOverlay&gt; overlays) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.setEnabledSystemUIOverlays',\n    _stringify(overlays),\n  );\n}<\/code><\/pre>\n    ",
            "href": "services\/SystemChrome\/setEnabledSystemUIOverlays.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "setEnabledSystemUIOverlays",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.SystemChrome",
            "params": [
                {
                    "name": "overlays",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<services.SystemUiOverlay>"
                }
            ]
        },
        {
            "desc": "<p>Specifies the set of orientations the application interface can\nbe displayed in.<\/p>\n<p>The <code>orientation<\/code> argument is a list of <a href=\"services\/DeviceOrientation-class.html\">DeviceOrientation<\/a> enum values.\nThe empty list causes the application to defer to the operating system\ndefault.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; setPreferredOrientations(List&lt;DeviceOrientation&gt; orientations) async {\n  await SystemChannels.platform.invokeMethod&lt;void&gt;(\n    'SystemChrome.setPreferredOrientations',\n    _stringify(orientations),\n  );\n}<\/code><\/pre>\n    ",
            "href": "services\/SystemChrome\/setPreferredOrientations.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "setPreferredOrientations",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.SystemChrome",
            "params": [
                {
                    "name": "orientations",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<services.DeviceOrientation>"
                }
            ]
        },
        {
            "desc": "<p>Specifies the style to use for the system overlays that are visible (if\nany).<\/p>\n<p>This method will schedule the embedder update to be run in a microtask.\nAny subsequent calls to this method during the current event loop will\noverwrite the pending value, such that only the last specified value takes\neffect.<\/p>\n<p>Call this API in code whose lifecycle matches that of the desired\nsystem UI styles. For instance, to change the system UI style on a new\npage, consider calling when pushing\/popping a new <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>.<\/p>\n<p>However, the <a href=\"material\/AppBar-class.html\">AppBar<\/a> widget automatically sets the system overlay style\nbased on its <a href=\"material\/AppBar\/brightness.html\">AppBar.brightness<\/a>, so configure that instead of calling\nthis method directly. Likewise, do the same for <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>\nvia <a href=\"cupertino\/CupertinoNavigationBar\/backgroundColor.html\">CupertinoNavigationBar.backgroundColor<\/a>.<\/p>\n<p>If a particular style is not supported on the platform, selecting it will\nhave no effect.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark);\n  return Placeholder();\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>For more complex control of the system overlay styles, consider using\nan <a href=\"widgets\/AnnotatedRegion-class.html\">AnnotatedRegion<\/a> widget instead of calling <code>setSystemUiOverlayStyle<\/code>\ndirectly. This widget places a value directly into the layer tree where\nit can be hit-tested by the framework. On every frame, the framework will\nhit-test and select the annotated region it finds under the status and\nnavigation bar and synthesize them into a single style. This can be used\nto configure the system styles when an app bar is not used.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nThe following example creates a widget that changes the status bar color\nto a random value on Android.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">import 'package:flutter\/services.dart';\nimport 'dart:math' as math;\n\n\/\/ ...\n\nfinal _random = math.Random();\nSystemUiOverlayStyle _currentStyle = SystemUiOverlayStyle.light;\n\nvoid _changeColor() {\n  final color = Color.fromRGBO(\n    _random.nextInt(255),\n    _random.nextInt(255),\n    _random.nextInt(255),\n    1.0,\n  );\n  setState(() {\n    _currentStyle = SystemUiOverlayStyle.dark.copyWith(\n      statusBarColor: color,\n    );\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  return AnnotatedRegion(\n    value: _currentStyle,\n    child: Center(\n      child: RaisedButton(\n        child: const Text('Change Color'),\n        onPressed: _changeColor,\n       ),\n     ),\n   );\n }<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=services.SystemChrome.setSystemUIOverlayStyle.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for services.SystemChrome.setSystemUIOverlayStyle.2\n\n\/\/ The following example creates a widget that changes the status bar color\n\/\/ to a random value on Android.\n\nimport 'package:flutter\/material.dart';\n\nimport 'package:flutter\/services.dart';\nimport 'dart:math' as math;\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatefulWidget(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  final _random = math.Random();\n  SystemUiOverlayStyle _currentStyle = SystemUiOverlayStyle.light;\n\n  void _changeColor() {\n    final color = Color.fromRGBO(\n      _random.nextInt(255),\n      _random.nextInt(255),\n      _random.nextInt(255),\n      1.0,\n    );\n    setState(() {\n      _currentStyle = SystemUiOverlayStyle.dark.copyWith(\n        statusBarColor: color,\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnnotatedRegion(\n      value: _currentStyle,\n      child: Center(\n        child: RaisedButton(\n          child: const Text('Change Color'),\n          onPressed: _changeColor,\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AnnotatedRegion-class.html\">AnnotatedRegion<\/a>, the widget used to place data into the layer tree.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void setSystemUIOverlayStyle(SystemUiOverlayStyle style) {\n  assert(style != null);\n  if (_pendingStyle != null) {\n    \/\/ The microtask has already been queued; just update the pending value.\n    _pendingStyle = style;\n    return;\n  }\n  if (style == _latestStyle) {\n    \/\/ Trivial success: no microtask has been queued and the given style is\n    \/\/ already in effect, so no need to queue a microtask.\n    return;\n  }\n  _pendingStyle = style;\n  scheduleMicrotask(() {\n    assert(_pendingStyle != null);\n    if (_pendingStyle != _latestStyle) {\n      SystemChannels.platform.invokeMethod&lt;void&gt;(\n        'SystemChrome.setSystemUIOverlayStyle',\n        _pendingStyle._toMap(),\n      );\n      _latestStyle = _pendingStyle;\n    }\n    _pendingStyle = null;\n  });\n}<\/code><\/pre>\n    ",
            "href": "services\/SystemChrome\/setSystemUIOverlayStyle.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "setSystemUIOverlayStyle",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.SystemChrome",
            "params": [
                {
                    "name": "style",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.SystemUiOverlayStyle"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The last style that was set using <a href=\"services\/SystemChrome\/setSystemUIOverlayStyle.html\">SystemChrome.setSystemUIOverlayStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nstatic SystemUiOverlayStyle get latestStyle =&gt; _latestStyle;<\/code><\/pre>\n        ",
            "href": "services\/SystemChrome\/latestStyle.html",
            "name": "latestStyle",
            "isDeprecated": false,
            "type": "services.SystemUiOverlayStyle",
            "memberOf": "services.SystemChrome",
            "params": []
        }
    ]
}