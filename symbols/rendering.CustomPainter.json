{
    "desc": "<p>The interface used by <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> (in the widgets library) and\n<a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> (in the rendering library).<\/p>\n<p>To implement a custom painter, either subclass or implement this interface\nto define your custom paint delegate. <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> subclasses must\nimplement the <a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> and <a href=\"rendering\/CustomPainter\/shouldRepaint.html\">shouldRepaint<\/a> methods, and may optionally also\nimplement the <a href=\"rendering\/CustomPainter\/hitTest.html\">hitTest<\/a> and <a href=\"rendering\/CustomPainter\/shouldRebuildSemantics.html\">shouldRebuildSemantics<\/a> methods, and the\n<a href=\"rendering\/CustomPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> getter.<\/p>\n<p>The <a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> method is called whenever the custom object needs to be repainted.<\/p>\n<p>The <a href=\"rendering\/CustomPainter\/shouldRepaint.html\">shouldRepaint<\/a> method is called when a new instance of the class\nis provided, to check if the new instance actually represents different\ninformation.<\/p>\n<p>The most efficient way to trigger a repaint is to either:<\/p>\n<ul>\n<li>Extend this class and supply a <code>repaint<\/code> argument to the constructor of\nthe <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>, where that object notifies its listeners when it is\ntime to repaint.<\/li>\n<li>Extend <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> (e.g. via <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a>) and implement\n<a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>, so that the object itself provides the notifications\ndirectly.<\/li>\n<\/ul>\n<p>In either case, the <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> widget or <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a>\nrender object will listen to the <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> and repaint whenever the\nanimation ticks, avoiding both the build and layout phases of the pipeline.<\/p>\n<p>The <a href=\"rendering\/CustomPainter\/hitTest.html\">hitTest<\/a> method is called when the user interacts with the underlying\nrender object, to determine if the user hit the object or missed it.<\/p>\n<p>The <a href=\"rendering\/CustomPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> is called whenever the custom object needs to rebuild\nits semantics information.<\/p>\n<p>The <a href=\"rendering\/CustomPainter\/shouldRebuildSemantics.html\">shouldRebuildSemantics<\/a> method is called when a new instance of the\nclass is provided, to check if the new instance contains different\ninformation that affects the semantics tree.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample extends the same code shown for <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> to create a\ncustom painter that paints a sky.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Sky extends CustomPainter {\n  @override\n  void paint(Canvas canvas, Size size) {\n    var rect = Offset.zero &amp; size;\n    var gradient = RadialGradient(\n      center: const Alignment(0.7, -0.6),\n      radius: 0.2,\n      colors: [const Color(0xFFFFFF00), const Color(0xFF0099FF)],\n      stops: [0.4, 1.0],\n    );\n    canvas.drawRect(\n      rect,\n      Paint()..shader = gradient.createShader(rect),\n    );\n  }\n\n  @override\n  SemanticsBuilderCallback get semanticsBuilder {\n    return (Size size) {\n      \/\/ Annotate a rectangle containing the picture of the sun\n      \/\/ with the label \"Sun\". When text to speech feature is enabled on the\n      \/\/ device, a user will be able to locate the sun on this picture by\n      \/\/ touch.\n      var rect = Offset.zero &amp; size;\n      var width = size.shortestSide * 0.4;\n      rect = const Alignment(0.8, -0.9).inscribe(Size(width, width), rect);\n      return [\n        CustomPainterSemantics(\n          rect: rect,\n          properties: SemanticsProperties(\n            label: 'Sun',\n            textDirection: TextDirection.ltr,\n          ),\n        ),\n      ];\n    };\n  }\n\n  \/\/ Since this Sky painter has no fields, it always paints\n  \/\/ the same thing and semantics information is the same.\n  \/\/ Therefore we return false here. If we had fields (set\n  \/\/ from the constructor) then we would return true if any\n  \/\/ of them differed from the same fields on the oldDelegate.\n  @override\n  bool shouldRepaint(Sky oldDelegate) =&gt; false;\n  @override\n  bool shouldRebuildSemantics(Sky oldDelegate) =&gt; false;\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, the class that a custom painter uses to paint.<\/li>\n<li>\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a>, the widget that uses <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>, and whose sample\ncode shows how to use the above <code>Sky<\/code> class.<\/li>\n<li>\n<a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, whose sample code section shows a different take\non the sample code above.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "rendering\/CustomPainter-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.CustomPainter",
    "shortname": "CustomPainter",
    "extends": [
        "foundation.Listenable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Returns a function that builds semantic information for the picture drawn\nby this painter.<\/p>\n<p>If the returned function is null, this painter will not contribute new\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s to the semantics tree and the <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> corresponding\nto this painter will not create a semantics boundary. However, if\n<code>CustomPaint.child<\/code> is not null, the child may contribute <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s\nto the tree.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">SemanticsConfiguration.isSemanticBoundary<\/a>, which causes new\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s to be added to the semantics tree.<\/li>\n<li>\n<a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a>, which uses this getter to build semantics.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsBuilderCallback get semanticsBuilder =&gt; null;<\/code><\/pre>\n        ",
            "href": "rendering\/CustomPainter\/semanticsBuilder.html",
            "isDeprecated": "0",
            "type": "rendering.SemanticsBuilderCallback",
            "memberOf": "rendering.CustomPainter",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a custom painter.<\/p>\n<p>The painter will repaint whenever <code>repaint<\/code> notifies its listeners.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CustomPainter({ Listenable repaint }) : _repaint = repaint;<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/CustomPainter.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "repaint",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Listenable"
                }
            ]
        },
        {
            "desc": "<p>Register a closure to be notified when it is time to repaint.<\/p>\n<p>The <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> implementation merely forwards to the same method on\nthe <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> provided to the constructor in the <code>repaint<\/code> argument, if\nit was not null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener) =&gt; _repaint?.addListener(listener);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/addListener.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "listener",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a hit test is being performed on an object that is using\nthis custom paint delegate.<\/p>\n<p>The given point is relative to the same coordinate space as the last\n<a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> call.<\/p>\n<p>The default behavior is to consider all points to be hits for\nbackground painters, and no points to be hits for foreground painters.<\/p>\n<p>Return true if the given position corresponds to a point on the drawn\nimage that should be considered a \"hit\", false if it corresponds to a\npoint that should be considered outside the painted image, and null to use\nthe default behavior.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hitTest(Offset position) =&gt; null;<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/hitTest.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Called whenever the object needs to paint. The given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> has its\ncoordinate space configured such that the origin is at the top left of the\nbox. The area of the box is the size of the <code>size<\/code> argument.<\/p>\n<p>Paint operations should remain inside the given area. Graphical operations\noutside the bounds may be silently ignored, clipped, or not clipped.<\/p>\n<p>Implementations should be wary of correctly pairing any calls to\n<a href=\"dart-ui\/Canvas\/save.html\">Canvas.save<\/a>\/<a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a>, otherwise all\nsubsequent painting on this canvas may be affected, with potentially\nhilarious but confusing results.<\/p>\n<p>To paint text on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>.<\/p>\n<p>To paint an image on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>:<\/p>\n<ol>\n<li>\n<p>Obtain an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>, for example by calling <a href=\"painting\/ImageProvider\/resolve.html\">ImageProvider.resolve<\/a>\non an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> or <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a> object.<\/p>\n<\/li>\n<li>\n<p>Whenever the <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>'s underlying <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object changes\n(see <a href=\"rendering\/CustomPainter\/addListener.html\">ImageStream.addListener<\/a>), create a new instance of your custom\npaint delegate, giving it the new <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object.<\/p>\n<\/li>\n<li>\n<p>In your delegate's <a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> method, call the <a href=\"dart-ui\/Canvas\/drawImage.html\">Canvas.drawImage<\/a>,\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>, or <a href=\"dart-ui\/Canvas\/drawImageNine.html\">Canvas.drawImageNine<\/a> methods to paint the\n<a href=\"painting\/ImageInfo\/image.html\">ImageInfo.image<\/a> object, applying the <a href=\"painting\/ImageInfo\/scale.html\">ImageInfo.scale<\/a> value to\nobtain the correct rendering size.<\/p>\n<\/li>\n<\/ol>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Size size);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "canvas",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "size",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Remove a previously registered closure from the list of closures that the\nobject notifies when it is time to repaint.<\/p>\n<p>The <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> implementation merely forwards to the same method on\nthe <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> provided to the constructor in the <code>repaint<\/code> argument, if\nit was not null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener) =&gt; _repaint?.removeListener(listener);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/removeListener.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "listener",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a new instance of the custom painter delegate class is\nprovided to the <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> object, or any time that a new\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> object is created with a new instance of the custom painter\ndelegate class (which amounts to the same thing, because the latter is\nimplemented in terms of the former).<\/p>\n<p>If the new instance would cause <a href=\"rendering\/CustomPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> to create different\nsemantics information, then this method should return true, otherwise it\nshould return false.<\/p>\n<p>If the method returns false, then the <a href=\"rendering\/CustomPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> call might be\noptimized away.<\/p>\n<p>It's possible that the <a href=\"rendering\/CustomPainter\/semanticsBuilder.html\">semanticsBuilder<\/a> will get called even if\n<a href=\"rendering\/CustomPainter\/shouldRebuildSemantics.html\">shouldRebuildSemantics<\/a> would return false. For example, it is called\nwhen the <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> is rendered for the very first time, or when the\nbox changes its size.<\/p>\n<p>By default this method delegates to <a href=\"rendering\/CustomPainter\/shouldRepaint.html\">shouldRepaint<\/a> under the assumption\nthat in most cases semantics change when something new is drawn.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldRebuildSemantics(covariant CustomPainter oldDelegate) =&gt; shouldRepaint(oldDelegate);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/shouldRebuildSemantics.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.CustomPainter"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a new instance of the custom painter delegate class is\nprovided to the <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> object, or any time that a new\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> object is created with a new instance of the custom painter\ndelegate class (which amounts to the same thing, because the latter is\nimplemented in terms of the former).<\/p>\n<p>If the new instance represents different information than the old\ninstance, then the method should return true, otherwise it should return\nfalse.<\/p>\n<p>If the method returns false, then the <a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> call might be optimized\naway.<\/p>\n<p>It's possible that the <a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> method will get called even if\n<a href=\"rendering\/CustomPainter\/shouldRepaint.html\">shouldRepaint<\/a> returns false (e.g. if an ancestor or descendant needed to\nbe repainted). It's also possible that the <a href=\"rendering\/CustomPainter\/paint.html\">paint<\/a> method will get called\nwithout <a href=\"rendering\/CustomPainter\/shouldRepaint.html\">shouldRepaint<\/a> being called at all (e.g. if the box changes\nsize).<\/p>\n<p>If a custom delegate has a particularly expensive paint function such that\nrepaints should be avoided as much as possible, a <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> or\n<a href=\"rendering\/RenderRepaintBoundary-class.html\">RenderRepaintBoundary<\/a> (or other render object with\n<a href=\"rendering\/RenderObject\/isRepaintBoundary.html\">RenderObject.isRepaintBoundary<\/a> set to true) might be helpful.<\/p>\n<p>The <code>oldDelegate<\/code> argument will never be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldRepaint(covariant CustomPainter oldDelegate);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/shouldRepaint.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.CustomPainter"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}(${ _repaint?.toString() ?? \"\" })';<\/code><\/pre>\n    ",
            "href": "rendering\/CustomPainter\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomPainter",
            "params": []
        }
    ],
    "props": []
}