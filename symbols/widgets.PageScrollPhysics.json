{
    "desc": "<p>Scroll physics used by a <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n<p>These physics cause the page view to snap to page boundaries.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a>, the base class which defines the API for scrolling\nphysics.<\/li>\n<li>\n<a href=\"widgets\/PageView\/physics.html\">PageView.physics<\/a>, which can override the physics used by a page view.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/PageScrollPhysics-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.PageScrollPhysics",
    "shortname": "PageScrollPhysics",
    "extends": [
        "widgets.ScrollPhysics",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates physics for a <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PageScrollPhysics({ ScrollPhysics parent }) : super(parent: parent);<\/code><\/pre>\n    ",
            "href": "widgets\/PageScrollPhysics\/PageScrollPhysics.html",
            "isDeprecated": false,
            "type": "",
            "name": "PageScrollPhysics",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.PageScrollPhysics",
            "params": [
                {
                    "name": "parent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> where the <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> has been replaced with the <code>ancestor<\/code>.<\/p>\n<p>If this scroll physics object already has a parent, then this method\nis applied recursively and ancestor will appear at the end of the\nexisting chain of parents.<\/p>\n<p>The returned object will combine some of the behaviors from this\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> instance and some of the behaviors from <code>ancestor<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPhysics\/buildParent.html\">buildParent<\/a>, a utility method that's often used to define <a href=\"widgets\/PageScrollPhysics\/applyTo.html\">applyTo<\/a>\nmethods for ScrollPhysics subclasses.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPageScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return PageScrollPhysics(parent: buildParent(ancestor));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/PageScrollPhysics\/applyTo.html",
            "isDeprecated": false,
            "type": "widgets.PageScrollPhysics",
            "name": "applyTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.PageScrollPhysics",
            "params": [
                {
                    "name": "ancestor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Returns a simulation for ballistic scrolling starting from the given\nposition with the given velocity.<\/p>\n<p>This is used by <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> in the\n<a href=\"widgets\/ScrollPositionWithSingleContext\/goBallistic.html\">ScrollPositionWithSingleContext.goBallistic<\/a> method. If the result\nis non-null, <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> will begin a\n<a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a> with the returned value. Otherwise, it will\nbegin an idle activity instead.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSimulation createBallisticSimulation(ScrollMetrics position, double velocity) {\n  \/\/ If we're out of range and not headed back in range, defer to the parent\n  \/\/ ballistics, which should put us back in range at a page boundary.\n  if ((velocity &lt;= 0.0 &amp;&amp; position.pixels &lt;= position.minScrollExtent) ||\n      (velocity &gt;= 0.0 &amp;&amp; position.pixels &gt;= position.maxScrollExtent))\n    return super.createBallisticSimulation(position, velocity);\n  final Tolerance tolerance = this.tolerance;\n  final double target = _getTargetPixels(position, tolerance, velocity);\n  if (target != position.pixels)\n    return ScrollSpringSimulation(spring, position.pixels, target, velocity, tolerance: tolerance);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/PageScrollPhysics\/createBallisticSimulation.html",
            "isDeprecated": false,
            "type": "physics.Simulation",
            "name": "createBallisticSimulation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.PageScrollPhysics",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                },
                {
                    "name": "velocity",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether a viewport is allowed to change its scroll position implicitly in\nresponds to a call to <a href=\"rendering\/RenderObject\/showOnScreen.html\">RenderObject.showOnScreen<\/a>.<\/p>\n<p><a href=\"rendering\/RenderObject\/showOnScreen.html\">RenderObject.showOnScreen<\/a> is for example used to bring a text field\nfully on screen after it has received focus. This property controls\nwhether the viewport associated with this object is allowed to change the\nscroll position to fulfill such a request.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get allowImplicitScrolling =&gt; false;<\/code><\/pre>\n        ",
            "href": "widgets\/PageScrollPhysics\/allowImplicitScrolling.html",
            "name": "allowImplicitScrolling",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.PageScrollPhysics",
            "params": []
        }
    ]
}