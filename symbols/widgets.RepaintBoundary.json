{
    "desc": "<p>A widget that creates a separate display list for its child.<\/p>\n<p>This widget creates a separate display list for its child, which\ncan improve performance if the subtree repaints at different times than\nthe surrounding parts of the tree.<\/p>\n<p>This is useful since <a href=\"rendering\/RenderObject\/paint.html\">RenderObject.paint<\/a> may be triggered even if its\nassociated <a href=\"widgets\/Widget-class.html\">Widget<\/a> instances did not change or rebuild. A <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nwill repaint whenever any <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> that shares the same <a href=\"rendering\/Layer-class.html\">Layer<\/a> is\nmarked as being dirty and needing paint (see <a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a>),\nsuch as when an ancestor scrolls or when an ancestor or descendant animates.<\/p>\n<p>Containing <a href=\"rendering\/RenderObject\/paint.html\">RenderObject.paint<\/a> to parts of the render subtree that are\nactually visually changing using <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> explicitly or implicitly\nis therefore critical to minimizing redundant work and improving the app's\nperformance.<\/p>\n<p>When a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is flagged as needing to paint via\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a>, the nearest ancestor <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> with\n<a href=\"rendering\/RenderObject\/isRepaintBoundary.html\">RenderObject.isRepaintBoundary<\/a>, up to possibly the root of the application,\nis requested to repaint. That nearest ancestor's <a href=\"rendering\/RenderObject\/paint.html\">RenderObject.paint<\/a> method\nwill cause <em>all<\/em> of its descendant <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s to repaint in the same\nlayer.<\/p>\n<p><a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> is therefore used, both while propagating the\n<code>markNeedsPaint<\/code> flag up the render tree and while traversing down the\nrender tree via <code>RenderObject.paintChild<\/code>, to strategically contain repaints\nto the render subtree that visually changed for performance. This is done\nbecause the <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> widget creates a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> that always\nhas a <a href=\"rendering\/Layer-class.html\">Layer<\/a>, decoupling ancestor render objects from the descendant\nrender objects.<\/p>\n<p><a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> has the further side-effect of possibly hinting to the\nengine that it should further optimize animation performance if the render\nsubtree behind the <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> is sufficiently complex and is static\nwhile the surrounding tree changes frequently. In those cases, the engine\nmay choose to pay a one time cost of rasterizing and caching the pixel\nvalues of the subtree for faster future GPU re-rendering speed.<\/p>\n<p>Several framework widgets insert <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> widgets to mark natural\nseparation points in applications. For instance, contents in Material Design\ndrawers typically don't change while the drawer opens and closes, so\nrepaints are automatically contained to regions inside or outside the drawer\nwhen using the <a href=\"material\/Drawer-class.html\">Drawer<\/a> widget during transitions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/debugRepaintRainbowEnabled.html\">debugRepaintRainbowEnabled<\/a>, a debugging flag to help visually monitor\nrender tree repaints in a running app.<\/li>\n<li>\n<a href=\"rendering\/debugProfilePaintsEnabled.html\">debugProfilePaintsEnabled<\/a>, a debugging flag to show render tree\nrepaints in the observatory's timeline view.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/RepaintBoundary-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.RepaintBoundary",
    "shortname": "RepaintBoundary",
    "extends": [
        "widgets.SingleChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that isolates repaints.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RepaintBoundary({ Key key, Widget child }) : super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "widgets\/RepaintBoundary\/RepaintBoundary.html",
            "isDeprecated": false,
            "type": "",
            "name": "RepaintBoundary",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.RepaintBoundary",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderRepaintBoundary createRenderObject(BuildContext context) =&gt; RenderRepaintBoundary();<\/code><\/pre>\n    ",
            "href": "widgets\/RepaintBoundary\/createRenderObject.html",
            "isDeprecated": false,
            "type": "rendering.RenderRepaintBoundary",
            "name": "createRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RepaintBoundary",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Wraps each of the given children in <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a>s.<\/p>\n<p>The key for each <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> is derived either from the wrapped\nchild's key (if the wrapped child has a non-null key) or from the wrapped\nchild's index in the list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;RepaintBoundary&gt; wrapAll(List&lt;Widget&gt; widgets) {\n  final List&lt;RepaintBoundary&gt; result = List&lt;RepaintBoundary&gt;(widgets.length);\n  for (int i = 0; i &lt; result.length; ++i)\n    result[i] = RepaintBoundary.wrap(widgets[i], i);\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/RepaintBoundary\/wrapAll.html",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.RepaintBoundary>",
            "name": "wrapAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RepaintBoundary",
            "params": [
                {
                    "name": "widgets",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<widgets.Widget>"
                }
            ]
        }
    ],
    "props": []
}