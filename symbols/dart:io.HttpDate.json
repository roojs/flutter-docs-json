{
    "desc": "<p>Utility functions for working with dates with HTTP specific date\nformats.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/HttpDate-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.HttpDate",
    "shortname": "HttpDate",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-io\/HttpDate\/HttpDate.html",
            "isDeprecated": "0",
            "type": "",
            "name": "HttpDate",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.HttpDate",
            "params": []
        },
        {
            "desc": "<p>Format a date according to\n<a href=\"http:\/\/tools.ietf.org\/html\/rfc1123\" title=\"RFC-1123\">RFC-1123<\/a>,\ne.g. <code>Thu, 1 Jan 1970 00:00:00 GMT<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String format(DateTime date) {\n  const List wkday = const [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const List month = const [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n\n  DateTime d = date.toUtc();\n  StringBuffer sb = new StringBuffer()\n    ..write(wkday[d.weekday - 1])\n    ..write(\", \")\n    ..write(d.day &lt;= 9 ? \"0\" : \"\")\n    ..write(d.day.toString())\n    ..write(\" \")\n    ..write(month[d.month - 1])\n    ..write(\" \")\n    ..write(d.year.toString())\n    ..write(d.hour &lt;= 9 ? \" 0\" : \" \")\n    ..write(d.hour.toString())\n    ..write(d.minute &lt;= 9 ? \":0\" : \":\")\n    ..write(d.minute.toString())\n    ..write(d.second &lt;= 9 ? \":0\" : \":\")\n    ..write(d.second.toString())\n    ..write(\" GMT\");\n  return sb.toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/HttpDate\/format.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "format",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.HttpDate",
            "params": [
                {
                    "name": "date",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Parse a date string in either of the formats\n<a href=\"http:\/\/tools.ietf.org\/html\/rfc1123\" title=\"RFC-1123\">RFC-1123<\/a>,\n<a href=\"http:\/\/tools.ietf.org\/html\/rfc850\" title=\"RFC-850\">RFC-850<\/a> or\nANSI C's asctime() format. These formats are listed here.<\/p>\n<pre class=\"language-dart\"><code>Thu, 1 Jan 1970 00:00:00 GMT\nThursday, 1-Jan-1970 00:00:00 GMT\nThu Jan  1 00:00:00 1970\n<\/code><\/pre>\n<p>For more information see <a href=\"http:\/\/tools.ietf.org\/html\/rfc2616#section-3.3.1\" title=\"RFC-2616 section 3.1.1\">RFC-2616 section\n3.1.1<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static DateTime parse(String date) {\n  final int SP = 32;\n  const List wkdays = const [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const List weekdays = const [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n  ];\n  const List months = const [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n  const List wkdaysLowerCase = const [\n    \"mon\",\n    \"tue\",\n    \"wed\",\n    \"thu\",\n    \"fri\",\n    \"sat\",\n    \"sun\"\n  ];\n  const List weekdaysLowerCase = const [\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n    \"sunday\"\n  ];\n  const List monthsLowerCase = const [\n    \"jan\",\n    \"feb\",\n    \"mar\",\n    \"apr\",\n    \"may\",\n    \"jun\",\n    \"jul\",\n    \"aug\",\n    \"sep\",\n    \"oct\",\n    \"nov\",\n    \"dec\"\n  ];\n\n  final int formatRfc1123 = 0;\n  final int formatRfc850 = 1;\n  final int formatAsctime = 2;\n\n  int index = 0;\n  String tmp;\n  int format;\n\n  void expect(String s) {\n    if (date.length - index &lt; s.length) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n    String tmp = date.substring(index, index + s.length);\n    if (tmp != s) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n    index += s.length;\n  }\n\n  int expectWeekday() {\n    int weekday;\n    \/\/ The formatting of the weekday signals the format of the date string.\n    int pos = date.indexOf(\",\", index);\n    if (pos == -1) {\n      int pos = date.indexOf(\" \", index);\n      if (pos == -1) throw new HttpException(\"Invalid HTTP date $date\");\n      tmp = date.substring(index, pos);\n      index = pos + 1;\n      weekday = wkdays.indexOf(tmp);\n      if (weekday != -1) {\n        format = formatAsctime;\n        return weekday;\n      }\n    } else {\n      tmp = date.substring(index, pos);\n      index = pos + 1;\n      weekday = wkdays.indexOf(tmp);\n      if (weekday != -1) {\n        format = formatRfc1123;\n        return weekday;\n      }\n      weekday = weekdays.indexOf(tmp);\n      if (weekday != -1) {\n        format = formatRfc850;\n        return weekday;\n      }\n    }\n    throw new HttpException(\"Invalid HTTP date $date\");\n  }\n\n  int expectMonth(String separator) {\n    int pos = date.indexOf(separator, index);\n    if (pos - index != 3) throw new HttpException(\"Invalid HTTP date $date\");\n    tmp = date.substring(index, pos);\n    index = pos + 1;\n    int month = months.indexOf(tmp);\n    if (month != -1) return month;\n    throw new HttpException(\"Invalid HTTP date $date\");\n  }\n\n  int expectNum(String separator) {\n    int pos;\n    if (separator.length &gt; 0) {\n      pos = date.indexOf(separator, index);\n    } else {\n      pos = date.length;\n    }\n    String tmp = date.substring(index, pos);\n    index = pos + separator.length;\n    try {\n      int value = int.parse(tmp);\n      return value;\n    } on FormatException catch (e) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n  }\n\n  void expectEnd() {\n    if (index != date.length) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n  }\n\n  int weekday = expectWeekday();\n  int day;\n  int month;\n  int year;\n  int hours;\n  int minutes;\n  int seconds;\n  if (format == formatAsctime) {\n    month = expectMonth(\" \");\n    if (date.codeUnitAt(index) == SP) index++;\n    day = expectNum(\" \");\n    hours = expectNum(\":\");\n    minutes = expectNum(\":\");\n    seconds = expectNum(\" \");\n    year = expectNum(\"\");\n  } else {\n    expect(\" \");\n    day = expectNum(format == formatRfc1123 ? \" \" : \"-\");\n    month = expectMonth(format == formatRfc1123 ? \" \" : \"-\");\n    year = expectNum(\" \");\n    hours = expectNum(\":\");\n    minutes = expectNum(\":\");\n    seconds = expectNum(\" \");\n    expect(\"GMT\");\n  }\n  expectEnd();\n  return new DateTime.utc(year, month + 1, day, hours, minutes, seconds, 0);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/HttpDate\/parse.html",
            "isDeprecated": "0",
            "type": "dart:core.DateTime",
            "name": "parse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.HttpDate",
            "params": [
                {
                    "name": "date",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": []
}