{
    "name": "widgets.StreamBuilderBase",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "StreamBuilderBase",
            "type": "",
            "desc": "<p>Creates a <a href=\"widgets\/StreamBuilderBase-class.html\">StreamBuilderBase<\/a> connected to the specified <code>stream<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stream",
                    "type": "dart:async.Stream",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/StreamBuilderBase\/StreamBuilderBase.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StreamBuilderBase({ Key key, this.stream }) : super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "afterConnected",
            "type": "",
            "desc": "<p>Returns an updated version of the <code>current<\/code> summary reflecting that we\nare now connected to a stream.<\/p>\n<p>The default implementation returns <code>current<\/code> as is.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "current",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/afterConnected.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S afterConnected(S current) =&gt; current;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "afterData",
            "type": "",
            "desc": "<p>Returns an updated version of the <code>current<\/code> summary following a data event.<\/p>\n<p>Sub-classes must override this method to specify how the current summary\nis combined with the new data item in the fold computation.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "current",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "data",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/afterData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S afterData(S current, T data);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "afterDisconnected",
            "type": "",
            "desc": "<p>Returns an updated version of the <code>current<\/code> summary reflecting that we\nare no longer connected to a stream.<\/p>\n<p>The default implementation returns <code>current<\/code> as is.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "current",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/afterDisconnected.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S afterDisconnected(S current) =&gt; current;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "afterDone",
            "type": "",
            "desc": "<p>Returns an updated version of the <code>current<\/code> summary following stream\ntermination.<\/p>\n<p>The default implementation returns <code>current<\/code> as is.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "current",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/afterDone.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S afterDone(S current) =&gt; current;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "afterError",
            "type": "",
            "desc": "<p>Returns an updated version of the <code>current<\/code> summary following an error.<\/p>\n<p>The default implementation returns <code>current<\/code> as is.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "current",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "error",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/afterError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S afterError(S current, Object error) =&gt; current;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Returns a Widget based on the <code>currentSummary<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "currentSummary",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context, S currentSummary);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "widgets.State<widgets.StreamBuilderBase>",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/StreamBuilderBase\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;StreamBuilderBase&lt;T, S&gt;&gt; createState() =&gt; _StreamBuilderBaseState&lt;T, S&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "widgets.State",
                "widgets.StreamBuilderBase"
            ]
        },
        {
            "name": "initial",
            "type": "",
            "desc": "<p>Returns the initial summary of stream interaction, typically representing\nthe fact that no interaction has happened at all.<\/p>\n<p>Sub-classes must override this method to provide the initial value for\nthe fold computation.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StreamBuilderBase",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/StreamBuilderBase\/initial.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">S initial();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "stream",
            "type": "dart:async.Stream",
            "types": [],
            "desc": "<p>The asynchronous computation to which this builder is currently connected,\npossibly null. When changed, the current summary is updated using\n<a href=\"widgets\/StreamBuilderBase\/afterDisconnected.html\">afterDisconnected<\/a>, if the previous stream was not null, followed by\n<a href=\"widgets\/StreamBuilderBase\/afterConnected.html\">afterConnected<\/a>, if the new stream is not null.<\/p>\n        ",
            "memberOf": "widgets.StreamBuilderBase",
            "isConstant": false,
            "href": "widgets\/StreamBuilderBase\/stream.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Stream&lt;T&gt; stream\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "widgets.StreamBuilder"
    ],
    "realImplementors": [
        "widgets.StreamBuilder"
    ],
    "cn": [],
    "href": "widgets\/StreamBuilderBase-class.html",
    "desc": "<p>Base class for widgets that build themselves based on interaction with\na specified <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/p>\n<p>A <a href=\"widgets\/StreamBuilderBase-class.html\">StreamBuilderBase<\/a> is stateful and maintains a summary of the interaction\nso far. The type of the summary and how it is updated with each interaction\nis defined by sub-classes.<\/p>\n<p>Examples of summaries include:<\/p>\n<ul>\n<li>the running average of a stream of integers;<\/li>\n<li>the current direction and speed based on a stream of geolocation data;<\/li>\n<li>a graph displaying data points from a stream.<\/li>\n<\/ul>\n<p>In general, the summary is the result of a fold computation over the data\nitems and errors received from the stream along with pseudo-events\nrepresenting termination or change of stream. The initial summary is\nspecified by sub-classes by overriding <a href=\"widgets\/StreamBuilderBase\/initial.html\">initial<\/a>. The summary updates on\nreceipt of stream data and errors are specified by overriding <a href=\"widgets\/StreamBuilderBase\/afterData.html\">afterData<\/a> and\n<a href=\"widgets\/StreamBuilderBase\/afterError.html\">afterError<\/a>, respectively. If needed, the summary may be updated on stream\ntermination by overriding <a href=\"widgets\/StreamBuilderBase\/afterDone.html\">afterDone<\/a>. Finally, the summary may be updated\non change of stream by overriding <a href=\"widgets\/StreamBuilderBase\/afterDisconnected.html\">afterDisconnected<\/a> and <a href=\"widgets\/StreamBuilderBase\/afterConnected.html\">afterConnected<\/a>.<\/p>\n<p><code>T<\/code> is the type of stream events.<\/p>\n<p><code>S<\/code> is the type of interaction summary.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StreamBuilder-class.html\">StreamBuilder<\/a>, which is specialized for the case where only the most\nrecent interaction is needed for widget building.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StreamBuilderBase"
}