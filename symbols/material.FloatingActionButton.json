{
    "desc": "<p>A material design floating action button.<\/p>\n<p>A floating action button is a circular icon button that hovers over content\nto promote a primary action in the application. Floating action buttons are\nmost commonly used in the <a href=\"material\/Scaffold\/floatingActionButton.html\">Scaffold.floatingActionButton<\/a> field.<\/p>\n<p>Use at most a single floating action button per screen. Floating action\nbuttons should be used for positive actions such as \"create\", \"share\", or\n\"navigate\". (If more than one floating action button is used within a\n<a href=\"widgets\/Route-class.html\">Route<\/a>, then make sure that each button has a unique <a href=\"material\/FloatingActionButton\/heroTag.html\">heroTag<\/a>, otherwise\nan exception will be thrown.)<\/p>\n<p>If the <a href=\"material\/FloatingActionButton\/onPressed.html\">onPressed<\/a> callback is null, then the button will be disabled and\nwill not react to touch. It is highly discouraged to disable a floating\naction button as there is no indication to the user that the button is\ndisabled. Consider changing the <a href=\"material\/FloatingActionButton\/backgroundColor.html\">backgroundColor<\/a> if disabling the floating\naction button.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example shows how to make a simple <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> in a\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, with a pink <a href=\"material\/FloatingActionButton\/backgroundColor.html\">backgroundColor<\/a> and a thumbs up <a href=\"widgets\/Icon-class.html\">Icon<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Floating Action Button Sample'),\n    ),\n    body: Center(\n      child: Text('Press the button below!')\n    ),\n    floatingActionButton: FloatingActionButton(\n      onPressed: () {\n        \/\/ Add your onPressed code here!\n      },\n      child: Icon(Icons.thumb_up),\n      backgroundColor: Colors.pink,\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.FloatingActionButton.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.FloatingActionButton.1\n\n\/\/ This example shows how to make a simple [FloatingActionButton] in a\n\/\/ [Scaffold], with a pink [backgroundColor] and a thumbs up [Icon].\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatelessWidget(),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Floating Action Button Sample'),\n      ),\n      body: Center(child: Text('Press the button below!')),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          \/\/ Add your onPressed code here!\n        },\n        child: Icon(Icons.thumb_up),\n        backgroundColor: Colors.pink,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nThis example shows how to make an extended <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> in a\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, with a  pink <a href=\"material\/FloatingActionButton\/backgroundColor.html\">backgroundColor<\/a> and a thumbs up <a href=\"widgets\/Icon-class.html\">Icon<\/a> and a\n<a href=\"widgets\/Text-class.html\">Text<\/a> label.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Floating Action Button Sample'),\n    ),\n    body: Center(\n      child: Text('Press the extended button below!'),\n    ),\n    floatingActionButton: FloatingActionButton.extended(\n      onPressed: () {\n        \/\/ Add your onPressed code here!\n      },\n      label: Text('Approve'),\n      icon: Icon(Icons.thumb_up),\n      backgroundColor: Colors.pink,\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.FloatingActionButton.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.FloatingActionButton.2\n\n\/\/ This example shows how to make an extended [FloatingActionButton] in a\n\/\/ [Scaffold], with a  pink [backgroundColor] and a thumbs up [Icon] and a\n\/\/ [Text] label.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatelessWidget(),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Floating Action Button Sample'),\n      ),\n      body: Center(\n        child: Text('Press the extended button below!'),\n      ),\n      floatingActionButton: FloatingActionButton.extended(\n        onPressed: () {\n          \/\/ Add your onPressed code here!\n        },\n        label: Text('Approve'),\n        icon: Icon(Icons.thumb_up),\n        backgroundColor: Colors.pink,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, in which floating action buttons typically live.<\/li>\n<li>\n<a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, another kind of button that appears to float above the\ncontent.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/buttons-floating-action-button.html\">material.io\/design\/components\/buttons-floating-action-button.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/FloatingActionButton-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.FloatingActionButton",
    "shortname": "FloatingActionButton",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>The callback that is called when the button is tapped or otherwise activated.<\/p>\n<p>If this is set to null, the button will be disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/onPressed.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "material.FloatingActionButton",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a circular floating action button.<\/p>\n<p>The <code>mini<\/code> and <code>clipBehavior<\/code> arguments must be non-null. Additionally,\n<code>elevation<\/code>, <code>highlightElevation<\/code>, and <code>disabledElevation<\/code> (if specified)\nmust be non-negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FloatingActionButton({\n  Key key,\n  this.child,\n  this.tooltip,\n  this.foregroundColor,\n  this.backgroundColor,\n  this.heroTag = const _DefaultHeroTag(),\n  this.elevation,\n  this.highlightElevation,\n  this.disabledElevation,\n  @required this.onPressed,\n  this.mini = false,\n  this.shape,\n  this.clipBehavior = Clip.none,\n  this.materialTapTargetSize,\n  this.isExtended = false,\n}) : assert(elevation == null || elevation &gt;= 0.0),\n     assert(highlightElevation == null || highlightElevation &gt;= 0.0),\n     assert(disabledElevation == null || disabledElevation &gt;= 0.0),\n     assert(mini != null),\n     assert(isExtended != null),\n     _sizeConstraints = mini ? _kMiniSizeConstraints : _kSizeConstraints,\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/FloatingActionButton\/FloatingActionButton.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.FloatingActionButton",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "disabledElevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "foregroundColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "heroTag",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "highlightElevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "isExtended",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "mini",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onPressed",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "tooltip",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/FloatingActionButton\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final ThemeData theme = Theme.of(context);\n  final FloatingActionButtonThemeData floatingActionButtonTheme = theme.floatingActionButtonTheme;\n\n  final Color backgroundColor = this.backgroundColor\n    ?? floatingActionButtonTheme.backgroundColor\n    ?? theme.colorScheme.secondary;\n  final Color foregroundColor = this.foregroundColor\n    ?? floatingActionButtonTheme.foregroundColor\n    ?? theme.accentIconTheme.color\n    ?? theme.colorScheme.onSecondary;\n  final double elevation = this.elevation\n    ?? floatingActionButtonTheme.elevation\n    ?? _defaultElevation;\n  final double disabledElevation = this.disabledElevation\n    ?? floatingActionButtonTheme.disabledElevation\n    ?? elevation;\n  final double highlightElevation = this.highlightElevation\n    ?? floatingActionButtonTheme.highlightElevation\n    ?? _defaultHighlightElevation;\n  final MaterialTapTargetSize materialTapTargetSize = this.materialTapTargetSize\n    ?? theme.materialTapTargetSize;\n  final TextStyle textStyle = theme.accentTextTheme.button.copyWith(\n    color: foregroundColor,\n    letterSpacing: 1.2,\n  );\n  final ShapeBorder shape = this.shape\n    ?? floatingActionButtonTheme.shape\n    ?? (isExtended ? _defaultExtendedShape : _defaultShape);\n\n  Widget result;\n\n  if (child != null) {\n    result = IconTheme.merge(\n      data: IconThemeData(\n        color: foregroundColor,\n      ),\n      child: child,\n    );\n  }\n\n  result = RawMaterialButton(\n    onPressed: onPressed,\n    elevation: elevation,\n    highlightElevation: highlightElevation,\n    disabledElevation: disabledElevation,\n    constraints: _sizeConstraints,\n    materialTapTargetSize: materialTapTargetSize,\n    fillColor: backgroundColor,\n    textStyle: textStyle,\n    shape: shape,\n    clipBehavior: clipBehavior,\n    child: result,\n  );\n\n  if (tooltip != null) {\n    result = MergeSemantics(\n      child: Tooltip(\n        message: tooltip,\n        child: result,\n      ),\n    );\n  }\n\n  if (heroTag != null) {\n    result = Hero(\n      tag: heroTag,\n      child: result,\n    );\n  }\n\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "material\/FloatingActionButton\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.FloatingActionButton",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"material\/FloatingActionButtonThemeData\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(Object other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final FloatingActionButtonThemeData otherData = other;\n  return otherData.backgroundColor == backgroundColor\n      &amp;&amp; otherData.foregroundColor == foregroundColor\n      &amp;&amp; otherData.elevation == elevation\n      &amp;&amp; otherData.disabledElevation == disabledElevation\n      &amp;&amp; otherData.highlightElevation == highlightElevation\n      &amp;&amp; otherData.shape == shape;\n}<\/code><\/pre>\n    ",
            "href": "material\/FloatingActionButtonThemeData\/operator_equals.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.FloatingActionButton",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use when filling the button.<\/p>\n<p>Defaults to <a href=\"material\/ThemeData\/accentColor.html\">ThemeData.accentColor<\/a> for the current theme.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/backgroundColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically an <a href=\"widgets\/Icon-class.html\">Icon<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/clipBehavior.html",
            "isDeprecated": "0",
            "type": "dart:ui.Clip",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this button when the button is disabled\n(<a href=\"material\/FloatingActionButton\/onPressed.html\">onPressed<\/a> is null).<\/p>\n<p>This controls the size of the shadow below the floating action button.<\/p>\n<p>Defaults to the same value as <a href=\"material\/FloatingActionButton\/elevation.html\">elevation<\/a>. Setting this to zero makes the\nfloating action button work similar to a <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a> but the titular\n\"floating\" effect is lost. The value is always non-negative.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/FloatingActionButton\/elevation.html\">elevation<\/a>, the default elevation.<\/li>\n<li>\n<a href=\"material\/FloatingActionButton\/highlightElevation.html\">highlightElevation<\/a>, the elevation when the button is pressed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double disabledElevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/disabledElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this button relative to its parent.<\/p>\n<p>This controls the size of the shadow below the floating action button.<\/p>\n<p>Defaults to 6, the appropriate elevation for floating action buttons. The\nvalue is always non-negative.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/FloatingActionButton\/highlightElevation.html\">highlightElevation<\/a>, the elevation when the button is pressed.<\/li>\n<li>\n<a href=\"material\/FloatingActionButton\/disabledElevation.html\">disabledElevation<\/a>, the elevation when the button is disabled.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/elevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The default icon and text color.<\/p>\n<p>Defaults to <code>ThemeData.accentIconTheme.color<\/code> for the current theme.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color foregroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/foregroundColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The tag to apply to the button's <a href=\"widgets\/Hero-class.html\">Hero<\/a> widget.<\/p>\n<p>Defaults to a tag that matches other floating action buttons.<\/p>\n<p>Set this to null explicitly if you don't want the floating action button to\nhave a hero tag.<\/p>\n<p>If this is not explicitly set, then there can only be one\n<a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a> per route (that is, per screen), since otherwise\nthere would be a tag conflict (multiple heroes on one route can't have the\nsame tag). The material design specification recommends only using one\nfloating action button per screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object heroTag\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/heroTag.html",
            "isDeprecated": "0",
            "type": "dart:core.Object",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this button relative to its parent when\nthe user is touching the button.<\/p>\n<p>This controls the size of the shadow below the floating action button.<\/p>\n<p>Defaults to 12, the appropriate elevation for floating action buttons\nwhile they are being touched. The value is always non-negative.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/FloatingActionButton\/elevation.html\">elevation<\/a>, the default elevation.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double highlightElevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/highlightElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>True if this is an \"extended\" floating action button.<\/p>\n<p>Typically <a href=\"material\/FloatingActionButton\/FloatingActionButton.extended.html\">extended<\/a> buttons have a <a href=\"painting\/StadiumBorder-class.html\">StadiumBorder<\/a> <a href=\"material\/FloatingActionButton\/shape.html\">shape<\/a>\nand have been created with the <a href=\"material\/FloatingActionButton\/FloatingActionButton.extended.html\">FloatingActionButton.extended<\/a>\nconstructor.<\/p>\n<p>The <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> animates the appearance of ordinary floating\naction buttons with scale and rotation transitions. Extended\nfloating action buttons are scaled and faded in.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isExtended\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/isExtended.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/FloatingActionButton\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/materialTapTargetSize.html",
            "isDeprecated": "0",
            "type": "material.MaterialTapTargetSize",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>Controls the size of this button.<\/p>\n<p>By default, floating action buttons are non-mini and have a height and\nwidth of 56.0 logical pixels. Mini floating action buttons have a height\nand width of 40.0 logical pixels with a layout width and height of 48.0\nlogical pixels. (The extra 4 pixels of padding on each side are added as a\nresult of the floating action button having <a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize.padded<\/a>\nset on the underlying <a href=\"material\/FloatingActionButton\/materialTapTargetSize.html\">RawMaterialButton.materialTapTargetSize<\/a>.)<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool mini\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/mini.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>The shape of the button's <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>The button's highlight and splash are clipped to this shape. If the\nbutton has an elevation, then its drop shadow is defined by this\nshape as well.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/shape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.FloatingActionButton",
            "params": []
        },
        {
            "desc": "<p>Text that describes the action that will occur when the button is pressed.<\/p>\n<p>This text is displayed when the user long-presses on the button and is\nused for accessibility.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
            "href": "material\/FloatingActionButton\/tooltip.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.FloatingActionButton",
            "params": []
        }
    ]
}