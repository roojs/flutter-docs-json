{
    "desc": "<p>Base class for platform-specific key event data.<\/p>\n<p>This base class exists to have a common type to use for each of the\ntarget platform's key event data structures.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid-class.html\">RawKeyEventDataAndroid<\/a>, a specialization for Android.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia-class.html\">RawKeyEventDataFuchsia<\/a>, a specialization for Fuchsia.<\/li>\n<li>\n<a href=\"services\/RawKeyDownEvent-class.html\">RawKeyDownEvent<\/a> and <a href=\"services\/RawKeyUpEvent-class.html\">RawKeyUpEvent<\/a>, the classes that hold the\nreference to <a href=\"services\/RawKeyEventData-class.html\">RawKeyEventData<\/a> subclasses.<\/li>\n<li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses these interfaces to expose key data.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "services\/RawKeyEventData-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.RawKeyEventData",
    "shortname": "RawKeyEventData",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor.<\/p>\n<p>This constructor enables subclasses to provide const constructors so that\nthey can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventData();<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventData\/RawKeyEventData.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">KeyboardSide getModifierSide(ModifierKey key);<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventData\/getModifierSide.html",
            "isDeprecated": "0",
            "type": "services.KeyboardSide",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventData",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "services.ModifierKey"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isModifierPressed(ModifierKey key, { KeyboardSide side = KeyboardSide.any });<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventData\/isModifierPressed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventData",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "services.ModifierKey"
                },
                {
                    "name": "side",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "services.KeyboardSide"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns true if a ALT modifier key was pressed at the time of this event,\nregardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which alt key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAltPressed =&gt; isModifierPressed(ModifierKey.altModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/isAltPressed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns true if a CTRL modifier key was pressed at the time of this event,\nregardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which control key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isControlPressed =&gt; isModifierPressed(ModifierKey.controlModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/isControlPressed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns true if a META modifier key was pressed at the time of this event,\nregardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which meta key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMetaPressed =&gt; isModifierPressed(ModifierKey.metaModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/isMetaPressed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns true if a SHIFT modifier key was pressed at the time of this\nevent, regardless of which side of the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEventData\/isModifierPressed.html\">isModifierPressed<\/a> if you need to know which shift key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isShiftPressed =&gt; isModifierPressed(ModifierKey.shiftModifier, side: KeyboardSide.any);<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/isShiftPressed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventData\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get keyLabel;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/keyLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LogicalKeyboardKey get logicalKey;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/logicalKey.html",
            "isDeprecated": "0",
            "type": "services.LogicalKeyboardKey",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns a map of modifier keys that were pressed at the time of this\nevent, and the keyboard side or sides that the key was on.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;ModifierKey, KeyboardSide&gt; get modifiersPressed {\n  final Map&lt;ModifierKey, KeyboardSide&gt; result = &lt;ModifierKey, KeyboardSide&gt;{};\n  for (ModifierKey key in ModifierKey.values) {\n    if (isModifierPressed(key)) {\n      result[key] = getModifierSide(key);\n    }\n  }\n  return result;\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/modifiersPressed.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<services.ModifierKey<services.KeyboardSide>>",
            "memberOf": "services.RawKeyEventData",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventData\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PhysicalKeyboardKey get physicalKey;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventData\/physicalKey.html",
            "isDeprecated": "0",
            "type": "services.PhysicalKeyboardKey",
            "memberOf": "services.RawKeyEventData",
            "params": []
        }
    ]
}