{
    "desc": "<p>A scrolling container that animates items when they are inserted or removed.<\/p>\n<p>This widget's <a href=\"widgets\/AnimatedListState-class.html\">AnimatedListState<\/a> can be used to dynamically insert or remove\nitems. To refer to the <a href=\"widgets\/AnimatedListState-class.html\">AnimatedListState<\/a> either provide a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> or\nuse the static <a href=\"widgets\/AnimatedList\/of.html\">of<\/a> method from an item's input callback.<\/p>\n<p>This widget is similar to one created by <a href=\"widgets\/ListView\/ListView.builder.html\">ListView.builder<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/AnimatedList-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.AnimatedList",
    "shortname": "AnimatedList",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.AnimatedListState"
    ],
    "events": [
        {
            "desc": "<p>Called, as needed, to build list item widgets.<\/p>\n<p>List items are only built when they're scrolled into view.<\/p>\n<p>The <a href=\"widgets\/AnimatedListItemBuilder.html\">AnimatedListItemBuilder<\/a> index parameter indicates the item's\nposition in the list. The value of the index parameter will be between 0\nand <a href=\"widgets\/AnimatedList\/initialItemCount.html\">initialItemCount<\/a> plus the total number of items that have been\ninserted with <a href=\"widgets\/AnimatedListState\/insertItem.html\">AnimatedListState.insertItem<\/a> and less the total number of\nitems that have been removed with <a href=\"widgets\/AnimatedListState\/removeItem.html\">AnimatedListState.removeItem<\/a>.<\/p>\n<p>Implementations of this callback should assume that\n<a href=\"widgets\/AnimatedListState\/removeItem.html\">AnimatedListState.removeItem<\/a> removes an item immediately.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AnimatedListItemBuilder itemBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/itemBuilder.html",
            "isDeprecated": false,
            "type": "widgets.AnimatedListItemBuilder",
            "name": "itemBuilder",
            "memberOf": "widgets.AnimatedList",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a scrolling container that animates items when they are inserted or removed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnimatedList({\n  Key key,\n  @required this.itemBuilder,\n  this.initialItemCount = 0,\n  this.scrollDirection = Axis.vertical,\n  this.reverse = false,\n  this.controller,\n  this.primary,\n  this.physics,\n  this.shrinkWrap = false,\n  this.padding,\n}) : assert(itemBuilder != null),\n     assert(initialItemCount != null &amp;&amp; initialItemCount &gt;= 0),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedList\/AnimatedList.html",
            "isDeprecated": "0",
            "type": "",
            "name": "AnimatedList",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.AnimatedList",
            "params": [
                {
                    "name": "controller",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollController"
                },
                {
                    "name": "initialItemCount",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "itemBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.AnimatedListItemBuilder"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "physics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                },
                {
                    "name": "primary",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "reverse",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "scrollDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "shrinkWrap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/AnimatedList\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimatedListState createState() =&gt; AnimatedListState();<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedList\/createState.html",
            "isDeprecated": "0",
            "type": "widgets.AnimatedListState",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>The state from the closest instance of this class that encloses the given context.<\/p>\n<p>This method is typically used by <a href=\"widgets\/AnimatedList-class.html\">AnimatedList<\/a> item widgets that insert or\nremove items in response to user input.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AnimatedListState animatedList = AnimatedList.of(context);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AnimatedListState of(BuildContext context, { bool nullOk = false }) {\n  assert(context != null);\n  assert(nullOk != null);\n  final AnimatedListState result = context.ancestorStateOfType(const TypeMatcher&lt;AnimatedListState&gt;());\n  if (nullOk || result != null)\n    return result;\n  throw FlutterError(\n    'AnimatedList.of() called with a context that does not contain an AnimatedList.\\n'\n    'No AnimatedList ancestor could be found starting from the context that was passed to AnimatedList.of(). '\n    'This can happen when the context provided is from the same StatefulWidget that '\n    'built the AnimatedList. Please see the AnimatedList documentation for examples '\n    'of how to refer to an AnimatedListState object: '\n    '  https:\/\/docs.flutter.io\/flutter\/widgets\/AnimatedListState-class.html \\n'\n    'The context used was:\\n'\n    '  $context'\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedList\/of.html",
            "isDeprecated": "0",
            "type": "widgets.AnimatedListState",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedList",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "nullOk",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>An object that can be used to control the position to which this scroll\nview is scrolled.<\/p>\n<p>Must be null if <a href=\"widgets\/AnimatedList\/primary.html\">primary<\/a> is true.<\/p>\n<p>A <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> serves several purposes. It can be used to control\nthe initial scroll position (see <a href=\"widgets\/ScrollController\/initialScrollOffset.html\">ScrollController.initialScrollOffset<\/a>).\nIt can be used to control whether the scroll view should automatically\nsave and restore its scroll position in the <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a> (see\n<a href=\"widgets\/ScrollController\/keepScrollOffset.html\">ScrollController.keepScrollOffset<\/a>). It can be used to read the current\nscroll position (see <a href=\"widgets\/ScrollController\/offset.html\">ScrollController.offset<\/a>), or change it (see\n<a href=\"widgets\/ScrollController\/animateTo.html\">ScrollController.animateTo<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController controller\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/controller.html",
            "name": "controller",
            "isDeprecated": false,
            "type": "widgets.ScrollController",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>The number of items the list will start with.<\/p>\n<p>The appearance of the initial items is not animated. They\nare created, as needed, by <a href=\"widgets\/AnimatedList\/itemBuilder.html\">itemBuilder<\/a> with an animation parameter\nof <a href=\"animation\/kAlwaysCompleteAnimation-constant.html\">kAlwaysCompleteAnimation<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int initialItemCount\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/initialItemCount.html",
            "name": "initialItemCount",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>The amount of space by which to inset the children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/padding.html",
            "name": "padding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>How the scroll view should respond to user input.<\/p>\n<p>For example, determines how the scroll view continues to animate after the\nuser stops dragging the scroll view.<\/p>\n<p>Defaults to matching platform conventions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics physics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/physics.html",
            "name": "physics",
            "isDeprecated": false,
            "type": "widgets.ScrollPhysics",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>Whether this is the primary scroll view associated with the parent\n<a href=\"widgets\/PrimaryScrollController-class.html\">PrimaryScrollController<\/a>.<\/p>\n<p>On iOS, this identifies the scroll view that will scroll to top in\nresponse to a tap in the status bar.<\/p>\n<p>Defaults to true when <a href=\"widgets\/AnimatedList\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a> and\n<a href=\"widgets\/AnimatedList\/controller.html\">controller<\/a> is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool primary\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/primary.html",
            "name": "primary",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>Whether the scroll view scrolls in the reading direction.<\/p>\n<p>For example, if the reading direction is left-to-right and\n<a href=\"widgets\/AnimatedList\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then the scroll view scrolls from\nleft to right when <a href=\"widgets\/AnimatedList\/reverse.html\">reverse<\/a> is false and from right to left when\n<a href=\"widgets\/AnimatedList\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Similarly, if <a href=\"widgets\/AnimatedList\/scrollDirection.html\">scrollDirection<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, then the scroll view\nscrolls from top to bottom when <a href=\"widgets\/AnimatedList\/reverse.html\">reverse<\/a> is false and from bottom to top\nwhen <a href=\"widgets\/AnimatedList\/reverse.html\">reverse<\/a> is true.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool reverse\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/reverse.html",
            "name": "reverse",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>The axis along which the scroll view scrolls.<\/p>\n<p>Defaults to <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis scrollDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/scrollDirection.html",
            "name": "scrollDirection",
            "isDeprecated": false,
            "type": "painting.Axis",
            "memberOf": "widgets.AnimatedList",
            "params": []
        },
        {
            "desc": "<p>Whether the extent of the scroll view in the <a href=\"widgets\/AnimatedList\/scrollDirection.html\">scrollDirection<\/a> should be\ndetermined by the contents being viewed.<\/p>\n<p>If the scroll view does not shrink wrap, then the scroll view will expand\nto the maximum allowed size in the <a href=\"widgets\/AnimatedList\/scrollDirection.html\">scrollDirection<\/a>. If the scroll view\nhas unbounded constraints in the <a href=\"widgets\/AnimatedList\/scrollDirection.html\">scrollDirection<\/a>, then <a href=\"widgets\/AnimatedList\/shrinkWrap.html\">shrinkWrap<\/a> must\nbe true.<\/p>\n<p>Shrink wrapping the content of the scroll view is significantly more\nexpensive than expanding to the maximum allowed size because the content\ncan expand and contract during scrolling, which means the size of the\nscroll view needs to be recomputed whenever the scroll position changes.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool shrinkWrap\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedList\/shrinkWrap.html",
            "name": "shrinkWrap",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.AnimatedList",
            "params": []
        }
    ]
}