{
    "name": "rendering.RendererBinding",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "RendererBinding",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/RendererBinding\/RendererBinding.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "createViewConfiguration",
            "type": "rendering.ViewConfiguration",
            "desc": "<p>Returns a <a href=\"rendering\/ViewConfiguration-class.html\">ViewConfiguration<\/a> configured for the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> based on the\ncurrent environment.<\/p>\n<p>This is called during construction and also in response to changes to the\nsystem metrics.<\/p>\n<p>Bindings can override this method to change what size or device pixel\nratio the <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> will use. For example, the testing framework uses\nthis to force the display into 800x600 when a test is run on the device\nusing <code>flutter run<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/createViewConfiguration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ViewConfiguration createViewConfiguration() {\n  final double devicePixelRatio = window.devicePixelRatio;\n  return ViewConfiguration(\n    size: window.physicalSize \/ devicePixelRatio,\n    devicePixelRatio: devicePixelRatio,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "drawFrame",
            "type": "",
            "desc": "<p>Pump the rendering pipeline to generate a frame.<\/p>\n<p>This method is called by <a href=\"scheduler\/SchedulerBinding\/handleDrawFrame.html\">handleDrawFrame<\/a>, which itself is called\nautomatically by the engine when it is time to lay out and paint a frame.<\/p>\n<p>Each frame consists of the following phases:<\/p>\n<ol>\n<li>\n<p>The animation phase: The <a href=\"scheduler\/SchedulerBinding\/handleBeginFrame.html\">handleBeginFrame<\/a> method, which is registered\nwith <a href=\"dart-ui\/Window\/onBeginFrame.html\">Window.onBeginFrame<\/a>, invokes all the transient frame callbacks\nregistered with <a href=\"scheduler\/SchedulerBinding\/scheduleFrameCallback.html\">scheduleFrameCallback<\/a>, in registration order. This\nincludes all the <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> instances that are driving <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>\nobjects, which means all of the active <a href=\"animation\/Animation-class.html\">Animation<\/a> objects tick at this\npoint.<\/p>\n<\/li>\n<li>\n<p>Microtasks: After <a href=\"scheduler\/SchedulerBinding\/handleBeginFrame.html\">handleBeginFrame<\/a> returns, any microtasks that got\nscheduled by transient frame callbacks get to run. This typically includes\ncallbacks for futures from <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a>s and <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>s that\ncompleted this frame.<\/p>\n<\/li>\n<\/ol>\n<p>After <a href=\"scheduler\/SchedulerBinding\/handleBeginFrame.html\">handleBeginFrame<\/a>, <a href=\"scheduler\/SchedulerBinding\/handleDrawFrame.html\">handleDrawFrame<\/a>, which is registered with\n<a href=\"dart-ui\/Window\/onDrawFrame.html\">Window.onDrawFrame<\/a>, is called, which invokes all the persistent frame\ncallbacks, of which the most notable is this method, <a href=\"rendering\/RendererBinding\/drawFrame.html\">drawFrame<\/a>, which\nproceeds as follows:<\/p>\n<ol start=\"3\">\n<li>\n<p>The layout phase: All the dirty <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s in the system are laid\nout (see <a href=\"rendering\/RenderObject\/performLayout.html\">RenderObject.performLayout<\/a>). See <a href=\"rendering\/RenderObject\/markNeedsLayout.html\">RenderObject.markNeedsLayout<\/a>\nfor further details on marking an object dirty for layout.<\/p>\n<\/li>\n<li>\n<p>The compositing bits phase: The compositing bits on any dirty\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> objects are updated. See\n<a href=\"rendering\/RenderObject\/markNeedsCompositingBitsUpdate.html\">RenderObject.markNeedsCompositingBitsUpdate<\/a>.<\/p>\n<\/li>\n<li>\n<p>The paint phase: All the dirty <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s in the system are\nrepainted (see <a href=\"rendering\/RenderObject\/paint.html\">RenderObject.paint<\/a>). This generates the <a href=\"rendering\/Layer-class.html\">Layer<\/a> tree. See\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a> for further details on marking an object\ndirty for paint.<\/p>\n<\/li>\n<li>\n<p>The compositing phase: The layer tree is turned into a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> and\nsent to the GPU.<\/p>\n<\/li>\n<li>\n<p>The semantics phase: All the dirty <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s in the system have\ntheir semantics updated (see <code>RenderObject.semanticsAnnotator<\/code>). This\ngenerates the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> tree. See\n<a href=\"rendering\/RenderObject\/markNeedsSemanticsUpdate.html\">RenderObject.markNeedsSemanticsUpdate<\/a> for further details on marking an\nobject dirty for semantics.<\/p>\n<\/li>\n<\/ol>\n<p>For more details on steps 3-7, see <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a>.<\/p>\n<ol start=\"8\"><li>The finalization phase: After <a href=\"rendering\/RendererBinding\/drawFrame.html\">drawFrame<\/a> returns, <a href=\"scheduler\/SchedulerBinding\/handleDrawFrame.html\">handleDrawFrame<\/a>\nthen invokes post-frame callbacks (registered with <a href=\"scheduler\/SchedulerBinding\/addPostFrameCallback.html\">addPostFrameCallback<\/a>).<\/li><\/ol>\n<p>Some bindings (for example, the <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a>) add extra steps to this\nlist (for example, see <a href=\"rendering\/RendererBinding\/drawFrame.html\">WidgetsBinding.drawFrame<\/a>).<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/drawFrame.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/\n\/\/ When editing the above, also update widgets\/binding.dart's copy.\n@protected\nvoid drawFrame() {\n  assert(renderView != null);\n  pipelineOwner.flushLayout();\n  pipelineOwner.flushCompositingBits();\n  pipelineOwner.flushPaint();\n  renderView.compositeFrame(); \/\/ this sends the bits to the GPU\n  pipelineOwner.flushSemantics(); \/\/ this also sends the semantics to the OS.\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handleMetricsChanged",
            "type": "",
            "desc": "<p>Called when the system metrics change.<\/p>\n<p>See <a href=\"dart-ui\/Window\/onMetricsChanged.html\">Window.onMetricsChanged<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/handleMetricsChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handleMetricsChanged() {\n  assert(renderView != null);\n  renderView.configuration = createViewConfiguration();\n  scheduleForcedFrame();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handlePlatformBrightnessChanged",
            "type": "",
            "desc": "<p>Called when the platform brightness changes.<\/p>\n<p>The current platform brightness can be queried either from a Flutter\nbinding, or from a <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> widget.<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}Querying [Window.platformBrightness].{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Brightness brightness = WidgetsBinding.instance.window.platformBrightness;<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}Querying [MediaQuery] directly.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Brightness brightness = MediaQuery.platformBrightnessOf(context);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}Querying [MediaQueryData].{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final MediaQueryData mediaQueryData = MediaQuery.of(context);\nfinal Brightness brightness = mediaQueryData.platformBrightness;<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>See <a href=\"dart-ui\/Window\/onPlatformBrightnessChanged.html\">Window.onPlatformBrightnessChanged<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/handlePlatformBrightnessChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handlePlatformBrightnessChanged() { }<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handleTextScaleFactorChanged",
            "type": "",
            "desc": "<p>Called when the platform text scale factor changes.<\/p>\n<p>See <a href=\"dart-ui\/Window\/onTextScaleFactorChanged.html\">Window.onTextScaleFactorChanged<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/handleTextScaleFactorChanged.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handleTextScaleFactorChanged() { }<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hitTest",
            "type": "",
            "desc": "<p>Determine which <a href=\"gestures\/HitTestTarget-class.html\">HitTestTarget<\/a> objects are located at a given position.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [
                {
                    "name": "result",
                    "type": "gestures.HitTestResult",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/hitTest.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid hitTest(HitTestResult result, Offset position) {\n  assert(renderView != null);\n  renderView.hitTest(result, position: position);\n  super.hitTest(result, position);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "initInstances",
            "type": "",
            "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/initInstances.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  super.initInstances();\n  _instance = this;\n  _pipelineOwner = PipelineOwner(\n    onNeedVisualUpdate: ensureVisualUpdate,\n    onSemanticsOwnerCreated: _handleSemanticsOwnerCreated,\n    onSemanticsOwnerDisposed: _handleSemanticsOwnerDisposed,\n  );\n  window\n    ..onMetricsChanged = handleMetricsChanged\n    ..onTextScaleFactorChanged = handleTextScaleFactorChanged\n    ..onPlatformBrightnessChanged = handlePlatformBrightnessChanged\n    ..onSemanticsEnabledChanged = _handleSemanticsEnabledChanged\n    ..onSemanticsAction = _handleSemanticsAction;\n  initRenderView();\n  _handleSemanticsEnabledChanged();\n  assert(renderView != null);\n  addPersistentFrameCallback(_handlePersistentFrameCallback);\n  _mouseTracker = _createMouseTracker();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "initRenderView",
            "type": "",
            "desc": "<p>Creates a <a href=\"rendering\/RenderView-class.html\">RenderView<\/a> object to be the root of the\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> rendering tree, and initializes it so that it\nwill be rendered when the engine is next ready to display a\nframe.<\/p>\n<p>Called automatically when the binding is created.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/initRenderView.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void initRenderView() {\n  assert(renderView == null);\n  renderView = RenderView(configuration: createViewConfiguration(), window: window);\n  renderView.scheduleInitialFrame();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "initServiceExtensions",
            "type": "",
            "desc": "<p>Called when the binding is initialized, to register service\nextensions.<\/p>\n<p>Bindings that want to expose service extensions should overload\nthis method to register them using calls to\n<a href=\"foundation\/BindingBase\/registerSignalServiceExtension.html\">registerSignalServiceExtension<\/a>,\n<a href=\"foundation\/BindingBase\/registerBoolServiceExtension.html\">registerBoolServiceExtension<\/a>,\n<a href=\"foundation\/BindingBase\/registerNumericServiceExtension.html\">registerNumericServiceExtension<\/a>, and\n<a href=\"foundation\/BindingBase\/registerServiceExtension.html\">registerServiceExtension<\/a> (in increasing order of complexity).<\/p>\n<p>Implementations of this method must call their superclass\nimplementation.<\/p>\n<p>A registered service extension can only be activated if the vm-service\nis included in the build, which only happens in debug and profile mode.\nAlthough a service extension cannot be used in release mode its code may\nstill be included in the Dart snapshot and blow up binary size if it is\nnot wrapped in a guard that allows the tree shaker to remove it (see\nsample code below).<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}The following code registers a service extension that is only included in\ndebug builds.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  assert(() {\n    \/\/ Register your service extension here.\n    return true;\n  }());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}A service extension registered with the following code snippet is\navailable in debug and profile mode.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void myRegistrationFunction() {\n  \/\/ kReleaseMode is defined in the 'flutter\/foundation.dart' package.\n  if (!kReleaseMode) {\n    \/\/ Register your service extension here.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>Both guards ensure that Dart's tree shaker can remove the code for the\nservice extension in release builds.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses\">github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses<\/a><\/li><\/ul>",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/initServiceExtensions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initServiceExtensions() {\n  super.initServiceExtensions();\n\n  assert(() {\n    \/\/ these service extensions only work in debug mode\n    registerBoolServiceExtension(\n      name: 'debugPaint',\n      getter: () async =&gt; debugPaintSizeEnabled,\n      setter: (bool value) {\n        if (debugPaintSizeEnabled == value)\n          return Future&lt;void&gt;.value();\n        debugPaintSizeEnabled = value;\n        return _forceRepaint();\n      },\n    );\n    registerBoolServiceExtension(\n      name: 'debugPaintBaselinesEnabled',\n      getter: () async =&gt; debugPaintBaselinesEnabled,\n      setter: (bool value) {\n        if (debugPaintBaselinesEnabled == value)\n          return Future&lt;void&gt;.value();\n        debugPaintBaselinesEnabled = value;\n        return _forceRepaint();\n      },\n    );\n    registerBoolServiceExtension(\n      name: 'repaintRainbow',\n      getter: () async =&gt; debugRepaintRainbowEnabled,\n      setter: (bool value) {\n        final bool repaint = debugRepaintRainbowEnabled &amp;&amp; !value;\n        debugRepaintRainbowEnabled = value;\n        if (repaint)\n          return _forceRepaint();\n        return Future&lt;void&gt;.value();\n      },\n    );\n    registerSignalServiceExtension(\n      name: 'debugDumpLayerTree',\n      callback: () {\n        debugDumpLayerTree();\n        return debugPrintDone;\n      },\n    );\n    return true;\n  }());\n\n  if (!kReleaseMode) {\n    \/\/ these service extensions work in debug or profile mode\n    registerSignalServiceExtension(\n      name: 'debugDumpRenderTree',\n      callback: () {\n        debugDumpRenderTree();\n        return debugPrintDone;\n      },\n    );\n\n    registerSignalServiceExtension(\n      name: 'debugDumpSemanticsTreeInTraversalOrder',\n      callback: () {\n        debugDumpSemanticsTree(DebugSemanticsDumpOrder.traversalOrder);\n        return debugPrintDone;\n      },\n    );\n\n    registerSignalServiceExtension(\n      name: 'debugDumpSemanticsTreeInInverseHitTestOrder',\n      callback: () {\n        debugDumpSemanticsTree(DebugSemanticsDumpOrder.inverseHitTest);\n        return debugPrintDone;\n      },\n    );\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "performReassemble",
            "type": "dart:async.Future",
            "desc": "<p>This method is called by <a href=\"foundation\/BindingBase\/reassembleApplication.html\">reassembleApplication<\/a> to actually cause the\napplication to reassemble, e.g. after a hot reload.<\/p>\n<p>Bindings are expected to use this method to re-register anything that uses\nclosures, so that they do not keep pointing to old code, and to flush any\ncaches of previously computed values, in case the new code would compute\nthem differently. For example, the rendering layer triggers the entire\napplication to repaint when this is called.<\/p>\n<p>Do not call this method directly. Instead, use <a href=\"foundation\/BindingBase\/reassembleApplication.html\">reassembleApplication<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/performReassemble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; performReassemble() async {\n  await super.performReassemble();\n  Timeline.startSync('Dirty Render Tree', arguments: timelineWhitelistArguments);\n  try {\n    renderView.reassemble();\n  } finally {\n    Timeline.finishSync();\n  }\n  scheduleWarmUpFrame();\n  await endOfFrame;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setSemanticsEnabled",
            "type": "",
            "desc": "<p>Whether the render tree associated with this binding should produce a tree\nof <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RendererBinding",
            "sig": "",
            "params": [
                {
                    "name": "enabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RendererBinding\/setSemanticsEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setSemanticsEnabled(bool enabled) {\n  if (enabled) {\n    _semanticsHandle ??= _pipelineOwner.ensureSemantics();\n  } else {\n    _semanticsHandle?.dispose();\n    _semanticsHandle = null;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "instance",
            "type": "rendering.RendererBinding",
            "types": [],
            "desc": "<p>The current <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>, if one has been created.<\/p>\n        ",
            "memberOf": "rendering.RendererBinding",
            "isConstant": false,
            "href": "rendering\/RendererBinding\/instance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static RendererBinding get instance =&gt; _instance;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "mouseTracker",
            "type": "gestures.MouseTracker",
            "types": [],
            "desc": "<p>The object that manages state about currently connected mice, for hover\nnotification.<\/p>\n        ",
            "memberOf": "rendering.RendererBinding",
            "isConstant": false,
            "href": "rendering\/RendererBinding\/mouseTracker.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MouseTracker get mouseTracker =&gt; _mouseTracker;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pipelineOwner",
            "type": "rendering.PipelineOwner",
            "types": [],
            "desc": "<p>The render tree's owner, which maintains dirty state for layout,\ncomposite, paint, and accessibility semantics<\/p>\n        ",
            "memberOf": "rendering.RendererBinding",
            "isConstant": false,
            "href": "rendering\/RendererBinding\/pipelineOwner.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PipelineOwner get pipelineOwner =&gt; _pipelineOwner;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "renderView",
            "type": "rendering.RenderView",
            "types": [],
            "desc": "<p>The render tree that's attached to the output surface.<\/p>\n        ",
            "memberOf": "rendering.RendererBinding",
            "isConstant": false,
            "href": "rendering\/RendererBinding\/renderView.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">RenderView get renderView =&gt; _pipelineOwner.rootNode;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/RendererBinding-mixin.html",
    "desc": "<p>The glue between the render tree and the Flutter engine.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "RendererBinding"
}