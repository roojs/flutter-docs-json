{
    "name": "widgets.ScaleTransition",
    "extends": [
        "widgets.AnimatedWidget",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "ScaleTransition",
            "type": "",
            "desc": "<p>Creates a scale transition.<\/p>\n<p>The <code>scale<\/code> argument must not be null. The <code>alignment<\/code> argument defaults\nto <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScaleTransition",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "alignment",
                    "type": "painting.Alignment",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/ScaleTransition\/ScaleTransition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ScaleTransition({\n  Key key,\n  @required Animation&lt;double&gt; scale,\n  this.alignment = Alignment.center,\n  this.child,\n}) : assert(scale != null),\n     super(key: key, listenable: scale);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to build widgets that depend on the state of the\nlistenable (e.g., the current value of the animation).<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ScaleTransition",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ScaleTransition\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final double scaleValue = scale.value;\n  final Matrix4 transform = Matrix4.identity()\n    ..scale(scaleValue, scaleValue, 1.0);\n  return Transform(\n    transform: transform,\n    alignment: alignment,\n    child: child,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "alignment",
            "type": "painting.Alignment",
            "types": [],
            "desc": "<p>The alignment of the origin of the coordinate system in which the scale\ntakes place, relative to the size of the box.<\/p>\n<p>For example, to set the origin of the scale to bottom middle, you can use\nan alignment of (0.0, 1.0).<\/p>\n        ",
            "memberOf": "widgets.ScaleTransition",
            "isConstant": false,
            "href": "widgets\/ScaleTransition\/alignment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Alignment alignment\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "widgets.ScaleTransition",
            "isConstant": false,
            "href": "widgets\/ScaleTransition\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scale",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation that controls the scale of the child.<\/p>\n<p>If the current value of the scale animation is v, the child will be\npainted v times its normal size.<\/p>\n        ",
            "memberOf": "widgets.ScaleTransition",
            "isConstant": false,
            "href": "widgets\/ScaleTransition\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get scale =&gt; listenable;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/ScaleTransition-class.html",
    "desc": "<p>Animates the scale of a transformed widget.<\/p>\n<p>Here's an illustration of the <a href=\"widgets\/ScaleTransition-class.html\">ScaleTransition<\/a> widget, with it's <a href=\"widgets\/ScaleTransition\/alignment.html\">alignment<\/a>\nanimated by a <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> set to <a href=\"animation\/Curves\/fastOutSlowIn-constant.html\">Curves.fastOutSlowIn<\/a>:<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:378px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:378px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/widgets\/scale_transition.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PositionedTransition-class.html\">PositionedTransition<\/a>, a widget that animates its child from a start\nposition to an end position over the lifetime of the animation.<\/li>\n<li>\n<a href=\"widgets\/RelativePositionedTransition-class.html\">RelativePositionedTransition<\/a>, a widget that transitions its child's\nposition based on the value of a rectangle relative to a bounding box.<\/li>\n<li>\n<a href=\"widgets\/SizeTransition-class.html\">SizeTransition<\/a>, a widget that animates its own size and clips and\naligns its child.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ScaleTransition"
}