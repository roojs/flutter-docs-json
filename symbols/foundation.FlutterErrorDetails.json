{
    "name": "foundation.FlutterErrorDetails",
    "extends": [],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "FlutterErrorDetails",
            "type": "",
            "desc": "<p>Creates a <a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> object with the given arguments setting\nthe object's properties.<\/p>\n<p>The framework calls this constructor when catching an exception that will\nsubsequently be reported using <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a>.<\/p>\n<p>The <code>exception<\/code> must not be null; other arguments can be left to\ntheir default values. (<code>throw null<\/code> results in a\n<a href=\"dart-core\/NullThrownError-class.html\">NullThrownError<\/a> exception.)<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.FlutterErrorDetails",
            "sig": "",
            "params": [
                {
                    "name": "exception",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "stack",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "library",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "context",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stackFilter",
                    "type": "foundation.IterableFilter<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "foundation.IterableFilter",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "informationCollector",
                    "type": "foundation.InformationCollector",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "silent",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/FlutterErrorDetails\/FlutterErrorDetails.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlutterErrorDetails({\n  this.exception,\n  this.stack,\n  this.library = 'Flutter framework',\n  this.context,\n  this.stackFilter,\n  this.informationCollector,\n  this.silent = false,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "exceptionAsString",
            "type": "dart:core.String",
            "desc": "<p>Converts the <a href=\"foundation\/FlutterErrorDetails\/exception.html\">exception<\/a> to a string.<\/p>\n<p>This applies some additional logic to make <a href=\"dart-core\/AssertionError-class.html\">AssertionError<\/a> exceptions\nprettier, to handle exceptions that stringify to empty strings, to handle\nobjects that don't inherit from <a href=\"dart-core\/Exception-class.html\">Exception<\/a> or <a href=\"dart-core\/Error-class.html\">Error<\/a>, and so forth.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.FlutterErrorDetails",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/FlutterErrorDetails\/exceptionAsString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String exceptionAsString() {\n  String longMessage;\n  if (exception is AssertionError) {\n    \/\/ Regular _AssertionErrors thrown by assert() put the message last, after\n    \/\/ some code snippets. This leads to ugly messages. To avoid this, we move\n    \/\/ the assertion message up to before the code snippets, separated by a\n    \/\/ newline, if we recognise that format is being used.\n    final String message = exception.message;\n    final String fullMessage = exception.toString();\n    if (message is String &amp;&amp; message != fullMessage) {\n      if (fullMessage.length &gt; message.length) {\n        final int position = fullMessage.lastIndexOf(message);\n        if (position == fullMessage.length - message.length &amp;&amp;\n            position &gt; 2 &amp;&amp;\n            fullMessage.substring(position - 2, position) == ': ') {\n          longMessage = '${message.trimRight()}\\n${fullMessage.substring(0, position - 2)}';\n        }\n      }\n    }\n    longMessage ??= fullMessage;\n  } else if (exception is String) {\n    longMessage = exception;\n  } else if (exception is Error || exception is Exception) {\n    longMessage = exception.toString();\n  } else {\n    longMessage = '  ${exception.toString()}';\n  }\n  longMessage = longMessage.trimRight();\n  if (longMessage.isEmpty)\n    longMessage = '  &lt;no message available&gt;';\n  return longMessage;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.FlutterErrorDetails",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/FlutterErrorDetails\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final StringBuffer buffer = StringBuffer();\n  if ((library != null &amp;&amp; library != '') || (context != null &amp;&amp; context != '')) {\n    if (library != null &amp;&amp; library != '') {\n      buffer.write('Error caught by $library');\n      if (context != null &amp;&amp; context != '')\n        buffer.write(', ');\n    } else {\n      buffer.writeln('Exception ');\n    }\n    if (context != null &amp;&amp; context != '')\n      buffer.write('thrown $context');\n    buffer.writeln('.');\n  } else {\n    buffer.write('An error was caught.');\n  }\n  buffer.writeln(exceptionAsString());\n  if (informationCollector != null)\n    informationCollector(buffer);\n  if (stack != null) {\n    Iterable&lt;String&gt; stackLines = stack.toString().trimRight().split('\\n');\n    if (stackFilter != null) {\n      stackLines = stackFilter(stackLines);\n    } else {\n      stackLines = FlutterError.defaultStackFilter(stackLines);\n    }\n    buffer.writeAll(stackLines, '\\n');\n  }\n  return buffer.toString().trimRight();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "context",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A human-readable description of where the error was caught (as opposed to\nwhere it was thrown).<\/p>\n<p>The string should be in a form that will make sense in English when\nfollowing the word \"thrown\", as in \"thrown while obtaining the image from\nthe network\" (for the context \"while obtaining the image from the\nnetwork\").<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/context.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String context\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "exception",
            "type": "",
            "types": [],
            "desc": "<p>The exception. Often this will be an <a href=\"dart-core\/AssertionError-class.html\">AssertionError<\/a>, maybe specifically\na <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a>. However, this could be any value at all.<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/exception.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final dynamic exception\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "informationCollector",
            "type": "foundation.InformationCollector",
            "types": [],
            "desc": "<p>A callback which, when called with a <a href=\"dart-core\/StringBuffer-class.html\">StringBuffer<\/a> will write to that buffer\ninformation that could help with debugging the problem.<\/p>\n<p>Information collector callbacks can be expensive, so the generated information\nshould be cached, rather than the callback being called multiple times.<\/p>\n<p>The text written to the information argument may contain newlines but should\nnot end with a newline.<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/informationCollector.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InformationCollector informationCollector\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "library",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A human-readable brief name describing the library that caught the error\nmessage. This is used by the default error handler in the header dumped to\nthe console.<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/library.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String library\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "silent",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this error should be ignored by the default error reporting\nbehavior in release mode.<\/p>\n<p>If this is false, the default, then the default error handler will always\ndump this error to the console.<\/p>\n<p>If this is true, then the default error handler would only dump this error\nto the console in checked mode. In release mode, the error is ignored.<\/p>\n<p>This is used by certain exception handlers that catch errors that could be\ntriggered by environmental conditions (as opposed to logic errors). For\nexample, the HTTP library sets this flag so as to not report every 404\nerror to the console on end-user devices, while still allowing a custom\nerror handler to see the errors even in release builds.<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/silent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool silent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "stack",
            "type": "dart:core.StackTrace",
            "types": [],
            "desc": "<p>The stack trace from where the <a href=\"foundation\/FlutterErrorDetails\/exception.html\">exception<\/a> was thrown (as opposed to where\nit was caught).<\/p>\n<p>StackTrace objects are opaque except for their <a href=\"foundation\/FlutterErrorDetails\/toString.html\">toString<\/a> function.<\/p>\n<p>If this field is not null, then the <a href=\"foundation\/FlutterErrorDetails\/stackFilter.html\">stackFilter<\/a> callback, if any, will\nbe called with the result of calling <a href=\"foundation\/FlutterErrorDetails\/toString.html\">toString<\/a> on this object and\nsplitting that result on line breaks. If there's no <a href=\"foundation\/FlutterErrorDetails\/stackFilter.html\">stackFilter<\/a>\ncallback, then <a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a> is used instead. That\nfunction expects the stack to be in the format used by\n<a href=\"foundation\/FlutterErrorDetails\/toString.html\">StackTrace.toString<\/a>.<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/stack.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackTrace stack\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "stackFilter",
            "type": "foundation.IterableFilter<dart:core.String>",
            "types": [
                "foundation.IterableFilter",
                "dart:core.String"
            ],
            "desc": "<p>A callback which filters the <a href=\"foundation\/FlutterErrorDetails\/stack.html\">stack<\/a> trace. Receives an iterable of\nstrings representing the frames encoded in the way that\n<a href=\"foundation\/FlutterErrorDetails\/toString.html\">StackTrace.toString()<\/a> provides. Should return an iterable of lines to\noutput for the stack.<\/p>\n<p>If this is not provided, then <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">FlutterError.dumpErrorToConsole<\/a> will use\n<a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a> instead.<\/p>\n<p>If the <a href=\"foundation\/FlutterError\/defaultStackFilter.html\">FlutterError.defaultStackFilter<\/a> behavior is desired, then the\ncallback should manually call that function. That function expects the\nincoming list to be in the <a href=\"foundation\/FlutterErrorDetails\/toString.html\">StackTrace.toString()<\/a> format. The output of\nthat function, however, does not always follow this format.<\/p>\n<p>This won't be called if <a href=\"foundation\/FlutterErrorDetails\/stack.html\">stack<\/a> is null.<\/p>\n        ",
            "memberOf": "foundation.FlutterErrorDetails",
            "isConstant": false,
            "href": "foundation\/FlutterErrorDetails\/stackFilter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IterableFilter&lt;String&gt; stackFilter\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "gestures.FlutterErrorDetailsForPointerEventDispatcher",
        "gestures.FlutterErrorDetailsForPointerRouter",
        "rendering.FlutterErrorDetailsForRendering"
    ],
    "realImplementors": [
        "gestures.FlutterErrorDetailsForPointerEventDispatcher",
        "gestures.FlutterErrorDetailsForPointerRouter",
        "rendering.FlutterErrorDetailsForRendering"
    ],
    "cn": [],
    "href": "foundation\/FlutterErrorDetails-class.html",
    "desc": "<p>Class for information provided to <a href=\"foundation\/FlutterExceptionHandler.html\">FlutterExceptionHandler<\/a> callbacks.<\/p>\n<p>See <a href=\"foundation\/FlutterError\/onError.html\">FlutterError.onError<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FlutterErrorDetails"
}