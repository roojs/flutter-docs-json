{
    "name": "material.AnimatedIcon",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "AnimatedIcon",
            "type": "",
            "desc": "<p>Creates an AnimatedIcon.<\/p>\n<p>The <code>progress<\/code> and <code>icon<\/code> arguments must not be null.\nThe <code>size<\/code> and <code>color<\/code> default to the value given by the current <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.AnimatedIcon",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "icon",
                    "type": "material.AnimatedIconData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "progress",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/AnimatedIcon\/AnimatedIcon.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnimatedIcon({\n  Key key,\n  @required this.icon,\n  @required this.progress,\n  this.color,\n  this.size,\n  this.semanticLabel,\n  this.textDirection,\n}) : assert(progress != null),\n     assert(icon != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/AnimatedIcon\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.AnimatedIcon",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/AnimatedIcon\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final _AnimatedIconData iconData = icon;\n  final IconThemeData iconTheme = IconTheme.of(context);\n  final double iconSize = size ?? iconTheme.size;\n  final TextDirection textDirection = this.textDirection ?? Directionality.of(context);\n  final double iconOpacity = iconTheme.opacity;\n  Color iconColor = color ?? iconTheme.color;\n  if (iconOpacity != 1.0)\n    iconColor = iconColor.withOpacity(iconColor.opacity * iconOpacity);\n  return Semantics(\n    label: semanticLabel,\n    child: CustomPaint(\n      size: Size(iconSize, iconSize),\n      painter: _AnimatedIconPainter(\n        paths: iconData.paths,\n        progress: progress,\n        color: iconColor,\n        scale: iconSize \/ iconData.size.width,\n        shouldMirror: textDirection == TextDirection.rtl &amp;&amp; iconData.matchTextDirection,\n        uiPathFactory: _pathFactory,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "color",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color to use when drawing the icon.<\/p>\n<p>Defaults to the current <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> color, if any.<\/p>\n<p>The given color will be adjusted by the opacity of the current\n<a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a>, if any.<\/p>\n<p>In material apps, if there is a <a href=\"material\/Theme-class.html\">Theme<\/a> without any <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a>s\nspecified, icon colors default to white if the theme is dark\nand black if the theme is light.<\/p>\n<p>If no <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> and no <a href=\"material\/Theme-class.html\">Theme<\/a> is specified, icons will default to black.<\/p>\n<p>See <a href=\"material\/Theme-class.html\">Theme<\/a> to set the current theme and <a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a>\nfor setting the current theme's brightness.<\/p>\n        ",
            "memberOf": "material.AnimatedIcon",
            "isConstant": false,
            "href": "material\/AnimatedIcon\/color.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "icon",
            "type": "material.AnimatedIconData",
            "types": [],
            "desc": "<p>The icon to display. Available icons are listed in <a href=\"material\/AnimatedIcons-class.html\">AnimatedIcons<\/a>.<\/p>\n        ",
            "memberOf": "material.AnimatedIcon",
            "isConstant": false,
            "href": "material\/AnimatedIcon\/icon.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AnimatedIconData icon\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "progress",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation progress for the animated icon.<\/p>\n<p>The value is clamped to be between 0 and 1.<\/p>\n<p>This determines the actual frame that is displayed.<\/p>\n        ",
            "memberOf": "material.AnimatedIcon",
            "isConstant": false,
            "href": "material\/AnimatedIcon\/progress.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; progress\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticLabel",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Semantic label for the icon.<\/p>\n<p>Announced in accessibility modes (e.g TalkBack\/VoiceOver).\nThis label does not show in the UI.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>Semantics.label<\/code>, which is set to <a href=\"material\/AnimatedIcon\/semanticLabel.html\">semanticLabel<\/a> in the underlying\n<a href=\"widgets\/Semantics-class.html\">Semantics<\/a> widget.<\/li><\/ul>",
            "memberOf": "material.AnimatedIcon",
            "isConstant": false,
            "href": "material\/AnimatedIcon\/semanticLabel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticLabel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "size",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The size of the icon in logical pixels.<\/p>\n<p>Icons occupy a square with width and height equal to size.<\/p>\n<p>Defaults to the current <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> size.<\/p>\n        ",
            "memberOf": "material.AnimatedIcon",
            "isConstant": false,
            "href": "material\/AnimatedIcon\/size.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double size\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textDirection",
            "type": "dart:ui.TextDirection",
            "types": [],
            "desc": "<p>The text direction to use for rendering the icon.<\/p>\n<p>If this is null, the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> is used instead.<\/p>\n<p>If the text direction is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>, the icon will be mirrored\nhorizontally (e.g back arrow will point right).<\/p>\n        ",
            "memberOf": "material.AnimatedIcon",
            "isConstant": false,
            "href": "material\/AnimatedIcon\/textDirection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/AnimatedIcon-class.html",
    "desc": "<p>Shows an animated icon at a given animation <a href=\"material\/AnimatedIcon\/progress.html\">progress<\/a>.<\/p>\n<p>The available icons are specified in <a href=\"material\/AnimatedIcons-class.html\">AnimatedIcons<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">AnimatedIcon(\n  icon: AnimatedIcons.menu_arrow,\n  progress: controller,\n  semanticLabel: 'Show menu',\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AnimatedIcon"
}