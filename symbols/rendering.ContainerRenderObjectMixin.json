{
    "name": "rendering.ContainerRenderObjectMixin",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "ContainerRenderObjectMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/ContainerRenderObjectMixin\/ContainerRenderObjectMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "",
            "desc": "<p>Append child to the end of this render object's child list.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(ChildType child) {\n  insert(child, after: _lastChild);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addAll",
            "type": "",
            "desc": "<p>Add all the children to the end of this render object's child list.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "children",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/addAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(List&lt;ChildType&gt; children) {\n  children?.forEach(add);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "attach",
            "type": "",
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/ContainerRenderObjectMixin\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/ContainerRenderObjectMixin\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/ContainerRenderObjectMixin\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "owner",
                    "type": "rendering.PipelineOwner",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/attach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  ChildType child = _firstChild;\n  while (child != null) {\n    child.attach(owner);\n    final ParentDataType childParentData = child.parentData;\n    child = childParentData.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "childAfter",
            "type": "",
            "desc": "<p>The next child after the given child in the child list.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/childAfter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChildType childAfter(ChildType child) {\n  assert(child != null);\n  assert(child.parent == this);\n  final ParentDataType childParentData = child.parentData;\n  return childParentData.nextSibling;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "childBefore",
            "type": "",
            "desc": "<p>The previous child before the given child in the child list.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/childBefore.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChildType childBefore(ChildType child) {\n  assert(child != null);\n  assert(child.parent == this);\n  final ParentDataType childParentData = child.parentData;\n  return childParentData.previousSibling;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "debugDescribeChildren",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"rendering\/RenderObject\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/ContainerRenderObjectMixin\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/debugDescribeChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  final List&lt;DiagnosticsNode&gt; children = &lt;DiagnosticsNode&gt;[];\n  if (firstChild != null) {\n    ChildType child = firstChild;\n    int count = 1;\n    while (true) {\n      children.add(child.toDiagnosticsNode(name: 'child $count'));\n      if (child == lastChild)\n        break;\n      count += 1;\n      final ParentDataType childParentData = child.parentData;\n      child = childParentData.nextSibling;\n    }\n  }\n  return children;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "foundation.DiagnosticsNode"
            ]
        },
        {
            "name": "debugValidateChild",
            "type": "dart:core.bool",
            "desc": "<p>Checks whether the given render object has the correct <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> to be\na child of this render object.<\/p>\n<p>Does nothing if assertions are disabled.<\/p>\n<p>Always returns true.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/debugValidateChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugValidateChild(RenderObject child) {\n  assert(() {\n    if (child is! ChildType) {\n      throw FlutterError(\n        'A $runtimeType expected a child of type $ChildType but received a '\n        'child of type ${child.runtimeType}.\\n'\n        'RenderObjects expect specific types of children because they '\n        'coordinate with their children during layout and paint. For '\n        'example, a RenderSliver cannot be the child of a RenderBox because '\n        'a RenderSliver does not understand the RenderBox layout protocol.\\n'\n        '\\n'\n        'The $runtimeType that expected a $ChildType child was created by:\\n'\n        '  $debugCreator\\n'\n        '\\n'\n        'The ${child.runtimeType} that did not match the expected child type '\n        'was created by:\\n'\n        '  ${child.debugCreator}\\n'\n      );\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "detach",
            "type": "",
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/ContainerRenderObjectMixin\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/ContainerRenderObjectMixin\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/ContainerRenderObjectMixin\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/detach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  super.detach();\n  ChildType child = _firstChild;\n  while (child != null) {\n    child.detach();\n    final ParentDataType childParentData = child.parentData;\n    child = childParentData.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "insert",
            "type": "",
            "desc": "<p>Insert child into this render object's child list after the given child.<\/p>\n<p>If <code>after<\/code> is null, then this inserts the child at the start of the list,\nand the child becomes the new <a href=\"rendering\/ContainerRenderObjectMixin\/firstChild.html\">firstChild<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "after",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/insert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(ChildType child, { ChildType after }) {\n  assert(child != this, 'A RenderObject cannot be inserted into itself.');\n  assert(after != this, 'A RenderObject cannot simultaneously be both the parent and the sibling of another RenderObject.');\n  assert(child != after, 'A RenderObject cannot be inserted after itself.');\n  assert(child != _firstChild);\n  assert(child != _lastChild);\n  adoptChild(child);\n  _insertIntoChildList(child, after: after);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "move",
            "type": "",
            "desc": "<p>Move this child in the child list to be before the given child.<\/p>\n<p>More efficient than removing and re-adding the child. Requires the child\nto already be in the child list at some position. Pass null for before to\nmove the child to the end of the child list.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "after",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/move.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void move(ChildType child, { ChildType after }) {\n  assert(child != this);\n  assert(after != this);\n  assert(child != after);\n  assert(child.parent == this);\n  final ParentDataType childParentData = child.parentData;\n  if (childParentData.previousSibling == after)\n    return;\n  _removeFromChildList(child);\n  _insertIntoChildList(child, after: after);\n  markNeedsLayout();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "redepthChildren",
            "type": "",
            "desc": "<p>Adjust the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of this node's children, if any.<\/p>\n<p>Override this method in subclasses with child nodes to call <a href=\"foundation\/AbstractNode\/redepthChild.html\">redepthChild<\/a>\nfor each child. Do not call this method directly.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/redepthChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid redepthChildren() {\n  ChildType child = _firstChild;\n  while (child != null) {\n    redepthChild(child);\n    final ParentDataType childParentData = child.parentData;\n    child = childParentData.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "remove",
            "type": "",
            "desc": "<p>Remove this child from the child list.<\/p>\n<p>Requires the child to be present in the child list.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void remove(ChildType child) {\n  _removeFromChildList(child);\n  dropChild(child);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeAll",
            "type": "",
            "desc": "<p>Remove all their children from this render object's child list.<\/p>\n<p>More efficient than removing them individually.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/removeAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll() {\n  ChildType child = _firstChild;\n  while (child != null) {\n    final ParentDataType childParentData = child.parentData;\n    final ChildType next = childParentData.nextSibling;\n    childParentData.previousSibling = null;\n    childParentData.nextSibling = null;\n    dropChild(child);\n    child = next;\n  }\n  _firstChild = null;\n  _lastChild = null;\n  _childCount = 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "visitChildren",
            "type": "",
            "desc": "<p>Calls visitor for each immediate child of this render object.<\/p>\n<p>Override in subclasses with children and call the visitor for each child.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "sig": "",
            "params": [
                {
                    "name": "visitor",
                    "type": "rendering.RenderObjectVisitor",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/ContainerRenderObjectMixin\/visitChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildren(RenderObjectVisitor visitor) {\n  ChildType child = _firstChild;\n  while (child != null) {\n    visitor(child);\n    final ParentDataType childParentData = child.parentData;\n    child = childParentData.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "childCount",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The number of children.<\/p>\n        ",
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "isConstant": false,
            "href": "rendering\/ContainerRenderObjectMixin\/childCount.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get childCount =&gt; _childCount;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "firstChild",
            "type": "",
            "types": [],
            "desc": "<p>The first child in the child list.<\/p>\n        ",
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "isConstant": false,
            "href": "rendering\/ContainerRenderObjectMixin\/firstChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ChildType get firstChild =&gt; _firstChild;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "lastChild",
            "type": "",
            "types": [],
            "desc": "<p>The last child in the child list.<\/p>\n        ",
            "memberOf": "rendering.ContainerRenderObjectMixin",
            "isConstant": false,
            "href": "rendering\/ContainerRenderObjectMixin\/lastChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ChildType get lastChild =&gt; _lastChild;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/ContainerRenderObjectMixin-mixin.html",
    "desc": "<p>Generic mixin for render objects with a list of children.<\/p>\n<p>Provides a child model for a render object subclass that has a doubly-linked\nlist of children.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "ContainerRenderObjectMixin"
}