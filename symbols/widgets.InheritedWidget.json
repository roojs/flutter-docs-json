{
    "desc": "<p>Base class for widgets that efficiently propagate information down the tree.<\/p>\n<p>To obtain the nearest instance of a particular type of inherited widget from\na build context, use <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/p>\n<p>Inherited widgets, when referenced in this way, will cause the consumer to\nrebuild when the inherited widget itself changes state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following is a skeleton of an inherited widget called <code>FrogColor<\/code>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class FrogColor extends InheritedWidget {\n  const FrogColor({\n    Key key,\n    @required this.color,\n    @required Widget child,\n  }) : assert(color != null),\n       assert(child != null),\n       super(key: key, child: child);\n\n  final Color color;\n\n  static FrogColor of(BuildContext context) {\n    return context.inheritFromWidgetOfExactType(FrogColor) as FrogColor;\n  }\n\n  @override\n  bool updateShouldNotify(FrogColor old) =&gt; color != old.color;\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The convention is to provide a static method <code>of<\/code> on the <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>\nwhich does the call to <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>. This\nallows the class to define its own fallback logic in case there isn't\na widget in scope. In the example above, the value returned will be\nnull in that case, but it could also have defaulted to a value.<\/p>\n<p>Sometimes, the <code>of<\/code> method returns the data rather than the inherited\nwidget; for example, in this case it could have returned a <a href=\"dart-ui\/Color-class.html\">Color<\/a> instead\nof the <code>FrogColor<\/code> widget.<\/p>\n<p>Occasionally, the inherited widget is an implementation detail of another\nclass, and is therefore private. The <code>of<\/code> method in that case is typically\nput on the public class instead. For example, <a href=\"material\/Theme-class.html\">Theme<\/a> is implemented as a\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> that builds a private inherited widget; <a href=\"material\/Theme\/of.html\">Theme.of<\/a> looks\nfor that inherited widget using <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>\nand then returns the <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> and <a href=\"widgets\/State-class.html\">State<\/a>, for widgets that can build differently\nseveral times over their lifetime.<\/li>\n<li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, for widgets that always build the same way given a\nparticular configuration and ambient state.<\/li>\n<li>\n<a href=\"widgets\/Widget-class.html\">Widget<\/a>, for an overview of widgets in general.<\/li>\n<li>\n<a href=\"widgets\/InheritedNotifier-class.html\">InheritedNotifier<\/a>, an inherited widget whose value can be a\n<a href=\"foundation\/Listenable-class.html\">Listenable<\/a>, and which will notify dependents whenever the value\nsends notifications.<\/li>\n<li>\n<a href=\"widgets\/InheritedModel-class.html\">InheritedModel<\/a>, an inherited widget that allows clients to subscribe\nto changes for subparts of the value.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/InheritedWidget-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.InheritedWidget",
    "shortname": "InheritedWidget",
    "extends": [
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "cupertino.CupertinoTheme",
        "material.ButtonTheme",
        "material.ChipTheme",
        "material.DropdownButtonHideUnderline",
        "material.FlexibleSpaceBarSettings",
        "material.ListTileTheme",
        "material.SliderTheme",
        "widgets.DefaultAssetBundle",
        "widgets.DefaultTextStyle",
        "widgets.Directionality",
        "widgets.IconTheme",
        "widgets.MediaQuery",
        "widgets.PrimaryScrollController",
        "widgets.ScrollConfiguration",
        "widgets.TickerMode"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const InheritedWidget({ Key key, Widget child })\n  : super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "widgets\/InheritedWidget\/InheritedWidget.html",
            "isDeprecated": "0",
            "type": "",
            "name": "InheritedWidget",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.InheritedWidget",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Inflates this configuration to a concrete instance.<\/p>\n<p>A given widget can be included in the tree zero or more times. In particular\na given widget can be placed in the tree multiple times. Each time a widget\nis placed in the tree, it is inflated into an <a href=\"widgets\/Element-class.html\">Element<\/a>, which means a\nwidget that is incorporated into the tree multiple times will be inflated\nmultiple times.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nInheritedElement createElement() =&gt; InheritedElement(this);<\/code><\/pre>\n    ",
            "href": "widgets\/InheritedWidget\/createElement.html",
            "isDeprecated": "0",
            "type": "widgets.InheritedElement",
            "name": "createElement",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.InheritedWidget",
            "params": []
        },
        {
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool updateShouldNotify(covariant InheritedWidget oldWidget);<\/code><\/pre>\n    ",
            "href": "widgets\/InheritedWidget\/updateShouldNotify.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "updateShouldNotify",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.InheritedWidget",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.InheritedWidget"
                }
            ]
        }
    ],
    "props": []
}