{
    "desc": "<p>Recognizes taps.<\/p>\n<p>Gesture recognizers take part in gesture arenas to enable potential gestures\nto be disambiguated from each other. This process is managed by a\n<a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> (q.v.).<\/p>\n<p><a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a> considers all the pointers involved in the pointer\nevent sequence as contributing to one gesture. For this reason, extra\npointer interactions during a tap sequence are not recognized as additional\ntaps. For example, down-1, down-2, up-1, up-2 produces only one tap on up-1.<\/p>\n<p>The lifecycle of events for a tap gesture is as follows:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">onTapDown<\/a>, which triggers after a short timeout (<a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>) even if the\ngesture has not won its arena yet.<\/li>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> and <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a>, which trigger when the pointer is released if the\ngesture wins the arena.<\/li>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a>, which triggers instead of <a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> and <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a> in the case\nof the gesture not winning the arena.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTap.html\">GestureDetector.onTap<\/a>, which uses this recognizer.<\/li>\n<li><a href=\"gestures\/MultiTapGestureRecognizer-class.html\">MultiTapGestureRecognizer<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "gestures\/TapGestureRecognizer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "gestures",
    "name": "gestures.TapGestureRecognizer",
    "shortname": "TapGestureRecognizer",
    "extends": [
        "gestures.PrimaryPointerGestureRecognizer",
        "gestures.OneSequenceGestureRecognizer",
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>A tap has occurred.<\/p>\n<p>This triggers once the gesture has won the arena, immediately after\n<a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a>.<\/p>\n<p>If the gesture doesn't win the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a> is called instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/TapGestureRecognizer\/onTap.html\">GestureDetector.onTap<\/a>, which exposes this callback.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapCallback onTap\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/TapGestureRecognizer\/onTap.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapCallback",
            "name": "onTap",
            "memberOf": "gestures.TapGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The pointer that previously triggered <a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">onTapDown<\/a> will not end up causing\na tap.<\/p>\n<p>This triggers if the gesture loses the arena.<\/p>\n<p>If the gesture wins the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> and <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a> are called instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">GestureDetector.onTapCancel<\/a>, which exposes this callback.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapCancelCallback onTapCancel\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/TapGestureRecognizer\/onTapCancel.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapCancelCallback",
            "name": "onTapCancel",
            "memberOf": "gestures.TapGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer that might cause a tap has contacted the screen at a particular\nlocation.<\/p>\n<p>This triggers before the gesture has won the arena, after a short timeout\n(<a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>).<\/p>\n<p>If the gesture doesn't win the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a> is called next.\nOtherwise, <a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">onTapUp<\/a> is called next.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">GestureDetector.onTapDown<\/a>, which exposes this callback.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapDownCallback onTapDown\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/TapGestureRecognizer\/onTapDown.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapDownCallback",
            "name": "onTapDown",
            "memberOf": "gestures.TapGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer that will trigger a tap has stopped contacting the screen at a\nparticular location.<\/p>\n<p>This triggers once the gesture has won the arena, immediately before\n<a href=\"gestures\/TapGestureRecognizer\/onTap.html\">onTap<\/a>.<\/p>\n<p>If the gesture doesn't win the arena, <a href=\"gestures\/TapGestureRecognizer\/onTapCancel.html\">onTapCancel<\/a> is called instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/TapGestureRecognizer\/onTapUp.html\">GestureDetector.onTapUp<\/a>, which exposes this callback.<\/li>\n<li>\n<a href=\"gestures\/TapUpDetails-class.html\">TapUpDetails<\/a>, which is passed as an argument to this callback.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureTapUpCallback onTapUp\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/TapGestureRecognizer\/onTapUp.html",
            "isDeprecated": false,
            "type": "gestures.GestureTapUpCallback",
            "name": "onTapUp",
            "memberOf": "gestures.TapGestureRecognizer",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a tap gesture recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TapGestureRecognizer({ Object debugOwner }) : super(deadline: kPressTimeout, debugOwner: debugOwner);<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/TapGestureRecognizer.html",
            "isDeprecated": false,
            "type": "",
            "name": "TapGestureRecognizer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": [
                {
                    "name": "debugOwner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  super.acceptGesture(pointer);\n  if (pointer == primaryPointer) {\n    _checkDown();\n    _wonArenaForPrimaryPointer = true;\n    _checkUp();\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/acceptGesture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "acceptGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/TapGestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('wonArenaForPrimaryPointer', value: _wonArenaForPrimaryPointer, ifTrue: 'won arena'));\n  properties.add(DiagnosticsProperty&lt;Offset&gt;('finalPosition', _finalPosition, defaultValue: null));\n  properties.add(FlagProperty('sentTapDown', value: _sentTapDown, ifTrue: 'sent tap down'));\n}<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Override to be notified when <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a> is exceeded.<\/p>\n<p>You must override this method if you supply a <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didExceedDeadline() {\n  _checkDown();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/didExceedDeadline.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didExceedDeadline",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Override to provide behavior for the primary pointer when the gesture is still possible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handlePrimaryPointer(PointerEvent event) {\n  if (event is PointerUpEvent) {\n    _finalPosition = event.position;\n    _checkUp();\n  } else if (event is PointerCancelEvent) {\n    if (_sentTapDown &amp;&amp; onTapCancel != null) {\n      invokeCallback&lt;void&gt;('onTapCancel', onTapCancel);\n    }\n    _reset();\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/handlePrimaryPointer.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "handlePrimaryPointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  super.rejectGesture(pointer);\n  if (pointer == primaryPointer) {\n    \/\/ Another gesture won the arena.\n    assert(state != GestureRecognizerState.possible);\n    if (_sentTapDown &amp;&amp; onTapCancel != null)\n      invokeCallback&lt;void&gt;('forced onTapCancel', onTapCancel);\n    _reset();\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/rejectGesture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "rejectGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Resolves this recognizer's participation in each gesture arena with the\ngiven disposition.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid resolve(GestureDisposition disposition) {\n  if (_wonArenaForPrimaryPointer &amp;&amp; disposition == GestureDisposition.rejected) {\n    \/\/ This can happen if the superclass decides the primary pointer\n    \/\/ exceeded the touch slop, or if the recognizer is disposed.\n    assert(_sentTapDown);\n    if (onTapCancel != null)\n      invokeCallback&lt;void&gt;('spontaneous onTapCancel', onTapCancel);\n    _reset();\n  }\n  super.resolve(disposition);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/TapGestureRecognizer\/resolve.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "resolve",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": [
                {
                    "name": "disposition",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.GestureDisposition"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugDescription =&gt; 'tap';<\/code><\/pre>\n        ",
            "href": "gestures\/TapGestureRecognizer\/debugDescription.html",
            "name": "debugDescription",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.TapGestureRecognizer",
            "params": []
        }
    ]
}