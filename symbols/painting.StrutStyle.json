{
    "name": "painting.StrutStyle",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/StrutStyle\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final StrutStyle typedOther = other;\n  return fontFamily == typedOther.fontFamily &amp;&amp;\n         fontSize == typedOther.fontSize &amp;&amp;\n         fontWeight == typedOther.fontWeight &amp;&amp;\n         fontStyle == typedOther.fontStyle &amp;&amp;\n         height == typedOther.height &amp;&amp;\n         leading == typedOther.leading &amp;&amp;\n         forceStrutHeight == typedOther.forceStrutHeight;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StrutStyle",
            "type": "",
            "desc": "<p>Creates a strut style.<\/p>\n<p>The <code>package<\/code> argument must be non-null if the font family is defined in a\npackage. It is combined with the <code>fontFamily<\/code> argument to set the\n<code>fontFamily<\/code> property.<\/p>\n<p>If provided, fontSize must be positive and non-zero, leading must be zero or positive.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "leading",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "forceStrutHeight",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "package",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/StrutStyle\/StrutStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StrutStyle({\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  this.fontSize,\n  this.height,\n  this.leading,\n  this.fontWeight,\n  this.fontStyle,\n  this.forceStrutHeight,\n  this.debugLabel,\n  String package,\n}) : fontFamily = package == null ? fontFamily : 'packages\/$package\/$fontFamily',\n     _fontFamilyFallback = fontFamilyFallback,\n     _package = package,\n     assert(fontSize == null || fontSize &gt; 0),\n     assert(leading == null || leading &gt;= 0),\n     assert(package == null || (package != null &amp;&amp; (fontFamily != null || fontFamilyFallback != null)));<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "compareTo",
            "type": "painting.RenderComparison",
            "desc": "<p>Describe the difference between this style and another, in terms of how\nmuch damage it will make to the rendering.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/StrutStyle\/compareTo.html\">TextSpan.compareTo<\/a>, which does the same thing for entire <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.StrutStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/StrutStyle\/compareTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderComparison compareTo(StrutStyle other) {\n  if (identical(this, other))\n    return RenderComparison.identical;\n  if (fontFamily != other.fontFamily ||\n      fontSize != other.fontSize ||\n      fontWeight != other.fontWeight ||\n      fontStyle != other.fontStyle ||\n      height != other.height ||\n      leading != other.leading ||\n      forceStrutHeight != other.forceStrutHeight ||\n      !listEquals(fontFamilyFallback, other.fontFamilyFallback))\n    return RenderComparison.layout;\n  return RenderComparison.identical;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Adds all properties prefixing property names with the optional <code>prefix<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "prefix",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/StrutStyle\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties, { String prefix = '' }) {\n  super.debugFillProperties(properties);\n  if (debugLabel != null)\n    properties.add(MessageProperty('${prefix}debugLabel', debugLabel));\n  final List&lt;DiagnosticsNode&gt; styles = &lt;DiagnosticsNode&gt;[];\n  styles.add(StringProperty('${prefix}family', fontFamily, defaultValue: null, quoted: false));\n  styles.add(IterableProperty&lt;String&gt;('${prefix}familyFallback', fontFamilyFallback, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}size', fontSize, defaultValue: null));\n  String weightDescription;\n  if (fontWeight != null) {\n    weightDescription = 'w${fontWeight.index + 1}00';\n  }\n  \/\/ TODO(jacobr): switch this to use enumProperty which will either cause the\n  \/\/ weight description to change to w600 from 600 or require existing\n  \/\/ enumProperty to handle this special case.\n  styles.add(DiagnosticsProperty&lt;FontWeight&gt;(\n    '${prefix}weight',\n    fontWeight,\n    description: weightDescription,\n    defaultValue: null,\n  ));\n  styles.add(EnumProperty&lt;FontStyle&gt;('${prefix}style', fontStyle, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}height', height, unit: 'x', defaultValue: null));\n  styles.add(FlagProperty('${prefix}forceStrutHeight', value: forceStrutHeight, defaultValue: null));\n\n  final bool styleSpecified = styles.any((DiagnosticsNode n) =&gt; !n.isFiltered(DiagnosticLevel.info));\n  styles.forEach(properties.add);\n\n  if (!styleSpecified)\n    properties.add(FlagProperty('forceStrutHeight', value: forceStrutHeight, ifTrue: '$prefix&lt;strut height forced&gt;', ifFalse: '$prefix&lt;strut height normal&gt;'));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "StrutStyle.fromTextStyle",
            "type": "",
            "desc": "<p>Builds a StrutStyle that contains values of the equivalent properties in\nthe provided <code>textStyle<\/code>.<\/p>\n<p>The <code>textStyle<\/code> parameter must not be null.<\/p>\n<p>The named parameters override the <code>textStyle<\/code>'s argument's properties.\nSince TextStyle does not contain <code>leading<\/code> or <code>forceStrutHeight<\/code>, these values\nwill take on default values (null and false) unless otherwise specified.<\/p>\n<p>If provided, fontSize must be positive and non-zero, leading must be zero or positive.<\/p>\n<p>When <code>textStyle<\/code> has a package and a new <code>package<\/code> is also specified, the entire\nfont family fallback list should be redefined since the <code>textStyle<\/code>'s package data\nis inherited by being prepended onto the font family names. If\n<code>fontFamilyFallback<\/code> is meant to be empty, pass an empty list instead of null.\nThis prevents the previous package name from being prepended twice.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "textStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "leading",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "forceStrutHeight",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "package",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/StrutStyle\/StrutStyle.fromTextStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle.fromTextStyle(\n  TextStyle textStyle, {\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  double height,\n  this.leading, \/\/ TextStyle does not have an equivalent (yet).\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  this.forceStrutHeight,\n  String debugLabel,\n  String package,\n}) : assert(textStyle != null),\n     assert(fontSize == null || fontSize &gt; 0),\n     assert(leading == null || leading &gt;= 0),\n     assert(package == null || (package != null &amp;&amp; (fontFamily != null || fontFamilyFallback != null))),\n     fontFamily = fontFamily != null ? (package == null ? fontFamily : 'packages\/$package\/$fontFamily') : textStyle.fontFamily,\n     _fontFamilyFallback = fontFamilyFallback ?? textStyle.fontFamilyFallback,\n     height = height ?? textStyle.height,\n     fontSize = fontSize ?? textStyle.fontSize,\n     fontWeight = fontWeight ?? textStyle.fontWeight,\n     fontStyle = fontStyle ?? textStyle.fontStyle,\n     debugLabel = debugLabel ?? textStyle.debugLabel,\n     _package = package;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "inheritFromTextStyle",
            "type": "painting.StrutStyle",
            "desc": "<p>Returns a new strut style that inherits its null values from corresponding\nproperties in the <code>other<\/code> <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<p>The \"missing\" properties of the this strut style are <em>filled<\/em> by the properties\nof the provided <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>. This is possible because <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> shares many of\nthe same basic properties as <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<p>If the given text style is null, returns this strut style.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/StrutStyle\/inheritFromTextStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle inheritFromTextStyle(TextStyle other) {\n  if (other == null)\n    return this;\n\n  return StrutStyle(\n    fontFamily: fontFamily ?? other.fontFamily,\n    fontFamilyFallback: fontFamilyFallback ?? other.fontFamilyFallback,\n    fontSize: fontSize ?? other.fontSize,\n    height: height ?? other.height,\n    leading: leading, \/\/ No equivalent property in TextStyle yet.\n    fontWeight: fontWeight ?? other.fontWeight,\n    fontStyle: fontStyle ?? other.fontStyle,\n    forceStrutHeight: forceStrutHeight, \/\/ StrutStyle-unique property.\n    debugLabel: debugLabel ?? other.debugLabel,\n    \/\/ Package is embedded within the getters for fontFamilyFallback.\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toStringShort",
            "type": "dart:core.String",
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.StrutStyle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/StrutStyle\/toStringShort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "debugLabel",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A human-readable description of this strut style.<\/p>\n<p>This property is maintained only in debug builds.<\/p>\n<p>This property is not considered when comparing strut styles using <code>==<\/code> or\n<a href=\"painting\/StrutStyle\/compareTo.html\">compareTo<\/a>, and it does not affect <a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/debugLabel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugLabel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "painting\/StrutStyle\/disabled-constant.html",
            "desc": "<p>A <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> that will have no impact on the text layout.<\/p>\n<p>Equivalent to having no strut at all. All lines will be laid out according to\nthe properties defined in <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StrutStyle disabled = StrutStyle(\n  height: 0.0,\n  leading: 0.0,\n)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "disabled",
            "memberOf": "painting.StrutStyle"
        },
        {
            "name": "fontFamily",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The name of the font to use when calculating the strut (e.g., Roboto). If\nthe font is defined in a package, this will be prefixed with\n'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto'). The\nprefixing is done by the constructor when the <code>package<\/code> argument is\nprovided.<\/p>\n<p>The value provided in <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that will be searched for, followed in order by the font families\nin <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. If all font families are exhausted and no match\nwas found, the default platform font family will be used instead. Unlike\n<a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">TextStyle.fontFamilyFallback<\/a>, the font does not need to contain the\ndesired glyphs to match.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/fontFamily.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String fontFamily\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontFamilyFallback",
            "type": "dart:core.List<dart:core.String>",
            "types": [
                "dart:core.List",
                "dart:core.String"
            ],
            "desc": "<p>The ordered list of font families to fall back on when a higher priority\nfont family cannot be found.<\/p>\n<p>The value provided in <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that will be searched for, followed in order by the font families\nin <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. If all font families are exhausted and no match\nwas found, the default platform font family will be used instead. Unlike\n<a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">TextStyle.fontFamilyFallback<\/a>, the font does not need to contain the\ndesired glyphs to match.<\/p>\n<p>When <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> is null or not provided, the first value in <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>\nacts as the preferred\/first font family. When neither is provided, then\nthe default platform font will be used. Providing and empty list or null\nfor this property is the same as omitting it.<\/p>\n<p>If the font is defined in a package, each font family in the list will be\nprefixed with 'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto').\nThe package name should be provided by the <code>package<\/code> argument in the\nconstructor.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/fontFamilyFallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; get fontFamilyFallback {\n  if (_package != null &amp;&amp; _fontFamilyFallback != null)\n    return _fontFamilyFallback.map((String family) =&gt; 'packages\/$_package\/$family').toList();\n  return _fontFamilyFallback;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontSize",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The size of text (in logical pixels) to use when obtaining metrics from the font.<\/p>\n<p>The <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a> is used to get the base set of metrics that are then used to calculated\nthe metrics of strut. The height and leading are expressed as a multiple of\n<a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>.<\/p>\n<p>The default fontSize is 14 logical pixels.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/fontSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double fontSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontStyle",
            "type": "dart:ui.FontStyle",
            "types": [],
            "desc": "<p>The typeface variant to use when calculating the strut (e.g., italics).<\/p>\n<p>The default fontStyle is <a href=\"dart-ui\/FontStyle-class.html\">FontStyle.normal<\/a>.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/fontStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontStyle fontStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontWeight",
            "type": "dart:ui.FontWeight",
            "types": [],
            "desc": "<p>The typeface thickness to use when calculating the strut (e.g., bold).<\/p>\n<p>The default fontWeight is <a href=\"dart-ui\/FontWeight\/w400-constant.html\">FontWeight.w400<\/a>.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/fontWeight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontWeight fontWeight\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "forceStrutHeight",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the strut height should be forced.<\/p>\n<p>When true, all lines will be laid out with the height of the\nstrut. All line and run-specific metrics will be ignored\/overridden and only strut\nmetrics will be used instead. This property guarantees uniform line spacing, however\ntext in adjacent lines may overlap.<\/p>\n<p>This property should be enabled with caution as\nit bypasses a large portion of the vertical layout system.<\/p>\n<p>This is equivalent to setting <a href=\"painting\/StrutStyle\/height.html\">TextStyle.height<\/a> to zero for all <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s\nin the paragraph. Since the height of each line is calculated as a max of the\nmetrics of each run of text, zero height <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s cause the minimums\ndefined by strut to always manifest, resulting in all lines having the height\nof the strut.<\/p>\n<p>The default is false.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/forceStrutHeight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool forceStrutHeight\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    fontFamily,\n    fontSize,\n    fontWeight,\n    fontStyle,\n    height,\n    leading,\n    forceStrutHeight,\n  );\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "height",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a> to multiply the ascent and descent by where <code>ascent + descent = fontSize<\/code>.<\/p>\n<p>Ascent is the spacing above the baseline and descent is the spacing below the baseline.<\/p>\n<p>The <a href=\"painting\/StrutStyle\/height.html\">height<\/a> will impact the spacing above and below the baseline differently\ndepending on the ratios between the font's ascent and descent. This property is\nseparate from the leading multiplier, which is controlled through <a href=\"painting\/StrutStyle\/leading.html\">leading<\/a>.<\/p>\n<p>The default height is 1.0.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "leading",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The custom leading to apply to the strut as a multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>.<\/p>\n<p>Leading is additional spacing between lines. Half of the leading is added\nto the top and the other half to the bottom of the line. This differs\nfrom <a href=\"painting\/StrutStyle\/height.html\">height<\/a> since the spacing is equally distributed above and below the\nbaseline.<\/p>\n<p>The default leading is null, which will use the font-specified leading.<\/p>\n        ",
            "memberOf": "painting.StrutStyle",
            "isConstant": false,
            "href": "painting\/StrutStyle\/leading.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double leading\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/StrutStyle-class.html",
    "desc": "<p>Defines the strut, which sets the minimum height a line can be\nrelative to the baseline. Strut applies to all lines in the paragraph.<\/p>\n<p>Strut is a feature that allows minimum line heights to be set. The effect is as\nif a zero width space was included at the beginning of each line in the\nparagraph. This imaginary space is 'shaped' according the properties defined\nin this class. Flutter's strut is based on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Strut_(typesetting)\">typesetting strut<\/a>\nand CSS's <a href=\"https:\/\/www.w3.org\/TR\/CSS2\/visudet.html#line-height\">line-height<\/a>.<\/p>\n<p>No lines may be shorter than the strut. The ascent and descent of the strut\nare calculated, and any laid out text that has a shorter ascent or descent than\nthe strut's ascent or descent will take the ascent and descent of the strut.\nText with ascents or descents larger than the strut's ascent or descent will lay\nout as normal and extend past the strut.<\/p>\n<p>Strut is defined independently from any text content or <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s.<\/p>\n<p>The vertical components of strut are as follows:<\/p>\n<ul>\n<li>\n<code>leading * fontSize \/ 2<\/code> or half the font leading if <code>leading<\/code> is undefined (half leading)<\/li>\n<li><code>ascent * height<\/code><\/li>\n<li><code>descent * height<\/code><\/li>\n<li>\n<code>leading * fontSize \/ 2<\/code> or half the font leading if <code>leading<\/code> is undefined (half leading)<\/li>\n<\/ul>\n<p>The sum of these four values is the total height of the line.<\/p>\n<p>The <code>ascent + descent<\/code> is equivalent to the <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>. Ascent is the font's\nspacing above the baseline without leading and descent is the spacing below the\nbaseline without leading. Leading is split evenly between the top and bottom.\nThe values for <code>ascent<\/code> and <code>descent<\/code> are provided by the font named by\n<a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a>. If no <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> or <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> is provided, then the\nplatform's default family will be used.<\/p>\n<p>Each line's spacing above the baseline will be at least as tall as the half\nleading plus ascent. Each line's spacing below the baseline will be at least as\ntall as the half leading plus descent.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/dart-ui\/StrutStyle-class.html\">StrutStyle<\/a>, the class in the <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> library.<\/li><\/ul>\n<h3 id=\"fields-and-their-default-values\">Fields and their default values.<\/h3>\n<p>Omitted or null properties will take the default values specified below:<\/p>\n<ul>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a>: the name of the font to use when calculating the strut\n(e.g., Roboto). No glyphs from the font will be drawn and the font will\nbe used purely for metrics.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>: an ordered list of font family names that will be searched for when\nthe font in <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> cannot be found. When all specified font families have been\nexhausted an no match was found, the default platform font will be used.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>: the size of the ascent plus descent in logical pixels. This\nis also used as the basis of the custom leading calculation. This value\ncannot be negative.\nDefault is 14 logical pixels.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/height.html\">height<\/a>: the multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a> to multiply the ascent and descent by.\nThe <a href=\"painting\/StrutStyle\/height.html\">height<\/a> will impact the spacing above and below the baseline differently\ndepending on the ratios between the font's ascent and descent. This property is\nseparate from the leading multiplier, which is controlled through <a href=\"painting\/StrutStyle\/leading.html\">leading<\/a>.\nDefault is 1.0.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/leading.html\">leading<\/a>: the custom leading to apply to the strut as a multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>.\nLeading is additional spacing between lines. Half of the leading is added\nto the top and the other half to the bottom of the line height. This differs\nfrom <a href=\"painting\/StrutStyle\/height.html\">height<\/a> since the spacing is equally distributed above and below the\nbaseline.\nDefault is <code>null<\/code>, which will use the font-specified leading.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontWeight.html\">fontWeight<\/a>: the typeface thickness to use when calculating the strut (e.g., bold).\nDefault is <a href=\"dart-ui\/FontWeight\/w400-constant.html\">FontWeight.w400<\/a>.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontStyle.html\">fontStyle<\/a>: the typeface variant to use when calculating the strut (e.g., italic).\nDefault is <a href=\"dart-ui\/FontStyle-class.html\">FontStyle.normal<\/a>.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/forceStrutHeight.html\">forceStrutHeight<\/a>: when true, all lines will be laid out with the height of the\nstrut. All line and run-specific metrics will be ignored\/overridden and only strut\nmetrics will be used instead. This property guarantees uniform line spacing, however\ntext in adjacent lines may overlap. This property should be enabled with caution as\nit bypasses a large portion of the vertical layout system.\nThe default value is false.<\/p>\n<\/li>\n<\/ul>\n<h3 id=\"examples\">Examples<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn this simple case, the text will be rendered at font size 10, however, the vertical\nheight of each line will be the strut height (Roboto in font size 30 * 1.5) as the text\nitself is shorter than the strut.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text(\n  'Hello, world!\\nSecond line!',\n  style: TextStyle(\n    fontSize: 10,\n    fontFamily: 'Raleway',\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Roboto',\n    fontSize: 30,\n    height: 1.5,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, strut is used to absorb the additional line height in the second line.\nThe strut <a href=\"painting\/StrutStyle\/height.html\">height<\/a> was defined as 1.5 (the default font size is 14), which\ncaused all lines to be laid out taller than without strut. This extra space\nwas able to accommodate the larger font size of <code>Second line!<\/code> without\ncausing the line height to change for the second line only. All lines in\nthis example are thus the same height (<code>14 * 1.5<\/code>).\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text.rich(\n  TextSpan(\n    text: 'First line!\\n',\n    style: TextStyle(\n      fontSize: 14,\n      fontFamily: 'Roboto'\n    ),\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'Second line!\\n',\n        style: TextStyle(\n          fontSize: 16,\n          fontFamily: 'Roboto',\n        ),\n      ),\n      TextSpan(\n        text: 'Third line!\\n',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Roboto',\n        ),\n      ),\n    ],\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Roboto',\n    height: 1.5,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, strut is used to enable strange and overlapping text to achieve unique\neffects. The <code>M<\/code>s in lines 2 and 3 are able to extend above their lines and\nfill empty space in lines above. The <a href=\"painting\/StrutStyle\/forceStrutHeight.html\">forceStrutHeight<\/a> is enabled and functions\nas a 'grid' for the glyphs to draw on.\n<p><img alt=\"The result of the example below.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/painting\/strut_force_example.png\"><\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text.rich(\n  TextSpan(\n    text: '---------         ---------\\n',\n    style: TextStyle(\n      fontSize: 14,\n      fontFamily: 'Roboto',\n    ),\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: '^^^M^^^\\n',\n        style: TextStyle(\n          fontSize: 30,\n          fontFamily: 'Roboto',\n        ),\n      ),\n      TextSpan(\n        text: 'M------M\\n',\n        style: TextStyle(\n          fontSize: 30,\n          fontFamily: 'Roboto',\n        ),\n      ),\n    ],\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Roboto',\n    fontSize: 14,\n    height: 1,\n    forceStrutHeight: true,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example uses forceStrutHeight to create a 'drop cap' for the 'T' in 'The'.\nBy locking the line heights to the metrics of the 14pt serif font, we are able\nto lay out a large 37pt 'T' on the second line to take up space on both the first\nand second lines.\n<p><img alt=\"The result of the example below.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/painting\/strut_force_example_2.png\"><\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text.rich(\n  TextSpan(\n    text: '      \u2009he candle flickered\\n',\n    style: TextStyle(\n      fontSize: 14,\n      fontFamily: 'Serif'\n    ),\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'T',\n        style: TextStyle(\n          fontSize: 37,\n          fontFamily: 'Serif'\n        ),\n      ),\n      TextSpan(\n        text: 'in the moonlight as\\n',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Serif'\n        ),\n      ),\n      TextSpan(\n        text: 'Dash the bird fluttered\\n',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Serif'\n        ),\n      ),\n      TextSpan(\n        text: 'off into the distance.',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Serif'\n        ),\n      ),\n    ],\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Serif',\n    fontSize: 14,\n    forceStrutHeight: true,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StrutStyle"
}