{
    "desc": "<p>Base class for <a href=\"painting\/Alignment-class.html\">Alignment<\/a> that allows for text-direction aware\nresolution.<\/p>\n<p>A property or argument of this type accepts classes created either with <a href=\"painting\/Alignment\/Alignment.html\">new\nAlignment<\/a> and its variants, or <a href=\"painting\/AlignmentDirectional\/AlignmentDirectional.html\">new AlignmentDirectional<\/a>.<\/p>\n<p>To convert an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> object of indeterminate type into an\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a> object, call the <a href=\"painting\/AlignmentGeometry\/resolve.html\">resolve<\/a> method.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "painting\/AlignmentGeometry-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.AlignmentGeometry",
    "shortname": "AlignmentGeometry",
    "extends": [],
    "realImplementors": [
        "painting.Alignment",
        "painting.AlignmentDirectional",
        "painting.FractionalOffset",
        "rendering.AlignmentGeometryTween"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlignmentGeometry();<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentGeometry\/AlignmentGeometry.html",
            "isDeprecated": "0",
            "type": "",
            "name": "AlignmentGeometry",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.AlignmentGeometry",
            "params": []
        },
        {
            "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/Alignment-class.html\">Alignment<\/a> or two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/AlignmentGeometry\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/AlignmentGeometry\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry add(AlignmentGeometry other) {\n  return _MixedAlignment(\n    _x + other._x,\n    _start + other._start,\n    _y + other._y,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentGeometry\/add.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentGeometry",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentGeometry"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>, and\nthe result is an object of the same type as the non-null argument.<\/p>\n<p>If <a href=\"painting\/AlignmentGeometry\/lerp.html\">lerp<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/AlignmentGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AlignmentGeometry lerp(AlignmentGeometry a, AlignmentGeometry b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  if (a is Alignment &amp;&amp; b is Alignment)\n    return Alignment.lerp(a, b, t);\n  if (a is AlignmentDirectional &amp;&amp; b is AlignmentDirectional)\n    return AlignmentDirectional.lerp(a, b, t);\n  return _MixedAlignment(\n    ui.lerpDouble(a._x, b._x, t),\n    ui.lerpDouble(a._start, b._start, t),\n    ui.lerpDouble(a._y, b._y, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentGeometry\/lerp.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentGeometry",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Convert this instance into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses literal\ncoordinates (the <code>x<\/code> coordinate being explicitly a distance from the\nleft).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Alignment resolve(TextDirection direction);<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentGeometry\/resolve.html",
            "isDeprecated": "0",
            "type": "painting.Alignment",
            "name": "resolve",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentGeometry",
            "params": [
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_start == 0.0)\n    return Alignment._stringify(_x, _y);\n  if (_x == 0.0)\n    return AlignmentDirectional._stringify(_start, _y);\n  return Alignment._stringify(_x, _y) + ' + ' + AlignmentDirectional._stringify(_start, 0.0);\n}<\/code><\/pre>\n    ",
            "href": "painting\/AlignmentGeometry\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.AlignmentGeometry",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/AlignmentGeometry\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_x, _start, _y);<\/code><\/pre>\n        ",
            "href": "painting\/AlignmentGeometry\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "painting.AlignmentGeometry",
            "params": []
        }
    ]
}