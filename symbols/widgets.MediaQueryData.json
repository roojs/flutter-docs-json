{
    "desc": "<p>Information about a piece of media (e.g., a window).<\/p>\n<p>For example, the <a href=\"widgets\/MediaQueryData\/size.html\">MediaQueryData.size<\/a> property contains the width and\nheight of the current window.<\/p>\n<p>To obtain the current <a href=\"widgets\/MediaQueryData-class.html\">MediaQueryData<\/a> for a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, use the\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a> function. For example, to obtain the size of the current\nwindow, use <code>MediaQuery.of(context).size<\/code>.<\/p>\n<p>If no <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> is in scope then the <a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a> method will throw an\nexception, unless the <code>nullOk<\/code> argument is set to true, in which case it\nreturns null.<\/p>\n<p>MediaQueryData includes two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> values:\n<a href=\"widgets\/MediaQueryData\/padding.html\">padding<\/a> and <a href=\"widgets\/MediaQueryData\/viewInsets.html\">viewInsets<\/a>. These\nvalues reflect the configuration of the device and are used by\nmany top level widgets, like <a href=\"widgets\/SafeArea-class.html\">SafeArea<\/a> and the Cupertino and\nMaterial scaffold widgets. The padding value defines areas that\nmight not be completely visible, like the display \"notch\" on the\niPhone X. The viewInsets value defines areas that aren't visible at\nall, typically because they're obscured by the device's keyboard.<\/p>\n<p>The viewInsets and padding values are independent, they're both\nmeasured from the edges of the MediaQuery widget's bounds. The\nbounds of the top level MediaQuery created by <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> are the\nsame as the window that contains the app.<\/p>\n<p>Widgets whose layouts consume space defined by <a href=\"widgets\/MediaQueryData\/viewInsets.html\">viewInsets<\/a> or\n<a href=\"widgets\/MediaQueryData\/padding.html\">padding<\/a> should enclose their children in secondary MediaQuery\nwidgets that reduce those properties by the same amount.\nThe <a href=\"widgets\/MediaQueryData\/removePadding.html\">removePadding<\/a> and <code>removeInsets<\/code> methods are useful for this.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/MediaQueryData-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.MediaQueryData",
    "shortname": "MediaQueryData",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates data for a media query with explicit values.<\/p>\n<p>Consider using <a href=\"widgets\/MediaQueryData\/MediaQueryData.fromWindow.html\">MediaQueryData.fromWindow<\/a> to create data based on a\n<a href=\"dart-ui\/Window-class.html\">Window<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MediaQueryData({\n  this.size = Size.zero,\n  this.devicePixelRatio = 1.0,\n  this.textScaleFactor = 1.0,\n  this.platformBrightness = Brightness.light,\n  this.padding = EdgeInsets.zero,\n  this.viewInsets = EdgeInsets.zero,\n  this.alwaysUse24HourFormat = false,\n  this.accessibleNavigation = false,\n  this.invertColors = false,\n  this.disableAnimations = false,\n  this.boldText = false,\n});<\/code><\/pre>\n    ",
            "href": "widgets\/MediaQueryData\/MediaQueryData.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.MediaQueryData",
            "params": [
                {
                    "name": "accessibleNavigation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "alwaysUse24HourFormat",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "boldText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "devicePixelRatio",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "disableAnimations",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "invertColors",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsets"
                },
                {
                    "name": "platformBrightness",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Size"
                },
                {
                    "name": "textScaleFactor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "viewInsets",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsets"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this media query data but with the given fields replaced\nwith the new values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MediaQueryData copyWith({\n  Size size,\n  double devicePixelRatio,\n  double textScaleFactor,\n  Brightness platformBrightness,\n  EdgeInsets padding,\n  EdgeInsets viewInsets,\n  bool alwaysUse24HourFormat,\n  bool disableAnimations,\n  bool invertColors,\n  bool accessibleNavigation,\n  bool boldText,\n}) {\n  return MediaQueryData(\n    size: size ?? this.size,\n    devicePixelRatio: devicePixelRatio ?? this.devicePixelRatio,\n    textScaleFactor: textScaleFactor ?? this.textScaleFactor,\n    platformBrightness: platformBrightness ?? this.platformBrightness,\n    padding: padding ?? this.padding,\n    viewInsets: viewInsets ?? this.viewInsets,\n    alwaysUse24HourFormat: alwaysUse24HourFormat ?? this.alwaysUse24HourFormat,\n    invertColors: invertColors ?? this.invertColors,\n    disableAnimations: disableAnimations ?? this.disableAnimations,\n    accessibleNavigation: accessibleNavigation ?? this.accessibleNavigation,\n    boldText: boldText ?? this.boldText,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/MediaQueryData\/copyWith.html",
            "isDeprecated": "0",
            "type": "widgets.MediaQueryData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.MediaQueryData",
            "params": [
                {
                    "name": "accessibleNavigation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "alwaysUse24HourFormat",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "boldText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "devicePixelRatio",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "disableAnimations",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "invertColors",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.EdgeInsets"
                },
                {
                    "name": "platformBrightness",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                },
                {
                    "name": "textScaleFactor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "viewInsets",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.EdgeInsets"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this media query data but with the given <a href=\"widgets\/MediaQueryData\/padding.html\">padding<\/a>s\nreplaced with zero.<\/p>\n<p>The <code>removeLeft<\/code>, <code>removeTop<\/code>, <code>removeRight<\/code>, and <code>removeBottom<\/code> arguments\nmust not be null. If all four are false (the default) then this\n<a href=\"widgets\/MediaQueryData-class.html\">MediaQueryData<\/a> is returned unmodified.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/MediaQueryData\/removePadding.html\">new MediaQuery.removePadding<\/a>, which uses this method to remove padding\nfrom the ambient <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>.<\/li>\n<li>\n<a href=\"widgets\/SafeArea-class.html\">SafeArea<\/a>, which both removes the padding from the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> and\nadds a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget.<\/li>\n<li>\n<a href=\"widgets\/MediaQueryData\/removeViewInsets.html\">removeViewInsets<\/a>, the same thing but for <a href=\"widgets\/MediaQueryData\/viewInsets.html\">viewInsets<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MediaQueryData removePadding({\n  bool removeLeft = false,\n  bool removeTop = false,\n  bool removeRight = false,\n  bool removeBottom = false,\n}) {\n  if (!(removeLeft || removeTop || removeRight || removeBottom))\n    return this;\n  return MediaQueryData(\n    size: size,\n    devicePixelRatio: devicePixelRatio,\n    textScaleFactor: textScaleFactor,\n    platformBrightness: platformBrightness,\n    padding: padding.copyWith(\n      left: removeLeft ? 0.0 : null,\n      top: removeTop ? 0.0 : null,\n      right: removeRight ? 0.0 : null,\n      bottom: removeBottom ? 0.0 : null,\n    ),\n    viewInsets: viewInsets,\n    alwaysUse24HourFormat: alwaysUse24HourFormat,\n    disableAnimations: disableAnimations,\n    invertColors: invertColors,\n    accessibleNavigation: accessibleNavigation,\n    boldText: boldText,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/MediaQueryData\/removePadding.html",
            "isDeprecated": "0",
            "type": "widgets.MediaQueryData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.MediaQueryData",
            "params": [
                {
                    "name": "removeBottom",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "removeLeft",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "removeRight",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "removeTop",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this media query data but with the given <a href=\"widgets\/MediaQueryData\/viewInsets.html\">viewInsets<\/a>\nreplaced with zero.<\/p>\n<p>The <code>removeLeft<\/code>, <code>removeTop<\/code>, <code>removeRight<\/code>, and <code>removeBottom<\/code> arguments\nmust not be null. If all four are false (the default) then this\n<a href=\"widgets\/MediaQueryData-class.html\">MediaQueryData<\/a> is returned unmodified.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/MediaQueryData\/removeViewInsets.html\">new MediaQuery.removeViewInsets<\/a>, which uses this method to remove\npadding from the ambient <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>.<\/li>\n<li>\n<a href=\"widgets\/MediaQueryData\/removePadding.html\">removePadding<\/a>, the same thing but for <a href=\"widgets\/MediaQueryData\/padding.html\">padding<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MediaQueryData removeViewInsets({\n  bool removeLeft = false,\n  bool removeTop = false,\n  bool removeRight = false,\n  bool removeBottom = false,\n}) {\n  if (!(removeLeft || removeTop || removeRight || removeBottom))\n    return this;\n  return MediaQueryData(\n    size: size,\n    devicePixelRatio: devicePixelRatio,\n    textScaleFactor: textScaleFactor,\n    platformBrightness: platformBrightness,\n    padding: padding,\n    viewInsets: viewInsets.copyWith(\n      left: removeLeft ? 0.0 : null,\n      top: removeTop ? 0.0 : null,\n      right: removeRight ? 0.0 : null,\n      bottom: removeBottom ? 0.0 : null,\n    ),\n    alwaysUse24HourFormat: alwaysUse24HourFormat,\n    disableAnimations: disableAnimations,\n    invertColors: invertColors,\n    accessibleNavigation: accessibleNavigation,\n    boldText: boldText,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/MediaQueryData\/removeViewInsets.html",
            "isDeprecated": "0",
            "type": "widgets.MediaQueryData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.MediaQueryData",
            "params": [
                {
                    "name": "removeBottom",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "removeLeft",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "removeRight",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "removeTop",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType('\n           'size: $size, '\n           'devicePixelRatio: ${devicePixelRatio.toStringAsFixed(1)}, '\n           'textScaleFactor: ${textScaleFactor.toStringAsFixed(1)}, '\n           'platformBrightness: $platformBrightness, '\n           'padding: $padding, '\n           'viewInsets: $viewInsets, '\n           'alwaysUse24HourFormat: $alwaysUse24HourFormat, '\n           'accessibleNavigation: $accessibleNavigation'\n           'disableAnimations: $disableAnimations'\n           'invertColors: $invertColors'\n           'boldText: $boldText'\n         ')';\n}<\/code><\/pre>\n    ",
            "href": "widgets\/MediaQueryData\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.MediaQueryData",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the user is using an accessibility service like TalkBack or\nVoiceOver to interact with the application.<\/p>\n<p>When this setting is true, features such as timeouts should be disabled or\nhave minimum durations increased.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>Window.AccessibilityFeatures<\/code>, where the setting originates.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool accessibleNavigation\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/accessibleNavigation.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>Whether to use 24-hour format when formatting time.<\/p>\n<p>The behavior of this flag is different across platforms:<\/p>\n<ul>\n<li>On Android this flag is reported directly from the user settings called\n\"Use 24-hour format\". It applies to any locale used by the application,\nwhether it is the system-wide locale, or the custom locale set by the\napplication.<\/li>\n<li>On iOS this flag is set to true when the user setting called \"24-Hour\nTime\" is set or the system-wide locale's default uses 24-hour\nformatting.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool alwaysUse24HourFormat\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/alwaysUse24HourFormat.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>Whether the platform is requesting that text be drawn with a bold font\nweight.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>Window.AccessibilityFeatures<\/code>, where the setting originates.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool boldText\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/boldText.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The number of device pixels for each logical pixel. This number might not\nbe a power of two. Indeed, it might not even be an integer. For example,\nthe Nexus 6 has a device pixel ratio of 3.5.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double devicePixelRatio\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/devicePixelRatio.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>Whether the platform is requesting that animations be disabled or reduced\nas much as possible.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>Window.AccessibilityFeatures<\/code>, where the setting originates.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool disableAnimations\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/disableAnimations.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"widgets\/MediaQueryData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"widgets\/MediaQueryData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"widgets\/MediaQueryData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"widgets\/MediaQueryData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"widgets\/MediaQueryData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"widgets\/MediaQueryData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    size,\n    devicePixelRatio,\n    textScaleFactor,\n    platformBrightness,\n    padding,\n    viewInsets,\n    alwaysUse24HourFormat,\n    disableAnimations,\n    invertColors,\n    accessibleNavigation,\n    boldText,\n  );\n}<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>Whether the device is inverting the colors of the platform.<\/p>\n<p>This flag is currently only updated on iOS devices.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>Window.AccessibilityFeatures<\/code>, where the setting originates.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool invertColors\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/invertColors.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The orientation of the media (e.g., whether the device is in landscape or portrait mode).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Orientation get orientation {\n  return size.width &gt; size.height ? Orientation.landscape : Orientation.portrait;\n}<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/orientation.html",
            "isDeprecated": "0",
            "type": "widgets.Orientation",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The parts of the display that are partially obscured by system UI,\ntypically by the hardware display \"notches\" or the system status bar.<\/p>\n<p>If you consumed this padding (e.g. by building a widget that envelops or\naccounts for this padding in its layout in such a way that children are\nno longer exposed to this padding), you should remove this padding\nfor subsequent descendants in the widget tree by inserting a new\n<a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> widget using the <a href=\"widgets\/MediaQueryData\/removePadding.html\">MediaQuery.removePadding<\/a> factory.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/MediaQueryData-class.html\">MediaQueryData<\/a>, which provides some additional detail about this\nproperty and how it differs from <a href=\"widgets\/MediaQueryData\/viewInsets.html\">viewInsets<\/a>.<\/li>\n<li>\n<a href=\"widgets\/SafeArea-class.html\">SafeArea<\/a>, a widget that consumes this padding with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget\nand automatically removes it from the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> for its child.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsets padding\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsets",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The current brightness mode of the host platform.<\/p>\n<p>For example, starting in Android Pie, battery saver mode asks all apps to\nrender in a \"dark mode\".<\/p>\n<p>Not all platforms necessarily support a concept of brightness mode. Those\nplatforms will report <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a> in this property.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness platformBrightness\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/platformBrightness.html",
            "isDeprecated": "0",
            "type": "dart:ui.Brightness",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The size of the media in logical pixels (e.g, the size of the screen).<\/p>\n<p>Logical pixels are roughly the same visual size across devices. Physical\npixels are the size of the actual hardware pixels on the device. The\nnumber of physical pixels per logical pixel is described by the\n<a href=\"widgets\/MediaQueryData\/devicePixelRatio.html\">devicePixelRatio<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size size\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/size.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/MediaQuery\/textScaleFactorOf.html\">MediaQuery.textScaleFactorOf<\/a>, a convenience method which returns the\ntextScaleFactor defined for a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double textScaleFactor\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/textScaleFactor.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        },
        {
            "desc": "<p>The parts of the display that are completely obscured by system UI,\ntypically by the device's keyboard.<\/p>\n<p>When a mobile device's keyboard is visible <code>viewInsets.bottom<\/code>\ncorresponds to the top of the keyboard.<\/p>\n<p>This value is independent of the <a href=\"widgets\/MediaQueryData\/padding.html\">padding<\/a>: both values are\nmeasured from the edges of the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> widget's bounds. The\nbounds of the top level MediaQuery created by <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> are the\nsame as the window (often the mobile device screen) that contains the app.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/MediaQueryData-class.html\">MediaQueryData<\/a>, which provides some additional detail about this\nproperty and how it differs from <a href=\"widgets\/MediaQueryData\/padding.html\">padding<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsets viewInsets\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/MediaQueryData\/viewInsets.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsets",
            "memberOf": "widgets.MediaQueryData",
            "params": []
        }
    ]
}