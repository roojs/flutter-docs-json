{
    "desc": "<p>Interface for classes that register with the Widgets layer binding.<\/p>\n<p>When used as a mixin, provides no-op method implementations.<\/p>\n<p>See <a href=\"widgets\/WidgetsBinding\/addObserver.html\">WidgetsBinding.addObserver<\/a> and <a href=\"widgets\/WidgetsBinding\/removeObserver.html\">WidgetsBinding.removeObserver<\/a>.<\/p>\n<p>This class can be extended directly, to get default behaviors for all of the\nhandlers, or can used with the <code>implements<\/code> keyword, in which case all the\nhandlers must be implemented (and the analyzer will list those that have\nbeen omitted).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> implements the parts of the <a href=\"widgets\/State-class.html\">State<\/a> and\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a> protocols necessary to react to application\nlifecycle messages. See <a href=\"widgets\/WidgetsBindingObserver\/didChangeAppLifecycleState.html\">didChangeAppLifecycleState<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class AppLifecycleReactor extends StatefulWidget {\n  const AppLifecycleReactor({ Key key }) : super(key: key);\n\n  @override\n  _AppLifecycleReactorState createState() =&gt; _AppLifecycleReactorState();\n}\n\nclass _AppLifecycleReactorState extends State&lt;AppLifecycleReactor&gt; with WidgetsBindingObserver {\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addObserver(this);\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    super.dispose();\n  }\n\n  AppLifecycleState _notification;\n\n  @override\n  void didChangeAppLifecycleState(AppLifecycleState state) {\n    setState(() { _notification = state; });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Text('Last notification: $_notification');\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>To respond to other notifications, replace the <a href=\"widgets\/WidgetsBindingObserver\/didChangeAppLifecycleState.html\">didChangeAppLifecycleState<\/a>\nmethod above with other methods from this class.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/WidgetsBindingObserver-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.WidgetsBindingObserver",
    "shortname": "WidgetsBindingObserver",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "widgets\/WidgetsBindingObserver\/WidgetsBindingObserver.html",
            "isDeprecated": false,
            "type": "",
            "name": "WidgetsBindingObserver",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the system changes the set of currently active accessibility\nfeatures.<\/p>\n<p>This method exposes notifications from <a href=\"dart-ui\/Window\/onAccessibilityFeaturesChanged.html\">Window.onAccessibilityFeaturesChanged<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChangeAccessibilityFeatures() { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didChangeAccessibilityFeatures.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeAccessibilityFeatures",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the system puts the app in the background or returns\nthe app to the foreground.<\/p>\n<p>An example of implementing this method is provided in the class-level\ndocumentation for the <a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a> class.<\/p>\n<p>This method exposes notifications from <a href=\"services\/SystemChannels\/lifecycle-constant.html\">SystemChannels.lifecycle<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChangeAppLifecycleState(AppLifecycleState state) { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didChangeAppLifecycleState.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeAppLifecycleState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": [
                {
                    "name": "state",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.AppLifecycleState"
                }
            ]
        },
        {
            "desc": "<p>Called when the system tells the app that the user's locale has\nchanged. For example, if the user changes the system language\nsettings.<\/p>\n<p>This method exposes notifications from <a href=\"dart-ui\/Window\/onLocaleChanged.html\">Window.onLocaleChanged<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChangeLocales(List&lt;Locale&gt; locale) { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didChangeLocales.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeLocales",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": [
                {
                    "name": "locale",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:ui.Locale>"
                }
            ]
        },
        {
            "desc": "<p>Called when the application's dimensions change. For example,\nwhen a phone is rotated.<\/p>\n<p>This method exposes notifications from <a href=\"dart-ui\/Window\/onMetricsChanged.html\">Window.onMetricsChanged<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> implements the parts of the <a href=\"widgets\/State-class.html\">State<\/a> and\n<a href=\"widgets\/WidgetsBindingObserver-class.html\">WidgetsBindingObserver<\/a> protocols necessary to react when the device is\nrotated (or otherwise changes dimensions).\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MetricsReactor extends StatefulWidget {\n  const MetricsReactor({ Key key }) : super(key: key);\n\n  @override\n  _MetricsReactorState createState() =&gt; _MetricsReactorState();\n}\n\nclass _MetricsReactorState extends State&lt;MetricsReactor&gt; with WidgetsBindingObserver {\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addObserver(this);\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    super.dispose();\n  }\n\n  Size _lastSize;\n\n  @override\n  void didChangeMetrics() {\n    setState(() { _lastSize = WidgetsBinding.instance.window.physicalSize; });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Text('Current size: $_lastSize');\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>In general, this is unnecessary as the layout system takes care of\nautomatically recomputing the application geometry when the application\nsize changes.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, which provides a similar service with less\nboilerplate.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChangeMetrics() { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didChangeMetrics.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeMetrics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the platform brightness changes.<\/p>\n<p>The current platform brightness can be queried either from a Flutter\nbinding, or from a <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> widget.<\/p>\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}Querying [Window.platformBrightness].{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Brightness brightness = WidgetsBinding.instance.window.platformBrightness;<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}Querying [MediaQuery] directly.{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Brightness brightness = MediaQuery.platformBrightnessOf(context);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>{@inject-html}<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">{@end-inject-html}Querying [MediaQueryData].{@inject-html}<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final MediaQueryData mediaQueryData = MediaQuery.of(context);\nfinal Brightness brightness = mediaQueryData.platformBrightness;<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n{@end-inject-html}\n<p>See <a href=\"dart-ui\/Window\/onPlatformBrightnessChanged.html\">Window.onPlatformBrightnessChanged<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChangePlatformBrightness() { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didChangePlatformBrightness.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangePlatformBrightness",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the platform's text scale factor changes.<\/p>\n<p>This typically happens as the result of the user changing system\npreferences, and it should affect all of the text sizes in the\napplication.<\/p>\n<p>This method exposes notifications from <a href=\"dart-ui\/Window\/onTextScaleFactorChanged.html\">Window.onTextScaleFactorChanged<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class TextScaleFactorReactor extends StatefulWidget {\n  const TextScaleFactorReactor({ Key key }) : super(key: key);\n\n  @override\n  _TextScaleFactorReactorState createState() =&gt; _TextScaleFactorReactorState();\n}\n\nclass _TextScaleFactorReactorState extends State&lt;TextScaleFactorReactor&gt; with WidgetsBindingObserver {\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addObserver(this);\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    super.dispose();\n  }\n\n  double _lastTextScaleFactor;\n\n  @override\n  void didChangeTextScaleFactor() {\n    setState(() { _lastTextScaleFactor = WidgetsBinding.instance.window.textScaleFactor; });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Text('Current scale factor: $_lastTextScaleFactor');\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, which provides a similar service with less\nboilerplate.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didChangeTextScaleFactor() { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didChangeTextScaleFactor.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeTextScaleFactor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the system is running low on memory.<\/p>\n<p>This method exposes the <code>memoryPressure<\/code> notification from\n<a href=\"services\/SystemChannels\/system-constant.html\">SystemChannels.system<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didHaveMemoryPressure() { }<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didHaveMemoryPressure.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didHaveMemoryPressure",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the system tells the app to pop the current route.\nFor example, on Android, this is called when the user presses\nthe back button.<\/p>\n<p>Observers are notified in registration order until one returns\ntrue. If none return true, the application quits.<\/p>\n<p>Observers are expected to return true if they were able to\nhandle the notification, for example by closing an active dialog\nbox, and false otherwise. The <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> widget uses this\nmechanism to notify the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> widget that it should pop\nits current route if possible.<\/p>\n<p>This method exposes the <code>popRoute<\/code> notification from\n<a href=\"services\/SystemChannels\/navigation-constant.html\">SystemChannels.navigation<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; didPopRoute() =&gt; Future&lt;bool&gt;.value(false);<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didPopRoute.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.bool>",
            "name": "didPopRoute",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": []
        },
        {
            "desc": "<p>Called when the host tells the app to push a new route onto the\nnavigator.<\/p>\n<p>Observers are expected to return true if they were able to\nhandle the notification. Observers are notified in registration\norder until one returns true.<\/p>\n<p>This method exposes the <code>pushRoute<\/code> notification from\n<a href=\"services\/SystemChannels\/navigation-constant.html\">SystemChannels.navigation<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; didPushRoute(String route) =&gt; Future&lt;bool&gt;.value(false);<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsBindingObserver\/didPushRoute.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.bool>",
            "name": "didPushRoute",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsBindingObserver",
            "params": [
                {
                    "name": "route",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": []
}