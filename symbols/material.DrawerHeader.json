{
    "name": "material.DrawerHeader",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "DrawerHeader",
            "type": "",
            "desc": "<p>Creates a material design drawer header.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n    ",
            "static": false,
            "memberOf": "material.DrawerHeader",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decoration",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "margin",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "curve",
                    "type": "animation.Curve",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/DrawerHeader\/DrawerHeader.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DrawerHeader({\n  Key key,\n  this.decoration,\n  this.margin = const EdgeInsets.only(bottom: 8.0),\n  this.padding = const EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0),\n  this.duration = const Duration(milliseconds: 250),\n  this.curve = Curves.fastOutSlowIn,\n  @required this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/DrawerHeader\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.DrawerHeader",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/DrawerHeader\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterial(context));\n  assert(debugCheckHasMediaQuery(context));\n  final ThemeData theme = Theme.of(context);\n  final double statusBarHeight = MediaQuery.of(context).padding.top;\n  return Container(\n    height: statusBarHeight + _kDrawerHeaderHeight,\n    margin: margin,\n    decoration: BoxDecoration(\n      border: Border(\n        bottom: Divider.createBorderSide(context),\n      ),\n    ),\n    child: AnimatedContainer(\n      padding: padding.add(EdgeInsets.only(top: statusBarHeight)),\n      decoration: decoration,\n      duration: duration,\n      curve: curve,\n      child: child == null ? null : DefaultTextStyle(\n        style: theme.textTheme.body2,\n        child: MediaQuery.removePadding(\n          context: context,\n          removeTop: true,\n          child: child,\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>A widget to be placed inside the drawer header, inset by the <a href=\"material\/DrawerHeader\/padding.html\">padding<\/a>.<\/p>\n<p>This widget will be sized to the size of the header. To position the child\nprecisely, consider using an <a href=\"widgets\/Align-class.html\">Align<\/a> or <a href=\"widgets\/Center-class.html\">Center<\/a> widget.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "material.DrawerHeader",
            "isConstant": false,
            "href": "material\/DrawerHeader\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "curve",
            "type": "animation.Curve",
            "types": [],
            "desc": "<p>The curve for animations of the <a href=\"material\/DrawerHeader\/decoration.html\">decoration<\/a>.<\/p>\n        ",
            "memberOf": "material.DrawerHeader",
            "isConstant": false,
            "href": "material\/DrawerHeader\/curve.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve curve\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decoration",
            "type": "painting.Decoration",
            "types": [],
            "desc": "<p>Decoration for the main drawer header <a href=\"widgets\/Container-class.html\">Container<\/a>; useful for applying\nbackgrounds.<\/p>\n<p>This decoration will extend under the system status bar.<\/p>\n<p>If this is changed, it will be animated according to <a href=\"material\/DrawerHeader\/duration.html\">duration<\/a> and <a href=\"material\/DrawerHeader\/curve.html\">curve<\/a>.<\/p>\n        ",
            "memberOf": "material.DrawerHeader",
            "isConstant": false,
            "href": "material\/DrawerHeader\/decoration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Decoration decoration\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "duration",
            "type": "dart:core.Duration",
            "types": [],
            "desc": "<p>The duration for animations of the <a href=\"material\/DrawerHeader\/decoration.html\">decoration<\/a>.<\/p>\n        ",
            "memberOf": "material.DrawerHeader",
            "isConstant": false,
            "href": "material\/DrawerHeader\/duration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "margin",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The margin around the drawer header.<\/p>\n        ",
            "memberOf": "material.DrawerHeader",
            "isConstant": false,
            "href": "material\/DrawerHeader\/margin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry margin\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "padding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The padding by which to inset <a href=\"material\/DrawerHeader\/child.html\">child<\/a>.<\/p>\n<p>The <a href=\"material\/DrawerHeader-class.html\">DrawerHeader<\/a> additionally offsets the child by the height of the\nsystem status bar.<\/p>\n<p>If the child is null, the padding has no effect.<\/p>\n        ",
            "memberOf": "material.DrawerHeader",
            "isConstant": false,
            "href": "material\/DrawerHeader\/padding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/DrawerHeader-class.html",
    "desc": "<p>The top-most region of a material design drawer. The header's <a href=\"material\/DrawerHeader\/child.html\">child<\/a>\nwidget, if any, is placed inside a <a href=\"widgets\/Container-class.html\">Container<\/a> whose <a href=\"material\/DrawerHeader\/decoration.html\">decoration<\/a> can be\npassed as an argument, inset by the given <a href=\"material\/DrawerHeader\/padding.html\">padding<\/a>.<\/p>\n<p>Part of the material design <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget. This condition is\nsatisfied by putting the <a href=\"material\/DrawerHeader-class.html\">DrawerHeader<\/a> in a <a href=\"material\/Drawer-class.html\">Drawer<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/UserAccountsDrawerHeader-class.html\">UserAccountsDrawerHeader<\/a>, a variant of <a href=\"material\/DrawerHeader-class.html\">DrawerHeader<\/a> that is\nspecialized for showing user accounts.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/navigation-drawer.html\">material.io\/design\/components\/navigation-drawer.html<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DrawerHeader"
}