{
    "desc": "<p>Provides a canvas on which to draw during the paint phase.<\/p>\n<p>When asked to paint, <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> first asks its <a href=\"rendering\/RenderCustomPaint\/painter.html\">painter<\/a> to paint\non the current canvas, then it paints its child, and then, after painting\nits child, it asks its <a href=\"rendering\/RenderCustomPaint\/foregroundPainter.html\">foregroundPainter<\/a> to paint. The coordinate system of\nthe canvas matches the coordinate system of the <a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a> object. The\npainters are expected to paint within a rectangle starting at the origin and\nencompassing a region of the given size. (If the painters paint outside\nthose bounds, there might be insufficient memory allocated to rasterize the\npainting commands and the resulting behavior is undefined.)<\/p>\n<p>Painters are implemented by subclassing or implementing <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>.<\/p>\n<p>Because custom paint calls its painters during paint, you cannot mark the\ntree as needing a new layout during the callback (the layout for this frame\nhas already happened).<\/p>\n<p>Custom painters normally size themselves to their child. If they do not have\na child, they attempt to size themselves to the <a href=\"rendering\/RenderCustomPaint\/preferredSize.html\">preferredSize<\/a>, which\ndefaults to <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>, the class that custom painter delegates should extend.<\/li>\n<li>\n<a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, the API provided to custom painter delegates.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderCustomPaint-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.RenderCustomPaint",
    "shortname": "RenderCustomPaint",
    "extends": [
        "rendering.RenderProxyBox",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a render object that delegates its painting.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderCustomPaint({\n  CustomPainter painter,\n  CustomPainter foregroundPainter,\n  Size preferredSize = Size.zero,\n  this.isComplex = false,\n  this.willChange = false,\n  RenderBox child,\n}) : assert(preferredSize != null),\n     _painter = painter,\n     _foregroundPainter = foregroundPainter,\n     _preferredSize = preferredSize,\n     super(child);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/RenderCustomPaint.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderCustomPaint",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "foregroundPainter",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.CustomPainter"
                },
                {
                    "name": "isComplex",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "painter",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.CustomPainter"
                },
                {
                    "name": "preferredSize",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Size"
                },
                {
                    "name": "willChange",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Assemble the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> for this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>If <code>isSemanticBoundary<\/code> is true, this method is called with the <code>node<\/code>\ncreated for this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, the <code>config<\/code> to be applied to that node\nand the <code>children<\/code> <code>SemanticNode<\/code>s that descendants of this RenderObject\nhave generated.<\/p>\n<p>By default, the method will annotate <code>node<\/code> with <code>config<\/code> and add the\n<code>children<\/code> to it.<\/p>\n<p>Subclasses can override this method to add additional <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s\nto the tree. If new <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s are instantiated in this method\nthey must be disposed in <a href=\"rendering\/RenderCustomPaint\/clearSemantics.html\">clearSemantics<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid assembleSemanticsNode(\n  SemanticsNode node,\n  SemanticsConfiguration config,\n  Iterable&lt;SemanticsNode&gt; children,\n) {\n  assert(() {\n    if (child == null &amp;&amp; children.isNotEmpty) {\n      throw FlutterError(\n        '$runtimeType does not have a child widget but received a non-empty list of child SemanticsNode:\\n'\n        '${children.join('\\n')}'\n      );\n    }\n    return true;\n  }());\n\n  final List&lt;CustomPainterSemantics&gt; backgroundSemantics = _backgroundSemanticsBuilder != null\n    ? _backgroundSemanticsBuilder(size)\n    : const &lt;CustomPainterSemantics&gt;[];\n  _backgroundSemanticsNodes = _updateSemanticsChildren(_backgroundSemanticsNodes, backgroundSemantics);\n\n  final List&lt;CustomPainterSemantics&gt; foregroundSemantics = _foregroundSemanticsBuilder != null\n    ? _foregroundSemanticsBuilder(size)\n    : const &lt;CustomPainterSemantics&gt;[];\n  _foregroundSemanticsNodes = _updateSemanticsChildren(_foregroundSemanticsNodes, foregroundSemantics);\n\n  final bool hasBackgroundSemantics = _backgroundSemanticsNodes != null &amp;&amp; _backgroundSemanticsNodes.isNotEmpty;\n  final bool hasForegroundSemantics = _foregroundSemanticsNodes != null &amp;&amp; _foregroundSemanticsNodes.isNotEmpty;\n  final List&lt;SemanticsNode&gt; finalChildren = &lt;SemanticsNode&gt;[];\n  if (hasBackgroundSemantics)\n    finalChildren.addAll(_backgroundSemanticsNodes);\n  finalChildren.addAll(children);\n  if (hasForegroundSemantics)\n    finalChildren.addAll(_foregroundSemanticsNodes);\n  super.assembleSemanticsNode(node, config, finalChildren);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/assembleSemanticsNode.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "assembleSemanticsNode",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<semantics.SemanticsNode>"
                },
                {
                    "name": "config",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                },
                {
                    "name": "node",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsNode"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderCustomPaint\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderCustomPaint\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/RenderCustomPaint\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  _painter?.addListener(markNeedsPaint);\n  _foregroundPainter?.addListener(markNeedsPaint);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/attach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "attach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "owner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PipelineOwner"
                }
            ]
        },
        {
            "desc": "<p>Removes all semantics from this render object and its descendants.<\/p>\n<p>Should only be called on objects whose <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a> is not a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>Override this method if you instantiate new <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s in an\noverridden <a href=\"rendering\/RenderCustomPaint\/assembleSemanticsNode.html\">assembleSemanticsNode<\/a> method, to dispose of those nodes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid clearSemantics() {\n  super.clearSemantics();\n  _backgroundSemanticsNodes = null;\n  _foregroundSemanticsNodes = null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/clearSemantics.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clearSemantics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"rendering\/RenderCustomPaint\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration(SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n  _backgroundSemanticsBuilder = painter?.semanticsBuilder;\n  _foregroundSemanticsBuilder = foregroundPainter?.semanticsBuilder;\n  config.isSemanticBoundary = _backgroundSemanticsBuilder != null || _foregroundSemanticsBuilder != null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/describeSemanticsConfiguration.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "describeSemanticsConfiguration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "config",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderCustomPaint\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderCustomPaint\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderCustomPaint\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _painter?.removeListener(markNeedsPaint);\n  _foregroundPainter?.removeListener(markNeedsPaint);\n  super.detach();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/detach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { Offset position }) {\n  if (_foregroundPainter != null &amp;&amp; (_foregroundPainter.hitTest(position) ?? false))\n    return true;\n  return super.hitTestChildren(result, position: position);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/hitTestChildren.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTestChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "result",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Override this method if this render object can be hit even if its\nchildren were not hit.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestSelf(Offset position) {\n  return _painter != null &amp;&amp; (_painter.hitTest(position) ?? true);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/hitTestSelf.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTestSelf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (_painter != null) {\n    _paintWithPainter(context.canvas, offset, _painter);\n    _setRasterCacheHints(context);\n  }\n  super.paint(context, offset);\n  if (_foregroundPainter != null) {\n    _paintWithPainter(context.canvas, offset, _foregroundPainter);\n    _setRasterCacheHints(context);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Updates the render objects size using only the constraints.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>Subclasses that set <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> to true should override this method\nto compute their size.<\/p>\n<p>This function is called only if <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performResize() {\n  size = constraints.constrain(preferredSize);\n  markNeedsSemanticsUpdate();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderCustomPaint\/performResize.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performResize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The foreground custom paint delegate.<\/p>\n<p>This painter, if non-null, is called to paint in front of the children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CustomPainter get foregroundPainter =&gt; _foregroundPainter;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderCustomPaint\/foregroundPainter.html",
            "name": "foregroundPainter",
            "isDeprecated": false,
            "type": "rendering.CustomPainter",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        },
        {
            "desc": "<p>Whether to hint that this layer's painting should be cached.<\/p>\n<p>The compositor contains a raster cache that holds bitmaps of layers in\norder to avoid the cost of repeatedly rendering those layers on each\nframe. If this flag is not set, then the compositor will apply its own\nheuristics to decide whether the this layer is complex enough to benefit\nfrom caching.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool isComplex\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderCustomPaint\/isComplex.html",
            "name": "isComplex",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        },
        {
            "desc": "<p>The background custom paint delegate.<\/p>\n<p>This painter, if non-null, is called to paint behind the children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CustomPainter get painter =&gt; _painter;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderCustomPaint\/painter.html",
            "name": "painter",
            "isDeprecated": false,
            "type": "rendering.CustomPainter",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        },
        {
            "desc": "<p>The size that this <a href=\"rendering\/RenderCustomPaint-class.html\">RenderCustomPaint<\/a> should aim for, given the layout\nconstraints, if there is no child.<\/p>\n<p>Defaults to <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>If there's a child, this is ignored, and the size of the child is used\ninstead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get preferredSize =&gt; _preferredSize;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderCustomPaint\/preferredSize.html",
            "name": "preferredSize",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        },
        {
            "desc": "<p>Whether the raster cache should be told that this painting is likely\nto change in the next frame.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool willChange\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderCustomPaint\/willChange.html",
            "name": "willChange",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderCustomPaint",
            "params": []
        }
    ]
}