{
    "name": "material.TabBarTheme",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"material\/TabBarTheme\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TabBarTheme",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "material\/TabBarTheme\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TabBarTheme typedOther = other;\n  return typedOther.indicator == indicator\n      &amp;&amp; typedOther.indicatorSize == indicatorSize\n      &amp;&amp; typedOther.labelColor == labelColor\n      &amp;&amp; typedOther.labelPadding == labelPadding\n      &amp;&amp; typedOther.labelStyle == labelStyle\n      &amp;&amp; typedOther.unselectedLabelColor == unselectedLabelColor\n      &amp;&amp; typedOther.unselectedLabelStyle == unselectedLabelStyle;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TabBarTheme",
            "type": "",
            "desc": "<p>Creates a tab bar theme that can be used with <a href=\"material\/ThemeData\/tabBarTheme.html\">ThemeData.tabBarTheme<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TabBarTheme",
            "sig": "",
            "params": [
                {
                    "name": "indicator",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "indicatorSize",
                    "type": "material.TabBarIndicatorSize",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelPadding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "unselectedLabelColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "unselectedLabelStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/TabBarTheme\/TabBarTheme.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TabBarTheme({\n  this.indicator,\n  this.indicatorSize,\n  this.labelColor,\n  this.labelPadding,\n  this.labelStyle,\n  this.unselectedLabelColor,\n  this.unselectedLabelStyle,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyWith",
            "type": "material.TabBarTheme",
            "desc": "<p>Creates a copy of this object but with the given fields replaced with the\nnew values.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TabBarTheme",
            "sig": "",
            "params": [
                {
                    "name": "indicator",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "indicatorSize",
                    "type": "material.TabBarIndicatorSize",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelPadding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "unselectedLabelColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "unselectedLabelStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TabBarTheme\/copyWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TabBarTheme copyWith({\n  Decoration indicator,\n  TabBarIndicatorSize indicatorSize,\n  Color labelColor,\n  EdgeInsetsGeometry labelPadding,\n  TextStyle labelStyle,\n  Color unselectedLabelColor,\n  TextStyle unselectedLabelStyle,\n}) {\n  return TabBarTheme(\n    indicator: indicator ?? this.indicator,\n    indicatorSize: indicatorSize ?? this.indicatorSize,\n    labelColor: labelColor ?? this.labelColor,\n    labelPadding: labelPadding ?? this.labelPadding,\n    labelStyle: labelStyle ?? this.labelStyle,\n    unselectedLabelColor: unselectedLabelColor ?? this.unselectedLabelColor,\n    unselectedLabelStyle: unselectedLabelStyle ?? this.unselectedLabelStyle,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "material.TabBarTheme",
            "desc": "<p>Linearly interpolate between two tab bar themes.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TabBarTheme",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "material.TabBarTheme",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "material.TabBarTheme",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TabBarTheme\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TabBarTheme lerp(TabBarTheme a, TabBarTheme b, double t) {\n  assert(a != null);\n  assert(b != null);\n  assert(t != null);\n  return TabBarTheme(\n    indicator: Decoration.lerp(a.indicator, b.indicator, t),\n    indicatorSize: t &lt; 0.5 ? a.indicatorSize : b.indicatorSize,\n    labelColor: Color.lerp(a.labelColor, b.labelColor, t),\n    labelPadding: EdgeInsets.lerp(a.labelPadding, b.labelPadding, t),\n    labelStyle: TextStyle.lerp(a.labelStyle, b.labelStyle, t),\n    unselectedLabelColor: Color.lerp(a.unselectedLabelColor, b.unselectedLabelColor, t),\n    unselectedLabelStyle: TextStyle.lerp(a.unselectedLabelStyle, b.unselectedLabelStyle, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "of",
            "type": "material.TabBarTheme",
            "desc": "<p>The data from the closest <a href=\"material\/TabBarTheme-class.html\">TabBarTheme<\/a> instance given the build context.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TabBarTheme",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TabBarTheme\/of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TabBarTheme of(BuildContext context) {\n  return Theme.of(context).tabBarTheme;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/TabBarTheme\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/TabBarTheme\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/TabBarTheme\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/TabBarTheme\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/TabBarTheme\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/TabBarTheme\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    indicator,\n    indicatorSize,\n    labelColor,\n    labelPadding,\n    labelStyle,\n    unselectedLabelColor,\n    unselectedLabelStyle,\n  );\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "indicator",
            "type": "painting.Decoration",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/indicator.html\">TabBar.indicator<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/indicator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Decoration indicator\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "indicatorSize",
            "type": "material.TabBarIndicatorSize",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/indicatorSize.html\">TabBar.indicatorSize<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/indicatorSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TabBarIndicatorSize indicatorSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/labelColor.html\">TabBar.labelColor<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/labelColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color labelColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelPadding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/labelPadding.html\">TabBar.labelPadding<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/labelPadding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry labelPadding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelStyle",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/labelStyle.html\">TabBar.labelStyle<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/labelStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "unselectedLabelColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/unselectedLabelColor.html\">TabBar.unselectedLabelColor<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/unselectedLabelColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color unselectedLabelColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "unselectedLabelStyle",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Default value for <a href=\"material\/TabBarTheme\/unselectedLabelStyle.html\">TabBar.unselectedLabelStyle<\/a>.<\/p>\n        ",
            "memberOf": "material.TabBarTheme",
            "isConstant": false,
            "href": "material\/TabBarTheme\/unselectedLabelStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle unselectedLabelStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/TabBarTheme-class.html",
    "desc": "<p>Defines a theme for <a href=\"material\/TabBar-class.html\">TabBar<\/a> widgets.<\/p>\n<p>A tab bar theme describes the color of the tab label and the size\/shape of\nthe <a href=\"material\/TabBarTheme\/indicator.html\">TabBar.indicator<\/a>.<\/p>\n<p>Descendant widgets obtain the current theme's <a href=\"material\/TabBarTheme-class.html\">TabBarTheme<\/a> object using\n<code>TabBarTheme.of(context)<\/code>. Instances of <a href=\"material\/TabBarTheme-class.html\">TabBarTheme<\/a> can be customized with\n<a href=\"material\/TabBarTheme\/copyWith.html\">TabBarTheme.copyWith<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/TabBar-class.html\">TabBar<\/a>, a widget that displays a horizontal row of tabs.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, which describes the overall theme information for the\napplication.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TabBarTheme"
}