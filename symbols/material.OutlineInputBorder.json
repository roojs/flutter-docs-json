{
    "name": "material.OutlineInputBorder",
    "extends": [
        "material.InputBorder",
        "painting.ShapeBorder",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"material\/OutlineInputBorder\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final OutlineInputBorder typedOther = other;\n  return typedOther.borderSide == borderSide\n      &amp;&amp; typedOther.borderRadius == borderRadius\n      &amp;&amp; typedOther.gapPadding == gapPadding;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "OutlineInputBorder",
            "type": "",
            "desc": "<p>Creates a rounded rectangle outline border for an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>.<\/p>\n<p>If the <code>borderSide<\/code> parameter is <a href=\"material\/InputBorder\/none-constant.html\">BorderSide.none<\/a>, it will not draw a\nborder. However, it will still define a shape (which you can see if\n<a href=\"material\/InputDecoration\/filled.html\">InputDecoration.filled<\/a> is true).<\/p>\n<p>If an application does not specify a <code>borderSide<\/code> parameter of\nvalue <a href=\"material\/InputBorder\/none-constant.html\">BorderSide.none<\/a>, the input decorator substitutes its own, using\n<a href=\"material\/OutlineInputBorder\/copyWith.html\">copyWith<\/a>, based on the current theme and <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>.<\/p>\n<p>The <code>borderRadius<\/code> parameter defaults to a value where all four\ncorners have a circular radius of 4.0. The <code>borderRadius<\/code> parameter\nmust not be null and the corner radii must be circular, i.e. their\n<a href=\"dart-ui\/Radius\/x.html\">Radius.x<\/a> and <a href=\"dart-ui\/Radius\/y.html\">Radius.y<\/a> values must be the same.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/hasFloatingPlaceholder.html\">InputDecoration.hasFloatingPlaceholder<\/a>, which should be set to false\nwhen the <code>borderSide<\/code> is <a href=\"material\/InputBorder\/none-constant.html\">BorderSide.none<\/a>. If let as true, the label\nwill extend beyond the container as if the border were still being\ndrawn.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "borderSide",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gapPadding",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/OutlineInputBorder\/OutlineInputBorder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const OutlineInputBorder({\n  BorderSide borderSide = const BorderSide(),\n  this.borderRadius = const BorderRadius.all(Radius.circular(4.0)),\n  this.gapPadding = 4.0,\n}) : assert(borderRadius != null),\n     assert(gapPadding != null &amp;&amp; gapPadding &gt;= 0.0),\n     super(borderSide: borderSide);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyWith",
            "type": "material.OutlineInputBorder",
            "desc": "<p>Creates a copy of this input border with the specified <code>borderSide<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "borderSide",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gapPadding",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/copyWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nOutlineInputBorder copyWith({\n  BorderSide borderSide,\n  BorderRadius borderRadius,\n  double gapPadding,\n}) {\n  return OutlineInputBorder(\n    borderSide: borderSide ?? this.borderSide,\n    borderRadius: borderRadius ?? this.borderRadius,\n    gapPadding: gapPadding ?? this.gapPadding,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getInnerPath",
            "type": "dart:ui.Path",
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"material\/OutlineInputBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"material\/OutlineInputBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/OutlineInputBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/getInnerPath.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addRRect(borderRadius.resolve(textDirection).toRRect(rect).deflate(borderSide.width));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getOuterPath",
            "type": "dart:ui.Path",
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"material\/OutlineInputBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"material\/OutlineInputBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/OutlineInputBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/getOuterPath.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addRRect(borderRadius.resolve(textDirection).toRRect(rect));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpFrom",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"material\/OutlineInputBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"material\/OutlineInputBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/lerpFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a is OutlineInputBorder) {\n    final OutlineInputBorder outline = a;\n    return OutlineInputBorder(\n      borderRadius: BorderRadius.lerp(outline.borderRadius, borderRadius, t),\n      borderSide: BorderSide.lerp(outline.borderSide, borderSide, t),\n      gapPadding: outline.gapPadding,\n    );\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpTo",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"material\/OutlineInputBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"material\/OutlineInputBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/lerpTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b is OutlineInputBorder) {\n    final OutlineInputBorder outline = b;\n    return OutlineInputBorder(\n      borderRadius: BorderRadius.lerp(borderRadius, outline.borderRadius, t),\n      borderSide: BorderSide.lerp(borderSide, outline.borderSide, t),\n      gapPadding: outline.gapPadding,\n    );\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "paint",
            "type": "",
            "desc": "<p>Draw a rounded rectangle around <code>rect<\/code> using <a href=\"material\/OutlineInputBorder\/borderRadius.html\">borderRadius<\/a>.<\/p>\n<p>The <a href=\"material\/InputBorder\/borderSide.html\">borderSide<\/a> defines the line's color and weight.<\/p>\n<p>The top side of the rounded rectangle may be interrupted by a single gap\nif <code>gapExtent<\/code> is non-null. In that case the gap begins at\n<code>gapStart - gapPadding<\/code> (assuming that the <code>textDirection<\/code> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>).\nThe gap's width is <code>(gapPadding + gapExtent + gapPadding) * gapPercentage<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gapStart",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gapExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "gapPercentage",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/paint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  Canvas canvas,\n  Rect rect, {\n  double gapStart,\n  double gapExtent = 0.0,\n  double gapPercentage = 0.0,\n  TextDirection textDirection,\n}) {\n  assert(gapExtent != null);\n  assert(gapPercentage &gt;= 0.0 &amp;&amp; gapPercentage &lt;= 1.0);\n  assert(_cornersAreCircular(borderRadius));\n\n  final Paint paint = borderSide.toPaint();\n  final RRect outer = borderRadius.toRRect(rect);\n  final RRect center = outer.deflate(borderSide.width \/ 2.0);\n  if (gapStart == null || gapExtent &lt;= 0.0 || gapPercentage == 0.0) {\n    canvas.drawRRect(center, paint);\n  } else {\n    final double extent = lerpDouble(0.0, gapExtent + gapPadding * 2.0, gapPercentage);\n    switch (textDirection) {\n      case TextDirection.rtl: {\n        final Path path = _gapBorderPath(canvas, center, gapStart + gapPadding - extent, extent);\n        canvas.drawPath(path, paint);\n        break;\n      }\n      case TextDirection.ltr: {\n        final Path path = _gapBorderPath(canvas, center, gapStart - gapPadding, extent);\n        canvas.drawPath(path, paint);\n        break;\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "scale",
            "type": "material.OutlineInputBorder",
            "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/OutlineInputBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.OutlineInputBorder",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/OutlineInputBorder\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nOutlineInputBorder scale(double t) {\n  return OutlineInputBorder(\n    borderSide: borderSide.scale(t),\n    borderRadius: borderRadius * t,\n    gapPadding: gapPadding * t,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "borderRadius",
            "type": "painting.BorderRadius",
            "types": [],
            "desc": "<p>The radii of the border's rounded rectangle corners.<\/p>\n<p>The corner radii must be circular, i.e. their <a href=\"dart-ui\/Radius\/x.html\">Radius.x<\/a> and <a href=\"dart-ui\/Radius\/y.html\">Radius.y<\/a>\nvalues must be the same.<\/p>\n        ",
            "memberOf": "material.OutlineInputBorder",
            "isConstant": false,
            "href": "material\/OutlineInputBorder\/borderRadius.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadius borderRadius\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "dimensions",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"material\/OutlineInputBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"material\/OutlineInputBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
            "memberOf": "material.OutlineInputBorder",
            "isConstant": false,
            "href": "material\/OutlineInputBorder\/dimensions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.all(borderSide.width);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "gapPadding",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Horizontal padding on either side of the border's\n<a href=\"material\/InputDecoration\/labelText.html\">InputDecoration.labelText<\/a> width gap.<\/p>\n<p>This value is used by the <a href=\"material\/OutlineInputBorder\/paint.html\">paint<\/a> method to compute the actual gap width.<\/p>\n        ",
            "memberOf": "material.OutlineInputBorder",
            "isConstant": false,
            "href": "material\/OutlineInputBorder\/gapPadding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double gapPadding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/OutlineInputBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/OutlineInputBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/OutlineInputBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/OutlineInputBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/OutlineInputBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/OutlineInputBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "material.OutlineInputBorder",
            "isConstant": false,
            "href": "material\/OutlineInputBorder\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(borderSide, borderRadius, gapPadding);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isOutline",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>True if this border will enclose the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s container.<\/p>\n<p>This property affects the alignment of container's contents. For example\nwhen an input decorator is configured with an <a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a> its\nlabel is centered with its container.<\/p>\n        ",
            "memberOf": "material.OutlineInputBorder",
            "isConstant": false,
            "href": "material\/OutlineInputBorder\/isOutline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isOutline =&gt; true;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/OutlineInputBorder-class.html",
    "desc": "<p>Draws a rounded rectangle around an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s container.<\/p>\n<p>When the input decorator's label is floating, for example because its\ninput child has the focus, the label appears in a gap in the border outline.<\/p>\n<p>The input decorator's \"container\" is the optionally filled area above the\ndecorator's helper, error, and counter.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, the default <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which\ndraws a horizontal line at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a>, which is used to configure an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "OutlineInputBorder"
}