{
    "desc": "<p>Coordinates tab selection between a <a href=\"material\/TabBar-class.html\">TabBar<\/a> and a <a href=\"material\/TabBarView-class.html\">TabBarView<\/a>.<\/p>\n<p>The <a href=\"material\/TabController\/index.html\">index<\/a> property is the index of the selected tab and the <a href=\"material\/TabController\/animation.html\">animation<\/a>\nrepresents the current scroll positions of the tab bar and the tar bar view.\nThe selected tab's index can be changed with <a href=\"material\/TabController\/animateTo.html\">animateTo<\/a>.<\/p>\n<p>A stateful widget that builds a <a href=\"material\/TabBar-class.html\">TabBar<\/a> or a <a href=\"material\/TabBarView-class.html\">TabBarView<\/a> can create\na <a href=\"material\/TabController-class.html\">TabController<\/a> and share it directly.<\/p>\n<p>When the <a href=\"material\/TabBar-class.html\">TabBar<\/a> and <a href=\"material\/TabBarView-class.html\">TabBarView<\/a> don't have a convenient stateful\nancestor, a <a href=\"material\/TabController-class.html\">TabController<\/a> can be shared by providing a\n<a href=\"material\/DefaultTabController-class.html\">DefaultTabController<\/a> inherited widget.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis widget introduces a <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> with an <a href=\"material\/AppBar-class.html\">AppBar<\/a> and a <a href=\"material\/TabBar-class.html\">TabBar<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyTabbedPage extends StatefulWidget {\n  const MyTabbedPage({ Key key }) : super(key: key);\n  @override\n  _MyTabbedPageState createState() =&gt; _MyTabbedPageState();\n}\n\nclass _MyTabbedPageState extends State&lt;MyTabbedPage&gt; with SingleTickerProviderStateMixin {\n  final List&lt;Tab&gt; myTabs = &lt;Tab&gt;[\n    Tab(text: 'LEFT'),\n    Tab(text: 'RIGHT'),\n  ];\n\n  TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(vsync: this, length: myTabs.length);\n  }\n\n @override\n void dispose() {\n   _tabController.dispose();\n   super.dispose();\n }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        bottom: TabBar(\n          controller: _tabController,\n          tabs: myTabs,\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: myTabs.map((Tab tab) {\n          return Center(child: Text(tab.text));\n        }).toList(),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/TabController-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.TabController",
    "shortname": "TabController",
    "extends": [
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an object that manages the state required by <a href=\"material\/TabBar-class.html\">TabBar<\/a> and a <a href=\"material\/TabBarView-class.html\">TabBarView<\/a>.<\/p>\n<p>The <code>length<\/code> must not be null or negative. Typically its a value greater than one, i.e.\ntypically there are two or more tabs.<\/p>\n<p>The <code>initialIndex<\/code> must be valid given <code>length<\/code> and must not be null. If <code>length<\/code> is\nzero, then <code>initialIndex<\/code> must be 0 (the default).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TabController({ int initialIndex = 0, @required this.length, @required TickerProvider vsync })\n  : assert(length != null &amp;&amp; length &gt;= 0),\n    assert(initialIndex != null &amp;&amp; initialIndex &gt;= 0 &amp;&amp; (length == 0 || initialIndex &lt; length)),\n    _index = initialIndex,\n    _previousIndex = initialIndex,\n    _animationController = length &lt; 2 ? null : AnimationController(\n      value: initialIndex.toDouble(),\n      upperBound: (length - 1).toDouble(),\n      vsync: vsync,\n    );<\/code><\/pre>\n    ",
            "href": "material\/TabController\/TabController.html",
            "isDeprecated": false,
            "type": "",
            "name": "TabController",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.TabController",
            "params": [
                {
                    "name": "initialIndex",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "length",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "vsync",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "scheduler.TickerProvider"
                }
            ]
        },
        {
            "desc": "<p>Immediately sets <a href=\"material\/TabController\/index.html\">index<\/a> and <a href=\"material\/TabController\/previousIndex.html\">previousIndex<\/a> and then plays the\n<a href=\"material\/TabController\/animation.html\">animation<\/a> from its current value to <a href=\"material\/TabController\/index.html\">index<\/a>.<\/p>\n<p>While the animation is running <a href=\"material\/TabController\/indexIsChanging.html\">indexIsChanging<\/a> is true. When the\nanimation completes <a href=\"material\/TabController\/offset.html\">offset<\/a> will be 0.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void animateTo(int value, { Duration duration = kTabScrollDuration, Curve curve = Curves.ease }) {\n  _changeIndex(value, duration: duration, curve: curve);\n}<\/code><\/pre>\n    ",
            "href": "material\/TabController\/animateTo.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "animateTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.TabController",
            "params": [
                {
                    "name": "curve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Curve"
                },
                {
                    "name": "duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _animationController?.dispose();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "material\/TabController\/dispose.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.TabController",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>An animation whose value represents the current position of the <a href=\"material\/TabBar-class.html\">TabBar<\/a>'s\nselected tab indicator as well as the scrollOffsets of the <a href=\"material\/TabBar-class.html\">TabBar<\/a>\nand <a href=\"material\/TabBarView-class.html\">TabBarView<\/a>.<\/p>\n<p>The animation's value ranges from 0.0 to <a href=\"material\/TabController\/length.html\">length<\/a> - 1.0. After the\nselected tab is changed, the animation's value equals <a href=\"material\/TabController\/index.html\">index<\/a>. The\nanimation's value can be <a href=\"material\/TabController\/offset.html\">offset<\/a> by +\/- 1.0 to reflect <a href=\"material\/TabBarView-class.html\">TabBarView<\/a>\ndrag scrolling.<\/p>\n<p>If length is zero or one, <a href=\"material\/TabController\/index.html\">index<\/a> animations don't happen and the value\nof this property is <a href=\"animation\/kAlwaysCompleteAnimation-constant.html\">kAlwaysCompleteAnimation<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get animation =&gt; _animationController?.view ?? kAlwaysCompleteAnimation;<\/code><\/pre>\n        ",
            "href": "material\/TabController\/animation.html",
            "name": "animation",
            "isDeprecated": false,
            "type": "animation.Animation<dart:core.double>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.TabController",
            "params": []
        },
        {
            "desc": "<p>The index of the currently selected tab. Changing the index also updates\n<a href=\"material\/TabController\/previousIndex.html\">previousIndex<\/a>, sets the <a href=\"material\/TabController\/animation.html\">animation<\/a>'s value to index, resets\n<a href=\"material\/TabController\/indexIsChanging.html\">indexIsChanging<\/a> to false, and notifies listeners.<\/p>\n<p>To change the currently selected tab and play the <a href=\"material\/TabController\/animation.html\">animation<\/a> use <a href=\"material\/TabController\/animateTo.html\">animateTo<\/a>.<\/p>\n<p>The value of <a href=\"material\/TabController\/index.html\">index<\/a> must be valid given <a href=\"material\/TabController\/length.html\">length<\/a>. If <a href=\"material\/TabController\/length.html\">length<\/a> is zero,\nthen <a href=\"material\/TabController\/index.html\">index<\/a> will also be zero.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get index =&gt; _index;<\/code><\/pre>\n        ",
            "href": "material\/TabController\/index.html",
            "name": "index",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.TabController",
            "params": []
        },
        {
            "desc": "<p>True while we're animating from <a href=\"material\/TabController\/previousIndex.html\">previousIndex<\/a> to <a href=\"material\/TabController\/index.html\">index<\/a> as a\nconsequence of calling <a href=\"material\/TabController\/animateTo.html\">animateTo<\/a>.<\/p>\n<p>This value is true during the <a href=\"material\/TabController\/animateTo.html\">animateTo<\/a> animation that's triggered when\nthe user taps a <a href=\"material\/TabBar-class.html\">TabBar<\/a> tab. It is false when <a href=\"material\/TabController\/offset.html\">offset<\/a> is changing as a\nconsequence of the user dragging (and \"flinging\") the <a href=\"material\/TabBarView-class.html\">TabBarView<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get indexIsChanging =&gt; _indexIsChangingCount != 0;<\/code><\/pre>\n        ",
            "href": "material\/TabController\/indexIsChanging.html",
            "name": "indexIsChanging",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.TabController",
            "params": []
        },
        {
            "desc": "<p>The total number of tabs. Typically greater than one.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int length\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabController\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.TabController",
            "params": []
        },
        {
            "desc": "<p>The difference between the <a href=\"material\/TabController\/animation.html\">animation<\/a>'s value and <a href=\"material\/TabController\/index.html\">index<\/a>. The offset\nvalue must be between -1.0 and 1.0.<\/p>\n<p>This property is typically set by the <a href=\"material\/TabBarView-class.html\">TabBarView<\/a> when the user\ndrags left or right. A value between -1.0 and 0.0 implies that the\nTabBarView has been dragged to the left. Similarly a value between\n0.0 and 1.0 implies that the TabBarView has been dragged to the right.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get offset =&gt; length &gt; 1 ? _animationController.value - _index.toDouble() : 0.0;<\/code><\/pre>\n        ",
            "href": "material\/TabController\/offset.html",
            "name": "offset",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.TabController",
            "params": []
        },
        {
            "desc": "<p>The index of the previously selected tab. Initially the same as <a href=\"material\/TabController\/index.html\">index<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get previousIndex =&gt; _previousIndex;<\/code><\/pre>\n        ",
            "href": "material\/TabController\/previousIndex.html",
            "name": "previousIndex",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.TabController",
            "params": []
        }
    ]
}