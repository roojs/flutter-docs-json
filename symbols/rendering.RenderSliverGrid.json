{
    "desc": "<p>A sliver that places multiple box children in a two dimensional arrangement.<\/p>\n<p><a href=\"rendering\/RenderSliverGrid-class.html\">RenderSliverGrid<\/a> places its children in arbitrary positions determined by\n<a href=\"rendering\/RenderSliverGrid\/gridDelegate.html\">gridDelegate<\/a>. Each child is forced to have the size specified by the\n<a href=\"rendering\/RenderSliverGrid\/gridDelegate.html\">gridDelegate<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSliverList-class.html\">RenderSliverList<\/a>, which places its children in a linear\narray.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverFixedExtentList-class.html\">RenderSliverFixedExtentList<\/a>, which places its children in a linear\narray with a fixed extent in the main axis.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverGrid-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverGrid",
    "shortname": "RenderSliverGrid",
    "extends": [
        "rendering.RenderSliverMultiBoxAdaptor",
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a sliver that contains multiple box children that whose size and\nposition are determined by a delegate.<\/p>\n<p>The <code>childManager<\/code> and <code>gridDelegate<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverGrid({\n  @required RenderSliverBoxChildManager childManager,\n  @required SliverGridDelegate gridDelegate,\n}) : assert(gridDelegate != null),\n     _gridDelegate = gridDelegate,\n     super(childManager: childManager);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverGrid\/RenderSliverGrid.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderSliverGrid",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverGrid",
            "params": [
                {
                    "name": "childManager",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderSliverBoxChildManager"
                },
                {
                    "name": "gridDelegate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.SliverGridDelegate"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance along the cross axis from the zero of the cross axis\nin this sliver's <a href=\"rendering\/RenderSliverMultiBoxAdaptor\/paint.html\">paint<\/a> coordinate space to the nearest side of the given\nchild.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the left\nof the sliver to the left of the child. Similarly, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a>\ndescribe this sliver as having an axis direction of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>,\nthen this is value is the same. If the axis direction is\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>, then it is the distance\nfrom the top of the sliver to the top of the child.<\/p>\n<p>Calling this for a child that is not visible is not valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childCrossAxisPosition(RenderBox child) {\n  final SliverGridParentData childParentData = child.parentData;\n  return childParentData.crossAxisOffset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverGrid\/childCrossAxisPosition.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "childCrossAxisPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverGrid",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderSliver\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  childManager.didStartLayout();\n  childManager.setDidUnderflow(false);\n\n  final double scrollOffset = constraints.scrollOffset + constraints.cacheOrigin;\n  assert(scrollOffset &gt;= 0.0);\n  final double remainingExtent = constraints.remainingCacheExtent;\n  assert(remainingExtent &gt;= 0.0);\n  final double targetEndScrollOffset = scrollOffset + remainingExtent;\n\n  final SliverGridLayout layout = _gridDelegate.getLayout(constraints);\n\n  final int firstIndex = layout.getMinChildIndexForScrollOffset(scrollOffset);\n  final int targetLastIndex = targetEndScrollOffset.isFinite ?\n    layout.getMaxChildIndexForScrollOffset(targetEndScrollOffset) : null;\n\n  if (firstChild != null) {\n    final int oldFirstIndex = indexOf(firstChild);\n    final int oldLastIndex = indexOf(lastChild);\n    final int leadingGarbage = (firstIndex - oldFirstIndex).clamp(0, childCount);\n    final int trailingGarbage = targetLastIndex == null ? 0 : (oldLastIndex - targetLastIndex).clamp(0, childCount);\n    collectGarbage(leadingGarbage, trailingGarbage);\n  } else {\n    collectGarbage(0, 0);\n  }\n\n  final SliverGridGeometry firstChildGridGeometry = layout.getGeometryForChildIndex(firstIndex);\n  final double leadingScrollOffset = firstChildGridGeometry.scrollOffset;\n  double trailingScrollOffset = firstChildGridGeometry.trailingScrollOffset;\n\n  if (firstChild == null) {\n    if (!addInitialChild(index: firstIndex, layoutOffset: firstChildGridGeometry.scrollOffset)) {\n      \/\/ There are either no children, or we are past the end of all our children.\n      final double max = layout.computeMaxScrollOffset(childManager.childCount);\n      geometry = SliverGeometry(\n        scrollExtent: max,\n        maxPaintExtent: max,\n      );\n      childManager.didFinishLayout();\n      return;\n    }\n  }\n\n  RenderBox trailingChildWithLayout;\n\n  for (int index = indexOf(firstChild) - 1; index &gt;= firstIndex; --index) {\n    final SliverGridGeometry gridGeometry = layout.getGeometryForChildIndex(index);\n    final RenderBox child = insertAndLayoutLeadingChild(\n      gridGeometry.getBoxConstraints(constraints),\n    );\n    final SliverGridParentData childParentData = child.parentData;\n    childParentData.layoutOffset = gridGeometry.scrollOffset;\n    childParentData.crossAxisOffset = gridGeometry.crossAxisOffset;\n    assert(childParentData.index == index);\n    trailingChildWithLayout ??= child;\n    trailingScrollOffset = math.max(trailingScrollOffset, gridGeometry.trailingScrollOffset);\n  }\n\n  if (trailingChildWithLayout == null) {\n    firstChild.layout(firstChildGridGeometry.getBoxConstraints(constraints));\n    final SliverGridParentData childParentData = firstChild.parentData;\n    childParentData.layoutOffset = firstChildGridGeometry.scrollOffset;\n    childParentData.crossAxisOffset = firstChildGridGeometry.crossAxisOffset;\n    trailingChildWithLayout = firstChild;\n  }\n\n  for (int index = indexOf(trailingChildWithLayout) + 1; targetLastIndex == null || index &lt;= targetLastIndex; ++index) {\n    final SliverGridGeometry gridGeometry = layout.getGeometryForChildIndex(index);\n    final BoxConstraints childConstraints = gridGeometry.getBoxConstraints(constraints);\n    RenderBox child = childAfter(trailingChildWithLayout);\n    if (child == null) {\n      child = insertAndLayoutChild(childConstraints, after: trailingChildWithLayout);\n      if (child == null) {\n        \/\/ We have run out of children.\n        break;\n      }\n    } else {\n      child.layout(childConstraints);\n    }\n    trailingChildWithLayout = child;\n    assert(child != null);\n    final SliverGridParentData childParentData = child.parentData;\n    childParentData.layoutOffset = gridGeometry.scrollOffset;\n    childParentData.crossAxisOffset = gridGeometry.crossAxisOffset;\n    assert(childParentData.index == index);\n    trailingScrollOffset = math.max(trailingScrollOffset, gridGeometry.trailingScrollOffset);\n  }\n\n  final int lastIndex = indexOf(lastChild);\n\n  assert(childScrollOffset(firstChild) &lt;= scrollOffset);\n  assert(debugAssertChildListIsNonEmptyAndContiguous());\n  assert(indexOf(firstChild) == firstIndex);\n  assert(targetLastIndex == null || lastIndex &lt;= targetLastIndex);\n\n  final double estimatedTotalExtent = childManager.estimateMaxScrollOffset(\n    constraints,\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    leadingScrollOffset: leadingScrollOffset,\n    trailingScrollOffset: trailingScrollOffset,\n  );\n\n  final double paintExtent = calculatePaintOffset(\n    constraints,\n    from: leadingScrollOffset,\n    to: trailingScrollOffset,\n  );\n  final double cacheExtent = calculateCacheOffset(\n    constraints,\n    from: leadingScrollOffset,\n    to: trailingScrollOffset,\n  );\n\n  geometry = SliverGeometry(\n    scrollExtent: estimatedTotalExtent,\n    paintExtent: paintExtent,\n    maxPaintExtent: estimatedTotalExtent,\n    cacheExtent: cacheExtent,\n    \/\/ Conservative to avoid complexity.\n    hasVisualOverflow: true,\n  );\n\n  \/\/ We may have started the layout while scrolled to the end, which\n  \/\/ would not expose a new child.\n  if (estimatedTotalExtent == trailingScrollOffset)\n    childManager.setDidUnderflow(true);\n  childManager.didFinishLayout();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverGrid\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverGrid",
            "params": []
        },
        {
            "desc": "<p>Alerts the developer that the child's parentData needs to be of type\n<a href=\"rendering\/KeepAliveParentDataMixin-mixin.html\">KeepAliveParentDataMixin<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderObject child) {\n  if (child.parentData is! SliverGridParentData)\n    child.parentData = SliverGridParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverGrid\/setupParentData.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setupParentData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverGrid",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The delegate that controls the size and position of the children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SliverGridDelegate get gridDelegate =&gt; _gridDelegate;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverGrid\/gridDelegate.html",
            "name": "gridDelegate",
            "isDeprecated": false,
            "type": "rendering.SliverGridDelegate",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderSliverGrid",
            "params": []
        }
    ]
}