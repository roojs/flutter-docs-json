{
    "name": "json_rpc_2.Client",
    "extends": [],
    "memberOf": "json_rpc_2",
    "events": [],
    "methods": [
        {
            "name": "Client",
            "type": "",
            "desc": "<p>Creates a <a href=\"package-json_rpc_2_json_rpc_2\/Client-class.html\">Client<\/a> that communicates over <code>channel<\/code>.<\/p>\n<p>Note that the client won't begin listening to <code>responses<\/code> until\n<a href=\"package-json_rpc_2_json_rpc_2\/Client\/listen.html\">Client.listen<\/a> is called.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [
                {
                    "name": "channel",
                    "type": "stream_channel.StreamChannel<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "stream_channel.StreamChannel",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/Client.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Client(StreamChannel&lt;String&gt; channel)\n    : this.withoutJson(\n          jsonDocument.bind(channel).transformStream(ignoreFormatExceptions));<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "close",
            "type": "dart:async.Future",
            "desc": "<p>Closes the underlying connection.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when all resources have been released.\nThis is the same as <a href=\"package-json_rpc_2_json_rpc_2\/Client\/done.html\">done<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/close.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() =&gt; _manager.close();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "listen",
            "type": "dart:async.Future",
            "desc": "<p>Starts listening to the underlying stream.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that will complete when the connection is closed or\nwhen it has an error. This is the same as <a href=\"package-json_rpc_2_json_rpc_2\/Client\/done.html\">done<\/a>.<\/p>\n<p><a href=\"package-json_rpc_2_json_rpc_2\/Client\/listen.html\">listen<\/a> may only be called once.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/listen.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future listen() =&gt; _manager.listen(_handleResponse);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "sendNotification",
            "type": "",
            "desc": "<p>Sends a JSON-RPC 2 request to invoke the given <code>method<\/code> without expecting\na response.<\/p>\n<p>If passed, <code>parameters<\/code> is the parameters for the method. This must be\neither an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> (to pass parameters by position) or a <a href=\"dart-core\/Map-class.html\">Map<\/a> with\n<a href=\"dart-core\/String-class.html\">String<\/a> keys (to pass parameters by name). Either way, it must be\nJSON-serializable.<\/p>\n<p>Since this is just a notification to which the server isn't expected to\nsend a response, it has no return value.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the client is closed when this method is called.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "parameters",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/sendNotification.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sendNotification(String method, [parameters]) =&gt;\n    _send(method, parameters);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "sendRequest",
            "type": "dart:async.Future",
            "desc": "<p>Sends a JSON-RPC 2 request to invoke the given <code>method<\/code>.<\/p>\n<p>If passed, <code>parameters<\/code> is the parameters for the method. This must be\neither an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> (to pass parameters by position) or a <a href=\"dart-core\/Map-class.html\">Map<\/a> with\n<a href=\"dart-core\/String-class.html\">String<\/a> keys (to pass parameters by name). Either way, it must be\nJSON-serializable.<\/p>\n<p>If the request succeeds, this returns the response result as a decoded\nJSON-serializable object. If it fails, it throws an <a href=\"package-json_rpc_2_json_rpc_2\/RpcException-class.html\">RpcException<\/a>\ndescribing the failure.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the client is closed while the request is in\nflight, or if the client is closed when this method is called.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "parameters",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/sendRequest.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future sendRequest(String method, [parameters]) {\n  var id = _id++;\n  _send(method, parameters, id);\n\n  var completer = new Completer.sync();\n  _pendingRequests[id] = new _Request(method, completer, new Chain.current());\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "withBatch",
            "type": "",
            "desc": "<p>Runs <code>callback<\/code> and batches any requests sent until it returns.<\/p>\n<p>A batch of requests is sent in a single message on the underlying stream,\nand the responses are likewise sent back in a single message.<\/p>\n<p><code>callback<\/code> may be synchronous or asynchronous. If it returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>,\nrequests will be batched until that Future returns; otherwise, requests\nwill only be batched while synchronously executing <code>callback<\/code>.<\/p>\n<p>If this is called in the context of another <a href=\"package-json_rpc_2_json_rpc_2\/Client\/withBatch.html\">withBatch<\/a> call, it just\ninvokes <code>callback<\/code> without creating another batch. This means that\nresponses are batched until the first batch ends.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [
                {
                    "name": "callback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/withBatch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">withBatch(callback()) {\n  if (_batch != null) return callback();\n\n  _batch = [];\n  return tryFinally(callback, () {\n    _manager.add(_batch);\n    _batch = null;\n  });\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "Client.withoutJson",
            "type": "",
            "desc": "<p>Creates a <a href=\"package-json_rpc_2_json_rpc_2\/Client-class.html\">Client<\/a> that communicates using decoded messages over\n<code>channel<\/code>.<\/p>\n<p>Unlike <a href=\"package-json_rpc_2_json_rpc_2\/Client\/Client.html\">new Client<\/a>, this doesn't read or write JSON strings. Instead, it\nreads and writes decoded maps or lists.<\/p>\n<p>Note that the client won't begin listening to <code>responses<\/code> until\n<a href=\"package-json_rpc_2_json_rpc_2\/Client\/listen.html\">Client.listen<\/a> is called.<\/p>\n    ",
            "static": false,
            "memberOf": "json_rpc_2.Client",
            "sig": "",
            "params": [
                {
                    "name": "channel",
                    "type": "stream_channel.StreamChannel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/Client.withoutJson.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Client.withoutJson(StreamChannel channel)\n    : _manager = new ChannelManager(\"Client\", channel) {\n  _manager.done.whenComplete(() {\n    for (var request in _pendingRequests.values) {\n      request.completer.completeError(\n          new StateError(\n              'The client closed with pending request \"${request.method}\".'),\n          StackTrace.current);\n    }\n    _pendingRequests.clear();\n  }).catchError((_) {\n    \/\/ Avoid an unhandled error.\n  });\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "done",
            "type": "dart:async.Future",
            "types": [],
            "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the underlying connection is\nclosed.<\/p>\n<p>This is the same future that's returned by <a href=\"package-json_rpc_2_json_rpc_2\/Client\/listen.html\">listen<\/a> and <a href=\"package-json_rpc_2_json_rpc_2\/Client\/close.html\">close<\/a>. It may\ncomplete before <a href=\"package-json_rpc_2_json_rpc_2\/Client\/close.html\">close<\/a> is called if the remote endpoint closes the\nconnection.<\/p>\n        ",
            "memberOf": "json_rpc_2.Client",
            "isConstant": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/done.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done =&gt; _manager.done;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isClosed",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the underlying connection is closed.<\/p>\n<p>Note that this will be <code>true<\/code> before <a href=\"package-json_rpc_2_json_rpc_2\/Client\/close.html\">close<\/a> is called if the remote\nendpoint closes the connection.<\/p>\n        ",
            "memberOf": "json_rpc_2.Client",
            "isConstant": false,
            "href": "package-json_rpc_2_json_rpc_2\/Client\/isClosed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed =&gt; _manager.isClosed;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-json_rpc_2_json_rpc_2\/Client-class.html",
    "desc": "<p>A JSON-RPC 2.0 client.<\/p>\n<p>A client calls methods on a server and handles the server's responses to\nthose method calls. Methods can be called with <a href=\"package-json_rpc_2_json_rpc_2\/Client\/sendRequest.html\">sendRequest<\/a>, or with\n<a href=\"package-json_rpc_2_json_rpc_2\/Client\/sendNotification.html\">sendNotification<\/a> if no response is expected.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Client"
}