{
    "desc": "<p>State object for a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n<p>To manipulate a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget's scroll position, use the object\nobtained from the <a href=\"widgets\/ScrollableState\/position.html\">position<\/a> property.<\/p>\n<p>To be informed of when a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget is scrolling, use a\n<a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a> to listen for <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications.<\/p>\n<p>This class is not intended to be subclassed. To specialize the behavior of a\n<a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, provide it with a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ScrollableState-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ScrollableState",
    "shortname": "ScrollableState",
    "extends": [
        "widgets.Scrollable",
        "widgets.State",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "widgets\/ScrollableState\/ScrollableState.html",
            "isDeprecated": false,
            "type": "",
            "name": "ScrollableState",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method in a number of different situations:<\/p>\n<ul>\n<li>After calling <a href=\"widgets\/State\/initState.html\">initState<\/a>.<\/li>\n<li>After calling <a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a>.<\/li>\n<li>After receiving a call to <a href=\"widgets\/State\/setState.html\">setState<\/a>.<\/li>\n<li>After a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes (e.g., an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by the previous <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> changes).<\/li>\n<li>After calling <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a> and then reinserting the <a href=\"widgets\/State-class.html\">State<\/a> object into\nthe tree at another location.<\/li>\n<\/ul>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor, the\ngiven <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, and the internal state of this <a href=\"widgets\/State-class.html\">State<\/a> object.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. The\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is always the same as the <code>context<\/code> property of\nthis <a href=\"widgets\/State-class.html\">State<\/a> object and will remain the same for the lifetime of this\nobject. The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is provided redundantly here so that\nthis method matches the signature for a <a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<h3 id=\"why-is-the-build-method-on-state-and-not-statefulwidget\">Why is the <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> method on <a href=\"widgets\/State-class.html\">State<\/a>, and not <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>?<\/h3>\n<p>Putting a <code>Widget build(BuildContext context)<\/code> method on <a href=\"widgets\/State-class.html\">State<\/a> rather\nputting a <code>Widget build(BuildContext context, State state)<\/code> method on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> gives developers more flexibility when subclassing\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>.<\/p>\n<p>For example, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> is a subclass of <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> that\nintroduces an abstract <code>Widget build(BuildContext context)<\/code> method for its\nsubclasses to implement. If <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> already had a <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> method\nthat took a <a href=\"widgets\/State-class.html\">State<\/a> argument, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> would be forced to provide\nits <a href=\"widgets\/State-class.html\">State<\/a> object to subclasses even though its <a href=\"widgets\/State-class.html\">State<\/a> object is an\ninternal implementation detail of <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a>.<\/p>\n<p>Conceptually, <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> could also be implemented as a subclass of\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> in a similar manner. If the <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> method were on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> rather than <a href=\"widgets\/State-class.html\">State<\/a>, that would not be possible anymore.<\/p>\n<p>Putting the <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> function on <a href=\"widgets\/State-class.html\">State<\/a> rather than <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> also\nhelps avoid a category of bugs related to closures implicitly capturing\n<code>this<\/code>. If you defined a closure in a <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> function on a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, that closure would implicitly capture <code>this<\/code>, which is\nthe current widget instance, and would have the (immutable) fields of that\ninstance in scope:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButton extends StatefulWidget {\n  ...\n  final Color color;\n\n  @override\n  Widget build(BuildContext context, MyButtonState state) {\n    ... () { print(\"color: $color\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>For example, suppose the parent builds <code>MyButton<\/code> with <code>color<\/code> being blue,\nthe <code>$color<\/code> in the print function refers to blue, as expected. Now,\nsuppose the parent rebuilds <code>MyButton<\/code> with green. The closure created by\nthe first build still implicitly refers to the original widget and the\n<code>$color<\/code> still prints blue even through the widget has been updated to\ngreen.<\/p>\n<p>In contrast, with the <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> function on the <a href=\"widgets\/State-class.html\">State<\/a> object, closures\ncreated during <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> implicitly capture the <a href=\"widgets\/State-class.html\">State<\/a> instance instead of\nthe widget instance:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButtonState extends State&lt;MyButton&gt; {\n  ...\n  @override\n  Widget build(BuildContext context) {\n    ... () { print(\"color: ${widget.color}\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>Now when the parent rebuilds <code>MyButton<\/code> with green, the closure created by\nthe first build still refers to <a href=\"widgets\/State-class.html\">State<\/a> object, which is preserved across\nrebuilds, but the framework has updated that <a href=\"widgets\/State-class.html\">State<\/a> object's <a href=\"widgets\/State\/widget.html\">widget<\/a>\nproperty to refer to the new <code>MyButton<\/code> instance and <code>${widget.color}<\/code>\nprints green, as expected.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(position != null);\n  \/\/ _ScrollableScope must be placed above the BuildContext returned by notificationContext\n  \/\/ so that we can get this ScrollableState by doing the following:\n  \/\/\n  \/\/ ScrollNotification notification;\n  \/\/ Scrollable.of(notification.context)\n  \/\/\n  \/\/ Since notificationContext is pointing to _gestureDetectorKey.context, _ScrollableScope\n  \/\/ must be placed above the widget using it: RawGestureDetector\n  Widget result = _ScrollableScope(\n    scrollable: this,\n    position: position,\n    \/\/ TODO(ianh): Having all these global keys is sad.\n    child: Listener(\n      onPointerSignal: _receivedPointerSignal,\n      child: RawGestureDetector(\n        key: _gestureDetectorKey,\n        gestures: _gestureRecognizers,\n        behavior: HitTestBehavior.opaque,\n        excludeFromSemantics: widget.excludeFromSemantics,\n        child: Semantics(\n          explicitChildNodes: !widget.excludeFromSemantics,\n          child: IgnorePointer(\n            key: _ignorePointerKey,\n            ignoring: _shouldIgnorePointer,\n            ignoringSemantics: false,\n            child: widget.viewportBuilder(context, position),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  if (!widget.excludeFromSemantics) {\n    result = _ScrollSemantics(\n      key: _scrollSemanticsKey,\n      child: result,\n      position: position,\n      allowImplicitScrolling: widget?.physics?.allowImplicitScrolling ?? _physics.allowImplicitScrolling,\n      semanticChildCount: widget.semanticChildCount,\n    );\n  }\n\n  return _configuration.buildViewportChrome(context, result, widget.axisDirection);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/ScrollableState\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;ScrollPosition&gt;('position', position));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Called when a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes.<\/p>\n<p>For example, if the previous call to <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> referenced an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> that later changed, the framework would call this\nmethod to notify this object about the change.<\/p>\n<p>This method is also called immediately after <a href=\"widgets\/State\/initState.html\">initState<\/a>. It is safe to\ncall <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this method.<\/p>\n<p>Subclasses rarely override this method because the framework always\ncalls <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> after a dependency changes. Some subclasses do override\nthis method because they need to do some expensive work (e.g., network\nfetches) when their dependencies change, and that work would be too\nexpensive to do for every build.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didChangeDependencies() {\n  super.didChangeDependencies();\n  _updatePosition();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/didChangeDependencies.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeDependencies",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>Called whenever the widget configuration changes.<\/p>\n<p>If the parent widget rebuilds and request that this location in the tree\nupdate to display a new widget with the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and\n<a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>, the framework will update the <a href=\"widgets\/State\/widget.html\">widget<\/a> property of this\n<a href=\"widgets\/State-class.html\">State<\/a> object to refer to the new widget and then call this method\nwith the previous widget as an argument.<\/p>\n<p>Override this method to respond when the <a href=\"widgets\/State\/widget.html\">widget<\/a> changes (e.g., to start\nimplicit animations).<\/p>\n<p>The framework always calls <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> after calling <a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a>, which\nmeans any calls to <a href=\"widgets\/State\/setState.html\">setState<\/a> in <a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a> are redundant.<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/State\/initState.html\">initState<\/a>,\n<a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/ScrollableState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/State\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/ScrollableState\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.didUpdateWidget(oldWidget).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didUpdateWidget(Scrollable oldWidget) {\n  super.didUpdateWidget(oldWidget);\n\n  if (widget.controller != oldWidget.controller) {\n    oldWidget.controller?.detach(position);\n    widget.controller?.attach(position);\n  }\n\n  if (_shouldUpdatePosition(oldWidget))\n    _updatePosition();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/didUpdateWidget.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didUpdateWidget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Scrollable"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is removed from the tree permanently.<\/p>\n<p>The framework calls this method when this <a href=\"widgets\/State-class.html\">State<\/a> object will never\nbuild again. After the framework calls <a href=\"widgets\/ScrollableState\/dispose.html\">dispose<\/a>, the <a href=\"widgets\/State-class.html\">State<\/a> object is\nconsidered unmounted and the <a href=\"widgets\/State\/mounted.html\">mounted<\/a> property is false. It is an error\nto call <a href=\"widgets\/State\/setState.html\">setState<\/a> at this point. This stage of the lifecycle is terminal:\nthere is no way to remount a <a href=\"widgets\/State-class.html\">State<\/a> object that has been disposed.<\/p>\n<p>Subclasses should override this method to release any resources retained\nby this object (e.g., stop any active animations).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/ScrollableState\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/State\/initState.html\">initState<\/a>,\n<a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/ScrollableState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/State\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/ScrollableState\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/ScrollableState\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure to end your method with a call to\nsuper.dispose().<\/p>\n<p>See also <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a>, which is called prior to <a href=\"widgets\/ScrollableState\/dispose.html\">dispose<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  widget.controller?.detach(position);\n  position.dispose();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/dispose.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>Whether the user can drag the widget, for example to initiate a scroll.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n@protected\nvoid setCanDrag(bool canDrag) {\n  if (canDrag == _lastCanDrag &amp;&amp; (!canDrag || widget.axis == _lastAxisDirection))\n    return;\n  if (!canDrag) {\n    _gestureRecognizers = const &lt;Type, GestureRecognizerFactory&gt;{};\n  } else {\n    switch (widget.axis) {\n      case Axis.vertical:\n        _gestureRecognizers = &lt;Type, GestureRecognizerFactory&gt;{\n          VerticalDragGestureRecognizer: GestureRecognizerFactoryWithHandlers&lt;VerticalDragGestureRecognizer&gt;(\n            () =&gt; VerticalDragGestureRecognizer(),\n            (VerticalDragGestureRecognizer instance) {\n              instance\n                ..onDown = _handleDragDown\n                ..onStart = _handleDragStart\n                ..onUpdate = _handleDragUpdate\n                ..onEnd = _handleDragEnd\n                ..onCancel = _handleDragCancel\n                ..minFlingDistance = _physics?.minFlingDistance\n                ..minFlingVelocity = _physics?.minFlingVelocity\n                ..maxFlingVelocity = _physics?.maxFlingVelocity\n                ..dragStartBehavior = widget.dragStartBehavior;\n            },\n          ),\n        };\n        break;\n      case Axis.horizontal:\n        _gestureRecognizers = &lt;Type, GestureRecognizerFactory&gt;{\n          HorizontalDragGestureRecognizer: GestureRecognizerFactoryWithHandlers&lt;HorizontalDragGestureRecognizer&gt;(\n            () =&gt; HorizontalDragGestureRecognizer(),\n            (HorizontalDragGestureRecognizer instance) {\n              instance\n                ..onDown = _handleDragDown\n                ..onStart = _handleDragStart\n                ..onUpdate = _handleDragUpdate\n                ..onEnd = _handleDragEnd\n                ..onCancel = _handleDragCancel\n                ..minFlingDistance = _physics?.minFlingDistance\n                ..minFlingVelocity = _physics?.minFlingVelocity\n                ..maxFlingVelocity = _physics?.maxFlingVelocity\n                ..dragStartBehavior = widget.dragStartBehavior;\n            },\n          ),\n        };\n        break;\n    }\n  }\n  _lastCanDrag = canDrag;\n  _lastAxisDirection = widget.axis;\n  if (_gestureDetectorKey.currentState != null)\n    _gestureDetectorKey.currentState.replaceGestureRecognizers(_gestureRecognizers);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/setCanDrag.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setCanDrag",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": [
                {
                    "name": "canDrag",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Whether the contents of the widget should ignore <a href=\"gestures\/PointerEvent-class.html\">PointerEvent<\/a> inputs.<\/p>\n<p>Setting this value to true prevents the use from interacting with the\ncontents of the widget with pointer events. The widget itself is still\ninteractive.<\/p>\n<p>For example, if the scroll position is being driven by an animation, it\nmight be appropriate to set this value to ignore pointer events to\nprevent the user from accidentally interacting with the contents of the\nwidget as it animates. The user will still be able to touch the widget,\npotentially stopping the animation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n@protected\nvoid setIgnorePointer(bool value) {\n  if (_shouldIgnorePointer == value)\n    return;\n  _shouldIgnorePointer = value;\n  if (_ignorePointerKey.currentContext != null) {\n    final RenderIgnorePointer renderBox = _ignorePointerKey.currentContext.findRenderObject();\n    renderBox.ignoring = _shouldIgnorePointer;\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/setIgnorePointer.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setIgnorePointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Set the <a href=\"dart-ui\/SemanticsAction-class.html\">SemanticsAction<\/a>s that should be expose to the semantics tree.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n@protected\nvoid setSemanticsActions(Set&lt;SemanticsAction&gt; actions) {\n  if (_gestureDetectorKey.currentState != null)\n    _gestureDetectorKey.currentState.replaceSemanticsActions(actions);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ScrollableState\/setSemanticsActions.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setSemanticsActions",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ScrollableState",
            "params": [
                {
                    "name": "actions",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Set<dart:ui.SemanticsAction>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The direction in which the widget scrolls.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAxisDirection get axisDirection =&gt; widget.axisDirection;<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollableState\/axisDirection.html",
            "name": "axisDirection",
            "isDeprecated": false,
            "type": "painting.AxisDirection",
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> that should be used when dispatching\n<a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a>s.<\/p>\n<p>This context is typically different that the context of the scrollable\nwidget itself. For example, <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> uses a context outside the\n<a href=\"widgets\/Viewport-class.html\">Viewport<\/a> but inside the widgets created by\n<a href=\"widgets\/ScrollBehavior\/buildViewportChrome.html\">ScrollBehavior.buildViewportChrome<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBuildContext get notificationContext =&gt; _gestureDetectorKey.currentContext;<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollableState\/notificationContext.html",
            "name": "notificationContext",
            "isDeprecated": false,
            "type": "widgets.BuildContext",
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>The manager for this <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget's viewport position.<\/p>\n<p>To control what kind of <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> is created for a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>,\nprovide it with custom <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> that creates the appropriate\n<a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> in its <a href=\"widgets\/ScrollController\/createScrollPosition.html\">ScrollController.createScrollPosition<\/a> method.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ScrollPosition get position =&gt; _position;<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollableState\/position.html",
            "name": "position",
            "isDeprecated": false,
            "type": "widgets.ScrollPosition",
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> that should be used when searching for a <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a>.<\/p>\n<p>This context is typically the context of the scrollable widget itself. In\nparticular, it should involve any <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>s that are dynamically\ncreated as part of creating the scrolling widget, since those would be\ndifferent each time the widget is created.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBuildContext get storageContext =&gt; context;<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollableState\/storageContext.html",
            "name": "storageContext",
            "isDeprecated": false,
            "type": "widgets.BuildContext",
            "memberOf": "widgets.ScrollableState",
            "params": []
        },
        {
            "desc": "<p>A <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> to use when animating the scroll position.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTickerProvider get vsync =&gt; this;<\/code><\/pre>\n        ",
            "href": "widgets\/ScrollableState\/vsync.html",
            "name": "vsync",
            "isDeprecated": false,
            "type": "scheduler.TickerProvider",
            "memberOf": "widgets.ScrollableState",
            "params": []
        }
    ]
}