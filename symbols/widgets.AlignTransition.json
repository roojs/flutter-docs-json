{
    "name": "widgets.AlignTransition",
    "extends": [
        "widgets.AnimatedWidget",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "AlignTransition",
            "type": "",
            "desc": "<p>Creates an animated <a href=\"widgets\/Align-class.html\">Align<\/a> whose <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> animation updates\nthe widget.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Align\/Align.html\">new Align<\/a>.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.AlignTransition",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "animation.Animation<painting.AlignmentGeometry>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "painting.AlignmentGeometry"
                    ]
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "widthFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "heightFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/AlignTransition\/AlignTransition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlignTransition({\n  Key key,\n  @required Animation&lt;AlignmentGeometry&gt; alignment,\n  @required this.child,\n  this.widthFactor,\n  this.heightFactor,\n}) : assert(alignment != null),\n     assert(child != null),\n     super(key: key, listenable: alignment);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to build widgets that depend on the state of the\nlistenable (e.g., the current value of the animation).<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AlignTransition",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/AlignTransition\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return Align(\n    alignment: alignment.value,\n    widthFactor: widthFactor,\n    heightFactor: heightFactor,\n    child: child,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "alignment",
            "type": "animation.Animation<painting.AlignmentGeometry>",
            "types": [
                "animation.Animation",
                "painting.AlignmentGeometry"
            ],
            "desc": "<p>The animation that controls the child's alignment.<\/p>\n        ",
            "memberOf": "widgets.AlignTransition",
            "isConstant": false,
            "href": "widgets\/AlignTransition\/alignment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;AlignmentGeometry&gt; get alignment =&gt; listenable;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "widgets.AlignTransition",
            "isConstant": false,
            "href": "widgets\/AlignTransition\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "heightFactor",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>If non-null, the child's height factor, see <a href=\"widgets\/AlignTransition\/heightFactor.html\">Align.heightFactor<\/a>.<\/p>\n        ",
            "memberOf": "widgets.AlignTransition",
            "isConstant": false,
            "href": "widgets\/AlignTransition\/heightFactor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double heightFactor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "widthFactor",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>If non-null, the child's width factor, see <a href=\"widgets\/AlignTransition\/widthFactor.html\">Align.widthFactor<\/a>.<\/p>\n        ",
            "memberOf": "widgets.AlignTransition",
            "isConstant": false,
            "href": "widgets\/AlignTransition\/widthFactor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double widthFactor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/AlignTransition-class.html",
    "desc": "<p>Animated version of an <a href=\"widgets\/Align-class.html\">Align<\/a> that animates its <a href=\"widgets\/AlignTransition\/alignment.html\">Align.alignment<\/a> property.<\/p>\n<p>Here's an illustration of the <a href=\"widgets\/DecoratedBoxTransition-class.html\">DecoratedBoxTransition<\/a> widget, with it's\n<code>decoration<\/code> animated by a <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> set to <a href=\"animation\/Curves\/decelerate-constant.html\">Curves.decelerate<\/a>:<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:378px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:378px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/widgets\/align_transition.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PositionedTransition-class.html\">PositionedTransition<\/a>, a widget that animates its child from a start\nposition to an end position over the lifetime of the animation.<\/li>\n<li>\n<a href=\"widgets\/RelativePositionedTransition-class.html\">RelativePositionedTransition<\/a>, a widget that transitions its child's\nposition based on the value of a rectangle relative to a bounding box.<\/li>\n<li>\n<a href=\"widgets\/SizeTransition-class.html\">SizeTransition<\/a>, a widget that animates its own size and clips and\naligns its child.<\/li>\n<li>\n<a href=\"widgets\/SlideTransition-class.html\">SlideTransition<\/a>, a widget that animates the position of a widget\nrelative to its normal position.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AlignTransition"
}