{
    "desc": "<p>A render object that displays a paragraph of text<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderParagraph-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.RenderParagraph",
    "shortname": "RenderParagraph",
    "extends": [
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a paragraph render object.<\/p>\n<p>The <code>text<\/code>, <code>textAlign<\/code>, <code>textDirection<\/code>, <code>overflow<\/code>, <code>softWrap<\/code>, and\n<code>textScaleFactor<\/code> arguments must not be null.<\/p>\n<p>The <code>maxLines<\/code> property may be null (and indeed defaults to null), but if\nit is not null, it must be greater than zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderParagraph(\n  TextSpan text, {\n  TextAlign textAlign = TextAlign.start,\n  @required TextDirection textDirection,\n  bool softWrap = true,\n  TextOverflow overflow = TextOverflow.clip,\n  double textScaleFactor = 1.0,\n  int maxLines,\n  Locale locale,\n  StrutStyle strutStyle,\n}) : assert(text != null),\n     assert(text.debugAssertIsValid()),\n     assert(textAlign != null),\n     assert(textDirection != null),\n     assert(softWrap != null),\n     assert(overflow != null),\n     assert(textScaleFactor != null),\n     assert(maxLines == null || maxLines &gt; 0),\n     _softWrap = softWrap,\n     _overflow = overflow,\n     _textPainter = TextPainter(\n       text: text,\n       textAlign: textAlign,\n       textDirection: textDirection,\n       textScaleFactor: textScaleFactor,\n       maxLines: maxLines,\n       ellipsis: overflow == TextOverflow.ellipsis ? _kEllipsis : null,\n       locale: locale,\n       strutStyle: strutStyle,\n     );<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/RenderParagraph.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderParagraph",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "locale",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                },
                {
                    "name": "maxLines",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "overflow",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.TextOverflow"
                },
                {
                    "name": "softWrap",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "strutStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.StrutStyle"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextSpan"
                },
                {
                    "name": "textAlign",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textScaleFactor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Assemble the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> for this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>If <code>isSemanticBoundary<\/code> is true, this method is called with the <code>node<\/code>\ncreated for this <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, the <code>config<\/code> to be applied to that node\nand the <code>children<\/code> <code>SemanticNode<\/code>s that descendants of this RenderObject\nhave generated.<\/p>\n<p>By default, the method will annotate <code>node<\/code> with <code>config<\/code> and add the\n<code>children<\/code> to it.<\/p>\n<p>Subclasses can override this method to add additional <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s\nto the tree. If new <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s are instantiated in this method\nthey must be disposed in <a href=\"rendering\/RenderObject\/clearSemantics.html\">clearSemantics<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid assembleSemanticsNode(SemanticsNode node, SemanticsConfiguration config, Iterable&lt;SemanticsNode&gt; children) {\n  assert(_recognizerOffsets.isNotEmpty);\n  assert(_recognizerOffsets.length.isEven);\n  assert(_recognizers.isNotEmpty);\n  assert(children.isEmpty);\n  final List&lt;SemanticsNode&gt; newChildren = &lt;SemanticsNode&gt;[];\n  final String rawLabel = text.toPlainText();\n  int current = 0;\n  double order = -1.0;\n  TextDirection currentDirection = textDirection;\n  Rect currentRect;\n\n  SemanticsConfiguration buildSemanticsConfig(int start, int end) {\n    final TextDirection initialDirection = currentDirection;\n    final TextSelection selection = TextSelection(baseOffset: start, extentOffset: end);\n    final List&lt;ui.TextBox&gt; rects = getBoxesForSelection(selection);\n    Rect rect;\n    for (ui.TextBox textBox in rects) {\n      rect ??= textBox.toRect();\n      rect = rect.expandToInclude(textBox.toRect());\n      currentDirection = textBox.direction;\n    }\n    \/\/ round the current rectangle to make this API testable and add some\n    \/\/ padding so that the accessibility rects do not overlap with the text.\n    \/\/ TODO(jonahwilliams): implement this for all text accessibility rects.\n    currentRect = Rect.fromLTRB(\n      rect.left.floorToDouble() - 4.0,\n      rect.top.floorToDouble() - 4.0,\n      rect.right.ceilToDouble() + 4.0,\n      rect.bottom.ceilToDouble() + 4.0,\n    );\n    order += 1;\n    return SemanticsConfiguration()\n      ..sortKey = OrdinalSortKey(order)\n      ..textDirection = initialDirection\n      ..label = rawLabel.substring(start, end);\n  }\n\n  for (int i = 0, j = 0; i &lt; _recognizerOffsets.length; i += 2, j++) {\n    final int start = _recognizerOffsets[i];\n    final int end = _recognizerOffsets[i + 1];\n    if (current != start) {\n      final SemanticsNode node = SemanticsNode();\n      final SemanticsConfiguration configuration = buildSemanticsConfig(current, start);\n      node.updateWith(config: configuration);\n      node.rect = currentRect;\n      newChildren.add(node);\n    }\n    final SemanticsNode node = SemanticsNode();\n    final SemanticsConfiguration configuration = buildSemanticsConfig(start, end);\n    final GestureRecognizer recognizer = _recognizers[j];\n    if (recognizer is TapGestureRecognizer) {\n      configuration.onTap = recognizer.onTap;\n    } else if (recognizer is LongPressGestureRecognizer) {\n      configuration.onLongPress = recognizer.onLongPress;\n    } else {\n      assert(false);\n    }\n    node.updateWith(config: configuration);\n    node.rect = currentRect;\n    newChildren.add(node);\n    current = end;\n  }\n  if (current &lt; rawLabel.length) {\n    final SemanticsNode node = SemanticsNode();\n    final SemanticsConfiguration configuration = buildSemanticsConfig(current, rawLabel.length);\n    node.updateWith(config: configuration);\n    node.rect = currentRect;\n    newChildren.add(node);\n  }\n  node.updateWith(config: config, childrenInInversePaintOrder: newChildren);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/assembleSemanticsNode.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "assembleSemanticsNode",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<semantics.SemanticsNode>"
                },
                {
                    "name": "config",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                },
                {
                    "name": "node",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsNode"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the y-coordinate of the position of the box to\nthe y-coordinate of the first given baseline in the box's contents, if\nany, or null otherwise.<\/p>\n<p>Do not call this function directly. If you need to know the baseline of a\nchild from an invocation of <a href=\"rendering\/RenderParagraph\/performLayout.html\">performLayout<\/a> or <a href=\"rendering\/RenderParagraph\/paint.html\">paint<\/a>, call\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>.<\/p>\n<p>Subclasses should override this method to supply the distances to their\nbaselines. When implementing this method, there are generally three\nstrategies:<\/p>\n<ul>\n<li>\n<p>For classes that use the <a href=\"rendering\/ContainerRenderObjectMixin-mixin.html\">ContainerRenderObjectMixin<\/a> child model,\nconsider mixing in the <a href=\"rendering\/RenderBoxContainerDefaultsMixin-mixin.html\">RenderBoxContainerDefaultsMixin<\/a> class and\nusing\n<a href=\"rendering\/RenderBoxContainerDefaultsMixin\/defaultComputeDistanceToFirstActualBaseline.html\">RenderBoxContainerDefaultsMixin.defaultComputeDistanceToFirstActualBaseline<\/a>.<\/p>\n<\/li>\n<li>\n<p>For classes that define a particular baseline themselves, return that\nvalue directly.<\/p>\n<\/li>\n<li>\n<p>For classes that have a child to which they wish to defer the\ncomputation, call <a href=\"rendering\/RenderBox\/getDistanceToActualBaseline.html\">getDistanceToActualBaseline<\/a> on the child (not\n<a href=\"rendering\/RenderParagraph\/computeDistanceToActualBaseline.html\">computeDistanceToActualBaseline<\/a>, the internal implementation, and not\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>, the public entry point for this API).<\/p>\n<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeDistanceToActualBaseline(TextBaseline baseline) {\n  assert(!debugNeedsLayout);\n  assert(constraints != null);\n  assert(constraints.debugAssertIsValid());\n  _layoutTextWithConstraints(constraints);\n  return _textPainter.computeDistanceToActualBaseline(baseline);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/computeDistanceToActualBaseline.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeDistanceToActualBaseline",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "baseline",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextBaseline"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderParagraph\/performLayout.html\">performLayout<\/a>. Should return the\nsmallest height beyond which increasing the height never decreases the\npreferred width. The preferred width is the value that would be returned\nby <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for that height.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for the same width.<\/p>\n<p>Otherwise, the width argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderParagraph\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a>.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicHeight(double width) {\n  return _computeIntrinsicHeight(width);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/computeMaxIntrinsicHeight.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMaxIntrinsicHeight",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderParagraph\/performLayout.html\">performLayout<\/a>. This should return\nthe smallest width beyond which increasing the width never decreases the\npreferred height. The preferred height is the value that would be returned\nby <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for that width.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for the same height.<\/p>\n<p>Otherwise, the height argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicWidth(double height) {\n  _layoutText();\n  return _textPainter.maxIntrinsicWidth;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/computeMaxIntrinsicWidth.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMaxIntrinsicWidth",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "height",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderParagraph\/performLayout.html\">performLayout<\/a>. Should return the\nminimum height that this box could be without failing to correctly paint\nits contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nheight-in-width-out, or if the layout algorithm uses both the incoming\nheight and width constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>width<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then the width\nargument is the width to use.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicHeight(double width) {\n  return _computeIntrinsicHeight(width);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/computeMinIntrinsicHeight.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMinIntrinsicHeight",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderParagraph\/performLayout.html\">performLayout<\/a>. This method should\nreturn the minimum width that this box could be without failing to\ncorrectly paint its contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nwidth-in-height-out, or if the layout algorithm uses both the incoming\nwidth and height constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>height<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then the height\nargument is the height to use.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<h3 id=\"text\">Text<\/h3>\n<p>Text is the canonical example of a width-in-height-out algorithm. The\n<code>height<\/code> argument is therefore ignored.<\/p>\n<p>Consider the string \"Hello World\" The <em>maximum<\/em> intrinsic width (as\nreturned from <a href=\"rendering\/RenderParagraph\/computeMaxIntrinsicWidth.html\">computeMaxIntrinsicWidth<\/a>) would be the width of the string\nwith no line breaks.<\/p>\n<p>The minimum intrinsic width would be the width of the widest word, \"Hello\"\nor \"World\". If the text is rendered in an even narrower width, however, it\nmight still not overflow. For example, maybe the rendering would put a\nline-break half-way through the words, as in \"Hel\u205elo\u205eWor\u205eld\". However,\nthis wouldn't be a <em>correct<\/em> rendering, and <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> is\nsupposed to render the minimum width that the box could be without failing\nto <em>correctly<\/em> paint the contents within itself.<\/p>\n<p>The minimum intrinsic <em>height<\/em> for a given width smaller than the minimum\nintrinsic width could therefore be greater than the minimum intrinsic\nheight for the minimum intrinsic width.<\/p>\n<h3 id=\"viewports-eg-scrolling-lists\">Viewports (e.g. scrolling lists)<\/h3>\n<p>Some render boxes are intended to clip their children. For example, the\nrender box for a scrolling list might always size itself to its parents'\nsize (or rather, to the maximum incoming constraints), regardless of the\nchildren's sizes, and then clip the children and position them based on\nthe current scroll offset.<\/p>\n<p>The intrinsic dimensions in these cases still depend on the children, even\nthough the layout algorithm sizes the box in a way independent of the\nchildren. It is the size that is needed to paint the box's contents (in\nthis case, the children) <em>without clipping<\/em> that matters.<\/p>\n<h3 id=\"when-the-intrinsic-dimensions-cannot-be-known\">When the intrinsic dimensions cannot be known<\/h3>\n<p>There are cases where render objects do not have an efficient way to\ncompute their intrinsic dimensions. For example, it may be prohibitively\nexpensive to reify and measure every child of a lazy viewport (viewports\ngenerally only instantiate the actually visible children), or the\ndimensions may be computed by a callback about which the render object\ncannot reason.<\/p>\n<p>In such cases, it may be impossible (or at least impractical) to actually\nreturn a valid answer. In such cases, the intrinsic functions should throw\nwhen <a href=\"rendering\/RenderObject\/debugCheckingIntrinsics.html\">RenderObject.debugCheckingIntrinsics<\/a> is false and asserts are\nenabled, and return 0.0 otherwise.<\/p>\n<p>See the implementations of <a href=\"widgets\/LayoutBuilder-class.html\">LayoutBuilder<\/a> or <a href=\"rendering\/RenderViewportBase-class.html\">RenderViewportBase<\/a> for\nexamples (in particular,\n<a href=\"rendering\/RenderViewportBase\/debugThrowIfNotCheckingIntrinsics.html\">RenderViewportBase.debugThrowIfNotCheckingIntrinsics<\/a>).<\/p>\n<h3 id=\"aspect-ratio-driven-boxes\">Aspect-ratio-driven boxes<\/h3>\n<p>Some boxes always return a fixed size based on the constraints. For these\nboxes, the intrinsic functions should return the appropriate size when the\nincoming <code>height<\/code> or <code>width<\/code> argument is finite, treating that as a tight\nconstraint in the respective direction and treating the other direction's\nconstraints as unbounded. This is because the definitions of\n<a href=\"rendering\/RenderParagraph\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> and <a href=\"rendering\/RenderParagraph\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> are in terms of\nwhat the dimensions <em>could be<\/em>, and such boxes can only be one size in\nsuch cases.<\/p>\n<p>When the incoming argument is not finite, then they should return the\nactual intrinsic dimensions based on the contents, as any other box would.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicWidth(double height) {\n  _layoutText();\n  return _textPainter.minIntrinsicWidth;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/computeMinIntrinsicWidth.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMinIntrinsicWidth",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "height",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"rendering\/RenderObject\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderParagraph\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  return &lt;DiagnosticsNode&gt;[text.toDiagnosticsNode(name: 'text', style: DiagnosticsTreeStyle.transition)];\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/debugDescribeChildren.html",
            "isDeprecated": false,
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "name": "debugDescribeChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderParagraph\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection));\n  properties.add(FlagProperty('softWrap', value: softWrap, ifTrue: 'wrapping at box width', ifFalse: 'no wrapping except at line break characters', showName: true));\n  properties.add(EnumProperty&lt;TextOverflow&gt;('overflow', overflow));\n  properties.add(DoubleProperty('textScaleFactor', textScaleFactor, defaultValue: 1.0));\n  properties.add(DiagnosticsProperty&lt;Locale&gt;('locale', locale, defaultValue: null));\n  properties.add(IntProperty('maxLines', maxLines, ifNull: 'unlimited'));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"rendering\/RenderParagraph\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration(SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n  _recognizerOffsets.clear();\n  _recognizers.clear();\n  int offset = 0;\n  text.visitTextSpan((TextSpan span) {\n    if (span.recognizer != null &amp;&amp; (span.recognizer is TapGestureRecognizer || span.recognizer is LongPressGestureRecognizer)) {\n      _recognizerOffsets.add(offset);\n      _recognizerOffsets.add(offset + span.text.length);\n      _recognizers.add(span.recognizer);\n    }\n    offset += span.text.length;\n    return true;\n  });\n  if (_recognizerOffsets.isNotEmpty) {\n    config.explicitChildNodes = true;\n    config.isSemanticBoundary = true;\n  } else {\n    config.label = text.toPlainText();\n    config.textDirection = textDirection;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/describeSemanticsConfiguration.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "describeSemanticsConfiguration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "config",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Returns a list of rects that bound the given selection.<\/p>\n<p>A given selection might have more than one rect if this text painter\ncontains bidirectional text because logically contiguous text might not be\nvisually contiguous.<\/p>\n<p>Valid only after <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;ui.TextBox&gt; getBoxesForSelection(TextSelection selection) {\n  assert(!debugNeedsLayout);\n  _layoutTextWithConstraints(constraints);\n  return _textPainter.getBoxesForSelection(selection);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/getBoxesForSelection.html",
            "isDeprecated": false,
            "type": "dart:core.List<dart:ui.TextBox>",
            "name": "getBoxesForSelection",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "selection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.TextSelection"
                }
            ]
        },
        {
            "desc": "<p>Returns the offset at which to paint the caret.<\/p>\n<p>Valid only after <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getOffsetForCaret(TextPosition position, Rect caretPrototype) {\n  assert(!debugNeedsLayout);\n  _layoutTextWithConstraints(constraints);\n  return _textPainter.getOffsetForCaret(position, caretPrototype);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/getOffsetForCaret.html",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "name": "getOffsetForCaret",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "caretPrototype",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                }
            ]
        },
        {
            "desc": "<p>Returns the position within the text for the given pixel offset.<\/p>\n<p>Valid only after <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition getPositionForOffset(Offset offset) {\n  assert(!debugNeedsLayout);\n  _layoutTextWithConstraints(constraints);\n  return _textPainter.getPositionForOffset(offset);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/getPositionForOffset.html",
            "isDeprecated": false,
            "type": "dart:ui.TextPosition",
            "name": "getPositionForOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the text range of the word at the given offset. Characters not\npart of a word, such as spaces, symbols, and punctuation, have word breaks\non both sides. In such cases, this method will return a text range that\ncontains the given text position.<\/p>\n<p>Word boundaries are defined more precisely in Unicode Standard Annex #29\n<a href=\"http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries\">www.unicode.org\/reports\/tr29\/#Word_Boundaries<\/a>.<\/p>\n<p>Valid only after <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextRange getWordBoundary(TextPosition position) {\n  assert(!debugNeedsLayout);\n  _layoutTextWithConstraints(constraints);\n  return _textPainter.getWordBoundary(position);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/getWordBoundary.html",
            "isDeprecated": false,
            "type": "services.TextRange",
            "name": "getWordBoundary",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                }
            ]
        },
        {
            "desc": "<p>Override this method to handle pointer events that hit this render object.<\/p>\n<p>For <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> objects, the <code>entry<\/code> argument is a <a href=\"rendering\/BoxHitTestEntry-class.html\">BoxHitTestEntry<\/a>. From this\nobject you can determine the <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a>'s position in local coordinates.\n(This is useful because <a href=\"gestures\/PointerEvent\/position.html\">PointerEvent.position<\/a> is in global coordinates.)<\/p>\n<p>If you override this, consider calling <a href=\"rendering\/RenderBox\/debugHandleEvent.html\">debugHandleEvent<\/a> as follows, so\nthat you can support <a href=\"rendering\/debugPaintPointersEnabled.html\">debugPaintPointersEnabled<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, HitTestEntry entry) {\n  assert(debugHandleEvent(event, entry));\n  \/\/ ... handle the event ...\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, BoxHitTestEntry entry) {\n  assert(debugHandleEvent(event, entry));\n  if (event is! PointerDownEvent)\n    return;\n  _layoutTextWithConstraints(constraints);\n  final Offset offset = entry.localPosition;\n  final TextPosition position = _textPainter.getPositionForOffset(offset);\n  final TextSpan span = _textPainter.text.getSpanForPosition(position);\n  span?.recognizer?.addPointer(event);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/handleEvent.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "handleEvent",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "entry",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.BoxHitTestEntry"
                },
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Override this method if this render object can be hit even if its\nchildren were not hit.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestSelf(Offset position) =&gt; true;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/hitTestSelf.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTestSelf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  \/\/ Ideally we could compute the min\/max intrinsic width\/height with a\n  \/\/ non-destructive operation. However, currently, computing these values\n  \/\/ will destroy state inside the painter. If that happens, we need to\n  \/\/ get back the correct state by calling _layout again.\n  \/\/\n  \/\/ TODO(abarth): Make computing the min\/max intrinsic width\/height\n  \/\/ a non-destructive operation.\n  \/\/\n  \/\/ If you remove this call, make sure that changing the textAlign still\n  \/\/ works properly.\n  _layoutTextWithConstraints(constraints);\n  final Canvas canvas = context.canvas;\n\n  assert(() {\n    if (debugRepaintTextRainbowEnabled) {\n      final Paint paint = Paint()\n        ..color = debugCurrentRepaintColor.toColor();\n      canvas.drawRect(offset &amp; size, paint);\n    }\n    return true;\n  }());\n\n  if (_needsClipping) {\n    final Rect bounds = offset &amp; size;\n    if (_overflowShader != null) {\n      \/\/ This layer limits what the shader below blends with to be just the text\n      \/\/ (as opposed to the text and its background).\n      canvas.saveLayer(bounds, Paint());\n    } else {\n      canvas.save();\n    }\n    canvas.clipRect(bounds);\n  }\n  _textPainter.paint(canvas, offset);\n  if (_needsClipping) {\n    if (_overflowShader != null) {\n      canvas.translate(offset.dx, offset.dy);\n      final Paint paint = Paint()\n        ..blendMode = BlendMode.modulate\n        ..shader = _overflowShader;\n      canvas.drawRect(Offset.zero &amp; size, paint);\n    }\n    canvas.restore();\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  _layoutTextWithConstraints(constraints);\n  \/\/ We grab _textPainter.size and _textPainter.didExceedMaxLines here because\n  \/\/ assigning to `size` will trigger us to validate our intrinsic sizes,\n  \/\/ which will change _textPainter's layout because the intrinsic size\n  \/\/ calculations are destructive. Other _textPainter state will also be\n  \/\/ affected. See also RenderEditable which has a similar issue.\n  final Size textSize = _textPainter.size;\n  final bool textDidExceedMaxLines = _textPainter.didExceedMaxLines;\n  size = constraints.constrain(textSize);\n\n  final bool didOverflowHeight = size.height &lt; textSize.height || textDidExceedMaxLines;\n  final bool didOverflowWidth = size.width &lt; textSize.width;\n  \/\/ TODO(abarth): We're only measuring the sizes of the line boxes here. If\n  \/\/ the glyphs draw outside the line boxes, we might think that there isn't\n  \/\/ visual overflow when there actually is visual overflow. This can become\n  \/\/ a problem if we start having horizontal overflow and introduce a clip\n  \/\/ that affects the actual (but undetected) vertical overflow.\n  final bool hasVisualOverflow = didOverflowWidth || didOverflowHeight;\n  if (hasVisualOverflow) {\n    switch (_overflow) {\n      case TextOverflow.visible:\n        _needsClipping = false;\n        _overflowShader = null;\n        break;\n      case TextOverflow.clip:\n      case TextOverflow.ellipsis:\n        _needsClipping = true;\n        _overflowShader = null;\n        break;\n      case TextOverflow.fade:\n        assert(textDirection != null);\n        _needsClipping = true;\n        final TextPainter fadeSizePainter = TextPainter(\n          text: TextSpan(style: _textPainter.text.style, text: '\\u2026'),\n          textDirection: textDirection,\n          textScaleFactor: textScaleFactor,\n          locale: locale,\n        )..layout();\n        if (didOverflowWidth) {\n          double fadeEnd, fadeStart;\n          switch (textDirection) {\n            case TextDirection.rtl:\n              fadeEnd = 0.0;\n              fadeStart = fadeSizePainter.width;\n              break;\n            case TextDirection.ltr:\n              fadeEnd = size.width;\n              fadeStart = fadeEnd - fadeSizePainter.width;\n              break;\n          }\n          _overflowShader = ui.Gradient.linear(\n            Offset(fadeStart, 0.0),\n            Offset(fadeEnd, 0.0),\n            &lt;Color&gt;[const Color(0xFFFFFFFF), const Color(0x00FFFFFF)],\n          );\n        } else {\n          final double fadeEnd = size.height;\n          final double fadeStart = fadeEnd - fadeSizePainter.height \/ 2.0;\n          _overflowShader = ui.Gradient.linear(\n            Offset(0.0, fadeStart),\n            Offset(0.0, fadeEnd),\n            &lt;Color&gt;[const Color(0xFFFFFFFF), const Color(0x00FFFFFF)],\n          );\n        }\n        break;\n    }\n  } else {\n    _needsClipping = false;\n    _overflowShader = null;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderParagraph\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this paragraph currently has a <a href=\"dart-ui\/Shader-class.html\">dart:ui.Shader<\/a> for its overflow\neffect.<\/p>\n<p>Used to test this object. Not for use in production.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nbool get debugHasOverflowShader =&gt; _overflowShader != null;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/debugHasOverflowShader.html",
            "name": "debugHasOverflowShader",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>Used by this paragraph's internal <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> to select a locale-specific\nfont.<\/p>\n<p>In some cases the same Unicode character may be rendered differently depending\non the locale. For example the '\u9aa8' character is rendered differently in\nthe Chinese and Japanese locales. In these cases the <a href=\"rendering\/RenderParagraph\/locale.html\">locale<\/a> may be used\nto select a locale-specific font.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Locale get locale =&gt; _textPainter.locale;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/locale.html",
            "name": "locale",
            "isDeprecated": false,
            "type": "dart:ui.Locale",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>An optional maximum number of lines for the text to span, wrapping if necessary.\nIf the text exceeds the given number of lines, it will be truncated according\nto <a href=\"rendering\/RenderParagraph\/overflow.html\">overflow<\/a> and <a href=\"rendering\/RenderParagraph\/softWrap.html\">softWrap<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get maxLines =&gt; _textPainter.maxLines;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/maxLines.html",
            "name": "maxLines",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>How visual overflow should be handled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextOverflow get overflow =&gt; _overflow;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/overflow.html",
            "name": "overflow",
            "isDeprecated": false,
            "type": "rendering.TextOverflow",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>Whether the text should break at soft line breaks.<\/p>\n<p>If false, the glyphs in the text will be positioned as if there was\nunlimited horizontal space.<\/p>\n<p>If <a href=\"rendering\/RenderParagraph\/softWrap.html\">softWrap<\/a> is false, <a href=\"rendering\/RenderParagraph\/overflow.html\">overflow<\/a> and <a href=\"rendering\/RenderParagraph\/textAlign.html\">textAlign<\/a> may have unexpected\neffects.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get softWrap =&gt; _softWrap;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/softWrap.html",
            "name": "softWrap",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>The strut style to use. Strut style defines the strut, which sets minimum\nvertical layout metrics.<\/p>\n<p>Omitting or providing null will disable strut.<\/p>\n<p>Omitting or providing null for any properties of <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> will result in\ndefault values being used. It is highly recommended to at least specify a\n<code>fontSize<\/code>.<\/p>\n<p>See <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle get strutStyle =&gt; _textPainter.strutStyle;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/strutStyle.html",
            "name": "strutStyle",
            "isDeprecated": false,
            "type": "painting.StrutStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>The text to display<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSpan get text =&gt; _textPainter.text;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/text.html",
            "name": "text",
            "isDeprecated": false,
            "type": "painting.TextSpan",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>How the text should be aligned horizontally.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextAlign get textAlign =&gt; _textPainter.textAlign;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/textAlign.html",
            "name": "textAlign",
            "isDeprecated": false,
            "type": "dart:ui.TextAlign",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>The directionality of the text.<\/p>\n<p>This decides how the <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>, <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a>, and\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.justify<\/a> values of <a href=\"rendering\/RenderParagraph\/textAlign.html\">textAlign<\/a> are interpreted.<\/p>\n<p>This is also used to disambiguate how to render bidirectional text. For\nexample, if the <a href=\"rendering\/RenderParagraph\/text.html\">text<\/a> is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>This must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textPainter.textDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get textScaleFactor =&gt; _textPainter.textScaleFactor;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/textScaleFactor.html",
            "name": "textScaleFactor",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        },
        {
            "desc": "<p>Returns the size of the text as laid out.<\/p>\n<p>This can differ from <a href=\"rendering\/RenderBox\/size.html\">size<\/a> if the text overflowed or if the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a>\nprovided by the parent <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> forced the layout to be bigger than\nnecessary for the given <a href=\"rendering\/RenderParagraph\/text.html\">text<\/a>.<\/p>\n<p>This returns the <a href=\"rendering\/RenderBox\/size.html\">TextPainter.size<\/a> of the underlying <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>.<\/p>\n<p>Valid only after <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get textSize {\n  assert(!debugNeedsLayout);\n  return _textPainter.size;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderParagraph\/textSize.html",
            "name": "textSize",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderParagraph",
            "params": []
        }
    ]
}