{
    "desc": "<p>A delegate that controls the appearance of a flow layout.<\/p>\n<p>Flow layouts are optimized for moving children around the screen using\ntransformation matrices. For optimal performance, construct the\n<a href=\"rendering\/FlowDelegate-class.html\">FlowDelegate<\/a> with an <a href=\"animation\/Animation-class.html\">Animation<\/a> that ticks whenever the delegate wishes\nto change the transformation matrices for the children and avoid rebuilding\nthe <a href=\"widgets\/Flow-class.html\">Flow<\/a> widget itself every animation frame.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/Flow-class.html\">Flow<\/a><\/li>\n<li><a href=\"rendering\/RenderFlow-class.html\">RenderFlow<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/FlowDelegate-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.FlowDelegate",
    "shortname": "FlowDelegate",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>The flow will repaint whenever <code>repaint<\/code> notifies its listeners.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlowDelegate({ Listenable repaint }) : _repaint = repaint;<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/FlowDelegate.html",
            "isDeprecated": false,
            "type": "",
            "name": "FlowDelegate",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": [
                {
                    "name": "repaint",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Listenable"
                }
            ]
        },
        {
            "desc": "<p>Override to control the layout constraints given to each child.<\/p>\n<p>By default, the children will receive the given constraints, which are the\nconstraints used to size the container. The children need\nnot respect the given constraints, but they are required to respect the\nreturned constraints. For example, the incoming constraints might require\nthe container to have a width of exactly 100.0 and a height of exactly\n100.0, but this function might give the children looser constraints that\nlet them be larger or smaller than 100.0 by 100.0.<\/p>\n<p>If this function depends on information other than the given constraints,\noverride <a href=\"rendering\/FlowDelegate\/shouldRelayout.html\">shouldRelayout<\/a> to indicate when when the container should\nrelayout.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxConstraints getConstraintsForChild(int i, BoxConstraints constraints) =&gt; constraints;<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/getConstraintsForChild.html",
            "isDeprecated": false,
            "type": "rendering.BoxConstraints",
            "name": "getConstraintsForChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": [
                {
                    "name": "constraints",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.BoxConstraints"
                },
                {
                    "name": "i",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Override to control the size of the container for the children.<\/p>\n<p>By default, the flow will be as large as possible. If this function\nreturns a size that does not respect the given constraints, the size will\nbe adjusted to be as close to the returned size as possible while still\nrespecting the constraints.<\/p>\n<p>If this function depends on information other than the given constraints,\noverride <a href=\"rendering\/FlowDelegate\/shouldRelayout.html\">shouldRelayout<\/a> to indicate when when the container should\nrelayout.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size getSize(BoxConstraints constraints) =&gt; constraints.biggest;<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/getSize.html",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "name": "getSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": [
                {
                    "name": "constraints",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.BoxConstraints"
                }
            ]
        },
        {
            "desc": "<p>Override to paint the children of the flow.<\/p>\n<p>Children can be painted in any order, but each child can be painted at\nmost once. Although the container clips the children to its own bounds, it\nis more efficient to skip painting a child altogether rather than having\nit paint entirely outside the container's clip.<\/p>\n<p>To paint a child, call <a href=\"rendering\/FlowPaintingContext\/paintChild.html\">FlowPaintingContext.paintChild<\/a> on the given\n<a href=\"rendering\/FlowPaintingContext-class.html\">FlowPaintingContext<\/a> (the <code>context<\/code> argument). The given context is valid\nonly within the scope of this function call and contains information (such\nas the size of the container) that is useful for picking transformation\nmatrices for the children.<\/p>\n<p>If this function depends on information other than the given context,\noverride <a href=\"rendering\/FlowDelegate\/shouldRepaint.html\">shouldRepaint<\/a> to indicate when when the container should\nrelayout.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paintChildren(FlowPaintingContext context);<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/paintChildren.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paintChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.FlowPaintingContext"
                }
            ]
        },
        {
            "desc": "<p>Override this method to return true when the children need to be laid out.\nThis should compare the fields of the current delegate and the given\noldDelegate and return true if the fields are such that the layout would\nbe different.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldRelayout(covariant FlowDelegate oldDelegate) =&gt; false;<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/shouldRelayout.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "shouldRelayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.FlowDelegate"
                }
            ]
        },
        {
            "desc": "<p>Override this method to return true when the children need to be\nrepainted. This should compare the fields of the current delegate and the\ngiven oldDelegate and return true if the fields are such that\npaintChildren would act differently.<\/p>\n<p>The delegate can also trigger a repaint if the delegate provides the\nrepaint animation argument to this object's constructor and that animation\nticks. Triggering a repaint using this animation-based mechanism is more\nefficient than rebuilding the <a href=\"widgets\/Flow-class.html\">Flow<\/a> widget to change its delegate.<\/p>\n<p>The flow container might repaint even if this function returns false, for\nexample if layout triggers painting (e.g., if <a href=\"rendering\/FlowDelegate\/shouldRelayout.html\">shouldRelayout<\/a> returns\ntrue).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldRepaint(covariant FlowDelegate oldDelegate);<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/shouldRepaint.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "shouldRepaint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.FlowDelegate"
                }
            ]
        },
        {
            "desc": "<p>Override this method to include additional information in the\ndebugging data printed by <a href=\"rendering\/debugDumpRenderTree.html\">debugDumpRenderTree<\/a> and friends.<\/p>\n<p>By default, returns the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> of the class.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "href": "rendering\/FlowDelegate\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.FlowDelegate",
            "params": []
        }
    ],
    "props": []
}