{
    "desc": "<p>A circle that represents a user.<\/p>\n<p>Typically used with a user's profile image, or, in the absence of\nsuch an image, the user's initials. A given user's initials should\nalways be paired with the same background color, for consistency.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIf the avatar is to have an image, the image should be specified in the\n<a href=\"material\/CircleAvatar\/backgroundImage.html\">backgroundImage<\/a> property:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CircleAvatar(\n  backgroundImage: NetworkImage(userAvatarUrl),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The image will be cropped to have a circle shape.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIf the avatar is to just have the user's initials, they are typically\nprovided using a <a href=\"widgets\/Text-class.html\">Text<\/a> widget as the <a href=\"material\/CircleAvatar\/child.html\">child<\/a> and a <a href=\"material\/CircleAvatar\/backgroundColor.html\">backgroundColor<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CircleAvatar(\n  backgroundColor: Colors.brown.shade800,\n  child: Text('AH'),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a>, for representing users or concepts in long form.<\/li>\n<li>\n<a href=\"material\/ListTile-class.html\">ListTile<\/a>, which can combine an icon (such as a <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a>) with\nsome text for a fixed height list entry.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/chips.html#input-chips\">material.io\/design\/components\/chips.html#input-chips<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/CircleAvatar-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.CircleAvatar",
    "shortname": "CircleAvatar",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a circle that represents a user.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CircleAvatar({\n  Key key,\n  this.child,\n  this.backgroundColor,\n  this.backgroundImage,\n  this.foregroundColor,\n  this.radius,\n  this.minRadius,\n  this.maxRadius,\n}) : assert(radius == null || (minRadius == null &amp;&amp; maxRadius == null)),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/CircleAvatar\/CircleAvatar.html",
            "isDeprecated": false,
            "type": "",
            "name": "CircleAvatar",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.CircleAvatar",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "backgroundImage",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ImageProvider"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "foregroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "maxRadius",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "minRadius",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "radius",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/CircleAvatar\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMediaQuery(context));\n  final ThemeData theme = Theme.of(context);\n  TextStyle textStyle = theme.primaryTextTheme.subhead.copyWith(color: foregroundColor);\n  Color effectiveBackgroundColor = backgroundColor;\n  if (effectiveBackgroundColor == null) {\n    switch (ThemeData.estimateBrightnessForColor(textStyle.color)) {\n      case Brightness.dark:\n        effectiveBackgroundColor = theme.primaryColorLight;\n        break;\n      case Brightness.light:\n        effectiveBackgroundColor = theme.primaryColorDark;\n        break;\n    }\n  } else if (foregroundColor == null) {\n    switch (ThemeData.estimateBrightnessForColor(backgroundColor)) {\n      case Brightness.dark:\n        textStyle = textStyle.copyWith(color: theme.primaryColorLight);\n        break;\n      case Brightness.light:\n        textStyle = textStyle.copyWith(color: theme.primaryColorDark);\n        break;\n    }\n  }\n  final double minDiameter = _minDiameter;\n  final double maxDiameter = _maxDiameter;\n  return AnimatedContainer(\n    constraints: BoxConstraints(\n      minHeight: minDiameter,\n      minWidth: minDiameter,\n      maxWidth: maxDiameter,\n      maxHeight: maxDiameter,\n    ),\n    duration: kThemeChangeDuration,\n    decoration: BoxDecoration(\n      color: effectiveBackgroundColor,\n      image: backgroundImage != null\n        ? DecorationImage(image: backgroundImage, fit: BoxFit.cover)\n        : null,\n      shape: BoxShape.circle,\n    ),\n    child: child == null\n        ? null\n        : Center(\n            child: MediaQuery(\n              \/\/ Need to ignore the ambient textScaleFactor here so that the\n              \/\/ text doesn't escape the avatar when the textScaleFactor is large.\n              data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n              child: IconTheme(\n                data: theme.iconTheme.copyWith(color: textStyle.color),\n                child: DefaultTextStyle(\n                  style: textStyle,\n                  child: child,\n                ),\n              ),\n            ),\n          ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/CircleAvatar\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.CircleAvatar",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color with which to fill the circle. Changing the background\ncolor will cause the avatar to animate to the new color.<\/p>\n<p>If a <a href=\"material\/CircleAvatar\/backgroundColor.html\">backgroundColor<\/a> is not specified, the theme's\n<a href=\"material\/ThemeData\/primaryColorLight.html\">ThemeData.primaryColorLight<\/a> is used with dark foreground colors, and\n<a href=\"material\/ThemeData\/primaryColorDark.html\">ThemeData.primaryColorDark<\/a> with light foreground colors.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        },
        {
            "desc": "<p>The background image of the circle. Changing the background\nimage will cause the avatar to animate to the new image.<\/p>\n<p>If the <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> is to have the user's initials, use <a href=\"material\/CircleAvatar\/child.html\">child<\/a> instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider backgroundImage\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/backgroundImage.html",
            "name": "backgroundImage",
            "isDeprecated": false,
            "type": "painting.ImageProvider",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget. If the <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> is to have an image, use\n<a href=\"material\/CircleAvatar\/backgroundImage.html\">backgroundImage<\/a> instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        },
        {
            "desc": "<p>The default text color for text in the circle.<\/p>\n<p>Defaults to the primary text theme color if no <a href=\"material\/CircleAvatar\/backgroundColor.html\">backgroundColor<\/a> is\nspecified.<\/p>\n<p>Defaults to <a href=\"material\/ThemeData\/primaryColorLight.html\">ThemeData.primaryColorLight<\/a> for dark background colors, and\n<a href=\"material\/ThemeData\/primaryColorDark.html\">ThemeData.primaryColorDark<\/a> for light background colors.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color foregroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/foregroundColor.html",
            "name": "foregroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        },
        {
            "desc": "<p>The maximum size of the avatar, expressed as the radius (half the\ndiameter).<\/p>\n<p>If <a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a> is specified, then <a href=\"material\/CircleAvatar\/radius.html\">radius<\/a> must not also be specified.<\/p>\n<p>Defaults to <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>.<\/p>\n<p>Constraint changes are animated, but size changes due to the environment\nitself changing are not. For example, changing the <a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a> from 10 to\n20 when the <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> is in an unconstrained environment will cause\nthe avatar to animate from a 20 pixel diameter to a 40 pixel diameter.\nHowever, if the <a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a> is 40 and the <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> has a parent\n<a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a> whose size changes instantaneously from 20 pixels to 40 pixels,\nthe size will snap to 40 pixels instantly.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double maxRadius\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/maxRadius.html",
            "name": "maxRadius",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        },
        {
            "desc": "<p>The minimum size of the avatar, expressed as the radius (half the\ndiameter).<\/p>\n<p>If <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a> is specified, then <a href=\"material\/CircleAvatar\/radius.html\">radius<\/a> must not also be specified.<\/p>\n<p>Defaults to zero.<\/p>\n<p>Constraint changes are animated, but size changes due to the environment\nitself changing are not. For example, changing the <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a> from 10 to\n20 when the <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> is in an unconstrained environment will cause\nthe avatar to animate from a 20 pixel diameter to a 40 pixel diameter.\nHowever, if the <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a> is 40 and the <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> has a parent\n<a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a> whose size changes instantaneously from 20 pixels to 40 pixels,\nthe size will snap to 40 pixels instantly.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minRadius\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/minRadius.html",
            "name": "minRadius",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        },
        {
            "desc": "<p>The size of the avatar, expressed as the radius (half the diameter).<\/p>\n<p>If <a href=\"material\/CircleAvatar\/radius.html\">radius<\/a> is specified, then neither <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a> nor <a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a> may be\nspecified. Specifying <a href=\"material\/CircleAvatar\/radius.html\">radius<\/a> is equivalent to specifying a <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a>\nand <a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a>, both with the value of <a href=\"material\/CircleAvatar\/radius.html\">radius<\/a>.<\/p>\n<p>If neither <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a> nor <a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a> are specified, defaults to 20\nlogical pixels. This is the appropriate size for use with\n<a href=\"material\/ListTile\/leading.html\">ListTile.leading<\/a>.<\/p>\n<p>Changes to the <a href=\"material\/CircleAvatar\/radius.html\">radius<\/a> are animated (including changing from an explicit\n<a href=\"material\/CircleAvatar\/radius.html\">radius<\/a> to a <a href=\"material\/CircleAvatar\/minRadius.html\">minRadius<\/a>\/<a href=\"material\/CircleAvatar\/maxRadius.html\">maxRadius<\/a> pair or vice versa).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radius\n\n<\/code><\/pre>\n        ",
            "href": "material\/CircleAvatar\/radius.html",
            "name": "radius",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CircleAvatar",
            "params": []
        }
    ]
}