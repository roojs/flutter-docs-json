{
    "desc": "<p>A matcher that matches events from <a href=\"dart-async\/Stream-class.html\">Stream<\/a>s or <a href=\"package-async_async\/StreamQueue-class.html\">StreamQueue<\/a>s.<\/p>\n<p>Stream matchers are designed to make it straightforward to create complex\nexpectations for streams, and to interleave expectations with the rest of a\ntest. They can be used on a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> to match all events it emits:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">expect(stream, emitsInOrder([\n  \/\/ Values match individual events.\n  \"Ready.\",\n\n  \/\/ Matchers also run against individual events.\n  startsWith(\"Loading took\"),\n\n  \/\/ Stream matchers can be nested. This asserts that one of two events are\n  \/\/ emitted after the \"Loading took\" line.\n  emitsAnyOf([\"Succeeded!\", \"Failed!\"]),\n\n  \/\/ By default, more events are allowed after the matcher finishes\n  \/\/ matching. This asserts instead that the stream emits a done event and\n  \/\/ nothing else.\n  emitsDone\n]));\n<\/code><\/pre>\n<p>It can also match a <a href=\"package-async_async\/StreamQueue-class.html\">StreamQueue<\/a>, in which case it consumes the matched\nevents. The call to <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the\nmatcher is done matching. You can <code>await<\/code> this to consume different events\nat different times:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var stdout = new StreamQueue(stdoutLineStream);\n\n\/\/ Ignore lines from the process until it's about to emit the URL.\nawait expect(stdout, emitsThrough(\"WebSocket URL:\"));\n\n\/\/ Parse the next line as a URL.\nvar url = Uri.parse(await stdout.next);\nexpect(url.host, equals('localhost'));\n\n\/\/ You can match against the same StreamQueue multiple times.\nawait expect(stdout, emits(\"Waiting for connection...\"));\n<\/code><\/pre>\n<p>Users can call <a href=\"package-test_api_test_api\/StreamMatcher\/StreamMatcher.html\">new StreamMatcher<\/a> to create custom matchers.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-test_api_test_api\/StreamMatcher-class.html",
    "isAbstract": true,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "test_api",
    "name": "test_api.StreamMatcher",
    "shortname": "StreamMatcher",
    "extends": [
        "matcher.Matcher",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new <a href=\"package-test_api_test_api\/StreamMatcher-class.html\">StreamMatcher<\/a> described by <code>description<\/code> that matches\nevents with <code>matchQueue<\/code>.<\/p>\n<p>The <code>matchQueue<\/code> callback is used to implement <a href=\"package-test_api_test_api\/StreamMatcher\/matchQueue.html\">StreamMatcher.matchQueue<\/a>,\nand should follow all the guarantees of that method. In particular:<\/p>\n<ul>\n<li>If it matches successfully, it should return <code>null<\/code> and possibly consume\nevents.<\/li>\n<li>If it fails to match, consume no events and return a description of the\nfailure.<\/li>\n<li>The description should be in past tense.<\/li>\n<li>The description should be gramatically valid when used after \"the\nstream\"\u2014\"emitted the wrong events\", for example.<\/li>\n<\/ul>\n<p>The <code>matchQueue<\/code> callback may return the empty string to indicate a\nfailure if it has no information to add beyond the description of the\nfailure and the events actually emitted by the stream.<\/p>\n<p>The <code>description<\/code> should be in the subjunctive mood. This means that it\nshould be grammatically valid when used after the word \"should\". For\nexample, it might be \"emit the right events\".<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamMatcher(\n        Future&lt;String&gt; matchQueue(StreamQueue queue), String description) =\n    _StreamMatcher;<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/StreamMatcher\/StreamMatcher.html",
            "isDeprecated": false,
            "type": "",
            "name": "StreamMatcher",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "test_api.StreamMatcher",
            "params": [
                {
                    "name": "description",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "queue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "async.StreamQueue"
                }
            ]
        },
        {
            "desc": "<p>Tries to match events emitted by <code>queue<\/code>.<\/p>\n<p>If this matches successfully, it consumes the matching events from <code>queue<\/code>\nand returns <code>null<\/code>.<\/p>\n<p>If this fails to match, it doesn't consume any events and returns a\ndescription of the failure. This description is in the past tense, and\ncould grammatically be used after \"the stream\". For example, it might\nreturn \"emitted the wrong events\".<\/p>\n<p>The description string may also be empty, which indicates that the\nmatcher's description and the events actually emitted by the stream are\nenough to understand the failure.<\/p>\n<p>If the queue emits an error, that error is re-thrown unless otherwise\nindicated by the matcher.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; matchQueue(StreamQueue queue);<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/StreamMatcher\/matchQueue.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.String>",
            "name": "matchQueue",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "test_api.StreamMatcher",
            "params": [
                {
                    "name": "queue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "async.StreamQueue"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The description of this matcher.<\/p>\n<p>This is in the subjunctive mood, which means it can be used after the word\n\"should\". For example, it might be \"emit the right events\".<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get description;<\/code><\/pre>\n        ",
            "href": "package-test_api_test_api\/StreamMatcher\/description.html",
            "name": "description",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "test_api.StreamMatcher",
            "params": []
        }
    ]
}