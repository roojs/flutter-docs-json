{
    "name": "dart:convert.JsonEncoder",
    "extends": [
        "dart:core.String",
        "dart:core.Object",
        "dart:convert.Converter",
        "dart:core.String",
        "dart:core.Object",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "JsonEncoder",
            "type": "",
            "desc": "<p>Creates a JSON encoder.<\/p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and\nmaps with string keys directly.<\/p>\n<p>Any other object is attempted converted by <code>toEncodable<\/code> to an\nobject that is of one of the convertible types.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to calling <code>.toJson()<\/code> on\nthe object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonEncoder",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/JsonEncoder\/JsonEncoder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonEncoder([toEncodable(object)])\n    : indent = null,\n      _toEncodable = toEncodable;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bind",
            "type": "dart:async.Stream<dart:core.String>",
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonEncoder",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonEncoder\/bind.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;Object&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Stream",
                "dart:core.String"
            ]
        },
        {
            "name": "convert",
            "type": "dart:core.String",
            "desc": "<p>Converts <code>object<\/code> to a JSON <a href=\"dart-core\/String-class.html\">String<\/a>.<\/p>\n<p>Directly serializable values are <a href=\"dart-core\/num-class.html\">num<\/a>, <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-core\/bool-class.html\">bool<\/a>, and <a href=\"dart-core\/Null-class.html\">Null<\/a>, as\nwell as some <a href=\"dart-core\/List-class.html\">List<\/a> and <a href=\"dart-core\/Map-class.html\">Map<\/a> values. For <a href=\"dart-core\/List-class.html\">List<\/a>, the elements must all be\nserializable. For <a href=\"dart-core\/Map-class.html\">Map<\/a>, the keys must be <a href=\"dart-core\/String-class.html\">String<\/a> and the values must be\nserializable.<\/p>\n<p>If a value of any other type is attempted to be serialized, the\n<code>toEncodable<\/code> function provided in the constructor is called with the value\nas argument. The result, which must be a directly serializable value, is\nserialized instead of the original value.<\/p>\n<p>If the conversion throws, or returns a value that is not directly\nserializable, a <a href=\"dart-convert\/JsonUnsupportedObjectError-class.html\">JsonUnsupportedObjectError<\/a> exception is thrown.\nIf the call throws, the error is caught and stored in the\n<a href=\"dart-convert\/JsonUnsupportedObjectError-class.html\">JsonUnsupportedObjectError<\/a>'s <code>cause<\/code> field.<\/p>\n<p>If a <a href=\"dart-core\/List-class.html\">List<\/a> or <a href=\"dart-core\/Map-class.html\">Map<\/a> contains a reference to itself, directly or through\nother lists or maps, it cannot be serialized and a <a href=\"dart-convert\/JsonCyclicError-class.html\">JsonCyclicError<\/a> is\nthrown.<\/p>\n<p><code>object<\/code> should not change during serialization.<\/p>\n<p>If an object is serialized more than once, <a href=\"dart-convert\/JsonEncoder\/convert.html\">convert<\/a> may cache the text\nfor it. In other words, if the content of an object changes after it is\nfirst serialized, the new values may not be reflected in the result.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonEncoder",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonEncoder\/convert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(Object object) =&gt;\n    _JsonStringStringifier.stringify(object, _toEncodable, indent);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "fuse",
            "type": "dart:convert.Converter<dart:core.Object>",
            "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this<\/code> before converting with <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonEncoder",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:convert.Converter<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:convert.Converter",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonEncoder\/fuse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;Object, T&gt; fuse&lt;T&gt;(Converter&lt;String, T&gt; other) {\n  if (other is Utf8Encoder &amp;&amp; T is List&lt;int&gt;) {\n    \/\/ The instance check guarantees that `T` is (a subtype of) List&lt;int&gt;,\n    \/\/ but the static type system doesn't know that, and so we cast.\n    \/\/ Cast through dynamic to keep the cast implicit for builds using\n    \/\/ unchecked implicit casts.\n    return JsonUtf8Encoder(indent, _toEncodable) as dynamic;\n  }\n  return super.fuse&lt;T&gt;(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:convert.Converter",
                "dart:core.Object"
            ]
        },
        {
            "name": "startChunkedConversion",
            "type": "dart:convert.ChunkedConversionSink<dart:core.Object>",
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n<p>Returns a chunked-conversion sink that accepts at most one object. It is\nan error to invoke <code>add<\/code> more than once on the returned sink.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonEncoder",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonEncoder\/startChunkedConversion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChunkedConversionSink&lt;Object&gt; startChunkedConversion(Sink&lt;String&gt; sink) {\n  if (sink is _Utf8EncoderSink) {\n    return _JsonUtf8EncoderSink(\n        sink._sink,\n        _toEncodable,\n        JsonUtf8Encoder._utf8Encode(indent),\n        JsonUtf8Encoder._defaultBufferSize);\n  }\n  return _JsonEncoderSink(\n      sink is StringConversionSink ? sink : StringConversionSink.from(sink),\n      _toEncodable,\n      indent);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:convert.ChunkedConversionSink",
                "dart:core.Object"
            ]
        },
        {
            "name": "JsonEncoder.withIndent",
            "type": "",
            "desc": "<p>Creates a JSON encoder that creates multi-line JSON.<\/p>\n<p>The encoding of elements of lists and maps are indented and put on separate\nlines. The <code>indent<\/code> string is prepended to these elements, once for each\nlevel of indentation.<\/p>\n<p>If <code>indent<\/code> is <code>null<\/code>, the output is encoded as a single line.<\/p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and\nmaps with string keys directly.<\/p>\n<p>Any other object is attempted converted by <code>toEncodable<\/code> to an\nobject that is of one of the convertible types.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to calling <code>.toJson()<\/code> on\nthe object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonEncoder",
            "sig": "",
            "params": [
                {
                    "name": "indent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/JsonEncoder\/JsonEncoder.withIndent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonEncoder.withIndent(this.indent, [toEncodable(object)])\n    : _toEncodable = toEncodable;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "indent",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The string used for indention.<\/p>\n<p>When generating multi-line output, this string is inserted once at the\nbeginning of each indented line for each level of indentation.<\/p>\n<p>If <code>null<\/code>, the output is encoded as a single line.<\/p>\n        ",
            "memberOf": "dart:convert.JsonEncoder",
            "isConstant": false,
            "href": "dart-convert\/JsonEncoder\/indent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String indent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/JsonEncoder-class.html",
    "desc": "<p>This class converts JSON objects to strings.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "JsonEncoder"
}