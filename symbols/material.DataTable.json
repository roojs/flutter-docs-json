{
    "desc": "<p>A material design data table.<\/p>\n<p>Displaying data in a table is expensive, because to lay out the\ntable all the data must be measured twice, once to negotiate the\ndimensions to use for each column, and once to actually lay out\nthe table given the results of the negotiation.<\/p>\n<p>For this reason, if you have a lot of data (say, more than a dozen\nrows with a dozen columns, though the precise limits depend on the\ntarget device), it is suggested that you use a\n<a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a> which automatically splits the data into\nmultiple pages.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/DataColumn-class.html\">DataColumn<\/a>, which describes a column in the data table.<\/li>\n<li>\n<a href=\"material\/DataRow-class.html\">DataRow<\/a>, which contains the data for a row in the data table.<\/li>\n<li>\n<a href=\"material\/DataCell-class.html\">DataCell<\/a>, which contains the data for a single cell in the data table.<\/li>\n<li>\n<a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a>, which shows part of the data in a data table and\nprovides controls for paging through the remainder of the data.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/data-tables.html\">material.io\/design\/components\/data-tables.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/DataTable-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.DataTable",
    "shortname": "DataTable",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Invoked when the user selects or unselects every row, using the\ncheckbox in the heading row.<\/p>\n<p>If this is null, then the <a href=\"material\/DataRow\/onSelectChanged.html\">DataRow.onSelectChanged<\/a> callback of\nevery row in the table is invoked appropriately instead.<\/p>\n<p>To control whether a particular row is selectable or not, see\n<a href=\"material\/DataRow\/onSelectChanged.html\">DataRow.onSelectChanged<\/a>. This callback is only relevant if any\nrow is selectable.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueSetter&lt;bool&gt; onSelectAll\n\n<\/code><\/pre>\n        ",
            "href": "material\/DataTable\/onSelectAll.html",
            "isDeprecated": false,
            "type": "foundation.ValueSetter<dart:core.bool>",
            "name": "onSelectAll",
            "memberOf": "material.DataTable",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget describing a data table.<\/p>\n<p>The <code>columns<\/code> argument must be a list of as many <a href=\"material\/DataColumn-class.html\">DataColumn<\/a>\nobjects as the table is to have columns, ignoring the leading\ncheckbox column if any. The <code>columns<\/code> argument must have a\nlength greater than zero and must not be null.<\/p>\n<p>The <code>rows<\/code> argument must be a list of as many <a href=\"material\/DataRow-class.html\">DataRow<\/a> objects\nas the table is to have rows, ignoring the leading heading row\nthat contains the column headings (derived from the <code>columns<\/code>\nargument). There may be zero rows, but the rows argument must\nnot be null.<\/p>\n<p>Each <a href=\"material\/DataRow-class.html\">DataRow<\/a> object in <code>rows<\/code> must have as many <a href=\"material\/DataCell-class.html\">DataCell<\/a>\nobjects in the <a href=\"material\/DataRow\/cells.html\">DataRow.cells<\/a> list as the table has columns.<\/p>\n<p>If the table is sorted, the column that provides the current\nprimary key should be specified by index in <code>sortColumnIndex<\/code>, 0\nmeaning the first column in <code>columns<\/code>, 1 being the next one, and\nso forth.<\/p>\n<p>The actual sort order can be specified using <code>sortAscending<\/code>; if\nthe sort order is ascending, this should be true (the default),\notherwise it should be false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DataTable({\n  Key key,\n  @required this.columns,\n  this.sortColumnIndex,\n  this.sortAscending = true,\n  this.onSelectAll,\n  @required this.rows,\n}) : assert(columns != null),\n     assert(columns.isNotEmpty),\n     assert(sortColumnIndex == null || (sortColumnIndex &gt;= 0 &amp;&amp; sortColumnIndex &lt; columns.length)),\n     assert(sortAscending != null),\n     assert(rows != null),\n     assert(!rows.any((DataRow row) =&gt; row.cells.length != columns.length)),\n     _onlyTextColumn = _initOnlyTextColumn(columns),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/DataTable\/DataTable.html",
            "isDeprecated": false,
            "type": "",
            "name": "DataTable",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.DataTable",
            "params": [
                {
                    "name": "columns",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<material.DataColumn>"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onSelectAll",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.ValueSetter<dart:core.bool>"
                },
                {
                    "name": "rows",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<material.DataRow>"
                },
                {
                    "name": "sortAscending",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "sortColumnIndex",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/DataTable\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(!_debugInteractive || debugCheckHasMaterial(context));\n\n  final ThemeData theme = Theme.of(context);\n  final BoxDecoration _kSelectedDecoration = BoxDecoration(\n    border: Border(bottom: Divider.createBorderSide(context, width: 1.0)),\n    \/\/ The backgroundColor has to be transparent so you can see the ink on the material\n    color: (Theme.of(context).brightness == Brightness.light) ? _grey100Opacity : _grey300Opacity,\n  );\n  final BoxDecoration _kUnselectedDecoration = BoxDecoration(\n    border: Border(bottom: Divider.createBorderSide(context, width: 1.0)),\n  );\n\n  final bool showCheckboxColumn = rows.any((DataRow row) =&gt; row.onSelectChanged != null);\n  final bool allChecked = showCheckboxColumn &amp;&amp; !rows.any((DataRow row) =&gt; row.onSelectChanged != null &amp;&amp; !row.selected);\n\n  final List&lt;TableColumnWidth&gt; tableColumns = List&lt;TableColumnWidth&gt;(columns.length + (showCheckboxColumn ? 1 : 0));\n  final List&lt;TableRow&gt; tableRows = List&lt;TableRow&gt;.generate(\n    rows.length + 1, \/\/ the +1 is for the header row\n    (int index) {\n      return TableRow(\n        key: index == 0 ? _headingRowKey : rows[index - 1].key,\n        decoration: index &gt; 0 &amp;&amp; rows[index - 1].selected ? _kSelectedDecoration\n                                                          : _kUnselectedDecoration,\n        children: List&lt;Widget&gt;(tableColumns.length),\n      );\n    },\n  );\n\n  int rowIndex;\n\n  int displayColumnIndex = 0;\n  if (showCheckboxColumn) {\n    tableColumns[0] = const FixedColumnWidth(_tablePadding + Checkbox.width + _tablePadding \/ 2.0);\n    tableRows[0].children[0] = _buildCheckbox(\n      color: theme.accentColor,\n      checked: allChecked,\n      onCheckboxChanged: _handleSelectAll,\n    );\n    rowIndex = 1;\n    for (DataRow row in rows) {\n      tableRows[rowIndex].children[0] = _buildCheckbox(\n        color: theme.accentColor,\n        checked: row.selected,\n        onRowTap: () =&gt; row.onSelectChanged != null ? row.onSelectChanged(!row.selected) : null ,\n        onCheckboxChanged: row.onSelectChanged,\n      );\n      rowIndex += 1;\n    }\n    displayColumnIndex += 1;\n  }\n\n  for (int dataColumnIndex = 0; dataColumnIndex &lt; columns.length; dataColumnIndex += 1) {\n    final DataColumn column = columns[dataColumnIndex];\n    final EdgeInsetsDirectional padding = EdgeInsetsDirectional.only(\n      start: dataColumnIndex == 0 ? showCheckboxColumn ? _tablePadding \/ 2.0 : _tablePadding : _columnSpacing \/ 2.0,\n      end: dataColumnIndex == columns.length - 1 ? _tablePadding : _columnSpacing \/ 2.0,\n    );\n    if (dataColumnIndex == _onlyTextColumn) {\n      tableColumns[displayColumnIndex] = const IntrinsicColumnWidth(flex: 1.0);\n    } else {\n      tableColumns[displayColumnIndex] = const IntrinsicColumnWidth();\n    }\n    tableRows[0].children[displayColumnIndex] = _buildHeadingCell(\n      context: context,\n      padding: padding,\n      label: column.label,\n      tooltip: column.tooltip,\n      numeric: column.numeric,\n      onSort: () =&gt; column.onSort != null ? column.onSort(dataColumnIndex, sortColumnIndex == dataColumnIndex ? !sortAscending : true) : null,\n      sorted: dataColumnIndex == sortColumnIndex,\n      ascending: sortAscending,\n    );\n    rowIndex = 1;\n    for (DataRow row in rows) {\n      final DataCell cell = row.cells[dataColumnIndex];\n      tableRows[rowIndex].children[displayColumnIndex] = _buildDataCell(\n        context: context,\n        padding: padding,\n        label: cell.child,\n        numeric: column.numeric,\n        placeholder: cell.placeholder,\n        showEditIcon: cell.showEditIcon,\n        onTap: cell.onTap,\n        onSelectChanged: () =&gt; row.onSelectChanged != null ? row.onSelectChanged(!row.selected) : null,\n      );\n      rowIndex += 1;\n    }\n    displayColumnIndex += 1;\n  }\n\n  return Table(\n    columnWidths: tableColumns.asMap(),\n    children: tableRows,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/DataTable\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.DataTable",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The configuration and labels for the columns in the table.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;DataColumn&gt; columns\n\n<\/code><\/pre>\n        ",
            "href": "material\/DataTable\/columns.html",
            "name": "columns",
            "isDeprecated": false,
            "type": "dart:core.List<material.DataColumn>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DataTable",
            "params": []
        },
        {
            "desc": "<p>The data to show in each row (excluding the row that contains\nthe column headings). Must be non-null, but may be empty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;DataRow&gt; rows\n\n<\/code><\/pre>\n        ",
            "href": "material\/DataTable\/rows.html",
            "name": "rows",
            "isDeprecated": false,
            "type": "dart:core.List<material.DataRow>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DataTable",
            "params": []
        },
        {
            "desc": "<p>Whether the column mentioned in <a href=\"material\/DataTable\/sortColumnIndex.html\">sortColumnIndex<\/a>, if any, is sorted\nin ascending order.<\/p>\n<p>If true, the order is ascending (meaning the rows with the\nsmallest values for the current sort column are first in the\ntable).<\/p>\n<p>If false, the order is descending (meaning the rows with the\nsmallest values for the current sort column are last in the\ntable).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool sortAscending\n\n<\/code><\/pre>\n        ",
            "href": "material\/DataTable\/sortAscending.html",
            "name": "sortAscending",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DataTable",
            "params": []
        },
        {
            "desc": "<p>The current primary sort key's column.<\/p>\n<p>If non-null, indicates that the indicated column is the column\nby which the data is sorted. The number must correspond to the\nindex of the relevant column in <a href=\"material\/DataTable\/columns.html\">columns<\/a>.<\/p>\n<p>Setting this will cause the relevant column to have a sort\nindicator displayed.<\/p>\n<p>When this is null, it implies that the table's sort order does\nnot correspond to any of the columns.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int sortColumnIndex\n\n<\/code><\/pre>\n        ",
            "href": "material\/DataTable\/sortColumnIndex.html",
            "name": "sortColumnIndex",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DataTable",
            "params": []
        }
    ]
}