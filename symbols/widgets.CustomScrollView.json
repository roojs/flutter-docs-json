{
    "name": "widgets.CustomScrollView",
    "extends": [
        "widgets.ScrollView",
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "CustomScrollView",
            "type": "",
            "desc": "<p>Creates a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> that creates custom scroll effects using slivers.<\/p>\n<p>See the <a href=\"widgets\/ScrollView\/ScrollView.html\">new ScrollView<\/a> constructor for more details on these arguments.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.CustomScrollView",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollDirection",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reverse",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "controller",
                    "type": "widgets.ScrollController",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primary",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shrinkWrap",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "center",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "anchor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cacheExtent",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "slivers",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                },
                {
                    "name": "semanticChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "dragStartBehavior",
                    "type": "gestures.DragStartBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/CustomScrollView\/CustomScrollView.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CustomScrollView({\n  Key key,\n  Axis scrollDirection = Axis.vertical,\n  bool reverse = false,\n  ScrollController controller,\n  bool primary,\n  ScrollPhysics physics,\n  bool shrinkWrap = false,\n  Key center,\n  double anchor = 0.0,\n  double cacheExtent,\n  this.slivers = const &lt;Widget&gt;[],\n  int semanticChildCount,\n  DragStartBehavior dragStartBehavior = DragStartBehavior.start,\n}) : super(\n  key: key,\n  scrollDirection: scrollDirection,\n  reverse: reverse,\n  controller: controller,\n  primary: primary,\n  physics: physics,\n  shrinkWrap: shrinkWrap,\n  center: center,\n  anchor: anchor,\n  cacheExtent: cacheExtent,\n  semanticChildCount: semanticChildCount,\n  dragStartBehavior: dragStartBehavior,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "buildSlivers",
            "type": "dart:core.List<widgets.Widget>",
            "desc": "<p>Build the list of widgets to place inside the viewport.<\/p>\n<p>Subclasses should override this method to build the slivers for the inside\nof the viewport.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.CustomScrollView",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/CustomScrollView\/buildSlivers.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;Widget&gt; buildSlivers(BuildContext context) =&gt; slivers;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "widgets.Widget"
            ]
        }
    ],
    "props": [
        {
            "name": "slivers",
            "type": "dart:core.List<widgets.Widget>",
            "types": [
                "dart:core.List",
                "widgets.Widget"
            ],
            "desc": "<p>The slivers to place inside the viewport.<\/p>\n        ",
            "memberOf": "widgets.CustomScrollView",
            "isConstant": false,
            "href": "widgets\/CustomScrollView\/slivers.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; slivers\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/CustomScrollView-class.html",
    "desc": "<p>A <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> that creates custom scroll effects using slivers.<\/p>\n<p>A <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> lets you supply <a href=\"widgets\/CustomScrollView\/slivers.html\">slivers<\/a> directly to create various\nscrolling effects, such as lists, grids, and expanding headers. For example,\nto create a scroll view that contains an expanding app bar followed by a\nlist and a grid, use a list of three slivers: <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, <a href=\"widgets\/SliverList-class.html\">SliverList<\/a>,\nand <a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a>.<\/p>\n<p><a href=\"widgets\/Widget-class.html\">Widget<\/a>s in these <a href=\"widgets\/CustomScrollView\/slivers.html\">slivers<\/a> must produce <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> objects.<\/p>\n<p>To control the initial scroll offset of the scroll view, provide a\n<a href=\"widgets\/ScrollView\/controller.html\">controller<\/a> with its <a href=\"widgets\/ScrollController\/initialScrollOffset.html\">ScrollController.initialScrollOffset<\/a> property set.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample code shows a scroll view that contains a flexible pinned app\nbar, a grid, and an infinite list.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CustomScrollView(\n  slivers: &lt;Widget&gt;[\n    const SliverAppBar(\n      pinned: true,\n      expandedHeight: 250.0,\n      flexibleSpace: FlexibleSpaceBar(\n        title: Text('Demo'),\n      ),\n    ),\n    SliverGrid(\n      gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(\n        maxCrossAxisExtent: 200.0,\n        mainAxisSpacing: 10.0,\n        crossAxisSpacing: 10.0,\n        childAspectRatio: 4.0,\n      ),\n      delegate: SliverChildBuilderDelegate(\n        (BuildContext context, int index) {\n          return Container(\n            alignment: Alignment.center,\n            color: Colors.teal[100 * (index % 9)],\n            child: Text('grid item $index'),\n          );\n        },\n        childCount: 20,\n      ),\n    ),\n    SliverFixedExtentList(\n      itemExtent: 50.0,\n      delegate: SliverChildBuilderDelegate(\n        (BuildContext context, int index) {\n          return Container(\n            alignment: Alignment.center,\n            color: Colors.lightBlue[100 * (index % 9)],\n            child: Text('list item $index'),\n          );\n        },\n      ),\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h2 id=\"accessibility\">Accessibility<\/h2>\n<p>A <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> can allow Talkback\/VoiceOver to make announcements\nto the user when the scroll state changes. For example, on Android an\nannouncement might be read as \"showing items 1 to 10 of 23\". To produce\nthis announcement, the scroll view needs three pieces of information:<\/p>\n<ul>\n<li>The first visible child index.<\/li>\n<li>The total number of children.<\/li>\n<li>The total number of visible children.<\/li>\n<\/ul>\n<p>The last value can be computed exactly by the framework, however the first\ntwo must be provided. Most of the higher-level scrollable widgets provide\nthis information automatically. For example, <a href=\"widgets\/ListView-class.html\">ListView<\/a> provides each child\nwidget with a semantic index automatically and sets the semantic child\ncount to the length of the list.<\/p>\n<p>To determine visible indexes, the scroll view needs a way to associate the\ngenerated semantics of each scrollable item with a semantic index. This can\nbe done by wrapping the child widgets in an <a href=\"widgets\/IndexedSemantics-class.html\">IndexedSemantics<\/a>.<\/p>\n<p>This semantic index is not necessarily the same as the index of the widget in\nthe scrollable, because some widgets may not contribute semantic\ninformation. Consider a <a href=\"widgets\/ListView\/ListView.separated.html\">new ListView.separated()<\/a>: every other widget is a\ndivider with no semantic information. In this case, only odd numbered\nwidgets have a semantic index (equal to the index ~\/ 2). Furthermore, the\ntotal number of children in this example would be half the number of\nwidgets. (The <a href=\"widgets\/ListView\/ListView.separated.html\">new ListView.separated()<\/a> constructor handles this\nautomatically; this is only used here as an example.)<\/p>\n<p>The total number of visible children can be provided by the constructor\nparameter <code>semanticChildCount<\/code>. This should always be the same as the\nnumber of widgets wrapped in <a href=\"widgets\/IndexedSemantics-class.html\">IndexedSemantics<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/SliverList-class.html\">SliverList<\/a>, which is a sliver that displays linear list of children.<\/li>\n<li>\n<a href=\"widgets\/SliverFixedExtentList-class.html\">SliverFixedExtentList<\/a>, which is a more efficient sliver that displays\nlinear list of children that have the same extent along the scroll axis.<\/li>\n<li>\n<a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a>, which is a sliver that displays a 2D array of children.<\/li>\n<li>\n<a href=\"widgets\/SliverPadding-class.html\">SliverPadding<\/a>, which is a sliver that adds blank space around another\nsliver.<\/li>\n<li>\n<a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, which is a sliver that displays a header that can expand\nand float as the scroll view scrolls.<\/li>\n<li>\n<a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> and <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>, which can be used to watch\nthe scroll position without using a <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a>.<\/li>\n<li>\n<a href=\"widgets\/IndexedSemantics-class.html\">IndexedSemantics<\/a>, which allows annotating child lists with an index\nfor scroll announcements.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "CustomScrollView"
}