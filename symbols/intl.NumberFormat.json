{
    "name": "intl.NumberFormat",
    "extends": [],
    "memberOf": "intl",
    "events": [],
    "methods": [
        {
            "name": "NumberFormat",
            "type": "",
            "desc": "<p>Create a number format that prints using <code>newPattern<\/code> as it applies in\n<code>locale<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "newPattern",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat([String newPattern, String locale]) =&gt;\n    new NumberFormat._forPattern(locale, (x) =&gt; newPattern);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.compact",
            "type": "",
            "desc": "<p>A number format for compact representations, e.g. \"1.2M\" instead\nof \"1,200,000\".<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.compact.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compact({String locale}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_SHORT_PATTERN);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.compactCurrency",
            "type": "",
            "desc": "<p>A number format for compact currency representations, e.g. \"$1.2M\" instead\nof \"$1,200,000\".<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "symbol",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decimalDigits",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.compactCurrency.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compactCurrency(\n    {String locale, String name, String symbol, int decimalDigits}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN,\n      name: name,\n      getPattern: (symbols) =&gt; symbols.CURRENCY_PATTERN,\n      currencySymbol: symbol,\n      decimalDigits: decimalDigits,\n      isForCurrency: true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.compactLong",
            "type": "",
            "desc": "<p>A number format for \"long\" compact representations, e.g. \"1.2 million\"\ninstead of of \"1,200,000\".<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.compactLong.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compactLong({String locale}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_LONG_PATTERN);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.compactSimpleCurrency",
            "type": "",
            "desc": "<p>A number format for compact currency representations, e.g. \"$1.2M\" instead\nof \"$1,200,000\", and which will automatically determine a currency symbol\nbased on the currency name or the locale. See\n<a href=\"intl\/NumberFormat\/NumberFormat.simpleCurrency.html\">NumberFormat.simpleCurrency<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decimalDigits",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.compactSimpleCurrency.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.compactSimpleCurrency(\n    {String locale, String name, int decimalDigits}) {\n  return new _CompactNumberFormat(\n      locale: locale,\n      formatType: _CompactFormatType.COMPACT_DECIMAL_SHORT_CURRENCY_PATTERN,\n      name: name,\n      getPattern: (symbols) =&gt; symbols.CURRENCY_PATTERN,\n      computeCurrencySymbol: (format) =&gt;\n          _simpleCurrencySymbols[format.currencyName] ?? format.currencyName,\n      decimalDigits: decimalDigits,\n      isForCurrency: true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.currency",
            "type": "",
            "desc": "<p>Create a <a href=\"intl\/NumberFormat-class.html\">NumberFormat<\/a> that formats using the locale's CURRENCY_PATTERN.<\/p>\n<p>If <code>locale<\/code> is not specified, it will use the current default locale.<\/p>\n<p>If <code>name<\/code> is specified, the currency with that ISO 4217 name will be used.\nOtherwise we will use the default currency name for the current locale. If\nno <code>symbol<\/code> is specified, we will use the currency name in the formatted\nresult. e.g.\n     var f = new NumberFormat.currency(locale: 'en_US', name: 'EUR')\nwill format currency like \"EUR1.23\". If we did not specify the name, it\nwould format like \"USD1.23\".<\/p>\n<p>If <code>symbol<\/code> is used, then that symbol will be used in formatting instead\nof the name. e.g.\n     var eurosInCurrentLocale = new NumberFormat.currency(symbol: \"\u20ac\");\nwill format like \"\u20ac1.23\". Otherwise it will use the currency name.\nIf this is not explicitly specified in the constructor, then for\ncurrencies we use the default value for the currency if the name is given,\n otherwise we use the value from the pattern for the locale.<\/p>\n<p>If <code>decimalDigits<\/code> is specified, numbers will format with that many digits\nafter the decimal place. If it's not, they will use the default for the\ncurrency in <code>name<\/code>, and the default currency for <code>locale<\/code> if the currency\nname is not specified. e.g.\n      new NumberFormat.currency(name: 'USD', decimalDigits: 7)\nwill format with 7 decimal digits, because that's what we asked for. But\n      new NumberFormat.currency(locale: 'en_US', name: 'JPY')\nwill format with zero, because that's the default for JPY, and the\ncurrency's default takes priority over the locale's default.\n      new NumberFormat.currency(locale: 'en_US')\nwill format with two, which is the default for that locale.<\/p>\n<p>The <code>customPattern<\/code> parameter can be used to specify a particular\nformat. This is useful if you have your own locale data which includes\nunsupported formats (e.g. accounting format for currencies.)<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "symbol",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decimalDigits",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "customPattern",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.currency.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(alanknight): Should we allow decimalDigits on other numbers.\nNumberFormat.currency(\n    {String locale,\n    String name,\n    String symbol,\n    int decimalDigits,\n    String customPattern})\n    : this._forPattern(locale, (x) =&gt; customPattern ?? x.CURRENCY_PATTERN,\n          name: name,\n          currencySymbol: symbol,\n          decimalDigits: decimalDigits,\n          isForCurrency: true);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.currencyPattern",
            "type": "",
            "desc": "<p>Create a number format that prints as CURRENCY_PATTERN. (Deprecated:\nprefer NumberFormat.currency)<\/p>\n<p>If provided,\nuse <code>nameOrSymbol<\/code> in place of the default currency name. e.g.\n       var eurosInCurrentLocale = new NumberFormat\n           .currencyPattern(Intl.defaultLocale, \"\u20ac\");<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "currencyNameOrSymbol",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.currencyPattern.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use NumberFormat.currency\")\nfactory NumberFormat.currencyPattern(\n    [String locale, String currencyNameOrSymbol]) {\n  \/\/ If it looks like an iso4217 name, pass as name, otherwise as symbol.\n  if (currencyNameOrSymbol != null &amp;&amp;\n      _checkCurrencyName.hasMatch(currencyNameOrSymbol)) {\n    return new NumberFormat.currency(\n        locale: locale, name: currencyNameOrSymbol);\n  } else {\n    return new NumberFormat.currency(\n        locale: locale, symbol: currencyNameOrSymbol);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.decimalPattern",
            "type": "",
            "desc": "<p>Create a number format that prints as DECIMAL_PATTERN.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.decimalPattern.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NumberFormat.decimalPattern([String locale])\n    : this._forPattern(locale, (x) =&gt; x.DECIMAL_PATTERN);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "format",
            "type": "dart:core.String",
            "desc": "<p>Format <code>number<\/code> according to our pattern and return the formatted string.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "number",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/format.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String format(number) {\n  if (_isNaN(number)) return symbols.NAN;\n  if (_isInfinite(number)) return \"${_signPrefix(number)}${symbols.INFINITY}\";\n\n  _add(_signPrefix(number));\n  _formatNumber(number.abs());\n  _add(_signSuffix(number));\n\n  var result = _buffer.toString();\n  _buffer.clear();\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "localeExists",
            "type": "dart:core.bool",
            "desc": "<p>Return true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "localeName",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/localeExists.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool localeExists(localeName) {\n  if (localeName == null) return false;\n  return numberFormatSymbols.containsKey(localeName);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "numberOfIntegerDigits",
            "type": "dart:core.int",
            "desc": "",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "number",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/numberOfIntegerDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int numberOfIntegerDigits(number) {\n  var simpleNumber = number.toDouble().abs();\n  \/\/ It's unfortunate that we have to do this, but we get precision errors\n  \/\/ that affect the result if we use logs, e.g. 1000000\n  if (simpleNumber &lt; 10) return 1;\n  if (simpleNumber &lt; 100) return 2;\n  if (simpleNumber &lt; 1000) return 3;\n  if (simpleNumber &lt; 10000) return 4;\n  if (simpleNumber &lt; 100000) return 5;\n  if (simpleNumber &lt; 1000000) return 6;\n  if (simpleNumber &lt; 10000000) return 7;\n  if (simpleNumber &lt; 100000000) return 8;\n  if (simpleNumber &lt; 1000000000) return 9;\n  if (simpleNumber &lt; 10000000000) return 10;\n  if (simpleNumber &lt; 100000000000) return 11;\n  if (simpleNumber &lt; 1000000000000) return 12;\n  if (simpleNumber &lt; 10000000000000) return 13;\n  if (simpleNumber &lt; 100000000000000) return 14;\n  if (simpleNumber &lt; 1000000000000000) return 15;\n  if (simpleNumber &lt; 10000000000000000) return 16;\n  \/\/ We're past the point where being off by one on the number of digits\n  \/\/ will affect the pattern, so now we can use logs.\n  return max(1, (log(simpleNumber) \/ _ln10).ceil());\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "parse",
            "type": "dart:core.num",
            "desc": "<p>Parse the number represented by the string. If it's not\nparseable, throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/parse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num parse(String text) =&gt; new _NumberParser(this, text).value;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.percentPattern",
            "type": "",
            "desc": "<p>Create a number format that prints as PERCENT_PATTERN.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.percentPattern.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NumberFormat.percentPattern([String locale])\n    : this._forPattern(locale, (x) =&gt; x.PERCENT_PATTERN);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.scientificPattern",
            "type": "",
            "desc": "<p>Create a number format that prints as SCIENTIFIC_PATTERN.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.scientificPattern.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">NumberFormat.scientificPattern([String locale])\n    : this._forPattern(locale, (x) =&gt; x.SCIENTIFIC_PATTERN);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "NumberFormat.simpleCurrency",
            "type": "",
            "desc": "<p>Creates a <a href=\"intl\/NumberFormat-class.html\">NumberFormat<\/a> for currencies, using the simple symbol for the\ncurrency if one is available (e.g. $, \u20ac), so it should only be used if the\nshort currency symbol will be unambiguous.<\/p>\n<p>If <code>locale<\/code> is not specified, it will use the current default locale.<\/p>\n<p>If <code>name<\/code> is specified, the currency with that ISO 4217 name will be used.\nOtherwise we will use the default currency name for the current locale. We\nwill assume that the symbol for this is well known in the locale and\nunambiguous. If you format CAD in an en_US locale using this format it\nwill display as \"$\", which may be confusing to the user.<\/p>\n<p>If <code>decimalDigits<\/code> is specified, numbers will format with that many digits\nafter the decimal place. If it's not, they will use the default for the\ncurrency in <code>name<\/code>, and the default currency for <code>locale<\/code> if the currency\nname is not specified. e.g.\n      new NumberFormat.simpleCurrency(name: 'USD', decimalDigits: 7)\nwill format with 7 decimal digits, because that's what we asked for. But\n      new NumberFormat.simpleCurrency(locale: 'en_US', name: 'JPY')\nwill format with zero, because that's the default for JPY, and the\ncurrency's default takes priority over the locale's default.\n      new NumberFormat.simpleCurrency(locale: 'en_US')\nwill format with two, which is the default for that locale.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decimalDigits",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/NumberFormat\/NumberFormat.simpleCurrency.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory NumberFormat.simpleCurrency(\n    {String locale, String name, int decimalDigits}) {\n  return new NumberFormat._forPattern(locale, (x) =&gt; x.CURRENCY_PATTERN,\n      name: name,\n      computeCurrencySymbol: (format) =&gt;\n          _simpleCurrencySymbols[format.currencyName] ?? format.currencyName,\n      decimalDigits: decimalDigits,\n      isForCurrency: true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "simpleCurrencySymbol",
            "type": "dart:core.String",
            "desc": "<p>Returns the simple currency symbol for given currency code, or\n<code>currencyCode<\/code> if no simple symbol is listed.<\/p>\n<p>The simple currency symbol is generally short, and the same or related to\nwhat is used in countries having the currency as an official symbol. It\nmay be a symbol character, or may have letters, or both. It may be\ndifferent according to the locale: for example, for an Arabic locale it\nmay consist of Arabic letters, but for a French locale consist of Latin\nletters. It will not be unique: for example, \"$\" can appear for both USD\nand CAD.<\/p>\n<p>(The current implementation is the same for all locales, but this is\ntemporary and callers shouldn't rely on it.)<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [
                {
                    "name": "currencyCode",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/simpleCurrencySymbol.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String simpleCurrencySymbol(String currencyCode) =&gt;\n    _simpleCurrencySymbols[currencyCode] ?? currencyCode;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"NumberFormat($_locale, $_pattern)\";<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "turnOffGrouping",
            "type": "",
            "desc": "<p>Explicitly turn off any grouping (e.g. by thousands) in this format.<\/p>\n<p>This is used in compact number formatting, where we\nomit the normal grouping. Best to know what you're doing if you call it.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.NumberFormat",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "intl\/NumberFormat\/turnOffGrouping.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void turnOffGrouping() {\n  _groupingSize = 0;\n  _finalGroupingSize = 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "currencyName",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The name of the currency to print, in ISO 4217 form.<\/p>\n        ",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/currencyName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String currencyName\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "currencySymbol",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The symbol to be used when formatting this as currency.<\/p>\n<p>For example, \"$\", \"US$\", or \"\u20ac\".<\/p>\n        ",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/currencySymbol.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get currencySymbol =&gt; _currencySymbol ?? currencyName;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decimalDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The number of decimal places to use when formatting.<\/p>\n<p>If this is not explicitly specified in the constructor, then for\ncurrencies we use the default value for the currency if the name is given,\notherwise we use the value from the pattern for the locale.<\/p>\n<p>So, for example,\n     new NumberFormat.currency(name: 'USD', decimalDigits: 7)\nwill format with 7 decimal digits, because that's what we asked for. But\n      new NumberFormat.currency(locale: 'en_US', name: 'JPY')\nwill format with zero, because that's the default for JPY, and the\ncurrency's default takes priority over the locale's default.\n      new NumberFormat.currency(locale: 'en_US')\nwill format with two, which is the default for that locale.<\/p>\n        ",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/decimalDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get decimalDigits =&gt; _decimalDigits;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "locale",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Return the locale code in which we operate, e.g. 'en_US' or 'pt'.<\/p>\n        ",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/locale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get locale =&gt; _locale;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "maximumFractionDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/maximumFractionDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maximumFractionDigits = 3\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "maximumIntegerDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/maximumIntegerDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maximumIntegerDigits = 40\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "minimumExponentDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/minimumExponentDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int minimumExponentDigits = 0\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "minimumFractionDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/minimumFractionDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int minimumFractionDigits = 0\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "minimumIntegerDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/minimumIntegerDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int minimumIntegerDigits = 1\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "significantDigits",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>How many significant digits should we print.<\/p>\n<p> Note that if significantDigitsInUse is the default false, this\n will be ignored.<\/p>\n        ",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/significantDigits.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get significantDigits =&gt; _significantDigits;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "significantDigitsInUse",
            "type": "dart:core.bool",
            "types": [],
            "desc": "",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/significantDigitsInUse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool significantDigitsInUse = false\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "symbols",
            "type": "number_symbols.NumberSymbols",
            "types": [],
            "desc": "<p>Return the symbols which are used in our locale. Cache them to avoid\nrepeated lookup.<\/p>\n        ",
            "memberOf": "intl.NumberFormat",
            "isConstant": false,
            "href": "intl\/NumberFormat\/symbols.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">NumberSymbols get symbols =&gt; _symbols;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "intl\/NumberFormat-class.html",
    "desc": "<p>Provides the ability to format a number in a locale-specific way. The\nformat is specified as a pattern using a subset of the ICU formatting\npatterns.<\/p>\n<ul>\n<li>\n<code>0<\/code> A single digit<\/li>\n<li>\n<code>#<\/code> A single digit, omitted if the value is zero<\/li>\n<li>\n<code>.<\/code> Decimal separator<\/li>\n<li>\n<code>-<\/code> Minus sign<\/li>\n<li>\n<code>,<\/code> Grouping separator<\/li>\n<li>\n<code>E<\/code> Separates mantissa and expontent<\/li>\n<li>\n<code>+<\/code> - Before an exponent, to say it should be prefixed with a plus sign.<\/li>\n<li>\n<code>%<\/code> - In prefix or suffix, multiply by 100 and show as percentage<\/li>\n<li>\n<code>\u2030 (\\u2030)<\/code> In prefix or suffix, multiply by 1000 and show as per mille<\/li>\n<li>\n<code>\u00a4 (\\u00A4)<\/code> Currency sign, replaced by currency name<\/li>\n<li>\n<code>'<\/code> Used to quote special characters<\/li>\n<li>\n<code>;<\/code> Used to separate the positive and negative patterns (if both present)<\/li>\n<\/ul>\n<p>For example,\n      var f = new NumberFormat(\"###.0#\", \"en_US\");\n      print(f.format(12.345));\n      ==&gt; 12.34\nIf the locale is not specified, it will default to the current locale. If\nthe format is not specified it will print in a basic format with at least\none integer digit and three fraction digits.<\/p>\n<p>There are also standard patterns available via the special constructors.\ne.g.\n      var percent = new NumberFormat.percentFormat(\"ar\");\n      var eurosInUSFormat = new NumberFormat.currency(locale: \"en_US\",\n          symbol: \"\u20ac\");\nThere are four such constructors: decimalFormat, percentFormat,\nscientificFormat and currencyFormat. However, at the moment,\nscientificFormat prints only as equivalent to \"#E0\" and does not take\ninto account significant digits. The currencyFormat will default to the\nthree-letter name of the currency if no explicit name\/symbol is provided.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "NumberFormat"
}