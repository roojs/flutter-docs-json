{
    "desc": "<p>Heap based priority queue.<\/p>\n<p>The elements are kept in a heap structure,\nwhere the element with the highest priority is immediately accessible,\nand modifying a single element takes\nlogarithmic time in the number of elements on average.<\/p>\n<ul>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/add.html\">add<\/a> and <a href=\"package-collection_collection\/HeapPriorityQueue\/removeFirst.html\">removeFirst<\/a> operations take amortized logarithmic time,\nO(log(n)), but may occasionally take linear time when growing the capacity\nof the heap.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/addAll.html\">addAll<\/a> operation works as doing repeated <a href=\"package-collection_collection\/HeapPriorityQueue\/add.html\">add<\/a> operations.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/first.html\">first<\/a> getter takes constant time, O(1).<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/clear.html\">clear<\/a> and <a href=\"package-collection_collection\/HeapPriorityQueue\/removeAll.html\">removeAll<\/a> methods also take constant time, O(1).<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/contains.html\">contains<\/a> and <a href=\"package-collection_collection\/HeapPriorityQueue\/remove.html\">remove<\/a> operations may need to search the entire\nqueue for the elements, taking O(n) time.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/toList.html\">toList<\/a> operation effectively sorts the elements, taking O(n*log(n))\ntime.<\/li>\n<li>The <a href=\"package-collection_collection\/HeapPriorityQueue\/toSet.html\">toSet<\/a> operation effectively adds each element to the new set, taking\nan expected O(n*log(n)) time.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "package-collection_collection\/HeapPriorityQueue-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "collection",
    "name": "collection.HeapPriorityQueue",
    "shortname": "HeapPriorityQueue",
    "extends": [],
    "events": [
        {
            "desc": "<p>The comparison being used to compare the priority of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Comparator&lt;E&gt; comparison\n\n<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/HeapPriorityQueue\/comparison.html",
            "isDeprecated": "0",
            "type": "dart:core.Comparator",
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Create a new priority queue.<\/p>\n<p>The <code>comparison<\/code> is a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> used to compare the priority of\nelements. An element that compares as less than another element has\na higher priority.<\/p>\n<p>If <code>comparison<\/code> is omitted, it defaults to <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a>. If this\nis the case, <code>E<\/code> must implement <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and this is checked at\nruntime for every comparison.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HeapPriorityQueue([int comparison(E e1, E e2)])\n    : comparison = comparison ?? defaultCompare&lt;E&gt;();<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/HeapPriorityQueue.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": [
                {
                    "name": "e1",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<E>"
                },
                {
                    "name": "e2",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds element to the queue.<\/p>\n<p>The element will become the next to be removed by <a href=\"package-collection_collection\/HeapPriorityQueue\/removeFirst.html\">removeFirst<\/a>\nwhen all elements with higher priority have been removed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E element) {\n  _add(element);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds all <code>elements<\/code> to the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) {\n  for (E element in elements) {\n    _add(element);\n  }\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/addAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": [
                {
                    "name": "elements",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Removes all the elements from this queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _queue = const [];\n  _length = 0;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/clear.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Checks if <code>object<\/code> is in the queue.<\/p>\n<p>Returns true if the element is found.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(E object) {\n  return _locate(object) &gt;= 0;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/contains.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": [
                {
                    "name": "object",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Removes an element that compares equal to <code>element<\/code> in the queue.<\/p>\n<p>Returns true if an element is found and removed,\nand false if no equal element is found.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(E element) {\n  int index = _locate(element);\n  if (index &lt; 0) return false;\n  E last = _removeLast();\n  if (index &lt; _length) {\n    int comp = comparison(last, element);\n    if (comp &lt;= 0) {\n      _bubbleUp(last, index);\n    } else {\n      _bubbleDown(last, index);\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/remove.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Removes all the elements from this queue and returns them.<\/p>\n<p>The returned iterable has no specified order.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; removeAll() {\n  List&lt;E&gt; result = _queue;\n  int length = _length;\n  _queue = const [];\n  _length = 0;\n  return result.take(length);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/removeAll.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Removes and returns the element with the highest priority.<\/p>\n<p>Repeatedly calling this method, without adding element in between,\nis guaranteed to return elements in non-decreasing order as, specified by\n<a href=\"package-collection_collection\/HeapPriorityQueue\/comparison.html\">comparison<\/a>.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  if (_length == 0) throw new StateError(\"No such element\");\n  E result = _queue[0];\n  E last = _removeLast();\n  if (_length &gt; 0) {\n    _bubbleDown(last, 0);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/removeFirst.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Returns a list of the elements of this queue in priority order.<\/p>\n<p>The queue is not modified.<\/p>\n<p>The order is the order that the elements would be in if they were\nremoved from this queue using <a href=\"package-collection_collection\/HeapPriorityQueue\/removeFirst.html\">removeFirst<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList() {\n  List&lt;E&gt; list = new List&lt;E&gt;()..length = _length;\n  list.setRange(0, _length, _queue);\n  list.sort(comparison);\n  return list;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/toList.html",
            "isDeprecated": "0",
            "type": "dart:core.List",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Return a comparator based set using the comparator of this queue.<\/p>\n<p>The queue is not modified.<\/p>\n<p>The returned <a href=\"dart-core\/Set-class.html\">Set<\/a> is currently a <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a>,\nbut this may change as other ordered sets are implemented.<\/p>\n<p>The set contains all the elements of this queue.\nIf an element occurs more than once in the queue,\nthe set will contain it only once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() {\n  Set&lt;E&gt; set = new SplayTreeSet&lt;E&gt;(comparison);\n  for (int i = 0; i &lt; _length; i++) {\n    set.add(_queue[i]);\n  }\n  return set;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/toSet.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Returns some representation of the queue.<\/p>\n<p>The format isn't significant, and may change in the future.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return _queue.take(_length).toString();\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/HeapPriorityQueue\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the queue is empty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _length == 0;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/HeapPriorityQueue\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Whether the queue has any elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _length != 0;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/HeapPriorityQueue\/isNotEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        },
        {
            "desc": "<p>Number of elements in the queue.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/HeapPriorityQueue\/length.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "collection.HeapPriorityQueue",
            "params": []
        }
    ]
}