{
    "desc": "<p>Holds the color and typography values for a material design theme.<\/p>\n<p>Use this class to configure a <a href=\"material\/Theme-class.html\">Theme<\/a> widget.<\/p>\n<p>To obtain the current theme, use <a href=\"material\/Theme\/of.html\">Theme.of<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/ThemeData-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.ThemeData",
    "shortname": "ThemeData",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "material.ThemeDataTween"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a <a href=\"material\/ThemeData-class.html\">ThemeData<\/a> given a set of preferred values.<\/p>\n<p>Default values will be derived for arguments that are omitted.<\/p>\n<p>The most useful values to give are, in order of importance:<\/p>\n<ul>\n<li>\n<p>The desired theme <code>brightness<\/code>.<\/p>\n<\/li>\n<li>\n<p>The primary color palette (the <code>primarySwatch<\/code>), chosen from\none of the swatches defined by the material design spec. This\nshould be one of the maps from the <a href=\"material\/Colors-class.html\">Colors<\/a> class that do not\nhave \"accent\" in their name.<\/p>\n<\/li>\n<li>\n<p>The <code>accentColor<\/code>, sometimes called the secondary color, and,\nif the accent color is specified, its brightness\n(<code>accentColorBrightness<\/code>), so that the right contrasting text\ncolor will be used over the accent color.<\/p>\n<\/li>\n<\/ul>\n<p>See <a href=\"https:\/\/material.io\/design\/color\/\">material.io\/design\/color\/<\/a> for\nmore discussion on how to pick the right colors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory ThemeData({\n  Brightness brightness,\n  MaterialColor primarySwatch,\n  Color primaryColor,\n  Brightness primaryColorBrightness,\n  Color primaryColorLight,\n  Color primaryColorDark,\n  Color accentColor,\n  Brightness accentColorBrightness,\n  Color canvasColor,\n  Color scaffoldBackgroundColor,\n  Color bottomAppBarColor,\n  Color cardColor,\n  Color dividerColor,\n  Color highlightColor,\n  Color splashColor,\n  InteractiveInkFeatureFactory splashFactory,\n  Color selectedRowColor,\n  Color unselectedWidgetColor,\n  Color disabledColor,\n  Color buttonColor,\n  ButtonThemeData buttonTheme,\n  Color secondaryHeaderColor,\n  Color textSelectionColor,\n  Color cursorColor,\n  Color textSelectionHandleColor,\n  Color backgroundColor,\n  Color dialogBackgroundColor,\n  Color indicatorColor,\n  Color hintColor,\n  Color errorColor,\n  Color toggleableActiveColor,\n  String fontFamily,\n  TextTheme textTheme,\n  TextTheme primaryTextTheme,\n  TextTheme accentTextTheme,\n  InputDecorationTheme inputDecorationTheme,\n  IconThemeData iconTheme,\n  IconThemeData primaryIconTheme,\n  IconThemeData accentIconTheme,\n  SliderThemeData sliderTheme,\n  TabBarTheme tabBarTheme,\n  CardTheme cardTheme,\n  ChipThemeData chipTheme,\n  TargetPlatform platform,\n  MaterialTapTargetSize materialTapTargetSize,\n  PageTransitionsTheme pageTransitionsTheme,\n  AppBarTheme appBarTheme,\n  BottomAppBarTheme bottomAppBarTheme,\n  ColorScheme colorScheme,\n  DialogTheme dialogTheme,\n  FloatingActionButtonThemeData floatingActionButtonTheme,\n  Typography typography,\n  CupertinoThemeData cupertinoOverrideTheme,\n}) {\n  brightness ??= Brightness.light;\n  final bool isDark = brightness == Brightness.dark;\n  primarySwatch ??= Colors.blue;\n  primaryColor ??= isDark ? Colors.grey[900] : primarySwatch;\n  primaryColorBrightness ??= estimateBrightnessForColor(primaryColor);\n  primaryColorLight ??= isDark ? Colors.grey[500] : primarySwatch[100];\n  primaryColorDark ??= isDark ? Colors.black : primarySwatch[700];\n  final bool primaryIsDark = primaryColorBrightness == Brightness.dark;\n  toggleableActiveColor ??= isDark ? Colors.tealAccent[200] : (accentColor ?? primarySwatch[600]);\n  accentColor ??= isDark ? Colors.tealAccent[200] : primarySwatch[500];\n  accentColorBrightness ??= estimateBrightnessForColor(accentColor);\n  final bool accentIsDark = accentColorBrightness == Brightness.dark;\n  canvasColor ??= isDark ? Colors.grey[850] : Colors.grey[50];\n  scaffoldBackgroundColor ??= canvasColor;\n  bottomAppBarColor ??= isDark ? Colors.grey[800] : Colors.white;\n  cardColor ??= isDark ? Colors.grey[800] : Colors.white;\n  dividerColor ??= isDark ? const Color(0x1FFFFFFF) : const Color(0x1F000000);\n\n  \/\/ Create a ColorScheme that is backwards compatible as possible\n  \/\/ with the existing default ThemeData color values.\n  colorScheme ??= ColorScheme.fromSwatch(\n    primarySwatch: primarySwatch,\n    primaryColorDark: primaryColorDark,\n    accentColor: accentColor,\n    cardColor: cardColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    brightness: brightness,\n  );\n\n  splashFactory ??= InkSplash.splashFactory;\n  selectedRowColor ??= Colors.grey[100];\n  unselectedWidgetColor ??= isDark ? Colors.white70 : Colors.black54;\n  \/\/ Spec doesn't specify a dark theme secondaryHeaderColor, this is a guess.\n  secondaryHeaderColor ??= isDark ? Colors.grey[700] : primarySwatch[50];\n  textSelectionColor ??= isDark ? accentColor : primarySwatch[200];\n  \/\/ todo (sandrasandeep): change to color provided by Material Design team\n  cursorColor = cursorColor ?? const Color.fromRGBO(66, 133, 244, 1.0);\n  textSelectionHandleColor ??= isDark ? Colors.tealAccent[400] : primarySwatch[300];\n  backgroundColor ??= isDark ? Colors.grey[700] : primarySwatch[200];\n  dialogBackgroundColor ??= isDark ? Colors.grey[800] : Colors.white;\n  indicatorColor ??= accentColor == primaryColor ? Colors.white : accentColor;\n  hintColor ??= isDark ?  const Color(0x80FFFFFF) : const Color(0x8A000000);\n  errorColor ??= Colors.red[700];\n  inputDecorationTheme ??= const InputDecorationTheme();\n  pageTransitionsTheme ??= const PageTransitionsTheme();\n  primaryIconTheme ??= primaryIsDark ? const IconThemeData(color: Colors.white) : const IconThemeData(color: Colors.black);\n  accentIconTheme ??= accentIsDark ? const IconThemeData(color: Colors.white) : const IconThemeData(color: Colors.black);\n  iconTheme ??= isDark ? const IconThemeData(color: Colors.white) : const IconThemeData(color: Colors.black87);\n  platform ??= defaultTargetPlatform;\n  typography ??= Typography(platform: platform);\n  final TextTheme defaultTextTheme = isDark ? typography.white : typography.black;\n  textTheme = defaultTextTheme.merge(textTheme);\n  final TextTheme defaultPrimaryTextTheme = primaryIsDark ? typography.white : typography.black;\n  primaryTextTheme = defaultPrimaryTextTheme.merge(primaryTextTheme);\n  final TextTheme defaultAccentTextTheme = accentIsDark ? typography.white : typography.black;\n  accentTextTheme = defaultAccentTextTheme.merge(accentTextTheme);\n  materialTapTargetSize ??= MaterialTapTargetSize.padded;\n  if (fontFamily != null) {\n    textTheme = textTheme.apply(fontFamily: fontFamily);\n    primaryTextTheme = primaryTextTheme.apply(fontFamily: fontFamily);\n    accentTextTheme = accentTextTheme.apply(fontFamily: fontFamily);\n  }\n\n  \/\/ Used as the default color (fill color) for RaisedButtons. Computing the\n  \/\/ default for ButtonThemeData for the sake of backwards compatibility.\n  buttonColor ??= isDark ? primarySwatch[600] : Colors.grey[300];\n  buttonTheme ??= ButtonThemeData(\n    colorScheme: colorScheme,\n    buttonColor: buttonColor,\n    disabledColor: disabledColor,\n    highlightColor: highlightColor,\n    splashColor: splashColor,\n    materialTapTargetSize: materialTapTargetSize,\n  );\n  disabledColor ??= isDark ? Colors.white30 : Colors.black38;\n  highlightColor ??= isDark ? _kDarkThemeHighlightColor : _kLightThemeHighlightColor;\n  splashColor ??= isDark ? _kDarkThemeSplashColor : _kLightThemeSplashColor;\n\n  sliderTheme ??= SliderThemeData.fromPrimaryColors(\n    primaryColor: primaryColor,\n    primaryColorLight: primaryColorLight,\n    primaryColorDark: primaryColorDark,\n    valueIndicatorTextStyle: accentTextTheme.body2,\n  );\n  tabBarTheme ??= const TabBarTheme();\n  appBarTheme ??= const AppBarTheme();\n  bottomAppBarTheme ??= const BottomAppBarTheme();\n  cardTheme ??= const CardTheme();\n  chipTheme ??= ChipThemeData.fromDefaults(\n    secondaryColor: primaryColor,\n    brightness: brightness,\n    labelStyle: textTheme.body2,\n  );\n  dialogTheme ??= const DialogTheme();\n  floatingActionButtonTheme ??= const FloatingActionButtonThemeData();\n  cupertinoOverrideTheme = cupertinoOverrideTheme?.noDefault();\n\n  return ThemeData.raw(\n    brightness: brightness,\n    primaryColor: primaryColor,\n    primaryColorBrightness: primaryColorBrightness,\n    primaryColorLight: primaryColorLight,\n    primaryColorDark: primaryColorDark,\n    accentColor: accentColor,\n    accentColorBrightness: accentColorBrightness,\n    canvasColor: canvasColor,\n    scaffoldBackgroundColor: scaffoldBackgroundColor,\n    bottomAppBarColor: bottomAppBarColor,\n    cardColor: cardColor,\n    dividerColor: dividerColor,\n    highlightColor: highlightColor,\n    splashColor: splashColor,\n    splashFactory: splashFactory,\n    selectedRowColor: selectedRowColor,\n    unselectedWidgetColor: unselectedWidgetColor,\n    disabledColor: disabledColor,\n    buttonTheme: buttonTheme,\n    buttonColor: buttonColor,\n    toggleableActiveColor: toggleableActiveColor,\n    secondaryHeaderColor: secondaryHeaderColor,\n    textSelectionColor: textSelectionColor,\n    cursorColor: cursorColor,\n    textSelectionHandleColor: textSelectionHandleColor,\n    backgroundColor: backgroundColor,\n    dialogBackgroundColor: dialogBackgroundColor,\n    indicatorColor: indicatorColor,\n    hintColor: hintColor,\n    errorColor: errorColor,\n    textTheme: textTheme,\n    primaryTextTheme: primaryTextTheme,\n    accentTextTheme: accentTextTheme,\n    inputDecorationTheme: inputDecorationTheme,\n    iconTheme: iconTheme,\n    primaryIconTheme: primaryIconTheme,\n    accentIconTheme: accentIconTheme,\n    sliderTheme: sliderTheme,\n    tabBarTheme: tabBarTheme,\n    cardTheme: cardTheme,\n    chipTheme: chipTheme,\n    platform: platform,\n    materialTapTargetSize: materialTapTargetSize,\n    pageTransitionsTheme: pageTransitionsTheme,\n    appBarTheme: appBarTheme,\n    bottomAppBarTheme: bottomAppBarTheme,\n    colorScheme: colorScheme,\n    dialogTheme: dialogTheme,\n    floatingActionButtonTheme: floatingActionButtonTheme,\n    typography: typography,\n    cupertinoOverrideTheme: cupertinoOverrideTheme,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ThemeData\/ThemeData.html",
            "isDeprecated": false,
            "type": "",
            "name": "ThemeData",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ThemeData",
            "params": [
                {
                    "name": "accentColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "accentColorBrightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "accentIconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "accentTextTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "appBarTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.AppBarTheme"
                },
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "bottomAppBarColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "bottomAppBarTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.BottomAppBarTheme"
                },
                {
                    "name": "brightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "buttonColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "buttonTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.ButtonThemeData"
                },
                {
                    "name": "canvasColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cardColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cardTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.CardTheme"
                },
                {
                    "name": "chipTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.ChipThemeData"
                },
                {
                    "name": "colorScheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "cupertinoOverrideTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "cupertino.CupertinoThemeData"
                },
                {
                    "name": "cursorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dialogBackgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dialogTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.DialogTheme"
                },
                {
                    "name": "disabledColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dividerColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "errorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "floatingActionButtonTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.FloatingActionButtonThemeData"
                },
                {
                    "name": "fontFamily",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "highlightColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "hintColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "iconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "indicatorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inputDecorationTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputDecorationTheme"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "pageTransitionsTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.PageTransitionsTheme"
                },
                {
                    "name": "platform",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.TargetPlatform"
                },
                {
                    "name": "primaryColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryColorBrightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "primaryColorDark",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryColorLight",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryIconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "primarySwatch",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.MaterialColor"
                },
                {
                    "name": "primaryTextTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "scaffoldBackgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "secondaryHeaderColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedRowColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "sliderTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "splashColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "splashFactory",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InteractiveInkFeatureFactory"
                },
                {
                    "name": "tabBarTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TabBarTheme"
                },
                {
                    "name": "textSelectionColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textSelectionHandleColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "toggleableActiveColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "typography",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.Typography"
                },
                {
                    "name": "unselectedWidgetColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this theme but with the given fields replaced with the new values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ThemeData copyWith({\n  Brightness brightness,\n  Color primaryColor,\n  Brightness primaryColorBrightness,\n  Color primaryColorLight,\n  Color primaryColorDark,\n  Color accentColor,\n  Brightness accentColorBrightness,\n  Color canvasColor,\n  Color scaffoldBackgroundColor,\n  Color bottomAppBarColor,\n  Color cardColor,\n  Color dividerColor,\n  Color highlightColor,\n  Color splashColor,\n  InteractiveInkFeatureFactory splashFactory,\n  Color selectedRowColor,\n  Color unselectedWidgetColor,\n  Color disabledColor,\n  ButtonThemeData buttonTheme,\n  Color buttonColor,\n  Color secondaryHeaderColor,\n  Color textSelectionColor,\n  Color cursorColor,\n  Color textSelectionHandleColor,\n  Color backgroundColor,\n  Color dialogBackgroundColor,\n  Color indicatorColor,\n  Color hintColor,\n  Color errorColor,\n  Color toggleableActiveColor,\n  TextTheme textTheme,\n  TextTheme primaryTextTheme,\n  TextTheme accentTextTheme,\n  InputDecorationTheme inputDecorationTheme,\n  IconThemeData iconTheme,\n  IconThemeData primaryIconTheme,\n  IconThemeData accentIconTheme,\n  SliderThemeData sliderTheme,\n  TabBarTheme tabBarTheme,\n  CardTheme cardTheme,\n  ChipThemeData chipTheme,\n  TargetPlatform platform,\n  MaterialTapTargetSize materialTapTargetSize,\n  PageTransitionsTheme pageTransitionsTheme,\n  AppBarTheme appBarTheme,\n  BottomAppBarTheme bottomAppBarTheme,\n  ColorScheme colorScheme,\n  DialogTheme dialogTheme,\n  FloatingActionButtonThemeData floatingActionButtonTheme,\n  Typography typography,\n  CupertinoThemeData cupertinoOverrideTheme,\n}) {\n  cupertinoOverrideTheme = cupertinoOverrideTheme?.noDefault();\n  return ThemeData.raw(\n    brightness: brightness ?? this.brightness,\n    primaryColor: primaryColor ?? this.primaryColor,\n    primaryColorBrightness: primaryColorBrightness ?? this.primaryColorBrightness,\n    primaryColorLight: primaryColorLight ?? this.primaryColorLight,\n    primaryColorDark: primaryColorDark ?? this.primaryColorDark,\n    accentColor: accentColor ?? this.accentColor,\n    accentColorBrightness: accentColorBrightness ?? this.accentColorBrightness,\n    canvasColor: canvasColor ?? this.canvasColor,\n    scaffoldBackgroundColor: scaffoldBackgroundColor ?? this.scaffoldBackgroundColor,\n    bottomAppBarColor: bottomAppBarColor ?? this.bottomAppBarColor,\n    cardColor: cardColor ?? this.cardColor,\n    dividerColor: dividerColor ?? this.dividerColor,\n    highlightColor: highlightColor ?? this.highlightColor,\n    splashColor: splashColor ?? this.splashColor,\n    splashFactory: splashFactory ?? this.splashFactory,\n    selectedRowColor: selectedRowColor ?? this.selectedRowColor,\n    unselectedWidgetColor: unselectedWidgetColor ?? this.unselectedWidgetColor,\n    disabledColor: disabledColor ?? this.disabledColor,\n    buttonColor: buttonColor ?? this.buttonColor,\n    buttonTheme: buttonTheme ?? this.buttonTheme,\n    secondaryHeaderColor: secondaryHeaderColor ?? this.secondaryHeaderColor,\n    textSelectionColor: textSelectionColor ?? this.textSelectionColor,\n    cursorColor: cursorColor ?? this.cursorColor,\n    textSelectionHandleColor: textSelectionHandleColor ?? this.textSelectionHandleColor,\n    backgroundColor: backgroundColor ?? this.backgroundColor,\n    dialogBackgroundColor: dialogBackgroundColor ?? this.dialogBackgroundColor,\n    indicatorColor: indicatorColor ?? this.indicatorColor,\n    hintColor: hintColor ?? this.hintColor,\n    errorColor: errorColor ?? this.errorColor,\n    toggleableActiveColor: toggleableActiveColor ?? this.toggleableActiveColor,\n    textTheme: textTheme ?? this.textTheme,\n    primaryTextTheme: primaryTextTheme ?? this.primaryTextTheme,\n    accentTextTheme: accentTextTheme ?? this.accentTextTheme,\n    inputDecorationTheme: inputDecorationTheme ?? this.inputDecorationTheme,\n    iconTheme: iconTheme ?? this.iconTheme,\n    primaryIconTheme: primaryIconTheme ?? this.primaryIconTheme,\n    accentIconTheme: accentIconTheme ?? this.accentIconTheme,\n    sliderTheme: sliderTheme ?? this.sliderTheme,\n    tabBarTheme: tabBarTheme ?? this.tabBarTheme,\n    cardTheme: cardTheme ?? this.cardTheme,\n    chipTheme: chipTheme ?? this.chipTheme,\n    platform: platform ?? this.platform,\n    materialTapTargetSize: materialTapTargetSize ?? this.materialTapTargetSize,\n    pageTransitionsTheme: pageTransitionsTheme ?? this.pageTransitionsTheme,\n    appBarTheme: appBarTheme ?? this.appBarTheme,\n    bottomAppBarTheme: bottomAppBarTheme ?? this.bottomAppBarTheme,\n    colorScheme: colorScheme ?? this.colorScheme,\n    dialogTheme: dialogTheme ?? this.dialogTheme,\n    floatingActionButtonTheme: floatingActionButtonTheme ?? this.floatingActionButtonTheme,\n    typography: typography ?? this.typography,\n    cupertinoOverrideTheme: cupertinoOverrideTheme ?? this.cupertinoOverrideTheme,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ThemeData\/copyWith.html",
            "isDeprecated": false,
            "type": "material.ThemeData",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ThemeData",
            "params": [
                {
                    "name": "accentColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "accentColorBrightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "accentIconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "accentTextTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "appBarTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.AppBarTheme"
                },
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "bottomAppBarColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "bottomAppBarTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.BottomAppBarTheme"
                },
                {
                    "name": "brightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "buttonColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "buttonTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ButtonThemeData"
                },
                {
                    "name": "canvasColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cardColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cardTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.CardTheme"
                },
                {
                    "name": "chipTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ChipThemeData"
                },
                {
                    "name": "colorScheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ColorScheme"
                },
                {
                    "name": "cupertinoOverrideTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "cupertino.CupertinoThemeData"
                },
                {
                    "name": "cursorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dialogBackgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dialogTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.DialogTheme"
                },
                {
                    "name": "disabledColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "dividerColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "errorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "floatingActionButtonTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.FloatingActionButtonThemeData"
                },
                {
                    "name": "highlightColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "hintColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "iconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "indicatorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inputDecorationTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.InputDecorationTheme"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "pageTransitionsTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.PageTransitionsTheme"
                },
                {
                    "name": "platform",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.TargetPlatform"
                },
                {
                    "name": "primaryColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryColorBrightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "primaryColorDark",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryColorLight",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "primaryIconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "primaryTextTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "scaffoldBackgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "secondaryHeaderColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedRowColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "sliderTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "splashColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "splashFactory",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.InteractiveInkFeatureFactory"
                },
                {
                    "name": "tabBarTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TabBarTheme"
                },
                {
                    "name": "textSelectionColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textSelectionHandleColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "toggleableActiveColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "typography",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.Typography"
                },
                {
                    "name": "unselectedWidgetColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/ThemeData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final ThemeData defaultData = ThemeData.fallback();\n  properties.add(EnumProperty&lt;TargetPlatform&gt;('platform', platform, defaultValue: defaultTargetPlatform));\n  properties.add(EnumProperty&lt;Brightness&gt;('brightness', brightness, defaultValue: defaultData.brightness));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primaryColor', primaryColor, defaultValue: defaultData.primaryColor));\n  properties.add(EnumProperty&lt;Brightness&gt;('primaryColorBrightness', primaryColorBrightness, defaultValue: defaultData.primaryColorBrightness));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('accentColor', accentColor, defaultValue: defaultData.accentColor));\n  properties.add(EnumProperty&lt;Brightness&gt;('accentColorBrightness', accentColorBrightness, defaultValue: defaultData.accentColorBrightness));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('canvasColor', canvasColor, defaultValue: defaultData.canvasColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('scaffoldBackgroundColor', scaffoldBackgroundColor, defaultValue: defaultData.scaffoldBackgroundColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('bottomAppBarColor', bottomAppBarColor, defaultValue: defaultData.bottomAppBarColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('cardColor', cardColor, defaultValue: defaultData.cardColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('dividerColor', dividerColor, defaultValue: defaultData.dividerColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('highlightColor', highlightColor, defaultValue: defaultData.highlightColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('splashColor', splashColor, defaultValue: defaultData.splashColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('selectedRowColor', selectedRowColor, defaultValue: defaultData.selectedRowColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('unselectedWidgetColor', unselectedWidgetColor, defaultValue: defaultData.unselectedWidgetColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledColor', disabledColor, defaultValue: defaultData.disabledColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('buttonColor', buttonColor, defaultValue: defaultData.buttonColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('secondaryHeaderColor', secondaryHeaderColor, defaultValue: defaultData.secondaryHeaderColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('textSelectionColor', textSelectionColor, defaultValue: defaultData.textSelectionColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('cursorColor', cursorColor, defaultValue: defaultData.cursorColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('textSelectionHandleColor', textSelectionHandleColor, defaultValue: defaultData.textSelectionHandleColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('backgroundColor', backgroundColor, defaultValue: defaultData.backgroundColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('dialogBackgroundColor', dialogBackgroundColor, defaultValue: defaultData.dialogBackgroundColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('indicatorColor', indicatorColor, defaultValue: defaultData.indicatorColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('hintColor', hintColor, defaultValue: defaultData.hintColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('errorColor', errorColor, defaultValue: defaultData.errorColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('toggleableActiveColor', toggleableActiveColor, defaultValue: defaultData.toggleableActiveColor));\n  properties.add(DiagnosticsProperty&lt;ButtonThemeData&gt;('buttonTheme', buttonTheme));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('textTheme', textTheme));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('primaryTextTheme', primaryTextTheme));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('accentTextTheme', accentTextTheme));\n  properties.add(DiagnosticsProperty&lt;InputDecorationTheme&gt;('inputDecorationTheme', inputDecorationTheme));\n  properties.add(DiagnosticsProperty&lt;IconThemeData&gt;('iconTheme', iconTheme));\n  properties.add(DiagnosticsProperty&lt;IconThemeData&gt;('primaryIconTheme', primaryIconTheme));\n  properties.add(DiagnosticsProperty&lt;IconThemeData&gt;('accentIconTheme', accentIconTheme));\n  properties.add(DiagnosticsProperty&lt;SliderThemeData&gt;('sliderTheme', sliderTheme));\n  properties.add(DiagnosticsProperty&lt;TabBarTheme&gt;('tabBarTheme', tabBarTheme));\n  properties.add(DiagnosticsProperty&lt;CardTheme&gt;('cardTheme', cardTheme));\n  properties.add(DiagnosticsProperty&lt;ChipThemeData&gt;('chipTheme', chipTheme));\n  properties.add(DiagnosticsProperty&lt;MaterialTapTargetSize&gt;('materialTapTargetSize', materialTapTargetSize));\n  properties.add(DiagnosticsProperty&lt;PageTransitionsTheme&gt;('pageTransitionsTheme', pageTransitionsTheme));\n  properties.add(DiagnosticsProperty&lt;AppBarTheme&gt;('appBarTheme', appBarTheme, defaultValue: defaultData.appBarTheme));\n  properties.add(DiagnosticsProperty&lt;BottomAppBarTheme&gt;('bottomAppBarTheme', bottomAppBarTheme, defaultValue: defaultData.bottomAppBarTheme));\n  properties.add(DiagnosticsProperty&lt;ColorScheme&gt;('colorScheme', colorScheme, defaultValue: defaultData.colorScheme));\n  properties.add(DiagnosticsProperty&lt;DialogTheme&gt;('dialogTheme', dialogTheme, defaultValue: defaultData.dialogTheme));\n  properties.add(DiagnosticsProperty&lt;FloatingActionButtonThemeData&gt;('floatingActionButtonThemeData', floatingActionButtonTheme, defaultValue: defaultData.floatingActionButtonTheme));\n  properties.add(DiagnosticsProperty&lt;Typography&gt;('typography', typography, defaultValue: defaultData.typography));\n  properties.add(DiagnosticsProperty&lt;CupertinoThemeData&gt;('cupertinoOverrideTheme', cupertinoOverrideTheme, defaultValue: defaultData.cupertinoOverrideTheme));\n}<\/code><\/pre>\n    ",
            "href": "material\/ThemeData\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ThemeData",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Determines whether the given <a href=\"dart-ui\/Color-class.html\">Color<\/a> is <a href=\"material\/ThemeData\/ThemeData.light.html\">Brightness.light<\/a> or\n<a href=\"material\/ThemeData\/ThemeData.dark.html\">Brightness.dark<\/a>.<\/p>\n<p>This compares the luminosity of the given color to a threshold value that\nmatches the material design specification.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Brightness estimateBrightnessForColor(Color color) {\n  final double relativeLuminance = color.computeLuminance();\n\n  \/\/ See &lt;https:\/\/www.w3.org\/TR\/WCAG20\/#contrast-ratiodef&gt;\n  \/\/ The spec says to use kThreshold=0.0525, but Material Design appears to bias\n  \/\/ more towards using light text than WCAG20 recommends. Material Design spec\n  \/\/ doesn't say what value to use, but 0.15 seemed close to what the Material\n  \/\/ Design spec shows for its color palette on\n  \/\/ &lt;https:\/\/material.io\/go\/design-theming#color-color-palette&gt;.\n  const double kThreshold = 0.15;\n  if ((relativeLuminance + 0.05) * (relativeLuminance + 0.05) &gt; kThreshold)\n    return Brightness.light;\n  return Brightness.dark;\n}<\/code><\/pre>\n    ",
            "href": "material\/ThemeData\/estimateBrightnessForColor.html",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "name": "estimateBrightnessForColor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ThemeData",
            "params": [
                {
                    "name": "color",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two themes.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ThemeData lerp(ThemeData a, ThemeData b, double t) {\n  assert(a != null);\n  assert(b != null);\n  assert(t != null);\n  \/\/ Warning: make sure these properties are in the exact same order as in\n  \/\/ hashValues() and in the raw constructor and in the order of fields in\n  \/\/ the class and in the lerp() method.\n  return ThemeData.raw(\n    brightness: t &lt; 0.5 ? a.brightness : b.brightness,\n    primaryColor: Color.lerp(a.primaryColor, b.primaryColor, t),\n    primaryColorBrightness: t &lt; 0.5 ? a.primaryColorBrightness : b.primaryColorBrightness,\n    primaryColorLight: Color.lerp(a.primaryColorLight, b.primaryColorLight, t),\n    primaryColorDark: Color.lerp(a.primaryColorDark, b.primaryColorDark, t),\n    canvasColor: Color.lerp(a.canvasColor, b.canvasColor, t),\n    accentColor: Color.lerp(a.accentColor, b.accentColor, t),\n    accentColorBrightness: t &lt; 0.5 ? a.accentColorBrightness : b.accentColorBrightness,\n    scaffoldBackgroundColor: Color.lerp(a.scaffoldBackgroundColor, b.scaffoldBackgroundColor, t),\n    bottomAppBarColor: Color.lerp(a.bottomAppBarColor, b.bottomAppBarColor, t),\n    cardColor: Color.lerp(a.cardColor, b.cardColor, t),\n    dividerColor: Color.lerp(a.dividerColor, b.dividerColor, t),\n    highlightColor: Color.lerp(a.highlightColor, b.highlightColor, t),\n    splashColor: Color.lerp(a.splashColor, b.splashColor, t),\n    splashFactory: t &lt; 0.5 ? a.splashFactory : b.splashFactory,\n    selectedRowColor: Color.lerp(a.selectedRowColor, b.selectedRowColor, t),\n    unselectedWidgetColor: Color.lerp(a.unselectedWidgetColor, b.unselectedWidgetColor, t),\n    disabledColor: Color.lerp(a.disabledColor, b.disabledColor, t),\n    buttonTheme: t &lt; 0.5 ? a.buttonTheme : b.buttonTheme,\n    buttonColor: Color.lerp(a.buttonColor, b.buttonColor, t),\n    secondaryHeaderColor: Color.lerp(a.secondaryHeaderColor, b.secondaryHeaderColor, t),\n    textSelectionColor: Color.lerp(a.textSelectionColor, b.textSelectionColor, t),\n    cursorColor: Color.lerp(a.cursorColor, b.cursorColor, t),\n    textSelectionHandleColor: Color.lerp(a.textSelectionHandleColor, b.textSelectionHandleColor, t),\n    backgroundColor: Color.lerp(a.backgroundColor, b.backgroundColor, t),\n    dialogBackgroundColor: Color.lerp(a.dialogBackgroundColor, b.dialogBackgroundColor, t),\n    indicatorColor: Color.lerp(a.indicatorColor, b.indicatorColor, t),\n    hintColor: Color.lerp(a.hintColor, b.hintColor, t),\n    errorColor: Color.lerp(a.errorColor, b.errorColor, t),\n    toggleableActiveColor: Color.lerp(a.toggleableActiveColor, b.toggleableActiveColor, t),\n    textTheme: TextTheme.lerp(a.textTheme, b.textTheme, t),\n    primaryTextTheme: TextTheme.lerp(a.primaryTextTheme, b.primaryTextTheme, t),\n    accentTextTheme: TextTheme.lerp(a.accentTextTheme, b.accentTextTheme, t),\n    inputDecorationTheme: t &lt; 0.5 ? a.inputDecorationTheme : b.inputDecorationTheme,\n    iconTheme: IconThemeData.lerp(a.iconTheme, b.iconTheme, t),\n    primaryIconTheme: IconThemeData.lerp(a.primaryIconTheme, b.primaryIconTheme, t),\n    accentIconTheme: IconThemeData.lerp(a.accentIconTheme, b.accentIconTheme, t),\n    sliderTheme: SliderThemeData.lerp(a.sliderTheme, b.sliderTheme, t),\n    tabBarTheme: TabBarTheme.lerp(a.tabBarTheme, b.tabBarTheme, t),\n    cardTheme: CardTheme.lerp(a.cardTheme, b.cardTheme, t),\n    chipTheme: ChipThemeData.lerp(a.chipTheme, b.chipTheme, t),\n    platform: t &lt; 0.5 ? a.platform : b.platform,\n    materialTapTargetSize: t &lt; 0.5 ? a.materialTapTargetSize : b.materialTapTargetSize,\n    pageTransitionsTheme: t &lt; 0.5 ? a.pageTransitionsTheme : b.pageTransitionsTheme,\n    appBarTheme: AppBarTheme.lerp(a.appBarTheme, b.appBarTheme, t),\n    bottomAppBarTheme: BottomAppBarTheme.lerp(a.bottomAppBarTheme, b.bottomAppBarTheme, t),\n    colorScheme: ColorScheme.lerp(a.colorScheme, b.colorScheme, t),\n    dialogTheme: DialogTheme.lerp(a.dialogTheme, b.dialogTheme, t),\n    floatingActionButtonTheme: FloatingActionButtonThemeData.lerp(a.floatingActionButtonTheme, b.floatingActionButtonTheme, t),\n    typography: Typography.lerp(a.typography, b.typography, t),\n    cupertinoOverrideTheme: t &lt; 0.5 ? a.cupertinoOverrideTheme : b.cupertinoOverrideTheme,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ThemeData\/lerp.html",
            "isDeprecated": false,
            "type": "material.ThemeData",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ThemeData",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ThemeData"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ThemeData"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new theme built by merging the text geometry provided by the\n<code>localTextGeometry<\/code> theme with the <code>baseTheme<\/code>.<\/p>\n<p>For those text styles in the <code>baseTheme<\/code> whose <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> is set\nto true, the returned theme's text styles inherit the geometric properties\nof <code>localTextGeometry<\/code>. The resulting text styles' <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> is\nset to those provided by <code>localTextGeometry<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ThemeData localize(ThemeData baseTheme, TextTheme localTextGeometry) {\n  \/\/ WARNING: this method memoizes the result in a cache based on the\n  \/\/ previously seen baseTheme and localTextGeometry. Memoization is safe\n  \/\/ because all inputs and outputs of this function are deeply immutable, and\n  \/\/ the computations are referentially transparent. It only short-circuits\n  \/\/ the computation if the new inputs are identical() to the previous ones.\n  \/\/ It does not use the == operator, which performs a costly deep comparison.\n  \/\/\n  \/\/ When changing this method, make sure the memoization logic is correct.\n  \/\/ Remember:\n  \/\/\n  \/\/ There are only two hard things in Computer Science: cache invalidation\n  \/\/ and naming things. -- Phil Karlton\n  assert(baseTheme != null);\n  assert(localTextGeometry != null);\n\n  return _localizedThemeDataCache.putIfAbsent(\n    _IdentityThemeDataCacheKey(baseTheme, localTextGeometry),\n    () {\n      return baseTheme.copyWith(\n        primaryTextTheme: localTextGeometry.merge(baseTheme.primaryTextTheme),\n        accentTextTheme: localTextGeometry.merge(baseTheme.accentTextTheme),\n        textTheme: localTextGeometry.merge(baseTheme.textTheme),\n      );\n    },\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ThemeData\/localize.html",
            "isDeprecated": false,
            "type": "material.ThemeData",
            "name": "localize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ThemeData",
            "params": [
                {
                    "name": "baseTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ThemeData"
                },
                {
                    "name": "localTextGeometry",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The foreground color for widgets (knobs, text, overscroll edge effect, etc).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color accentColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/accentColor.html",
            "name": "accentColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The brightness of the <a href=\"material\/ThemeData\/accentColor.html\">accentColor<\/a>. Used to determine the color of text\nand icons placed on top of the accent color (e.g. the icons on a floating\naction button).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness accentColorBrightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/accentColorBrightness.html",
            "name": "accentColorBrightness",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>An icon theme that contrasts with the accent color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IconThemeData accentIconTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/accentIconTheme.html",
            "name": "accentIconTheme",
            "isDeprecated": false,
            "type": "widgets.IconThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A text theme that contrasts with the accent color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme accentTextTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/accentTextTheme.html",
            "name": "accentTextTheme",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A theme for customizing the color, elevation, brightness, iconTheme and\ntextTheme of <a href=\"material\/AppBar-class.html\">AppBar<\/a>s.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AppBarTheme appBarTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/appBarTheme.html",
            "name": "appBarTheme",
            "isDeprecated": false,
            "type": "material.AppBarTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A color that contrasts with the <a href=\"material\/ThemeData\/primaryColor.html\">primaryColor<\/a>, e.g. used as the\nremaining part of a progress bar.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The default color of the <a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a>.<\/p>\n<p>This can be overridden by specifying <a href=\"material\/BottomAppBar\/color.html\">BottomAppBar.color<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color bottomAppBarColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/bottomAppBarColor.html",
            "name": "bottomAppBarColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A theme for customizing the shape, elevation, and color of a <a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BottomAppBarTheme bottomAppBarTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/bottomAppBarTheme.html",
            "name": "bottomAppBarTheme",
            "isDeprecated": false,
            "type": "material.BottomAppBarTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The brightness of the overall theme of the application. Used by widgets\nlike buttons to determine what color to pick when not using the primary or\naccent color.<\/p>\n<p>When the <a href=\"dart-ui\/Brightness-class.html\">Brightness<\/a> is dark, the canvas, card, and primary colors are\nall dark. When the <a href=\"dart-ui\/Brightness-class.html\">Brightness<\/a> is light, the canvas and card colors\nare bright, and the primary color's darkness varies as described by\nprimaryColorBrightness. The primaryColor does not contrast well with the\ncard and canvas colors when the brightness is dark; when the brightness is\ndark, use Colors.white or the accentColor for a contrasting color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness brightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/brightness.html",
            "name": "brightness",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The default fill color of the <a href=\"material\/Material-class.html\">Material<\/a> used in <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>s.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color buttonColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/buttonColor.html",
            "name": "buttonColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>Defines the default configuration of button widgets, like <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>\nand <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ButtonThemeData buttonTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/buttonTheme.html",
            "name": "buttonTheme",
            "isDeprecated": false,
            "type": "material.ButtonThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The default color of <a href=\"material\/MaterialType-class.html\">MaterialType.canvas<\/a> <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color canvasColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/canvasColor.html",
            "name": "canvasColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of <a href=\"material\/Material-class.html\">Material<\/a> when it is used as a <a href=\"material\/Card-class.html\">Card<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color cardColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/cardColor.html",
            "name": "cardColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The colors and styles used to render <a href=\"material\/Card-class.html\">Card<\/a>.<\/p>\n<p>This is the value returned from <a href=\"material\/CardTheme\/of.html\">CardTheme.of<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CardTheme cardTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/cardTheme.html",
            "name": "cardTheme",
            "isDeprecated": false,
            "type": "material.CardTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The colors and styles used to render <a href=\"material\/Chip-class.html\">Chip<\/a>, [<\/p>\n<p>This is the value returned from <a href=\"material\/ChipTheme\/of.html\">ChipTheme.of<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ChipThemeData chipTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/chipTheme.html",
            "name": "chipTheme",
            "isDeprecated": false,
            "type": "material.ChipThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A set of thirteen colors that can be used to configure the\ncolor properties of most components.<\/p>\n<p>This property was added much later than the theme's set of highly\nspecific colors, like <a href=\"material\/ThemeData\/cardColor.html\">cardColor<\/a>, <a href=\"material\/ThemeData\/buttonColor.html\">buttonColor<\/a>, <a href=\"material\/ThemeData\/canvasColor.html\">canvasColor<\/a> etc.\nNew components can be defined exclusively in terms of <a href=\"material\/ThemeData\/colorScheme.html\">colorScheme<\/a>.\nExisting components will gradually migrate to it, to the extent\nthat is possible without significant backwards compatibility breaks.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ColorScheme colorScheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/colorScheme.html",
            "name": "colorScheme",
            "isDeprecated": false,
            "type": "material.ColorScheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>Components of the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> to override from the Material\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a> adaptation.<\/p>\n<p>By default, <a href=\"material\/ThemeData\/cupertinoOverrideTheme.html\">cupertinoOverrideTheme<\/a> is null and Cupertino widgets\ndescendant to the Material <a href=\"material\/Theme-class.html\">Theme<\/a> will adhere to a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>\nderived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>. e.g. <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>ColorTheme<\/code>\nwill also inform the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a>'s <code>primaryColor<\/code> etc.<\/p>\n<p>This cascading effect for individual attributes of the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a>\ncan be overridden using attributes of this <a href=\"material\/ThemeData\/cupertinoOverrideTheme.html\">cupertinoOverrideTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoThemeData cupertinoOverrideTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/cupertinoOverrideTheme.html",
            "name": "cupertinoOverrideTheme",
            "isDeprecated": false,
            "type": "cupertino.CupertinoThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of cursors in Material-style text fields, such as <a href=\"material\/TextField-class.html\">TextField<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color cursorColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/cursorColor.html",
            "name": "cursorColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The background color of <a href=\"material\/Dialog-class.html\">Dialog<\/a> elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color dialogBackgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/dialogBackgroundColor.html",
            "name": "dialogBackgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A theme for customizing the shape of a dialog.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DialogTheme dialogTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/dialogTheme.html",
            "name": "dialogTheme",
            "isDeprecated": false,
            "type": "material.DialogTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color used for widgets that are inoperative, regardless of\ntheir state. For example, a disabled checkbox (which may be\nchecked or unchecked).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/disabledColor.html",
            "name": "disabledColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of <a href=\"material\/Divider-class.html\">Divider<\/a>s and <a href=\"material\/PopupMenuDivider-class.html\">PopupMenuDivider<\/a>s, also used\nbetween <a href=\"material\/ListTile-class.html\">ListTile<\/a>s, between rows in <a href=\"material\/DataTable-class.html\">DataTable<\/a>s, and so forth.<\/p>\n<p>To create an appropriate <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> that uses this color, consider\n<a href=\"material\/Divider\/createBorderSide.html\">Divider.createBorderSide<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color dividerColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/dividerColor.html",
            "name": "dividerColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color to use for input validation errors, e.g. in <a href=\"material\/TextField-class.html\">TextField<\/a> fields.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color errorColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/errorColor.html",
            "name": "errorColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A theme for customizing the shape, elevation, and color of a\n<a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FloatingActionButtonThemeData floatingActionButtonTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/floatingActionButtonTheme.html",
            "name": "floatingActionButtonTheme",
            "isDeprecated": false,
            "type": "material.FloatingActionButtonThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/ThemeData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/ThemeData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/ThemeData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/ThemeData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/ThemeData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/ThemeData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  \/\/ The hashValues() function supports up to 20 arguments.\n  return hashValues(\n    \/\/ Warning: make sure these properties are in the exact same order as in\n    \/\/ operator == and in the raw constructor and in the order of fields in\n    \/\/ the class and in the lerp() method.\n    brightness,\n    primaryColor,\n    primaryColorBrightness,\n    primaryColorLight,\n    primaryColorDark,\n    accentColor,\n    accentColorBrightness,\n    canvasColor,\n    scaffoldBackgroundColor,\n    bottomAppBarColor,\n    cardColor,\n    dividerColor,\n    highlightColor,\n    splashColor,\n    splashFactory,\n    selectedRowColor,\n    unselectedWidgetColor,\n    disabledColor,\n    buttonTheme,\n    hashValues(\n      buttonColor,\n      toggleableActiveColor,\n      secondaryHeaderColor,\n      textSelectionColor,\n      cursorColor,\n      textSelectionHandleColor,\n      backgroundColor,\n      dialogBackgroundColor,\n      indicatorColor,\n      hintColor,\n      errorColor,\n      textTheme,\n      primaryTextTheme,\n      accentTextTheme,\n      inputDecorationTheme,\n      iconTheme,\n      primaryIconTheme,\n      accentIconTheme,\n      sliderTheme,\n      hashValues(\n        tabBarTheme,\n        cardTheme,\n        chipTheme,\n        platform,\n        materialTapTargetSize,\n        pageTransitionsTheme,\n        appBarTheme,\n        bottomAppBarTheme,\n        colorScheme,\n        dialogTheme,\n        floatingActionButtonTheme,\n        typography,\n        cupertinoOverrideTheme,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The highlight color used during ink splash animations or to\nindicate an item in a menu is selected.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color highlightColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/highlightColor.html",
            "name": "highlightColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color to use for hint text or placeholder text, e.g. in\n<a href=\"material\/TextField-class.html\">TextField<\/a> fields.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color hintColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/hintColor.html",
            "name": "hintColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>An icon theme that contrasts with the card and canvas colors.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IconThemeData iconTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/iconTheme.html",
            "name": "iconTheme",
            "isDeprecated": false,
            "type": "widgets.IconThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the selected tab indicator in a tab bar.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color indicatorColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/indicatorColor.html",
            "name": "indicatorColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The default <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a> values for <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, <a href=\"material\/TextField-class.html\">TextField<\/a>,\nand <a href=\"material\/TextFormField-class.html\">TextFormField<\/a> are based on this theme.<\/p>\n<p>See <a href=\"material\/InputDecoration\/applyDefaults.html\">InputDecoration.applyDefaults<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputDecorationTheme inputDecorationTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/inputDecorationTheme.html",
            "name": "inputDecorationTheme",
            "isDeprecated": false,
            "type": "material.InputDecorationTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>Configures the hit test size of certain Material widgets.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/materialTapTargetSize.html",
            "name": "materialTapTargetSize",
            "isDeprecated": false,
            "type": "material.MaterialTapTargetSize",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>Default <a href=\"material\/MaterialPageRoute-class.html\">MaterialPageRoute<\/a> transitions per <a href=\"foundation\/TargetPlatform-class.html\">TargetPlatform<\/a>.<\/p>\n<p><a href=\"material\/MaterialPageRoute\/buildTransitions.html\">MaterialPageRoute.buildTransitions<\/a> delegates to a <a href=\"material\/PageTransitionsBuilder-class.html\">PageTransitionsBuilder<\/a>\nwhose <a href=\"material\/ThemeData\/platform.html\">PageTransitionsBuilder.platform<\/a> matches <a href=\"material\/ThemeData\/platform.html\">platform<\/a>. If a matching\nbuilder is not found, a builder whose platform is null is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PageTransitionsTheme pageTransitionsTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/pageTransitionsTheme.html",
            "name": "pageTransitionsTheme",
            "isDeprecated": false,
            "type": "material.PageTransitionsTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The platform the material widgets should adapt to target.<\/p>\n<p>Defaults to the current platform. This should be used in order to style UI\nelements according to platform conventions.<\/p>\n<p><code>Platform.defaultTargetPlatform<\/code> should be used directly instead only in\nrare cases where it's necessary to determine behavior based on the\nplatform. <code>dart.io.Platform.environment<\/code> should be used when it's critical\nto actually know the current platform, without any overrides possible (for\nexample, when a system API is about to be called).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TargetPlatform platform\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/platform.html",
            "name": "platform",
            "isDeprecated": false,
            "type": "foundation.TargetPlatform",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The background color for major parts of the app (toolbars, tab bars, etc)<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color primaryColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/primaryColor.html",
            "name": "primaryColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The brightness of the <a href=\"material\/ThemeData\/primaryColor.html\">primaryColor<\/a>. Used to determine the color of text and\nicons placed on top of the primary color (e.g. toolbar text).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness primaryColorBrightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/primaryColorBrightness.html",
            "name": "primaryColorBrightness",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A darker version of the <a href=\"material\/ThemeData\/primaryColor.html\">primaryColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color primaryColorDark\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/primaryColorDark.html",
            "name": "primaryColorDark",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A lighter version of the <a href=\"material\/ThemeData\/primaryColor.html\">primaryColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color primaryColorLight\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/primaryColorLight.html",
            "name": "primaryColorLight",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>An icon theme that contrasts with the primary color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IconThemeData primaryIconTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/primaryIconTheme.html",
            "name": "primaryIconTheme",
            "isDeprecated": false,
            "type": "widgets.IconThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A text theme that contrasts with the primary color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme primaryTextTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/primaryTextTheme.html",
            "name": "primaryTextTheme",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The default color of the <a href=\"material\/Material-class.html\">Material<\/a> that underlies the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a>. The\nbackground color for a typical material app or a page within the app.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color scaffoldBackgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/scaffoldBackgroundColor.html",
            "name": "scaffoldBackgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the header of a <a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a> when there are selected rows.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color secondaryHeaderColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/secondaryHeaderColor.html",
            "name": "secondaryHeaderColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color used to highlight selected rows.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedRowColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/selectedRowColor.html",
            "name": "selectedRowColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The colors and shapes used to render <a href=\"material\/Slider-class.html\">Slider<\/a>.<\/p>\n<p>This is the value returned from <a href=\"material\/SliderTheme\/of.html\">SliderTheme.of<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderThemeData sliderTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/sliderTheme.html",
            "name": "sliderTheme",
            "isDeprecated": false,
            "type": "material.SliderThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of ink splashes. See <a href=\"material\/InkWell-class.html\">InkWell<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color splashColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/splashColor.html",
            "name": "splashColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>Defines the appearance of ink splashes produces by <a href=\"material\/InkWell-class.html\">InkWell<\/a>\nand <a href=\"material\/InkResponse-class.html\">InkResponse<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ThemeData\/splashFactory.html\">InkSplash.splashFactory<\/a>, which defines the default splash.<\/li>\n<li>\n<a href=\"material\/ThemeData\/splashFactory.html\">InkRipple.splashFactory<\/a>, which defines a splash that spreads out\nmore aggressively than the default.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InteractiveInkFeatureFactory splashFactory\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/splashFactory.html",
            "name": "splashFactory",
            "isDeprecated": false,
            "type": "material.InteractiveInkFeatureFactory",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>A theme for customizing the size, shape, and color of the tab bar indicator.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TabBarTheme tabBarTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/tabBarTheme.html",
            "name": "tabBarTheme",
            "isDeprecated": false,
            "type": "material.TabBarTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of text selections in text fields, such as <a href=\"material\/TextField-class.html\">TextField<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color textSelectionColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/textSelectionColor.html",
            "name": "textSelectionColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the handles used to adjust what part of the text is currently selected.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color textSelectionHandleColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/textSelectionHandleColor.html",
            "name": "textSelectionHandleColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>Text with a color that contrasts with the card and canvas colors.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme textTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/textTheme.html",
            "name": "textTheme",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color used to highlight the active states of toggleable widgets like\n<a href=\"material\/Switch-class.html\">Switch<\/a>, <a href=\"material\/Radio-class.html\">Radio<\/a>, and <a href=\"material\/Checkbox-class.html\">Checkbox<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color toggleableActiveColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/toggleableActiveColor.html",
            "name": "toggleableActiveColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color and geometry <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> values used to configure <a href=\"material\/ThemeData\/textTheme.html\">textTheme<\/a>,\n<a href=\"material\/ThemeData\/primaryTextTheme.html\">primaryTextTheme<\/a>, and <a href=\"material\/ThemeData\/accentTextTheme.html\">accentTextTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Typography typography\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/typography.html",
            "name": "typography",
            "isDeprecated": false,
            "type": "material.Typography",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        },
        {
            "desc": "<p>The color used for widgets in their inactive (but enabled)\nstate. For example, an unchecked checkbox. Usually contrasted\nwith the <a href=\"material\/ThemeData\/accentColor.html\">accentColor<\/a>. See also <a href=\"material\/ThemeData\/disabledColor.html\">disabledColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color unselectedWidgetColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ThemeData\/unselectedWidgetColor.html",
            "name": "unselectedWidgetColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ThemeData",
            "params": []
        }
    ]
}