{
    "name": "painting.MemoryImage",
    "extends": [
        "painting.MemoryImage",
        "painting.ImageProvider",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/MemoryImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.MemoryImage",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/MemoryImage\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final MemoryImage typedOther = other;\n  return bytes == typedOther.bytes\n      &amp;&amp; scale == typedOther.scale;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "MemoryImage",
            "type": "",
            "desc": "<p>Creates an object that decodes a <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> buffer as an image.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.MemoryImage",
            "sig": "",
            "params": [
                {
                    "name": "bytes",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/MemoryImage\/MemoryImage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MemoryImage(this.bytes, { this.scale = 1.0 })\n  : assert(bytes != null),\n    assert(scale != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "load",
            "type": "painting.ImageStreamCompleter",
            "desc": "<p>Converts a key into an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a>, and begins fetching the\nimage.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.MemoryImage",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "painting.MemoryImage",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/MemoryImage\/load.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nImageStreamCompleter load(MemoryImage key) {\n  return MultiFrameImageStreamCompleter(\n    codec: _loadAsync(key),\n    scale: key.scale,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "obtainKey",
            "type": "dart:async.Future<painting.MemoryImage>",
            "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/MemoryImage\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.MemoryImage",
            "sig": "",
            "params": [
                {
                    "name": "configuration",
                    "type": "painting.ImageConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/MemoryImage\/obtainKey.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;MemoryImage&gt; obtainKey(ImageConfiguration configuration) {\n  return SynchronousFuture&lt;MemoryImage&gt;(this);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "painting.MemoryImage"
            ]
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.MemoryImage",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/MemoryImage\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(${describeIdentity(bytes)}, scale: $scale)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bytes",
            "type": "dart:typed_data.Uint8List",
            "types": [],
            "desc": "<p>The bytes to decode into an image.<\/p>\n        ",
            "memberOf": "painting.MemoryImage",
            "isConstant": false,
            "href": "painting\/MemoryImage\/bytes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uint8List bytes\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/MemoryImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.MemoryImage",
            "isConstant": false,
            "href": "painting\/MemoryImage\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(bytes.hashCode, scale);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scale",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
            "memberOf": "painting.MemoryImage",
            "isConstant": false,
            "href": "painting\/MemoryImage\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "painting.MemoryImage"
    ],
    "realImplementors": [
        "painting.MemoryImage"
    ],
    "cn": [],
    "href": "painting\/MemoryImage-class.html",
    "desc": "<p>Decodes the given <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> buffer as an image, associating it with the\ngiven scale.<\/p>\n<p>The provided <a href=\"painting\/MemoryImage\/bytes.html\">bytes<\/a> buffer should not be changed after it is provided\nto a <a href=\"painting\/MemoryImage-class.html\">MemoryImage<\/a>. To provide an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> that represents an image\nthat changes over time, consider creating a new subclass of <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>\nwhose <a href=\"painting\/MemoryImage\/load.html\">load<\/a> method returns a subclass of <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> that can\nhandle providing multiple images.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Image\/Image.memory.html\">Image.memory<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by <a href=\"painting\/MemoryImage-class.html\">MemoryImage<\/a>.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "MemoryImage"
}