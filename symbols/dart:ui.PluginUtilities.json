{
    "desc": "<p>Functionality for Flutter plugin authors.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/IsolateNameServer-class.html\">IsolateNameServer<\/a>, which provides utilities for dealing with\n<a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a>s.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/PluginUtilities-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.PluginUtilities",
    "shortname": "PluginUtilities",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Get a tear-off of a named top-level or static callback represented by a\nhandle.<\/p>\n<p>The <code>handle<\/code> argument must not be null.<\/p>\n<p>If <code>handle<\/code> is not a valid handle returned by\n<a href=\"dart-ui\/PluginUtilities\/getCallbackHandle.html\">PluginUtilities.getCallbackHandle<\/a>, null is returned. Otherwise, a\ntear-off of the callback associated with <code>handle<\/code> is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Function getCallbackFromHandle(CallbackHandle handle) {\n  assert(handle != null, \"'handle' must not be null.\");\n  return _backwardCache.putIfAbsent(\n      handle, () =&gt; _getCallbackFromHandle(handle.toRawHandle()));\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/PluginUtilities\/getCallbackFromHandle.html",
            "isDeprecated": "0",
            "type": "dart:core.Function",
            "name": "getCallbackFromHandle",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.PluginUtilities",
            "params": [
                {
                    "name": "handle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.CallbackHandle"
                }
            ]
        },
        {
            "desc": "<p>Get a handle to a named top-level or static callback function which can\nbe easily passed between isolates.<\/p>\n<p>The <code>callback<\/code> argument must not be null.<\/p>\n<p>Returns a <a href=\"dart-ui\/CallbackHandle-class.html\">CallbackHandle<\/a> that can be provided to\n<a href=\"dart-ui\/PluginUtilities\/getCallbackFromHandle.html\">PluginUtilities.getCallbackFromHandle<\/a> to retrieve a tear-off of the\noriginal callback. If <code>callback<\/code> is not a top-level or static function,\nnull is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static CallbackHandle getCallbackHandle(Function callback) {\n  assert(callback != null, \"'callback' must not be null.\");\n  return _forwardCache.putIfAbsent(callback, () {\n    final int handle = _getCallbackHandle(callback);\n    return handle != null ? new CallbackHandle.fromRawHandle(handle) : null;\n  });\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/PluginUtilities\/getCallbackHandle.html",
            "isDeprecated": "0",
            "type": "dart:ui.CallbackHandle",
            "name": "getCallbackHandle",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.PluginUtilities",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": []
}