{
    "name": "widgets.HeroController",
    "extends": [
        "widgets.NavigatorObserver",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "HeroController",
            "type": "",
            "desc": "<p>Creates a hero controller with the given <a href=\"animation\/RectTween-class.html\">RectTween<\/a> constructor if any.<\/p>\n<p>The <code>createRectTween<\/code> argument is optional. If null, the controller uses a\nlinear <a href=\"animation\/Tween-class.html\">Tween&lt;Rect&gt;<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.HeroController",
            "sig": "",
            "params": [
                {
                    "name": "createRectTween",
                    "type": "widgets.CreateRectTween",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/HeroController\/HeroController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HeroController({ this.createRectTween });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "didPop",
            "type": "",
            "desc": "<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> popped <code>route<\/code>.<\/p>\n<p>The route immediately below that one, and thus the newly active\nroute, is <code>previousRoute<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.HeroController",
            "sig": "",
            "params": [
                {
                    "name": "route",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "previousRoute",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/HeroController\/didPop.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didPop(Route&lt;dynamic&gt; route, Route&lt;dynamic&gt; previousRoute) {\n  assert(navigator != null);\n  assert(route != null);\n  _maybeStartHeroTransition(route, previousRoute, HeroFlightDirection.pop, false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didPush",
            "type": "",
            "desc": "<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushed <code>route<\/code>.<\/p>\n<p>The route immediately below that one, and thus the previously active\nroute, is <code>previousRoute<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.HeroController",
            "sig": "",
            "params": [
                {
                    "name": "route",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "previousRoute",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/HeroController\/didPush.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didPush(Route&lt;dynamic&gt; route, Route&lt;dynamic&gt; previousRoute) {\n  assert(navigator != null);\n  assert(route != null);\n  _maybeStartHeroTransition(previousRoute, route, HeroFlightDirection.push, false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didStartUserGesture",
            "type": "",
            "desc": "<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>'s route <code>route<\/code> is being moved by a user gesture.<\/p>\n<p>For example, this is called when an iOS back gesture starts.<\/p>\n<p>Paired with a call to <a href=\"widgets\/NavigatorObserver\/didStopUserGesture.html\">didStopUserGesture<\/a> when the route is no longer\nbeing manipulated via user gesture.<\/p>\n<p>If present, the route immediately below <code>route<\/code> is <code>previousRoute<\/code>.\nThough the gesture may not necessarily conclude at <code>previousRoute<\/code> if\nthe gesture is canceled. In that case, <a href=\"widgets\/NavigatorObserver\/didStopUserGesture.html\">didStopUserGesture<\/a> is still\ncalled but a follow-up <a href=\"widgets\/HeroController\/didPop.html\">didPop<\/a> is not.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.HeroController",
            "sig": "",
            "params": [
                {
                    "name": "route",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "previousRoute",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/HeroController\/didStartUserGesture.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStartUserGesture(Route&lt;dynamic&gt; route, Route&lt;dynamic&gt; previousRoute) {\n  assert(navigator != null);\n  assert(route != null);\n  _maybeStartHeroTransition(route, previousRoute, HeroFlightDirection.pop, true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "createRectTween",
            "type": "widgets.CreateRectTween",
            "types": [],
            "desc": "<p>Used to create <a href=\"animation\/RectTween-class.html\">RectTween<\/a>s that interpolate the position of heroes in flight.<\/p>\n<p>If null, the controller uses a linear <a href=\"animation\/RectTween-class.html\">RectTween<\/a>.<\/p>\n        ",
            "memberOf": "widgets.HeroController",
            "isConstant": false,
            "href": "widgets\/HeroController\/createRectTween.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CreateRectTween createRectTween\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/HeroController-class.html",
    "desc": "<p>A <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> observer that manages <a href=\"widgets\/Hero-class.html\">Hero<\/a> transitions.<\/p>\n<p>An instance of <a href=\"widgets\/HeroController-class.html\">HeroController<\/a> should be used in <a href=\"widgets\/Navigator\/observers.html\">Navigator.observers<\/a>.\nThis is done automatically by <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "HeroController"
}