{
    "name": "material.Scrollbar",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "Scrollbar",
            "type": "",
            "desc": "<p>Creates a material design scrollbar that wraps the given <code>child<\/code>.<\/p>\n<p>The <code>child<\/code> should be a source of <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications,\ntypically a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n    ",
            "static": false,
            "memberOf": "material.Scrollbar",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/Scrollbar\/Scrollbar.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Scrollbar({\n  Key key,\n  @required this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/Scrollbar\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.Scrollbar",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/Scrollbar\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ScrollbarState createState() =&gt; _ScrollbarState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>The scrollbar will be stacked on top of this child. This child (and its\nsubtree) should include a source of <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications.<\/p>\n<p>Typically a <a href=\"widgets\/ListView-class.html\">ListView<\/a> or <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/p>\n        ",
            "memberOf": "material.Scrollbar",
            "isConstant": false,
            "href": "material\/Scrollbar\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/Scrollbar-class.html",
    "desc": "<p>A material design scrollbar.<\/p>\n<p>A scrollbar indicates which portion of a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget is actually\nvisible.<\/p>\n<p>Dynamically changes to an iOS style scrollbar that looks like\n<a href=\"cupertino\/CupertinoScrollbar-class.html\">CupertinoScrollbar<\/a> on the iOS platform.<\/p>\n<p>To add a scrollbar to a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a>, simply wrap the scroll view widget in\na <a href=\"material\/Scrollbar-class.html\">Scrollbar<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which display a linear, scrollable list of children.<\/li>\n<li>\n<a href=\"widgets\/GridView-class.html\">GridView<\/a>, which display a 2 dimensional, scrollable array of children.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Scrollbar"
}