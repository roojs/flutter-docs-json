{
    "desc": "<p>A collection of resources used by the application.<\/p>\n<p>Asset bundles contain resources, such as images and strings, that can be\nused by an application. Access to these resources is asynchronous so that\nthey can be transparently loaded over a network (e.g., from a\n<a href=\"services\/NetworkAssetBundle-class.html\">NetworkAssetBundle<\/a>) or from the local file system without blocking the\napplication's user interface.<\/p>\n<p>Applications have a <a href=\"services\/rootBundle.html\">rootBundle<\/a>, which contains the resources that were\npackaged with the application when it was built. To add resources to the\n<a href=\"services\/rootBundle.html\">rootBundle<\/a> for your application, add them to the <code>assets<\/code> subsection of\nthe <code>flutter<\/code> section of your application's <code>pubspec.yaml<\/code> manifest.<\/p>\n<p>For example:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">name: my_awesome_application\nflutter:\n  assets:\n   - images\/hamilton.jpeg\n   - images\/lafayette.jpeg\n<\/code><\/pre>\n<p>Rather than accessing the <a href=\"services\/rootBundle.html\">rootBundle<\/a> global static directly, consider\nobtaining the <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> for the current <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> using\n<a href=\"widgets\/DefaultAssetBundle\/of.html\">DefaultAssetBundle.of<\/a>. This layer of indirection lets ancestor widgets\nsubstitute a different <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> (e.g., for testing or localization) at\nruntime rather than directly replying upon the <a href=\"services\/rootBundle.html\">rootBundle<\/a> created at build\ntime. For convenience, the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> or <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> widget at the top\nof the widget hierarchy configures the <a href=\"widgets\/DefaultAssetBundle-class.html\">DefaultAssetBundle<\/a> to be the\n<a href=\"services\/rootBundle.html\">rootBundle<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/DefaultAssetBundle-class.html\">DefaultAssetBundle<\/a><\/li>\n<li><a href=\"services\/NetworkAssetBundle-class.html\">NetworkAssetBundle<\/a><\/li>\n<li><a href=\"services\/rootBundle.html\">rootBundle<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "services\/AssetBundle-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.AssetBundle",
    "shortname": "AssetBundle",
    "extends": [],
    "realImplementors": [
        "services.NetworkAssetBundle",
        "services.PlatformAssetBundle"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "services\/AssetBundle\/AssetBundle.html",
            "isDeprecated": false,
            "type": "",
            "name": "AssetBundle",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.AssetBundle",
            "params": []
        },
        {
            "desc": "<p>If this is a caching asset bundle, and the given key describes a cached\nasset, then evict the asset from the cache so that the next time it is\nloaded, the cache will be reread from the asset bundle.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void evict(String key) { }<\/code><\/pre>\n    ",
            "href": "services\/AssetBundle\/evict.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "evict",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.AssetBundle",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Retrieve a binary resource from the asset bundle as a data stream.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ByteData&gt; load(String key);<\/code><\/pre>\n    ",
            "href": "services\/AssetBundle\/load.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:typed_data.ByteData>",
            "name": "load",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.AssetBundle",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Retrieve a string from the asset bundle.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n<p>If the <code>cache<\/code> argument is set to false, then the data will not be\ncached, and reading the data may bypass the cache. This is useful if the\ncaller is going to be doing its own caching. (It might not be cached if\nit's set to true either, that depends on the asset bundle\nimplementation.)<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; loadString(String key, { bool cache = true }) async {\n  final ByteData data = await load(key);\n  if (data == null)\n    throw FlutterError('Unable to load asset: $key');\n  if (data.lengthInBytes &lt; 10 * 1024) {\n    \/\/ 10KB takes about 3ms to parse on a Pixel 2 XL.\n    \/\/ See: https:\/\/github.com\/dart-lang\/sdk\/issues\/31954\n    return utf8.decode(data.buffer.asUint8List());\n  }\n  return compute(_utf8decode, data, debugLabel: 'UTF8 decode for \"$key\"');\n}<\/code><\/pre>\n    ",
            "href": "services\/AssetBundle\/loadString.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.String>",
            "name": "loadString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.AssetBundle",
            "params": [
                {
                    "name": "cache",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Retrieve a string from the asset bundle, parse it with the given function,\nand return the function's result.<\/p>\n<p>Implementations may cache the result, so a particular key should only be\nused with one parser for the lifetime of the asset bundle.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; loadStructuredData&lt;T&gt;(String key, Future&lt;T&gt; parser(String value));<\/code><\/pre>\n    ",
            "href": "services\/AssetBundle\/loadStructuredData.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "loadStructuredData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.AssetBundle",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}()';<\/code><\/pre>\n    ",
            "href": "services\/AssetBundle\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.AssetBundle",
            "params": []
        }
    ],
    "props": []
}