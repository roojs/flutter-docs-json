{
    "name": "painting.LinearGradient",
    "extends": [
        "painting.Gradient",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/LinearGradient\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final LinearGradient typedOther = other;\n  if (begin != typedOther.begin ||\n      end != typedOther.end ||\n      tileMode != typedOther.tileMode ||\n      colors?.length != typedOther.colors?.length ||\n      stops?.length != typedOther.stops?.length)\n    return false;\n  if (colors != null) {\n    assert(typedOther.colors != null);\n    assert(colors.length == typedOther.colors.length);\n    for (int i = 0; i &lt; colors.length; i += 1) {\n      if (colors[i] != typedOther.colors[i])\n        return false;\n    }\n  }\n  if (stops != null) {\n    assert(typedOther.stops != null);\n    assert(stops.length == typedOther.stops.length);\n    for (int i = 0; i &lt; stops.length; i += 1) {\n      if (stops[i] != typedOther.stops[i])\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinearGradient",
            "type": "",
            "desc": "<p>Creates a linear gradient.<\/p>\n<p>The <code>colors<\/code> argument must not be null. If <code>stops<\/code> is non-null, it must\nhave the same length as <code>colors<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "begin",
                    "type": "painting.AlignmentGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "painting.AlignmentGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colors",
                    "type": "dart:core.List<dart:ui.Color>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Color"
                    ]
                },
                {
                    "name": "stops",
                    "type": "dart:core.List<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/LinearGradient\/LinearGradient.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LinearGradient({\n  this.begin = Alignment.centerLeft,\n  this.end = Alignment.centerRight,\n  @required List&lt;Color&gt; colors,\n  List&lt;double&gt; stops,\n  this.tileMode = TileMode.clamp,\n}) : assert(begin != null),\n     assert(end != null),\n     assert(tileMode != null),\n     super(colors: colors, stops: stops);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createShader",
            "type": "dart:ui.Shader",
            "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/createShader.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShader createShader(Rect rect, { TextDirection textDirection }) {\n  return ui.Gradient.linear(\n    begin.resolve(textDirection).withinRect(rect),\n    end.resolve(textDirection).withinRect(rect),\n    colors, _impliedStops(), tileMode,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.LinearGradient",
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>s.<\/p>\n<p>If either gradient is null, this function linearly interpolates from a\na gradient that matches the other gradient in <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a>, <a href=\"painting\/LinearGradient\/end.html\">end<\/a>, <a href=\"painting\/Gradient\/stops.html\">stops<\/a> and\n<a href=\"painting\/LinearGradient\/tileMode.html\">tileMode<\/a> and with the same <a href=\"painting\/Gradient\/colors.html\">colors<\/a> but transparent (using <a href=\"painting\/LinearGradient\/scale.html\">scale<\/a>).<\/p>\n<p>If neither gradient is null, they must have the same number of <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents a position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.LinearGradient",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.LinearGradient",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static LinearGradient lerp(LinearGradient a, LinearGradient b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  final _ColorsAndStops interpolated = _interpolateColorsAndStops(\n      a.colors,\n      a._impliedStops(),\n      b.colors,\n      b._impliedStops(),\n      t,\n  );\n  return LinearGradient(\n    begin: AlignmentGeometry.lerp(a.begin, b.begin, t),\n    end: AlignmentGeometry.lerp(a.end, b.end, t),\n    colors: interpolated.colors,\n    stops: interpolated.stops,\n    tileMode: t &lt; 0.5 ? a.tileMode : b.tileMode, \/\/ TODO(ianh): interpolate tile mode\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpFrom",
            "type": "painting.Gradient",
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/LinearGradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/LinearGradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/LinearGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/LinearGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.Gradient",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/lerpFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null || (a is LinearGradient))\n    return LinearGradient.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpTo",
            "type": "painting.Gradient",
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/LinearGradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/LinearGradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/LinearGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/LinearGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "painting.Gradient",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/lerpTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpTo(Gradient b, double t) {\n  if (b == null || (b is LinearGradient))\n    return LinearGradient.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "scale",
            "type": "painting.LinearGradient",
            "desc": "<p>Returns a new <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> with its colors scaled by the given factor.<\/p>\n<p>Since the alpha component of the Color is what is scaled, a factor\nof 0.0 or less results in a gradient that is fully transparent.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [
                {
                    "name": "factor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLinearGradient scale(double factor) {\n  return LinearGradient(\n    begin: begin,\n    end: end,\n    colors: colors.map&lt;Color&gt;((Color color) =&gt; Color.lerp(null, color, factor)).toList(),\n    stops: stops,\n    tileMode: tileMode,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.LinearGradient",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/LinearGradient\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($begin, $end, $colors, $stops, $tileMode)';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "begin",
            "type": "painting.AlignmentGeometry",
            "types": [],
            "desc": "<p>The offset at which stop 0.0 of the gradient is placed.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>For example, a begin offset of (-1.0, 0.0) is half way down the\nleft side of the box.<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the\nleft in left-to-right contexts and the right in right-to-left contexts. If\na text-direction-dependent value is provided here, then the <a href=\"painting\/LinearGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
            "memberOf": "painting.LinearGradient",
            "isConstant": false,
            "href": "painting\/LinearGradient\/begin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry begin\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "end",
            "type": "painting.AlignmentGeometry",
            "types": [],
            "desc": "<p>The offset at which stop 1.0 of the gradient is placed.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>For example, a begin offset of (1.0, 0.0) is half way down the\nright side of the box.<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the left in\nleft-to-right contexts and the right in right-to-left contexts. If a\ntext-direction-dependent value is provided here, then the <a href=\"painting\/LinearGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
            "memberOf": "painting.LinearGradient",
            "isConstant": false,
            "href": "painting\/LinearGradient\/end.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry end\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/LinearGradient\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.LinearGradient",
            "isConstant": false,
            "href": "painting\/LinearGradient\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(begin, end, tileMode, hashList(colors), hashList(stops));<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tileMode",
            "type": "dart:ui.TileMode",
            "types": [],
            "desc": "<p>How this gradient should tile the plane beyond in the region before\n<a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> and after <a href=\"painting\/LinearGradient\/end.html\">end<\/a>.<\/p>\n<p>For details, see <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_linear.png\"><\/p>\n        ",
            "memberOf": "painting.LinearGradient",
            "isConstant": false,
            "href": "painting\/LinearGradient\/tileMode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TileMode tileMode\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/LinearGradient-class.html",
    "desc": "<p>A 2D linear gradient.<\/p>\n<p>This class is used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> to represent linear gradients. This\nabstracts out the arguments to the <a href=\"dart-ui\/Gradient\/Gradient.linear.html\">new ui.Gradient.linear<\/a> constructor from\nthe <code>dart:ui<\/code> library.<\/p>\n<p>A gradient has two anchor points, <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> and <a href=\"painting\/LinearGradient\/end.html\">end<\/a>. The <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> point\ncorresponds to 0.0, and the <a href=\"painting\/LinearGradient\/end.html\">end<\/a> point corresponds to 1.0. These points are\nexpressed in fractions, so that the same gradient can be reused with varying\nsized boxes without changing the parameters. (This contrasts with <a href=\"dart-ui\/Gradient\/Gradient.linear.html\">new\nui.Gradient.linear<\/a>, whose arguments are expressed in logical pixels.)<\/p>\n<p>The <a href=\"painting\/Gradient\/colors.html\">colors<\/a> are described by a list of <a href=\"dart-ui\/Color-class.html\">Color<\/a> objects. There must be at\nleast two colors. The <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list, if specified, must have the same length\nas <a href=\"painting\/Gradient\/colors.html\">colors<\/a>. It specifies fractions of the vector from start to end, between\n0.0 and 1.0, for each color. If it is null, a uniform distribution is\nassumed.<\/p>\n<p>The region of the canvas before <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> and after <a href=\"painting\/LinearGradient\/end.html\">end<\/a> is colored according\nto <a href=\"painting\/LinearGradient\/tileMode.html\">tileMode<\/a>.<\/p>\n<p>Typically this class is used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which does the painting.\nTo use a <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> to paint on a canvas directly, see <a href=\"painting\/LinearGradient\/createShader.html\">createShader<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample draws a picture that looks like vertical window shades by having\na <a href=\"widgets\/Container-class.html\">Container<\/a> display a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with a <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: BoxDecoration(\n    gradient: LinearGradient(\n      begin: Alignment.topLeft,\n      end: Alignment(0.8, 0.0), \/\/ 10% of the width, so there are ten blinds.\n      colors: [const Color(0xFFFFFFEE), const Color(0xFF999999)], \/\/ whitish to gray\n      tileMode: TileMode.repeated, \/\/ repeats the gradient over the canvas\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, which displays a gradient in concentric circles, and\nhas an example which shows a different way to use <a href=\"painting\/Gradient-class.html\">Gradient<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>, which displays a gradient in a sweeping arc around a\ncenter point.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which can take a <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> in its\n<a href=\"painting\/BoxDecoration\/gradient.html\">BoxDecoration.gradient<\/a> property.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LinearGradient"
}