{
    "name": "dart:core.Iterator",
    "extends": [],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "Iterator",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:core.Iterator",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-core\/Iterator\/Iterator.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "moveNext",
            "type": "dart:core.bool",
            "desc": "<p>Moves to the next element.<\/p>\n<p>Returns true if <a href=\"dart-core\/Iterator\/current.html\">current<\/a> contains the next element.\nReturns false if no elements are left.<\/p>\n<p>It is safe to invoke <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> even when the iterator is already\npositioned after the last element.\nIn this case <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> returns false again and has no effect.<\/p>\n<p>A call to <code>moveNext<\/code> may throw if iteration has been broken by\nchanging the underlying collection.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.Iterator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/Iterator\/moveNext.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool moveNext();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "current",
            "type": "",
            "types": [],
            "desc": "<p>Returns the current element.<\/p>\n<p>Returns <code>null<\/code> if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved past the last element of the\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The <code>current<\/code> getter should keep its value until the next call to\n<a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a>, even if an underlying collection changes.\nAfter a successful call to <code>moveNext<\/code>, the user doesn't need to cache\nthe current value, but can keep reading it from the iterator.<\/p>\n        ",
            "memberOf": "dart:core.Iterator",
            "isConstant": false,
            "href": "dart-core\/Iterator\/current.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get current;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "quiver.iterables.EnumerateIterator"
    ],
    "realImplementors": [
        "quiver.iterables.EnumerateIterator"
    ],
    "cn": [],
    "href": "dart-core\/Iterator-class.html",
    "desc": "<p>An interface for getting items, one at a time, from an object.<\/p>\n<p>The for-in construct transparently uses <code>Iterator<\/code> to test for the end\nof the iteration, and to get each item (or <em>element<\/em>).<\/p>\n<p>If the object iterated over is changed during the iteration, the\nbehavior is unspecified.<\/p>\n<p>The <code>Iterator<\/code> is initially positioned before the first element.\nBefore accessing the first element the iterator must thus be advanced using\n<a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> to point to the first element.\nIf no element is left, then <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> returns false, <a href=\"dart-core\/Iterator\/current.html\">current<\/a>\nreturns <code>null<\/code>, and all further calls to <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> will also return false.<\/p>\n<p>A typical usage of an Iterator looks as follows:<\/p>\n<pre class=\"language-dart\"><code>var it = obj.iterator;\nwhile (it.moveNext()) {\n  use(it.current);\n}\n<\/code><\/pre>\n<p><strong>See also:<\/strong>\n<a href=\"http:\/\/www.dartlang.org\/docs\/dart-up-and-running\/contents\/ch03.html#iteration\">Iteration<\/a>\nin the <a href=\"http:\/\/www.dartlang.org\/docs\/dart-up-and-running\/contents\/ch03.html\">library tour<\/a><\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Iterator"
}