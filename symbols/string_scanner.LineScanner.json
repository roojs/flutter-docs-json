{
    "name": "string_scanner.LineScanner",
    "extends": [
        "string_scanner.StringScanner",
        "dart:core.Object"
    ],
    "memberOf": "string_scanner",
    "events": [],
    "methods": [
        {
            "name": "LineScanner",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "string_scanner.LineScanner",
            "sig": "",
            "params": [
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sourceUrl",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-string_scanner_string_scanner\/LineScanner\/LineScanner.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LineScanner(String string, {sourceUrl, int position})\n    : super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "readChar",
            "type": "dart:core.int",
            "desc": "<p>Consumes a single character and returns its character code.<\/p>\n<p>This throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the string has been fully consumed. It\ndoesn't affect <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.LineScanner",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/readChar.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readChar() {\n  var character = super.readChar();\n  _adjustLineAndColumn(character);\n  return character;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "scan",
            "type": "dart:core.bool",
            "desc": "<p>If <code>pattern<\/code> matches at the current position of the string, scans forward\nuntil the end of the match.<\/p>\n<p>Returns whether or not <code>pattern<\/code> matched.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.LineScanner",
            "sig": "",
            "params": [
                {
                    "name": "pattern",
                    "type": "dart:core.Pattern",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/scan.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scan(Pattern pattern) {\n  if (!super.scan(pattern)) return false;\n\n  var newlines = _newlinesIn(lastMatch[0]);\n  _line += newlines.length;\n  if (newlines.isEmpty) {\n    _column += lastMatch[0].length;\n  } else {\n    _column = lastMatch[0].length - newlines.last.end;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "scanChar",
            "type": "dart:core.bool",
            "desc": "<p>If the next character in the string is <code>character<\/code>, consumes it.<\/p>\n<p>Returns whether or not <code>character<\/code> was consumed.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.LineScanner",
            "sig": "",
            "params": [
                {
                    "name": "character",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/scanChar.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool scanChar(int character) {\n  if (!super.scanChar(character)) return false;\n  _adjustLineAndColumn(character);\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "column",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
            "memberOf": "string_scanner.LineScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/column.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _column;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "line",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
            "memberOf": "string_scanner.LineScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/line.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _line;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "position",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The current position of the scanner in the string, in characters.<\/p>\n        ",
            "memberOf": "string_scanner.LineScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/position.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get position =&gt; _position;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "state",
            "type": "string_scanner.LineScannerState",
            "types": [],
            "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
            "memberOf": "string_scanner.LineScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/LineScanner\/state.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt;\n    new LineScannerState._(this, position, line, column);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-string_scanner_string_scanner\/LineScanner-class.html",
    "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/StringScanner-class.html\">StringScanner<\/a> that tracks line and column information.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LineScanner"
}