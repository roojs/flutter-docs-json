{
    "name": "dart:core.StackTrace",
    "extends": [],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "StackTrace",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:core.StackTrace",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-core\/StackTrace\/StackTrace.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StackTrace();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StackTrace.fromString",
            "type": "",
            "desc": "<p>Create a <code>StackTrace<\/code> object from <code>stackTraceString<\/code>.<\/p>\n<p>The created stack trace will have a <code>toString<\/code> method returning\n<code>stackTraceString<\/code>.<\/p>\n<p>The <code>stackTraceString<\/code> can be a string returned by some other\nstack trace, or it can be any string at all.\nIf the string doesn't look like a stack trace, code that interprets\nstack traces is likely to fail, so fake stack traces should be used\nwith care.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.StackTrace",
            "sig": "",
            "params": [
                {
                    "name": "stackTraceString",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/StackTrace\/StackTrace.fromString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StackTrace.fromString(String stackTraceString) = _StringStackTrace;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a <a href=\"dart-core\/String-class.html\">String<\/a> representation of the stack trace.<\/p>\n<p>The string represents the full stack trace starting from\nthe point where a throw occurred to the top of the current call sequence.<\/p>\n<p>The exact format of the string representation is not final.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.StackTrace",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/StackTrace\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "current",
            "type": "dart:core.StackTrace",
            "types": [],
            "desc": "<p>Returns a representation of the current stack trace.<\/p>\n<p>This is similar to what can be achieved by doing:<\/p>\n<pre class=\"language-dart\"><code>try { throw 0; } catch (_, stack) { return stack; }\n<\/code><\/pre>\n<p>The getter achieves this without throwing, except on platforms that\nhave no other way to get a stack trace.<\/p>\n        ",
            "memberOf": "dart:core.StackTrace",
            "isConstant": false,
            "href": "dart-core\/StackTrace\/current.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static StackTrace get current;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-core\/StackTrace-class.html",
    "desc": "<p>An interface implemented by all stack trace objects.<\/p>\n<p>A <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a> is intended to convey information to the user about the call\nsequence that triggered an exception.<\/p>\n<p>These objects are created by the runtime, it is not possible to create\nthem programmatically.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StackTrace"
}