{
    "desc": "<p>A material design app bar.<\/p>\n<p>An app bar consists of a toolbar and potentially other widgets, such as a\n<a href=\"material\/TabBar-class.html\">TabBar<\/a> and a <a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a>. App bars typically expose one or more\ncommon <a href=\"material\/AppBar\/actions.html\">actions<\/a> with <a href=\"material\/IconButton-class.html\">IconButton<\/a>s which are optionally followed by a\n<a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a> for less common operations (sometimes called the \"overflow\nmenu\").<\/p>\n<p>App bars are typically used in the <a href=\"material\/Scaffold\/appBar.html\">Scaffold.appBar<\/a> property, which places\nthe app bar as a fixed-height widget at the top of the screen. For a\nscrollable app bar, see <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, which embeds an <a href=\"material\/AppBar-class.html\">AppBar<\/a> in a sliver\nfor use in a <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/p>\n<p>The AppBar displays the toolbar widgets, <a href=\"material\/AppBar\/leading.html\">leading<\/a>, <a href=\"material\/AppBar\/title.html\">title<\/a>, and <a href=\"material\/AppBar\/actions.html\">actions<\/a>,\nabove the <a href=\"material\/AppBar\/bottom.html\">bottom<\/a> (if any). The <a href=\"material\/AppBar\/bottom.html\">bottom<\/a> is usually used for a <a href=\"material\/TabBar-class.html\">TabBar<\/a>. If\na <a href=\"material\/AppBar\/flexibleSpace.html\">flexibleSpace<\/a> widget is specified then it is stacked behind the toolbar\nand the bottom widget. The following diagram shows where each of these slots\nappears in the toolbar when the writing language is left-to-right (e.g.\nEnglish):<\/p>\n<p><img alt=\"The leading widget is in the top left, the actions are in the top right,\nthe title is between them. The bottom is, naturally, at the bottom, and the\nflexibleSpace is behind all of them.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/material\/app_bar.png\"><\/p>\n<p>If the <a href=\"material\/AppBar\/leading.html\">leading<\/a> widget is omitted, but the <a href=\"material\/AppBar-class.html\">AppBar<\/a> is in a <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> with\na <a href=\"material\/Drawer-class.html\">Drawer<\/a>, then a button will be inserted to open the drawer. Otherwise, if\nthe nearest <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> has any previous routes, a <a href=\"material\/BackButton-class.html\">BackButton<\/a> is inserted\ninstead. This behavior can be turned off by setting the <a href=\"material\/AppBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a>\nto false. In that case a null leading widget will result in the middle\/title widget\nstretching to start.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">AppBar(\n  title: Text('My Fancy Dress'),\n  actions: &lt;Widget&gt;[\n    IconButton(\n      icon: Icon(Icons.playlist_play),\n      tooltip: 'Air it',\n      onPressed: _airDress,\n    ),\n    IconButton(\n      icon: Icon(Icons.playlist_add),\n      tooltip: 'Restitch it',\n      onPressed: _restitchDress,\n    ),\n    IconButton(\n      icon: Icon(Icons.playlist_add_check),\n      tooltip: 'Repair it',\n      onPressed: _repairDress,\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, which displays the <a href=\"material\/AppBar-class.html\">AppBar<\/a> in its <a href=\"material\/Scaffold\/appBar.html\">Scaffold.appBar<\/a> slot.<\/li>\n<li>\n<a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, which uses <a href=\"material\/AppBar-class.html\">AppBar<\/a> to provide a flexible app bar that\ncan be used in a <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/li>\n<li>\n<a href=\"material\/TabBar-class.html\">TabBar<\/a>, which is typically placed in the <a href=\"material\/AppBar\/bottom.html\">bottom<\/a> slot of the <a href=\"material\/AppBar-class.html\">AppBar<\/a>\nif the screen has multiple pages arranged in tabs.<\/li>\n<li>\n<a href=\"material\/IconButton-class.html\">IconButton<\/a>, which is used with <a href=\"material\/AppBar\/actions.html\">actions<\/a> to show buttons on the app bar.<\/li>\n<li>\n<a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a>, to show a popup menu on the app bar, via <a href=\"material\/AppBar\/actions.html\">actions<\/a>.<\/li>\n<li>\n<a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a>, which is used with <a href=\"material\/AppBar\/flexibleSpace.html\">flexibleSpace<\/a> when the app bar\ncan expand and collapse.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/app-bars-top.html\">material.io\/design\/components\/app-bars-top.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/AppBar-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.AppBar",
    "shortname": "AppBar",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a material design app bar.<\/p>\n<p>The arguments <code>primary<\/code>, <code>toolbarOpacity<\/code>, <code>bottomOpacity<\/code>\nand <code>automaticallyImplyLeading<\/code> must not be null. Additionally, if\n<code>elevation<\/code> is specified, it must be non-negative.<\/p>\n<p>If <code>backgroundColor<\/code>, <code>elevation<\/code>, <code>brightness<\/code>, <code>iconTheme<\/code>,\n<code>actionsIconTheme<\/code>, or <code>textTheme<\/code> are null, then their <a href=\"material\/AppBarTheme-class.html\">AppBarTheme<\/a>\nvalues will be used. If the corresponding <a href=\"material\/AppBarTheme-class.html\">AppBarTheme<\/a> property is null,\nthen the default specified in the property's documentation will be used.<\/p>\n<p>Typically used in the <a href=\"material\/Scaffold\/appBar.html\">Scaffold.appBar<\/a> property.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AppBar({\n  Key key,\n  this.leading,\n  this.automaticallyImplyLeading = true,\n  this.title,\n  this.actions,\n  this.flexibleSpace,\n  this.bottom,\n  this.elevation,\n  this.shape,\n  this.backgroundColor,\n  this.brightness,\n  this.iconTheme,\n  this.actionsIconTheme,\n  this.textTheme,\n  this.primary = true,\n  this.centerTitle,\n  this.titleSpacing = NavigationToolbar.kMiddleSpacing,\n  this.toolbarOpacity = 1.0,\n  this.bottomOpacity = 1.0,\n}) : assert(automaticallyImplyLeading != null),\n     assert(elevation == null || elevation &gt;= 0.0),\n     assert(primary != null),\n     assert(titleSpacing != null),\n     assert(toolbarOpacity != null),\n     assert(bottomOpacity != null),\n     preferredSize = Size.fromHeight(kToolbarHeight + (bottom?.preferredSize?.height ?? 0.0)),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/AppBar\/AppBar.html",
            "isDeprecated": false,
            "type": "",
            "name": "AppBar",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.AppBar",
            "params": [
                {
                    "name": "actions",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "actionsIconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "automaticallyImplyLeading",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "bottom",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.PreferredSizeWidget"
                },
                {
                    "name": "bottomOpacity",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "brightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "centerTitle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "elevation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "flexibleSpace",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "iconTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.IconThemeData"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "leading",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "primary",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "shape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "textTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "title",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "titleSpacing",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "toolbarOpacity",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/AppBar\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_AppBarState createState() =&gt; _AppBarState();<\/code><\/pre>\n    ",
            "href": "material\/AppBar\/createState.html",
            "isDeprecated": false,
            "type": "<_AppBarState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.AppBar",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Widgets to display after the <a href=\"material\/AppBar\/title.html\">title<\/a> widget.<\/p>\n<p>Typically these widgets are <a href=\"material\/IconButton-class.html\">IconButton<\/a>s representing common operations.\nFor less common operations, consider using a <a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a> as the\nlast action.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis sample shows adding an action to an <a href=\"material\/AppBar-class.html\">AppBar<\/a> that opens a shopping cart.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Ready, Set, Shop!'),\n      actions: &lt;Widget&gt;[\n        IconButton(\n          icon: Icon(Icons.shopping_cart),\n          tooltip: 'Open shopping cart',\n          onPressed: () {\n            \/\/ Implement navigation to shopping cart page here...\n            print('Shopping cart opened.');\n          },\n        ),\n      ],\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.AppBar.actions.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.AppBar.actions.1\n\n\/\/ This sample shows adding an action to an [AppBar] that opens a shopping cart.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatelessWidget(),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Ready, Set, Shop!'),\n        actions: &lt;Widget&gt;[\n          IconButton(\n            icon: Icon(Icons.shopping_cart),\n            tooltip: 'Open shopping cart',\n            onPressed: () {\n              \/\/ Implement navigation to shopping cart page here...\n              print('Shopping cart opened.');\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; actions\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/actions.html",
            "name": "actions",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.Widget>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The color, opacity, and size to use for the icons that appear in the app\nbar's <a href=\"material\/AppBar\/actions.html\">actions<\/a>. This should only be used when the <a href=\"material\/AppBar\/actions.html\">actions<\/a> should be\nthemed differently than the icon that appears in the app bar's <a href=\"material\/AppBar\/leading.html\">leading<\/a>\nwidget.<\/p>\n<p>If this property is null, then <a href=\"material\/AppBar\/actionsIconTheme.html\">ThemeData.appBarTheme.actionsIconTheme<\/a> is\nused, if that is also null, then this falls back to <a href=\"material\/AppBar\/iconTheme.html\">iconTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IconThemeData actionsIconTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/actionsIconTheme.html",
            "name": "actionsIconTheme",
            "isDeprecated": false,
            "type": "widgets.IconThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>Controls whether we should try to imply the leading widget if null.<\/p>\n<p>If true and <a href=\"material\/AppBar\/leading.html\">leading<\/a> is null, automatically try to deduce what the leading\nwidget should be. If false and <a href=\"material\/AppBar\/leading.html\">leading<\/a> is null, leading space is given to <a href=\"material\/AppBar\/title.html\">title<\/a>.\nIf leading widget is not null, this parameter has no effect.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool automaticallyImplyLeading\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/automaticallyImplyLeading.html",
            "name": "automaticallyImplyLeading",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The color to use for the app bar's material. Typically this should be set\nalong with <a href=\"material\/AppBar\/brightness.html\">brightness<\/a>, <a href=\"material\/AppBar\/iconTheme.html\">iconTheme<\/a>, <a href=\"material\/AppBar\/textTheme.html\">textTheme<\/a>.<\/p>\n<p>If this property is null, then <code>ThemeData.appBarTheme.color<\/code> is used,\nif that is also null, then <a href=\"material\/ThemeData\/primaryColor.html\">ThemeData.primaryColor<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>This widget appears across the bottom of the app bar.<\/p>\n<p>Typically a <a href=\"material\/TabBar-class.html\">TabBar<\/a>. Only widgets that implement <a href=\"widgets\/PreferredSizeWidget-class.html\">PreferredSizeWidget<\/a> can\nbe used at the bottom of an app bar.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/PreferredSize-class.html\">PreferredSize<\/a>, which can be used to give an arbitrary widget a preferred size.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PreferredSizeWidget bottom\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/bottom.html",
            "name": "bottom",
            "isDeprecated": false,
            "type": "widgets.PreferredSizeWidget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>How opaque the bottom part of the app bar is.<\/p>\n<p>A value of 1.0 is fully opaque, and a value of 0.0 is fully transparent.<\/p>\n<p>Typically, this value is not changed from its default value (1.0). It is\nused by <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a> to animate the opacity of the toolbar when the app\nbar is scrolled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottomOpacity\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/bottomOpacity.html",
            "name": "bottomOpacity",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The brightness of the app bar's material. Typically this is set along\nwith <a href=\"material\/AppBar\/backgroundColor.html\">backgroundColor<\/a>, <a href=\"material\/AppBar\/iconTheme.html\">iconTheme<\/a>, <a href=\"material\/AppBar\/textTheme.html\">textTheme<\/a>.<\/p>\n<p>If this property is null, then <a href=\"material\/AppBar\/brightness.html\">ThemeData.appBarTheme.brightness<\/a> is used,\nif that is also null, then <a href=\"material\/ThemeData\/primaryColorBrightness.html\">ThemeData.primaryColorBrightness<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness brightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/brightness.html",
            "name": "brightness",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>Whether the title should be centered.<\/p>\n<p>Defaults to being adapted to the current <a href=\"foundation\/TargetPlatform-class.html\">TargetPlatform<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool centerTitle\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/centerTitle.html",
            "name": "centerTitle",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this app bar relative to its parent.<\/p>\n<p>This controls the size of the shadow below the app bar.<\/p>\n<p>The value is non-negative.<\/p>\n<p>If this property is null, then <a href=\"material\/AppBar\/elevation.html\">ThemeData.appBarTheme.elevation<\/a> is used,\nif that is also null, the default value is 4, the appropriate elevation\nfor app bars.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/elevation.html",
            "name": "elevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>This widget is stacked behind the toolbar and the tab bar. It's height will\nbe the same as the app bar's overall height.<\/p>\n<p>A flexible space isn't actually flexible unless the <a href=\"material\/AppBar-class.html\">AppBar<\/a>'s container\nchanges the <a href=\"material\/AppBar-class.html\">AppBar<\/a>'s size. A <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a> in a <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>\nchanges the <a href=\"material\/AppBar-class.html\">AppBar<\/a>'s height when scrolled.<\/p>\n<p>Typically a <a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a>. See <a href=\"material\/FlexibleSpaceBar-class.html\">FlexibleSpaceBar<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget flexibleSpace\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/flexibleSpace.html",
            "name": "flexibleSpace",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The color, opacity, and size to use for app bar icons. Typically this\nis set along with <a href=\"material\/AppBar\/backgroundColor.html\">backgroundColor<\/a>, <a href=\"material\/AppBar\/brightness.html\">brightness<\/a>, <a href=\"material\/AppBar\/textTheme.html\">textTheme<\/a>.<\/p>\n<p>If this property is null, then <a href=\"material\/AppBar\/iconTheme.html\">ThemeData.appBarTheme.iconTheme<\/a> is used,\nif that is also null, then <a href=\"material\/ThemeData\/primaryIconTheme.html\">ThemeData.primaryIconTheme<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IconThemeData iconTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/iconTheme.html",
            "name": "iconTheme",
            "isDeprecated": false,
            "type": "widgets.IconThemeData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>A widget to display before the <a href=\"material\/AppBar\/title.html\">title<\/a>.<\/p>\n<p>If this is null and <a href=\"material\/AppBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is set to true, the\n<a href=\"material\/AppBar-class.html\">AppBar<\/a> will imply an appropriate widget. For example, if the <a href=\"material\/AppBar-class.html\">AppBar<\/a> is\nin a <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> that also has a <a href=\"material\/Drawer-class.html\">Drawer<\/a>, the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> will fill this\nwidget with an <a href=\"material\/IconButton-class.html\">IconButton<\/a> that opens the drawer (using <a href=\"material\/Icons\/menu-constant.html\">Icons.menu<\/a>). If\nthere's no <a href=\"material\/Drawer-class.html\">Drawer<\/a> and the parent <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> can go back, the <a href=\"material\/AppBar-class.html\">AppBar<\/a>\nwill use a <a href=\"material\/BackButton-class.html\">BackButton<\/a> that calls <a href=\"widgets\/Navigator\/maybePop.html\">Navigator.maybePop<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code shows how the drawer button could be manually specified\ninstead of relying on <a href=\"material\/AppBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">AppBar(\n  leading: Builder(\n    builder: (BuildContext context) {\n      return IconButton(\n        icon: const Icon(Icons.menu),\n        onPressed: () { Scaffold.of(context).openDrawer(); },\n        tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,\n      );\n    },\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The <a href=\"widgets\/Builder-class.html\">Builder<\/a> is used in this example to ensure that the <code>context<\/code> refers\nto that part of the subtree. That way this code snippet can be used even\ninside the very code that is creating the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> (in which case,\nwithout the <a href=\"widgets\/Builder-class.html\">Builder<\/a>, the <code>context<\/code> wouldn't be able to see the\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a>, since it would refer to an ancestor of that widget).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Scaffold\/appBar.html\">Scaffold.appBar<\/a>, in which an <a href=\"material\/AppBar-class.html\">AppBar<\/a> is usually placed.<\/li>\n<li>\n<a href=\"material\/Scaffold\/drawer.html\">Scaffold.drawer<\/a>, in which the <a href=\"material\/Drawer-class.html\">Drawer<\/a> is usually placed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget leading\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/leading.html",
            "name": "leading",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>A size whose height is the sum of <a href=\"material\/kToolbarHeight-constant.html\">kToolbarHeight<\/a> and the <a href=\"material\/AppBar\/bottom.html\">bottom<\/a> widget's\npreferred height.<\/p>\n<p><a href=\"material\/Scaffold-class.html\">Scaffold<\/a> uses this this size to set its app bar's height.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size preferredSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/preferredSize.html",
            "name": "preferredSize",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>Whether this app bar is being displayed at the top of the screen.<\/p>\n<p>If true, the app bar's toolbar elements and <a href=\"material\/AppBar\/bottom.html\">bottom<\/a> widget will be\npadded on top by the height of the system status bar. The layout\nof the <a href=\"material\/AppBar\/flexibleSpace.html\">flexibleSpace<\/a> is not affected by the <a href=\"material\/AppBar\/primary.html\">primary<\/a> property.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool primary\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/primary.html",
            "name": "primary",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The material's shape as well its shadow.<\/p>\n<p>A shadow is only displayed if the <a href=\"material\/AppBar\/elevation.html\">elevation<\/a> is greater than\nzero.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/shape.html",
            "name": "shape",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The typographic styles to use for text in the app bar. Typically this is\nset along with <a href=\"material\/AppBar\/brightness.html\">brightness<\/a> <a href=\"material\/AppBar\/backgroundColor.html\">backgroundColor<\/a>, <a href=\"material\/AppBar\/iconTheme.html\">iconTheme<\/a>.<\/p>\n<p>If this property is null, then <a href=\"material\/AppBar\/textTheme.html\">ThemeData.appBarTheme.textTheme<\/a> is used,\nif that is also null, then <a href=\"material\/ThemeData\/primaryTextTheme.html\">ThemeData.primaryTextTheme<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme textTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/textTheme.html",
            "name": "textTheme",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The primary widget displayed in the appbar.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget containing a description of the current contents\nof the app.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/title.html",
            "name": "title",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>The spacing around <a href=\"material\/AppBar\/title.html\">title<\/a> content on the horizontal axis. This spacing is\napplied even if there is no <a href=\"material\/AppBar\/leading.html\">leading<\/a> content or <a href=\"material\/AppBar\/actions.html\">actions<\/a>. If you want\n<a href=\"material\/AppBar\/title.html\">title<\/a> to take all the space available, set this value to 0.0.<\/p>\n<p>Defaults to <a href=\"widgets\/NavigationToolbar\/kMiddleSpacing-constant.html\">NavigationToolbar.kMiddleSpacing<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double titleSpacing\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/titleSpacing.html",
            "name": "titleSpacing",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        },
        {
            "desc": "<p>How opaque the toolbar part of the app bar is.<\/p>\n<p>A value of 1.0 is fully opaque, and a value of 0.0 is fully transparent.<\/p>\n<p>Typically, this value is not changed from its default value (1.0). It is\nused by <a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a> to animate the opacity of the toolbar when the app\nbar is scrolled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double toolbarOpacity\n\n<\/code><\/pre>\n        ",
            "href": "material\/AppBar\/toolbarOpacity.html",
            "name": "toolbarOpacity",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.AppBar",
            "params": []
        }
    ]
}