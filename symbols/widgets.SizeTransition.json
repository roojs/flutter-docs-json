{
    "name": "widgets.SizeTransition",
    "extends": [
        "widgets.AnimatedWidget",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "SizeTransition",
            "type": "",
            "desc": "<p>Creates a size transition.<\/p>\n<p>The <code>axis<\/code>, <code>sizeFactor<\/code>, and <code>axisAlignment<\/code> arguments must not be null.\nThe <code>axis<\/code> argument defaults to <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>. The <code>axisAlignment<\/code>\ndefaults to 0.0, which centers the child along the main axis during the\ntransition.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.SizeTransition",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "axis",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sizeFactor",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "axisAlignment",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/SizeTransition\/SizeTransition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SizeTransition({\n  Key key,\n  this.axis = Axis.vertical,\n  @required Animation&lt;double&gt; sizeFactor,\n  this.axisAlignment = 0.0,\n  this.child,\n}) : assert(axis != null),\n     assert(sizeFactor != null),\n     assert(axisAlignment != null),\n     super(key: key, listenable: sizeFactor);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to build widgets that depend on the state of the\nlistenable (e.g., the current value of the animation).<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.SizeTransition",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/SizeTransition\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  AlignmentDirectional alignment;\n  if (axis == Axis.vertical)\n    alignment = AlignmentDirectional(-1.0, axisAlignment);\n  else\n    alignment = AlignmentDirectional(axisAlignment, -1.0);\n  return ClipRect(\n    child: Align(\n      alignment: alignment,\n      heightFactor: axis == Axis.vertical ? math.max(sizeFactor.value, 0.0) : null,\n      widthFactor: axis == Axis.horizontal ? math.max(sizeFactor.value, 0.0) : null,\n      child: child,\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "axis",
            "type": "painting.Axis",
            "types": [],
            "desc": "<p><a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a> if <a href=\"widgets\/SizeTransition\/sizeFactor.html\">sizeFactor<\/a> modifies the width, otherwise\n<a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n        ",
            "memberOf": "widgets.SizeTransition",
            "isConstant": false,
            "href": "widgets\/SizeTransition\/axis.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis axis\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "axisAlignment",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Describes how to align the child along the axis that <a href=\"widgets\/SizeTransition\/sizeFactor.html\">sizeFactor<\/a> is\nmodifying.<\/p>\n<p>A value of -1.0 indicates the top when <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and the\nstart when <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>. The start is on the left when the\ntext direction in effect is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> and on the right when it\nis <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>.<\/p>\n<p>A value of 1.0 indicates the bottom or end, depending upon the <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a>.<\/p>\n<p>A value of 0.0 (the default) indicates the center for either <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a> value.<\/p>\n        ",
            "memberOf": "widgets.SizeTransition",
            "isConstant": false,
            "href": "widgets\/SizeTransition\/axisAlignment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double axisAlignment\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "widgets.SizeTransition",
            "isConstant": false,
            "href": "widgets\/SizeTransition\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "sizeFactor",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation that controls the (clipped) size of the child.<\/p>\n<p>The width or height (depending on the <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a> value) of this widget will be\nits intrinsic width or height multiplied by <a href=\"widgets\/SizeTransition\/sizeFactor.html\">sizeFactor<\/a>'s value at the\ncurrent point in the animation.<\/p>\n<p>If the value of <a href=\"widgets\/SizeTransition\/sizeFactor.html\">sizeFactor<\/a> is less than one, the child will be clipped\nin the appropriate axis.<\/p>\n        ",
            "memberOf": "widgets.SizeTransition",
            "isConstant": false,
            "href": "widgets\/SizeTransition\/sizeFactor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get sizeFactor =&gt; listenable;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/SizeTransition-class.html",
    "desc": "<p>Animates its own size and clips and aligns its child.<\/p>\n<p><a href=\"widgets\/SizeTransition-class.html\">SizeTransition<\/a> acts as a <a href=\"widgets\/ClipRect-class.html\">ClipRect<\/a> that animates either its width or its\nheight, depending upon the value of <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a>. The alignment of the child along\nthe <a href=\"widgets\/SizeTransition\/axis.html\">axis<\/a> is specified by the <a href=\"widgets\/SizeTransition\/axisAlignment.html\">axisAlignment<\/a>.<\/p>\n<p>Like most widgets, <a href=\"widgets\/SizeTransition-class.html\">SizeTransition<\/a> will conform to the constraints it is\ngiven, so be sure to put it in a context where it can change size. For\ninstance, if you place it into a <a href=\"widgets\/Container-class.html\">Container<\/a> with a fixed size, then the\n<a href=\"widgets\/SizeTransition-class.html\">SizeTransition<\/a> will not be able to change size, and will appear to do\nnothing.<\/p>\n<p>Here's an illustration of the <a href=\"widgets\/SizeTransition-class.html\">SizeTransition<\/a> widget, with it's <a href=\"widgets\/SizeTransition\/sizeFactor.html\">sizeFactor<\/a>\nanimated by a <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> set to <a href=\"animation\/Curves\/fastOutSlowIn-constant.html\">Curves.fastOutSlowIn<\/a>:<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:300px;\n              height:378px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:300px; height:378px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/widgets\/size_transition.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a>, for a widget that automatically animates between\nthe sizes of two children, fading between them.<\/li>\n<li>\n<a href=\"widgets\/ScaleTransition-class.html\">ScaleTransition<\/a>, a widget that scales the size of the child instead of\nclipping it.<\/li>\n<li>\n<a href=\"widgets\/PositionedTransition-class.html\">PositionedTransition<\/a>, a widget that animates its child from a start\nposition to an end position over the lifetime of the animation.<\/li>\n<li>\n<a href=\"widgets\/RelativePositionedTransition-class.html\">RelativePositionedTransition<\/a>, a widget that transitions its child's\nposition based on the value of a rectangle relative to a bounding box.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SizeTransition"
}