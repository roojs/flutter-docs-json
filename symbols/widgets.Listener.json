{
    "name": "widgets.Listener",
    "extends": [
        "widgets.SingleChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [
        {
            "name": "onPointerCancel",
            "type": "rendering.PointerCancelEventListener",
            "desc": "<p>Called when the input from a pointer that triggered an <a href=\"widgets\/Listener\/onPointerDown.html\">onPointerDown<\/a> is\nno longer directed towards this receiver.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerCancel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerCancelEventListener onPointerCancel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerDown",
            "type": "rendering.PointerDownEventListener",
            "desc": "<p>Called when a pointer comes into contact with the screen (for touch\npointers), or has its button pressed (for mouse pointers) at this widget's\nlocation.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerDownEventListener onPointerDown\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerEnter",
            "type": "gestures.PointerEnterEventListener",
            "desc": "<p>Called when a pointer enters the region for this widget.<\/p>\n<p>This is only fired for pointers which report their location when not down\n(e.g. mouse pointers, but not most touch pointers).<\/p>\n<p>If this is a mouse pointer, this will fire when the mouse pointer enters\nthe region defined by this widget, or when the widget appears under the\npointer.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerEnter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerEnterEventListener onPointerEnter\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerExit",
            "type": "gestures.PointerExitEventListener",
            "desc": "<p>Called when a pointer leaves the region for this widget.<\/p>\n<p>This is only fired for pointers which report their location when not down\n(e.g. mouse pointers, but not most touch pointers).<\/p>\n<p>If this is a mouse pointer, this will fire when the mouse pointer leaves\nthe region defined by this widget, or when the widget disappears from\nunder the pointer.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerExit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerExitEventListener onPointerExit\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerHover",
            "type": "gestures.PointerHoverEventListener",
            "desc": "<p>Called when a pointer that has not triggered an <a href=\"widgets\/Listener\/onPointerDown.html\">onPointerDown<\/a> changes\nposition.<\/p>\n<p>This is only fired for pointers which report their location when not down\n(e.g. mouse pointers, but not most touch pointers).<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerHover.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerHoverEventListener onPointerHover\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerMove",
            "type": "rendering.PointerMoveEventListener",
            "desc": "<p>Called when a pointer that triggered an <a href=\"widgets\/Listener\/onPointerDown.html\">onPointerDown<\/a> changes position.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerMove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerMoveEventListener onPointerMove\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerSignal",
            "type": "rendering.PointerSignalEventListener",
            "desc": "<p>Called when a pointer signal occurs over this object.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerSignal.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerSignalEventListener onPointerSignal\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPointerUp",
            "type": "rendering.PointerUpEventListener",
            "desc": "<p>Called when a pointer that triggered an <a href=\"widgets\/Listener\/onPointerDown.html\">onPointerDown<\/a> is no longer in\ncontact with the screen.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/Listener\/onPointerUp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PointerUpEventListener onPointerUp\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "Listener",
            "type": "",
            "desc": "<p>Creates a widget that forwards point events to callbacks.<\/p>\n<p>The <code>behavior<\/code> argument defaults to <a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.deferToChild<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Listener",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerDown",
                    "type": "rendering.PointerDownEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerMove",
                    "type": "rendering.PointerMoveEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerEnter",
                    "type": "gestures.PointerEnterEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerExit",
                    "type": "gestures.PointerExitEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerHover",
                    "type": "gestures.PointerHoverEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerUp",
                    "type": "rendering.PointerUpEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerCancel",
                    "type": "rendering.PointerCancelEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPointerSignal",
                    "type": "rendering.PointerSignalEventListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "behavior",
                    "type": "rendering.HitTestBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/Listener\/Listener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Listener({\n  Key key,\n  this.onPointerDown,\n  this.onPointerMove,\n  this.onPointerEnter,\n  this.onPointerExit,\n  this.onPointerHover,\n  this.onPointerUp,\n  this.onPointerCancel,\n  this.onPointerSignal,\n  this.behavior = HitTestBehavior.deferToChild,\n  Widget child,\n}) : assert(behavior != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderPointerListener",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Listener",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/Listener\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderPointerListener createRenderObject(BuildContext context) {\n  return RenderPointerListener(\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerEnter: onPointerEnter,\n    onPointerHover: onPointerHover,\n    onPointerExit: onPointerExit,\n    onPointerUp: onPointerUp,\n    onPointerCancel: onPointerCancel,\n    onPointerSignal: onPointerSignal,\n    behavior: behavior,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Listener\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Listener",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/Listener\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final List&lt;String&gt; listeners = &lt;String&gt;[];\n  if (onPointerDown != null)\n    listeners.add('down');\n  if (onPointerMove != null)\n    listeners.add('move');\n  if (onPointerEnter != null)\n    listeners.add('enter');\n  if (onPointerExit != null)\n    listeners.add('exit');\n  if (onPointerHover != null)\n    listeners.add('hover');\n  if (onPointerUp != null)\n    listeners.add('up');\n  if (onPointerCancel != null)\n    listeners.add('cancel');\n  if (onPointerSignal != null)\n    listeners.add('signal');\n  properties.add(IterableProperty&lt;String&gt;('listeners', listeners, ifEmpty: '&lt;none&gt;'));\n  properties.add(EnumProperty&lt;HitTestBehavior&gt;('behavior', behavior));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "updateRenderObject",
            "type": "",
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Listener\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Listener",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "rendering.RenderPointerListener",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/Listener\/updateRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderPointerListener renderObject) {\n  renderObject\n    ..onPointerDown = onPointerDown\n    ..onPointerMove = onPointerMove\n    ..onPointerEnter = onPointerEnter\n    ..onPointerHover = onPointerHover\n    ..onPointerExit = onPointerExit\n    ..onPointerUp = onPointerUp\n    ..onPointerCancel = onPointerCancel\n    ..onPointerSignal = onPointerSignal\n    ..behavior = behavior;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "behavior",
            "type": "rendering.HitTestBehavior",
            "types": [],
            "desc": "<p>How to behave during hit testing.<\/p>\n        ",
            "memberOf": "widgets.Listener",
            "isConstant": false,
            "href": "widgets\/Listener\/behavior.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HitTestBehavior behavior\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/Listener-class.html",
    "desc": "<p>A widget that calls callbacks in response to pointer events.<\/p>\n<p>Rather than listening for raw pointer events, consider listening for\nhigher-level gestures using <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>.<\/p>\n<h2 id=\"layout-behavior\">Layout behavior<\/h2>\n<p><em>See <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> for an introduction to box layout models.<\/em><\/p>\n<p>If it has a child, this widget defers to the child for sizing behavior. If\nit does not have a child, it grows to fit the parent instead.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example makes a <a href=\"widgets\/Container-class.html\">Container<\/a> react to being entered by a mouse\npointer, showing a count of the number of entries and exits.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">import 'package:flutter\/gestures.dart';\n\n\/\/ ...\n\nint _enterCounter = 0;\nint _exitCounter = 0;\ndouble x = 0.0;\ndouble y = 0.0;\n\nvoid _incrementCounter(PointerEnterEvent details) {\n  setState(() {\n    _enterCounter++;\n  });\n}\n\nvoid _decrementCounter(PointerExitEvent details) {\n  setState(() {\n    _exitCounter++;\n  });\n}\n\nvoid _updateLocation(PointerHoverEvent details) {\n  setState(() {\n    x = details.position.dx;\n    y = details.position.dy;\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  return Center(\n    child: ConstrainedBox(\n      constraints: new BoxConstraints.tight(Size(300.0, 200.0)),\n      child: Listener(\n        onPointerEnter: _incrementCounter,\n        onPointerHover: _updateLocation,\n        onPointerExit: _decrementCounter,\n        child: Container(\n          color: Colors.lightBlueAccent,\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: &lt;Widget&gt;[\n              Text('You have pointed at this box this many times:'),\n              Text(\n                '$_enterCounter Entries\\n$_exitCounter Exits',\n                style: Theme.of(context).textTheme.display1,\n              ),\n              Text(\n                'The cursor is here: (${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)})',\n              ),\n            ],\n          ),\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=widgets.Listener.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for widgets.Listener.1\n\n\/\/ This example makes a [Container] react to being entered by a mouse\n\/\/ pointer, showing a count of the number of entries and exits.\n\nimport 'package:flutter\/material.dart';\n\nimport 'package:flutter\/gestures.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  int _enterCounter = 0;\n  int _exitCounter = 0;\n  double x = 0.0;\n  double y = 0.0;\n\n  void _incrementCounter(PointerEnterEvent details) {\n    setState(() {\n      _enterCounter++;\n    });\n  }\n\n  void _decrementCounter(PointerExitEvent details) {\n    setState(() {\n      _exitCounter++;\n    });\n  }\n\n  void _updateLocation(PointerHoverEvent details) {\n    setState(() {\n      x = details.position.dx;\n      y = details.position.dy;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: ConstrainedBox(\n        constraints: BoxConstraints.tight(Size(300.0, 200.0)),\n        child: Listener(\n          onPointerEnter: _incrementCounter,\n          onPointerHover: _updateLocation,\n          onPointerExit: _decrementCounter,\n          child: Container(\n            color: Colors.lightBlueAccent,\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: &lt;Widget&gt;[\n                Text('You have pointed at this box this many times:'),\n                Text(\n                  '$_enterCounter Entries\\n$_exitCounter Exits',\n                  style: Theme.of(context).textTheme.display1,\n                ),\n                Text(\n                  'The cursor is here: (${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)})',\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"gestures\/MouseTracker-class.html\">MouseTracker<\/a> an object that tracks mouse locations in the <a href=\"gestures\/GestureBinding-mixin.html\">GestureBinding<\/a>.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Listener"
}