{
    "desc": "<p><code>RandomAccessFile<\/code> provides random access to the data in a\nfile.<\/p>\n<p><code>RandomAccessFile<\/code> objects are obtained by calling the\n<code>open<\/code> method on a <a href=\"dart-io\/File-class.html\">File<\/a> object.<\/p>\n<p>A <code>RandomAccessFile<\/code> have both asynchronous and synchronous\nmethods. The asynchronous methods all return a <code>Future<\/code>\nwhereas the synchronous methods will return the result directly,\nand block the current isolate until the result is ready.<\/p>\n<p>At most one asynchronous method can be pending on a given <code>RandomAccessFile<\/code>\ninstance at the time. If an asynchronous method is called when one is\nalready in progress a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> is thrown.<\/p>\n<p>If an asynchronous method is pending it is also not possible to call any\nsynchronous methods. This will also throw a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/RandomAccessFile-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.RandomAccessFile",
    "shortname": "RandomAccessFile",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-io\/RandomAccessFile\/RandomAccessFile.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Closes the file. Returns a <code>Future<\/code> that\ncompletes when it has been closed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; close();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously closes the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void closeSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/closeSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Flushes the contents of the file to disk. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the flush operation completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; flush();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/flush.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously flushes the contents of the file to disk.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void flushSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/flushSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Gets the length of the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the length in bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; length();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/length.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously gets the length of the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lengthSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/lengthSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Locks the file or part of the file.<\/p>\n<p>By default an exclusive lock will be obtained, but that can be overridden\nby the <code>mode<\/code> argument.<\/p>\n<p>Locks the byte range from <code>start<\/code> to <code>end<\/code> of the file, with the\nbyte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is locked, If only <code>start<\/code> is specified\nthe file is locked from byte position <code>start<\/code> to the end of the\nfile, no matter how large it grows. It is possible to specify an\nexplicit value of <code>end<\/code> which is past the current length of the file.<\/p>\n<p>To obtain an exclusive lock on a file it must be opened for writing.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/FileLock\/exclusive-constant.html\">FileLock.exclusive<\/a> or <a href=\"dart-io\/FileLock\/shared-constant.html\">FileLock.shared<\/a>, an error is\nsignaled if the lock cannot be obtained. If <code>mode<\/code> is\n<a href=\"dart-io\/FileLock\/blockingExclusive-constant.html\">FileLock.blockingExclusive<\/a> or <a href=\"dart-io\/FileLock\/blockingShared-constant.html\">FileLock.blockingShared<\/a>, the\nreturned <a href=\"dart-async\/Future-class.html\">Future<\/a> is resolved only when the lock has been obtained.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>On Linux and OS X this uses advisory locks, which have the\nsurprising semantics that all locks associated with a given file\nare removed when <em>any<\/em> file descriptor for that file is closed by\nthe process. Note that this does not actually lock the file for\naccess. Also note that advisory locks are on a process\nlevel. This means that several isolates in the same process can\nobtain an exclusive lock on the same file.<\/p>\n<p>On Windows the regions used for lock and unlock needs to match. If that\nis not the case unlocking will result in the OS error \"The segment is\nalready unlocked\".<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; lock(\n    [FileLock mode = FileLock.exclusive, int start = 0, int end = -1]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/lock.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileLock"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously locks the file or part of the file.<\/p>\n<p>By default an exclusive lock will be obtained, but that can be overridden\nby the <code>mode<\/code> argument.<\/p>\n<p>Locks the byte range from <code>start<\/code> to <code>end<\/code> of the file ,with the\nbyte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is locked, If only <code>start<\/code> is specified\nthe file is locked from byte position <code>start<\/code> to the end of the\nfile, no matter how large it grows. It is possible to specify an\nexplicit value of <code>end<\/code> which is past the current length of the file.<\/p>\n<p>To obtain an exclusive lock on a file it must be opened for writing.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/FileLock\/exclusive-constant.html\">FileLock.exclusive<\/a> or <a href=\"dart-io\/FileLock\/shared-constant.html\">FileLock.shared<\/a>, an exception is\nthrown if the lock cannot be obtained. If <code>mode<\/code> is\n<a href=\"dart-io\/FileLock\/blockingExclusive-constant.html\">FileLock.blockingExclusive<\/a> or <a href=\"dart-io\/FileLock\/blockingShared-constant.html\">FileLock.blockingShared<\/a>, the\ncall returns only after the lock has been obtained.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>On Linux and OS X this uses advisory locks, which have the\nsurprising semantics that all locks associated with a given file\nare removed when <em>any<\/em> file descriptor for that file is closed by\nthe process. Note that this does not actually lock the file for\naccess. Also note that advisory locks are on a process\nlevel. This means that several isolates in the same process can\nobtain an exclusive lock on the same file.<\/p>\n<p>On Windows the regions used for lock and unlock needs to match. If that\nis not the case unlocking will result in the OS error \"The segment is\nalready unlocked\".<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void lockSync(\n    [FileLock mode = FileLock.exclusive, int start = 0, int end = -1]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/lockSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.FileLock"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Gets the current byte position in the file. Returns a\n<code>Future&lt;int&gt;<\/code> that completes with the position.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; position();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/position.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously gets the current byte position in the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int positionSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/positionSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Reads <code>bytes<\/code> bytes from a file and returns the result as a list of bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;int&gt;&gt; read(int bytes);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/read.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.List<dart:core.int>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "bytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Reads a byte from the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the byte, or with -1 if end-of-file has been reached.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; readByte();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/readByte.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Synchronously reads a single byte from the file. If end-of-file\nhas been reached -1 is returned.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readByteSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/readByteSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the file. If <code>start<\/code> is present,\nthe bytes will be filled into <code>buffer<\/code> from at index <code>start<\/code>, otherwise\nindex 0. If <code>end<\/code> is present, the <code>end<\/code> - <code>start<\/code> bytes will be read into\n<code>buffer<\/code>, otherwise up to <code>buffer.length<\/code>. If <code>end<\/code> == <code>start<\/code> nothing\nhappens.<\/p>\n<p>Returns a <code>Future&lt;int&gt;<\/code> that completes with the number of bytes read.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; readInto(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/readInto.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the file. If <code>start<\/code>\nis present, the bytes will be filled into <code>buffer<\/code> from at index <code>start<\/code>,\notherwise index 0.  If <code>end<\/code> is present, the <code>end<\/code> - <code>start<\/code> bytes will be\nread into <code>buffer<\/code>, otherwise up to <code>buffer.length<\/code>. If <code>end<\/code> == <code>start<\/code>\nnothing happens.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readIntoSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/readIntoSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously reads a maximum of <code>bytes<\/code> bytes from a file and\nreturns the result in a list of bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; readSync(int bytes);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/readSync.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.int>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "bytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Sets the byte position in the file. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the position has been set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; setPosition(int position);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/setPosition.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously sets the byte position in the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setPositionSync(int position);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/setPositionSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a human-readable string for this RandomAccessFile instance.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        },
        {
            "desc": "<p>Truncates (or extends) the file to <code>length<\/code> bytes. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the truncation has been performed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; truncate(int length);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/truncate.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "length",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously truncates (or extends) the file to <code>length<\/code> bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void truncateSync(int length);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/truncateSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "length",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Unlocks the file or part of the file.<\/p>\n<p>Unlocks the byte range from <code>start<\/code> to <code>end<\/code> of the file, with\nthe byte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is unlocked, If only <code>start<\/code> is\nspecified the file is unlocked from byte position <code>start<\/code> to the\nend of the file.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>See <a href=\"dart-io\/RandomAccessFile\/lock.html\">lock<\/a> for more details.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; unlock([int start = 0, int end = -1]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/unlock.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously unlocks the file or part of the file.<\/p>\n<p>Unlocks the byte range from <code>start<\/code> to <code>end<\/code> of the file, with\nthe byte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is unlocked, If only <code>start<\/code> is\nspecified the file is unlocked from byte position <code>start<\/code> to the\nend of the file.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>See <a href=\"dart-io\/RandomAccessFile\/lockSync.html\">lockSync<\/a> for more details.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unlockSync([int start = 0, int end = -1]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/unlockSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Writes a single byte to the file. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the write completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; writeByte(int value);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/writeByte.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously writes a single byte to the file. Returns the\nnumber of bytes successfully written.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int writeByteSync(int value);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/writeByteSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Writes from a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> to the file. It will read the buffer from index\n<code>start<\/code> to index <code>end<\/code>. If <code>start<\/code> is omitted, it'll start from index 0.\nIf <code>end<\/code> is omitted, it will write to end of <code>buffer<\/code>.<\/p>\n<p>Returns a <code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\n<a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> when the write completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; writeFrom(List&lt;int&gt; buffer,\n    [int start = 0, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/writeFrom.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Synchronously writes from a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> to the file. It will read the\nbuffer from index <code>start<\/code> to index <code>end<\/code>. If <code>start<\/code> is omitted, it'll\nstart from index 0. If <code>end<\/code> is omitted, it will write to the end of\n<code>buffer<\/code>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeFromSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/writeFromSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Writes a string to the file using the given <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the write completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; writeString(String string,\n    {Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/writeString.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RandomAccessFile>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "string",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously writes a single string to the file using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeStringSync(String string, {Encoding encoding: utf8});<\/code><\/pre>\n    ",
            "href": "dart-io\/RandomAccessFile\/writeStringSync.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RandomAccessFile",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "string",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Gets the path of the file underlying this RandomAccessFile.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
            "href": "dart-io\/RandomAccessFile\/path.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.RandomAccessFile",
            "params": []
        }
    ]
}