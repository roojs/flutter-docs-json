{
    "desc": "<p>Used with <a href=\"material\/TabBar\/indicator.html\">TabBar.indicator<\/a> to draw a horizontal line below the\nselected tab.<\/p>\n<p>The selected tab underline is inset from the tab's boundary by <a href=\"material\/UnderlineTabIndicator\/insets.html\">insets<\/a>.\nThe <a href=\"material\/UnderlineTabIndicator\/borderSide.html\">borderSide<\/a> defines the line's color and weight.<\/p>\n<p>The <a href=\"material\/TabBar\/indicatorSize.html\">TabBar.indicatorSize<\/a> property can be used to define the indicator's\nbounds in terms of its (centered) widget with <code>TabIndicatorSize.label<\/code>,\nor the entire tab with <code>TabIndicatorSize.tab<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/UnderlineTabIndicator-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.UnderlineTabIndicator",
    "shortname": "UnderlineTabIndicator",
    "extends": [
        "painting.Decoration",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create an underline style selected tab indicator.<\/p>\n<p>The <code>borderSide<\/code> and <code>insets<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const UnderlineTabIndicator({\n  this.borderSide = const BorderSide(width: 2.0, color: Colors.white),\n  this.insets = EdgeInsets.zero,\n}) : assert(borderSide != null),\n     assert(insets != null);<\/code><\/pre>\n    ",
            "href": "material\/UnderlineTabIndicator\/UnderlineTabIndicator.html",
            "isDeprecated": "0",
            "type": "",
            "name": "UnderlineTabIndicator",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.UnderlineTabIndicator",
            "params": [
                {
                    "name": "borderSide",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "insets",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_UnderlinePainter createBoxPainter([ VoidCallback onChanged ]) {\n  return _UnderlinePainter(this, onChanged);\n}<\/code><\/pre>\n    ",
            "href": "material\/UnderlineTabIndicator\/createBoxPainter.html",
            "isDeprecated": "0",
            "type": "<_UnderlinePainter>",
            "name": "createBoxPainter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.UnderlineTabIndicator",
            "params": [
                {
                    "name": "onChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Decoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"material\/UnderlineTabIndicator\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDecoration lerpFrom(Decoration a, double t) {\n  if (a is UnderlineTabIndicator) {\n    return UnderlineTabIndicator(\n      borderSide: BorderSide.lerp(a.borderSide, borderSide, t),\n      insets: EdgeInsetsGeometry.lerp(a.insets, insets, t),\n    );\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
            "href": "material\/UnderlineTabIndicator\/lerpFrom.html",
            "isDeprecated": "0",
            "type": "painting.Decoration",
            "name": "lerpFrom",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.UnderlineTabIndicator",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Decoration"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"material\/UnderlineTabIndicator\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Decoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDecoration lerpTo(Decoration b, double t) {\n  if (b is UnderlineTabIndicator) {\n    return UnderlineTabIndicator(\n      borderSide: BorderSide.lerp(borderSide, b.borderSide, t),\n      insets: EdgeInsetsGeometry.lerp(insets, b.insets, t),\n    );\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
            "href": "material\/UnderlineTabIndicator\/lerpTo.html",
            "isDeprecated": "0",
            "type": "painting.Decoration",
            "name": "lerpTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.UnderlineTabIndicator",
            "params": [
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Decoration"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color and weight of the horizontal line drawn below the selected tab.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide borderSide\n\n<\/code><\/pre>\n        ",
            "href": "material\/UnderlineTabIndicator\/borderSide.html",
            "name": "borderSide",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "material.UnderlineTabIndicator",
            "params": []
        },
        {
            "desc": "<p>Locates the selected tab's underline relative to the tab's boundary.<\/p>\n<p>The <a href=\"material\/TabBar\/indicatorSize.html\">TabBar.indicatorSize<\/a> property can be used to define the\ntab indicator's bounds in terms of its (centered) tab widget with\n<code>TabIndicatorSize.label<\/code>, or the entire tab with <code>TabIndicatorSize.tab<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry insets\n\n<\/code><\/pre>\n        ",
            "href": "material\/UnderlineTabIndicator\/insets.html",
            "name": "insets",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.UnderlineTabIndicator",
            "params": []
        }
    ]
}