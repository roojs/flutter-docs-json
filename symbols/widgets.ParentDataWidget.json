{
    "name": "widgets.ParentDataWidget",
    "extends": [
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "ParentDataWidget",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ParentDataWidget",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/ParentDataWidget\/ParentDataWidget.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ParentDataWidget({ Key key, Widget child })\n  : super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "applyParentData",
            "type": "",
            "desc": "<p>Write the data from this widget into the given render object's parent data.<\/p>\n<p>The framework calls this function whenever it detects that the\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> associated with the <a href=\"widgets\/ProxyWidget\/child.html\">child<\/a> has outdated\n<a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a>. For example, if the render object was recently\ninserted into the render tree, the render object's parent data might not\nmatch the data in this widget.<\/p>\n<p>Subclasses are expected to override this function to copy data from their\nfields into the <a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a> field of the given render\nobject. The render object's parent is guaranteed to have been created by a\nwidget of type <code>T<\/code>, which usually means that this function can assume that\nthe render object's parent data object inherits from a particular class.<\/p>\n<p>If this function modifies data that can change the parent's layout or\npainting, this function is responsible for calling\n<a href=\"rendering\/RenderObject\/markNeedsLayout.html\">RenderObject.markNeedsLayout<\/a> or <a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a> on the\nparent, as appropriate.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ParentDataWidget",
            "sig": "",
            "params": [
                {
                    "name": "renderObject",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ParentDataWidget\/applyParentData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid applyParentData(RenderObject renderObject);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "createElement",
            "type": "widgets.ParentDataElement",
            "desc": "<p>Inflates this configuration to a concrete instance.<\/p>\n<p>A given widget can be included in the tree zero or more times. In particular\na given widget can be placed in the tree multiple times. Each time a widget\nis placed in the tree, it is inflated into an <a href=\"widgets\/Element-class.html\">Element<\/a>, which means a\nwidget that is incorporated into the tree multiple times will be inflated\nmultiple times.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ParentDataWidget",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/ParentDataWidget\/createElement.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nParentDataElement&lt;T&gt; createElement() =&gt; ParentDataElement&lt;T&gt;(this);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugCanApplyOutOfTurn",
            "type": "dart:core.bool",
            "desc": "<p>Whether the <a href=\"widgets\/ParentDataElement\/applyWidgetOutOfTurn.html\">ParentDataElement.applyWidgetOutOfTurn<\/a> method is allowed\nwith this widget.<\/p>\n<p>This should only return true if this widget represents a <a href=\"rendering\/ParentData-class.html\">ParentData<\/a>\nconfiguration that will have no impact on the layout or paint phase.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ParentDataElement\/applyWidgetOutOfTurn.html\">ParentDataElement.applyWidgetOutOfTurn<\/a>, which verifies this in debug\nmode.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.ParentDataWidget",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/ParentDataWidget\/debugCanApplyOutOfTurn.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool debugCanApplyOutOfTurn() =&gt; false;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugDescribeInvalidAncestorChain",
            "type": "dart:core.String",
            "desc": "<p>Subclasses should override this to describe the requirements for using the\nParentDataWidget subclass. It is called when debugIsValidAncestor()\nreturned false for an ancestor, or when there are extraneous\n<a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a>s in the ancestor chain.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ParentDataWidget",
            "sig": "",
            "params": [
                {
                    "name": "description",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ownershipChain",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "foundValidAncestor",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "badAncestors",
                    "type": "dart:core.Iterable<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "widgets.Widget"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ParentDataWidget\/debugDescribeInvalidAncestorChain.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String debugDescribeInvalidAncestorChain({ String description, String ownershipChain, bool foundValidAncestor, Iterable&lt;Widget&gt; badAncestors }) {\n  assert(T != dynamic);\n  assert(T != RenderObjectWidget);\n  String result;\n  if (!foundValidAncestor) {\n    result = '$runtimeType widgets must be placed inside $T widgets.\\n'\n             '$description has no $T ancestor at all.\\n';\n  } else {\n    assert(badAncestors.isNotEmpty);\n    result = '$runtimeType widgets must be placed directly inside $T widgets.\\n'\n             '$description has a $T ancestor, but there are other widgets between them:\\n';\n    for (Widget ancestor in badAncestors) {\n      if (ancestor.runtimeType == runtimeType) {\n        result += '- $ancestor (this is a different $runtimeType than the one with the problem)\\n';\n      } else {\n        result += '- $ancestor\\n';\n      }\n    }\n    result += 'These widgets cannot come between a $runtimeType and its $T.\\n';\n  }\n  result += 'The ownership chain for the parent of the offending $runtimeType was:\\n  $ownershipChain';\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugIsValidAncestor",
            "type": "dart:core.bool",
            "desc": "<p>Subclasses should override this method to return true if the given\nancestor is a RenderObjectWidget that wraps a RenderObject that can handle\nthe kind of ParentData widget that the ParentDataWidget subclass handles.<\/p>\n<p>The default implementation uses the type argument.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.ParentDataWidget",
            "sig": "",
            "params": [
                {
                    "name": "ancestor",
                    "type": "widgets.RenderObjectWidget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/ParentDataWidget\/debugIsValidAncestor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugIsValidAncestor(RenderObjectWidget ancestor) {\n  assert(T != dynamic);\n  assert(T != RenderObjectWidget);\n  return ancestor is T;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "widgets.Expanded",
        "widgets.Flexible",
        "widgets.KeepAlive",
        "widgets.LayoutId",
        "widgets.Positioned",
        "widgets.TableCell"
    ],
    "realImplementors": [
        "widgets.Expanded",
        "widgets.Flexible",
        "widgets.KeepAlive",
        "widgets.LayoutId",
        "widgets.Positioned",
        "widgets.TableCell"
    ],
    "cn": [],
    "href": "widgets\/ParentDataWidget-class.html",
    "desc": "<p>Base class for widgets that hook <a href=\"rendering\/ParentData-class.html\">ParentData<\/a> information to children of\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s.<\/p>\n<p>This can be used to provide per-child configuration for\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>s with more than one child. For example, <a href=\"widgets\/Stack-class.html\">Stack<\/a> uses\nthe <a href=\"widgets\/Positioned-class.html\">Positioned<\/a> parent data widget to position each child.<\/p>\n<p>A <a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a> is specific to a particular kind of <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, and\nthus also to a particular <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> class. That class is <code>T<\/code>, the\n<a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a> type argument.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how you would build a <a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a> to configure a\n<code>FrogJar<\/code> widget's children by specifying a <a href=\"dart-ui\/Size-class.html\">Size<\/a> for each one.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class FrogSize extends ParentDataWidget&lt;FrogJar&gt; {\n  FrogSize({\n    Key key,\n    @required this.size,\n    @required Widget child,\n  }) : assert(child != null),\n       assert(size != null),\n       super(key: key, child: child);\n\n  final Size size;\n\n  @override\n  void applyParentData(RenderObject renderObject) {\n    final FrogJarParentData parentData = renderObject.parentData;\n    if (parentData.size != size) {\n      parentData.size = size;\n      final RenderFrogJar targetParent = renderObject.parent;\n      targetParent.markNeedsLayout();\n    }\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, the superclass for layout algorithms.<\/li>\n<li>\n<a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a>, the slot that this class configures.<\/li>\n<li>\n<a href=\"rendering\/ParentData-class.html\">ParentData<\/a>, the superclass of the data that will be placed in\n<a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a> slots.<\/li>\n<li>\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>, the class for widgets that wrap <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s.\nThe <code>T<\/code> type parameter for <a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a> is a <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/li>\n<li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> and <a href=\"widgets\/State-class.html\">State<\/a>, for widgets that can build differently\nseveral times over their lifetime.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ParentDataWidget"
}