{
    "desc": "<p>The annotation <code>@Deprecated('migration')<\/code> marks a feature as deprecated.<\/p>\n<p>The annotation <a href=\"dart-core\/deprecated-constant.html\">deprecated<\/a> is a shorthand for deprecating until\nan unspecified \"next release\" without migration instructions.<\/p>\n<p>The intent of the <code>@Deprecated<\/code> annotation is to inform users of a feature\nthat they should change their code, even if it is currently still working\ncorrectly.<\/p>\n<p>A deprecated feature is scheduled to be removed at a later time, possibly\nspecified in <a href=\"dart-core\/Deprecated\/message.html\">message<\/a>. A deprecated feature should not be used, code using\nit will break at some point in the future. If existing code is using the\nfeature it should be rewritten to not use the deprecated feature.<\/p>\n<p>A deprecated feature should document how the same effect can be achieved in\n<a href=\"dart-core\/Deprecated\/message.html\">message<\/a>, so the programmer knows how to rewrite the code.<\/p>\n<p>The <code>@Deprecated<\/code> annotation applies to libraries, top-level declarations\n(variables, getters, setters, functions, classes and typedefs),\nclass-level declarations (variables, getters, setters, methods, operators or\nconstructors, whether static or not), named optional arguments and\ntrailing optional positional parameters.<\/p>\n<p>Deprecation is transitive:<\/p>\n<ul>\n<li>If a library is deprecated, so is every member of it.<\/li>\n<li>If a class is deprecated, so is every member of it.<\/li>\n<li>If a variable is deprecated, so are its implicit getter and setter.<\/li>\n<\/ul>\n<p>A tool that processes Dart source code may report when:<\/p>\n<ul>\n<li>the code imports a deprecated library.<\/li>\n<li>the code exports a deprecated library, or any deprecated member of\n \u00a0a non-deprecated library.<\/li>\n<li>the code refers statically to a deprecated declaration.<\/li>\n<li>the code dynamically uses a member of an object with a statically known\ntype, where the member is deprecated on the static type of the object.<\/li>\n<li>the code dynamically calls a method with an argument where the\ncorresponding optional parameter is deprecated on the object's static type.<\/li>\n<\/ul>\n<p>If the deprecated use is inside a library, class or method which is itself\ndeprecated, the tool should not bother the user about it.\nA deprecated feature is expected to use other deprecated features.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-core\/Deprecated-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Deprecated",
    "shortname": "Deprecated",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a deprecation annotation which specifies the migration path and\nexpiration of the annotated feature.<\/p>\n<p>The <code>message<\/code> argument should be readable by programmers, and should state\nan alternative feature (if available) as well as when an annotated feature\nis expected to be removed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Deprecated(this.message);<\/code><\/pre>\n    ",
            "href": "dart-core\/Deprecated\/Deprecated.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Deprecated",
            "params": [
                {
                    "name": "message",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Deprecated feature: $message\";<\/code><\/pre>\n    ",
            "href": "dart-core\/Deprecated\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Deprecated",
            "params": []
        }
    ],
    "props": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use `message` instead. Will be removed in Dart 3.0.0')\nString get expires =&gt; message;<\/code><\/pre>\n        ",
            "href": "dart-core\/Deprecated\/expires.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:core.Deprecated",
            "params": []
        },
        {
            "desc": "<p>Message provided to the user when they use the deprecated feature.<\/p>\n<p>The message should explain how to migrate away from the feature if an\nalternative is available, and when the deprecated feature is expected to be\nremoved.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
            "href": "dart-core\/Deprecated\/message.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:core.Deprecated",
            "params": []
        }
    ]
}