{
    "desc": "<p>A widget that displays its children in multiple horizontal or vertical runs.<\/p>\n<p>A <a href=\"widgets\/Wrap-class.html\">Wrap<\/a> lays out each child and attempts to place the child adjacent to the\nprevious child in the main axis, given by <a href=\"widgets\/Wrap\/direction.html\">direction<\/a>, leaving <a href=\"widgets\/Wrap\/spacing.html\">spacing<\/a>\nspace in between. If there is not enough space to fit the child, <a href=\"widgets\/Wrap-class.html\">Wrap<\/a>\ncreates a new <em>run<\/em> adjacent to the existing children in the cross axis.<\/p>\n<p>After all the children have been allocated to runs, the children within the\nruns are positioned according to the <a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a> in the main axis and\naccording to the <a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> in the cross axis.<\/p>\n<p>The runs themselves are then positioned in the cross axis according to the\n<a href=\"widgets\/Wrap\/runSpacing.html\">runSpacing<\/a> and <a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example renders some <a href=\"material\/Chip-class.html\">Chip<\/a>s representing four contacts in a <a href=\"widgets\/Wrap-class.html\">Wrap<\/a> so\nthat they flow across lines as necessary.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Wrap(\n  spacing: 8.0, \/\/ gap between adjacent chips\n  runSpacing: 4.0, \/\/ gap between lines\n  children: &lt;Widget&gt;[\n    Chip(\n      avatar: CircleAvatar(backgroundColor: Colors.blue.shade900, child: Text('AH')),\n      label: Text('Hamilton'),\n    ),\n    Chip(\n      avatar: CircleAvatar(backgroundColor: Colors.blue.shade900, child: Text('ML')),\n      label: Text('Lafayette'),\n    ),\n    Chip(\n      avatar: CircleAvatar(backgroundColor: Colors.blue.shade900, child: Text('HM')),\n      label: Text('Mulligan'),\n    ),\n    Chip(\n      avatar: CircleAvatar(backgroundColor: Colors.blue.shade900, child: Text('JL')),\n      label: Text('Laurens'),\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Row-class.html\">Row<\/a>, which places children in one line, and gives control over their\nalignment and spacing.<\/li>\n<li>The <a href=\"https:\/\/flutter.io\/widgets\/layout\/\">catalog of layout widgets<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Wrap-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Wrap",
    "shortname": "Wrap",
    "extends": [
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a wrap layout.<\/p>\n<p>By default, the wrap layout is horizontal and both the children and the\nruns are aligned to the start.<\/p>\n<p>The <code>textDirection<\/code> argument defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, if\nany. If there is no ambient directionality, and a text direction is going\nto be necessary to decide which direction to lay the children in or to\ndisambiguate <code>start<\/code> or <code>end<\/code> values for the main or cross axis\ndirections, the <code>textDirection<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Wrap({\n  Key key,\n  this.direction = Axis.horizontal,\n  this.alignment = WrapAlignment.start,\n  this.spacing = 0.0,\n  this.runAlignment = WrapAlignment.start,\n  this.runSpacing = 0.0,\n  this.crossAxisAlignment = WrapCrossAlignment.start,\n  this.textDirection,\n  this.verticalDirection = VerticalDirection.down,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : super(key: key, children: children);<\/code><\/pre>\n    ",
            "href": "widgets\/Wrap\/Wrap.html",
            "isDeprecated": false,
            "type": "",
            "name": "Wrap",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Wrap",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.WrapAlignment"
                },
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "crossAxisAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.WrapCrossAlignment"
                },
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "runAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.WrapAlignment"
                },
                {
                    "name": "runSpacing",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "spacing",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "verticalDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.VerticalDirection"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderWrap createRenderObject(BuildContext context) {\n  return RenderWrap(\n    direction: direction,\n    alignment: alignment,\n    spacing: spacing,\n    runAlignment: runAlignment,\n    runSpacing: runSpacing,\n    crossAxisAlignment: crossAxisAlignment,\n    textDirection: textDirection ?? Directionality.of(context),\n    verticalDirection: verticalDirection,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Wrap\/createRenderObject.html",
            "isDeprecated": false,
            "type": "rendering.RenderWrap",
            "name": "createRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Wrap",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Wrap\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;Axis&gt;('direction', direction));\n  properties.add(EnumProperty&lt;WrapAlignment&gt;('alignment', alignment));\n  properties.add(DoubleProperty('spacing', spacing));\n  properties.add(EnumProperty&lt;WrapAlignment&gt;('runAlignment', runAlignment));\n  properties.add(DoubleProperty('runSpacing', runSpacing));\n  properties.add(DoubleProperty('crossAxisAlignment', runSpacing));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(EnumProperty&lt;VerticalDirection&gt;('verticalDirection', verticalDirection, defaultValue: VerticalDirection.down));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Wrap\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Wrap",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Wrap\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderWrap renderObject) {\n  renderObject\n    ..direction = direction\n    ..alignment = alignment\n    ..spacing = spacing\n    ..runAlignment = runAlignment\n    ..runSpacing = runSpacing\n    ..crossAxisAlignment = crossAxisAlignment\n    ..textDirection = textDirection ?? Directionality.of(context)\n    ..verticalDirection = verticalDirection;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Wrap\/updateRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Wrap",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderWrap"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How the children within a run should be placed in the main axis.<\/p>\n<p>For example, if <a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a> is <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.center<\/a>, the children in\neach run are grouped together in the center of their run in the main axis.<\/p>\n<p>Defaults to <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a>, which controls how the runs are placed relative to each\nother in the cross axis.<\/li>\n<li>\n<a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a>, which controls how the children within each run\nare placed relative to each other in the cross axis.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WrapAlignment alignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/alignment.html",
            "name": "alignment",
            "isDeprecated": false,
            "type": "rendering.WrapAlignment",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>How the children within a run should be aligned relative to each other in\nthe cross axis.<\/p>\n<p>For example, if this is set to <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a>, and the\n<a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then the children within each\nrun will have their bottom edges aligned to the bottom edge of the run.<\/p>\n<p>Defaults to <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a>, which controls how the children within each run are placed\nrelative to each other in the main axis.<\/li>\n<li>\n<a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a>, which controls how the runs are placed relative to each\nother in the cross axis.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WrapCrossAlignment crossAxisAlignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/crossAxisAlignment.html",
            "name": "crossAxisAlignment",
            "isDeprecated": false,
            "type": "rendering.WrapCrossAlignment",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>The direction to use as the main axis.<\/p>\n<p>For example, if <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, the default, the\nchildren are placed adjacent to one another in a horizontal run until the\navailable horizontal space is consumed, at which point a subsequent\nchildren are placed in a new run vertically adjacent to the previous run.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis direction\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/direction.html",
            "name": "direction",
            "isDeprecated": false,
            "type": "painting.Axis",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>How the runs themselves should be placed in the cross axis.<\/p>\n<p>For example, if <a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a> is <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.center<\/a>, the runs are\ngrouped together in the center of the overall <a href=\"widgets\/Wrap-class.html\">Wrap<\/a> in the cross axis.<\/p>\n<p>Defaults to <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a>, which controls how the children within each run are placed\nrelative to each other in the main axis.<\/li>\n<li>\n<a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a>, which controls how the children within each run\nare placed relative to each other in the cross axis.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WrapAlignment runAlignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/runAlignment.html",
            "name": "runAlignment",
            "isDeprecated": false,
            "type": "rendering.WrapAlignment",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>How much space to place between the runs themselves in the cross axis.<\/p>\n<p>For example, if <a href=\"widgets\/Wrap\/runSpacing.html\">runSpacing<\/a> is 10.0, the runs will be spaced at least\n10.0 logical pixels apart in the cross axis.<\/p>\n<p>If there is additional free space in the overall <a href=\"widgets\/Wrap-class.html\">Wrap<\/a> (e.g., because\nthe wrap has a minimum size that is not filled), the additional free space\nwill be allocated according to the <a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a>.<\/p>\n<p>Defaults to 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double runSpacing\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/runSpacing.html",
            "name": "runSpacing",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>How much space to place between children in a run in the main axis.<\/p>\n<p>For example, if <a href=\"widgets\/Wrap\/spacing.html\">spacing<\/a> is 10.0, the children will be spaced at least\n10.0 logical pixels apart in the main axis.<\/p>\n<p>If there is additional free space in a run (e.g., because the wrap has a\nminimum size that is not filled or because some runs are longer than\nothers), the additional free space will be allocated according to the\n<a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a>.<\/p>\n<p>Defaults to 0.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double spacing\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/spacing.html",
            "name": "spacing",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out horizontally and how to interpret\n<code>start<\/code> and <code>end<\/code> in the horizontal direction.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls order in which the\nchildren are positioned (left-to-right or right-to-left), and the meaning\nof the <a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a> property's <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and either the\n<a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a> is either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, or\nthere's more than one child, then the <a href=\"widgets\/Wrap\/textDirection.html\">textDirection<\/a> (or the ambient\n<a href=\"widgets\/Directionality-class.html\">Directionality<\/a>) must not be null.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls the order in which\nruns are positioned, the meaning of the <a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a> property's\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values, as well as the\n<a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> and\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and either the\n<a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a> is either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, the\n<a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is either <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> or\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a>, or there's more than one child, then the\n<a href=\"widgets\/Wrap\/textDirection.html\">textDirection<\/a> (or the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>) must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.Wrap",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out vertically and how to interpret\n<code>start<\/code> and <code>end<\/code> in the vertical direction.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls which order children\nare painted in (down or up), the meaning of the <a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a> property's\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and either the <a href=\"widgets\/Wrap\/alignment.html\">alignment<\/a>\nis either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, or there's\nmore than one child, then the <a href=\"widgets\/Wrap\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the order in which\nruns are positioned, the meaning of the <a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a> property's\n<a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> and <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a> values, as well as the\n<a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> and\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Wrap\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and either the\n<a href=\"widgets\/Wrap\/runAlignment.html\">runAlignment<\/a> is either <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.start<\/a> or <a href=\"rendering\/WrapAlignment-class.html\">WrapAlignment.end<\/a>, the\n<a href=\"widgets\/Wrap\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is either <a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.start<\/a> or\n<a href=\"rendering\/WrapCrossAlignment-class.html\">WrapCrossAlignment.end<\/a>, or there's more than one child, then the\n<a href=\"widgets\/Wrap\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VerticalDirection verticalDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Wrap\/verticalDirection.html",
            "name": "verticalDirection",
            "isDeprecated": false,
            "type": "painting.VerticalDirection",
            "memberOf": "widgets.Wrap",
            "params": []
        }
    ]
}