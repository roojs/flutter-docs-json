{
    "desc": "<p>Defines a <a href=\"vector_math\/Quaternion-class.html\">Quaternion<\/a> (a four-dimensional vector) for efficient rotation\ncalculations.<\/p>\n<p>Quaternion are better for interpolating between rotations and avoid the\n<a href=\"http:\/\/de.wikipedia.org\/wiki\/Gimbal_Lock\">gimbal lock<\/a> problem compared to\neuler rotations.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "vector_math\/Quaternion-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "vector_math",
    "name": "vector_math.Quaternion",
    "shortname": "Quaternion",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Constructs a quaternion using the raw values <code>x<\/code>, <code>y<\/code>, <code>z<\/code>, and <code>w<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Quaternion(double x, double y, double z, double w) =&gt;\n    new Quaternion._()..setValues(x, y, z, w);<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/Quaternion.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "w",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "x",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "y",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "z",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Absolute error between <a href=\"vector_math\/Quaternion-class.html\">this<\/a> and <code>correct<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double absoluteError(Quaternion correct) {\n  final double this_norm = length;\n  final double correct_norm = correct.length;\n  final double norm_diff = (this_norm - correct_norm).abs();\n  return norm_diff;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/absoluteError.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "correct",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Quaternion"
                }
            ]
        },
        {
            "desc": "<p>Add <code>arg<\/code> to <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(Quaternion arg) {\n  final Float32List argStorage = arg._qStorage;\n  _qStorage[0] = _qStorage[0] + argStorage[0];\n  _qStorage[1] = _qStorage[1] + argStorage[1];\n  _qStorage[2] = _qStorage[2] + argStorage[2];\n  _qStorage[3] = _qStorage[3] + argStorage[3];\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "arg",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Quaternion"
                }
            ]
        },
        {
            "desc": "<p>Returns a rotation matrix containing the same rotation as <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matrix3 asRotationMatrix() =&gt; copyRotationInto(new Matrix3.zero());<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/asRotationMatrix.html",
            "isDeprecated": "0",
            "type": "vector_math.Matrix3",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Returns a new copy of <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Quaternion clone() =&gt; new Quaternion.copy(this);<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/clone.html",
            "isDeprecated": "0",
            "type": "vector_math.Quaternion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Conjugate <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void conjugate() {\n  _qStorage[2] = -_qStorage[2];\n  _qStorage[1] = -_qStorage[1];\n  _qStorage[0] = -_qStorage[0];\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/conjugate.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Conjugated copy of <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Quaternion conjugated() =&gt; clone()..conjugate();<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/conjugated.html",
            "isDeprecated": "0",
            "type": "vector_math.Quaternion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Set <code>rotationMatrix<\/code> to a rotation matrix containing the same rotation as\n<a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Matrix3 copyRotationInto(Matrix3 rotationMatrix) {\n  final double d = length2;\n  assert(d != 0.0);\n  final double s = 2.0 \/ d;\n\n  final double _x = _qStorage[0];\n  final double _y = _qStorage[1];\n  final double _z = _qStorage[2];\n  final double _w = _qStorage[3];\n\n  final double xs = _x * s;\n  final double ys = _y * s;\n  final double zs = _z * s;\n\n  final double wx = _w * xs;\n  final double wy = _w * ys;\n  final double wz = _w * zs;\n\n  final double xx = _x * xs;\n  final double xy = _x * ys;\n  final double xz = _x * zs;\n\n  final double yy = _y * ys;\n  final double yz = _y * zs;\n  final double zz = _z * zs;\n\n  final Float32List rotationMatrixStorage = rotationMatrix.storage;\n  rotationMatrixStorage[0] = 1.0 - (yy + zz); \/\/ column 0\n  rotationMatrixStorage[1] = xy + wz;\n  rotationMatrixStorage[2] = xz - wy;\n  rotationMatrixStorage[3] = xy - wz; \/\/ column 1\n  rotationMatrixStorage[4] = 1.0 - (xx + zz);\n  rotationMatrixStorage[5] = yz + wx;\n  rotationMatrixStorage[6] = xz + wy; \/\/ column 2\n  rotationMatrixStorage[7] = yz - wx;\n  rotationMatrixStorage[8] = 1.0 - (xx + yy);\n  return rotationMatrix;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/copyRotationInto.html",
            "isDeprecated": "0",
            "type": "vector_math.Matrix3",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "rotationMatrix",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Matrix3"
                }
            ]
        },
        {
            "desc": "<p>Invert <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void inverse() {\n  final double l = 1.0 \/ length2;\n  _qStorage[3] = _qStorage[3] * l;\n  _qStorage[2] = -_qStorage[2] * l;\n  _qStorage[1] = -_qStorage[1] * l;\n  _qStorage[0] = -_qStorage[0] * l;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/inverse.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Inverted copy of <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Quaternion inverted() =&gt; clone()..inverse();<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/inverted.html",
            "isDeprecated": "0",
            "type": "vector_math.Quaternion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Normalize <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double normalize() {\n  final double l = length;\n  if (l == 0.0) {\n    return 0.0;\n  }\n  final double d = 1.0 \/ l;\n  _qStorage[0] *= d;\n  _qStorage[1] *= d;\n  _qStorage[2] *= d;\n  _qStorage[3] *= d;\n  return l;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/normalize.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Normalized copy of <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Quaternion normalized() =&gt; clone()..normalize();<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/normalized.html",
            "isDeprecated": "0",
            "type": "vector_math.Quaternion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Relative error between <a href=\"vector_math\/Quaternion-class.html\">this<\/a> and <code>correct<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double relativeError(Quaternion correct) {\n  final Quaternion diff = correct - this;\n  final double norm_diff = diff.length;\n  final double correct_norm = correct.length;\n  return norm_diff \/ correct_norm;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/relativeError.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "correct",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Quaternion"
                }
            ]
        },
        {
            "desc": "<p>Rotates <code>v<\/code> by <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Vector3 rotate(Vector3 v) {\n  \/\/ conjugate(this) * [v,0] * this\n  final double _w = _qStorage[3];\n  final double _z = _qStorage[2];\n  final double _y = _qStorage[1];\n  final double _x = _qStorage[0];\n  final double tiw = _w;\n  final double tiz = -_z;\n  final double tiy = -_y;\n  final double tix = -_x;\n  final double tx = tiw * v.x + tix * 0.0 + tiy * v.z - tiz * v.y;\n  final double ty = tiw * v.y + tiy * 0.0 + tiz * v.x - tix * v.z;\n  final double tz = tiw * v.z + tiz * 0.0 + tix * v.y - tiy * v.x;\n  final double tw = tiw * 0.0 - tix * v.x - tiy * v.y - tiz * v.z;\n  final double result_x = tw * _x + tx * _w + ty * _z - tz * _y;\n  final double result_y = tw * _y + ty * _w + tz * _x - tx * _z;\n  final double result_z = tw * _z + tz * _w + tx * _y - ty * _x;\n  final Float32List vStorage = v.storage;\n  vStorage[2] = result_z;\n  vStorage[1] = result_y;\n  vStorage[0] = result_x;\n  return v;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/rotate.html",
            "isDeprecated": "0",
            "type": "vector_math.Vector3",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "v",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Vector3"
                }
            ]
        },
        {
            "desc": "<p>Returns a copy of <code>v<\/code> rotated by quaternion.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Vector3 rotated(Vector3 v) {\n  final Vector3 out = v.clone();\n  rotate(out);\n  return out;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/rotated.html",
            "isDeprecated": "0",
            "type": "vector_math.Vector3",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "v",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Vector3"
                }
            ]
        },
        {
            "desc": "<p>Scales <a href=\"vector_math\/Quaternion-class.html\">this<\/a> by <code>scale<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void scale(double scale) {\n  _qStorage[3] = _qStorage[3] * scale;\n  _qStorage[2] = _qStorage[2] * scale;\n  _qStorage[1] = _qStorage[1] * scale;\n  _qStorage[0] = _qStorage[0] * scale;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/scale.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "scale",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Scaled copy of <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Quaternion scaled(double scale) =&gt; clone()..scale(scale);<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/scaled.html",
            "isDeprecated": "0",
            "type": "vector_math.Quaternion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "scale",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Set the quaternion with rotation of <code>radians<\/code> around <code>axis<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAxisAngle(Vector3 axis, double radians) {\n  final double len = axis.length;\n  if (len == 0.0) {\n    return;\n  }\n  final double halfSin = math.sin(radians * 0.5) \/ len;\n  final Float32List axisStorage = axis.storage;\n  _qStorage[0] = axisStorage[0] * halfSin;\n  _qStorage[1] = axisStorage[1] * halfSin;\n  _qStorage[2] = axisStorage[2] * halfSin;\n  _qStorage[3] = math.cos(radians * 0.5);\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setAxisAngle.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "axis",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Vector3"
                },
                {
                    "name": "radians",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Set the quaternion to the time derivative of <code>q<\/code> with angular velocity\n<code>omega<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setDQ(Quaternion q, Vector3 omega) {\n  final Float32List qStorage = q._qStorage;\n  final Float32List omegaStorage = omega.storage;\n  final double qx = qStorage[0];\n  final double qy = qStorage[1];\n  final double qz = qStorage[2];\n  final double qw = qStorage[3];\n  final double ox = omegaStorage[0];\n  final double oy = omegaStorage[1];\n  final double oz = omegaStorage[2];\n  final double _x = ox * qw + oy * qz - oz * qy;\n  final double _y = oy * qw + oz * qx - ox * qz;\n  final double _z = oz * qw + ox * qy - oy * qx;\n  final double _w = -ox * qx - oy * qy - oz * qz;\n  _qStorage[0] = _x * 0.5;\n  _qStorage[1] = _y * 0.5;\n  _qStorage[2] = _z * 0.5;\n  _qStorage[3] = _w * 0.5;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setDQ.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "omega",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Vector3"
                },
                {
                    "name": "q",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Quaternion"
                }
            ]
        },
        {
            "desc": "<p>Set quaternion with rotation of <code>yaw<\/code>, <code>pitch<\/code> and <code>roll<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setEuler(double yaw, double pitch, double roll) {\n  final double halfYaw = yaw * 0.5;\n  final double halfPitch = pitch * 0.5;\n  final double halfRoll = roll * 0.5;\n  final double cosYaw = math.cos(halfYaw);\n  final double sinYaw = math.sin(halfYaw);\n  final double cosPitch = math.cos(halfPitch);\n  final double sinPitch = math.sin(halfPitch);\n  final double cosRoll = math.cos(halfRoll);\n  final double sinRoll = math.sin(halfRoll);\n  _qStorage[0] = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;\n  _qStorage[1] = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;\n  _qStorage[2] = sinRoll * cosPitch * cosYaw - cosRoll * sinPitch * sinYaw;\n  _qStorage[3] = cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setEuler.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "pitch",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "roll",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "yaw",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Copy <code>source<\/code> into <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFrom(Quaternion source) {\n  final Float32List sourceStorage = source._qStorage;\n  _qStorage[0] = sourceStorage[0];\n  _qStorage[1] = sourceStorage[1];\n  _qStorage[2] = sourceStorage[2];\n  _qStorage[3] = sourceStorage[3];\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setFrom.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "source",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Quaternion"
                }
            ]
        },
        {
            "desc": "<p>Set the quaternion with rotation from a rotation matrix <code>rotationMatrix<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFromRotation(Matrix3 rotationMatrix) {\n  final Float32List rotationMatrixStorage = rotationMatrix.storage;\n  final double trace = rotationMatrix.trace();\n  if (trace &gt; 0.0) {\n    double s = math.sqrt(trace + 1.0);\n    _qStorage[3] = s * 0.5;\n    s = 0.5 \/ s;\n    _qStorage[0] = (rotationMatrixStorage[5] - rotationMatrixStorage[7]) * s;\n    _qStorage[1] = (rotationMatrixStorage[6] - rotationMatrixStorage[2]) * s;\n    _qStorage[2] = (rotationMatrixStorage[1] - rotationMatrixStorage[3]) * s;\n  } else {\n    final int i = rotationMatrixStorage[0] &lt; rotationMatrixStorage[4]\n        ? (rotationMatrixStorage[4] &lt; rotationMatrixStorage[8] ? 2 : 1)\n        : (rotationMatrixStorage[0] &lt; rotationMatrixStorage[8] ? 2 : 0);\n    final int j = (i + 1) % 3;\n    final int k = (i + 2) % 3;\n    double s = math.sqrt(rotationMatrixStorage[rotationMatrix.index(i, i)] -\n        rotationMatrixStorage[rotationMatrix.index(j, j)] -\n        rotationMatrixStorage[rotationMatrix.index(k, k)] +\n        1.0);\n    _qStorage[i] = s * 0.5;\n    s = 0.5 \/ s;\n    _qStorage[3] = (rotationMatrixStorage[rotationMatrix.index(k, j)] -\n            rotationMatrixStorage[rotationMatrix.index(j, k)]) *\n        s;\n    _qStorage[j] = (rotationMatrixStorage[rotationMatrix.index(j, i)] +\n            rotationMatrixStorage[rotationMatrix.index(i, j)]) *\n        s;\n    _qStorage[k] = (rotationMatrixStorage[rotationMatrix.index(k, i)] +\n            rotationMatrixStorage[rotationMatrix.index(i, k)]) *\n        s;\n  }\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setFromRotation.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "rotationMatrix",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Matrix3"
                }
            ]
        },
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFromTwoVectors(Vector3 a, Vector3 b) {\n  final Vector3 v1 = a.normalized();\n  final Vector3 v2 = b.normalized();\n\n  final double c = v1.dot(v2);\n  double angle = math.acos(c);\n  Vector3 axis = v1.cross(v2);\n\n  if ((1.0 + c).abs() &lt; 0.0005) {\n    \/\/ c \\approx -1 indicates 180 degree rotation\n    angle = math.pi;\n\n    \/\/ a and b are parallel in opposite directions. We need any\n    \/\/ vector as our rotation axis that is perpendicular.\n    \/\/ Find one by taking the cross product of v1 with an appropriate unit axis\n    if (v1.x &gt; v1.y &amp;&amp; v1.x &gt; v1.z) {\n      \/\/ v1 points in a dominantly x direction, so don't cross with that axis\n      axis = v1.cross(new Vector3(0.0, 1.0, 0.0));\n    } else {\n      \/\/ Predominantly points in some other direction, so x-axis should be safe\n      axis = v1.cross(new Vector3(1.0, 0.0, 0.0));\n    }\n  } else if ((1.0 - c).abs() &lt; 0.0005) {\n    \/\/ c \\approx 1 is 0-degree rotation, axis is arbitrary\n    angle = 0.0;\n    axis = new Vector3(1.0, 0.0, 0.0);\n  }\n\n  setAxisAngle(axis.normalized(), angle);\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setFromTwoVectors.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Vector3"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Vector3"
                }
            ]
        },
        {
            "desc": "<p>Set the quaternion to a random rotation. The random number generator <code>rn<\/code>\nis used to generate the random numbers for the rotation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRandom(math.Random rn) {\n  \/\/ From: \"Uniform Random Rotations\", Ken Shoemake, Graphics Gems III,\n  \/\/ pg. 124-132.\n  final double x0 = rn.nextDouble();\n  final double r1 = math.sqrt(1.0 - x0);\n  final double r2 = math.sqrt(x0);\n  final double t1 = math.pi * 2.0 * rn.nextDouble();\n  final double t2 = math.pi * 2.0 * rn.nextDouble();\n  final double c1 = math.cos(t1);\n  final double s1 = math.sin(t1);\n  final double c2 = math.cos(t2);\n  final double s2 = math.sin(t2);\n  _qStorage[0] = s1 * r1;\n  _qStorage[1] = c1 * r1;\n  _qStorage[2] = s2 * r2;\n  _qStorage[3] = c2 * r2;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setRandom.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "rn",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:math.Random"
                }
            ]
        },
        {
            "desc": "<p>Set the quaternion to the raw values <code>x<\/code>, <code>y<\/code>, <code>z<\/code>, and <code>w<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setValues(double x, double y, double z, double w) {\n  _qStorage[0] = x;\n  _qStorage[1] = y;\n  _qStorage[2] = z;\n  _qStorage[3] = w;\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/setValues.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "w",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "x",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "y",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "z",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Subtracts <code>arg<\/code> from <a href=\"vector_math\/Quaternion-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sub(Quaternion arg) {\n  final Float32List argStorage = arg._qStorage;\n  _qStorage[0] = _qStorage[0] - argStorage[0];\n  _qStorage[1] = _qStorage[1] - argStorage[1];\n  _qStorage[2] = _qStorage[2] - argStorage[2];\n  _qStorage[3] = _qStorage[3] - argStorage[3];\n}<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/sub.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": [
                {
                    "name": "arg",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math.Quaternion"
                }
            ]
        },
        {
            "desc": "<p>Printable string.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${_qStorage[0]}, ${_qStorage[1]},'\n    ' ${_qStorage[2]} @ ${_qStorage[3]}';<\/code><\/pre>\n    ",
            "href": "vector_math\/Quaternion\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "vector_math.Quaternion",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p><a href=\"vector_math\/Quaternion\/axis.html\">axis<\/a> of rotation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Vector3 get axis {\n  final double den = 1.0 - (_qStorage[3] * _qStorage[3]);\n  if (den &lt; 0.0005) {\n    \/\/ 0-angle rotation, so axis does not matter\n    return new Vector3.zero();\n  }\n\n  final double scale = 1.0 \/ math.sqrt(den);\n  return new Vector3(\n      _qStorage[0] * scale, _qStorage[1] * scale, _qStorage[2] * scale);\n}<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/axis.html",
            "isDeprecated": "0",
            "type": "vector_math.Vector3",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Length.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get length =&gt; math.sqrt(length2);<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/length.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Length squared.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get length2 {\n  final double x = _qStorage[0];\n  final double y = _qStorage[1];\n  final double z = _qStorage[2];\n  final double w = _qStorage[3];\n  return (x * x) + (y * y) + (z * z) + (w * w);\n}<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/length2.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p><a href=\"vector_math\/Quaternion\/radians.html\">radians<\/a> of rotation around the <a href=\"vector_math\/Quaternion\/axis.html\">axis<\/a> of the rotation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get radians =&gt; 2.0 * math.acos(_qStorage[3]);<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/radians.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Access the internal <a href=\"vector_math\/Quaternion\/storage.html\">storage<\/a> of the quaternions components.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Float32List get storage =&gt; _qStorage;<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/storage.html",
            "isDeprecated": "0",
            "type": "dart:typed_data.Float32List",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Access the <a href=\"vector_math\/Quaternion\/w.html\">w<\/a> component of the quaternion.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get w =&gt; _qStorage[3];<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/w.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Access the <a href=\"vector_math\/Quaternion\/x.html\">x<\/a> component of the quaternion.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get x =&gt; _qStorage[0];<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/x.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Access the <a href=\"vector_math\/Quaternion\/y.html\">y<\/a> component of the quaternion.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get y =&gt; _qStorage[1];<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/y.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        },
        {
            "desc": "<p>Access the <a href=\"vector_math\/Quaternion\/z.html\">z<\/a> component of the quaternion.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get z =&gt; _qStorage[2];<\/code><\/pre>\n        ",
            "href": "vector_math\/Quaternion\/z.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "vector_math.Quaternion",
            "params": []
        }
    ]
}