{
    "name": "material.TextTheme",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"material\/TextTheme\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "material\/TextTheme\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TextTheme typedOther = other;\n  return display4 == typedOther.display4\n      &amp;&amp; display3 == typedOther.display3\n      &amp;&amp; display2 == typedOther.display2\n      &amp;&amp; display1 == typedOther.display1\n      &amp;&amp; headline == typedOther.headline\n      &amp;&amp; title == typedOther.title\n      &amp;&amp; subhead == typedOther.subhead\n      &amp;&amp; body2 == typedOther.body2\n      &amp;&amp; body1 == typedOther.body1\n      &amp;&amp; caption == typedOther.caption\n      &amp;&amp; button == typedOther.button\n      &amp;&amp; subtitle == typedOther.subtitle\n      &amp;&amp; overline == typedOther.overline;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextTheme",
            "type": "",
            "desc": "<p>Creates a text theme that uses the given values.<\/p>\n<p>Rather than creating a new text theme, consider using <a href=\"material\/Typography\/black.html\">Typography.black<\/a>\nor <a href=\"material\/Typography\/white.html\">Typography.white<\/a>, which implement the typography styles in the\nmaterial design specification:<\/p>\n<p><a href=\"https:\/\/material.io\/design\/typography\/#type-scale\">material.io\/design\/typography\/#type-scale<\/a><\/p>\n<p>If you do decide to create your own text theme, consider using one of\nthose predefined themes as a starting point for <a href=\"material\/TextTheme\/copyWith.html\">copyWith<\/a> or <a href=\"material\/TextTheme\/apply.html\">apply<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "display4",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "display3",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "display2",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "display1",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "headline",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "title",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "subhead",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "body2",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "body1",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "caption",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "button",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "subtitle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "overline",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/TextTheme\/TextTheme.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextTheme({\n  this.display4,\n  this.display3,\n  this.display2,\n  this.display1,\n  this.headline,\n  this.title,\n  this.subhead,\n  this.body2,\n  this.body1,\n  this.caption,\n  this.button,\n  this.subtitle,\n  this.overline,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "apply",
            "type": "material.TextTheme",
            "desc": "<p>Creates a copy of this text theme but with the given field replaced in\neach of the individual text styles.<\/p>\n<p>The <code>displayColor<\/code> is applied to <a href=\"material\/TextTheme\/display4.html\">display4<\/a>, <a href=\"material\/TextTheme\/display3.html\">display3<\/a>, <a href=\"material\/TextTheme\/display2.html\">display2<\/a>,\n<a href=\"material\/TextTheme\/display1.html\">display1<\/a>, and <a href=\"material\/TextTheme\/caption.html\">caption<\/a>. The <code>bodyColor<\/code> is applied to the remaining\ntext styles.<\/p>\n<p>Consider using <a href=\"material\/Typography\/black.html\">Typography.black<\/a> or <a href=\"material\/Typography\/white.html\">Typography.white<\/a>, which implement\nthe typography styles in the material design specification, as a starting\npoint.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontSizeFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontSizeDelta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "displayColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bodyColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decoration",
                    "type": "dart:ui.TextDecoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationStyle",
                    "type": "dart:ui.TextDecorationStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TextTheme\/apply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextTheme apply({\n  String fontFamily,\n  double fontSizeFactor = 1.0,\n  double fontSizeDelta = 0.0,\n  Color displayColor,\n  Color bodyColor,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n}) {\n  return TextTheme(\n    display4: display4?.apply(\n      color: displayColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    display3: display3?.apply(\n      color: displayColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    display2: display2?.apply(\n      color: displayColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    display1: display1?.apply(\n      color: displayColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    headline: headline?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    title: title?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    subhead: subhead?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    body2: body2?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    body1: body1?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    caption: caption?.apply(\n      color: displayColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    button: button?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    subtitle: subtitle?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n    overline: overline?.apply(\n      color: bodyColor,\n      decoration: decoration,\n      decorationColor: decorationColor,\n      decorationStyle: decorationStyle,\n      fontFamily: fontFamily,\n      fontSizeFactor: fontSizeFactor,\n      fontSizeDelta: fontSizeDelta,\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyWith",
            "type": "material.TextTheme",
            "desc": "<p>Creates a copy of this text theme but with the given fields replaced with\nthe new values.<\/p>\n<p>Consider using <a href=\"material\/Typography\/black.html\">Typography.black<\/a> or <a href=\"material\/Typography\/white.html\">Typography.white<\/a>, which implement\nthe typography styles in the material design specification, as a starting\npoint.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/\/ A Widget that sets the ambient theme's title text color for its\n\/\/\/ descendants, while leaving other ambient theme attributes alone.\nclass TitleColorThemeCopy extends StatelessWidget {\n  TitleColorThemeCopy({Key key, this.child, this.titleColor}) : super(key: key);\n\n  final Color titleColor;\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    return Theme(\n      data: theme.copyWith(\n        textTheme: theme.textTheme.copyWith(\n          title: theme.textTheme.title.copyWith(\n            color: titleColor,\n          ),\n        ),\n      ),\n      child: child,\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/TextTheme\/merge.html\">merge<\/a> is used instead of <a href=\"material\/TextTheme\/copyWith.html\">copyWith<\/a> when you want to merge all\nof the fields of a TextTheme instead of individual fields.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "display4",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "display3",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "display2",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "display1",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "headline",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "title",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "subhead",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "body2",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "body1",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "caption",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "button",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "subtitle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "overline",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TextTheme\/copyWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextTheme copyWith({\n  TextStyle display4,\n  TextStyle display3,\n  TextStyle display2,\n  TextStyle display1,\n  TextStyle headline,\n  TextStyle title,\n  TextStyle subhead,\n  TextStyle body2,\n  TextStyle body1,\n  TextStyle caption,\n  TextStyle button,\n  TextStyle subtitle,\n  TextStyle overline,\n}) {\n  return TextTheme(\n    display4: display4 ?? this.display4,\n    display3: display3 ?? this.display3,\n    display2: display2 ?? this.display2,\n    display1: display1 ?? this.display1,\n    headline: headline ?? this.headline,\n    title: title ?? this.title,\n    subhead: subhead ?? this.subhead,\n    body2: body2 ?? this.body2,\n    body1: body1 ?? this.body1,\n    caption: caption ?? this.caption,\n    button: button ?? this.button,\n    subtitle: subtitle ?? this.subtitle,\n    overline: overline ?? this.overline,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/TextTheme\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TextTheme\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final TextTheme defaultTheme = Typography(platform: defaultTargetPlatform).black;\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('display4', display4, defaultValue: defaultTheme.display4));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('display3', display3, defaultValue: defaultTheme.display3));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('display2', display2, defaultValue: defaultTheme.display2));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('display1', display1, defaultValue: defaultTheme.display1));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('headline', headline, defaultValue: defaultTheme.headline));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('title', title, defaultValue: defaultTheme.title));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('subhead', subhead, defaultValue: defaultTheme.subhead));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('body2', body2, defaultValue: defaultTheme.body2));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('body1', body1, defaultValue: defaultTheme.body1));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('caption', caption, defaultValue: defaultTheme.caption));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('button', button, defaultValue: defaultTheme.button));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('subtitle)', subtitle, defaultValue: defaultTheme.subtitle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('overline', overline, defaultValue: defaultTheme.overline));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "lerp",
            "type": "material.TextTheme",
            "desc": "<p>Linearly interpolate between two text themes.<\/p>\n<p>null<\/p>\n    ",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "material.TextTheme",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "material.TextTheme",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TextTheme\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextTheme lerp(TextTheme a, TextTheme b, double t) {\n  assert(t != null);\n  return TextTheme(\n    display4: TextStyle.lerp(a?.display4, b?.display4, t),\n    display3: TextStyle.lerp(a?.display3, b?.display3, t),\n    display2: TextStyle.lerp(a?.display2, b?.display2, t),\n    display1: TextStyle.lerp(a?.display1, b?.display1, t),\n    headline: TextStyle.lerp(a?.headline, b?.headline, t),\n    title: TextStyle.lerp(a?.title, b?.title, t),\n    subhead: TextStyle.lerp(a?.subhead, b?.subhead, t),\n    body2: TextStyle.lerp(a?.body2, b?.body2, t),\n    body1: TextStyle.lerp(a?.body1, b?.body1, t),\n    caption: TextStyle.lerp(a?.caption, b?.caption, t),\n    button: TextStyle.lerp(a?.button, b?.button, t),\n    subtitle: TextStyle.lerp(a?.subtitle, b?.subtitle, t),\n    overline: TextStyle.lerp(a?.overline, b?.overline, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "merge",
            "type": "material.TextTheme",
            "desc": "<p>Creates a new <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> where each text style from this object has been\nmerged with the matching text style from the <code>other<\/code> object.<\/p>\n<p>The merging is done by calling <a href=\"material\/TextTheme\/merge.html\">TextStyle.merge<\/a> on each respective pair\nof text styles from this and the <code>other<\/code> text themes and is subject to\nthe value of <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> flag. For more details, see the\ndocumentation on <a href=\"material\/TextTheme\/merge.html\">TextStyle.merge<\/a> and <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a>.<\/p>\n<p>If this theme, or the <code>other<\/code> theme has members that are null, then the\nnon-null one (if any) is used. If the <code>other<\/code> theme is itself null, then\nthis <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> is returned unchanged. If values in both are set, then\nthe values are merged using <a href=\"material\/TextTheme\/merge.html\">TextStyle.merge<\/a>.<\/p>\n<p>This is particularly useful if one <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> defines one set of\nproperties and another defines a different set, e.g. having colors\ndefined in one text theme and font sizes in another, or when one\n<a href=\"material\/TextTheme-class.html\">TextTheme<\/a> has only some fields defined, and you want to define the rest\nby merging it with a default theme.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/\/ A Widget that sets the ambient theme's title text color for its\n\/\/\/ descendants, while leaving other ambient theme attributes alone.\nclass TitleColorTheme extends StatelessWidget {\n  TitleColorTheme({Key key, this.child, this.titleColor}) : super(key: key);\n\n  final Color titleColor;\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    ThemeData theme = Theme.of(context);\n    \/\/ This partialTheme is incomplete: it only has the title style\n    \/\/ defined. Just replacing theme.textTheme with partialTheme would\n    \/\/ set the title, but everything else would be null. This isn't very\n    \/\/ useful, so merge it with the existing theme to keep all of the\n    \/\/ preexisting definitions for the other styles.\n    TextTheme partialTheme = TextTheme(title: TextStyle(color: titleColor));\n    theme = theme.copyWith(textTheme: theme.textTheme.merge(partialTheme));\n    return Theme(data: theme, child: child);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/TextTheme\/copyWith.html\">copyWith<\/a> is used instead of <a href=\"material\/TextTheme\/merge.html\">merge<\/a> when you wish to override\nindividual fields in the <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> instead of merging all of the\nfields of two <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>s.<\/li><\/ul>",
            "static": false,
            "memberOf": "material.TextTheme",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "material.TextTheme",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "material\/TextTheme\/merge.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextTheme merge(TextTheme other) {\n  if (other == null)\n    return this;\n  return copyWith(\n    display4: display4?.merge(other.display4) ?? other.display4,\n    display3: display3?.merge(other.display3) ?? other.display3,\n    display2: display2?.merge(other.display2) ?? other.display2,\n    display1: display1?.merge(other.display1) ?? other.display1,\n    headline: headline?.merge(other.headline) ?? other.headline,\n    title: title?.merge(other.title) ?? other.title,\n    subhead: subhead?.merge(other.subhead) ?? other.subhead,\n    body2: body2?.merge(other.body2) ?? other.body2,\n    body1: body1?.merge(other.body1) ?? other.body1,\n    caption: caption?.merge(other.caption) ?? other.caption,\n    button: button?.merge(other.button) ?? other.button,\n    subtitle: subtitle?.merge(other.subtitle) ?? other.subtitle,\n    overline: overline?.merge(other.overline) ?? other.overline,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "body1",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for the default text style for <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/body1.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle body1\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "body2",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for emphasizing text that would otherwise be <a href=\"material\/TextTheme\/body1.html\">body1<\/a>.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/body2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle body2\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "button",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for text on <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a> and <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/button.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle button\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "caption",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for auxiliary text associated with images.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/caption.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle caption\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "display1",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Large text.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/display1.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle display1\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "display2",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Very large text.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/display2.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle display2\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "display3",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Very, very large text.<\/p>\n<p>Used for the date in the dialog shown by <a href=\"material\/showDatePicker.html\">showDatePicker<\/a>.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/display3.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle display3\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "display4",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Extremely large text.<\/p>\n<p>The font size is 112 pixels.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/display4.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle display4\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/TextTheme\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/TextTheme\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/TextTheme\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/TextTheme\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/TextTheme\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/TextTheme\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  \/\/ The hashValues() function supports up to 20 arguments.\n  return hashValues(\n    display4,\n    display3,\n    display2,\n    display1,\n    headline,\n    title,\n    subhead,\n    body2,\n    body1,\n    caption,\n    button,\n    subtitle,\n    overline,\n  );\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "headline",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for large text in dialogs (e.g., the month and year in the dialog\nshown by <a href=\"material\/showDatePicker.html\">showDatePicker<\/a>).<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/headline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle headline\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "overline",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>The smallest style,<\/p>\n<p>Typically used for captions or to introduce a (larger) headline.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/overline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle overline\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "subhead",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for the primary text in lists (e.g., <a href=\"material\/TextTheme\/title.html\">ListTile.title<\/a>).<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/subhead.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle subhead\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "subtitle",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>For medium emphasis text that's a little smaller than <a href=\"material\/TextTheme\/subhead.html\">subhead<\/a>.<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/subtitle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle subtitle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "title",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>Used for the primary text in app bars and dialogs (e.g., <a href=\"material\/TextTheme\/title.html\">AppBar.title<\/a>\nand <a href=\"material\/TextTheme\/title.html\">AlertDialog.title<\/a>).<\/p>\n        ",
            "memberOf": "material.TextTheme",
            "isConstant": false,
            "href": "material\/TextTheme\/title.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle title\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/TextTheme-class.html",
    "desc": "<p>Material design text theme.<\/p>\n<p>Definitions for the various typographical styles found in material design\n(e.g., button, caption). Rather than creating a <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> directly,\nyou can obtain an instance as <a href=\"material\/Typography\/black.html\">Typography.black<\/a> or <a href=\"material\/Typography\/white.html\">Typography.white<\/a>.<\/p>\n<p>To obtain the current text theme, call <a href=\"material\/Theme\/of.html\">Theme.of<\/a> with the current\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and read the <a href=\"material\/ThemeData\/textTheme.html\">ThemeData.textTheme<\/a> property.<\/p>\n<p>The Material Design typography scheme was significantly changed in the\ncurrent (2018) version of the specification\n(<a href=\"https:\/\/material.io\/design\/typography)\">https:\/\/material.io\/design\/typography)<\/a>.<\/p>\n<p>The 2018 spec has thirteen text styles:<\/p>\n<pre class=\"language-dart\"><code>NAME         SIZE  WEIGHT  SPACING\nheadline1    96.0  light   -1.5\nheadline2    60.0  light   -0.5\nheadline3    48.0  normal   0.0\nheadline4    34.0  normal   0.25\nheadline5    24.0  normal   0.0\nheadline6    20.0  medium   0.15\nsubtitle1    16.0  normal   0.15\nsubtitle2    14.0  medium   0.1\nbody1        16.0  normal   0.5\nbody2        14.0  normal   0.25\nbutton       14.0  medium   0.75\ncaption      12.0  normal   0.4\noverline     10.0  normal   1.5\n\n<\/code><\/pre>\n<p>Where \"light\" is <code>FontWeight.w300<\/code>, \"normal\" is <code>FontWeight.w400<\/code> and\n\"medium\" is <code>FontWeight.w500<\/code>.<\/p>\n<p>The <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> API is based on the original material (2014)\ndesign spec, which used different text style names. For backwards\ncompatibility's sake, this API continues to use the original\nnames. The table below should help with understanding the API in\nterms of the 2018 material spec.<\/p>\n<p>Each of the <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> text styles corresponds to one of the\nstyles from 2018 spec. By default, the font sizes, font weights\nand letter spacings have not changed from their original,\n2014, values.<\/p>\n<pre class=\"language-dart\"><code>NAME       SIZE   WEIGHT   SPACING  2018 NAME\ndisplay4   112.0  thin     0.0      headline1\ndisplay3   56.0   normal   0.0      headline2\ndisplay2   45.0   normal   0.0      headline3\ndisplay1   34.0   normal   0.0      headline4\nheadline   24.0   normal   0.0      headline5\ntitle      20.0   medium   0.0      headline6\nsubhead    16.0   normal   0.0      subtitle1\nbody2      14.0   medium   0.0      body1\nbody1      14.0   normal   0.0      body2\ncaption    12.0   normal   0.0      caption\nbutton     14.0   medium   0.0      button\nsubtitle   14.0   medium   0.0      subtitle2\noverline   10.0   normal   0.0      overline\n<\/code><\/pre>\n<p>Where \"thin\" is <code>FontWeight.w100<\/code>, \"normal\" is <code>FontWeight.w400<\/code> and\n\"medium\" is <code>FontWeight.w500<\/code>. Letter spacing for all of the original\ntext styles was 0.0.<\/p>\n<p>To configure a <a href=\"material\/Theme-class.html\">Theme<\/a> for the new sizes, weights, and letter spacings,\ninitialize its <a href=\"material\/ThemeData\/typography.html\">ThemeData.typography<\/a> value with a <a href=\"material\/Typography-class.html\">Typography<\/a> that\nobject that specifies the 2018 versions of the geometry themes:\n<a href=\"material\/Typography\/englishLike2018-constant.html\">Typography.englishLike2018<\/a>, <a href=\"material\/Typography\/dense2018-constant.html\">Typography.dense2018<\/a>,\nand <a href=\"material\/Typography\/tall2018-constant.html\">Typography.tall2018<\/a>.<\/p>\n<p>The following image <a href=\"https:\/\/material.io\/go\/design-typography#typography-styles\">from the material design\nspecification<\/a>\nshows the recommended styles for each of the properties of a <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>.\nThis image uses the <code>Roboto<\/code> font, which is the font used on Android. On\niOS, the <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/visual-design\/typography\/\">San Francisco\nfont<\/a>\nis automatically used instead.<\/p>\n<p><img alt=\"To see the image, visit the typography site referenced below.\" src=\"https:\/\/storage.googleapis.com\/material-design\/publish\/material_v_11\/assets\/0Bzhp5Z4wHba3alhXZ2pPWGk3Zjg\/style_typography_styles_scale.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Typography-class.html\">Typography<\/a>, the class that generates <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>s appropriate for a platform.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a>, for other aspects of a material design application that can be\nglobally adjusted, such as the color scheme.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/typography\/\">material.io\/design\/typography\/<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextTheme"
}