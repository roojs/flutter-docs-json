{
    "desc": "<p>Implements a single iOS application page's layout.<\/p>\n<p>The scaffold lays out the navigation bar on top and the content between or\nbehind the navigation bar.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>, a similar widget for tabbed applications.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>, a modal page route that typically hosts a\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a> with support for iOS-style page transitions.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "cupertino\/CupertinoPageScaffold-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "cupertino",
    "name": "cupertino.CupertinoPageScaffold",
    "shortname": "CupertinoPageScaffold",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a layout for pages with a navigation bar at the top.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoPageScaffold({\n  Key key,\n  this.navigationBar,\n  this.backgroundColor,\n  this.resizeToAvoidBottomInset = true,\n  @required this.child,\n}) : assert(child != null),\n     assert(resizeToAvoidBottomInset != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageScaffold\/CupertinoPageScaffold.html",
            "isDeprecated": "0",
            "type": "",
            "name": "CupertinoPageScaffold",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "cupertino.CupertinoPageScaffold",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "navigationBar",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "cupertino.ObstructingPreferredSizeWidget"
                },
                {
                    "name": "resizeToAvoidBottomInset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoPageScaffold\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final List&lt;Widget&gt; stacked = &lt;Widget&gt;[];\n\n  Widget paddedContent = child;\n  if (navigationBar != null) {\n    final MediaQueryData existingMediaQuery = MediaQuery.of(context);\n\n    \/\/ TODO(xster): Use real size after partial layout instead of preferred size.\n    \/\/ https:\/\/github.com\/flutter\/flutter\/issues\/12912\n    final double topPadding =\n        navigationBar.preferredSize.height + existingMediaQuery.padding.top;\n\n    \/\/ Propagate bottom padding and include viewInsets if appropriate\n    final double bottomPadding = resizeToAvoidBottomInset\n        ? existingMediaQuery.viewInsets.bottom\n        : 0.0;\n\n    final EdgeInsets newViewInsets = resizeToAvoidBottomInset\n        \/\/ The insets are consumed by the scaffolds and no longer exposed to\n        \/\/ the descendant subtree.\n        ? existingMediaQuery.viewInsets.copyWith(bottom: 0.0)\n        : existingMediaQuery.viewInsets;\n\n    final bool fullObstruction =\n      navigationBar.fullObstruction ?? CupertinoTheme.of(context).barBackgroundColor.alpha == 0xFF;\n\n    \/\/ If navigation bar is opaquely obstructing, directly shift the main content\n    \/\/ down. If translucent, let main content draw behind navigation bar but hint the\n    \/\/ obstructed area.\n    if (fullObstruction) {\n      paddedContent = MediaQuery(\n        data: existingMediaQuery.copyWith(\n          viewInsets: newViewInsets,\n        ),\n        child: Padding(\n          padding: EdgeInsets.only(top: topPadding, bottom: bottomPadding),\n          child: child,\n        ),\n      );\n    } else {\n      paddedContent = MediaQuery(\n        data: existingMediaQuery.copyWith(\n          padding: existingMediaQuery.padding.copyWith(\n            top: topPadding,\n          ),\n          viewInsets: newViewInsets,\n        ),\n        child: Padding(\n          padding: EdgeInsets.only(bottom: bottomPadding),\n          child: child,\n        ),\n      );\n    }\n  }\n\n  \/\/ The main content being at the bottom is added to the stack first.\n  stacked.add(paddedContent);\n\n  if (navigationBar != null) {\n    stacked.add(Positioned(\n      top: 0.0,\n      left: 0.0,\n      right: 0.0,\n      child: navigationBar,\n    ));\n  }\n\n  return DecoratedBox(\n    decoration: BoxDecoration(\n      color: backgroundColor ?? CupertinoTheme.of(context).scaffoldBackgroundColor,\n    ),\n    child: Stack(\n      children: stacked,\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPageScaffold\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPageScaffold",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color of the widget that underlies the entire scaffold.<\/p>\n<p>By default uses <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>scaffoldBackgroundColor<\/code> when null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageScaffold\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "cupertino.CupertinoPageScaffold",
            "params": []
        },
        {
            "desc": "<p>Widget to show in the main content area.<\/p>\n<p>Content can slide under the <a href=\"cupertino\/CupertinoPageScaffold\/navigationBar.html\">navigationBar<\/a> when they're translucent.\nIn that case, the child's <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>'s <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> will have a\ntop padding indicating the area of obstructing overlap from the\n<a href=\"cupertino\/CupertinoPageScaffold\/navigationBar.html\">navigationBar<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageScaffold\/child.html",
            "name": "child",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "cupertino.CupertinoPageScaffold",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"cupertino\/CupertinoPageScaffold\/navigationBar.html\">navigationBar<\/a>, typically a <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>, is drawn at the\ntop of the screen.<\/p>\n<p>If translucent, the main content may slide behind it.\nOtherwise, the main content's top margin will be offset by its height.<\/p>\n<p>The scaffold assumes the navigation bar will consume the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> top padding.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ObstructingPreferredSizeWidget navigationBar\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageScaffold\/navigationBar.html",
            "name": "navigationBar",
            "isDeprecated": "0",
            "type": "cupertino.ObstructingPreferredSizeWidget",
            "memberOf": "cupertino.CupertinoPageScaffold",
            "params": []
        },
        {
            "desc": "<p>Whether the <a href=\"cupertino\/CupertinoPageScaffold\/child.html\">child<\/a> should size itself to avoid the window's bottom inset.<\/p>\n<p>For example, if there is an onscreen keyboard displayed above the\nscaffold, the body can be resized to avoid overlapping the keyboard, which\nprevents widgets inside the body from being obscured by the keyboard.<\/p>\n<p>Defaults to true and cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool resizeToAvoidBottomInset\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPageScaffold\/resizeToAvoidBottomInset.html",
            "name": "resizeToAvoidBottomInset",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoPageScaffold",
            "params": []
        }
    ]
}