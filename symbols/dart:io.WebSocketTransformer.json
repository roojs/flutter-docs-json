{
    "desc": "<p>The <a href=\"dart-io\/WebSocketTransformer-class.html\">WebSocketTransformer<\/a> provides the ability to upgrade a\n<a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> to a <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> connection. It supports both\nupgrading a single <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> and upgrading a stream of\n<a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a>s.<\/p>\n<p>To upgrade a single <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> use the static <a href=\"dart-io\/WebSocketTransformer\/upgrade.html\">upgrade<\/a> method.<\/p>\n<pre class=\"language-dart\"><code>HttpServer server;\nserver.listen((request) {\n  if (...) {\n    WebSocketTransformer.upgrade(request).then((websocket) {\n      ...\n    });\n  } else {\n    \/\/ Do normal HTTP request processing.\n  }\n});\n<\/code><\/pre>\n<p>To transform a stream of <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> events as it implements a\nstream transformer that transforms a stream of HttpRequest into a\nstream of WebSockets by upgrading each HttpRequest from the HTTP or\nHTTPS server, to the WebSocket protocol.<\/p>\n<pre class=\"language-dart\"><code>server.transform(new WebSocketTransformer()).listen((webSocket) =&gt; ...);\n<\/code><\/pre>\n<p>This transformer strives to implement WebSockets as specified by RFC6455.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/WebSocketTransformer-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.WebSocketTransformer",
    "shortname": "WebSocketTransformer",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a new <a href=\"dart-io\/WebSocketTransformer-class.html\">WebSocketTransformer<\/a>.<\/p>\n<p>If <code>protocolSelector<\/code> is provided, <code>protocolSelector<\/code> will be called to\nselect what protocol to use, if any were provided by the client.\n<code>protocolSelector<\/code> is should return either a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompleting with a <a href=\"dart-core\/String-class.html\">String<\/a>. The <a href=\"dart-core\/String-class.html\">String<\/a> must exist in the list of\nprotocols.<\/p>\n<p>If <code>compression<\/code> is provided, the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> created will be configured\nto negotiate with the specified <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>. If none is specified\nthen the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> will be created with the default <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory WebSocketTransformer(\n    {\/*String|Future&lt;String&gt;*\/ protocolSelector(List&lt;String&gt; protocols),\n    CompressionOptions compression: CompressionOptions.compressionDefault}) {\n  return new _WebSocketTransformerImpl(protocolSelector, compression);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocketTransformer\/WebSocketTransformer.html",
            "isDeprecated": false,
            "type": "",
            "name": "WebSocketTransformer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.WebSocketTransformer",
            "params": [
                {
                    "name": "compression",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:io.CompressionOptions"
                },
                {
                    "name": "protocols",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Checks whether the request is a valid WebSocket upgrade request.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isUpgradeRequest(HttpRequest request) {\n  return _WebSocketTransformerImpl._isUpgradeRequest(request);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocketTransformer\/isUpgradeRequest.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isUpgradeRequest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocketTransformer",
            "params": [
                {
                    "name": "request",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.HttpRequest"
                }
            ]
        },
        {
            "desc": "<p>Upgrades a <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> to a <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> connection. If the\nrequest is not a valid WebSocket upgrade request an HTTP response\nwith status code 500 will be returned. Otherwise the returned\nfuture will complete with the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> when the upgrade process\nis complete.<\/p>\n<p>If <code>protocolSelector<\/code> is provided, <code>protocolSelector<\/code> will be called to\nselect what protocol to use, if any were provided by the client.\n<code>protocolSelector<\/code> is should return either a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompleting with a <a href=\"dart-core\/String-class.html\">String<\/a>. The <a href=\"dart-core\/String-class.html\">String<\/a> must exist in the list of\nprotocols.<\/p>\n<p>If <code>compression<\/code> is provided, the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> created will be configured\nto negotiate with the specified <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>. If none is specified\nthen the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> will be created with the default <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;WebSocket&gt; upgrade(HttpRequest request,\n    {protocolSelector(List&lt;String&gt; protocols),\n    CompressionOptions compression: CompressionOptions.compressionDefault}) {\n  return _WebSocketTransformerImpl._upgrade(\n      request, protocolSelector, compression);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocketTransformer\/upgrade.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.WebSocket>",
            "name": "upgrade",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocketTransformer",
            "params": [
                {
                    "name": "compression",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.CompressionOptions"
                },
                {
                    "name": "protocols",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                },
                {
                    "name": "request",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.HttpRequest"
                }
            ]
        }
    ],
    "props": []
}