{
    "name": "widgets.StatusTransitionWidget",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "StatusTransitionWidget",
            "type": "",
            "desc": "<p>Initializes fields for subclasses.<\/p>\n<p>The <code>animation<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StatusTransitionWidget",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "animation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "widgets\/StatusTransitionWidget\/StatusTransitionWidget.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StatusTransitionWidget({\n  Key key,\n  @required this.animation,\n}) : assert(animation != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to build widgets that depend on the current status\nof the animation.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StatusTransitionWidget",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/StatusTransitionWidget\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/StatusTransitionWidget\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.StatusTransitionWidget",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/StatusTransitionWidget\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_StatusTransitionState createState() =&gt; _StatusTransitionState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "animation",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation to which this widget is listening.<\/p>\n        ",
            "memberOf": "widgets.StatusTransitionWidget",
            "isConstant": false,
            "href": "widgets\/StatusTransitionWidget\/animation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; animation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/StatusTransitionWidget-class.html",
    "desc": "<p>A widget that rebuilds when the given animation changes status.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StatusTransitionWidget"
}