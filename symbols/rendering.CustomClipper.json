{
    "desc": "<p>An interface for providing custom clips.<\/p>\n<p>This class is used by a number of clip widgets (e.g., <a href=\"widgets\/ClipRect-class.html\">ClipRect<\/a> and\n<a href=\"widgets\/ClipPath-class.html\">ClipPath<\/a>).<\/p>\n<p>The <a href=\"rendering\/CustomClipper\/getClip.html\">getClip<\/a> method is called whenever the custom clip needs to be updated.<\/p>\n<p>The <a href=\"rendering\/CustomClipper\/shouldReclip.html\">shouldReclip<\/a> method is called when a new instance of the class\nis provided, to check if the new instance actually represents different\ninformation.<\/p>\n<p>The most efficient way to update the clip provided by this class is to\nsupply a <code>reclip<\/code> argument to the constructor of the <a href=\"rendering\/CustomClipper-class.html\">CustomClipper<\/a>. The\ncustom object will listen to this animation and update the clip whenever the\nanimation ticks, avoiding both the build and layout phases of the pipeline.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ClipRect-class.html\">ClipRect<\/a>, which can be customized with a <a href=\"rendering\/CustomClipper-class.html\">CustomClipper&lt;Rect&gt;<\/a>.<\/li>\n<li>\n<a href=\"widgets\/ClipRRect-class.html\">ClipRRect<\/a>, which can be customized with a <a href=\"rendering\/CustomClipper-class.html\">CustomClipper&lt;RRect&gt;<\/a>.<\/li>\n<li>\n<a href=\"widgets\/ClipOval-class.html\">ClipOval<\/a>, which can be customized with a <a href=\"rendering\/CustomClipper-class.html\">CustomClipper&lt;Rect&gt;<\/a>.<\/li>\n<li>\n<a href=\"widgets\/ClipPath-class.html\">ClipPath<\/a>, which can be customized with a <a href=\"rendering\/CustomClipper-class.html\">CustomClipper&lt;Path&gt;<\/a>.<\/li>\n<li>\n<a href=\"rendering\/ShapeBorderClipper-class.html\">ShapeBorderClipper<\/a>, for specifying a clip path using a <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/CustomClipper-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.CustomClipper",
    "shortname": "CustomClipper",
    "extends": [],
    "realImplementors": [
        "rendering.ShapeBorderClipper"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a custom clipper.<\/p>\n<p>The clipper will update its clip whenever <code>reclip<\/code> notifies its listeners.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CustomClipper({ Listenable reclip }) : _reclip = reclip;<\/code><\/pre>\n    ",
            "href": "rendering\/CustomClipper\/CustomClipper.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.CustomClipper",
            "params": [
                {
                    "name": "reclip",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Listenable"
                }
            ]
        },
        {
            "desc": "<p>Returns an approximation of the clip returned by <a href=\"rendering\/CustomClipper\/getClip.html\">getClip<\/a>, as\nan axis-aligned Rect. This is used by the semantics layer to\ndetermine whether widgets should be excluded.<\/p>\n<p>By default, this returns a rectangle that is the same size as\nthe RenderObject. If getClip returns a shape that is roughly the\nsame size as the RenderObject (e.g. it's a rounded rectangle\nwith very small arcs in the corners), then this may be adequate.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect getApproximateClipRect(Size size) =&gt; Offset.zero &amp; size;<\/code><\/pre>\n    ",
            "href": "rendering\/CustomClipper\/getApproximateClipRect.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomClipper",
            "params": [
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Returns a description of the clip given that the render object being\nclipped is of the given size.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T getClip(Size size);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomClipper\/getClip.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomClipper",
            "params": [
                {
                    "name": "size",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Called whenever a new instance of the custom clipper delegate class is\nprovided to the clip object, or any time that a new clip object is created\nwith a new instance of the custom painter delegate class (which amounts to\nthe same thing, because the latter is implemented in terms of the former).<\/p>\n<p>If the new instance represents different information than the old\ninstance, then the method should return true, otherwise it should return\nfalse.<\/p>\n<p>If the method returns false, then the <a href=\"rendering\/CustomClipper\/getClip.html\">getClip<\/a> call might be optimized\naway.<\/p>\n<p>It's possible that the <a href=\"rendering\/CustomClipper\/getClip.html\">getClip<\/a> method will get called even if\n<a href=\"rendering\/CustomClipper\/shouldReclip.html\">shouldReclip<\/a> returns false or if the <a href=\"rendering\/CustomClipper\/shouldReclip.html\">shouldReclip<\/a> method is never\ncalled at all (e.g. if the box changes size).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldReclip(covariant CustomClipper&lt;T&gt; oldClipper);<\/code><\/pre>\n    ",
            "href": "rendering\/CustomClipper\/shouldReclip.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomClipper",
            "params": [
                {
                    "name": "oldClipper",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.CustomClipper"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "href": "rendering\/CustomClipper\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.CustomClipper",
            "params": []
        }
    ],
    "props": []
}