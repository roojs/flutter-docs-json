{
    "desc": "<p>A material design data table that shows data using multiple pages.<\/p>\n<p>A paginated data table shows <a href=\"material\/PaginatedDataTable\/rowsPerPage.html\">rowsPerPage<\/a> rows of data per page and\nprovides controls for showing other pages.<\/p>\n<p>Data is read lazily from from a <a href=\"material\/DataTableSource-class.html\">DataTableSource<\/a>. The widget is presented\nas a <a href=\"material\/Card-class.html\">Card<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/DataTable-class.html\">DataTable<\/a>, which is not paginated.<\/li>\n<li><a href=\"https:\/\/material.io\/go\/design-data-tables#data-tables-tables-within-cards\">material.io\/go\/design-data-tables#data-tables-tables-within-cards<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/PaginatedDataTable-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.PaginatedDataTable",
    "shortname": "PaginatedDataTable",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "material.PaginatedDataTableState"
    ],
    "events": [
        {
            "desc": "<p>Invoked when the user switches to another page.<\/p>\n<p>The value is the index of the first row on the currently displayed page.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;int&gt; onPageChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/onPageChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.int>",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>Invoked when the user selects a different number of rows per page.<\/p>\n<p>If this is null, then the value given by <a href=\"material\/PaginatedDataTable\/rowsPerPage.html\">rowsPerPage<\/a> will be used\nand no affordance will be provided to change the value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;int&gt; onRowsPerPageChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/onRowsPerPageChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.int>",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>Invoked when the user selects or unselects every row, using the\ncheckbox in the heading row.<\/p>\n<p>See <a href=\"material\/PaginatedDataTable\/onSelectAll.html\">DataTable.onSelectAll<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueSetter&lt;bool&gt; onSelectAll\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/onSelectAll.html",
            "isDeprecated": "0",
            "type": "foundation.ValueSetter<dart:core.bool>",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget describing a paginated <a href=\"material\/DataTable-class.html\">DataTable<\/a> on a <a href=\"material\/Card-class.html\">Card<\/a>.<\/p>\n<p>The <code>header<\/code> should give the card's header, typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget. It\nmust not be null.<\/p>\n<p>The <code>columns<\/code> argument must be a list of as many <a href=\"material\/DataColumn-class.html\">DataColumn<\/a> objects as\nthe table is to have columns, ignoring the leading checkbox column if any.\nThe <code>columns<\/code> argument must have a length greater than zero and cannot be\nnull.<\/p>\n<p>If the table is sorted, the column that provides the current primary key\nshould be specified by index in <code>sortColumnIndex<\/code>, 0 meaning the first\ncolumn in <code>columns<\/code>, 1 being the next one, and so forth.<\/p>\n<p>The actual sort order can be specified using <code>sortAscending<\/code>; if the sort\norder is ascending, this should be true (the default), otherwise it should\nbe false.<\/p>\n<p>The <code>source<\/code> must not be null. The <code>source<\/code> should be a long-lived\n<a href=\"material\/DataTableSource-class.html\">DataTableSource<\/a>. The same source should be provided each time a\nparticular <a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a> widget is created; avoid creating a new\n<a href=\"material\/DataTableSource-class.html\">DataTableSource<\/a> with each new instance of the <a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a>\nwidget unless the data table really is to now show entirely different\ndata from a new source.<\/p>\n<p>The <code>rowsPerPage<\/code> and <code>availableRowsPerPage<\/code> must not be null (they\nboth have defaults, though, so don't have to be specified).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PaginatedDataTable({\n  Key key,\n  @required this.header,\n  this.actions,\n  @required this.columns,\n  this.sortColumnIndex,\n  this.sortAscending = true,\n  this.onSelectAll,\n  this.initialFirstRowIndex = 0,\n  this.onPageChanged,\n  this.rowsPerPage = defaultRowsPerPage,\n  this.availableRowsPerPage = const &lt;int&gt;[defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10],\n  this.onRowsPerPageChanged,\n  this.dragStartBehavior = DragStartBehavior.start,\n  @required this.source,\n}) : assert(header != null),\n     assert(columns != null),\n     assert(dragStartBehavior != null),\n     assert(columns.isNotEmpty),\n     assert(sortColumnIndex == null || (sortColumnIndex &gt;= 0 &amp;&amp; sortColumnIndex &lt; columns.length)),\n     assert(sortAscending != null),\n     assert(rowsPerPage != null),\n     assert(rowsPerPage &gt; 0),\n     assert(() {\n       if (onRowsPerPageChanged != null)\n         assert(availableRowsPerPage != null &amp;&amp; availableRowsPerPage.contains(rowsPerPage));\n       return true;\n     }()),\n     assert(source != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/PaginatedDataTable\/PaginatedDataTable.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.PaginatedDataTable",
            "params": [
                {
                    "name": "actions",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "availableRowsPerPage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "columns",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<material.DataColumn>"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "header",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "initialFirstRowIndex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onPageChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.int>"
                },
                {
                    "name": "onRowsPerPageChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.int>"
                },
                {
                    "name": "onSelectAll",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueSetter<dart:core.bool>"
                },
                {
                    "name": "rowsPerPage",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "sortAscending",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "sortColumnIndex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.DataTableSource"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/PaginatedDataTable\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPaginatedDataTableState createState() =&gt; PaginatedDataTableState();<\/code><\/pre>\n    ",
            "href": "material\/PaginatedDataTable\/createState.html",
            "isDeprecated": "0",
            "type": "material.PaginatedDataTableState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.PaginatedDataTable",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Icon buttons to show at the top right of the table.<\/p>\n<p>Typically, the exact actions included in this list will vary based on\nwhether any rows are selected or not.<\/p>\n<p>These should be size 24.0 with default padding (8.0).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; actions\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/actions.html",
            "isDeprecated": "0",
            "type": "dart:core.List<widgets.Widget>",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The options to offer for the rowsPerPage.<\/p>\n<p>The current <a href=\"material\/PaginatedDataTable\/rowsPerPage.html\">rowsPerPage<\/a> must be a value in this list.<\/p>\n<p>The values in this list should be sorted in ascending order.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; availableRowsPerPage\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/availableRowsPerPage.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.int>",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The configuration and labels for the columns in the table.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;DataColumn&gt; columns\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/columns.html",
            "isDeprecated": "0",
            "type": "dart:core.List<material.DataColumn>",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/PaginatedDataTable\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/dragStartBehavior.html",
            "isDeprecated": "0",
            "type": "gestures.DragStartBehavior",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The table card's header.<\/p>\n<p>This is typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget, but can also be a <a href=\"material\/ButtonBar-class.html\">ButtonBar<\/a> with\n<a href=\"material\/FlatButton-class.html\">FlatButton<\/a>s. Suitable defaults are automatically provided for the font,\nbutton color, button padding, and so forth.<\/p>\n<p>If items in the table are selectable, then, when the selection is not\nempty, the header is replaced by a count of the selected items.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget header\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/header.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The index of the first row to display when the widget is first created.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int initialFirstRowIndex\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/initialFirstRowIndex.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The number of rows to show on each page.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"material\/PaginatedDataTable\/onRowsPerPageChanged.html\">onRowsPerPageChanged<\/a><\/li>\n<li><a href=\"material\/PaginatedDataTable\/defaultRowsPerPage-constant.html\">defaultRowsPerPage<\/a><\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int rowsPerPage\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/rowsPerPage.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>Whether the column mentioned in <a href=\"material\/PaginatedDataTable\/sortColumnIndex.html\">sortColumnIndex<\/a>, if any, is sorted\nin ascending order.<\/p>\n<p>See <a href=\"material\/PaginatedDataTable\/sortAscending.html\">DataTable.sortAscending<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool sortAscending\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/sortAscending.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The current primary sort key's column.<\/p>\n<p>See <a href=\"material\/PaginatedDataTable\/sortColumnIndex.html\">DataTable.sortColumnIndex<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int sortColumnIndex\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/sortColumnIndex.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        },
        {
            "desc": "<p>The data source which provides data to show in each row. Must be non-null.<\/p>\n<p>This object should generally have a lifetime longer than the\n<a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a> widget itself; it should be reused each time the\n<a href=\"material\/PaginatedDataTable-class.html\">PaginatedDataTable<\/a> constructor is called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DataTableSource source\n\n<\/code><\/pre>\n        ",
            "href": "material\/PaginatedDataTable\/source.html",
            "isDeprecated": "0",
            "type": "material.DataTableSource",
            "memberOf": "material.PaginatedDataTable",
            "params": []
        }
    ]
}