{
    "name": "widgets.PageController",
    "extends": [
        "widgets.ScrollController",
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "PageController",
            "type": "",
            "desc": "<p>Creates a page controller.<\/p>\n<p>The <code>initialPage<\/code>, <code>keepPage<\/code>, and <code>viewportFraction<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "initialPage",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "keepPage",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "viewportFraction",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/PageController\/PageController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PageController({\n  this.initialPage = 0,\n  this.keepPage = true,\n  this.viewportFraction = 1.0,\n}) : assert(initialPage != null),\n     assert(keepPage != null),\n     assert(viewportFraction != null),\n     assert(viewportFraction &gt; 0.0);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "animateToPage",
            "type": "dart:async.Future",
            "desc": "<p>Animates the controlled <a href=\"widgets\/PageView-class.html\">PageView<\/a> from the current page to the given page.<\/p>\n<p>The animation lasts for the given duration and follows the given curve.\nThe returned <a href=\"dart-async\/Future-class.html\">Future<\/a> resolves when the animation completes.<\/p>\n<p>The <code>duration<\/code> and <code>curve<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "page",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "curve",
                    "type": "animation.Curve",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageController\/animateToPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; animateToPage(\n  int page, {\n  @required Duration duration,\n  @required Curve curve,\n}) {\n  final _PagePosition position = this.position;\n  return position.animateTo(\n    position.getPixelsFromPage(page.toDouble()),\n    duration: duration,\n    curve: curve,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "attach",
            "type": "",
            "desc": "<p>Register the given position with this controller.<\/p>\n<p>After this function returns, the <a href=\"widgets\/ScrollController\/animateTo.html\">animateTo<\/a> and <a href=\"widgets\/ScrollController\/jumpTo.html\">jumpTo<\/a> methods on this\ncontroller will manipulate the given position.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollPosition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageController\/attach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(ScrollPosition position) {\n  super.attach(position);\n  final _PagePosition pagePosition = position;\n  pagePosition.viewportFraction = viewportFraction;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "createScrollPosition",
            "type": "widgets.ScrollPosition",
            "desc": "<p>Creates a <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> for use by a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n<p>Subclasses can override this function to customize the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a>\nused by the scrollable widgets they control. For example, <a href=\"widgets\/PageController-class.html\">PageController<\/a>\noverrides this function to return a page-oriented scroll position\nsubclass that keeps the same page visible when the scrollable widget\nresizes.<\/p>\n<p>By default, returns a <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a>.<\/p>\n<p>The arguments are generally passed to the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> being created:<\/p>\n<ul>\n<li>\n<code>physics<\/code>: An instance of <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> that determines how the\n<a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> should react to user interactions, how it should\nsimulate scrolling when released or flung, etc. The value will not be\nnull. It typically comes from the <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> or other widget that\ncreates the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, or, if none was provided, from the ambient\n<a href=\"widgets\/ScrollConfiguration-class.html\">ScrollConfiguration<\/a>.<\/li>\n<li>\n<code>context<\/code>: A <a href=\"widgets\/ScrollContext-class.html\">ScrollContext<\/a> used for communicating with the object\nthat is to own the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> (typically, this is the\n<a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> itself).<\/li>\n<li>\n<code>oldPosition<\/code>: If this is not the first time a <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> has\nbeen created for this <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, this will be the previous instance.\nThis is used when the environment has changed and the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>\nneeds to recreate the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> object. It is null the first\ntime the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> is created.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "physics",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "context",
                    "type": "widgets.ScrollContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "oldPosition",
                    "type": "widgets.ScrollPosition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageController\/createScrollPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nScrollPosition createScrollPosition(ScrollPhysics physics, ScrollContext context, ScrollPosition oldPosition) {\n  return _PagePosition(\n    physics: physics,\n    context: context,\n    initialPage: initialPage,\n    keepPage: keepPage,\n    viewportFraction: viewportFraction,\n    oldPosition: oldPosition,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "jumpToPage",
            "type": "",
            "desc": "<p>Changes which page is displayed in the controlled <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n<p>Jumps the page position from its current value to the given value,\nwithout animation, and without checking if the new value is in range.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "page",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageController\/jumpToPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void jumpToPage(int page) {\n  final _PagePosition position = this.position;\n  position.jumpTo(position.getPixelsFromPage(page.toDouble()));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "nextPage",
            "type": "dart:async.Future",
            "desc": "<p>Animates the controlled <a href=\"widgets\/PageView-class.html\">PageView<\/a> to the next page.<\/p>\n<p>The animation lasts for the given duration and follows the given curve.\nThe returned <a href=\"dart-async\/Future-class.html\">Future<\/a> resolves when the animation completes.<\/p>\n<p>The <code>duration<\/code> and <code>curve<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "curve",
                    "type": "animation.Curve",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageController\/nextPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; nextPage({ @required Duration duration, @required Curve curve }) {\n  return animateToPage(page.round() + 1, duration: duration, curve: curve);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "previousPage",
            "type": "dart:async.Future",
            "desc": "<p>Animates the controlled <a href=\"widgets\/PageView-class.html\">PageView<\/a> to the previous page.<\/p>\n<p>The animation lasts for the given duration and follows the given curve.\nThe returned <a href=\"dart-async\/Future-class.html\">Future<\/a> resolves when the animation completes.<\/p>\n<p>The <code>duration<\/code> and <code>curve<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageController",
            "sig": "",
            "params": [
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "curve",
                    "type": "animation.Curve",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageController\/previousPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; previousPage({ @required Duration duration, @required Curve curve }) {\n  return animateToPage(page.round() - 1, duration: duration, curve: curve);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "initialPage",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The page to show when first creating the <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n        ",
            "memberOf": "widgets.PageController",
            "isConstant": false,
            "href": "widgets\/PageController\/initialPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int initialPage\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "keepPage",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Save the current <a href=\"widgets\/PageController\/page.html\">page<\/a> with <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a> and restore it if\nthis controller's scrollable is recreated.<\/p>\n<p>If this property is set to false, the current <a href=\"widgets\/PageController\/page.html\">page<\/a> is never saved\nand <a href=\"widgets\/PageController\/initialPage.html\">initialPage<\/a> is always used to initialize the scroll offset.\nIf true (the default), the initial page is used the first time the\ncontroller's scrollable is created, since there's isn't a page to\nrestore yet. Subsequently the saved page is restored and\n<a href=\"widgets\/PageController\/initialPage.html\">initialPage<\/a> is ignored.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/PageStorageKey-class.html\">PageStorageKey<\/a>, which should be used when more than one\nscrollable appears in the same route, to distinguish the <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a>\nlocations used to save scroll offsets.<\/li><\/ul>",
            "memberOf": "widgets.PageController",
            "isConstant": false,
            "href": "widgets\/PageController\/keepPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool keepPage\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "page",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The current page displayed in the controlled <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n<p>There are circumstances that this <a href=\"widgets\/PageController-class.html\">PageController<\/a> can't know the current\npage. Reading <a href=\"widgets\/PageController\/page.html\">page<\/a> will throw an <a href=\"dart-core\/AssertionError-class.html\">AssertionError<\/a> in the following cases:<\/p>\n<ol><li>No <a href=\"widgets\/PageView-class.html\">PageView<\/a> is currently using this <a href=\"widgets\/PageController-class.html\">PageController<\/a>. Once a\n<a href=\"widgets\/PageView-class.html\">PageView<\/a> starts using this <a href=\"widgets\/PageController-class.html\">PageController<\/a>, the new <a href=\"widgets\/PageController\/page.html\">page<\/a>\nposition will be derived:<\/li><\/ol>\n<ul>\n<li>First, based on the attached <a href=\"widgets\/PageView-class.html\">PageView<\/a>'s <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and the\nposition saved at that context's <a href=\"widgets\/PageStorage-class.html\">PageStorage<\/a> if <a href=\"widgets\/PageController\/keepPage.html\">keepPage<\/a> is true.<\/li>\n<li>Second, from the <a href=\"widgets\/PageController-class.html\">PageController<\/a>'s <a href=\"widgets\/PageController\/initialPage.html\">initialPage<\/a>.<\/li>\n<\/ul>\n<ol start=\"2\"><li>More than one <a href=\"widgets\/PageView-class.html\">PageView<\/a> using the same <a href=\"widgets\/PageController-class.html\">PageController<\/a>.<\/li><\/ol>\n<p>The <a href=\"widgets\/ScrollController\/hasClients.html\">hasClients<\/a> property can be used to check if a <a href=\"widgets\/PageView-class.html\">PageView<\/a> is attached\nprior to accessing <a href=\"widgets\/PageController\/page.html\">page<\/a>.<\/p>\n        ",
            "memberOf": "widgets.PageController",
            "isConstant": false,
            "href": "widgets\/PageController\/page.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get page {\n  assert(\n    positions.isNotEmpty,\n    'PageController.page cannot be accessed before a PageView is built with it.',\n  );\n  assert(\n    positions.length == 1,\n    'The page property cannot be read when multiple PageViews are attached to '\n    'the same PageController.',\n  );\n  final _PagePosition position = this.position;\n  return position.page;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "viewportFraction",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The fraction of the viewport that each page should occupy.<\/p>\n<p>Defaults to 1.0, which means each page fills the viewport in the scrolling\ndirection.<\/p>\n        ",
            "memberOf": "widgets.PageController",
            "isConstant": false,
            "href": "widgets\/PageController\/viewportFraction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double viewportFraction\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/PageController-class.html",
    "desc": "<p>A controller for <a href=\"widgets\/PageView-class.html\">PageView<\/a>.<\/p>\n<p>A page controller lets you manipulate which page is visible in a <a href=\"widgets\/PageView-class.html\">PageView<\/a>.\nIn addition to being able to control the pixel offset of the content inside\nthe <a href=\"widgets\/PageView-class.html\">PageView<\/a>, a <a href=\"widgets\/PageController-class.html\">PageController<\/a> also lets you control the offset in terms\nof pages, which are increments of the viewport size.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/PageView-class.html\">PageView<\/a>, which is the widget this object controls.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "PageController"
}