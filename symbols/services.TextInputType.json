{
    "desc": "<p>The type of information for which to optimize the text input control.<\/p>\n<p>On Android, behavior may vary across device and keyboard provider.<\/p>\n<p>This class stays as close to <code>Enum<\/code> interface as possible, and allows\nfor additional flags for some input types. For example, numeric input\ncan specify whether it supports decimal numbers and\/or signed numbers.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/TextInputType-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "services",
    "name": "services.TextInputType",
    "shortname": "TextInputType",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns a representation of this object as a JSON object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; toJson() {\n  return &lt;String, dynamic&gt;{\n    'name': _name,\n    'signed': signed,\n    'decimal': decimal,\n  };\n}<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/toJson.html",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.String>",
            "name": "toJson",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType('\n      'name: $_name, '\n      'signed: $signed, '\n      'decimal: $decimal)';\n}<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.TextInputType",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Optimize for date and time information.<\/p>\n<p>On iOS, requests the default keyboard.<\/p>\n<p>On Android, requests a keyboard with ready access to the number keys,\n\":\", and \"-\".<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType datetime = TextInputType._(4)\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/datetime-constant.html",
            "name": "datetime",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>The number is decimal, allowing a decimal point to provide fractional.<\/p>\n<p>This flag is only used for the <a href=\"services\/TextInputType\/number-constant.html\">number<\/a> input type, otherwise <code>null<\/code>.\nUse <code>const TextInputType.numberWithOptions(decimal: true)<\/code> to set this.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool decimal\n\n<\/code><\/pre>\n        ",
            "href": "services\/TextInputType\/decimal.html",
            "name": "decimal",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Optimize for email addresses.<\/p>\n<p>Requests a keyboard with ready access to the \"@\" and \".\" keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType emailAddress = TextInputType._(5)\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/emailAddress-constant.html",
            "name": "emailAddress",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextInputType\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextInputType\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(index, signed, decimal);<\/code><\/pre>\n        ",
            "href": "services\/TextInputType\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Enum value index, corresponds to one of the <a href=\"services\/TextInputType\/values-constant.html\">values<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int index\n\n<\/code><\/pre>\n        ",
            "href": "services\/TextInputType\/index.html",
            "name": "index",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Optimize for multi-line textual information.<\/p>\n<p>Requests the default platform keyboard, but accepts newlines when the\nenter key is pressed. This is the input type used for all multi-line text\nfields.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType multiline = TextInputType._(1)\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/multiline-constant.html",
            "name": "multiline",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Optimize for unsigned numerical information without a decimal point.<\/p>\n<p>Requests a default keyboard with ready access to the number keys.\nAdditional options, such as decimal point and\/or positive\/negative\nsigns, can be requested using <a href=\"services\/TextInputType\/TextInputType.numberWithOptions.html\">new TextInputType.numberWithOptions<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType number = TextInputType.numberWithOptions()\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/number-constant.html",
            "name": "number",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Optimize for telephone numbers.<\/p>\n<p>Requests a keyboard with ready access to the number keys, \"*\", and \"#\".<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType phone = TextInputType._(3)\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/phone-constant.html",
            "name": "phone",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>The number is signed, allowing a positive or negative sign at the start.<\/p>\n<p>This flag is only used for the <a href=\"services\/TextInputType\/number-constant.html\">number<\/a> input type, otherwise <code>null<\/code>.\nUse <code>const TextInputType.numberWithOptions(signed: true)<\/code> to set this.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool signed\n\n<\/code><\/pre>\n        ",
            "href": "services\/TextInputType\/signed.html",
            "name": "signed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Optimize for textual information.<\/p>\n<p>Requests the default platform keyboard.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType text = TextInputType._(0)\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/text-constant.html",
            "name": "text",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>Optimize for URLs.<\/p>\n<p>Requests a keyboard with ready access to the \"\/\" and \".\" keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextInputType url = TextInputType._(6)\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/url-constant.html",
            "name": "url",
            "isDeprecated": false,
            "type": "services.TextInputType",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        },
        {
            "desc": "<p>All possible enum values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const List&lt;TextInputType&gt; values = &lt;TextInputType&gt;[\n  text, multiline, number, phone, datetime, emailAddress, url,\n]\n\n<\/code><\/pre>\n    ",
            "href": "services\/TextInputType\/values-constant.html",
            "name": "values",
            "isDeprecated": false,
            "type": "dart:core.List<services.TextInputType>",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.TextInputType",
            "params": []
        }
    ]
}