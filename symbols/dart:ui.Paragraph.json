{
    "desc": "<p>A paragraph of text.<\/p>\n<p>A paragraph retains the size and position of each glyph in the text and can\nbe efficiently resized and painted.<\/p>\n<p>To create a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> object, use a <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a>.<\/p>\n<p>Paragraphs can be displayed on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> using the <a href=\"dart-ui\/Canvas\/drawParagraph.html\">Canvas.drawParagraph<\/a>\nmethod.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/Paragraph-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.Paragraph",
    "shortname": "Paragraph",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns a list of text boxes that enclose the given text range.<\/p>\n<p>The <code>boxHeightStyle<\/code> and <code>boxWidthStyle<\/code> parameters allow customization\nof how the boxes are bound vertically and horizontally. Both style\nparameters default to the tight option, which will provide close-fitting\nboxes and will not account for any line spacing.<\/p>\n<p>The <code>boxHeightStyle<\/code> and <code>boxWidthStyle<\/code> parameters must not be null.<\/p>\n<p>See <a href=\"dart-ui\/BoxHeightStyle-class.html\">BoxHeightStyle<\/a> and <a href=\"dart-ui\/BoxWidthStyle-class.html\">BoxWidthStyle<\/a> for full descriptions of each option.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;TextBox&gt; getBoxesForRange(int start, int end, {BoxHeightStyle boxHeightStyle = BoxHeightStyle.tight, BoxWidthStyle boxWidthStyle = BoxWidthStyle.tight}) {\n  assert(boxHeightStyle != null);\n  assert(boxWidthStyle != null);\n  return _getBoxesForRange(start, end, boxHeightStyle.index, boxWidthStyle.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/Paragraph\/getBoxesForRange.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:ui.TextBox>",
            "name": "getBoxesForRange",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Paragraph",
            "params": [
                {
                    "name": "boxHeightStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.BoxHeightStyle"
                },
                {
                    "name": "boxWidthStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.BoxWidthStyle"
                },
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the text position closest to the given offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition getPositionForOffset(Offset offset) {\n  final List&lt;int&gt; encoded = _getPositionForOffset(offset.dx, offset.dy);\n  return new TextPosition(offset: encoded[0], affinity: TextAffinity.values[encoded[1]]);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/Paragraph\/getPositionForOffset.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextPosition",
            "name": "getPositionForOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Paragraph",
            "params": [
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the <code>start, end<\/code> of the word at the given offset. Characters not\npart of a word, such as spaces, symbols, and punctuation, have word breaks\non both sides. In such cases, this method will return <code>offset, offset+1<\/code>.\nWord boundaries are defined more precisely in Unicode Standard Annex #29\n<a href=\"http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries\">http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries<\/a><\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; getWordBoundary(int offset) native 'Paragraph_getWordBoundary';<\/code><\/pre>\n    ",
            "href": "dart-ui\/Paragraph\/getWordBoundary.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.int>",
            "name": "getWordBoundary",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Paragraph",
            "params": [
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Computes the size and position of each glyph in the paragraph.<\/p>\n<p>The <a href=\"dart-ui\/ParagraphConstraints-class.html\">ParagraphConstraints<\/a> control how wide the text is allowed to be.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void layout(ParagraphConstraints constraints) =&gt; _layout(constraints.width);<\/code><\/pre>\n    ",
            "href": "dart-ui\/Paragraph\/layout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "layout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Paragraph",
            "params": [
                {
                    "name": "constraints",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.ParagraphConstraints"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The distance from the top of the paragraph to the alphabetic\nbaseline of the first line, in logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get alphabeticBaseline native 'Paragraph_alphabeticBaseline';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/alphabeticBaseline.html",
            "name": "alphabeticBaseline",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        },
        {
            "desc": "<p>True if there is more vertical content, but the text was truncated, either\nbecause we reached <code>maxLines<\/code> lines of text or because the <code>maxLines<\/code> was\nnull, <code>ellipsis<\/code> was not null, and one of the lines exceeded the width\nconstraint.<\/p>\n<p>See the discussion of the <code>maxLines<\/code> and <code>ellipsis<\/code> arguments at <a href=\"dart-ui\/ParagraphStyle\/ParagraphStyle.html\">new\nParagraphStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get didExceedMaxLines native 'Paragraph_didExceedMaxLines';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/didExceedMaxLines.html",
            "name": "didExceedMaxLines",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        },
        {
            "desc": "<p>The amount of vertical space this paragraph occupies.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height native 'Paragraph_height';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/height.html",
            "name": "height",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        },
        {
            "desc": "<p>The distance from the top of the paragraph to the ideographic\nbaseline of the first line, in logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get ideographicBaseline native 'Paragraph_ideographicBaseline';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/ideographicBaseline.html",
            "name": "ideographicBaseline",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        },
        {
            "desc": "<p>Returns the smallest width beyond which increasing the width never\ndecreases the height.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get maxIntrinsicWidth native 'Paragraph_maxIntrinsicWidth';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/maxIntrinsicWidth.html",
            "name": "maxIntrinsicWidth",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        },
        {
            "desc": "<p>The minimum width that this paragraph could be without failing to paint\nits contents within itself.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minIntrinsicWidth native 'Paragraph_minIntrinsicWidth';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/minIntrinsicWidth.html",
            "name": "minIntrinsicWidth",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        },
        {
            "desc": "<p>The amount of horizontal space this paragraph occupies.<\/p>\n<p>Valid only after <a href=\"dart-ui\/Paragraph\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width native 'Paragraph_width';<\/code><\/pre>\n        ",
            "href": "dart-ui\/Paragraph\/width.html",
            "name": "width",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Paragraph",
            "params": []
        }
    ]
}