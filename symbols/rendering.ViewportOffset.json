{
    "desc": "<p>Which part of the content inside the viewport should be visible.<\/p>\n<p>The <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> value determines the scroll offset that the viewport uses to\nselect which part of its content to display. As the user scrolls the\nviewport, this value changes, which changes the content that is displayed.<\/p>\n<p>This object is a <a href=\"foundation\/Listenable-class.html\">Listenable<\/a> that notifies its listeners when <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a>\nchanges.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a>, which is a commonly used concrete subclass.<\/li>\n<li>\n<a href=\"rendering\/RenderViewportBase-class.html\">RenderViewportBase<\/a>, which is a render object that uses viewport\noffsets.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/ViewportOffset-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.ViewportOffset",
    "shortname": "ViewportOffset",
    "extends": [
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.ScrollPositionWithSingleContext"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Default constructor.<\/p>\n<p>Allows subclasses to construct this object directly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ViewportOffset();<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/ViewportOffset.html",
            "isDeprecated": false,
            "type": "",
            "name": "ViewportOffset",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": []
        },
        {
            "desc": "<p>Animates <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> from its current value to the given value.<\/p>\n<p>The returned <a href=\"dart-async\/Future-class.html\">Future<\/a> will complete when the animation ends, whether it\ncompleted successfully or whether it was interrupted prematurely.<\/p>\n<p>The duration must not be zero. To jump to a particular value without an\nanimation, use <a href=\"rendering\/ViewportOffset\/jumpTo.html\">jumpTo<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; animateTo(\n  double to, {\n  @required Duration duration,\n  @required Curve curve,\n});<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/animateTo.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "animateTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "curve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Curve"
                },
                {
                    "name": "duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "to",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called when the viewport's content extents are established.<\/p>\n<p>The arguments are the minimum and maximum scroll extents respectively. The\nminimum will be equal to or less than zero, the maximum will be equal to\nor greater than zero.<\/p>\n<p>The maximum scroll extent has the viewport dimension subtracted from it.\nFor instance, if there is 100.0 pixels of scrollable content, and the\nviewport is 80.0 pixels high, then the minimum scroll extent will\ntypically be 0.0 and the maximum scroll extent will typically be 20.0,\nbecause there's only 20.0 pixels of actual scroll slack.<\/p>\n<p>If applying the content dimensions changes the scroll offset, return\nfalse. Otherwise, return true. If you return false, the <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a>\nwill be laid out again with the new scroll offset. This is expensive. (The\nreturn value is answering the question \"did you accept these content\ndimensions unconditionally?\"; if the new dimensions change the\n<a href=\"rendering\/ViewportOffset-class.html\">ViewportOffset<\/a>'s actual <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> value, then the viewport will need to\nbe laid out again.)<\/p>\n<p>This is called at least once each time the <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a> is laid out,\neven if the values have not changed. It may be called many times if the\nscroll offset is corrected (if this returns false). This is always called\nafter <a href=\"rendering\/ViewportOffset\/applyViewportDimension.html\">applyViewportDimension<\/a>, if that method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool applyContentDimensions(double minScrollExtent, double maxScrollExtent);<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/applyContentDimensions.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "applyContentDimensions",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "maxScrollExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "minScrollExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called when the viewport's extents are established.<\/p>\n<p>The argument is the dimension of the <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a> in the main axis\n(e.g. the height, for a vertical viewport).<\/p>\n<p>This may be called redundantly, with the same value, each frame. This is\ncalled during layout for the <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a>. If the viewport is\nconfigured to shrink-wrap its contents, it may be called several times,\nsince the layout is repeated each time the scroll offset is corrected.<\/p>\n<p>If this is called, it is called before <a href=\"rendering\/ViewportOffset\/applyContentDimensions.html\">applyContentDimensions<\/a>. If this\nis called, <a href=\"rendering\/ViewportOffset\/applyContentDimensions.html\">applyContentDimensions<\/a> will be called soon afterwards in the\nsame layout phase. If the viewport is not configured to shrink-wrap its\ncontents, then this will only be called when the viewport recomputes its\nsize (i.e. when its parent lays out), and not during normal scrolling.<\/p>\n<p>If applying the viewport dimensions changes the scroll offset, return\nfalse. Otherwise, return true. If you return false, the <a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a>\nwill be laid out again with the new scroll offset. This is expensive. (The\nreturn value is answering the question \"did you accept these viewport\ndimensions unconditionally?\"; if the new dimensions change the\n<a href=\"rendering\/ViewportOffset-class.html\">ViewportOffset<\/a>'s actual <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> value, then the viewport will need to\nbe laid out again.)<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool applyViewportDimension(double viewportDimension);<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/applyViewportDimension.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "applyViewportDimension",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "viewportDimension",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Apply a layout-time correction to the scroll offset.<\/p>\n<p>This method should change the <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> value by <code>correction<\/code>, but without\ncalling <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>. It is called during layout by the\n<a href=\"rendering\/RenderViewport-class.html\">RenderViewport<\/a>, before <a href=\"rendering\/ViewportOffset\/applyContentDimensions.html\">applyContentDimensions<\/a>. After this method is\ncalled, the layout will be recomputed and that may result in this method\nbeing called again, though this should be very rare.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/ViewportOffset\/jumpTo.html\">jumpTo<\/a>, for also changing the scroll position when not in layout.\n<a href=\"rendering\/ViewportOffset\/jumpTo.html\">jumpTo<\/a> applies the change immediately and notifies its listeners.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void correctBy(double correction);<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/correctBy.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "correctBy",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "correction",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Add additional information to the given description for use by <a href=\"rendering\/ViewportOffset\/toString.html\">toString<\/a>.<\/p>\n<p>This method makes it easier for subclasses to coordinate to provide a\nhigh-quality <a href=\"rendering\/ViewportOffset\/toString.html\">toString<\/a> implementation. The <a href=\"rendering\/ViewportOffset\/toString.html\">toString<\/a> implementation on\nthe <a href=\"widgets\/State-class.html\">State<\/a> base class calls <a href=\"rendering\/ViewportOffset\/debugFillDescription.html\">debugFillDescription<\/a> to collect useful\ninformation from subclasses to incorporate into its return value.<\/p>\n<p>If you override this, make sure to start your method with a call to\n<code>super.debugFillDescription(description)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid debugFillDescription(List&lt;String&gt; description) {\n  description.add('offset: ${pixels?.toStringAsFixed(1)}');\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/debugFillDescription.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillDescription",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "description",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Jumps <code>pixels<\/code> from its current value to the given value,\nwithout animation, and without checking if the new value is in range.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/ViewportOffset\/correctBy.html\">correctBy<\/a>, for changing the current offset in the middle of layout\nand that defers the notification of its listeners until after layout.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void jumpTo(double pixels);<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/jumpTo.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "jumpTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "pixels",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Calls <a href=\"rendering\/ViewportOffset\/jumpTo.html\">jumpTo<\/a> if duration is null or <a href=\"rendering\/ViewportOffset\/ViewportOffset.zero.html\">Duration.zero<\/a>, otherwise\n<a href=\"rendering\/ViewportOffset\/animateTo.html\">animateTo<\/a> is called.<\/p>\n<p>If <a href=\"rendering\/ViewportOffset\/animateTo.html\">animateTo<\/a> is called then <code>curve<\/code> defaults to <a href=\"animation\/Curves\/ease-constant.html\">Curves.ease<\/a>. The\n<code>clamp<\/code> parameter is ignored by this stub implementation but subclasses\nlike <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> handle it by adjusting <code>to<\/code> to prevent over or\nunderscroll.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; moveTo(\n  double to, {\n  Duration duration,\n  Curve curve,\n  bool clamp,\n}) {\n  assert(to != null);\n  if (duration == null || duration == Duration.zero) {\n    jumpTo(to);\n    return Future&lt;void&gt;.value();\n  } else {\n    return animateTo(to, duration: duration, curve: curve ?? Curves.ease);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/moveTo.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "moveTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": [
                {
                    "name": "clamp",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "curve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Curve"
                },
                {
                    "name": "duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "to",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; description = &lt;String&gt;[];\n  debugFillDescription(description);\n  return '${describeIdentity(this)}(${description.join(\", \")})';\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ViewportOffset\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ViewportOffset",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether a viewport is allowed to change <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> implicitly to respond to\na call to <a href=\"rendering\/RenderObject\/showOnScreen.html\">RenderObject.showOnScreen<\/a>.<\/p>\n<p><a href=\"rendering\/RenderObject\/showOnScreen.html\">RenderObject.showOnScreen<\/a> is for example used to bring a text field\nfully on screen after it has received focus. This property controls\nwhether the viewport associated with this offset is allowed to change the\noffset's <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a> value to fulfill such a request.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get allowImplicitScrolling;<\/code><\/pre>\n        ",
            "href": "rendering\/ViewportOffset\/allowImplicitScrolling.html",
            "name": "allowImplicitScrolling",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.ViewportOffset",
            "params": []
        },
        {
            "desc": "<p>The number of pixels to offset the children in the opposite of the axis direction.<\/p>\n<p>For example, if the axis direction is down, then the pixel value\nrepresents the number of logical pixels to move the children <em>up<\/em> the\nscreen. Similarly, if the axis direction is left, then the pixels value\nrepresents the number of logical pixels to move the children to <em>right<\/em>.<\/p>\n<p>This object notifies its listeners when this value changes (except when\nthe value changes due to <a href=\"rendering\/ViewportOffset\/correctBy.html\">correctBy<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get pixels;<\/code><\/pre>\n        ",
            "href": "rendering\/ViewportOffset\/pixels.html",
            "name": "pixels",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.ViewportOffset",
            "params": []
        },
        {
            "desc": "<p>The direction in which the user is trying to change <a href=\"rendering\/ViewportOffset\/pixels.html\">pixels<\/a>, relative to\nthe viewport's <a href=\"rendering\/RenderViewportBase\/axisDirection.html\">RenderViewport.axisDirection<\/a>.<\/p>\n<p>If the <em>user<\/em> is not scrolling, this will return <a href=\"rendering\/ScrollDirection-class.html\">ScrollDirection.idle<\/a>\neven if there is (for example) a <a href=\"widgets\/ScrollActivity-class.html\">ScrollActivity<\/a> currently animating the\nposition.<\/p>\n<p>This is exposed in <a href=\"rendering\/ViewportOffset\/userScrollDirection.html\">SliverConstraints.userScrollDirection<\/a>, which is used\nby some slivers to determine how to react to a change in scroll offset.\nFor example, <a href=\"rendering\/RenderSliverFloatingPersistentHeader-class.html\">RenderSliverFloatingPersistentHeader<\/a> will only expand a\nfloating app bar when the <a href=\"rendering\/ViewportOffset\/userScrollDirection.html\">userScrollDirection<\/a> is in the positive scroll\noffset direction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ScrollDirection get userScrollDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/ViewportOffset\/userScrollDirection.html",
            "name": "userScrollDirection",
            "isDeprecated": false,
            "type": "rendering.ScrollDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.ViewportOffset",
            "params": []
        }
    ]
}