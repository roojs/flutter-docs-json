{
    "desc": "<p>Contains properties used by assistive technologies to make the application\nmore accessible.<\/p>\n<p>The properties of this class are used to generate a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s in the\nsemantics tree.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "semantics\/SemanticsProperties-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "semantics",
    "name": "semantics.SemanticsProperties",
    "shortname": "SemanticsProperties",
    "extends": [
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/copy-constant.html\">SemanticsAction.copy<\/a>.<\/p>\n<p>This is a request to copy the current selection to the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onCopy\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onCopy.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/cut-constant.html\">SemanticsAction.cut<\/a>.<\/p>\n<p>This is a request to cut the current selection and place it in the\nclipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onCut\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onCut.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/p>\n<p>This is a request to decrease the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">decreasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsProperties\/onDecrease.html\">onDecrease<\/a> must ensure that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume down button.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDecrease\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onDecrease.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didGainAccessibilityFocus-constant.html\">SemanticsAction.didGainAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler gains\nthe accessibility focus. The accessibility focus is the\ngreen (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsProperties\/onDidLoseAccessibilityFocus.html\">onDidLoseAccessibilityFocus<\/a>, which is invoked when the accessibility\nfocus is removed from the node.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDidGainAccessibilityFocus\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onDidGainAccessibilityFocus.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didLoseAccessibilityFocus-constant.html\">SemanticsAction.didLoseAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler\nloses the accessibility focus. The accessibility focus is\nthe green (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsProperties\/onDidGainAccessibilityFocus.html\">onDidGainAccessibilityFocus<\/a>, which is invoked when the node gains\naccessibility focus.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDidLoseAccessibilityFocus\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onDidLoseAccessibilityFocus.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/dismiss-constant.html\">SemanticsAction.dismiss<\/a>.<\/p>\n<p>This is a request to dismiss the currently focused node.<\/p>\n<p>TalkBack users on Android can trigger this action in the local context\nmenu, and VoiceOver users on iOS can trigger this action with a standard\ngesture or menu option.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDismiss\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onDismiss.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/p>\n<p>This is a request to increase the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsProperties\/increasedValue.html\">increasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsProperties\/onIncrease.html\">onIncrease<\/a> must ensure that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsProperties\/increasedValue.html\">increasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume up button.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onIncrease\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onIncrease.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/longPress-constant.html\">SemanticsAction.longPress<\/a>.<\/p>\n<p>This is the semantic equivalent of a user pressing and holding the screen\nwith the finger for a few seconds without moving it.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen without lifting the finger after the\nsecond tap.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onLongPress\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onLongPress.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorBackwardByCharacter.html\">SemanticsAction.onMoveCursorBackwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorBackwardByCharacter\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onMoveCursorBackwardByCharacter.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorBackwardByWord.html\">SemanticsAction.onMoveCursorBackwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorBackwardByWord\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onMoveCursorBackwardByWord.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorForwardByCharacter.html\">SemanticsAction.onMoveCursorForwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field forward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume up key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorForwardByCharacter\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onMoveCursorForwardByCharacter.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorForwardByWord.html\">SemanticsAction.onMoveCursorForwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorForwardByWord\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onMoveCursorForwardByWord.html",
            "isDeprecated": "0",
            "type": "semantics.MoveCursorHandler",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/paste-constant.html\">SemanticsAction.paste<\/a>.<\/p>\n<p>This is a request to paste the current content of the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPaste\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onPaste.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollDown-constant.html\">SemanticsAction.scrollDown<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from top to bottom. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollDown\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onScrollDown.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollLeft-constant.html\">SemanticsAction.scrollLeft<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from right to left. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping left with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollLeft\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onScrollLeft.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollRight-constant.html\">SemanticsAction.scrollRight<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from left to right. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping right with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollRight\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onScrollRight.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollUp-constant.html\">SemanticsAction.scrollUp<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from bottom to top. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollUp\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onScrollUp.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/setSelection-constant.html\">SemanticsAction.setSelection<\/a>.<\/p>\n<p>This handler is invoked when the user either wants to change the currently\nselected text in a text field or change the position of the cursor.<\/p>\n<p>TalkBack users can trigger this handler by selecting \"Move cursor to\nbeginning\/end\" or \"Select all\" from the local context menu.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SetSelectionHandler onSetSelection\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onSetSelection.html",
            "isDeprecated": "0",
            "type": "semantics.SetSelectionHandler",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/tap-constant.html\">SemanticsAction.tap<\/a>.<\/p>\n<p>This is the semantic equivalent of a user briefly tapping the screen with\nthe finger without moving it. For example, a button should implement this\naction.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen while an element is focused.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onTap\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/onTap.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a semantic annotation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsProperties({\n  this.enabled,\n  this.checked,\n  this.selected,\n  this.toggled,\n  this.button,\n  this.header,\n  this.textField,\n  this.focused,\n  this.inMutuallyExclusiveGroup,\n  this.hidden,\n  this.obscured,\n  this.scopesRoute,\n  this.namesRoute,\n  this.image,\n  this.liveRegion,\n  this.label,\n  this.value,\n  this.increasedValue,\n  this.decreasedValue,\n  this.hint,\n  this.hintOverrides,\n  this.textDirection,\n  this.sortKey,\n  this.onTap,\n  this.onLongPress,\n  this.onScrollLeft,\n  this.onScrollRight,\n  this.onScrollUp,\n  this.onScrollDown,\n  this.onIncrease,\n  this.onDecrease,\n  this.onCopy,\n  this.onCut,\n  this.onPaste,\n  this.onMoveCursorForwardByCharacter,\n  this.onMoveCursorBackwardByCharacter,\n  this.onMoveCursorForwardByWord,\n  this.onMoveCursorBackwardByWord,\n  this.onSetSelection,\n  this.onDidGainAccessibilityFocus,\n  this.onDidLoseAccessibilityFocus,\n  this.onDismiss,\n  this.customSemanticsActions,\n});<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsProperties\/SemanticsProperties.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "semantics.SemanticsProperties",
            "params": [
                {
                    "name": "button",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "checked",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "customSemanticsActions",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>"
                },
                {
                    "name": "decreasedValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "enabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focused",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "header",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hidden",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "hintOverrides",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.SemanticsHintOverrides"
                },
                {
                    "name": "image",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "inMutuallyExclusiveGroup",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "increasedValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "label",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "liveRegion",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "namesRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "obscured",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onCopy",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onCut",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDecrease",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDidGainAccessibilityFocus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDidLoseAccessibilityFocus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDismiss",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onIncrease",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onLongPress",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onMoveCursorBackwardByCharacter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorBackwardByWord",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorForwardByCharacter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorForwardByWord",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onPaste",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollDown",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollLeft",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollRight",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollUp",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onSetSelection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.SetSelectionHandler"
                },
                {
                    "name": "onTap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "scopesRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "selected",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "sortKey",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "semantics.SemanticsSortKey"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textField",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "toggled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsProperties\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;bool&gt;('checked', checked, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('selected', selected, defaultValue: null));\n  properties.add(StringProperty('label', label, defaultValue: ''));\n  properties.add(StringProperty('value', value));\n  properties.add(StringProperty('hint', hint));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;SemanticsSortKey&gt;('sortKey', sortKey, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;SemanticsHintOverrides&gt;('hintOverrides', hintOverrides));\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsProperties\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsProperties",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsProperties\/toStringShort.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>If non-null, indicates that this subtree represents a button.<\/p>\n<p>TalkBack\/VoiceOver provides users with the hint \"button\" when a button\nis focused.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool button\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/button.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, indicates that this subtree represents a checkbox\nor similar widget with a \"checked\" state, and what its current\nstate is.<\/p>\n<p>This is mutually exclusive with <a href=\"semantics\/SemanticsProperties\/toggled.html\">toggled<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checked\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/checked.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>A map from each supported <a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a> to a provided handler.<\/p>\n<p>The handler associated with each custom action is called whenever a\nsemantics event of type <code>SemanticsEvent.customEvent<\/code> is received. The\nprovided argument will be an identifier used to retrieve an instance of\na custom action which can then retrieve the correct handler from this map.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>, for an explanation of custom actions.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;CustomSemanticsAction, VoidCallback&gt; customSemanticsActions\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/customSemanticsActions.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The value that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will become after a <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>\naction has been performed on this widget.<\/p>\n<p>If a value is provided, <a href=\"semantics\/SemanticsProperties\/onDecrease.html\">onDecrease<\/a> must also be set and there must\neither be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> or an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a>\nmust be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">SemanticsConfiguration.decreasedValue<\/a> for a description of how this\nis exposed in TalkBack and VoiceOver.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String decreasedValue\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/decreasedValue.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, indicates that this subtree represents something that can be\nin an enabled or disabled state.<\/p>\n<p>For example, a button that a user can currently interact with would set\nthis field to true. A button that currently does not respond to user\ninteractions would set this field to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/enabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether the node currently holds input focus.<\/p>\n<p>At most one node in the tree should hold input focus at any point in time.<\/p>\n<p>Input focus (indicates that the node will receive keyboard events) is not\nto be confused with accessibility focus. Accessibility focus is the\ngreen\/black rectangular that TalkBack\/VoiceOver on the screen and is\nseparate from input focus.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool focused\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/focused.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, indicates that this subtree represents a header.<\/p>\n<p>A header divides into sections. For example, an address book application\nmight define headers A, B, C, etc. to divide the list of alphabetically\nsorted contacts into sections.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool header\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/header.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether the node is considered hidden.<\/p>\n<p>Hidden elements are currently not visible on screen. They may be covered\nby other elements or positioned outside of the visible area of a viewport.<\/p>\n<p>Hidden elements cannot gain accessibility focus though regular touch. The\nonly way they can be focused is by moving the focus to them via linear\nnavigation.<\/p>\n<p>Platforms are free to completely ignore hidden elements and new platforms\nare encouraged to do so.<\/p>\n<p>Instead of marking an element as hidden it should usually be excluded from\nthe semantics tree altogether. Hidden elements are only included in the\nsemantics tree to work around platform limitations and they are mainly\nused to implement accessibility scrolling on iOS.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool hidden\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/hidden.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>Provides a brief textual description of the result of an action performed\non the widget.<\/p>\n<p>If a hint is provided, there must either be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nor an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a> should be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/hint.html\">SemanticsConfiguration.hint<\/a> for a description of how this is exposed\nin TalkBack and VoiceOver.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String hint\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/hint.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>Provides hint values which override the default hints on supported\nplatforms.<\/p>\n<p>On Android, If no hint overrides are used then default <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a> will be\ncombined with the <a href=\"semantics\/SemanticsProperties\/label.html\">label<\/a>. Otherwise, the <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a> will be ignored as long\nas there as at least one non-null hint override.<\/p>\n<p>On iOS, these are always ignored and the default <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a> is used instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsHintOverrides hintOverrides\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/hintOverrides.html",
            "isDeprecated": "0",
            "type": "semantics.SemanticsHintOverrides",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether the node represents an image.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/image.html\">SemanticsFlag.image<\/a>, for the flag this setting controls.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool image\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/image.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether a semantic node is in a mutually exclusive group.<\/p>\n<p>For example, a radio button is in a mutually exclusive group because only\none radio button in that group can be marked as <a href=\"semantics\/SemanticsProperties\/checked.html\">checked<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool inMutuallyExclusiveGroup\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/inMutuallyExclusiveGroup.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The value that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will become after a <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>\naction has been performed on this widget.<\/p>\n<p>If a value is provided, <a href=\"semantics\/SemanticsProperties\/onIncrease.html\">onIncrease<\/a> must also be set and there must\neither be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> or an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a>\nmust be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/increasedValue.html\">SemanticsConfiguration.increasedValue<\/a> for a description of how this\nis exposed in TalkBack and VoiceOver.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String increasedValue\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/increasedValue.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>Provides a textual description of the widget.<\/p>\n<p>If a label is provided, there must either by an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nor an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a> should be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/label.html\">SemanticsConfiguration.label<\/a> for a description of how this is exposed\nin TalkBack and VoiceOver.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String label\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/label.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether the node should be considered a live region.<\/p>\n<p>On Android, when a live region semantics node is first created TalkBack\nwill make a polite announcement of the current label. This announcement\noccurs even if the node is not focused. Subsequent polite announcements\ncan be made by sending a <a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a> semantics event. The\nannouncement will only be made if the node's label has changed since the\nlast update.<\/p>\n<p>On iOS, no announcements are made but the node is marked as\n<code>UIAccessibilityTraitUpdatesFrequently<\/code>.<\/p>\n<p>An example of a live region is the <code>Snackbar<\/code> widget. When it appears\non the screen it may be difficult to focus to read the label. A live\nregion causes an initial polite announcement to be generated\nautomatically.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsProperties\/liveRegion.html\">SemanticsFlag.liveRegion<\/a>, the semantics flag this setting controls.<\/li>\n<li>\n<a href=\"semantics\/SemanticsProperties\/liveRegion.html\">SemanticsConfiguration.liveRegion<\/a>, for a full description of a live region.<\/li>\n<li>\n<a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a>, to trigger a polite announcement of a live region.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool liveRegion\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/liveRegion.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether the node contains the semantic label for a route.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/namesRoute.html\">SemanticsFlag.namesRoute<\/a> for a description of how the name is used.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool namesRoute\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/namesRoute.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> should be obscured.<\/p>\n<p>This option is usually set in combination with <a href=\"semantics\/SemanticsProperties\/textField.html\">textField<\/a> to indicate\nthat the text field contains a password (or other sensitive information).\nDoing so instructs screen readers to not read out the <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscured\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/obscured.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, whether the node corresponds to the root of a subtree for\nwhich a route name should be announced.<\/p>\n<p>Generally, this is set in combination with <code>explicitChildNodes<\/code>, since\nnodes with this flag are not considered focusable by Android or iOS.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/scopesRoute.html\">SemanticsFlag.scopesRoute<\/a> for a description of how the announced\nvalue is selected.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool scopesRoute\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/scopesRoute.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null indicates that this subtree represents something that can be\nin a selected or unselected state, and what its current state is.<\/p>\n<p>The active tab in a tab bar for example is considered \"selected\", whereas\nall other tabs are unselected.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool selected\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/selected.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>Determines the position of this node among its siblings in the traversal\nsort order.<\/p>\n<p>This is used to describe the order in which the semantic node should be\ntraversed by the accessibility services on the platform (e.g. VoiceOver\non iOS and TalkBack on Android).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsSortKey sortKey\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/sortKey.html",
            "isDeprecated": "0",
            "type": "semantics.SemanticsSortKey",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>The reading direction of the <a href=\"semantics\/SemanticsProperties\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a>, <a href=\"semantics\/SemanticsProperties\/increasedValue.html\">increasedValue<\/a>,\nand <a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, indicates that this subtree represents a text field.<\/p>\n<p>TalkBack\/VoiceOver provide special affordances to enter text into a\ntext field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool textField\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/textField.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>If non-null, indicates that this subtree represents a toggle switch\nor similar widget with an \"on\" state, and what its current\nstate is.<\/p>\n<p>This is mutually exclusive with <a href=\"semantics\/SemanticsProperties\/checked.html\">checked<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool toggled\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/toggled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        },
        {
            "desc": "<p>Provides a textual description of the value of the widget.<\/p>\n<p>If a value is provided, there must either by an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nor an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a> should be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/value.html\">SemanticsConfiguration.value<\/a> for a description of how this is exposed\nin TalkBack and VoiceOver.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String value\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsProperties\/value.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "semantics.SemanticsProperties",
            "params": []
        }
    ]
}