{
    "desc": "<p>An immutable set of offsets in each of the four cardinal directions.<\/p>\n<p>Typically used for an offset from each of the four sides of a box. For\nexample, the padding inside a box can be represented using this class.<\/p>\n<p>The <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> class specifies offsets in terms of visual edges, left,\ntop, right, and bottom. These values are not affected by the\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. To support both left-to-right and right-to-left layouts,\nconsider using <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which is expressed in terms of\n<em>start<\/em>, top, <em>end<\/em>, and bottom, where start and end are resolved in terms\nof a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> (typically obtained from the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere are some examples of how to create <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> instances:\n<p>Typical eight-pixel margin on all sides:\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.all(8.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nEight pixel margin above and below, no horizontal margins:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.symmetric(vertical: 8.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nLeft margin indent of 40 pixels:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.only(left: 40.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Padding-class.html\">Padding<\/a>, a widget that accepts <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> to describe its margins.<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which (for properties and arguments that accept\nthe type <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a>) allows the horizontal insets to be\nspecified in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>-aware manner.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/EdgeInsets-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.EdgeInsets",
    "shortname": "EdgeInsets",
    "extends": [
        "painting.EdgeInsetsGeometry",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.EdgeInsetsTween"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsets\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsets\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry add(EdgeInsetsGeometry other) {\n  if (other is EdgeInsets)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/add.html",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.EdgeInsetsGeometry"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this EdgeInsets but with the given fields replaced\nwith the new values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets copyWith({\n  double left,\n  double top,\n  double right,\n  double bottom,\n}) {\n  return EdgeInsets.only(\n    left: left ?? this.left,\n    top: top ?? this.top,\n    right: right ?? this.right,\n    bottom: bottom ?? this.bottom,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/copyWith.html",
            "isDeprecated": false,
            "type": "painting.EdgeInsets",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "bottom",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "left",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "right",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "top",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new rect that is smaller than the given rect in each direction by\nthe amount of inset in each direction. Specifically, the left edge of the\nrect is moved right by <a href=\"painting\/EdgeInsets\/left.html\">left<\/a>, the top edge of the rect is moved down by\n<a href=\"painting\/EdgeInsets\/top.html\">top<\/a>, the right edge of the rect is moved left by <a href=\"painting\/EdgeInsets\/right.html\">right<\/a>, and the\nbottom edge of the rect is moved up by <a href=\"painting\/EdgeInsets\/bottom.html\">bottom<\/a>.<\/p>\n<p>If the argument's <a href=\"dart-ui\/Rect\/size.html\">Rect.size<\/a> is smaller than <a href=\"painting\/EdgeInsetsGeometry\/collapsedSize.html\">collapsedSize<\/a>, then the\nresulting rectangle will have negative dimensions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/deflateSize.html\">deflateSize<\/a>, to deflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/li>\n<li>\n<a href=\"painting\/EdgeInsets\/inflateRect.html\">inflateRect<\/a>, to inflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than deflating it.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect deflateRect(Rect rect) {\n  return Rect.fromLTRB(rect.left + left, rect.top + top, rect.right - right, rect.bottom - bottom);\n}<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/deflateRect.html",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "name": "deflateRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                }
            ]
        },
        {
            "desc": "<p>Returns a new rect that is bigger than the given rect in each direction by\nthe amount of inset in each direction. Specifically, the left edge of the\nrect is moved left by <a href=\"painting\/EdgeInsets\/left.html\">left<\/a>, the top edge of the rect is moved up by\n<a href=\"painting\/EdgeInsets\/top.html\">top<\/a>, the right edge of the rect is moved right by <a href=\"painting\/EdgeInsets\/right.html\">right<\/a>, and the\nbottom edge of the rect is moved down by <a href=\"painting\/EdgeInsets\/bottom.html\">bottom<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/inflateSize.html\">inflateSize<\/a>, to inflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/li>\n<li>\n<a href=\"painting\/EdgeInsets\/deflateRect.html\">deflateRect<\/a>, to deflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than inflating it.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect inflateRect(Rect rect) {\n  return Rect.fromLTRB(rect.left - left, rect.top - top, rect.right + right, rect.bottom + bottom);\n}<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/inflateRect.html",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "name": "inflateRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/EdgeInsets\/zero-constant.html\">EdgeInsets.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EdgeInsets lerp(EdgeInsets a, EdgeInsets b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return EdgeInsets.fromLTRB(\n    ui.lerpDouble(a.left, b.left, t),\n    ui.lerpDouble(a.top, b.top, t),\n    ui.lerpDouble(a.right, b.right, t),\n    ui.lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/lerp.html",
            "isDeprecated": false,
            "type": "painting.EdgeInsets",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.EdgeInsets"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.EdgeInsets"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Convert this instance into an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, which uses literal coordinates\n(i.e. the <code>left<\/code> coordinate being explicitly a distance from the left, and\nthe <code>right<\/code> coordinate being explicitly a distance from the right).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets resolve(TextDirection direction) =&gt; this;<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/resolve.html",
            "isDeprecated": false,
            "type": "painting.EdgeInsets",
            "name": "resolve",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsets\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsets\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/EdgeInsets\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry subtract(EdgeInsetsGeometry other) {\n  if (other is EdgeInsets)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
            "href": "painting\/EdgeInsets\/subtract.html",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "name": "subtract",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.EdgeInsets",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.EdgeInsetsGeometry"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The offset from the bottom.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/bottom.html",
            "name": "bottom",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>An Offset describing the vector from the bottom left of a rectangle to the\nbottom left of that rectangle inset by this object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomLeft =&gt; Offset(left, -bottom);<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/bottomLeft.html",
            "name": "bottomLeft",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>An Offset describing the vector from the bottom right of a rectangle to the\nbottom right of that rectangle inset by this object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomRight =&gt; Offset(-right, -bottom);<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/bottomRight.html",
            "name": "bottomRight",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>An <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> with top and bottom as well as left and right flipped.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets get flipped =&gt; EdgeInsets.fromLTRB(right, bottom, left, top);<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/flipped.html",
            "name": "flipped",
            "isDeprecated": false,
            "type": "painting.EdgeInsets",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>The offset from the left.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double left\n\n<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/left.html",
            "name": "left",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>The offset from the right.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double right\n\n<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/right.html",
            "name": "right",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>The offset from the top.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/top.html",
            "name": "top",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>An Offset describing the vector from the top left of a rectangle to the\ntop left of that rectangle inset by this object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topLeft =&gt; Offset(left, top);<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/topLeft.html",
            "name": "topLeft",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "memberOf": "painting.EdgeInsets",
            "params": []
        },
        {
            "desc": "<p>An Offset describing the vector from the top right of a rectangle to the\ntop right of that rectangle inset by this object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topRight =&gt; Offset(-right, top);<\/code><\/pre>\n        ",
            "href": "painting\/EdgeInsets\/topRight.html",
            "name": "topRight",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "memberOf": "painting.EdgeInsets",
            "params": []
        }
    ]
}