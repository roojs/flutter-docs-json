{
    "name": "semantics.SemanticsData",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "semantics",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"semantics\/SemanticsData\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsData",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "semantics\/SemanticsData\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! SemanticsData)\n    return false;\n  final SemanticsData typedOther = other;\n  return typedOther.flags == flags\n      &amp;&amp; typedOther.actions == actions\n      &amp;&amp; typedOther.label == label\n      &amp;&amp; typedOther.value == value\n      &amp;&amp; typedOther.increasedValue == increasedValue\n      &amp;&amp; typedOther.decreasedValue == decreasedValue\n      &amp;&amp; typedOther.hint == hint\n      &amp;&amp; typedOther.textDirection == textDirection\n      &amp;&amp; typedOther.rect == rect\n      &amp;&amp; setEquals(typedOther.tags, tags)\n      &amp;&amp; typedOther.scrollChildCount == scrollChildCount\n      &amp;&amp; typedOther.scrollIndex == scrollIndex\n      &amp;&amp; typedOther.textSelection == textSelection\n      &amp;&amp; typedOther.scrollPosition == scrollPosition\n      &amp;&amp; typedOther.scrollExtentMax == scrollExtentMax\n      &amp;&amp; typedOther.scrollExtentMin == scrollExtentMin\n      &amp;&amp; typedOther.platformViewId == platformViewId\n      &amp;&amp; typedOther.transform == transform\n      &amp;&amp; typedOther.elevation == elevation\n      &amp;&amp; typedOther.thickness == thickness\n      &amp;&amp; _sortedListsEqual(typedOther.customSemanticsActionIds, customSemanticsActionIds);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "SemanticsData",
            "type": "",
            "desc": "<p>Creates a semantics data object.<\/p>\n<p>The <code>flags<\/code>, <code>actions<\/code>, <code>label<\/code>, and <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> arguments must not be null.<\/p>\n<p>If <code>label<\/code> is not empty, then <code>textDirection<\/code> must also not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsData",
            "sig": "",
            "params": [
                {
                    "name": "flags",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "actions",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "label",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "increasedValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decreasedValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "hint",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "thickness",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textSelection",
                    "type": "services.TextSelection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollIndex",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollChildCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollPosition",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollExtentMax",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scrollExtentMin",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "platformViewId",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tags",
                    "type": "dart:core.Set<semantics.SemanticsTag>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "semantics.SemanticsTag"
                    ]
                },
                {
                    "name": "transform",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "customSemanticsActionIds",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "semantics\/SemanticsData\/SemanticsData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsData({\n  @required this.flags,\n  @required this.actions,\n  @required this.label,\n  @required this.increasedValue,\n  @required this.value,\n  @required this.decreasedValue,\n  @required this.hint,\n  @required this.textDirection,\n  @required this.rect,\n  @required this.elevation,\n  @required this.thickness,\n  @required this.textSelection,\n  @required this.scrollIndex,\n  @required this.scrollChildCount,\n  @required this.scrollPosition,\n  @required this.scrollExtentMax,\n  @required this.scrollExtentMin,\n  @required this.platformViewId,\n  this.tags,\n  this.transform,\n  this.customSemanticsActionIds,\n}) : assert(flags != null),\n     assert(actions != null),\n     assert(label != null),\n     assert(value != null),\n     assert(decreasedValue != null),\n     assert(increasedValue != null),\n     assert(hint != null),\n     assert(label == '' || textDirection != null, 'A SemanticsData object with label \"$label\" had a null textDirection.'),\n     assert(value == '' || textDirection != null, 'A SemanticsData object with value \"$value\" had a null textDirection.'),\n     assert(hint == '' || textDirection != null, 'A SemanticsData object with hint \"$hint\" had a null textDirection.'),\n     assert(decreasedValue == '' || textDirection != null, 'A SemanticsData object with decreasedValue \"$decreasedValue\" had a null textDirection.'),\n     assert(increasedValue == '' || textDirection != null, 'A SemanticsData object with increasedValue \"$increasedValue\" had a null textDirection.'),\n     assert(rect != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsData",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "semantics\/SemanticsData\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Rect&gt;('rect', rect, showName: false));\n  properties.add(TransformProperty('transform', transform, showName: false, defaultValue: null));\n  properties.add(DoubleProperty('elevation', elevation, defaultValue: 0.0));\n  properties.add(DoubleProperty('thickness', thickness, defaultValue: 0.0));\n  final List&lt;String&gt; actionSummary = &lt;String&gt;[];\n  for (SemanticsAction action in SemanticsAction.values.values) {\n    if ((actions &amp; action.index) != 0)\n      actionSummary.add(describeEnum(action));\n  }\n  final List&lt;String&gt; customSemanticsActionSummary = customSemanticsActionIds\n    .map&lt;String&gt;((int actionId) =&gt; CustomSemanticsAction.getAction(actionId).label)\n    .toList();\n  properties.add(IterableProperty&lt;String&gt;('actions', actionSummary, ifEmpty: null));\n  properties.add(IterableProperty&lt;String&gt;('customActions', customSemanticsActionSummary, ifEmpty: null));\n\n  final List&lt;String&gt; flagSummary = &lt;String&gt;[];\n  for (SemanticsFlag flag in SemanticsFlag.values.values) {\n    if ((flags &amp; flag.index) != 0)\n      flagSummary.add(describeEnum(flag));\n  }\n  properties.add(IterableProperty&lt;String&gt;('flags', flagSummary, ifEmpty: null));\n  properties.add(StringProperty('label', label, defaultValue: ''));\n  properties.add(StringProperty('value', value, defaultValue: ''));\n  properties.add(StringProperty('increasedValue', increasedValue, defaultValue: ''));\n  properties.add(StringProperty('decreasedValue', decreasedValue, defaultValue: ''));\n  properties.add(StringProperty('hint', hint, defaultValue: ''));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  if (textSelection?.isValid == true)\n    properties.add(MessageProperty('textSelection', '[${textSelection.start}, ${textSelection.end}]'));\n  properties.add(IntProperty('platformViewId', platformViewId, defaultValue: null));\n  properties.add(IntProperty('scrollChildren', scrollChildCount, defaultValue: null));\n  properties.add(IntProperty('scrollIndex', scrollIndex, defaultValue: null));\n  properties.add(DoubleProperty('scrollExtentMin', scrollExtentMin, defaultValue: null));\n  properties.add(DoubleProperty('scrollPosition', scrollPosition, defaultValue: null));\n  properties.add(DoubleProperty('scrollExtentMax', scrollExtentMax, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hasAction",
            "type": "dart:core.bool",
            "desc": "<p>Whether <a href=\"semantics\/SemanticsData\/actions.html\">actions<\/a> contains the given action.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsData",
            "sig": "",
            "params": [
                {
                    "name": "action",
                    "type": "dart:ui.SemanticsAction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "semantics\/SemanticsData\/hasAction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasAction(SemanticsAction action) =&gt; (actions &amp; action.index) != 0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "hasFlag",
            "type": "dart:core.bool",
            "desc": "<p>Whether <a href=\"semantics\/SemanticsData\/flags.html\">flags<\/a> contains the given flag.<\/p>\n    ",
            "static": false,
            "memberOf": "semantics.SemanticsData",
            "sig": "",
            "params": [
                {
                    "name": "flag",
                    "type": "dart:ui.SemanticsFlag",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "semantics\/SemanticsData\/hasFlag.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasFlag(SemanticsFlag flag) =&gt; (flags &amp; flag.index) != 0;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toStringShort",
            "type": "dart:core.String",
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"semantics\/SemanticsData\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "static": false,
            "memberOf": "semantics.SemanticsData",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "semantics\/SemanticsData\/toStringShort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "actions",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>A bit field of <a href=\"dart-ui\/SemanticsAction-class.html\">SemanticsAction<\/a>s that apply to this node.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/actions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int actions\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "customSemanticsActionIds",
            "type": "dart:core.List<dart:core.int>",
            "types": [
                "dart:core.List",
                "dart:core.int"
            ],
            "desc": "<p>The identifiers for the custom semantics actions and standard action\noverrides for this node.<\/p>\n<p>The list must be sorted in increasing order.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>, for an explanation of custom actions.<\/li><\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/customSemanticsActionIds.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; customSemanticsActionIds\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decreasedValue",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The value that <a href=\"semantics\/SemanticsData\/value.html\">value<\/a> will become after performing a\n<a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/decreasedValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String decreasedValue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "elevation",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The elevation of this node relative to the parent semantics node.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsData\/elevation.html\">SemanticsConfiguration.elevation<\/a> for a detailed discussion regarding\nelevation and semantics.<\/li><\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/elevation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "flags",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>A bit field of <a href=\"dart-ui\/SemanticsFlag-class.html\">SemanticsFlag<\/a>s that apply to this node.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/flags.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int flags\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"semantics\/SemanticsData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return ui.hashValues(\n    ui.hashValues(\n      flags,\n      actions,\n      label,\n      value,\n      increasedValue,\n      decreasedValue,\n      hint,\n      textDirection,\n      rect,\n      tags,\n      textSelection,\n      scrollChildCount,\n      scrollIndex,\n      scrollPosition,\n      scrollExtentMax,\n      scrollExtentMin,\n      platformViewId,\n      transform,\n      elevation,\n      thickness,\n    ),\n    ui.hashList(customSemanticsActionIds),\n  );\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hint",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A brief description of the result of performing an action on this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/hint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String hint\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "increasedValue",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The value that <a href=\"semantics\/SemanticsData\/value.html\">value<\/a> will become after performing a\n<a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> action.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/increasedValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String increasedValue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "label",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A textual description of this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/label.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String label\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "platformViewId",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The id of the platform view, whose semantics nodes will be added as\nchildren to this node.<\/p>\n<p>If this value is non-null, the SemanticsNode must not have any children\nas those would be replaced by the semantics nodes of the referenced\nplatform view.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a>, which is the platform view for Android.<\/li>\n<li>\n<a href=\"widgets\/UiKitView-class.html\">UiKitView<\/a>, which is the platform view for iOS.<\/li>\n<\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/platformViewId.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int platformViewId\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "rect",
            "type": "dart:ui.Rect",
            "types": [],
            "desc": "<p>The bounding box for this node in its coordinate system.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/rect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Rect rect\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scrollChildCount",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The total number of scrollable children that contribute to semantics.<\/p>\n<p>If the number of children are unknown or unbounded, this value will be\nnull.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/scrollChildCount.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int scrollChildCount\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scrollExtentMax",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Indicates the maximum in-range value for <a href=\"semantics\/SemanticsData\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/maxScrollExtent.html\">ScrollPosition.maxScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/scrollExtentMax.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollExtentMax\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scrollExtentMin",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Indicates the minimum in-range value for <a href=\"semantics\/SemanticsData\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/minScrollExtent.html\">ScrollPosition.minScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/scrollExtentMin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollExtentMin\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scrollIndex",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The index of the first visible semantic child of a scroll node.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/scrollIndex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int scrollIndex\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scrollPosition",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Indicates the current scrolling position in logical pixels if the node is\nscrollable.<\/p>\n<p>The properties <a href=\"semantics\/SemanticsData\/scrollExtentMin.html\">scrollExtentMin<\/a> and <a href=\"semantics\/SemanticsData\/scrollExtentMax.html\">scrollExtentMax<\/a> indicate the valid\nin-range values for this property. The value for <a href=\"semantics\/SemanticsData\/scrollPosition.html\">scrollPosition<\/a> may\n(temporarily) be outside that range, e.g. during an overscroll.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a>, from where this value is usually taken.<\/li><\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/scrollPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollPosition\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tags",
            "type": "dart:core.Set<semantics.SemanticsTag>",
            "types": [
                "dart:core.Set",
                "semantics.SemanticsTag"
            ],
            "desc": "<p>The set of <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a>s associated with this node.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/tags.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Set&lt;SemanticsTag&gt; tags\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textDirection",
            "type": "dart:ui.TextDirection",
            "types": [],
            "desc": "<p>The reading direction for the text in <a href=\"semantics\/SemanticsData\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsData\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsData\/hint.html\">hint<\/a>,\n<a href=\"semantics\/SemanticsData\/increasedValue.html\">increasedValue<\/a>, and <a href=\"semantics\/SemanticsData\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/textDirection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textSelection",
            "type": "services.TextSelection",
            "types": [],
            "desc": "<p>The currently selected text (or the position of the cursor) within <a href=\"semantics\/SemanticsData\/value.html\">value<\/a>\nif this node represents a text field.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/textSelection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSelection textSelection\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "thickness",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The extent of this node along the z-axis beyond its <a href=\"semantics\/SemanticsData\/elevation.html\">elevation<\/a><\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsData\/thickness.html\">SemanticsConfiguration.thickness<\/a> for a more detailed definition.<\/li><\/ul>",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/thickness.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double thickness\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "transform",
            "type": "vector_math_64.Matrix4",
            "types": [],
            "desc": "<p>The transform from this node's coordinate system to its parent's coordinate system.<\/p>\n<p>By default, the transform is null, which represents the identity\ntransformation (i.e., that this node has the same coordinate system as its\nparent).<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/transform.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Matrix4 transform\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "value",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A textual description for the current value of the node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "memberOf": "semantics.SemanticsData",
            "isConstant": false,
            "href": "semantics\/SemanticsData\/value.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String value\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "semantics\/SemanticsData-class.html",
    "desc": "<p>Summary information about a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> object.<\/p>\n<p>A semantics node might <a href=\"semantics\/SemanticsNode\/mergeAllDescendantsIntoThisNode.html\">SemanticsNode.mergeAllDescendantsIntoThisNode<\/a>,\nwhich means the individual fields on the semantics node don't fully describe\nthe semantics at that node. This data structure contains the full semantics\nfor the node.<\/p>\n<p>Typically obtained from <a href=\"semantics\/SemanticsNode\/getSemanticsData.html\">SemanticsNode.getSemanticsData<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SemanticsData"
}