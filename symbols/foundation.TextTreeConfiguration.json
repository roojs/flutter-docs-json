{
    "name": "foundation.TextTreeConfiguration",
    "extends": [],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "TextTreeConfiguration",
            "type": "",
            "desc": "<p>Create a configuration object describing how to render a tree as text.<\/p>\n<p>All of the arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.TextTreeConfiguration",
            "sig": "",
            "params": [
                {
                    "name": "prefixLineOne",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "prefixOtherLines",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "prefixLastChildLineOne",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "prefixOtherLinesRootNode",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "linkCharacter",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "propertyPrefixIfChildren",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "propertyPrefixNoChildren",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "lineBreak",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "lineBreakProperties",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "afterName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "afterDescriptionIfBody",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "beforeProperties",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "afterProperties",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "propertySeparator",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bodyIndent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "footer",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showChildren",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addBlankLineIfNoChildren",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isNameOnOwnLine",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isBlankLineBetweenPropertiesAndChildren",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/TextTreeConfiguration\/TextTreeConfiguration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextTreeConfiguration({\n  @required this.prefixLineOne,\n  @required this.prefixOtherLines,\n  @required this.prefixLastChildLineOne,\n  @required this.prefixOtherLinesRootNode,\n  @required this.linkCharacter,\n  @required this.propertyPrefixIfChildren,\n  @required this.propertyPrefixNoChildren,\n  this.lineBreak = '\\n',\n  this.lineBreakProperties = true,\n  this.afterName = ':',\n  this.afterDescriptionIfBody = '',\n  this.beforeProperties = '',\n  this.afterProperties = '',\n  this.propertySeparator = '',\n  this.bodyIndent = '',\n  this.footer = '',\n  this.showChildren = true,\n  this.addBlankLineIfNoChildren = true,\n  this.isNameOnOwnLine = false,\n  this.isBlankLineBetweenPropertiesAndChildren = true,\n}) : assert(prefixLineOne != null),\n     assert(prefixOtherLines != null),\n     assert(prefixLastChildLineOne != null),\n     assert(prefixOtherLinesRootNode != null),\n     assert(linkCharacter != null),\n     assert(propertyPrefixIfChildren != null),\n     assert(propertyPrefixNoChildren != null),\n     assert(lineBreak != null),\n     assert(lineBreakProperties != null),\n     assert(afterName != null),\n     assert(afterDescriptionIfBody != null),\n     assert(beforeProperties != null),\n     assert(afterProperties != null),\n     assert(propertySeparator != null),\n     assert(bodyIndent != null),\n     assert(footer != null),\n     assert(showChildren != null),\n     assert(addBlankLineIfNoChildren != null),\n     assert(isNameOnOwnLine != null),\n     assert(isBlankLineBetweenPropertiesAndChildren != null),\n     childLinkSpace = ' ' * linkCharacter.length;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "addBlankLineIfNoChildren",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to add a blank line at the end of the output for a node if it has\nno children.<\/p>\n<p>See <a href=\"foundation\/denseTextConfiguration.html\">denseTextConfiguration<\/a> for an example of setting this to false.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/addBlankLineIfNoChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool addBlankLineIfNoChildren\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "afterDescriptionIfBody",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Text to add immediately after the description line of a node with\nproperties and\/or children.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/afterDescriptionIfBody.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String afterDescriptionIfBody\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "afterName",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Text added immediately after the name of the node.<\/p>\n<p>See <a href=\"foundation\/transitionTextConfiguration.html\">transitionTextConfiguration<\/a> for an example of using a value other\nthan ':' to achieve a custom line art style.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/afterName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String afterName\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "afterProperties",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Optional string to add after the properties of a node.<\/p>\n<p>See documentation for <a href=\"foundation\/TextTreeConfiguration\/beforeProperties.html\">beforeProperties<\/a>.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/afterProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String afterProperties\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "beforeProperties",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Optional string to add before the properties of a node.<\/p>\n<p>Only displayed if the node has properties.\nSee <a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a> for an example of using this field\nto enclose the property list with parenthesis.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/beforeProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String beforeProperties\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bodyIndent",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Prefix to add to all lines of the body of the tree node.<\/p>\n<p>The body is all content in the node other than the name and description.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/bodyIndent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String bodyIndent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "childLinkSpace",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Whitespace to draw instead of the childLink character if this node is the\nlast child of its parent so no link line is required.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/childLinkSpace.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String childLinkSpace\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "footer",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Footer to add as its own line at the end of a non-root node.<\/p>\n<p>See <a href=\"foundation\/transitionTextConfiguration.html\">transitionTextConfiguration<\/a> for an example of using footer to draw a box\naround the node. <a href=\"foundation\/TextTreeConfiguration\/footer.html\">footer<\/a> is indented the same amount as <a href=\"foundation\/TextTreeConfiguration\/prefixOtherLines.html\">prefixOtherLines<\/a>.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/footer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String footer\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isBlankLineBetweenPropertiesAndChildren",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Add a blank line between properties and children if both are present.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/isBlankLineBetweenPropertiesAndChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isBlankLineBetweenPropertiesAndChildren\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isNameOnOwnLine",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the name should be displayed on the same line as the description.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/isNameOnOwnLine.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isNameOnOwnLine\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "lineBreak",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Character(s) to use to separate lines.<\/p>\n<p>Typically leave set at the default value of '\\n' unless this style needs\nto treat lines differently as is the case for\n<a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a>.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/lineBreak.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String lineBreak\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "lineBreakProperties",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to place line breaks between properties or to leave all\nproperties on one line.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/lineBreakProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool lineBreakProperties\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "linkCharacter",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Character to use to draw line linking parent to child.<\/p>\n<p>The first child does not require a line but all subsequent children do\nwith the line drawn immediately before the left edge of the previous\nsibling.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/linkCharacter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String linkCharacter\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "prefixLastChildLineOne",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Prefix to add to the first line to display the last child of a node with\nthis style.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/prefixLastChildLineOne.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixLastChildLineOne\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "prefixLineOne",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Prefix to add to the first line to display a child with this style.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/prefixLineOne.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixLineOne\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "prefixOtherLines",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Prefix to add to other lines to display a child with this style.<\/p>\n<p><a href=\"foundation\/TextTreeConfiguration\/prefixOtherLines.html\">prefixOtherLines<\/a> should typically be one character shorter than\n<a href=\"foundation\/TextTreeConfiguration\/prefixLineOne.html\">prefixLineOne<\/a> as<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/prefixOtherLines.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixOtherLines\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "prefixOtherLinesRootNode",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Additional prefix to add to other lines of a node if this is the root node\nof the tree.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/prefixOtherLinesRootNode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixOtherLinesRootNode\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "propertyPrefixIfChildren",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Prefix to add before each property if the node as children.<\/p>\n<p>Plays a similar role to <a href=\"foundation\/TextTreeConfiguration\/linkCharacter.html\">linkCharacter<\/a> except that some configurations\nintentionally use a different line style than the <a href=\"foundation\/TextTreeConfiguration\/linkCharacter.html\">linkCharacter<\/a>.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/propertyPrefixIfChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String propertyPrefixIfChildren\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "propertyPrefixNoChildren",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Prefix to add before each property if the node does not have children.<\/p>\n<p>This string is typically a whitespace string the same length as\n<a href=\"foundation\/TextTreeConfiguration\/propertyPrefixIfChildren.html\">propertyPrefixIfChildren<\/a> but can have a different length.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/propertyPrefixNoChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String propertyPrefixNoChildren\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "propertySeparator",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Property separator to add between properties.<\/p>\n<p>See <a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a> for an example of using this field\nto render properties as a comma separated list.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/propertySeparator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String propertySeparator\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "showChildren",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the children of a node should be shown.<\/p>\n<p>See <a href=\"foundation\/singleLineTextConfiguration.html\">singleLineTextConfiguration<\/a> for an example of using this field to\nhide all children of a node.<\/p>\n        ",
            "memberOf": "foundation.TextTreeConfiguration",
            "isConstant": false,
            "href": "foundation\/TextTreeConfiguration\/showChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showChildren\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "foundation\/TextTreeConfiguration-class.html",
    "desc": "<p>Configuration specifying how a particular <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> should be\nrendered as text art.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"foundation\/sparseTextConfiguration.html\">sparseTextConfiguration<\/a>, which is a typical style.<\/li>\n<li>\n<a href=\"foundation\/transitionTextConfiguration.html\">transitionTextConfiguration<\/a>, which is an example of a complex tree style.<\/li>\n<li>\n<a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>, for code using <a href=\"foundation\/TextTreeConfiguration-class.html\">TextTreeConfiguration<\/a>\nto render text art for arbitrary trees of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextTreeConfiguration"
}