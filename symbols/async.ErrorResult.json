{
    "name": "async.ErrorResult",
    "extends": [],
    "memberOf": "async",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>This is equal only to an error result with equal <a href=\"package-async_async\/ErrorResult\/error.html\">error<\/a> and <a href=\"package-async_async\/ErrorResult\/stackTrace.html\">stackTrace<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "async.ErrorResult",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/ErrorResult\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(Object other) =&gt;\n    other is ErrorResult &amp;&amp;\n    error == other.error &amp;&amp;\n    stackTrace == other.stackTrace;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ErrorResult",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "async.ErrorResult",
            "sig": "",
            "params": [
                {
                    "name": "error",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stackTrace",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-async_async\/ErrorResult\/ErrorResult.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ErrorResult(this.error, this.stackTrace);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "addTo",
            "type": "",
            "desc": "<p>Adds this result to an <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a>.<\/p>\n<p>Calls the sink's <code>add<\/code> or <code>addError<\/code> method as appropriate.<\/p>\n    ",
            "static": false,
            "memberOf": "async.ErrorResult",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:async.EventSink",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/ErrorResult\/addTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTo(EventSink sink) {\n  sink.addError(error, stackTrace);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "complete",
            "type": "",
            "desc": "<p>Completes a completer with this result.<\/p>\n    ",
            "static": false,
            "memberOf": "async.ErrorResult",
            "sig": "",
            "params": [
                {
                    "name": "completer",
                    "type": "dart:async.Completer",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/ErrorResult\/complete.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void complete(Completer completer) {\n  completer.completeError(error, stackTrace);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handle",
            "type": "",
            "desc": "<p>Calls an error handler with the error and stacktrace.<\/p>\n<p>An async error handler function is either a function expecting two\narguments, which will be called with the error and the stack trace, or it\nhas to be a function expecting only one argument, which will be called\nwith only the error.<\/p>\n    ",
            "static": false,
            "memberOf": "async.ErrorResult",
            "sig": "",
            "params": [
                {
                    "name": "errorHandler",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/ErrorResult\/handle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void handle(Function errorHandler) {\n  if (errorHandler is ZoneBinaryCallback) {\n    errorHandler(error, stackTrace);\n  } else {\n    errorHandler(error);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "asError",
            "type": "async.ErrorResult",
            "types": [],
            "desc": "<p>If this is an error result, returns itself.<\/p>\n<p>Otherwise returns <code>null<\/code>.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/asError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ErrorResult get asError =&gt; this;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "asFuture",
            "type": "dart:async.Future<dart:core.Null>",
            "types": [
                "dart:async.Future",
                "dart:core.Null"
            ],
            "desc": "<p>A future that has been completed with this result as a value or an error.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/asFuture.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Null&gt; get asFuture =&gt; new Future&lt;Null&gt;.error(error, stackTrace);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "asValue",
            "type": "async.ValueResult<dart:core.Null>",
            "types": [
                "async.ValueResult",
                "dart:core.Null"
            ],
            "desc": "<p>If this is a value result, returns itself.<\/p>\n<p>Otherwise returns <code>null<\/code>.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/asValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueResult&lt;Null&gt; get asValue =&gt; null;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "error",
            "type": "dart:core.Object",
            "types": [],
            "desc": "<p>The error object that was thrown.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/error.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object error\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-async_async\/ErrorResult\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-async_async\/ErrorResult\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-async_async\/ErrorResult\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-async_async\/ErrorResult\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-async_async\/ErrorResult\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-async_async\/ErrorResult\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; error.hashCode ^ stackTrace.hashCode ^ 0x1d61823f;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isError",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this result is an error result.<\/p>\n<p>Always the opposite of <a href=\"package-async_async\/ErrorResult\/isValue.html\">isValue<\/a>.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/isError.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isError =&gt; true;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isValue",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this result is a value result.<\/p>\n<p>Always the opposite of <a href=\"package-async_async\/ErrorResult\/isError.html\">isError<\/a>.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/isValue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isValue =&gt; false;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "stackTrace",
            "type": "dart:core.StackTrace",
            "types": [],
            "desc": "<p>The stack trace corresponding to where <a href=\"package-async_async\/ErrorResult\/error.html\">error<\/a> was thrown.<\/p>\n        ",
            "memberOf": "async.ErrorResult",
            "isConstant": false,
            "href": "package-async_async\/ErrorResult\/stackTrace.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackTrace stackTrace\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-async_async\/ErrorResult-class.html",
    "desc": "<p>A result representing a thrown error.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ErrorResult"
}