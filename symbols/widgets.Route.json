{
    "desc": "<p>An abstraction for an entry managed by a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>This class defines an abstract interface between the navigator and the\n\"routes\" that are pushed on and popped off the navigator. Most routes have\nvisual affordances, which they place in the navigators <a href=\"widgets\/Overlay-class.html\">Overlay<\/a> using one\nor more <a href=\"widgets\/OverlayEntry-class.html\">OverlayEntry<\/a> objects.<\/p>\n<p>See <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> for more explanation of how to use a Route\nwith navigation, including code examples.<\/p>\n<p>See <a href=\"material\/MaterialPageRoute-class.html\">MaterialPageRoute<\/a> for a route that replaces the\nentire screen with a platform-adaptive transition.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Route-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Route",
    "shortname": "Route",
    "extends": [],
    "realImplementors": [
        "cupertino.CupertinoPageRoute",
        "material.MaterialPageRoute",
        "widgets.PageRouteBuilder"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initialize the <a href=\"widgets\/Route-class.html\">Route<\/a>.<\/p>\n<p>If the <code>settings<\/code> are not provided, an empty <a href=\"widgets\/RouteSettings-class.html\">RouteSettings<\/a> object is\nused instead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Route({ RouteSettings settings }) : settings = settings ?? const RouteSettings();<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/Route.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "settings",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.RouteSettings"
                }
            ]
        },
        {
            "desc": "<p>Called whenever the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> has its widget rebuilt, to indicate that\nthe route may wish to rebuild as well.<\/p>\n<p>This is called by the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> whenever the <a href=\"widgets\/NavigatorState-class.html\">NavigatorState<\/a>'s\n<code>widget<\/code> changes, for example because the <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> has been rebuilt.\nThis ensures that routes that directly refer to the state of the widget\nthat built the <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> will be notified when that widget rebuilds,\nsince it would otherwise be difficult to notify the routes that state they\ndepend on may have changed.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Route\/changedInternalState.html\">changedInternalState<\/a>, the equivalent but for changes to the internal\nstate of the route.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid changedExternalState() { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/changedExternalState.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>Called whenever the internal state of the route has changed.<\/p>\n<p>This should be called whenever <a href=\"widgets\/Route\/willHandlePopInternally.html\">willHandlePopInternally<\/a>, <a href=\"widgets\/Route\/didPop.html\">didPop<\/a>,\n<code>offstage<\/code>, or other internal state of the route changes value. It is used\nby <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a>, for example, to report the new information via its\ninherited widget to any children of the route.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Route\/changedExternalState.html\">changedExternalState<\/a>, which is called when the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> rebuilds.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid changedInternalState() { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/changedInternalState.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>This route's next route has changed to the given new route. This is called\non a route whenever the next route changes for any reason, so long as it\nis in the history, including when a route is first added to a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>\n(e.g. by <a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a>), except for cases when <a href=\"widgets\/Route\/didPopNext.html\">didPopNext<\/a> would be\ncalled. <code>nextRoute<\/code> will be null if there's no next route.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid didChangeNext(Route&lt;dynamic&gt; nextRoute) { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didChangeNext.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "nextRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>This route's previous route has changed to the given new route. This is\ncalled on a route whenever the previous route changes for any reason, so\nlong as it is in the history. <code>previousRoute<\/code> will be null if there's no\nprevious route.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid didChangePrevious(Route&lt;dynamic&gt; previousRoute) { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didChangePrevious.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "previousRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>The route was popped or is otherwise being removed somewhat gracefully.<\/p>\n<p>This is called by <a href=\"widgets\/Route\/didPop.html\">didPop<\/a> and in response to <a href=\"widgets\/Navigator\/pushReplacement.html\">Navigator.pushReplacement<\/a>.<\/p>\n<p>The <a href=\"widgets\/Route\/popped.html\">popped<\/a> future is completed by this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid didComplete(T result) {\n  _popCompleter.complete(result);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didComplete.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "result",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>A request was made to pop this route. If the route can handle it\ninternally (e.g. because it has its own stack of internal state) then\nreturn false, otherwise return true (by return the value of calling\n<code>super.didPop<\/code>). Returning false will prevent the default behavior of\n<a href=\"widgets\/NavigatorState\/pop.html\">NavigatorState.pop<\/a>.<\/p>\n<p>When this function returns true, the navigator removes this route from\nthe history but does not yet call <a href=\"widgets\/Route\/dispose.html\">dispose<\/a>. Instead, it is the route's\nresponsibility to call <a href=\"widgets\/NavigatorState\/finalizeRoute.html\">NavigatorState.finalizeRoute<\/a>, which will in turn\ncall <a href=\"widgets\/Route\/dispose.html\">dispose<\/a> on the route. This sequence lets the route perform an\nexit animation (or some other visual effect) after being popped but prior\nto being disposed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nbool didPop(T result) {\n  didComplete(result);\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didPop.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "result",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>The given route, which was above this one, has been popped off the\nnavigator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid didPopNext(Route&lt;dynamic&gt; nextRoute) { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didPopNext.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "nextRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>Called after <a href=\"widgets\/Route\/install.html\">install<\/a> when the route is pushed onto the navigator.<\/p>\n<p>The returned value resolves when the push transition is complete.<\/p>\n<p>The <a href=\"widgets\/Route\/didChangeNext.html\">didChangeNext<\/a> and <a href=\"widgets\/Route\/didChangePrevious.html\">didChangePrevious<\/a> methods are typically called\nimmediately after this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nTickerFuture didPush() =&gt; TickerFuture.complete();<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didPush.html",
            "isDeprecated": "0",
            "type": "scheduler.TickerFuture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>Called after <a href=\"widgets\/Route\/install.html\">install<\/a> when the route replaced another in the navigator.<\/p>\n<p>The <a href=\"widgets\/Route\/didChangeNext.html\">didChangeNext<\/a> and <a href=\"widgets\/Route\/didChangePrevious.html\">didChangePrevious<\/a> methods are typically called\nimmediately after this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid didReplace(Route&lt;dynamic&gt; oldRoute) { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/didReplace.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "oldRoute",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Route"
                }
            ]
        },
        {
            "desc": "<p>The route should remove its overlays and free any other resources.<\/p>\n<p>This route is no longer referenced by the navigator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\n@protected\nvoid dispose() {\n  _navigator = null;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>Called when the route is inserted into the navigator.<\/p>\n<p>Use this to populate <a href=\"widgets\/Route\/overlayEntries.html\">overlayEntries<\/a> and add them to the overlay\n(accessible as <code>Navigator.overlay<\/code>). (The reason the <a href=\"widgets\/Route-class.html\">Route<\/a> is\nresponsible for doing this, rather than the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, is that the\n<a href=\"widgets\/Route-class.html\">Route<\/a> will be responsible for <em>removing<\/em> the entries and this way it's\nsymmetric.)<\/p>\n<p>The <code>insertionPoint<\/code> argument will be null if this is the first route\ninserted. Otherwise, it indicates the overlay entry to place immediately\nbelow the first overlay for this route.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid install(OverlayEntry insertionPoint) { }<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/install.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": [
                {
                    "name": "insertionPoint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.OverlayEntry"
                }
            ]
        },
        {
            "desc": "<p>Returns false if this route wants to veto a <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>. This method is\ncalled by <a href=\"widgets\/Navigator\/maybePop.html\">Navigator.maybePop<\/a>.<\/p>\n<p>By default, routes veto a pop if they're the first route in the history\n(i.e., if <a href=\"widgets\/Route\/isFirst.html\">isFirst<\/a>). This behavior prevents the user from popping the\nfirst route off the history and being stranded at a blank screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Form-class.html\">Form<\/a>, which provides a <a href=\"widgets\/Form\/onWillPop.html\">Form.onWillPop<\/a> callback that uses this\nmechanism.<\/li>\n<li>\n<a href=\"widgets\/WillPopScope-class.html\">WillPopScope<\/a>, another widget that provides a way to intercept the\nback button.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RoutePopDisposition&gt; willPop() async {\n  return isFirst ? RoutePopDisposition.bubble : RoutePopDisposition.pop;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Route\/willPop.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<widgets.RoutePopDisposition>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Route",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this route is on the navigator.<\/p>\n<p>If the route is not only active, but also the current route (the top-most\nroute), then <a href=\"widgets\/Route\/isCurrent.html\">isCurrent<\/a> will also be true. If it is the first route (the\nbottom-most route), then <a href=\"widgets\/Route\/isFirst.html\">isFirst<\/a> will also be true.<\/p>\n<p>If a higher route is entirely opaque, then the route will be active but not\nrendered. It is even possible for the route to be active but for the stateful\nwidgets within the route to not be instantiated. See <a href=\"widgets\/ModalRoute\/maintainState.html\">ModalRoute.maintainState<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isActive {\n  return _navigator != null &amp;&amp; _navigator._history.contains(this);\n}<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/isActive.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>Whether this route is the top-most route on the navigator.<\/p>\n<p>If this is true, then <a href=\"widgets\/Route\/isActive.html\">isActive<\/a> is also true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCurrent {\n  return _navigator != null &amp;&amp; _navigator._history.last == this;\n}<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/isCurrent.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>Whether this route is the bottom-most route on the navigator.<\/p>\n<p>If this is true, then <a href=\"widgets\/Navigator\/canPop.html\">Navigator.canPop<\/a> will return false if this route's\n<a href=\"widgets\/Route\/willHandlePopInternally.html\">willHandlePopInternally<\/a> returns false.<\/p>\n<p>If <a href=\"widgets\/Route\/isFirst.html\">isFirst<\/a> and <a href=\"widgets\/Route\/isCurrent.html\">isCurrent<\/a> are both true then this is the only route on\nthe navigator (and <a href=\"widgets\/Route\/isActive.html\">isActive<\/a> will also be true).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFirst {\n  return _navigator != null &amp;&amp; _navigator._history.first == this;\n}<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/isFirst.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>The navigator that the route is in, if any.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">NavigatorState get navigator =&gt; _navigator;<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/navigator.html",
            "isDeprecated": "0",
            "type": "widgets.NavigatorState",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>The overlay entries for this route.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;OverlayEntry&gt; get overlayEntries =&gt; const &lt;OverlayEntry&gt;[];<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/overlayEntries.html",
            "isDeprecated": "0",
            "type": "dart:core.List<widgets.OverlayEntry>",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>A future that completes when this route is popped off the navigator.<\/p>\n<p>The future completes with the value given to <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>, if any.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; get popped =&gt; _popCompleter.future;<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/popped.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>The settings for this route.<\/p>\n<p>See <a href=\"widgets\/RouteSettings-class.html\">RouteSettings<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteSettings settings\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/settings.html",
            "isDeprecated": "0",
            "type": "widgets.RouteSettings",
            "memberOf": "widgets.Route",
            "params": []
        },
        {
            "desc": "<p>Whether calling <a href=\"widgets\/Route\/didPop.html\">didPop<\/a> would return false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get willHandlePopInternally =&gt; false;<\/code><\/pre>\n        ",
            "href": "widgets\/Route\/willHandlePopInternally.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Route",
            "params": []
        }
    ]
}