{
    "name": "services.CachingAssetBundle",
    "extends": [
        "services.AssetBundle",
        "dart:core.Object"
    ],
    "memberOf": "services",
    "events": [],
    "methods": [
        {
            "name": "CachingAssetBundle",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "services.CachingAssetBundle",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "services\/CachingAssetBundle\/CachingAssetBundle.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "evict",
            "type": "",
            "desc": "<p>If this is a caching asset bundle, and the given key describes a cached\nasset, then evict the asset from the cache so that the next time it is\nloaded, the cache will be reread from the asset bundle.<\/p>\n    ",
            "static": false,
            "memberOf": "services.CachingAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/CachingAssetBundle\/evict.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid evict(String key) {\n  _stringCache.remove(key);\n  _structuredDataCache.remove(key);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "loadString",
            "type": "dart:async.Future<dart:core.String>",
            "desc": "<p>Retrieve a string from the asset bundle.<\/p>\n<p>Throws an exception if the asset is not found.<\/p>\n<p>If the <code>cache<\/code> argument is set to false, then the data will not be\ncached, and reading the data may bypass the cache. This is useful if the\ncaller is going to be doing its own caching. (It might not be cached if\nit's set to true either, that depends on the asset bundle\nimplementation.)<\/p>\n    ",
            "static": false,
            "memberOf": "services.CachingAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cache",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/CachingAssetBundle\/loadString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; loadString(String key, { bool cache = true }) {\n  if (cache)\n    return _stringCache.putIfAbsent(key, () =&gt; super.loadString(key));\n  return super.loadString(key);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.String"
            ]
        },
        {
            "name": "loadStructuredData",
            "type": "dart:async.Future",
            "desc": "<p>Retrieve a string from the asset bundle, parse it with the given function,\nand return the function's result.<\/p>\n<p>The result of parsing the string is cached (the string itself is not,\nunless you also fetch it with <a href=\"services\/CachingAssetBundle\/loadString.html\">loadString<\/a>). For any given <code>key<\/code>, the\n<code>parser<\/code> is only run the first time.<\/p>\n<p>Once the value has been parsed, the future returned by this function for\nsubsequent calls will be a <a href=\"foundation\/SynchronousFuture-class.html\">SynchronousFuture<\/a>, which resolves its\ncallback synchronously.<\/p>\n    ",
            "static": false,
            "memberOf": "services.CachingAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/CachingAssetBundle\/loadStructuredData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; loadStructuredData&lt;T&gt;(String key, Future&lt;T&gt; parser(String value)) {\n  assert(key != null);\n  assert(parser != null);\n  if (_structuredDataCache.containsKey(key))\n    return _structuredDataCache[key];\n  Completer&lt;T&gt; completer;\n  Future&lt;T&gt; result;\n  loadString(key, cache: false).then&lt;T&gt;(parser).then&lt;void&gt;((T value) {\n    result = SynchronousFuture&lt;T&gt;(value);\n    _structuredDataCache[key] = result;\n    if (completer != null) {\n      \/\/ We already returned from the loadStructuredData function, which means\n      \/\/ we are in the asynchronous mode. Pass the value to the completer. The\n      \/\/ completer's future is what we returned.\n      completer.complete(value);\n    }\n  });\n  if (result != null) {\n    \/\/ The code above ran synchronously, and came up with an answer.\n    \/\/ Return the SynchronousFuture that we created above.\n    return result;\n  }\n  \/\/ The code above hasn't yet run its \"then\" handler yet. Let's prepare a\n  \/\/ completer for it to use when it does run.\n  completer = Completer&lt;T&gt;();\n  _structuredDataCache[key] = completer.future;\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "services.PlatformAssetBundle"
    ],
    "realImplementors": [
        "services.PlatformAssetBundle"
    ],
    "cn": [],
    "href": "services\/CachingAssetBundle-class.html",
    "desc": "<p>An <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> that permanently caches string and structured resources\nthat have been fetched.<\/p>\n<p>Strings (for <a href=\"services\/CachingAssetBundle\/loadString.html\">loadString<\/a> and <a href=\"services\/CachingAssetBundle\/loadStructuredData.html\">loadStructuredData<\/a>) are decoded as UTF-8.\nData that is cached is cached for the lifetime of the asset bundle\n(typically the lifetime of the application).<\/p>\n<p>Binary resources (from <a href=\"services\/AssetBundle\/load.html\">load<\/a>) are not cached.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "CachingAssetBundle"
}