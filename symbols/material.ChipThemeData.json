{
    "desc": "<p>Holds the color, shape, and text styles for a material design chip theme.<\/p>\n<p>Use this class to configure a <a href=\"material\/ChipTheme-class.html\">ChipTheme<\/a> widget, or to set the\n<a href=\"material\/ThemeData\/chipTheme.html\">ThemeData.chipTheme<\/a> for a <a href=\"material\/Theme-class.html\">Theme<\/a> widget.<\/p>\n<p>To obtain the current ambient chip theme, use <a href=\"material\/ChipTheme\/of.html\">ChipTheme.of<\/a>.<\/p>\n<p>The parts of a chip are:<\/p>\n<ul>\n<li>The \"avatar\", which is a widget that appears at the beginning of the\nchip. This is typically a <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> widget.<\/li>\n<li>The \"label\", which is the widget displayed in the center of the chip.\nTypically this is a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/li>\n<li>The \"delete icon\", which is a widget that appears at the end of the chip.<\/li>\n<li>The chip is disabled when it is not accepting user input. Only some chips\nhave a disabled state: <a href=\"material\/InputChip-class.html\">InputChip<\/a>, <a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>, and <a href=\"material\/FilterChip-class.html\">FilterChip<\/a>.<\/li>\n<\/ul>\n<p>The simplest way to create a ChipThemeData is to use <a href=\"material\/ChipThemeData\/copyWith.html\">copyWith<\/a> on the one\nyou get from <a href=\"material\/ChipTheme\/of.html\">ChipTheme.of<\/a>, or create an entirely new one with\n<a href=\"material\/ChipThemeData\/ChipThemeData.fromDefaults.html\">ChipThemeData..fromDefaults<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class CarColor extends StatefulWidget {\n  @override\n  State createState() =&gt; _CarColorState();\n}\n\nclass _CarColorState extends State&lt;CarColor&gt; {\n  Color _color = Colors.red;\n\n  @override\n  Widget build(BuildContext context) {\n    return ChipTheme(\n      data: ChipTheme.of(context).copyWith(backgroundColor: Colors.lightBlue),\n      child: ChoiceChip(\n        label: Text('Light Blue'),\n        onSelected: (bool value) {\n          setState(() {\n            _color = value ? Colors.lightBlue : Colors.red;\n          });\n        },\n        selected: _color == Colors.lightBlue,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a>, a chip that displays information and can be deleted.<\/li>\n<li>\n<a href=\"material\/InputChip-class.html\">InputChip<\/a>, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.<\/li>\n<li>\n<a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.<\/li>\n<li>\n<a href=\"material\/FilterChip-class.html\">FilterChip<\/a>, uses tags or descriptive words as a way to filter content.<\/li>\n<li>\n<a href=\"material\/ActionChip-class.html\">ActionChip<\/a>, represents an action related to primary content.<\/li>\n<li>\n<a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a>, which shows images or initials of entities.<\/li>\n<li>\n<a href=\"widgets\/Wrap-class.html\">Wrap<\/a>, A widget that displays its children in multiple horizontal or\nvertical runs.<\/li>\n<li>\n<a href=\"material\/ChipTheme-class.html\">ChipTheme<\/a> widget, which can override the chip theme of its\nchildren.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a> widget, which performs a similar function to <a href=\"material\/ChipTheme-class.html\">ChipTheme<\/a>,\nbut for overall themes.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, which has a default <a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/ChipThemeData-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.ChipThemeData",
    "shortname": "ChipThemeData",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a <a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a> given a set of exact values. All the values\nmust be specified except for <code>shadowColor<\/code>, <code>selectedShadowColor<\/code>,\n<code>elevation<\/code>, and <code>pressElevation<\/code>, which may be null.<\/p>\n<p>This will rarely be used directly. It is used by <a href=\"material\/ChipThemeData\/lerp.html\">lerp<\/a> to\ncreate intermediate themes based on two themes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ChipThemeData({\n  @required this.backgroundColor,\n  this.deleteIconColor,\n  @required this.disabledColor,\n  @required this.selectedColor,\n  @required this.secondarySelectedColor,\n  this.shadowColor,\n  this.selectedShadowColor,\n  @required this.labelPadding,\n  @required this.padding,\n  @required this.shape,\n  @required this.labelStyle,\n  @required this.secondaryLabelStyle,\n  @required this.brightness,\n  this.elevation,\n  this.pressElevation,\n}) : assert(backgroundColor != null),\n     assert(disabledColor != null),\n     assert(selectedColor != null),\n     assert(secondarySelectedColor != null),\n     assert(labelPadding != null),\n     assert(padding != null),\n     assert(shape != null),\n     assert(labelStyle != null),\n     assert(secondaryLabelStyle != null),\n     assert(brightness != null);<\/code><\/pre>\n    ",
            "href": "material\/ChipThemeData\/ChipThemeData.html",
            "isDeprecated": false,
            "type": "",
            "name": "ChipThemeData",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ChipThemeData",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "brightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "deleteIconColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "labelPadding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "labelStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "padding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "pressElevation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "secondaryLabelStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "secondarySelectedColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedShadowColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shadowColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this object but with the given fields replaced with the\nnew values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChipThemeData copyWith({\n  Color backgroundColor,\n  Color deleteIconColor,\n  Color disabledColor,\n  Color selectedColor,\n  Color secondarySelectedColor,\n  Color shadowColor,\n  Color selectedShadowColor,\n  EdgeInsetsGeometry labelPadding,\n  EdgeInsetsGeometry padding,\n  ShapeBorder shape,\n  TextStyle labelStyle,\n  TextStyle secondaryLabelStyle,\n  Brightness brightness,\n  double elevation,\n  double pressElevation,\n}) {\n  return ChipThemeData(\n    backgroundColor: backgroundColor ?? this.backgroundColor,\n    deleteIconColor: deleteIconColor ?? this.deleteIconColor,\n    disabledColor: disabledColor ?? this.disabledColor,\n    selectedColor: selectedColor ?? this.selectedColor,\n    secondarySelectedColor: secondarySelectedColor ?? this.secondarySelectedColor,\n    shadowColor: shadowColor ?? this.shadowColor,\n    selectedShadowColor: selectedShadowColor ?? this.selectedShadowColor,\n    labelPadding: labelPadding ?? this.labelPadding,\n    padding: padding ?? this.padding,\n    shape: shape ?? this.shape,\n    labelStyle: labelStyle ?? this.labelStyle,\n    secondaryLabelStyle: secondaryLabelStyle ?? this.secondaryLabelStyle,\n    brightness: brightness ?? this.brightness,\n    elevation: elevation ?? this.elevation,\n    pressElevation: pressElevation ?? this.pressElevation,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ChipThemeData\/copyWith.html",
            "isDeprecated": false,
            "type": "material.ChipThemeData",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ChipThemeData",
            "params": [
                {
                    "name": "backgroundColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "brightness",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "deleteIconColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "labelPadding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "labelStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "padding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "pressElevation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "secondaryLabelStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "secondarySelectedColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedShadowColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shadowColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.ShapeBorder"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/ChipThemeData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final ThemeData defaultTheme = ThemeData.fallback();\n  final ChipThemeData defaultData = ChipThemeData.fromDefaults(\n    secondaryColor: defaultTheme.primaryColor,\n    brightness: defaultTheme.brightness,\n    labelStyle: defaultTheme.textTheme.body2,\n  );\n  properties.add(DiagnosticsProperty&lt;Color&gt;('backgroundColor', backgroundColor, defaultValue: defaultData.backgroundColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('deleteIconColor', deleteIconColor, defaultValue: defaultData.deleteIconColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledColor', disabledColor, defaultValue: defaultData.disabledColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('selectedColor', selectedColor, defaultValue: defaultData.selectedColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('secondarySelectedColor', secondarySelectedColor, defaultValue: defaultData.secondarySelectedColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('shadowColor', shadowColor, defaultValue: defaultData.shadowColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('selectedShadowColor', selectedShadowColor, defaultValue: defaultData.selectedShadowColor));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('labelPadding', labelPadding, defaultValue: defaultData.labelPadding));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding, defaultValue: defaultData.padding));\n  properties.add(DiagnosticsProperty&lt;ShapeBorder&gt;('shape', shape, defaultValue: defaultData.shape));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('labelStyle', labelStyle, defaultValue: defaultData.labelStyle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('secondaryLabelStyle', secondaryLabelStyle, defaultValue: defaultData.secondaryLabelStyle));\n  properties.add(EnumProperty&lt;Brightness&gt;('brightness', brightness, defaultValue: defaultData.brightness));\n  properties.add(DoubleProperty('elevation', elevation, defaultValue: defaultData.elevation));\n  properties.add(DoubleProperty('pressElevation', pressElevation, defaultValue: defaultData.pressElevation));\n}<\/code><\/pre>\n    ",
            "href": "material\/ChipThemeData\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ChipThemeData",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two chip themes.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ChipThemeData lerp(ChipThemeData a, ChipThemeData b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  return ChipThemeData(\n    backgroundColor: Color.lerp(a?.backgroundColor, b?.backgroundColor, t),\n    deleteIconColor: Color.lerp(a?.deleteIconColor, b?.deleteIconColor, t),\n    disabledColor: Color.lerp(a?.disabledColor, b?.disabledColor, t),\n    selectedColor: Color.lerp(a?.selectedColor, b?.selectedColor, t),\n    secondarySelectedColor: Color.lerp(a?.secondarySelectedColor, b?.secondarySelectedColor, t),\n    shadowColor: Color.lerp(a?.shadowColor, b?.shadowColor, t),\n    selectedShadowColor: Color.lerp(a?.selectedShadowColor, b?.selectedShadowColor, t),\n    labelPadding: EdgeInsetsGeometry.lerp(a?.labelPadding, b?.labelPadding, t),\n    padding: EdgeInsetsGeometry.lerp(a?.padding, b?.padding, t),\n    shape: ShapeBorder.lerp(a?.shape, b?.shape, t),\n    labelStyle: TextStyle.lerp(a?.labelStyle, b?.labelStyle, t),\n    secondaryLabelStyle: TextStyle.lerp(a?.secondaryLabelStyle, b?.secondaryLabelStyle, t),\n    brightness: t &lt; 0.5 ? a?.brightness ?? Brightness.light : b?.brightness ?? Brightness.light,\n    elevation: lerpDouble(a?.elevation, b?.elevation, t),\n    pressElevation: lerpDouble(a?.pressElevation, b?.pressElevation, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ChipThemeData\/lerp.html",
            "isDeprecated": false,
            "type": "material.ChipThemeData",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ChipThemeData",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ChipThemeData"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ChipThemeData"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Color to be used for the unselected, enabled chip's background.<\/p>\n<p>The default is light grey.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/backgroundColor.html",
            "name": "backgroundColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The brightness setting for this theme.<\/p>\n<p>This affects various base material color choices in the chip rendering.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness brightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/brightness.html",
            "name": "brightness",
            "isDeprecated": false,
            "type": "dart:ui.Brightness",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"dart-ui\/Color-class.html\">Color<\/a> for the delete icon. The default is Color(0xde000000)\n(slightly transparent black) for light themes, and Color(0xdeffffff)\n(slightly transparent white) for dark themes.<\/p>\n<p>May be set to null, in which case the ambient <code>IconTheme.color<\/code> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color deleteIconColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/deleteIconColor.html",
            "name": "deleteIconColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>Color to be used for the chip's background indicating that it is disabled.<\/p>\n<p>The chip is disabled when <code>isEnabled<\/code> is false, or all three of\n<a href=\"material\/SelectableChipAttributes\/onSelected.html\">SelectableChipAttributes.onSelected<\/a>, <a href=\"material\/TappableChipAttributes\/onPressed.html\">TappableChipAttributes.onPressed<\/a>,\nand <code>DeletableChipAttributes.onDelete<\/code> are null.<\/p>\n<p>It defaults to <a href=\"material\/Colors\/black38-constant.html\">Colors.black38<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/disabledColor.html",
            "name": "disabledColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The elevation to be applied to the chip.<\/p>\n<p>If null, the chip defaults to 0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/elevation.html",
            "name": "elevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/ChipThemeData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/ChipThemeData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/ChipThemeData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/ChipThemeData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/ChipThemeData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/ChipThemeData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    backgroundColor,\n    deleteIconColor,\n    disabledColor,\n    selectedColor,\n    secondarySelectedColor,\n    shadowColor,\n    selectedShadowColor,\n    labelPadding,\n    padding,\n    shape,\n    labelStyle,\n    secondaryLabelStyle,\n    brightness,\n    elevation,\n    pressElevation,\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The padding around the <code>label<\/code> widget.<\/p>\n<p>By default, this is 4 logical pixels at the beginning and the end of the\nlabel, and zero on top and bottom.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry labelPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/labelPadding.html",
            "name": "labelPadding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The style to be applied to the chip's label.<\/p>\n<p>This only has an effect on label widgets that respect the\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, such as <a href=\"widgets\/Text-class.html\">Text<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/labelStyle.html",
            "name": "labelStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The padding between the contents of the chip and the outside <a href=\"material\/ChipThemeData\/shape.html\">shape<\/a>.<\/p>\n<p>Defaults to 4 logical pixels on all sides.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/padding.html",
            "name": "padding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The elevation to be applied to the chip during the press motion.<\/p>\n<p>If null, the chip defaults to 8.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressElevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/pressElevation.html",
            "name": "pressElevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>An alternate style to be applied to the chip's label. For example, this\nstyle is applied to the text of a selected <a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>.<\/p>\n<p>This only has an effect on label widgets that respect the\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, such as <a href=\"widgets\/Text-class.html\">Text<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle secondaryLabelStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/secondaryLabelStyle.html",
            "name": "secondaryLabelStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>An alternate color to be used for the chip's background, indicating that\nit is selected. For example, this color is used by <a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a> when the\nchoice is selected.<\/p>\n<p>The chip is selected when <code>selected<\/code> is true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color secondarySelectedColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/secondarySelectedColor.html",
            "name": "secondarySelectedColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>Color to be used for the chip's background, indicating that it is\nselected.<\/p>\n<p>The chip is selected when <code>selected<\/code> is true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/selectedColor.html",
            "name": "selectedColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0 and the\nchip is selected.<\/p>\n<p>If null, the chip defaults to <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"material\/ChipThemeData\/shadowColor.html\">shadowColor<\/a><\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedShadowColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/selectedShadowColor.html",
            "name": "selectedShadowColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0.<\/p>\n<p>If null, the chip defaults to <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"material\/ChipThemeData\/selectedShadowColor.html\">selectedShadowColor<\/a><\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color shadowColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/shadowColor.html",
            "name": "shadowColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        },
        {
            "desc": "<p>The border to draw around the chip.<\/p>\n<p>Defaults to a <a href=\"painting\/StadiumBorder-class.html\">StadiumBorder<\/a>. Must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipThemeData\/shape.html",
            "name": "shape",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.ChipThemeData",
            "params": []
        }
    ]
}