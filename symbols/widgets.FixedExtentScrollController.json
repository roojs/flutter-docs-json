{
    "desc": "<p>A controller for scroll views whose items have the same size.<\/p>\n<p>Similar to a standard <a href=\"widgets\/ScrollController-class.html\">ScrollController<\/a> but with the added convenience\nmechanisms to read and go to item indices rather than a raw pixel scroll\noffset.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListWheelScrollView-class.html\">ListWheelScrollView<\/a>, a scrollable view widget with fixed size items\nthat this widget controls.<\/li>\n<li>\n<a href=\"widgets\/FixedExtentMetrics-class.html\">FixedExtentMetrics<\/a>, the <code>metrics<\/code> property exposed by\n<a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> from <a href=\"widgets\/ListWheelScrollView-class.html\">ListWheelScrollView<\/a> which can be used\nto listen to the current item index on a push basis rather than polling\nthe <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/FixedExtentScrollController-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.FixedExtentScrollController",
    "shortname": "FixedExtentScrollController",
    "extends": [
        "widgets.ScrollController",
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a scroll controller for scrollables whose items have the same size.<\/p>\n<p><code>initialItem<\/code> defaults to 0 and must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FixedExtentScrollController({\n  this.initialItem = 0,\n}) : assert(initialItem != null);<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollController\/FixedExtentScrollController.html",
            "isDeprecated": false,
            "type": "",
            "name": "FixedExtentScrollController",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollController",
            "params": [
                {
                    "name": "initialItem",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Animates the controlled scroll view to the given item index.<\/p>\n<p>The animation lasts for the given duration and follows the given curve.\nThe returned <a href=\"dart-async\/Future-class.html\">Future<\/a> resolves when the animation completes.<\/p>\n<p>The <code>duration<\/code> and <code>curve<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; animateToItem(\n  int itemIndex, {\n  @required Duration duration,\n  @required Curve curve,\n}) async {\n  if (!hasClients) {\n    return;\n  }\n\n  final List&lt;Future&lt;void&gt;&gt; futures = &lt;Future&lt;void&gt;&gt;[];\n  for (_FixedExtentScrollPosition position in positions) {\n    futures.add(position.animateTo(\n      itemIndex * position.itemExtent,\n      duration: duration,\n      curve: curve,\n    ));\n  }\n  await Future.wait&lt;void&gt;(futures);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollController\/animateToItem.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "animateToItem",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollController",
            "params": [
                {
                    "name": "curve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Curve"
                },
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "itemIndex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> for use by a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n<p>Subclasses can override this function to customize the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a>\nused by the scrollable widgets they control. For example, <a href=\"widgets\/PageController-class.html\">PageController<\/a>\noverrides this function to return a page-oriented scroll position\nsubclass that keeps the same page visible when the scrollable widget\nresizes.<\/p>\n<p>By default, returns a <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a>.<\/p>\n<p>The arguments are generally passed to the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> being created:<\/p>\n<ul>\n<li>\n<code>physics<\/code>: An instance of <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> that determines how the\n<a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> should react to user interactions, how it should\nsimulate scrolling when released or flung, etc. The value will not be\nnull. It typically comes from the <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a> or other widget that\ncreates the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, or, if none was provided, from the ambient\n<a href=\"widgets\/ScrollConfiguration-class.html\">ScrollConfiguration<\/a>.<\/li>\n<li>\n<code>context<\/code>: A <a href=\"widgets\/ScrollContext-class.html\">ScrollContext<\/a> used for communicating with the object\nthat is to own the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> (typically, this is the\n<a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> itself).<\/li>\n<li>\n<code>oldPosition<\/code>: If this is not the first time a <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> has\nbeen created for this <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, this will be the previous instance.\nThis is used when the environment has changed and the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>\nneeds to recreate the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> object. It is null the first\ntime the <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a> is created.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nScrollPosition createScrollPosition(ScrollPhysics physics, ScrollContext context, ScrollPosition oldPosition) {\n  return _FixedExtentScrollPosition(\n    physics: physics,\n    context: context,\n    initialItem: initialItem,\n    oldPosition: oldPosition,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollController\/createScrollPosition.html",
            "isDeprecated": false,
            "type": "widgets.ScrollPosition",
            "name": "createScrollPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollController",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollContext"
                },
                {
                    "name": "oldPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollPosition"
                },
                {
                    "name": "physics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Changes which item index is centered in the controlled scroll view.<\/p>\n<p>Jumps the item index position from its current value to the given value,\nwithout animation, and without checking if the new value is in range.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void jumpToItem(int itemIndex) {\n  for (_FixedExtentScrollPosition position in positions) {\n    position.jumpTo(itemIndex * position.itemExtent);\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollController\/jumpToItem.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "jumpToItem",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollController",
            "params": [
                {
                    "name": "itemIndex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The page to show when first creating the scroll view.<\/p>\n<p>Defaults to 0 and must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int initialItem\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FixedExtentScrollController\/initialItem.html",
            "name": "initialItem",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "widgets.FixedExtentScrollController",
            "params": []
        },
        {
            "desc": "<p>The currently selected item index that's closest to the center of the viewport.<\/p>\n<p>There are circumstances that this <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a> can't know\nthe current item. Reading <a href=\"widgets\/FixedExtentScrollController\/selectedItem.html\">selectedItem<\/a> will throw an <a href=\"dart-core\/AssertionError-class.html\">AssertionError<\/a> in\nthe following cases:<\/p>\n<ol>\n<li>No scroll view is currently using this <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a>.<\/li>\n<li>More than one scroll views using the same <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a>.<\/li>\n<\/ol>\n<p>The <a href=\"widgets\/ScrollController\/hasClients.html\">hasClients<\/a> property can be used to check if a scroll view is\nattached prior to accessing <a href=\"widgets\/FixedExtentScrollController\/selectedItem.html\">selectedItem<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get selectedItem {\n  assert(\n    positions.isNotEmpty,\n    'FixedExtentScrollController.selectedItem cannot be accessed before a '\n    'scroll view is built with it.',\n  );\n  assert(\n    positions.length == 1,\n    'The selectedItem property cannot be read when multiple scroll views are '\n    'attached to the same FixedExtentScrollController.',\n  );\n  final _FixedExtentScrollPosition position = this.position;\n  return position.itemIndex;\n}<\/code><\/pre>\n        ",
            "href": "widgets\/FixedExtentScrollController\/selectedItem.html",
            "name": "selectedItem",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "widgets.FixedExtentScrollController",
            "params": []
        }
    ]
}