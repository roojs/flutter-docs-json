{
    "desc": "",
    "dtype": "class",
    "example": "",
    "href": "dart-convert\/AsciiDecoder-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "dart:convert",
    "name": "dart:convert.AsciiDecoder",
    "shortname": "AsciiDecoder",
    "extends": [
        "dart:core.String",
        "dart:core.int",
        "dart:core.List",
        "dart:convert.Converter",
        "dart:core.String",
        "dart:core.int",
        "dart:core.List",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AsciiDecoder({bool allowInvalid = false})\n    : super(allowInvalid, _asciiMask);<\/code><\/pre>\n    ",
            "href": "dart-convert\/AsciiDecoder\/AsciiDecoder.html",
            "isDeprecated": false,
            "type": "",
            "name": "AsciiDecoder",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:convert.AsciiDecoder",
            "params": [
                {
                    "name": "allowInvalid",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;String&gt; bind(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
            "href": "dart-convert\/AsciiDecoder\/bind.html",
            "isDeprecated": false,
            "type": "dart:async.Stream<dart:core.String>",
            "name": "bind",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.AsciiDecoder",
            "params": [
                {
                    "name": "stream",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                }
            ]
        },
        {
            "desc": "<p>Converts the <code>bytes<\/code> (a list of unsigned 7- or 8-bit integers) to the\ncorresponding string.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, only the sub-list of bytes from\n<code>start<\/code> to <code>end<\/code> (<code>end<\/code> not inclusive) is used as input to the conversion.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(List&lt;int&gt; bytes, [int start = 0, int end]) {\n  var byteCount = bytes.length;\n  RangeError.checkValidRange(start, end, byteCount);\n  end ??= byteCount;\n\n  for (var i = start; i &lt; end; i++) {\n    var byte = bytes[i];\n    if ((byte &amp; ~_subsetMask) != 0) {\n      if (!_allowInvalid) {\n        throw FormatException(\"Invalid value in input: $byte\");\n      }\n      return _convertInvalid(bytes, start, end);\n    }\n  }\n  return String.fromCharCodes(bytes, start, end);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/AsciiDecoder\/convert.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "convert",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.AsciiDecoder",
            "params": [
                {
                    "name": "bytes",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The converter works more efficiently if the given <code>sink<\/code> is a\n<a href=\"dart-convert\/StringConversionSink-class.html\">StringConversionSink<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  StringConversionSink stringSink;\n  if (sink is StringConversionSink) {\n    stringSink = sink;\n  } else {\n    stringSink = StringConversionSink.from(sink);\n  }\n  \/\/ TODO(lrn): Use asUtf16Sink when it becomes available. It\n  \/\/ works just as well, is likely to have less decoding overhead,\n  \/\/ and make adding U+FFFD easier.\n  \/\/ At that time, merge this with _Latin1DecoderSink;\n  if (_allowInvalid) {\n    return _ErrorHandlingAsciiDecoderSink(stringSink.asUtf8Sink(false));\n  } else {\n    return _SimpleAsciiDecoderSink(stringSink);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/AsciiDecoder\/startChunkedConversion.html",
            "isDeprecated": false,
            "type": "dart:convert.ByteConversionSink",
            "name": "startChunkedConversion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.AsciiDecoder",
            "params": [
                {
                    "name": "sink",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Sink<dart:core.String>"
                }
            ]
        }
    ],
    "props": []
}