{
    "desc": "<p>A snapping physics that always lands directly on items instead of anywhere\nwithin the scroll extent.<\/p>\n<p>Behaves similarly to a slot machine wheel except the ballistics simulation\nnever overshoots and rolls back within a single item if it's to settle on\nthat item.<\/p>\n<p>Must be used with a scrollable that uses a <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a>.<\/p>\n<p>Defers back to the parent beyond the scroll extents.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/FixedExtentScrollPhysics-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.FixedExtentScrollPhysics",
    "shortname": "FixedExtentScrollPhysics",
    "extends": [
        "widgets.ScrollPhysics",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a scroll physics that always lands on items.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FixedExtentScrollPhysics({ ScrollPhysics parent }) : super(parent: parent);<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollPhysics\/FixedExtentScrollPhysics.html",
            "isDeprecated": "0",
            "type": "",
            "name": "FixedExtentScrollPhysics",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollPhysics",
            "params": [
                {
                    "name": "parent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> where the <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> has been replaced with the <code>ancestor<\/code>.<\/p>\n<p>If this scroll physics object already has a parent, then this method\nis applied recursively and ancestor will appear at the end of the\nexisting chain of parents.<\/p>\n<p>The returned object will combine some of the behaviors from this\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> instance and some of the behaviors from <code>ancestor<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPhysics\/buildParent.html\">buildParent<\/a>, a utility method that's often used to define <a href=\"widgets\/FixedExtentScrollPhysics\/applyTo.html\">applyTo<\/a>\nmethods for ScrollPhysics subclasses.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFixedExtentScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return FixedExtentScrollPhysics(parent: buildParent(ancestor));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollPhysics\/applyTo.html",
            "isDeprecated": "0",
            "type": "widgets.FixedExtentScrollPhysics",
            "name": "applyTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollPhysics",
            "params": [
                {
                    "name": "ancestor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Returns a simulation for ballistic scrolling starting from the given\nposition with the given velocity.<\/p>\n<p>This is used by <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> in the\n<a href=\"widgets\/ScrollPositionWithSingleContext\/goBallistic.html\">ScrollPositionWithSingleContext.goBallistic<\/a> method. If the result\nis non-null, <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> will begin a\n<a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a> with the returned value. Otherwise, it will\nbegin an idle activity instead.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSimulation createBallisticSimulation(ScrollMetrics position, double velocity) {\n  assert(\n    position is _FixedExtentScrollPosition,\n    'FixedExtentScrollPhysics can only be used with Scrollables that uses '\n    'the FixedExtentScrollController'\n  );\n\n  final _FixedExtentScrollPosition metrics = position;\n\n  \/\/ Scenario 1:\n  \/\/ If we're out of range and not headed back in range, defer to the parent\n  \/\/ ballistics, which should put us back in range at the scrollable's boundary.\n  if ((velocity &lt;= 0.0 &amp;&amp; metrics.pixels &lt;= metrics.minScrollExtent) ||\n      (velocity &gt;= 0.0 &amp;&amp; metrics.pixels &gt;= metrics.maxScrollExtent)) {\n    return super.createBallisticSimulation(metrics, velocity);\n  }\n\n  \/\/ Create a test simulation to see where it would have ballistically fallen\n  \/\/ naturally without settling onto items.\n  final Simulation testFrictionSimulation =\n      super.createBallisticSimulation(metrics, velocity);\n\n  \/\/ Scenario 2:\n  \/\/ If it was going to end up past the scroll extent, defer back to the\n  \/\/ parent physics' ballistics again which should put us on the scrollable's\n  \/\/ boundary.\n  if (testFrictionSimulation != null\n      &amp;&amp; (testFrictionSimulation.x(double.infinity) == metrics.minScrollExtent\n          || testFrictionSimulation.x(double.infinity) == metrics.maxScrollExtent)) {\n    return super.createBallisticSimulation(metrics, velocity);\n  }\n\n  \/\/ From the natural final position, find the nearest item it should have\n  \/\/ settled to.\n  final int settlingItemIndex = _getItemFromOffset(\n    offset: testFrictionSimulation?.x(double.infinity) ?? metrics.pixels,\n    itemExtent: metrics.itemExtent,\n    minScrollExtent: metrics.minScrollExtent,\n    maxScrollExtent: metrics.maxScrollExtent,\n  );\n\n  final double settlingPixels = settlingItemIndex * metrics.itemExtent;\n\n  \/\/ Scenario 3:\n  \/\/ If there's no velocity and we're already at where we intend to land,\n  \/\/ do nothing.\n  if (velocity.abs() &lt; tolerance.velocity\n      &amp;&amp; (settlingPixels - metrics.pixels).abs() &lt; tolerance.distance) {\n    return null;\n  }\n\n  \/\/ Scenario 4:\n  \/\/ If we're going to end back at the same item because initial velocity\n  \/\/ is too low to break past it, use a spring simulation to get back.\n  if (settlingItemIndex == metrics.itemIndex) {\n    return SpringSimulation(\n      spring,\n      metrics.pixels,\n      settlingPixels,\n      velocity,\n      tolerance: tolerance,\n    );\n  }\n\n  \/\/ Scenario 5:\n  \/\/ Create a new friction simulation except the drag will be tweaked to land\n  \/\/ exactly on the item closest to the natural stopping point.\n  return FrictionSimulation.through(\n    metrics.pixels,\n    settlingPixels,\n    velocity,\n    tolerance.velocity * velocity.sign,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FixedExtentScrollPhysics\/createBallisticSimulation.html",
            "isDeprecated": "0",
            "type": "physics.Simulation",
            "name": "createBallisticSimulation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FixedExtentScrollPhysics",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                },
                {
                    "name": "velocity",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": []
}