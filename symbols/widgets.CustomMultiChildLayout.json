{
    "name": "widgets.CustomMultiChildLayout",
    "extends": [
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "CustomMultiChildLayout",
            "type": "",
            "desc": "<p>Creates a custom multi-child layout.<\/p>\n<p>The <code>delegate<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.CustomMultiChildLayout",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "delegate",
                    "type": "rendering.MultiChildLayoutDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "children",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "widgets\/CustomMultiChildLayout\/CustomMultiChildLayout.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CustomMultiChildLayout({\n  Key key,\n  @required this.delegate,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : assert(delegate != null),\n     super(key: key, children: children);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderCustomMultiChildLayoutBox",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.CustomMultiChildLayout",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/CustomMultiChildLayout\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderCustomMultiChildLayoutBox createRenderObject(BuildContext context) {\n  return RenderCustomMultiChildLayoutBox(delegate: delegate);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "updateRenderObject",
            "type": "",
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/CustomMultiChildLayout\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.CustomMultiChildLayout",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "rendering.RenderCustomMultiChildLayoutBox",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/CustomMultiChildLayout\/updateRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderCustomMultiChildLayoutBox renderObject) {\n  renderObject.delegate = delegate;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "delegate",
            "type": "rendering.MultiChildLayoutDelegate",
            "types": [],
            "desc": "<p>The delegate that controls the layout of the children.<\/p>\n        ",
            "memberOf": "widgets.CustomMultiChildLayout",
            "isConstant": false,
            "href": "widgets\/CustomMultiChildLayout\/delegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MultiChildLayoutDelegate delegate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.LayoutId"
    ],
    "realImplementors": [
        "widgets.LayoutId"
    ],
    "cn": [],
    "href": "widgets\/CustomMultiChildLayout-class.html",
    "desc": "<p>A widget that uses a delegate to size and position multiple children.<\/p>\n<p>The delegate can determine the layout constraints for each child and can\ndecide where to position each child. The delegate can also determine the\nsize of the parent, but the size of the parent cannot depend on the sizes of\nthe children.<\/p>\n<p><a href=\"widgets\/CustomMultiChildLayout-class.html\">CustomMultiChildLayout<\/a> is appropriate when there are complex relationships\nbetween the size and positioning of a multiple widgets. To control the\nlayout of a single child, <a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a> is more appropriate. For\nsimple cases, such as aligning a widget to one or another edge, the <a href=\"widgets\/Stack-class.html\">Stack<\/a>\nwidget is more appropriate.<\/p>\n<p>Each child must be wrapped in a <a href=\"widgets\/LayoutId-class.html\">LayoutId<\/a> widget to identify the widget for\nthe delegate.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/MultiChildLayoutDelegate-class.html\">MultiChildLayoutDelegate<\/a>, for details about how to control the layout of\nthe children.<\/li>\n<li>\n<a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a>, which uses a delegate to control the layout of\na single child.<\/li>\n<li>\n<a href=\"widgets\/Stack-class.html\">Stack<\/a>, which arranges children relative to the edges of the container.<\/li>\n<li>\n<a href=\"widgets\/Flow-class.html\">Flow<\/a>, which provides paint-time control of its children using transform\nmatrices.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "CustomMultiChildLayout"
}