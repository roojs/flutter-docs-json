{
    "desc": "<p>A widget that annotates the widget tree with a description of the meaning of\nthe widgets.<\/p>\n<p>Used by accessibility tools, search engines, and other semantic analysis\nsoftware to determine the meaning of the application.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/MergeSemantics-class.html\">MergeSemantics<\/a>, which marks a subtree as being a single node for\naccessibility purposes.<\/li>\n<li>\n<a href=\"widgets\/ExcludeSemantics-class.html\">ExcludeSemantics<\/a>, which excludes a subtree from the semantics tree\n(which might be useful if it is, e.g., totally decorative and not\nimportant to the user).<\/li>\n<li>\n<code>RenderObject.semanticsAnnotator<\/code>, the rendering library API through which\nthe <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> widget is actually implemented.<\/li>\n<li>\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>, the object used by the rendering library to represent\nsemantics in the semantics tree.<\/li>\n<li>\n<a href=\"widgets\/SemanticsDebugger-class.html\">SemanticsDebugger<\/a>, an overlay to help visualize the semantics tree. Can\nbe enabled using <a href=\"widgets\/WidgetsApp\/showSemanticsDebugger.html\">WidgetsApp.showSemanticsDebugger<\/a> or\n<a href=\"material\/MaterialApp\/showSemanticsDebugger.html\">MaterialApp.showSemanticsDebugger<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Semantics-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Semantics",
    "shortname": "Semantics",
    "extends": [
        "widgets.SingleChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a semantic annotation.<\/p>\n<p>The <code>container<\/code> argument must not be null. To create a <code>const<\/code> instance\nof <a href=\"widgets\/Semantics-class.html\">Semantics<\/a>, use the <a href=\"widgets\/Semantics\/Semantics.fromProperties.html\">Semantics.fromProperties<\/a> constructor.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsSortKey-class.html\">SemanticsSortKey<\/a> for a class that determines accessibility traversal\norder.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Semantics({\n  Key key,\n  Widget child,\n  bool container = false,\n  bool explicitChildNodes = false,\n  bool excludeSemantics = false,\n  bool enabled,\n  bool checked,\n  bool selected,\n  bool toggled,\n  bool button,\n  bool header,\n  bool textField,\n  bool focused,\n  bool inMutuallyExclusiveGroup,\n  bool obscured,\n  bool scopesRoute,\n  bool namesRoute,\n  bool hidden,\n  bool image,\n  bool liveRegion,\n  String label,\n  String value,\n  String increasedValue,\n  String decreasedValue,\n  String hint,\n  String onTapHint,\n  String onLongPressHint,\n  TextDirection textDirection,\n  SemanticsSortKey sortKey,\n  VoidCallback onTap,\n  VoidCallback onLongPress,\n  VoidCallback onScrollLeft,\n  VoidCallback onScrollRight,\n  VoidCallback onScrollUp,\n  VoidCallback onScrollDown,\n  VoidCallback onIncrease,\n  VoidCallback onDecrease,\n  VoidCallback onCopy,\n  VoidCallback onCut,\n  VoidCallback onPaste,\n  VoidCallback onDismiss,\n  MoveCursorHandler onMoveCursorForwardByCharacter,\n  MoveCursorHandler onMoveCursorBackwardByCharacter,\n  SetSelectionHandler onSetSelection,\n  VoidCallback onDidGainAccessibilityFocus,\n  VoidCallback onDidLoseAccessibilityFocus,\n  Map&lt;CustomSemanticsAction, VoidCallback&gt; customSemanticsActions,\n}) : this.fromProperties(\n  key: key,\n  child: child,\n  container: container,\n  explicitChildNodes: explicitChildNodes,\n  excludeSemantics: excludeSemantics,\n  properties: SemanticsProperties(\n    enabled: enabled,\n    checked: checked,\n    toggled: toggled,\n    selected: selected,\n    button: button,\n    header: header,\n    textField: textField,\n    focused: focused,\n    inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,\n    obscured: obscured,\n    scopesRoute: scopesRoute,\n    namesRoute: namesRoute,\n    hidden: hidden,\n    image: image,\n    liveRegion: liveRegion,\n    label: label,\n    value: value,\n    increasedValue: increasedValue,\n    decreasedValue: decreasedValue,\n    hint: hint,\n    textDirection: textDirection,\n    sortKey: sortKey,\n    onTap: onTap,\n    onLongPress: onLongPress,\n    onScrollLeft: onScrollLeft,\n    onScrollRight: onScrollRight,\n    onScrollUp: onScrollUp,\n    onScrollDown: onScrollDown,\n    onIncrease: onIncrease,\n    onDecrease: onDecrease,\n    onCopy: onCopy,\n    onCut: onCut,\n    onPaste: onPaste,\n    onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter,\n    onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter,\n    onDidGainAccessibilityFocus: onDidGainAccessibilityFocus,\n    onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus,\n    onDismiss: onDismiss,\n    onSetSelection: onSetSelection,\n    customSemanticsActions: customSemanticsActions,\n    hintOverrides: onTapHint != null || onLongPressHint != null ?\n      SemanticsHintOverrides(\n        onTapHint: onTapHint,\n        onLongPressHint: onLongPressHint,\n      ) : null,\n  ),\n);<\/code><\/pre>\n    ",
            "href": "widgets\/Semantics\/Semantics.html",
            "isDeprecated": false,
            "type": "",
            "name": "Semantics",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Semantics",
            "params": [
                {
                    "name": "button",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "checked",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "container",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "customSemanticsActions",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>"
                },
                {
                    "name": "decreasedValue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "enabled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "excludeSemantics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "explicitChildNodes",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focused",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "header",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hidden",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "hint",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "image",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "inMutuallyExclusiveGroup",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "increasedValue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "label",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "liveRegion",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "namesRoute",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "obscured",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onCopy",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onCut",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDecrease",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDidGainAccessibilityFocus",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDidLoseAccessibilityFocus",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDismiss",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onIncrease",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onLongPress",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onLongPressHint",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "onMoveCursorBackwardByCharacter",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onMoveCursorForwardByCharacter",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "semantics.MoveCursorHandler"
                },
                {
                    "name": "onPaste",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollDown",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollLeft",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollRight",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onScrollUp",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onSetSelection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "semantics.SetSelectionHandler"
                },
                {
                    "name": "onTap",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onTapHint",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "scopesRoute",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "selected",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "sortKey",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "semantics.SemanticsSortKey"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textField",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "toggled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderSemanticsAnnotations createRenderObject(BuildContext context) {\n  return RenderSemanticsAnnotations(\n    container: container,\n    explicitChildNodes: explicitChildNodes,\n    excludeSemantics: excludeSemantics,\n    enabled: properties.enabled,\n    checked: properties.checked,\n    toggled: properties.toggled,\n    selected: properties.selected,\n    button: properties.button,\n    header: properties.header,\n    textField: properties.textField,\n    focused: properties.focused,\n    liveRegion: properties.liveRegion,\n    inMutuallyExclusiveGroup: properties.inMutuallyExclusiveGroup,\n    obscured: properties.obscured,\n    scopesRoute: properties.scopesRoute,\n    namesRoute: properties.namesRoute,\n    hidden: properties.hidden,\n    image: properties.image,\n    label: properties.label,\n    value: properties.value,\n    increasedValue: properties.increasedValue,\n    decreasedValue: properties.decreasedValue,\n    hint: properties.hint,\n    hintOverrides: properties.hintOverrides,\n    textDirection: _getTextDirection(context),\n    sortKey: properties.sortKey,\n    onTap: properties.onTap,\n    onLongPress: properties.onLongPress,\n    onScrollLeft: properties.onScrollLeft,\n    onScrollRight: properties.onScrollRight,\n    onScrollUp: properties.onScrollUp,\n    onScrollDown: properties.onScrollDown,\n    onIncrease: properties.onIncrease,\n    onDecrease: properties.onDecrease,\n    onCopy: properties.onCopy,\n    onDismiss: properties.onDismiss,\n    onCut: properties.onCut,\n    onPaste: properties.onPaste,\n    onMoveCursorForwardByCharacter: properties.onMoveCursorForwardByCharacter,\n    onMoveCursorBackwardByCharacter: properties.onMoveCursorBackwardByCharacter,\n    onMoveCursorForwardByWord: properties.onMoveCursorForwardByWord,\n    onMoveCursorBackwardByWord: properties.onMoveCursorBackwardByWord,\n    onSetSelection: properties.onSetSelection,\n    onDidGainAccessibilityFocus: properties.onDidGainAccessibilityFocus,\n    onDidLoseAccessibilityFocus: properties.onDidLoseAccessibilityFocus,\n    customSemanticsActions: properties.customSemanticsActions,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Semantics\/createRenderObject.html",
            "isDeprecated": false,
            "type": "rendering.RenderSemanticsAnnotations",
            "name": "createRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Semantics",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Semantics\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;bool&gt;('container', container));\n  properties.add(DiagnosticsProperty&lt;SemanticsProperties&gt;('properties', this.properties));\n  this.properties.debugFillProperties(properties);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Semantics\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Semantics",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Semantics\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderSemanticsAnnotations renderObject) {\n  renderObject\n    ..container = container\n    ..explicitChildNodes = explicitChildNodes\n    ..excludeSemantics = excludeSemantics\n    ..scopesRoute = properties.scopesRoute\n    ..enabled = properties.enabled\n    ..checked = properties.checked\n    ..toggled = properties.toggled\n    ..selected = properties.selected\n    ..button = properties.button\n    ..header = properties.header\n    ..textField = properties.textField\n    ..focused = properties.focused\n    ..inMutuallyExclusiveGroup = properties.inMutuallyExclusiveGroup\n    ..obscured = properties.obscured\n    ..hidden = properties.hidden\n    ..image = properties.image\n    ..liveRegion = properties.liveRegion\n    ..label = properties.label\n    ..value = properties.value\n    ..increasedValue = properties.increasedValue\n    ..decreasedValue = properties.decreasedValue\n    ..hint = properties.hint\n    ..hintOverrides = properties.hintOverrides\n    ..namesRoute = properties.namesRoute\n    ..textDirection = _getTextDirection(context)\n    ..sortKey = properties.sortKey\n    ..onTap = properties.onTap\n    ..onLongPress = properties.onLongPress\n    ..onScrollLeft = properties.onScrollLeft\n    ..onScrollRight = properties.onScrollRight\n    ..onScrollUp = properties.onScrollUp\n    ..onScrollDown = properties.onScrollDown\n    ..onIncrease = properties.onIncrease\n    ..onDismiss = properties.onDismiss\n    ..onDecrease = properties.onDecrease\n    ..onCopy = properties.onCopy\n    ..onCut = properties.onCut\n    ..onPaste = properties.onPaste\n    ..onMoveCursorForwardByCharacter = properties.onMoveCursorForwardByCharacter\n    ..onMoveCursorBackwardByCharacter = properties.onMoveCursorForwardByCharacter\n    ..onMoveCursorForwardByWord = properties.onMoveCursorForwardByWord\n    ..onMoveCursorBackwardByWord = properties.onMoveCursorBackwardByWord\n    ..onSetSelection = properties.onSetSelection\n    ..onDidGainAccessibilityFocus = properties.onDidGainAccessibilityFocus\n    ..onDidLoseAccessibilityFocus = properties.onDidLoseAccessibilityFocus\n    ..customSemanticsActions = properties.customSemanticsActions;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Semantics\/updateRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Semantics",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderSemanticsAnnotations"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>If <a href=\"widgets\/Semantics\/container.html\">container<\/a> is true, this widget will introduce a new\nnode in the semantics tree. Otherwise, the semantics will be\nmerged with the semantics of any ancestors (if the ancestor allows that).<\/p>\n<p>Whether descendants of this widget can add their semantic information to the\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> introduced by this configuration is controlled by\n<a href=\"widgets\/Semantics\/explicitChildNodes.html\">explicitChildNodes<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool container\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Semantics\/container.html",
            "name": "container",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Semantics",
            "params": []
        },
        {
            "desc": "<p>Whether to replace all child semantics with this node.<\/p>\n<p>Defaults to false.<\/p>\n<p>When this flag is set to true, all child semantics nodes are ignored.\nThis can be used as a convenience for cases where a child is wrapped in\nan <a href=\"widgets\/ExcludeSemantics-class.html\">ExcludeSemantics<\/a> widget and then another <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool excludeSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Semantics\/excludeSemantics.html",
            "name": "excludeSemantics",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Semantics",
            "params": []
        },
        {
            "desc": "<p>Whether descendants of this widget are allowed to add semantic information\nto the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> annotated by this widget.<\/p>\n<p>When set to false descendants are allowed to annotate <code>SemanticNode<\/code>s of\ntheir parent with the semantic information they want to contribute to the\nsemantic tree.\nWhen set to true the only way for descendants to contribute semantic\ninformation to the semantic tree is to introduce new explicit\n<code>SemanticNode<\/code>s to the tree.<\/p>\n<p>If the semantics properties of this node include\n<a href=\"semantics\/SemanticsProperties\/scopesRoute.html\">SemanticsProperties.scopesRoute<\/a> set to true, then <a href=\"widgets\/Semantics\/explicitChildNodes.html\">explicitChildNodes<\/a>\nmust be true also.<\/p>\n<p>This setting is often used in combination with <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">SemanticsConfiguration.isSemanticBoundary<\/a>\nto create semantic boundaries that are either writable or not for children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool explicitChildNodes\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Semantics\/explicitChildNodes.html",
            "name": "explicitChildNodes",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Semantics",
            "params": []
        },
        {
            "desc": "<p>Contains properties used by assistive technologies to make the application\nmore accessible.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsProperties properties\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Semantics\/properties.html",
            "name": "properties",
            "isDeprecated": false,
            "type": "semantics.SemanticsProperties",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Semantics",
            "params": []
        }
    ]
}