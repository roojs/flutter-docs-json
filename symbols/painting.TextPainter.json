{
    "desc": "<p>An object that paints a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree into a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>To use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>, follow these steps:<\/p>\n<ol>\n<li>\n<p>Create a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree and pass it to the <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>\nconstructor.<\/p>\n<\/li>\n<li>\n<p>Call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> to prepare the paragraph.<\/p>\n<\/li>\n<li>\n<p>Call <a href=\"painting\/TextPainter\/paint.html\">paint<\/a> as often as desired to paint the paragraph.<\/p>\n<\/li>\n<\/ol>\n<p>If the width of the area into which the text is being painted\nchanges, return to step 2. If the text to be painted changes,\nreturn to step 1.<\/p>\n<p>The default text style is white. To change the color of the text,\npass a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> object to the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> in <code>text<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "painting\/TextPainter-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "painting",
    "name": "painting.TextPainter",
    "shortname": "TextPainter",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a text painter that paints the given text.<\/p>\n<p>The <code>text<\/code> and <code>textDirection<\/code> arguments are optional but <code>text<\/code> and\n<code>textDirection<\/code> must be non-null before calling <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n<p>The <code>textAlign<\/code> property must not be null.<\/p>\n<p>The <code>maxLines<\/code> property, if non-null, must be greater than zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPainter({\n  TextSpan text,\n  TextAlign textAlign = TextAlign.start,\n  TextDirection textDirection,\n  double textScaleFactor = 1.0,\n  int maxLines,\n  String ellipsis,\n  Locale locale,\n  StrutStyle strutStyle,\n}) : assert(text == null || text.debugAssertIsValid()),\n     assert(textAlign != null),\n     assert(textScaleFactor != null),\n     assert(maxLines == null || maxLines &gt; 0),\n     _text = text,\n     _textAlign = textAlign,\n     _textDirection = textDirection,\n     _textScaleFactor = textScaleFactor,\n     _maxLines = maxLines,\n     _ellipsis = ellipsis,\n     _locale = locale,\n     _strutStyle = strutStyle;<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/TextPainter.html",
            "isDeprecated": false,
            "type": "",
            "name": "TextPainter",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "ellipsis",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "locale",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                },
                {
                    "name": "maxLines",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "strutStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.StrutStyle"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextSpan"
                },
                {
                    "name": "textAlign",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textScaleFactor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the top of the text to the first baseline of the\ngiven type.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double computeDistanceToActualBaseline(TextBaseline baseline) {\n  assert(!_needsLayout);\n  assert(baseline != null);\n  switch (baseline) {\n    case TextBaseline.alphabetic:\n      return _paragraph.alphabeticBaseline;\n    case TextBaseline.ideographic:\n      return _paragraph.ideographicBaseline;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/computeDistanceToActualBaseline.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeDistanceToActualBaseline",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "baseline",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextBaseline"
                }
            ]
        },
        {
            "desc": "<p>Returns a list of rects that bound the given selection.<\/p>\n<p>A given selection might have more than one rect if this text painter\ncontains bidirectional text because logically contiguous text might not be\nvisually contiguous.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;TextBox&gt; getBoxesForSelection(TextSelection selection) {\n  assert(!_needsLayout);\n  return _paragraph.getBoxesForRange(selection.start, selection.end);\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/getBoxesForSelection.html",
            "isDeprecated": false,
            "type": "dart:core.List<dart:ui.TextBox>",
            "name": "getBoxesForSelection",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "selection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.TextSelection"
                }
            ]
        },
        {
            "desc": "<p>Returns the closest offset after <code>offset<\/code> at which the input cursor can be\npositioned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getOffsetAfter(int offset) {\n  final int nextCodeUnit = _text.codeUnitAt(offset);\n  if (nextCodeUnit == null)\n    return null;\n  \/\/ TODO(goderbauer): doesn't handle extended grapheme clusters with more than one Unicode scalar value (https:\/\/github.com\/flutter\/flutter\/issues\/13404).\n  return _isUtf16Surrogate(nextCodeUnit) ? offset + 2 : offset + 1;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/getOffsetAfter.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "getOffsetAfter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the closest offset before <code>offset<\/code> at which the input cursor can\nbe positioned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getOffsetBefore(int offset) {\n  final int prevCodeUnit = _text.codeUnitAt(offset - 1);\n  if (prevCodeUnit == null)\n    return null;\n  \/\/ TODO(goderbauer): doesn't handle extended grapheme clusters with more than one Unicode scalar value (https:\/\/github.com\/flutter\/flutter\/issues\/13404).\n  return _isUtf16Surrogate(prevCodeUnit) ? offset - 2 : offset - 1;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/getOffsetBefore.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "getOffsetBefore",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the offset at which to paint the caret.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getOffsetForCaret(TextPosition position, Rect caretPrototype) {\n  assert(!_needsLayout);\n  final int offset = position.offset;\n  assert(position.affinity != null);\n  switch (position.affinity) {\n    case TextAffinity.upstream:\n      return _getOffsetFromUpstream(offset, caretPrototype)\n          ?? _getOffsetFromDownstream(offset, caretPrototype)\n          ?? _emptyOffset;\n    case TextAffinity.downstream:\n      return _getOffsetFromDownstream(offset, caretPrototype)\n          ?? _getOffsetFromUpstream(offset, caretPrototype)\n          ?? _emptyOffset;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/getOffsetForCaret.html",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "name": "getOffsetForCaret",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "caretPrototype",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                }
            ]
        },
        {
            "desc": "<p>Returns the position within the text for the given pixel offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition getPositionForOffset(Offset offset) {\n  assert(!_needsLayout);\n  return _paragraph.getPositionForOffset(offset);\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/getPositionForOffset.html",
            "isDeprecated": false,
            "type": "dart:ui.TextPosition",
            "name": "getPositionForOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the text range of the word at the given offset. Characters not\npart of a word, such as spaces, symbols, and punctuation, have word breaks\non both sides. In such cases, this method will return a text range that\ncontains the given text position.<\/p>\n<p>Word boundaries are defined more precisely in Unicode Standard Annex #29\n<a href=\"http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries\">www.unicode.org\/reports\/tr29\/#Word_Boundaries<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextRange getWordBoundary(TextPosition position) {\n  assert(!_needsLayout);\n  final List&lt;int&gt; indices = _paragraph.getWordBoundary(position.offset);\n  return TextRange(start: indices[0], end: indices[1]);\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/getWordBoundary.html",
            "isDeprecated": false,
            "type": "services.TextRange",
            "name": "getWordBoundary",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                }
            ]
        },
        {
            "desc": "<p>Computes the visual position of the glyphs for painting the text.<\/p>\n<p>The text will layout with a width that's as close to its max intrinsic\nwidth as possible while still being greater than or equal to <code>minWidth<\/code> and\nless than or equal to <code>maxWidth<\/code>.<\/p>\n<p>The <a href=\"painting\/TextPainter\/text.html\">text<\/a> and <a href=\"painting\/TextPainter\/textDirection.html\">textDirection<\/a> properties must be non-null before this is\ncalled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void layout({ double minWidth = 0.0, double maxWidth = double.infinity }) {\n  assert(text != null, 'TextPainter.text must be set to a non-null value before using the TextPainter.');\n  assert(textDirection != null, 'TextPainter.textDirection must be set to a non-null value before using the TextPainter.');\n  if (!_needsLayout &amp;&amp; minWidth == _lastMinWidth &amp;&amp; maxWidth == _lastMaxWidth)\n    return;\n  _needsLayout = false;\n  if (_paragraph == null) {\n    final ui.ParagraphBuilder builder = ui.ParagraphBuilder(_createParagraphStyle());\n    _text.build(builder, textScaleFactor: textScaleFactor);\n    _paragraph = builder.build();\n  }\n  _lastMinWidth = minWidth;\n  _lastMaxWidth = maxWidth;\n  _paragraph.layout(ui.ParagraphConstraints(width: maxWidth));\n  if (minWidth != maxWidth) {\n    final double newWidth = maxIntrinsicWidth.clamp(minWidth, maxWidth);\n    if (newWidth != width)\n      _paragraph.layout(ui.ParagraphConstraints(width: newWidth));\n  }\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/layout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "layout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "maxWidth",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "minWidth",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Paints the text onto the given canvas at the given offset.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n<p>If you cannot see the text being painted, check that your text color does\nnot conflict with the background on which you are drawing. The default\ntext color is white (to contrast with the default black background color),\nso if you are writing an application with a white background, the text\nwill not be visible by default.<\/p>\n<p>To set the text style, specify a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> when creating the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>\nthat you pass to the <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> constructor or to the <a href=\"painting\/TextPainter\/text.html\">text<\/a> property.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Offset offset) {\n  assert(() {\n    if (_needsLayout) {\n      throw FlutterError(\n        'TextPainter.paint called when text geometry was not yet calculated.\\n'\n        'Please call layout() before paint() to position the text before painting it.'\n      );\n    }\n    return true;\n  }());\n  canvas.drawParagraph(_paragraph, offset);\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextPainter\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextPainter",
            "params": [
                {
                    "name": "canvas",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether any text was truncated or ellipsized.<\/p>\n<p>If <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is not null, this is true if there were more lines to be\ndrawn than the given <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a>, and thus at least one line was omitted in\nthe output; otherwise it is false.<\/p>\n<p>If <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is null, this is true if <a href=\"painting\/TextPainter\/ellipsis.html\">ellipsis<\/a> is not the empty string\nand there was a line that overflowed the <code>maxWidth<\/code> argument passed to\n<a href=\"painting\/TextPainter\/layout.html\">layout<\/a>; otherwise it is false.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get didExceedMaxLines {\n  assert(!_needsLayout);\n  return _paragraph.didExceedMaxLines;\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/didExceedMaxLines.html",
            "name": "didExceedMaxLines",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The string used to ellipsize overflowing text. Setting this to a non-empty\nstring will cause this string to be substituted for the remaining text\nif the text can not fit within the specified maximum width.<\/p>\n<p>Specifically, the ellipsis is applied to the last line before the line\ntruncated by <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a>, if <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is non-null and that line overflows\nthe width constraint, or to the first line that is wider than the width\nconstraint, if <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is null. The width constraint is the <code>maxWidth<\/code>\npassed to <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>The higher layers of the system, such as the <a href=\"widgets\/Text-class.html\">Text<\/a> widget, represent\noverflow effects using the <a href=\"rendering\/TextOverflow-class.html\">TextOverflow<\/a> enum. The\n<a href=\"painting\/TextPainter\/ellipsis.html\">TextOverflow.ellipsis<\/a> value corresponds to setting this property to\nU+2026 HORIZONTAL ELLIPSIS (\u2026).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get ellipsis =&gt; _ellipsis;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/ellipsis.html",
            "name": "ellipsis",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The vertical space required to paint this text.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.height);\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/height.html",
            "name": "height",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The locale used to select region-specific glyphs.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Locale get locale =&gt; _locale;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/locale.html",
            "name": "locale",
            "isDeprecated": false,
            "type": "dart:ui.Locale",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The width at which increasing the width of the text no longer decreases the height.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get maxIntrinsicWidth {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.maxIntrinsicWidth);\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/maxIntrinsicWidth.html",
            "name": "maxIntrinsicWidth",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>An optional maximum number of lines for the text to span, wrapping if\nnecessary.<\/p>\n<p>If the text exceeds the given number of lines, it is truncated such that\nsubsequent lines are dropped.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get maxLines =&gt; _maxLines;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/maxLines.html",
            "name": "maxLines",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The width at which decreasing the width of the text would prevent it from\npainting itself completely within its bounds.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minIntrinsicWidth {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.minIntrinsicWidth);\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/minIntrinsicWidth.html",
            "name": "minIntrinsicWidth",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The height of a space in <a href=\"painting\/TextPainter\/text.html\">text<\/a> in logical pixels.<\/p>\n<p>Not every line of text in <a href=\"painting\/TextPainter\/text.html\">text<\/a> will have this height, but this height\nis \"typical\" for text in <a href=\"painting\/TextPainter\/text.html\">text<\/a> and useful for sizing other objects\nrelative a typical line of text.<\/p>\n<p>Obtaining this value does not require calling <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n<p>The style of the <a href=\"painting\/TextPainter\/text.html\">text<\/a> property is used to determine the font settings\nthat contribute to the <a href=\"painting\/TextPainter\/preferredLineHeight.html\">preferredLineHeight<\/a>. If <a href=\"painting\/TextPainter\/text.html\">text<\/a> is null or if it\nspecifies no styles, the default <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> values are used (a 10 pixel\nsans-serif font).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get preferredLineHeight {\n  if (_layoutTemplate == null) {\n    final ui.ParagraphBuilder builder = ui.ParagraphBuilder(\n      _createParagraphStyle(TextDirection.rtl),\n    ); \/\/ direction doesn't matter, text is just a space\n    if (text?.style != null)\n      builder.pushStyle(text.style.getTextStyle(textScaleFactor: textScaleFactor));\n    builder.addText(' ');\n    _layoutTemplate = builder.build()\n      ..layout(const ui.ParagraphConstraints(width: double.infinity));\n  }\n  return _layoutTemplate.height;\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/preferredLineHeight.html",
            "name": "preferredLineHeight",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The amount of space required to paint this text.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get size {\n  assert(!_needsLayout);\n  return Size(width, height);\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/size.html",
            "name": "size",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The strut style to use. Strut style defines the strut, which sets minimum\nvertical layout metrics.<\/p>\n<p>Omitting or providing null will disable strut.<\/p>\n<p>Omitting or providing null for any properties of <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> will result in\ndefault values being used. It is highly recommended to at least specify a\n<code>fontSize<\/code>.<\/p>\n<p>See <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle get strutStyle =&gt; _strutStyle;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/strutStyle.html",
            "name": "strutStyle",
            "isDeprecated": false,
            "type": "painting.StrutStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The (potentially styled) text to paint.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>This and <a href=\"painting\/TextPainter\/textDirection.html\">textDirection<\/a> must be non-null before you call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSpan get text =&gt; _text;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/text.html",
            "name": "text",
            "isDeprecated": false,
            "type": "painting.TextSpan",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>How the text should be aligned horizontally.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>The <a href=\"painting\/TextPainter\/textAlign.html\">textAlign<\/a> property must not be null. It defaults to <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextAlign get textAlign =&gt; _textAlign;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/textAlign.html",
            "name": "textAlign",
            "isDeprecated": false,
            "type": "dart:ui.TextAlign",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The default directionality of the text.<\/p>\n<p>This controls how the <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>, <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a>, and\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.justify<\/a> values of <a href=\"painting\/TextPainter\/textAlign.html\">textAlign<\/a> are resolved.<\/p>\n<p>This is also used to disambiguate how to render bidirectional text. For\nexample, if the <a href=\"painting\/TextPainter\/text.html\">text<\/a> is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>This and <a href=\"painting\/TextPainter\/text.html\">text<\/a> must be non-null before you call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get textScaleFactor =&gt; _textScaleFactor;<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/textScaleFactor.html",
            "name": "textScaleFactor",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        },
        {
            "desc": "<p>The horizontal space required to paint this text.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.width);\n}<\/code><\/pre>\n        ",
            "href": "painting\/TextPainter\/width.html",
            "name": "width",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextPainter",
            "params": []
        }
    ]
}