{
    "name": "source_span.SourceFile",
    "extends": [],
    "memberOf": "source_span",
    "events": [],
    "methods": [
        {
            "name": "SourceFile",
            "type": "",
            "desc": "<p>This constructor is deprecated.<\/p>\n<p>Use <a href=\"package-source_span_source_span\/SourceFile\/SourceFile.fromString.html\">new SourceFile.fromString<\/a> instead.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "url",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "package-source_span_source_span\/SourceFile\/SourceFile.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Will be removed in 2.0.0\")\nSourceFile(String text, {url}) : this.decoded(text.runes, url: url);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "SourceFile.decoded",
            "type": "",
            "desc": "<p>Creates a new source file from a list of decoded code units.<\/p>\n<p><code>url<\/code> may be either a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n<p>Currently, if <code>decodedChars<\/code> contains characters larger than <code>0xFFFF<\/code>,\nthey'll be treated as single characters rather than being split into\nsurrogate pairs. <strong>This behavior is deprecated<\/strong>. For\nforwards-compatibility, callers should only pass in characters less than\nor equal to <code>0xFFFF<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "decodedChars",
                    "type": "dart:core.Iterable<dart:core.int>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "url",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "package-source_span_source_span\/SourceFile\/SourceFile.decoded.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceFile.decoded(Iterable&lt;int&gt; decodedChars, {url})\n    : url = url is String ? Uri.parse(url) : url,\n      _decodedChars = new Uint32List.fromList(decodedChars.toList()) {\n  for (var i = 0; i &lt; _decodedChars.length; i++) {\n    var c = _decodedChars[i];\n    if (c == _CR) {\n      \/\/ Return not followed by newline is treated as a newline\n      var j = i + 1;\n      if (j &gt;= _decodedChars.length || _decodedChars[j] != _LF) c = _LF;\n    }\n    if (c == _LF) _lineStarts.add(i + 1);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "SourceFile.fromString",
            "type": "",
            "desc": "<p>Creates a new source file from <code>text<\/code>.<\/p>\n<p><code>url<\/code> may be either a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "url",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "package-source_span_source_span\/SourceFile\/SourceFile.fromString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceFile.fromString(String text, {url})\n    : this.decoded(text.codeUnits, url: url);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getColumn",
            "type": "dart:core.int",
            "desc": "<p>Gets the 0-based column corresponding to <code>offset<\/code>.<\/p>\n<p>If <code>line<\/code> is passed, it's assumed to be the line containing <code>offset<\/code> and\nis used to more efficiently compute the column.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "line",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceFile\/getColumn.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getColumn(int offset, {int line}) {\n  if (offset &lt; 0) {\n    throw new RangeError(\"Offset may not be negative, was $offset.\");\n  } else if (offset &gt; length) {\n    throw new RangeError(\"Offset $offset must be not be greater than the \"\n        \"number of characters in the file, $length.\");\n  }\n\n  if (line == null) {\n    line = getLine(offset);\n  } else if (line &lt; 0) {\n    throw new RangeError(\"Line may not be negative, was $line.\");\n  } else if (line &gt;= lines) {\n    throw new RangeError(\"Line $line must be less than the number of \"\n        \"lines in the file, $lines.\");\n  }\n\n  var lineStart = _lineStarts[line];\n  if (lineStart &gt; offset) {\n    throw new RangeError(\"Line $line comes after offset $offset.\");\n  }\n\n  return offset - lineStart;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getLine",
            "type": "dart:core.int",
            "desc": "<p>Gets the 0-based line corresponding to <code>offset<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceFile\/getLine.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getLine(int offset) {\n  if (offset &lt; 0) {\n    throw new RangeError(\"Offset may not be negative, was $offset.\");\n  } else if (offset &gt; length) {\n    throw new RangeError(\"Offset $offset must not be greater than the number \"\n        \"of characters in the file, $length.\");\n  }\n\n  if (offset &lt; _lineStarts.first) return -1;\n  if (offset &gt;= _lineStarts.last) return _lineStarts.length - 1;\n\n  if (_isNearCachedLine(offset)) return _cachedLine;\n\n  _cachedLine = _binarySearch(offset) - 1;\n  return _cachedLine;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getOffset",
            "type": "dart:core.int",
            "desc": "<p>Gets the offset for a <code>line<\/code> and <code>column<\/code>.<\/p>\n<p><code>column<\/code> defaults to 0.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "line",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "column",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceFile\/getOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getOffset(int line, [int column]) {\n  if (column == null) column = 0;\n\n  if (line &lt; 0) {\n    throw new RangeError(\"Line may not be negative, was $line.\");\n  } else if (line &gt;= lines) {\n    throw new RangeError(\"Line $line must be less than the number of \"\n        \"lines in the file, $lines.\");\n  } else if (column &lt; 0) {\n    throw new RangeError(\"Column may not be negative, was $column.\");\n  }\n\n  var result = _lineStarts[line] + column;\n  if (result &gt; length ||\n      (line + 1 &lt; lines &amp;&amp; result &gt;= _lineStarts[line + 1])) {\n    throw new RangeError(\"Line $line doesn't have $column columns.\");\n  }\n\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getText",
            "type": "dart:core.String",
            "desc": "<p>Returns the text of the file from <code>start<\/code> to <code>end<\/code> (exclusive).<\/p>\n<p>If <code>end<\/code> isn't passed, it defaults to the end of the file.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceFile\/getText.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getText(int start, [int end]) =&gt;\n    new String.fromCharCodes(_decodedChars.sublist(start, end));<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "location",
            "type": "source_span.FileLocation",
            "desc": "<p>Returns a location in <a href=\"package-source_span_source_span\/SourceFile-class.html\">this<\/a> at <code>offset<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceFile\/location.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation location(int offset) =&gt; new FileLocation._(this, offset);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "span",
            "type": "source_span.FileSpan",
            "desc": "<p>Returns a span in <a href=\"package-source_span_source_span\/SourceFile-class.html\">this<\/a> from <code>start<\/code> to <code>end<\/code> (exclusive).<\/p>\n<p>If <code>end<\/code> isn't passed, it defaults to the end of the file.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceFile",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceFile\/span.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan span(int start, [int end]) {\n  if (end == null) end = length;\n  return new _FileSpan(this, start, end);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The length of the file in characters.<\/p>\n        ",
            "memberOf": "source_span.SourceFile",
            "isConstant": false,
            "href": "package-source_span_source_span\/SourceFile\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _decodedChars.length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "lines",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The number of lines in the file.<\/p>\n        ",
            "memberOf": "source_span.SourceFile",
            "isConstant": false,
            "href": "package-source_span_source_span\/SourceFile\/lines.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lines =&gt; _lineStarts.length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "url",
            "type": "dart:core.Uri",
            "types": [],
            "desc": "<p>The URL where the source file is located.<\/p>\n<p>This may be null, indicating that the URL is unknown or unavailable.<\/p>\n        ",
            "memberOf": "source_span.SourceFile",
            "isConstant": false,
            "href": "package-source_span_source_span\/SourceFile\/url.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri url\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-source_span_source_span\/SourceFile-class.html",
    "desc": "<p>A class representing a source file.<\/p>\n<p>This doesn't necessarily have to correspond to a file on disk, just a chunk\nof text usually with a URL associated with it.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SourceFile"
}