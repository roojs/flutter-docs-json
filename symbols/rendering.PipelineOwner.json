{
    "desc": "<p>The pipeline owner manages the rendering pipeline.<\/p>\n<p>The pipeline owner provides an interface for driving the rendering pipeline\nand stores the state about which render objects have requested to be visited\nin each stage of the pipeline. To flush the pipeline, call the following\nfunctions in order:<\/p>\n<ol>\n<li>\n<a href=\"rendering\/PipelineOwner\/flushLayout.html\">flushLayout<\/a> updates any render objects that need to compute their\nlayout. During this phase, the size and position of each render\nobject is calculated. Render objects might dirty their painting or\ncompositing state during this phase.<\/li>\n<li>\n<a href=\"rendering\/PipelineOwner\/flushCompositingBits.html\">flushCompositingBits<\/a> updates any render objects that have dirty\ncompositing bits. During this phase, each render object learns whether\nany of its children require compositing. This information is used during\nthe painting phase when selecting how to implement visual effects such as\nclipping. If a render object has a composited child, its needs to use a\n<a href=\"rendering\/Layer-class.html\">Layer<\/a> to create the clip in order for the clip to apply to the\ncomposited child (which will be painted into its own <a href=\"rendering\/Layer-class.html\">Layer<\/a>).<\/li>\n<li>\n<a href=\"rendering\/PipelineOwner\/flushPaint.html\">flushPaint<\/a> visits any render objects that need to paint. During this\nphase, render objects get a chance to record painting commands into\n<a href=\"rendering\/PictureLayer-class.html\">PictureLayer<\/a>s and construct other composited <a href=\"rendering\/Layer-class.html\">Layer<\/a>s.<\/li>\n<li>Finally, if semantics are enabled, <a href=\"rendering\/PipelineOwner\/flushSemantics.html\">flushSemantics<\/a> will compile the\nsemantics for the render objects. This semantic information is used by\nassistive technology to improve the accessibility of the render tree.<\/li>\n<\/ol>\n<p>The <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> holds the pipeline owner for the render objects that\nare visible on screen. You can create other pipeline owners to manage\noff-screen objects, which can flush their pipelines independently of the\non-screen render objects.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/PipelineOwner-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.PipelineOwner",
    "shortname": "PipelineOwner",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when a render object associated with this pipeline owner wishes to\nupdate its visual appearance.<\/p>\n<p>Typical implementations of this function will schedule a task to flush the\nvarious stages of the pipeline. This function might be called multiple\ntimes in quick succession. Implementations should take care to discard\nduplicate calls quickly.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onNeedVisualUpdate\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/onNeedVisualUpdate.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onNeedVisualUpdate",
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Called whenever this pipeline owner creates a semantics object.<\/p>\n<p>Typical implementations will schedule the creation of the initial\nsemantics tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onSemanticsOwnerCreated\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/onSemanticsOwnerCreated.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onSemanticsOwnerCreated",
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Called whenever this pipeline owner disposes its semantics owner.<\/p>\n<p>Typical implementations will tear down the semantics tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onSemanticsOwnerDisposed\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/onSemanticsOwnerDisposed.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onSemanticsOwnerDisposed",
            "memberOf": "rendering.PipelineOwner",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a pipeline owner.<\/p>\n<p>Typically created by the binding (e.g., <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a>), but can be\ncreated separately from the binding to drive off-screen render objects\nthrough the rendering pipeline.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PipelineOwner({\n  this.onNeedVisualUpdate,\n  this.onSemanticsOwnerCreated,\n  this.onSemanticsOwnerDisposed,\n});<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/PipelineOwner.html",
            "isDeprecated": false,
            "type": "",
            "name": "PipelineOwner",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": [
                {
                    "name": "onNeedVisualUpdate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onSemanticsOwnerCreated",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onSemanticsOwnerDisposed",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Opens a <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a> and calls <code>listener<\/code> whenever the semantics tree\nupdates.<\/p>\n<p>The <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> updates the semantics tree only when there are clients\nthat wish to use the semantics tree. These clients express their interest\nby holding <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a> objects that notify them whenever the\nsemantics tree updates.<\/p>\n<p>Clients can close their <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a> by calling\n<a href=\"rendering\/SemanticsHandle\/dispose.html\">SemanticsHandle.dispose<\/a>. Once all the outstanding <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>\nobjects for a given <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> are closed, the <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> stops\nmaintaining the semantics tree.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsHandle ensureSemantics({ VoidCallback listener }) {\n  _outstandingSemanticsHandles += 1;\n  if (_outstandingSemanticsHandles == 1) {\n    assert(_semanticsOwner == null);\n    _semanticsOwner = SemanticsOwner();\n    if (onSemanticsOwnerCreated != null)\n      onSemanticsOwnerCreated();\n  }\n  return SemanticsHandle._(this, listener);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/ensureSemantics.html",
            "isDeprecated": false,
            "type": "rendering.SemanticsHandle",
            "name": "ensureSemantics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": [
                {
                    "name": "listener",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Updates the <a href=\"rendering\/RenderObject\/needsCompositing.html\">RenderObject.needsCompositing<\/a> bits.<\/p>\n<p>Called as part of the rendering pipeline after <a href=\"rendering\/PipelineOwner\/flushLayout.html\">flushLayout<\/a> and before\n<a href=\"rendering\/PipelineOwner\/flushPaint.html\">flushPaint<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void flushCompositingBits() {\n  if (!kReleaseMode) {\n    Timeline.startSync('Compositing bits');\n  }\n  _nodesNeedingCompositingBitsUpdate.sort((RenderObject a, RenderObject b) =&gt; a.depth - b.depth);\n  for (RenderObject node in _nodesNeedingCompositingBitsUpdate) {\n    if (node._needsCompositingBitsUpdate &amp;&amp; node.owner == this)\n      node._updateCompositingBits();\n  }\n  _nodesNeedingCompositingBitsUpdate.clear();\n  if (!kReleaseMode) {\n    Timeline.finishSync();\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/flushCompositingBits.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "flushCompositingBits",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Update the layout information for all dirty render objects.<\/p>\n<p>This function is one of the core stages of the rendering pipeline. Layout\ninformation is cleaned prior to painting so that render objects will\nappear on screen in their up-to-date locations.<\/p>\n<p>See <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> for an example of how this function is used.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void flushLayout() {\n  if (!kReleaseMode) {\n    Timeline.startSync('Layout', arguments: timelineWhitelistArguments);\n  }\n  assert(() {\n    _debugDoingLayout = true;\n    return true;\n  }());\n  try {\n    \/\/ TODO(ianh): assert that we're not allowing previously dirty nodes to redirty themselves\n    while (_nodesNeedingLayout.isNotEmpty) {\n      final List&lt;RenderObject&gt; dirtyNodes = _nodesNeedingLayout;\n      _nodesNeedingLayout = &lt;RenderObject&gt;[];\n      for (RenderObject node in dirtyNodes..sort((RenderObject a, RenderObject b) =&gt; a.depth - b.depth)) {\n        if (node._needsLayout &amp;&amp; node.owner == this)\n          node._layoutWithoutResize();\n      }\n    }\n  } finally {\n    assert(() {\n      _debugDoingLayout = false;\n      return true;\n    }());\n    if (!kReleaseMode) {\n      Timeline.finishSync();\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/flushLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "flushLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Update the display lists for all render objects.<\/p>\n<p>This function is one of the core stages of the rendering pipeline.\nPainting occurs after layout and before the scene is recomposited so that\nscene is composited with up-to-date display lists for every render object.<\/p>\n<p>See <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> for an example of how this function is used.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void flushPaint() {\n  if (!kReleaseMode) {\n    Timeline.startSync('Paint', arguments: timelineWhitelistArguments);\n  }\n  assert(() {\n    _debugDoingPaint = true;\n    return true;\n  }());\n  try {\n    final List&lt;RenderObject&gt; dirtyNodes = _nodesNeedingPaint;\n    _nodesNeedingPaint = &lt;RenderObject&gt;[];\n    \/\/ Sort the dirty nodes in reverse order (deepest first).\n    for (RenderObject node in dirtyNodes..sort((RenderObject a, RenderObject b) =&gt; b.depth - a.depth)) {\n      assert(node._layer != null);\n      if (node._needsPaint &amp;&amp; node.owner == this) {\n        if (node._layer.attached) {\n          PaintingContext.repaintCompositedChild(node);\n        } else {\n          node._skippedPaintingOnLayer();\n        }\n      }\n    }\n    assert(_nodesNeedingPaint.isEmpty);\n  } finally {\n    assert(() {\n      _debugDoingPaint = false;\n      return true;\n    }());\n    if (!kReleaseMode) {\n      Timeline.finishSync();\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/flushPaint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "flushPaint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Update the semantics for render objects marked as needing a semantics\nupdate.<\/p>\n<p>Initially, only the root node, as scheduled by\n<a href=\"rendering\/RenderObject\/scheduleInitialSemantics.html\">RenderObject.scheduleInitialSemantics<\/a>, needs a semantics update.<\/p>\n<p>This function is one of the core stages of the rendering pipeline. The\nsemantics are compiled after painting and only after\n<a href=\"rendering\/RenderObject\/scheduleInitialSemantics.html\">RenderObject.scheduleInitialSemantics<\/a> has been called.<\/p>\n<p>See <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> for an example of how this function is used.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void flushSemantics() {\n  if (_semanticsOwner == null)\n    return;\n  if (!kReleaseMode) {\n    Timeline.startSync('Semantics');\n  }\n  assert(_semanticsOwner != null);\n  assert(() { _debugDoingSemantics = true; return true; }());\n  try {\n    final List&lt;RenderObject&gt; nodesToProcess = _nodesNeedingSemantics.toList()\n      ..sort((RenderObject a, RenderObject b) =&gt; a.depth - b.depth);\n    _nodesNeedingSemantics.clear();\n    for (RenderObject node in nodesToProcess) {\n      if (node._needsSemanticsUpdate &amp;&amp; node.owner == this)\n        node._updateSemantics();\n    }\n    _semanticsOwner.sendSemanticsUpdate();\n  } finally {\n    assert(_nodesNeedingSemantics.isEmpty);\n    assert(() { _debugDoingSemantics = false; return true; }());\n    if (!kReleaseMode) {\n      Timeline.finishSync();\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/flushSemantics.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "flushSemantics",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Calls <a href=\"rendering\/PipelineOwner\/onNeedVisualUpdate.html\">onNeedVisualUpdate<\/a> if <a href=\"rendering\/PipelineOwner\/onNeedVisualUpdate.html\">onNeedVisualUpdate<\/a> is not null.<\/p>\n<p>Used to notify the pipeline owner that an associated render object wishes\nto update its visual appearance.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void requestVisualUpdate() {\n  if (onNeedVisualUpdate != null)\n    onNeedVisualUpdate();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PipelineOwner\/requestVisualUpdate.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "requestVisualUpdate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this pipeline is currently in the layout phase.<\/p>\n<p>Specifically, whether <a href=\"rendering\/PipelineOwner\/flushLayout.html\">flushLayout<\/a> is currently running.<\/p>\n<p>Only valid when asserts are enabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get debugDoingLayout =&gt; _debugDoingLayout;<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/debugDoingLayout.html",
            "name": "debugDoingLayout",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>Whether this pipeline is currently in the paint phase.<\/p>\n<p>Specifically, whether <a href=\"rendering\/PipelineOwner\/flushPaint.html\">flushPaint<\/a> is currently running.<\/p>\n<p>Only valid when asserts are enabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get debugDoingPaint =&gt; _debugDoingPaint;<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/debugDoingPaint.html",
            "name": "debugDoingPaint",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>The number of clients registered to listen for semantics.<\/p>\n<p>The number is increased whenever <a href=\"rendering\/PipelineOwner\/ensureSemantics.html\">ensureSemantics<\/a> is called and decreased\nwhen <a href=\"rendering\/SemanticsHandle\/dispose.html\">SemanticsHandle.dispose<\/a> is called.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get debugOutstandingSemanticsHandles =&gt; _outstandingSemanticsHandles;<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/debugOutstandingSemanticsHandles.html",
            "name": "debugOutstandingSemanticsHandles",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>The unique object managed by this pipeline that has no parent.<\/p>\n<p>This object does not have to be a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AbstractNode get rootNode =&gt; _rootNode;<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/rootNode.html",
            "name": "rootNode",
            "isDeprecated": false,
            "type": "foundation.AbstractNode",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        },
        {
            "desc": "<p>The object that is managing semantics for this pipeline owner, if any.<\/p>\n<p>An owner is created by <a href=\"rendering\/PipelineOwner\/ensureSemantics.html\">ensureSemantics<\/a>. The owner is valid for as long\nthere are <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>s returned by <a href=\"rendering\/PipelineOwner\/ensureSemantics.html\">ensureSemantics<\/a> that have not\nyet been disposed. Once the last handle has been disposed, the\n<a href=\"rendering\/PipelineOwner\/semanticsOwner.html\">semanticsOwner<\/a> field will revert to null, and the previous owner will be\ndisposed.<\/p>\n<p>When <a href=\"rendering\/PipelineOwner\/semanticsOwner.html\">semanticsOwner<\/a> is null, the <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> skips all steps\nrelating to semantics.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsOwner get semanticsOwner =&gt; _semanticsOwner;<\/code><\/pre>\n        ",
            "href": "rendering\/PipelineOwner\/semanticsOwner.html",
            "name": "semanticsOwner",
            "isDeprecated": false,
            "type": "semantics.SemanticsOwner",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.PipelineOwner",
            "params": []
        }
    ]
}