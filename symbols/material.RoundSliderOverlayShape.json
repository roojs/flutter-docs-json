{
    "desc": "<p>This is the default shape of a <a href=\"material\/Slider-class.html\">Slider<\/a>'s thumb overlay.<\/p>\n<p>The shape of the overlay is a circle with the same center as the thumb, but\nwith a larger radius. It animates to full size when the thumb is pressed,\nand animates back down to size 0 when it is released. It is painted behind\nthe thumb, and is expected to extend beyond the bounds of the thumb so that\nit is visible.<\/p>\n<p>The overlay color is defined by <a href=\"material\/SliderThemeData\/overlayColor.html\">SliderThemeData.overlayColor<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Slider-class.html\">Slider<\/a>, which includes an overlay defined by this shape.<\/li>\n<li>\n<a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a>, which can be used to configure the overlay shape of all\nsliders in a widget subtree.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/RoundSliderOverlayShape-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.RoundSliderOverlayShape",
    "shortname": "RoundSliderOverlayShape",
    "extends": [
        "material.SliderComponentShape",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a slider thumb overlay that draws a circle.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(clocksmith): This needs to be changed to 24 according to spec.\nconst RoundSliderOverlayShape({ this.overlayRadius = 16.0 });<\/code><\/pre>\n    ",
            "href": "material\/RoundSliderOverlayShape\/RoundSliderOverlayShape.html",
            "isDeprecated": false,
            "type": "",
            "name": "RoundSliderOverlayShape",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.RoundSliderOverlayShape",
            "params": [
                {
                    "name": "overlayRadius",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the preferred size of the shape, based on the given conditions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize getPreferredSize(bool isEnabled, bool isDiscrete) {\n  return Size.fromRadius(overlayRadius);\n}<\/code><\/pre>\n    ",
            "href": "material\/RoundSliderOverlayShape\/getPreferredSize.html",
            "isDeprecated": false,
            "type": "dart:ui.Size",
            "name": "getPreferredSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RoundSliderOverlayShape",
            "params": [
                {
                    "name": "isDiscrete",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isEnabled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Paints the shape, taking into account the state passed to it.<\/p>\n<p><code>context<\/code> is the same context for the render box of the <a href=\"material\/Slider-class.html\">Slider<\/a>.<\/p>\n<p><code>center<\/code> is the offset of the center where this shape should be painted.\nThis offset is relative to the origin of the <code>context<\/code> canvas.<\/p>\n<p><code>activationAnimation<\/code> is an animation triggered when the user beings\nto interact with the slider. It reverses when the user stops interacting\nwith the slider.<\/p>\n<p><code>enableAnimation<\/code> is an animation triggered when the <a href=\"material\/Slider-class.html\">Slider<\/a> is enabled,\nand it reverses when the slider is disabled. Enabled is the\n<code>Slider.isInteractive<\/code> state. Use this to paint intermediate frames for\nthis shape when the slider changes enabled state.<\/p>\n<p><code>isDiscrete<\/code> is true if <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> is non-null. If true, the\nslider will render tick marks on top of the track.<\/p>\n<p>If <code>labelPainter<\/code> is non-null, then <code>labelPainter.paint<\/code> should be\ncalled with the location that the label should appear. If the labelPainter\npassed is null, then no label was supplied to the <a href=\"material\/Slider-class.html\">Slider<\/a>.<\/p>\n<p><code>parentBox<\/code> is the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> of the <a href=\"material\/Slider-class.html\">Slider<\/a>. Its attributes, such as\nsize, can be used to assist in painting this shape.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>textDirection<\/code> can be used to determine how any extra text or graphics,\nbesides the text painted by the <code>labelPainter<\/code> should be positioned. The\n<code>labelPainter<\/code> already has the <code>textDirection<\/code> set.<\/p>\n<p><code>value<\/code> is the current parametric value (from 0.0 to 1.0) of the slider.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  PaintingContext context,\n  Offset center, {\n  Animation&lt;double&gt; activationAnimation,\n  Animation&lt;double&gt; enableAnimation,\n  bool isDiscrete,\n  TextPainter labelPainter,\n  RenderBox parentBox,\n  SliderThemeData sliderTheme,\n  TextDirection textDirection,\n  double value,\n}) {\n  final Canvas canvas = context.canvas;\n  final Tween&lt;double&gt; radiusTween = Tween&lt;double&gt;(\n    begin: 0.0,\n    end: overlayRadius,\n  );\n\n  \/\/ TODO(gspencer): We don't really follow the spec here for overlays.\n  \/\/ The spec says to use 16% opacity for drawing over light material,\n  \/\/ and 32% for colored material, but we don't really have a way to\n  \/\/ know what the underlying color is, so there's no easy way to\n  \/\/ implement this. Choosing the \"light\" version for now.\n  canvas.drawCircle(\n    center,\n    radiusTween.evaluate(activationAnimation),\n    Paint()..color = sliderTheme.overlayColor,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/RoundSliderOverlayShape\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RoundSliderOverlayShape",
            "params": [
                {
                    "name": "activationAnimation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "center",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "enableAnimation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "isDiscrete",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "labelPainter",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.TextPainter"
                },
                {
                    "name": "parentBox",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "sliderTheme",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The preferred radius of the round thumb shape when enabled.<\/p>\n<p>If it is not provided, then half of the track height is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double overlayRadius\n\n<\/code><\/pre>\n        ",
            "href": "material\/RoundSliderOverlayShape\/overlayRadius.html",
            "name": "overlayRadius",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.RoundSliderOverlayShape",
            "params": []
        }
    ]
}