{
    "desc": "<p>A shadow cast by a box.<\/p>\n<p>Inherits from <a href=\"dart-ui\/Shadow-class.html\">Shadow<\/a><\/p>\n<p><a href=\"painting\/BoxShadow-class.html\">BoxShadow<\/a> can cast non-rectangular shadows if the box is non-rectangular\n(e.g., has a border radius or a circular shape).<\/p>\n<p>This class is similar to CSS box-shadow.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Canvas\/drawShadow.html\">Canvas.drawShadow<\/a>, which is a more efficient way to draw shadows.<\/li>\n<li>\n<a href=\"dart-ui\/Shadow-class.html\">Shadow<\/a>, which is the parent class that lacks <a href=\"painting\/BoxShadow\/spreadRadius.html\">spreadRadius<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/BoxShadow-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.BoxShadow",
    "shortname": "BoxShadow",
    "extends": [
        "dart:ui.Shadow",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a box shadow.<\/p>\n<p>By default, the shadow is solid black with zero <code>offset<\/code>, <code>blurRadius<\/code>,\nand <code>spreadRadius<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BoxShadow({\n  Color color = const Color(0xFF000000),\n  Offset offset = Offset.zero,\n  double blurRadius = 0.0,\n  this.spreadRadius = 0.0,\n}) : super(color: color, offset: offset, blurRadius: blurRadius);<\/code><\/pre>\n    ",
            "href": "painting\/BoxShadow\/BoxShadow.html",
            "isDeprecated": false,
            "type": "",
            "name": "BoxShadow",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.BoxShadow",
            "params": [
                {
                    "name": "blurRadius",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "color",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "spreadRadius",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two box shadows.<\/p>\n<p>If either box shadow is null, this function linearly interpolates from a\na box shadow that matches the other box shadow in color but has a zero\noffset and a zero blurRadius.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BoxShadow lerp(BoxShadow a, BoxShadow b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return BoxShadow(\n    color: Color.lerp(a.color, b.color, t),\n    offset: Offset.lerp(a.offset, b.offset, t),\n    blurRadius: ui.lerpDouble(a.blurRadius, b.blurRadius, t),\n    spreadRadius: ui.lerpDouble(a.spreadRadius, b.spreadRadius, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxShadow\/lerp.html",
            "isDeprecated": false,
            "type": "painting.BoxShadow",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxShadow",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BoxShadow"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BoxShadow"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two lists of box shadows.<\/p>\n<p>If the lists differ in length, excess items are lerped with null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;BoxShadow&gt; lerpList(List&lt;BoxShadow&gt; a, List&lt;BoxShadow&gt; b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  a ??= &lt;BoxShadow&gt;[];\n  b ??= &lt;BoxShadow&gt;[];\n  final List&lt;BoxShadow&gt; result = &lt;BoxShadow&gt;[];\n  final int commonLength = math.min(a.length, b.length);\n  for (int i = 0; i &lt; commonLength; i += 1)\n    result.add(BoxShadow.lerp(a[i], b[i], t));\n  for (int i = commonLength; i &lt; a.length; i += 1)\n    result.add(a[i].scale(1.0 - t));\n  for (int i = commonLength; i &lt; b.length; i += 1)\n    result.add(b[i].scale(t));\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxShadow\/lerpList.html",
            "isDeprecated": false,
            "type": "dart:core.List<painting.BoxShadow>",
            "name": "lerpList",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxShadow",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<painting.BoxShadow>"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<painting.BoxShadow>"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new box shadow with its offset, blurRadius, and spreadRadius scaled by the given factor.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxShadow scale(double factor) {\n  return BoxShadow(\n    color: color,\n    offset: offset * factor,\n    blurRadius: blurRadius * factor,\n    spreadRadius: spreadRadius * factor,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxShadow\/scale.html",
            "isDeprecated": false,
            "type": "painting.BoxShadow",
            "name": "scale",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxShadow",
            "params": [
                {
                    "name": "factor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Create the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object that corresponds to this shadow description.<\/p>\n<p>The <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> and <a href=\"painting\/BoxShadow\/spreadRadius.html\">spreadRadius<\/a> are not represented in the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object.\nTo honor those as well, the shape should be inflated by <a href=\"painting\/BoxShadow\/spreadRadius.html\">spreadRadius<\/a> pixels\nin every direction and then translated by <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> before being filled using\nthis <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPaint toPaint() {\n  final Paint result = Paint()\n    ..color = color\n    ..maskFilter = MaskFilter.blur(BlurStyle.normal, blurSigma);\n  assert(() {\n    if (debugDisableShadows)\n      result.maskFilter = null;\n    return true;\n  }());\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "painting\/BoxShadow\/toPaint.html",
            "isDeprecated": false,
            "type": "dart:ui.Paint",
            "name": "toPaint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxShadow",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'BoxShadow($color, $offset, $blurRadius, $spreadRadius)';<\/code><\/pre>\n    ",
            "href": "painting\/BoxShadow\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BoxShadow",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BoxShadow\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(color, offset, blurRadius, spreadRadius);<\/code><\/pre>\n        ",
            "href": "painting\/BoxShadow\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.BoxShadow",
            "params": []
        },
        {
            "desc": "<p>The amount the box should be inflated prior to applying the blur.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double spreadRadius\n\n<\/code><\/pre>\n        ",
            "href": "painting\/BoxShadow\/spreadRadius.html",
            "name": "spreadRadius",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.BoxShadow",
            "params": []
        }
    ]
}