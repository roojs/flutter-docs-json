{
    "name": "collection.DeepCollectionEquality",
    "extends": [],
    "memberOf": "collection",
    "events": [],
    "methods": [
        {
            "name": "DeepCollectionEquality",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "collection.DeepCollectionEquality",
            "sig": "",
            "params": [
                {
                    "name": "base",
                    "type": "collection.Equality",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-collection_collection\/DeepCollectionEquality\/DeepCollectionEquality.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DeepCollectionEquality([Equality base = const DefaultEquality()])\n    : _base = base,\n      _unordered = false;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "equals",
            "type": "dart:core.bool",
            "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.DeepCollectionEquality",
            "sig": "",
            "params": [
                {
                    "name": "e1",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/DeepCollectionEquality\/equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(e1, e2) {\n  if (e1 is Set) {\n    return e2 is Set &amp;&amp; new SetEquality(this).equals(e1, e2);\n  }\n  if (e1 is Map) {\n    return e2 is Map &amp;&amp;\n        new MapEquality(keys: this, values: this).equals(e1, e2);\n  }\n  if (!_unordered) {\n    if (e1 is List) {\n      return e2 is List &amp;&amp; new ListEquality(this).equals(e1, e2);\n    }\n    if (e1 is Iterable) {\n      return e2 is Iterable &amp;&amp; new IterableEquality(this).equals(e1, e2);\n    }\n  } else if (e1 is Iterable) {\n    if (e1 is List != e2 is List) return false;\n    return e2 is Iterable &amp;&amp;\n        new UnorderedIterableEquality(this).equals(e1, e2);\n  }\n  return _base.equals(e1, e2);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "hash",
            "type": "dart:core.int",
            "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/DeepCollectionEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.DeepCollectionEquality",
            "sig": "",
            "params": [
                {
                    "name": "o",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/DeepCollectionEquality\/hash.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(Object o) {\n  if (o is Set) return new SetEquality(this).hash(o);\n  if (o is Map) return new MapEquality(keys: this, values: this).hash(o);\n  if (!_unordered) {\n    if (o is List) return new ListEquality(this).hash(o);\n    if (o is Iterable) return new IterableEquality(this).hash(o);\n  } else if (o is Iterable) {\n    return new UnorderedIterableEquality(this).hash(o);\n  }\n  return _base.hash(o);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isValidKey",
            "type": "dart:core.bool",
            "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/DeepCollectionEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/DeepCollectionEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.DeepCollectionEquality",
            "sig": "",
            "params": [
                {
                    "name": "o",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/DeepCollectionEquality\/isValidKey.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) =&gt; o is Iterable || o is Map || _base.isValidKey(o);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "DeepCollectionEquality.unordered",
            "type": "",
            "desc": "<p>Creates a deep equality on collections where the order of lists and\niterables are not considered important. That is, lists and iterables are\ntreated as unordered iterables.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.DeepCollectionEquality",
            "sig": "",
            "params": [
                {
                    "name": "base",
                    "type": "collection.Equality",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-collection_collection\/DeepCollectionEquality\/DeepCollectionEquality.unordered.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DeepCollectionEquality.unordered(\n    [Equality base = const DefaultEquality()])\n    : _base = base,\n      _unordered = true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-collection_collection\/DeepCollectionEquality-class.html",
    "desc": "<p>Deep equality on collections.<\/p>\n<p>Recognizes lists, sets, iterables and maps and compares their elements using\ndeep equality as well.<\/p>\n<p>Non-iterable\/map objects are compared using a configurable base equality.<\/p>\n<p>Works in one of two modes: ordered or unordered.<\/p>\n<p>In ordered mode, lists and iterables are required to have equal elements\nin the same order. In unordered mode, the order of elements in iterables\nand lists are not important.<\/p>\n<p>A list is only equal to another list, likewise for sets and maps. All other\niterables are compared as iterables only.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DeepCollectionEquality"
}