{
    "name": "file.ForwardingFileSystem",
    "extends": [
        "file.FileSystem",
        "dart:core.Object"
    ],
    "memberOf": "file",
    "events": [],
    "methods": [
        {
            "name": "ForwardingFileSystem",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-file_file\/ForwardingFileSystem-class.html\">ForwardingFileSystem<\/a> that forwards all methods and\nproperties to the specified <code>delegate<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "delegate",
                    "type": "file.FileSystem",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-file_file\/ForwardingFileSystem\/ForwardingFileSystem.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ForwardingFileSystem(this.delegate);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "directory",
            "type": "file.Directory",
            "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/directory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory directory(dynamic path) =&gt; delegate.directory(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "file",
            "type": "file.File",
            "desc": "<p>Returns a reference to a <a href=\"package-file_file\/File-class.html\">File<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/file.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFile file(dynamic path) =&gt; delegate.file(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "identical",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Checks whether two paths refer to the same object in the\nfile system. Returns a <a href=\"dart-async\/Future-class.html\">Future&lt;bool&gt;<\/a> that completes with the result.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Completes the returned Future with an error if one of the paths points\nto an object that does not exist.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/identical.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;bool&gt; identical(String path1, String path2) =&gt;\n    delegate.identical(path1, path2);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        },
        {
            "name": "identicalSync",
            "type": "dart:core.bool",
            "desc": "<p>Synchronously checks whether two paths refer to the same object in the\nfile system.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Throws an error if one of the paths points to an object that does not\nexist.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/identicalSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool identicalSync(String path1, String path2) =&gt;\n    delegate.identicalSync(path1, path2);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "link",
            "type": "file.Link",
            "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Link-class.html\">Link<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/link.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLink link(dynamic path) =&gt; delegate.link(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "stat",
            "type": "dart:async.Future<dart:io.FileStat>",
            "desc": "<p>Asynchronously calls the operating system's stat() function on <code>path<\/code>.\nReturns a Future which completes with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing\nthe data returned by stat().\nIf the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with\n.type set to FileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/stat.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.FileStat&gt; stat(String path) =&gt; delegate.stat(path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.FileStat"
            ]
        },
        {
            "name": "statSync",
            "type": "dart:io.FileStat",
            "desc": "<p>Calls the operating system's stat() function on <code>path<\/code>.\nReturns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().\nIf the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/statSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.FileStat statSync(String path) =&gt; delegate.statSync(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "type",
            "type": "dart:async.Future<dart:io.FileSystemEntityType>",
            "desc": "<p>Finds the type of file system object that a <code>path<\/code> points to. Returns\na Future<filesystementitytype> that completes with the result.<\/filesystementitytype><\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "followLinks",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/type.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.FileSystemEntityType&gt; type(String path, {bool followLinks: true}) =&gt;\n    delegate.type(path, followLinks: followLinks);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.FileSystemEntityType"
            ]
        },
        {
            "name": "typeSync",
            "type": "dart:io.FileSystemEntityType",
            "desc": "<p>Syncronously finds the type of file system object that a <code>path<\/code> points\nto. Returns a <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a>.<\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "followLinks",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystem\/typeSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.FileSystemEntityType typeSync(String path, {bool followLinks: true}) =&gt;\n    delegate.typeSync(path, followLinks: followLinks);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "currentDirectory",
            "type": "file.Directory",
            "types": [],
            "desc": "<p>Creates a directory object pointing to the current working directory.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystem",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystem\/currentDirectory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get currentDirectory =&gt; delegate.currentDirectory;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "delegate",
            "type": "file.FileSystem",
            "types": [],
            "desc": "<p>The file system to which this file system will forward all activity.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystem",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystem\/delegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FileSystem delegate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isWatchSupported",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Tests if <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a> is supported on the current system.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystem",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystem\/isWatchSupported.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isWatchSupported =&gt; delegate.isWatchSupported;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "path",
            "type": "path.Context",
            "types": [],
            "desc": "<p>An object for manipulating paths in this file system.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystem",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystem\/path.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\np.Context get path =&gt; delegate.path;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "systemTempDirectory",
            "type": "file.Directory",
            "types": [],
            "desc": "<p>Gets the system temp directory.<\/p>\n<p>It is left to file system implementations to decide how to define the\n\"system temp directory\".<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystem",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystem\/systemTempDirectory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get systemTempDirectory =&gt; delegate.systemTempDirectory;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-file_file\/ForwardingFileSystem-class.html",
    "desc": "<p>A file system that forwards all methods and properties to a delegate.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ForwardingFileSystem"
}