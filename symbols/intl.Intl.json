{
    "name": "intl.Intl",
    "extends": [],
    "memberOf": "intl",
    "events": [],
    "methods": [
        {
            "name": "Intl",
            "type": "",
            "desc": "<p>Constructor optionally <code>aLocale<\/code> for specifics of the language\nlocale to be used, otherwise, we will attempt to infer it (acceptable if\nDart is running on the client, we can infer from the browser\/client\npreferences).<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "aLocale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "intl\/Intl\/Intl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Intl([String aLocale]) {\n  _locale = aLocale != null ? aLocale : getCurrentLocale();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "canonicalizedLocale",
            "type": "dart:core.String",
            "desc": "<p>Return the name <code>aLocale<\/code> turned into xx_YY where it might possibly be\nin the wrong case or with a hyphen instead of an underscore. If\n<code>aLocale<\/code> is null, for example, if you tried to get it from IE,\nreturn the current system locale.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "aLocale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/canonicalizedLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String canonicalizedLocale(String aLocale) {\n  \/\/ Locales of length &lt; 5 are presumably two-letter forms, or else malformed.\n  \/\/ We return them unmodified and if correct they will be found.\n  \/\/ Locales longer than 6 might be malformed, but also do occur. Do as\n  \/\/ little as possible to them, but make the '-' be an '_' if it's there.\n  \/\/ We treat C as a special case, and assume it wants en_ISO for formatting.\n  \/\/ TODO(alanknight): en_ISO is probably not quite right for the C\/Posix\n  \/\/ locale for formatting. Consider adding C to the formats database.\n  if (aLocale == null) return getCurrentLocale();\n  if (aLocale == \"C\") return \"en_ISO\";\n  if (aLocale.length &lt; 5) return aLocale;\n  if (aLocale[2] != '-' &amp;&amp; (aLocale[2] != '_')) return aLocale;\n  var region = aLocale.substring(3);\n  \/\/ If it's longer than three it's something odd, so don't touch it.\n  if (region.length &lt;= 3) region = region.toUpperCase();\n  return '${aLocale[0]}${aLocale[1]}_$region';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "date",
            "type": "intl.DateFormat",
            "desc": "<p>Return a new date format using the specified <code>pattern<\/code>.\nIf <code>desiredLocale<\/code> is not specified, then we default to <a href=\"intl\/Intl\/locale.html\">locale<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "pattern",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "desiredLocale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/date.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateFormat date([String pattern, String desiredLocale]) {\n  var actualLocale = (desiredLocale == null) ? locale : desiredLocale;\n  return new DateFormat(pattern, actualLocale);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "gender",
            "type": "dart:core.String",
            "desc": "<p>Format a message differently depending on <code>targetGender<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "targetGender",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "female",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "male",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "other",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "desc",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "examples",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "args",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "meaning",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/gender.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String gender(String targetGender,\n    {String female,\n    String male,\n    String other,\n    String desc,\n    Map&lt;String, dynamic&gt; examples,\n    String locale,\n    String name,\n    List args,\n    String meaning,\n    bool skip}) {\n  \/\/ Call our internal method, dropping args and desc because they're not used\n  \/\/ at runtime and we want them to be optimized away.\n  return _gender(targetGender,\n      male: male,\n      female: female,\n      other: other,\n      locale: locale,\n      name: name,\n      args: args,\n      meaning: meaning);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "genderLogic",
            "type": "",
            "desc": "<p>Internal: Implements the logic for gender selection - use <a href=\"intl\/Intl\/gender.html\">gender<\/a> for\nnormal messages.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "targetGender",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "female",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "male",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/genderLogic.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static genderLogic(String targetGender,\n    {female, male, other, String locale}) {\n  if (other == null) {\n    throw new ArgumentError(\"The 'other' named argument must be specified\");\n  }\n  switch (targetGender) {\n    case \"female\":\n      return female == null ? other : female;\n    case \"male\":\n      return male == null ? other : male;\n    default:\n      return other;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "getCurrentLocale",
            "type": "dart:core.String",
            "desc": "<p>Accessor for the current locale. This should always == the default locale,\nunless for some reason this gets called inside a message that resets the\nlocale.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "intl\/Intl\/getCurrentLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String getCurrentLocale() {\n  if (defaultLocale == null) defaultLocale = systemLocale;\n  return defaultLocale;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "message",
            "type": "dart:core.String",
            "desc": "<p>Use this for a message that will be translated for different locales. The\nexpected usage is that this is inside an enclosing function that only\nreturns the value of this call and provides a scope for the variables that\nwill be substituted in the message.<\/p>\n<p>The <code>message_str<\/code> is the string to be translated, which may be\ninterpolated based on one or more variables. The <code>name<\/code> of the message\nmust match the enclosing function name. For methods, it can also be\nclassName_methodName. So for a method hello in class Simple, the name can\nbe either \"hello\" or \"Simple_hello\". The name must also be globally unique\nin the program, so the second form can make it easier to distinguish\nmessages with the same name but in different classes.<\/p>\n<p>The <code>args<\/code> repeats the arguments of the enclosing\nfunction, <code>desc<\/code> provides a description of usage,\n<code>examples<\/code> is a Map of examples for each interpolated variable.\nFor example<\/p>\n<pre class=\"language-dart\"><code>  hello(yourName) =&gt; Intl.message(\n    \"Hello, $yourName\",\n    name: \"hello\",\n    args: [yourName],\n    desc: \"Say hello\",\n    examples = const {\"yourName\": \"Sparky\"}.\n<\/code><\/pre>\n<p>The source code will be processed via the analyzer to extract out the\nmessage data, so only a subset of valid Dart code is accepted. In\nparticular, everything must be literal and cannot refer to variables\noutside the scope of the enclosing function. The <code>examples<\/code> map must be a\nvalid const literal map. Similarly, the <code>desc<\/code> argument must be a single,\nsimple string and <code>skip<\/code> a boolean literal. These three arguments will not\nbe used at runtime but will be extracted from the source code and used as\nadditional data for translators. For more information see the \"Messages\"\nsection of the main\n<code>package documentation<\/code> (<a href=\"https:\/\/pub.dartlang.org\/packages\/intl)\">https:\/\/pub.dartlang.org\/packages\/intl)<\/a>.<\/p>\n<p>For messages without parameters, both <code>name<\/code> and <code>args<\/code> can be omitted.\nMessages that supply <code>args<\/code> should also supply a unique <code>name<\/code>. The <code>name<\/code>\nand <code>args<\/code> arguments used at runtime to look up the localized version and\npass the appropriate arguments to it. We may in the future modify the code\nduring compilation to make manually passing those arguments unnecessary in\nmore situations.<\/p>\n<p>The <code>skip<\/code> arg will still validate the message, but will be filtered from\nthe extracted message output. This can be useful to set up placeholder\nmessages during development whose text aren't finalized yet without having\nthe placeholder automatically translated.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "message_str",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "desc",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "examples",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "args",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "meaning",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/message.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String message(String message_str,\n        {String desc: '',\n        Map&lt;String, dynamic&gt; examples: const {},\n        String locale,\n        String name,\n        List args,\n        String meaning,\n        bool skip}) =&gt;\n    _message(message_str, locale, name, args, meaning);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "plural",
            "type": "dart:core.String",
            "desc": "<p>Format a message differently depending on <code>howMany<\/code>. Normally used\nas part of an <code>Intl.message<\/code> text that is to be translated.\nSelects the correct plural form from\nthe provided alternatives. The <code>other<\/code> named argument is mandatory.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "howMany",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "zero",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "one",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "two",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "few",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "many",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "other",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "desc",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "examples",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "args",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "meaning",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/plural.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String plural(int howMany,\n    {String zero,\n    String one,\n    String two,\n    String few,\n    String many,\n    String other,\n    String desc,\n    Map&lt;String, dynamic&gt; examples,\n    String locale,\n    String name,\n    List args,\n    String meaning,\n    bool skip}) {\n  \/\/ Call our internal method, dropping examples and desc because they're not\n  \/\/ used at runtime and we want them to be optimized away.\n  return _plural(howMany,\n      zero: zero,\n      one: one,\n      two: two,\n      few: few,\n      many: many,\n      other: other,\n      locale: locale,\n      name: name,\n      args: args,\n      meaning: meaning);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "pluralLogic",
            "type": "",
            "desc": "<p>Internal: Implements the logic for plural selection - use <a href=\"intl\/Intl\/plural.html\">plural<\/a> for\nnormal messages.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "howMany",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "zero",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "one",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "two",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "few",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "many",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "meaning",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/pluralLogic.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static pluralLogic(int howMany,\n    {zero, one, two, few, many, other, String locale, String meaning}) {\n  if (other == null) {\n    throw new ArgumentError(\"The 'other' named argument must be provided\");\n  }\n  if (howMany == null) {\n    throw new ArgumentError(\"The howMany argument to plural cannot be null\");\n  }\n  \/\/ If there's an explicit case for the exact number, we use it. This is not\n  \/\/ strictly in accord with the CLDR rules, but it seems to be the\n  \/\/ expectation. At least I see e.g. Russian translations that have a zero\n  \/\/ case defined. The rule for that locale will never produce a zero, and\n  \/\/ treats it as other. But it seems reasonable that, even if the language\n  \/\/ rules treat zero as other, we might want a special message for zero.\n  if (howMany == 0 &amp;&amp; zero != null) return zero;\n  if (howMany == 1 &amp;&amp; one != null) return one;\n  if (howMany == 2 &amp;&amp; two != null) return two;\n  var pluralRule = _pluralRule(locale, howMany);\n  var pluralCase = pluralRule();\n  switch (pluralCase) {\n    case plural_rules.PluralCase.ZERO:\n      return zero ?? other;\n    case plural_rules.PluralCase.ONE:\n      return one ?? other;\n    case plural_rules.PluralCase.TWO:\n      return two ?? few ?? other;\n    case plural_rules.PluralCase.FEW:\n      return few ?? other;\n    case plural_rules.PluralCase.MANY:\n      return many ?? other;\n    case plural_rules.PluralCase.OTHER:\n      return other;\n    default:\n      throw new ArgumentError.value(\n          howMany, \"howMany\", \"Invalid plural argument\");\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "select",
            "type": "dart:core.String",
            "desc": "<p>Format a message differently depending on <code>choice<\/code>. We look up the value\nof <code>choice<\/code> in <code>cases<\/code> and return the result, or an empty string if\nit is not found. Normally used as part\nof an Intl.message message that is to be translated.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "choice",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cases",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "desc",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "examples",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "args",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "meaning",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skip",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/select.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String select(Object choice, Map&lt;String, String&gt; cases,\n    {String desc,\n    Map&lt;String, dynamic&gt; examples,\n    String locale,\n    String name,\n    List args,\n    String meaning,\n    bool skip}) {\n  return _select(choice, cases,\n      locale: locale, name: name, args: args, meaning: meaning);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "selectLogic",
            "type": "",
            "desc": "<p>Internal: Implements the logic for select - use <a href=\"intl\/Intl\/select.html\">select<\/a> for\nnormal messages.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "choice",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "cases",
                    "type": "dart:core.Map<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/selectLogic.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static selectLogic(Object choice, Map&lt;String, dynamic&gt; cases) {\n  \/\/ Allow passing non-strings, e.g. enums to a select.\n  choice = \"$choice\";\n  var exact = cases[choice];\n  if (exact != null) return exact;\n  var other = cases[\"other\"];\n  if (other == null)\n    throw new ArgumentError(\"The 'other' case must be specified\");\n  return other;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "shortLocale",
            "type": "dart:core.String",
            "desc": "<p>Return the short version of a locale name, e.g. 'en_US' =&gt; 'en'<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "aLocale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/shortLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String shortLocale(String aLocale) {\n  if (aLocale.length &lt; 2) return aLocale;\n  return aLocale.substring(0, 2).toLowerCase();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "intl\/Intl\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">toString() =&gt; \"Intl($locale)\";<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "verifiedLocale",
            "type": "dart:core.String",
            "desc": "<p>Given <code>newLocale<\/code> return a locale that we have data for that is similar\nto it, if possible.<\/p>\n<p>If <code>newLocale<\/code> is found directly, return it. If it can't be found, look up\nbased on just the language (e.g. 'en_CA' -&gt; 'en'). Also accepts '-'\nas a separator and changes it into '_' for lookup, and changes the\ncountry to uppercase.<\/p>\n<p>There is a special case that if a locale named \"fallback\" is present\nand has been initialized, this will return that name. This can be useful\nfor messages where you don't want to just use the text from the original\nsource code, but wish to have a universal fallback translation.<\/p>\n<p>Note that null is interpreted as meaning the default locale, so if\n<code>newLocale<\/code> is null the default locale will be returned.<\/p>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "newLocale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "localeExists",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onFailure",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/verifiedLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String verifiedLocale(String newLocale, Function localeExists,\n    {Function onFailure: _throwLocaleError}) {\n  \/\/ TODO(alanknight): Previously we kept a single verified locale on the Intl\n  \/\/ object, but with different verification for different uses, that's more\n  \/\/ difficult. As a result, we call this more often. Consider keeping\n  \/\/ verified locales for each purpose if it turns out to be a performance\n  \/\/ issue.\n  if (newLocale == null) {\n    return verifiedLocale(getCurrentLocale(), localeExists,\n        onFailure: onFailure);\n  }\n  if (localeExists(newLocale)) {\n    return newLocale;\n  }\n  for (var each in [\n    canonicalizedLocale(newLocale),\n    shortLocale(newLocale),\n    \"fallback\"\n  ]) {\n    if (localeExists(each)) {\n      return each;\n    }\n  }\n  return onFailure(newLocale);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "withLocale",
            "type": "",
            "desc": "<p>Run <code>function<\/code> with the default locale set to <code>locale<\/code> and\nreturn the result.<\/p>\n<p>This is run in a zone, so async operations invoked\nfrom within <code>function<\/code> will still have the locale set.<\/p>\n<p>In simple usage <code>function<\/code> might be a single\n<code>Intl.message()<\/code> call or number\/date formatting operation. But it can\nalso be an arbitrary function that calls multiple Intl operations.<\/p>\n<p>For example<\/p>\n<pre class=\"language-dart\"><code>  Intl.withLocale(\"fr\", () =&gt; new NumberFormat.format(123456));\n<\/code><\/pre>\n<p>or<\/p>\n<pre class=\"language-dart\"><code>  hello(name) =&gt; Intl.message(\n      \"Hello $name.\",\n      name: 'hello',\n      args: [name],\n      desc: 'Say Hello');\n  Intl.withLocale(\"zh\", new Timer(new Duration(milliseconds:10),\n      () =&gt; print(hello(\"World\")));\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "intl.Intl",
            "sig": "",
            "params": [
                {
                    "name": "locale",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "function",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "intl\/Intl\/withLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static withLocale(String locale, function()) {\n  var canonical = Intl.canonicalizedLocale(locale);\n  return runZoned(function, zoneValues: {#Intl.locale: canonical});\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "defaultLocale",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The default locale. This defaults to being set from systemLocale, but\ncan also be set explicitly, and will then apply to any new instances where\nthe locale isn't specified. Note that a locale parameter to\n<a href=\"intl\/Intl\/withLocale.html\">Intl.withLocale<\/a>\nwill supercede this value while that operation is active. Using\n<a href=\"intl\/Intl\/withLocale.html\">Intl.withLocale<\/a> may be preferable if you are using different locales\nin the same application.<\/p>\n        ",
            "memberOf": "intl.Intl",
            "isConstant": false,
            "href": "intl\/Intl\/defaultLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get defaultLocale {\n  var zoneLocale = Zone.current[#Intl.locale];\n  return zoneLocale == null ? _defaultLocale : zoneLocale;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "locale",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Return the locale for this instance. If none was set, the locale will\nbe the default.<\/p>\n        ",
            "memberOf": "intl.Intl",
            "isConstant": false,
            "href": "intl\/Intl\/locale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get locale =&gt; _locale;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "systemLocale",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The system's locale, as obtained from the window.navigator.language\nor other operating system mechanism. Note that due to system limitations\nthis is not automatically set, and must be set by importing one of\nintl_browser.dart or intl_standalone.dart and calling findSystemLocale().<\/p>\n        ",
            "memberOf": "intl.Intl",
            "isConstant": false,
            "href": "intl\/Intl\/systemLocale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String systemLocale = 'en_US'\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "intl\/Intl-class.html",
    "desc": "<p>The Intl class provides a common entry point for internationalization\nrelated tasks. An Intl instance can be created for a particular locale\nand used to create a date format via <code>anIntl.date()<\/code>. Static methods\non this class are also used in message formatting.<\/p>\n<p>Examples:\n     today(date) =&gt; Intl.message(\n         \"Today's date is $date\",\n         name: 'today',\n         args: <a href=\"intl\/Intl\/date.html\">date<\/a>,\n         desc: 'Indicate the current date',\n         examples: const {'date' : 'June 8, 2012'});\n     print(today(new DateTime.now().toString());<\/p>\n<pre class=\"language-dart\"><code> howManyPeople(numberOfPeople, place) =&gt; Intl.plural(\n       zero: 'I see no one at all',\n       one: 'I see $numberOfPeople other person',\n       other: 'I see $numberOfPeople other people')} in $place.''',\n     name: 'msg',\n     args: [numberOfPeople, place],\n     desc: 'Description of how many people are seen in a place.',\n     examples: const {'numberOfPeople': 3, 'place': 'London'});\n<\/code><\/pre>\n<p>Calling <code>howManyPeople(2, 'Athens');<\/code> would\nproduce \"I see 2 other people in Athens.\" as output in the default locale.\nIf run in a different locale it would produce appropriately translated\noutput.<\/p>\n<p>For more detailed information on messages and localizing them see\nthe main <a href=\"https:\/\/pub.dartlang.org\/packages\/intl\">package documentation<\/a><\/p>\n<p>You can set the default locale.\n      Intl.defaultLocale = \"pt_BR\";<\/p>\n<p>To temporarily use a locale other than the default, use the <code>withLocale<\/code>\nfunction.\n      var todayString = new DateFormat(\"pt_BR\").format(new DateTime.now());\n      print(withLocale(\"pt_BR\", () =&gt; today(todayString));<\/p>\n<p>See <code>tests\/message_format_test.dart<\/code> for more examples.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Intl"
}