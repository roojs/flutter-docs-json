{
    "desc": "<p>A object that accepts stream events both synchronously and asynchronously.<\/p>\n<p>A <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> combines the methods from <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a> and <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a>.<\/p>\n<p>The <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a> methods can't be used while the <a href=\"dart-async\/StreamConsumer\/addStream.html\">addStream<\/a> is called.\nAs soon as the <a href=\"dart-async\/StreamConsumer\/addStream.html\">addStream<\/a>'s <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with a value, the\n<a href=\"dart-async\/EventSink-class.html\">EventSink<\/a> methods can be used again.<\/p>\n<p>If <a href=\"dart-async\/StreamConsumer\/addStream.html\">addStream<\/a> is called after any of the <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a> methods, it'll\nbe delayed until the underlying system has consumed the data added by the\n<a href=\"dart-async\/EventSink-class.html\">EventSink<\/a> methods.<\/p>\n<p>When <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a> methods are used, the <a href=\"dart-async\/StreamSink\/done.html\">done<\/a> <a href=\"dart-async\/Future-class.html\">Future<\/a> can be used to\ncatch any errors.<\/p>\n<p>When <a href=\"dart-async\/StreamSink\/close.html\">close<\/a> is called, it will return the <a href=\"dart-async\/StreamSink\/done.html\">done<\/a> <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-async\/StreamSink-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:async",
    "name": "dart:async.StreamSink",
    "shortname": "StreamSink",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-async\/StreamSink\/StreamSink.html",
            "isDeprecated": "0",
            "type": "",
            "name": "StreamSink",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:async.StreamSink",
            "params": []
        },
        {
            "desc": "<p>Tells the stream sink that no further streams will be added.<\/p>\n<p>This allows the stream sink to complete any remaining work and release\nresources that are no longer needed<\/p>\n<p>Returns a future which is completed when the stream sink has shut down.\nIf cleaning up can fail, the error may be reported in the returned future,\notherwise it completes with <code>null<\/code>.<\/p>\n<p>Returns the same future as <a href=\"dart-async\/StreamSink\/done.html\">done<\/a>.<\/p>\n<p>The stream sink may close before the <a href=\"dart-async\/StreamSink\/close.html\">close<\/a> method is called, either due\nto an error or because it is itself providing events to someone who has\nstopped listening. In that case, the <a href=\"dart-async\/StreamSink\/done.html\">done<\/a> future is completed first,\nand the <code>close<\/code> method will return the <code>done<\/code> future when called.<\/p>\n<p>Unifies <a href=\"dart-async\/StreamSink\/close.html\">StreamConsumer.close<\/a> and <a href=\"dart-async\/StreamSink\/close.html\">EventSink.close<\/a> which both mark their\nobject as not expecting any further events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close();<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamSink\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamSink",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Return a future which is completed when the <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> is finished.<\/p>\n<p>If the <code>StreamSink<\/code> fails with an error,\nperhaps in response to adding events using <a href=\"dart-async\/EventSink\/add.html\">add<\/a>, <a href=\"dart-async\/EventSink\/addError.html\">addError<\/a> or <a href=\"dart-async\/StreamSink\/close.html\">close<\/a>,\nthe <a href=\"dart-async\/StreamSink\/done.html\">done<\/a> future will complete with that error.<\/p>\n<p>Otherwise, the returned future will complete when either:<\/p>\n<ul>\n<li>all events have been processed and the sink has been closed, or<\/li>\n<li>the sink has otherwise been stopped from handling more events\n(for example by canceling a stream subscription).<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamSink\/done.html",
            "name": "done",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "memberOf": "dart:async.StreamSink",
            "params": []
        }
    ]
}