{
    "desc": "<p>A version constraint representing a union of multiple disjoint version\nranges.<\/p>\n<p>An instance of this will only be created if the version can't be represented\nas a non-compound value.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-pub_semver_pub_semver\/VersionUnion-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "pub_semver",
    "name": "pub_semver.VersionUnion",
    "shortname": "VersionUnion",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns <code>true<\/code> if this constraint allows <code>version<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allows(Version version) =&gt;\n    ranges.any((constraint) =&gt; constraint.allows(version));<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/allows.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": [
                {
                    "name": "version",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "pub_semver.Version"
                }
            ]
        },
        {
            "desc": "<p>Returns <code>true<\/code> if this constraint allows all the versions that <code>other<\/code>\nallows.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAll(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  \/\/ Because both lists of ranges are ordered by minimum version, we can\n  \/\/ safely move through them linearly here.\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  while (ourRanges.current != null &amp;&amp; theirRanges.current != null) {\n    if (ourRanges.current.allowsAll(theirRanges.current)) {\n      theirRanges.moveNext();\n    } else {\n      ourRanges.moveNext();\n    }\n  }\n\n  \/\/ If our ranges have allowed all of their ranges, we'll have consumed all\n  \/\/ of them.\n  return theirRanges.current == null;\n}<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/allowsAll.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "pub_semver.VersionConstraint"
                }
            ]
        },
        {
            "desc": "<p>Returns <code>true<\/code> if this constraint allows any of the versions that <code>other<\/code>\nallows.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool allowsAny(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  \/\/ Because both lists of ranges are ordered by minimum version, we can\n  \/\/ safely move through them linearly here.\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  while (ourRanges.current != null &amp;&amp; theirRanges.current != null) {\n    if (ourRanges.current.allowsAny(theirRanges.current)) {\n      return true;\n    }\n\n    \/\/ Move the constraint with the lower max value forward. This ensures that\n    \/\/ we keep both lists in sync as much as possible.\n    if (allowsHigher(theirRanges.current, ourRanges.current)) {\n      ourRanges.moveNext();\n    } else {\n      theirRanges.moveNext();\n    }\n  }\n\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/allowsAny.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "pub_semver.VersionConstraint"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by this but\nnot <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint difference(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  var newRanges = &lt;VersionRange&gt;[];\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  var current = ourRanges.current;\n\n  theirNextRange() {\n    if (theirRanges.moveNext()) return true;\n\n    \/\/ If there are no more of their ranges, none of the rest of our ranges\n    \/\/ need to be subtracted so we can add them as-is.\n    newRanges.add(current);\n    while (ourRanges.moveNext()) {\n      newRanges.add(ourRanges.current);\n    }\n    return false;\n  }\n\n  ourNextRange({bool includeCurrent: true}) {\n    if (includeCurrent) newRanges.add(current);\n    if (!ourRanges.moveNext()) return false;\n    current = ourRanges.current;\n    return true;\n  }\n\n  while (true) {\n    \/\/ If the current ranges are disjoint, move the lowest one forward.\n    if (strictlyLower(theirRanges.current, current)) {\n      if (!theirNextRange()) break;\n      continue;\n    }\n\n    if (strictlyHigher(theirRanges.current, current)) {\n      if (!ourNextRange()) break;\n      continue;\n    }\n\n    \/\/ If we're here, we know [theirRanges.current] overlaps [current].\n    var difference = current.difference(theirRanges.current);\n    if (difference is VersionUnion) {\n      \/\/ If their range split [current] in half, we only need to continue\n      \/\/ checking future ranges against the latter half.\n      assert(difference.ranges.length == 2);\n      newRanges.add(difference.ranges.first);\n      current = difference.ranges.last;\n\n      \/\/ Since their range split [current], it definitely doesn't allow higher\n      \/\/ versions, so we should move their ranges forward.\n      if (!theirNextRange()) break;\n    } else if (difference.isEmpty) {\n      if (!ourNextRange(includeCurrent: false)) break;\n    } else {\n      current = difference as VersionRange;\n\n      \/\/ Move the constraint with the lower max value forward. This ensures\n      \/\/ that we keep both lists in sync as much as possible, and that large\n      \/\/ ranges have a chance to subtract or be subtracted by multiple small\n      \/\/ ranges that they contain.\n      if (allowsHigher(current, theirRanges.current)) {\n        if (!theirNextRange()) break;\n      } else {\n        if (!ourNextRange()) break;\n      }\n    }\n  }\n\n  if (newRanges.isEmpty) return VersionConstraint.empty;\n  if (newRanges.length == 1) return newRanges.single;\n  return new VersionUnion.fromRanges(newRanges);\n}<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/difference.html",
            "isDeprecated": "0",
            "type": "pub_semver.VersionConstraint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "pub_semver.VersionConstraint"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that only allows <a href=\"package-pub_semver_pub_semver\/Version-class.html\">Version<\/a>s allowed by both\nthis and <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint intersect(VersionConstraint other) {\n  var ourRanges = ranges.iterator;\n  var theirRanges = _rangesFor(other).iterator;\n\n  \/\/ Because both lists of ranges are ordered by minimum version, we can\n  \/\/ safely move through them linearly here.\n  var newRanges = &lt;VersionRange&gt;[];\n  ourRanges.moveNext();\n  theirRanges.moveNext();\n  while (ourRanges.current != null &amp;&amp; theirRanges.current != null) {\n    var intersection = ourRanges.current.intersect(theirRanges.current);\n\n    if (!intersection.isEmpty) newRanges.add(intersection);\n\n    \/\/ Move the constraint with the lower max value forward. This ensures that\n    \/\/ we keep both lists in sync as much as possible, and that large ranges\n    \/\/ have a chance to match multiple small ranges that they contain.\n    if (allowsHigher(theirRanges.current, ourRanges.current)) {\n      ourRanges.moveNext();\n    } else {\n      theirRanges.moveNext();\n    }\n  }\n\n  if (newRanges.isEmpty) return VersionConstraint.empty;\n  if (newRanges.length == 1) return newRanges.single;\n\n  return new VersionUnion.fromRanges(newRanges);\n}<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/intersect.html",
            "isDeprecated": "0",
            "type": "pub_semver.VersionConstraint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "pub_semver.VersionConstraint"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; ranges.join(\" or \");<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"package-pub_semver_pub_semver\/VersionConstraint-class.html\">VersionConstraint<\/a> that allows <a href=\"dart-ui\/Versions-class.html\">Versions<\/a>s allowed by either\nthis or <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VersionConstraint union(VersionConstraint other) =&gt;\n    new VersionConstraint.unionOf([this, other]);<\/code><\/pre>\n    ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/union.html",
            "isDeprecated": "0",
            "type": "pub_semver.VersionConstraint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "pub_semver.VersionUnion",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "pub_semver.VersionConstraint"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-pub_semver_pub_semver\/VersionUnion\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-pub_semver_pub_semver\/VersionUnion\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; const ListEquality().hash(ranges);<\/code><\/pre>\n        ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "pub_semver.VersionUnion",
            "params": []
        },
        {
            "desc": "<p>Returns <code>true<\/code> if this constraint allows all versions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAny =&gt; false;<\/code><\/pre>\n        ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/isAny.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "pub_semver.VersionUnion",
            "params": []
        },
        {
            "desc": "<p>Returns <code>true<\/code> if this constraint allows no versions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; false;<\/code><\/pre>\n        ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "pub_semver.VersionUnion",
            "params": []
        },
        {
            "desc": "<p>The constraints that compose this union.<\/p>\n<p>This list has two invariants:<\/p>\n<ul>\n<li>Its contents are sorted using the standard ordering of <a href=\"package-pub_semver_pub_semver\/VersionRange-class.html\">VersionRange<\/a>s.<\/li>\n<li>Its contents are disjoint and non-adjacent. In other words, for any two\nconstraints next to each other in the list, there's some version between\nthose constraints that they don't match.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;VersionRange&gt; ranges\n\n<\/code><\/pre>\n        ",
            "href": "package-pub_semver_pub_semver\/VersionUnion\/ranges.html",
            "isDeprecated": "0",
            "type": "dart:core.List<pub_semver.VersionRange>",
            "memberOf": "pub_semver.VersionUnion",
            "params": []
        }
    ]
}