{
    "name": "widgets.PerformanceOverlay",
    "extends": [
        "widgets.LeafRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "PerformanceOverlay",
            "type": "",
            "desc": "<p>Create a performance overlay that only displays specific statistics. The\nmask is created by shifting 1 by the index of the specific\n<a href=\"rendering\/PerformanceOverlayOption-class.html\">PerformanceOverlayOption<\/a> to enable.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PerformanceOverlay",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "optionsMask",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rasterizerThreshold",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "checkerboardRasterCacheImages",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "checkerboardOffscreenLayers",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/PerformanceOverlay\/PerformanceOverlay.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PerformanceOverlay({\n  Key key,\n  this.optionsMask = 0,\n  this.rasterizerThreshold = 0,\n  this.checkerboardRasterCacheImages = false,\n  this.checkerboardOffscreenLayers = false,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "PerformanceOverlay.allEnabled",
            "type": "",
            "desc": "<p>Create a performance overlay that displays all available statistics<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PerformanceOverlay",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rasterizerThreshold",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "checkerboardRasterCacheImages",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "checkerboardOffscreenLayers",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/PerformanceOverlay\/PerformanceOverlay.allEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PerformanceOverlay.allEnabled({\n  Key key,\n  this.rasterizerThreshold = 0,\n  this.checkerboardRasterCacheImages = false,\n  this.checkerboardOffscreenLayers = false,\n}) : optionsMask =\n      1 &lt;&lt; PerformanceOverlayOption.displayRasterizerStatistics.index |\n      1 &lt;&lt; PerformanceOverlayOption.visualizeRasterizerStatistics.index |\n      1 &lt;&lt; PerformanceOverlayOption.displayEngineStatistics.index |\n      1 &lt;&lt; PerformanceOverlayOption.visualizeEngineStatistics.index,\n    super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderPerformanceOverlay",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/LeafRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PerformanceOverlay",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PerformanceOverlay\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderPerformanceOverlay createRenderObject(BuildContext context) =&gt; RenderPerformanceOverlay(\n  optionsMask: optionsMask,\n  rasterizerThreshold: rasterizerThreshold,\n  checkerboardRasterCacheImages: checkerboardRasterCacheImages,\n  checkerboardOffscreenLayers: checkerboardOffscreenLayers,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "updateRenderObject",
            "type": "",
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/PerformanceOverlay\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/LeafRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PerformanceOverlay",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "rendering.RenderPerformanceOverlay",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PerformanceOverlay\/updateRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderPerformanceOverlay renderObject) {\n  renderObject\n    ..optionsMask = optionsMask\n    ..rasterizerThreshold = rasterizerThreshold;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "checkerboardOffscreenLayers",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the compositor should checkerboard layers that are rendered to offscreen\nbitmaps. This can be useful for debugging rendering performance.<\/p>\n<p>Render target switches are caused by using opacity layers (via a <a href=\"widgets\/FadeTransition-class.html\">FadeTransition<\/a> or\n<a href=\"widgets\/Opacity-class.html\">Opacity<\/a> widget), clips, shader mask layers, etc. Selecting a new render target\nand merging it with the rest of the scene has a performance cost. This can sometimes\nbe avoided by using equivalent widgets that do not require these layers (for example,\nreplacing an <a href=\"widgets\/Opacity-class.html\">Opacity<\/a> widget with an <a href=\"widgets\/Image-class.html\">widgets.Image<\/a> using a <a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>).<\/p>\n        ",
            "memberOf": "widgets.PerformanceOverlay",
            "isConstant": false,
            "href": "widgets\/PerformanceOverlay\/checkerboardOffscreenLayers.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardOffscreenLayers\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "checkerboardRasterCacheImages",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the raster cache should checkerboard cached entries.<\/p>\n<p>The compositor can sometimes decide to cache certain portions of the\nwidget hierarchy. Such portions typically don't change often from frame to\nframe and are expensive to render. This can speed up overall rendering. However,\nthere is certain upfront cost to constructing these cache entries. And, if\nthe cache entries are not used very often, this cost may not be worth the\nspeedup in rendering of subsequent frames. If the developer wants to be certain\nthat populating the raster cache is not causing stutters, this option can be\nset. Depending on the observations made, hints can be provided to the compositor\nthat aid it in making better decisions about caching.<\/p>\n        ",
            "memberOf": "widgets.PerformanceOverlay",
            "isConstant": false,
            "href": "widgets\/PerformanceOverlay\/checkerboardRasterCacheImages.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardRasterCacheImages\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "optionsMask",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The mask is created by shifting 1 by the index of the specific\n<a href=\"rendering\/PerformanceOverlayOption-class.html\">PerformanceOverlayOption<\/a> to enable.<\/p>\n        ",
            "memberOf": "widgets.PerformanceOverlay",
            "isConstant": false,
            "href": "widgets\/PerformanceOverlay\/optionsMask.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int optionsMask\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "rasterizerThreshold",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The rasterizer threshold is an integer specifying the number of frame\nintervals that the rasterizer must miss before it decides that the frame\nis suitable for capturing an SkPicture trace for further analysis.<\/p>\n<p>For example, if you want a trace of all pictures that could not be\nrendered by the rasterizer within the frame boundary (and hence caused\njank), specify 1. Specifying 2 will trace all pictures that took more\nmore than 2 frame intervals to render. Adjust this value to only capture\nthe particularly expensive pictures while skipping the others. Specifying\n0 disables all capture.<\/p>\n<p>Captured traces are placed on your device in the application documents\ndirectory in this form \"trace_&lt;collection_time&gt;.skp\". These can\nbe viewed in the Skia debugger.<\/p>\n<p>Notes:\nThe rasterizer only takes into account the time it took to render\nthe already constructed picture. This include the Skia calls (which is\nalso why an SkPicture trace is generated) but not any of the time spent in\ndart to construct that picture. To profile that part of your code, use\nthe instrumentation available in observatory.<\/p>\n<p>To decide what threshold interval to use, count the number of horizontal\nlines displayed in the performance overlay for the rasterizer (not the\nengine). That should give an idea of how often frames are skipped (and by\nhow many frame intervals).<\/p>\n        ",
            "memberOf": "widgets.PerformanceOverlay",
            "isConstant": false,
            "href": "widgets\/PerformanceOverlay\/rasterizerThreshold.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int rasterizerThreshold\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/PerformanceOverlay-class.html",
    "desc": "<p>Displays performance statistics.<\/p>\n<p>The overlay show two time series. The first shows how much time was required\non this thread to produce each frame. The second shows how much time was\nrequired on the GPU thread to produce each frame. Ideally, both these values\nwould be less than the total frame budget for the hardware on which the app\nis running. For example, if the hardware has a screen that updates at 60 Hz,\neach thread should ideally spend less than 16ms producing each frame. This\nideal condition is indicated by a green vertical line for each thread.\nOtherwise, the performance overlay shows a red vertical line.<\/p>\n<p>The simplest way to show the performance overlay is to set\n<a href=\"material\/MaterialApp\/showPerformanceOverlay.html\">MaterialApp.showPerformanceOverlay<\/a> or <a href=\"widgets\/WidgetsApp\/showPerformanceOverlay.html\">WidgetsApp.showPerformanceOverlay<\/a>\nto true.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "PerformanceOverlay"
}