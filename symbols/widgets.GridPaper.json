{
    "desc": "<p>A widget that draws a rectilinear grid of lines one pixel wide.<\/p>\n<p>Useful with a <a href=\"widgets\/Stack-class.html\">Stack<\/a> for visualizing your layout along a grid.<\/p>\n<p>The grid's origin (where the first primary horizontal line and the first\nprimary vertical line intersect) is at the top left of the widget.<\/p>\n<p>The grid is drawn over the <a href=\"widgets\/GridPaper\/child.html\">child<\/a> widget.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/GridPaper-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.GridPaper",
    "shortname": "GridPaper",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that draws a rectilinear grid of 1-pixel-wide lines.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const GridPaper({\n  Key key,\n  this.color = const Color(0x7FC3E8F3),\n  this.interval = 100.0,\n  this.divisions = 2,\n  this.subdivisions = 5,\n  this.child,\n}) : assert(divisions &gt; 0, 'The \"divisions\" property must be greater than zero. If there were no divisions, the grid paper would not paint anything.'),\n     assert(subdivisions &gt; 0, 'The \"subdivisions\" property must be greater than zero. If there were no subdivisions, the grid paper would not paint anything.'),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/GridPaper\/GridPaper.html",
            "isDeprecated": false,
            "type": "",
            "name": "GridPaper",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.GridPaper",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "color",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "divisions",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "interval",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "subdivisions",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/GridPaper\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return CustomPaint(\n    foregroundPainter: _GridPaperPainter(\n      color: color,\n      interval: interval,\n      divisions: divisions,\n      subdivisions: subdivisions,\n    ),\n    child: child,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/GridPaper\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.GridPaper",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GridPaper\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GridPaper",
            "params": []
        },
        {
            "desc": "<p>The color to draw the lines in the grid.<\/p>\n<p>Defaults to a light blue commonly seen on traditional grid paper.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GridPaper\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GridPaper",
            "params": []
        },
        {
            "desc": "<p>The number of major divisions within each primary grid cell.<\/p>\n<p>This is the number of major divisions per <a href=\"widgets\/GridPaper\/interval.html\">interval<\/a>, including the\nprimary grid's line.<\/p>\n<p>The lines after the first are half a logical pixel wide.<\/p>\n<p>If this is set to 2 (the default), then for each <a href=\"widgets\/GridPaper\/interval.html\">interval<\/a> there will be\na 1-pixel line on the left, a half-pixel line in the middle, and a 1-pixel\nline on the right (the latter being the 1-pixel line on the left of the\nnext <a href=\"widgets\/GridPaper\/interval.html\">interval<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int divisions\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GridPaper\/divisions.html",
            "name": "divisions",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GridPaper",
            "params": []
        },
        {
            "desc": "<p>The distance between the primary lines in the grid, in logical pixels.<\/p>\n<p>Each primary line is one logical pixel wide.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double interval\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GridPaper\/interval.html",
            "name": "interval",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GridPaper",
            "params": []
        },
        {
            "desc": "<p>The number of minor divisions within each major division, including the\nmajor division itself.<\/p>\n<p>If <a href=\"widgets\/GridPaper\/subdivisions.html\">subdivisions<\/a> is 5 (the default), it means that there will be four\nlines between each major (<a href=\"widgets\/GridPaper\/divisions.html\">divisions<\/a>) line.<\/p>\n<p>The subdivision lines after the first are a quarter of a logical pixel wide.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int subdivisions\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/GridPaper\/subdivisions.html",
            "name": "subdivisions",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.GridPaper",
            "params": []
        }
    ]
}