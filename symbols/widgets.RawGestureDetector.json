{
    "desc": "<p>A widget that detects gestures described by the given gesture\nfactories.<\/p>\n<p>For common gestures, use a <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a>.\n<a href=\"widgets\/RawGestureDetector-class.html\">RawGestureDetector<\/a> is useful primarily when developing your\nown gesture recognizers.<\/p>\n<p>Configuring the gesture recognizers requires a carefully constructed map, as\ndescribed in <a href=\"widgets\/RawGestureDetector\/gestures.html\">gestures<\/a> and as shown in the example below.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how to hook up a <a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a>. It assumes that\nthe code is being used inside a <a href=\"widgets\/State-class.html\">State<\/a> object with a <code>_last<\/code> field that is\nthen displayed as the child of the gesture detector.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">RawGestureDetector(\n  gestures: &lt;Type, GestureRecognizerFactory&gt;{\n    TapGestureRecognizer: GestureRecognizerFactoryWithHandlers&lt;TapGestureRecognizer&gt;(\n      () =&gt; TapGestureRecognizer(),\n      (TapGestureRecognizer instance) {\n        instance\n          ..onTapDown = (TapDownDetails details) { setState(() { _last = 'down'; }); }\n          ..onTapUp = (TapUpDetails details) { setState(() { _last = 'up'; }); }\n          ..onTap = () { setState(() { _last = 'tap'; }); }\n          ..onTapCancel = () { setState(() { _last = 'cancel'; }); };\n      },\n    ),\n  },\n  child: Container(width: 300.0, height: 300.0, color: Colors.yellow, child: Text(_last)),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, a less flexible but much simpler widget that does the same thing.<\/li>\n<li>\n<a href=\"widgets\/Listener-class.html\">Listener<\/a>, a widget that reports raw pointer events.<\/li>\n<li>\n<a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a>, the class that you extend to create a custom gesture recognizer.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/RawGestureDetector-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.RawGestureDetector",
    "shortname": "RawGestureDetector",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.RawGestureDetectorState"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that detects gestures.<\/p>\n<p>By default, gesture detectors contribute semantic information to the tree\nthat is used by assistive technology. This can be controlled using\n<code>excludeFromSemantics<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawGestureDetector({\n  Key key,\n  this.child,\n  this.gestures = const &lt;Type, GestureRecognizerFactory&gt;{},\n  this.behavior,\n  this.excludeFromSemantics = false,\n}) : assert(gestures != null),\n     assert(excludeFromSemantics != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/RawGestureDetector\/RawGestureDetector.html",
            "isDeprecated": false,
            "type": "",
            "name": "RawGestureDetector",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.RawGestureDetector",
            "params": [
                {
                    "name": "behavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.HitTestBehavior"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "excludeFromSemantics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "gestures",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Map<dart:core.Type<widgets.GestureRecognizerFactory<gestures.GestureRecognizer>>>"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/RawGestureDetector\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRawGestureDetectorState createState() =&gt; RawGestureDetectorState();<\/code><\/pre>\n    ",
            "href": "widgets\/RawGestureDetector\/createState.html",
            "isDeprecated": false,
            "type": "widgets.RawGestureDetectorState",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.RawGestureDetector",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>How this gesture detector should behave during hit testing.<\/p>\n<p>This defaults to <a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.deferToChild<\/a> if <a href=\"widgets\/RawGestureDetector\/child.html\">child<\/a> is not null and\n<a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.translucent<\/a> if child is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HitTestBehavior behavior\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawGestureDetector\/behavior.html",
            "name": "behavior",
            "isDeprecated": false,
            "type": "rendering.HitTestBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.RawGestureDetector",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawGestureDetector\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.RawGestureDetector",
            "params": []
        },
        {
            "desc": "<p>Whether to exclude these gestures from the semantics tree. For\nexample, the long-press gesture for showing a tooltip is\nexcluded because the tooltip itself is included in the semantics\ntree directly and so having a gesture to show it would result in\nduplication of information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool excludeFromSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawGestureDetector\/excludeFromSemantics.html",
            "name": "excludeFromSemantics",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.RawGestureDetector",
            "params": []
        },
        {
            "desc": "<p>The gestures that this widget will attempt to recognize.<\/p>\n<p>This should be a map from <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> subclasses to\n<a href=\"widgets\/GestureRecognizerFactory-class.html\">GestureRecognizerFactory<\/a> subclasses specialized with the same type.<\/p>\n<p>This value can be late-bound at layout time using\n<a href=\"widgets\/RawGestureDetectorState\/replaceGestureRecognizers.html\">RawGestureDetectorState.replaceGestureRecognizers<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;Type, GestureRecognizerFactory&gt; gestures\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/RawGestureDetector\/gestures.html",
            "name": "gestures",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.Type<widgets.GestureRecognizerFactory<gestures.GestureRecognizer>>>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.RawGestureDetector",
            "params": []
        }
    ]
}