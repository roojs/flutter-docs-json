{
    "desc": "<p>The border, labels, icons, and styles used to decorate a Material\nDesign text field.<\/p>\n<p>The <a href=\"material\/TextField-class.html\">TextField<\/a> and <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> classes use <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a> objects\nto describe their decoration. (In fact, this class is merely the\nconfiguration of an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, which does all the heavy lifting.)<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, which is a text input widget that uses an\n<a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a>.<\/li>\n<li>\n<a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, which is a widget that draws an <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a>\naround an input child widget.<\/li>\n<li>\n<a href=\"painting\/Decoration-class.html\">Decoration<\/a> and <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a>, for drawing borders and backgrounds\naround a child widget.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/InputDecoration-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.InputDecoration",
    "shortname": "InputDecoration",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a bundle of the border, labels, icons, and styles used to\ndecorate a Material Design text field.<\/p>\n<p>Unless specified by <a href=\"material\/ThemeData\/inputDecorationTheme.html\">ThemeData.inputDecorationTheme<\/a>,\n<a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> defaults <code>isDense<\/code> to true, and <code>filled<\/code> to false,\nand <code>maxLines<\/code> to 1. The default border is an instance\nof <a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>. If <code>border<\/code> is <a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a> then\nno border is drawn.<\/p>\n<p>The <code>enabled<\/code> argument must not be null.<\/p>\n<p>Only one of <code>prefix<\/code> and <code>prefixText<\/code> can be specified.<\/p>\n<p>Similarly, only one of <code>suffix<\/code> and <code>suffixText<\/code> can be specified.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const InputDecoration({\n  this.icon,\n  this.labelText,\n  this.labelStyle,\n  this.helperText,\n  this.helperStyle,\n  this.hintText,\n  this.hintStyle,\n  this.hintMaxLines,\n  this.errorText,\n  this.errorStyle,\n  this.errorMaxLines,\n  this.hasFloatingPlaceholder = true,\n  this.isDense,\n  this.contentPadding,\n  this.prefixIcon,\n  this.prefix,\n  this.prefixText,\n  this.prefixStyle,\n  this.suffixIcon,\n  this.suffix,\n  this.suffixText,\n  this.suffixStyle,\n  this.counter,\n  this.counterText,\n  this.counterStyle,\n  this.filled,\n  this.fillColor,\n  this.errorBorder,\n  this.focusedBorder,\n  this.focusedErrorBorder,\n  this.disabledBorder,\n  this.enabledBorder,\n  this.border,\n  this.enabled = true,\n  this.semanticCounterText,\n  this.alignLabelWithHint,\n}) : assert(enabled != null),\n     assert(!(prefix != null &amp;&amp; prefixText != null), 'Declaring both prefix and prefixText is not supported.'),\n     assert(!(suffix != null &amp;&amp; suffixText != null), 'Declaring both suffix and suffixText is not supported.'),\n     isCollapsed = false;<\/code><\/pre>\n    ",
            "href": "material\/InputDecoration\/InputDecoration.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.InputDecoration",
            "params": [
                {
                    "name": "alignLabelWithHint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "border",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "contentPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "counter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "counterStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "counterText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "disabledBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "enabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "enabledBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "errorBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "errorMaxLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "errorStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "errorText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "fillColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "filled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focusedBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "focusedErrorBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "hasFloatingPlaceholder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "helperStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "helperText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "hintMaxLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "hintStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "hintText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "icon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "isDense",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "labelStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "labelText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "prefixIcon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "prefixStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "prefixText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "semanticCounterText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "suffix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "suffixIcon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "suffixStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "suffixText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Used by widgets like <a href=\"material\/TextField-class.html\">TextField<\/a> and <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> to create a new\n<a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a> with default values taken from the <code>theme<\/code>.<\/p>\n<p>Only null valued properties from this <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a> are replaced\nby the corresponding values from <code>theme<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">InputDecoration applyDefaults(InputDecorationTheme theme) {\n  return copyWith(\n    labelStyle: labelStyle ?? theme.labelStyle,\n    helperStyle: helperStyle ?? theme.helperStyle,\n    hintStyle: hintStyle ?? theme.hintStyle,\n    errorStyle: errorStyle ?? theme.errorStyle,\n    errorMaxLines: errorMaxLines ?? theme.errorMaxLines,\n    hasFloatingPlaceholder: hasFloatingPlaceholder ?? theme.hasFloatingPlaceholder,\n    isDense: isDense ?? theme.isDense,\n    contentPadding: contentPadding ?? theme.contentPadding,\n    prefixStyle: prefixStyle ?? theme.prefixStyle,\n    suffixStyle: suffixStyle ?? theme.suffixStyle,\n    counterStyle: counterStyle ?? theme.counterStyle,\n    filled: filled ?? theme.filled,\n    fillColor: fillColor ?? theme.fillColor,\n    errorBorder: errorBorder ?? theme.errorBorder,\n    focusedBorder: focusedBorder ?? theme.focusedBorder,\n    focusedErrorBorder: focusedErrorBorder ?? theme.focusedErrorBorder,\n    disabledBorder: disabledBorder ?? theme.disabledBorder,\n    enabledBorder: enabledBorder ?? theme.enabledBorder,\n    border: border ?? theme.border,\n    alignLabelWithHint: alignLabelWithHint ?? theme.alignLabelWithHint,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/InputDecoration\/applyDefaults.html",
            "isDeprecated": "0",
            "type": "material.InputDecoration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecoration",
            "params": [
                {
                    "name": "theme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputDecorationTheme"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this input decoration with the given fields replaced\nby the new values.<\/p>\n<p>Always sets <a href=\"material\/InputDecoration\/isCollapsed.html\">isCollapsed<\/a> to false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">InputDecoration copyWith({\n  Widget icon,\n  String labelText,\n  TextStyle labelStyle,\n  String helperText,\n  TextStyle helperStyle,\n  String hintText,\n  TextStyle hintStyle,\n  int hintMaxLines,\n  String errorText,\n  TextStyle errorStyle,\n  int errorMaxLines,\n  bool hasFloatingPlaceholder,\n  bool isDense,\n  EdgeInsetsGeometry contentPadding,\n  Widget prefixIcon,\n  Widget prefix,\n  String prefixText,\n  TextStyle prefixStyle,\n  Widget suffixIcon,\n  Widget suffix,\n  String suffixText,\n  TextStyle suffixStyle,\n  Widget counter,\n  String counterText,\n  TextStyle counterStyle,\n  bool filled,\n  Color fillColor,\n  InputBorder errorBorder,\n  InputBorder focusedBorder,\n  InputBorder focusedErrorBorder,\n  InputBorder disabledBorder,\n  InputBorder enabledBorder,\n  InputBorder border,\n  bool enabled,\n  String semanticCounterText,\n  bool alignLabelWithHint,\n}) {\n  return InputDecoration(\n    icon: icon ?? this.icon,\n    labelText: labelText ?? this.labelText,\n    labelStyle: labelStyle ?? this.labelStyle,\n    helperText: helperText ?? this.helperText,\n    helperStyle: helperStyle ?? this.helperStyle,\n    hintText: hintText ?? this.hintText,\n    hintStyle: hintStyle ?? this.hintStyle,\n    hintMaxLines: hintMaxLines ?? this.hintMaxLines,\n    errorText: errorText ?? this.errorText,\n    errorStyle: errorStyle ?? this.errorStyle,\n    errorMaxLines: errorMaxLines ?? this.errorMaxLines,\n    hasFloatingPlaceholder: hasFloatingPlaceholder ?? this.hasFloatingPlaceholder,\n    isDense: isDense ?? this.isDense,\n    contentPadding: contentPadding ?? this.contentPadding,\n    prefixIcon: prefixIcon ?? this.prefixIcon,\n    prefix: prefix ?? this.prefix,\n    prefixText: prefixText ?? this.prefixText,\n    prefixStyle: prefixStyle ?? this.prefixStyle,\n    suffixIcon: suffixIcon ?? this.suffixIcon,\n    suffix: suffix ?? this.suffix,\n    suffixText: suffixText ?? this.suffixText,\n    suffixStyle: suffixStyle ?? this.suffixStyle,\n    counter: counter ?? this.counter,\n    counterText: counterText ?? this.counterText,\n    counterStyle: counterStyle ?? this.counterStyle,\n    filled: filled ?? this.filled,\n    fillColor: fillColor ?? this.fillColor,\n    errorBorder: errorBorder ?? this.errorBorder,\n    focusedBorder: focusedBorder ?? this.focusedBorder,\n    focusedErrorBorder: focusedErrorBorder ?? this.focusedErrorBorder,\n    disabledBorder: disabledBorder ?? this.disabledBorder,\n    enabledBorder: enabledBorder ?? this.enabledBorder,\n    border: border ?? this.border,\n    enabled: enabled ?? this.enabled,\n    semanticCounterText: semanticCounterText ?? this.semanticCounterText,\n    alignLabelWithHint: alignLabelWithHint ?? this.alignLabelWithHint,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/InputDecoration\/copyWith.html",
            "isDeprecated": "0",
            "type": "material.InputDecoration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecoration",
            "params": [
                {
                    "name": "alignLabelWithHint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "border",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputBorder"
                },
                {
                    "name": "contentPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "counter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "counterStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "counterText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "disabledBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputBorder"
                },
                {
                    "name": "enabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "enabledBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputBorder"
                },
                {
                    "name": "errorBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputBorder"
                },
                {
                    "name": "errorMaxLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "errorStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "errorText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "fillColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "filled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focusedBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputBorder"
                },
                {
                    "name": "focusedErrorBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.InputBorder"
                },
                {
                    "name": "hasFloatingPlaceholder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "helperStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "helperText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "hintMaxLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "hintStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "hintText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "icon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "isDense",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "labelStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "labelText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "prefixIcon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "prefixStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "prefixText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "semanticCounterText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "suffix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "suffixIcon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "suffixStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "suffixText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; description = &lt;String&gt;[];\n  if (icon != null)\n    description.add('icon: $icon');\n  if (labelText != null)\n    description.add('labelText: \"$labelText\"');\n  if (helperText != null)\n    description.add('helperText: \"$helperText\"');\n  if (hintText != null)\n    description.add('hintText: \"$hintText\"');\n  if (hintMaxLines != null)\n    description.add('hintMaxLines: \"$hintMaxLines\"');\n  if (errorText != null)\n    description.add('errorText: \"$errorText\"');\n  if (errorStyle != null)\n    description.add('errorStyle: \"$errorStyle\"');\n  if (errorMaxLines != null)\n    description.add('errorMaxLines: \"$errorMaxLines\"');\n  if (hasFloatingPlaceholder == false)\n    description.add('hasFloatingPlaceholder: false');\n  if (isDense ?? false)\n    description.add('isDense: $isDense');\n  if (contentPadding != null)\n    description.add('contentPadding: $contentPadding');\n  if (isCollapsed)\n    description.add('isCollapsed: $isCollapsed');\n  if (prefixIcon != null)\n    description.add('prefixIcon: $prefixIcon');\n  if (prefix != null)\n    description.add('prefix: $prefix');\n  if (prefixText != null)\n    description.add('prefixText: $prefixText');\n  if (prefixStyle != null)\n    description.add('prefixStyle: $prefixStyle');\n  if (suffixIcon != null)\n    description.add('suffixIcon: $suffixIcon');\n  if (suffix != null)\n    description.add('suffix: $suffix');\n  if (suffixText != null)\n    description.add('suffixText: $suffixText');\n  if (suffixStyle != null)\n    description.add('suffixStyle: $suffixStyle');\n  if (counter != null)\n    description.add('counter: $counter');\n  if (counterText != null)\n    description.add('counterText: $counterText');\n  if (counterStyle != null)\n    description.add('counterStyle: $counterStyle');\n  if (filled == true) \/\/ filled == null same as filled == false\n    description.add('filled: true');\n  if (fillColor != null)\n    description.add('fillColor: $fillColor');\n  if (errorBorder != null)\n    description.add('errorBorder: $errorBorder');\n  if (focusedBorder != null)\n    description.add('focusedBorder: $focusedBorder');\n  if (focusedErrorBorder != null)\n    description.add('focusedErrorBorder: $focusedErrorBorder');\n  if (disabledBorder != null)\n    description.add('disabledBorder: $disabledBorder');\n  if (enabledBorder != null)\n    description.add('enabledBorder: $enabledBorder');\n  if (border != null)\n    description.add('border: $border');\n  if (!enabled)\n    description.add('enabled: false');\n  if (semanticCounterText != null)\n    description.add('semanticCounterText: $semanticCounterText');\n  if (alignLabelWithHint != null)\n    description.add('alignLabelWithHint: $alignLabelWithHint');\n  return 'InputDecoration(${description.join(', ')})';\n}<\/code><\/pre>\n    ",
            "href": "material\/InputDecoration\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecoration",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Typically set to true when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> contains a multi-line\n<a href=\"material\/TextField-class.html\">TextField<\/a> (<a href=\"material\/TextField\/maxLines.html\">TextField.maxLines<\/a> is null or &gt; 1) to override the default\nbehavior of aligning the label with the center of the <a href=\"material\/TextField-class.html\">TextField<\/a>.<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool alignLabelWithHint\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/alignLabelWithHint.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The shape of the border to draw around the decoration's container.<\/p>\n<p>This border's <a href=\"material\/InputBorder\/borderSide.html\">InputBorder.borderSide<\/a>, i.e. the border's color and width,\nwill be overridden to reflect the input decorator's state. Only the\nborder's shape is used. If custom  <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> values are desired for\na given state, all four borders \u2013 <a href=\"material\/InputDecoration\/errorBorder.html\">errorBorder<\/a>, <a href=\"material\/InputDecoration\/focusedBorder.html\">focusedBorder<\/a>,\n<a href=\"material\/InputDecoration\/enabledBorder.html\">enabledBorder<\/a>, <a href=\"material\/InputDecoration\/disabledBorder.html\">disabledBorder<\/a> \u2013 must be set.<\/p>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">InputDecoration.icon<\/a> and above the widgets that contain\n<a href=\"material\/InputDecoration\/helperText.html\">InputDecoration.helperText<\/a>, <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, and\n<a href=\"material\/InputDecoration\/counterText.html\">InputDecoration.counterText<\/a>.<\/p>\n<p>The border's bounds, i.e. the value of <code>border.getOuterPath()<\/code>, define\nthe area to be filled.<\/p>\n<p>This property is only used when the appropriate one of <a href=\"material\/InputDecoration\/errorBorder.html\">errorBorder<\/a>,\n<a href=\"material\/InputDecoration\/focusedBorder.html\">focusedBorder<\/a>, <a href=\"material\/InputDecoration\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, <a href=\"material\/InputDecoration\/disabledBorder.html\">disabledBorder<\/a>, or <a href=\"material\/InputDecoration\/enabledBorder.html\">enabledBorder<\/a>\nis not specified. This border's <a href=\"material\/InputBorder\/borderSide.html\">InputBorder.borderSide<\/a> property is\nconfigured by the InputDecorator, depending on the values of\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a>,\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>Typically one of <a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a> or <a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>.\nIf null, InputDecorator's default is <code>const UnderlineInputBorder()<\/code>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, which draws a horizontal line at the\nbottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder border\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/border.html",
            "isDeprecated": "0",
            "type": "material.InputBorder",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The padding for the input decoration's container.<\/p>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">decoration.icon<\/a> and above the widgets that contain <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>By default the <code>contentPadding<\/code> reflects <a href=\"material\/InputDecoration\/isDense.html\">isDense<\/a> and the type of the\n<a href=\"material\/InputDecoration\/border.html\">border<\/a>. If <a href=\"material\/InputDecoration\/isCollapsed.html\">isCollapsed<\/a> is true then <code>contentPadding<\/code> is\n<a href=\"painting\/EdgeInsets\/zero-constant.html\">EdgeInsets.zero<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry contentPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/contentPadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Optional custom counter widget to go in the place otherwise occupied by\n<a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.  If this property is non null, then <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a> is\nignored.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget counter\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/counter.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>If null, defaults to the <a href=\"material\/InputDecoration\/helperStyle.html\">helperStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle counterStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/counterStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Optional text to place below the line as a character count.<\/p>\n<p>Rendered using <a href=\"material\/InputDecoration\/counterStyle.html\">counterStyle<\/a>. Uses <a href=\"material\/InputDecoration\/helperStyle.html\">helperStyle<\/a> if <a href=\"material\/InputDecoration\/counterStyle.html\">counterStyle<\/a> is\nnull.<\/p>\n<p>The semantic label can be replaced by providing a <a href=\"material\/InputDecoration\/semanticCounterText.html\">semanticCounterText<\/a>.<\/p>\n<p>If null or an empty string and <a href=\"material\/InputDecoration\/counter.html\">counter<\/a> isn't specified, then nothing\nwill appear in the counter's location.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String counterText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/counterText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is disabled and is not\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a>, which is false if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is disabled.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder disabledBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/disabledBorder.html",
            "isDeprecated": "0",
            "type": "material.InputBorder",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>If false <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a> are not displayed,\nand the opacity of the remaining visual elements is reduced.<\/p>\n<p>This property is true by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/enabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is enabled and is not\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a>, which is false if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is disabled.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder enabledBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/enabledBorder.html",
            "isDeprecated": "0",
            "type": "material.InputBorder",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> does not have the focus and\nis showing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>, which is true if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s child\nhas the focus.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder errorBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/errorBorder.html",
            "isDeprecated": "0",
            "type": "material.InputBorder",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The maximum number of lines the <a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a> can occupy.<\/p>\n<p>Defaults to null, which means that the <a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a> will be limited\nto a single line with <a href=\"rendering\/TextOverflow-class.html\">TextOverflow.ellipsis<\/a>.<\/p>\n<p>This value is passed along to the <a href=\"widgets\/Text\/maxLines.html\">Text.maxLines<\/a> attribute\nof the <a href=\"widgets\/Text-class.html\">Text<\/a> widget used to display the error.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int errorMaxLines\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/errorMaxLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>.<\/p>\n<p>If null, defaults of a value derived from the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the\ninput field and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle errorStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/errorStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Text that appears below the input <code>child<\/code> and the border.<\/p>\n<p>If non-null, the border's color animates to red and the <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a> is\nnot shown.<\/p>\n<p>In a <a href=\"material\/TextFormField-class.html\">TextFormField<\/a>, this is overridden by the value returned from\n<a href=\"widgets\/FormField\/validator.html\">TextFormField.validator<\/a>, if that is not null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String errorText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/errorText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The color to fill the decoration's container with, if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is true.<\/p>\n<p>By default the fillColor is based on the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">decoration.icon<\/a> and above the widgets that contain <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color fillColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/fillColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>If true the decoration's container is filled with <a href=\"material\/InputDecoration\/fillColor.html\">fillColor<\/a>.<\/p>\n<p>Typically this field set to true if <a href=\"material\/InputDecoration\/border.html\">border<\/a> is an\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>.<\/p>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">decoration.icon<\/a> and above the widgets that contain <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>This property is false by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool filled\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/filled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> has the focus and is not\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>, which is true if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s child\nhas the focus.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder focusedBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/focusedBorder.html",
            "isDeprecated": "0",
            "type": "material.InputBorder",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> has the focus and is\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>, which is true if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s child\nhas the focus.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder focusedErrorBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/focusedErrorBorder.html",
            "isDeprecated": "0",
            "type": "material.InputBorder",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Whether the label floats on focus.<\/p>\n<p>If this is false, the placeholder disappears when the input has focus or\ninputted text.\nIf this is true, the placeholder will rise to the top of the input when\nthe input has focus or inputted text.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool hasFloatingPlaceholder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/hasFloatingPlaceholder.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/InputDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/InputDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/InputDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/InputDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/InputDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/InputDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  \/\/ Split into several hashValues calls because the hashValues function is\n  \/\/ limited to 20 parameters.\n  return hashValues(\n    icon,\n    labelText,\n    labelStyle,\n    helperText,\n    helperStyle,\n    hintText,\n    hintStyle,\n    hintMaxLines,\n    errorText,\n    errorStyle,\n    errorMaxLines,\n    hasFloatingPlaceholder,\n    isDense,\n    contentPadding,\n    isCollapsed,\n    filled,\n    fillColor,\n    border,\n    enabled,\n    hashValues(\n      prefixIcon,\n      prefix,\n      prefixText,\n      prefixStyle,\n      suffixIcon,\n      suffix,\n      suffixText,\n      suffixStyle,\n      counter,\n      counterText,\n      counterStyle,\n      filled,\n      fillColor,\n      errorBorder,\n      focusedBorder,\n      focusedErrorBorder,\n      disabledBorder,\n      enabledBorder,\n      border,\n      hashValues(\n        enabled,\n        semanticCounterText,\n        alignLabelWithHint,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle helperStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/helperStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Text that provides context about the input <code>child<\/code>'s value, such as how\nthe value will be used.<\/p>\n<p>If non-null, the text is displayed below the input <code>child<\/code>, in the same\nlocation as <a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>. If a non-null <a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a> value is specified then\nthe helper text is not shown.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String helperText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/helperText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The maximum number of lines the <a href=\"material\/InputDecoration\/hintText.html\">hintText<\/a> can occupy.<\/p>\n<p>Defaults to the value of <a href=\"material\/TextField\/maxLines.html\">TextField.maxLines<\/a> attribute.<\/p>\n<p>This value is passed along to the <a href=\"widgets\/Text\/maxLines.html\">Text.maxLines<\/a> attribute\nof the <a href=\"widgets\/Text-class.html\">Text<\/a> widget used to display the hint text. <a href=\"rendering\/TextOverflow-class.html\">TextOverflow.ellipsis<\/a> is\nused to handle the overflow when it is limited to single line.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int hintMaxLines\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/hintMaxLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/hintText.html\">hintText<\/a>.<\/p>\n<p>Also used for the <a href=\"material\/InputDecoration\/labelText.html\">labelText<\/a> when the <a href=\"material\/InputDecoration\/labelText.html\">labelText<\/a> is displayed on\ntop of the input field (i.e., at the same location on the screen where\ntext may be entered in the input <code>child<\/code>).<\/p>\n<p>If null, defaults to a value derived from the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the\ninput field and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle hintStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/hintStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Text that suggests what sort of input the field accepts.<\/p>\n<p>Displayed on top of the input <code>child<\/code> (i.e., at the same location on the\nscreen where text may be entered in the input <code>child<\/code>) when the input\n<a href=\"package-matcher_matcher\/isEmpty-constant.html\">isEmpty<\/a> and either (a) <a href=\"material\/InputDecoration\/labelText.html\">labelText<\/a> is null or (b) the input has the focus.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String hintText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/hintText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>An icon to show before the input field and outside of the decoration's\ncontainer.<\/p>\n<p>The size and color of the icon is configured automatically using an\n<a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> and therefore does not need to be explicitly given in the\nicon widget.<\/p>\n<p>The trailing edge of the icon is padded by 16dps.<\/p>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">decoration.icon<\/a> and above the widgets that contain <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>See <a href=\"widgets\/Icon-class.html\">Icon<\/a>, <a href=\"widgets\/ImageIcon-class.html\">ImageIcon<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget icon\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/icon.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Whether the decoration is the same size as the input field.<\/p>\n<p>A collapsed decoration cannot have <a href=\"material\/InputDecoration\/labelText.html\">labelText<\/a>, <a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, an <a href=\"material\/InputDecoration\/icon.html\">icon<\/a>.<\/p>\n<p>To create a collapsed input decoration, use <a href=\"material\/InputDecoration\/InputDecoration.collapsed.html\">InputDecoration..collapsed<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isCollapsed\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/isCollapsed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Whether the input <code>child<\/code> is part of a dense form (i.e., uses less vertical\nspace).<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDense\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/isDense.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/labelText.html\">labelText<\/a> when the label is above (i.e.,\nvertically adjacent to) the input field.<\/p>\n<p>When the <a href=\"material\/InputDecoration\/labelText.html\">labelText<\/a> is on top of the input field, the text uses the\n<a href=\"material\/InputDecoration\/hintStyle.html\">hintStyle<\/a> instead.<\/p>\n<p>If null, defaults to a value derived from the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the\ninput field and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/labelStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Text that describes the input field.<\/p>\n<p>When the input field is empty and unfocused, the label is displayed on\ntop of the input field (i.e., at the same location on the screen where\ntext may be entered in the input field). When the input field receives\nfocus (or if the field is non-empty), the label moves above (i.e.,\nvertically adjacent to) the input field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String labelText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/labelText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Optional widget to place on the line before the input.<\/p>\n<p>This can be used, for example, to add some padding to text that would\notherwise be specified using <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a>, or to add a custom widget in\nfront of the input. The widget's baseline is lined up with the input\nbaseline.<\/p>\n<p>Only one of <a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a> and <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a> can be specified.<\/p>\n<p>The <a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a> appears after the <a href=\"material\/InputDecoration\/prefixIcon.html\">prefixIcon<\/a>, if both are specified.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a>, the equivalent but on the trailing edge.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget prefix\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/prefix.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>An icon that appears before the <a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a> or <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a> and before\nthe editable part of the text field, within the decoration's container.<\/p>\n<p>The size and color of the prefix icon is configured automatically using an\n<a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> and therefore does not need to be explicitly given in the\nicon widget.<\/p>\n<p>The prefix icon is constrained with a minimum size of 48px by 48px, but\ncan be expanded beyond that. Anything larger than 24px will require\nadditional padding to ensure it matches the material spec of 12px padding\nbetween the left edge of the input and leading edge of the prefix icon.\nThe following snippet shows how to pad the leading edge of the prefix\nicon:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">prefixIcon: Padding(\n  padding: const EdgeInsetsDirectional.only(start: 12.0),\n  child: myIcon, \/\/ myIcon is a 48px-wide widget.\n)\n<\/code><\/pre>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">decoration.icon<\/a> and above the widgets that contain <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Icon-class.html\">Icon<\/a> and <a href=\"widgets\/ImageIcon-class.html\">ImageIcon<\/a>, which are typically used to show icons.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a> and <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a>, which are other ways to show content\nbefore the text field (but after the icon).<\/li>\n<li>\n<a href=\"material\/InputDecoration\/suffixIcon.html\">suffixIcon<\/a>, which is the same but on the trailing edge.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget prefixIcon\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/prefixIcon.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a>.<\/p>\n<p>If null, defaults to the <a href=\"material\/InputDecoration\/hintStyle.html\">hintStyle<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/suffixStyle.html\">suffixStyle<\/a>, the equivalent but on the trailing edge.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle prefixStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/prefixStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Optional text prefix to place on the line before the input.<\/p>\n<p>Uses the <a href=\"material\/InputDecoration\/prefixStyle.html\">prefixStyle<\/a>. Uses <a href=\"material\/InputDecoration\/hintStyle.html\">hintStyle<\/a> if <a href=\"material\/InputDecoration\/prefixStyle.html\">prefixStyle<\/a> isn't specified.\nThe prefix text is not returned as part of the user's input.<\/p>\n<p>If a more elaborate prefix is required, consider using <a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a> instead.\nOnly one of <a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a> and <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a> can be specified.<\/p>\n<p>The <a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a> appears after the <a href=\"material\/InputDecoration\/prefixIcon.html\">prefixIcon<\/a>, if both are specified.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a>, the equivalent but on the trailing edge.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String prefixText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/prefixText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>A semantic label for the <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>Defaults to null.<\/p>\n<p>If provided, this replaces the semantic label of the <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticCounterText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/semanticCounterText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Optional widget to place on the line after the input.<\/p>\n<p>This can be used, for example, to add some padding to the text that would\notherwise be specified using <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a>, or to add a custom widget after\nthe input. The widget's baseline is lined up with the input baseline.<\/p>\n<p>Only one of <a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a> and <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a> can be specified.<\/p>\n<p>The <a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a> appears before the <a href=\"material\/InputDecoration\/suffixIcon.html\">suffixIcon<\/a>, if both are specified.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/prefix.html\">prefix<\/a>, the equivalent but on the leading edge.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget suffix\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/suffix.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>An icon that appears after the editable part of the text field and\nafter the <a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a> or <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a>, within the decoration's container.<\/p>\n<p>The size and color of the suffix icon is configured automatically using an\n<a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> and therefore does not need to be explicitly given in the\nicon widget.<\/p>\n<p>The suffix icon is constrained with a minimum size of 48px by 48px, but\ncan be expanded beyond that. Anything larger than 24px will require\nadditional padding to ensure it matches the material spec of 12px padding\nbetween the right edge of the input and trailing edge of the prefix icon.\nThe following snippet shows how to pad the trailing edge of the suffix\nicon:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">suffixIcon: Padding(\n  padding: const EdgeInsetsDirectional.only(end: 12.0),\n  child: myIcon, \/\/ myIcon is a 48px-wide widget.\n)\n<\/code><\/pre>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecoration\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecoration\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">decoration.icon<\/a> and above the widgets that contain <a href=\"material\/InputDecoration\/helperText.html\">helperText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">errorText<\/a>, and <a href=\"material\/InputDecoration\/counterText.html\">counterText<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Icon-class.html\">Icon<\/a> and <a href=\"widgets\/ImageIcon-class.html\">ImageIcon<\/a>, which are typically used to show icons.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a> and <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a>, which are other ways to show content\nafter the text field (but before the icon).<\/li>\n<li>\n<a href=\"material\/InputDecoration\/prefixIcon.html\">prefixIcon<\/a>, which is the same but on the leading edge.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget suffixIcon\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/suffixIcon.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a>.<\/p>\n<p>If null, defaults to the <a href=\"material\/InputDecoration\/hintStyle.html\">hintStyle<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/prefixStyle.html\">prefixStyle<\/a>, the equivalent but on the leading edge.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle suffixStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/suffixStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.InputDecoration",
            "params": []
        },
        {
            "desc": "<p>Optional text suffix to place on the line after the input.<\/p>\n<p>Uses the <a href=\"material\/InputDecoration\/suffixStyle.html\">suffixStyle<\/a>. Uses <a href=\"material\/InputDecoration\/hintStyle.html\">hintStyle<\/a> if <a href=\"material\/InputDecoration\/suffixStyle.html\">suffixStyle<\/a> isn't specified.\nThe suffix text is not returned as part of the user's input.<\/p>\n<p>If a more elaborate suffix is required, consider using <a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a> instead.\nOnly one of <a href=\"material\/InputDecoration\/suffix.html\">suffix<\/a> and <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a> can be specified.<\/p>\n<p>The <a href=\"material\/InputDecoration\/suffixText.html\">suffixText<\/a> appears before the <a href=\"material\/InputDecoration\/suffixIcon.html\">suffixIcon<\/a>, if both are specified.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/InputDecoration\/prefixText.html\">prefixText<\/a>, the equivalent but on the leading edge.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String suffixText\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecoration\/suffixText.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.InputDecoration",
            "params": []
        }
    ]
}