{
    "desc": "<p>Displays the days of a given month and allows choosing a day.<\/p>\n<p>The days are arranged in a rectangular grid with one column for each day of\nthe week.<\/p>\n<p>The day picker widget is rarely used directly. Instead, consider using\n<a href=\"material\/showDatePicker.html\">showDatePicker<\/a>, which creates a date picker dialog.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/showDatePicker.html\">showDatePicker<\/a>, which shows a dialog that contains a material design\ndate picker.<\/li>\n<li>\n<a href=\"material\/showTimePicker.html\">showTimePicker<\/a>, which shows a dialog that contains a material design\ntime picker.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/DayPicker-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.DayPicker",
    "shortname": "DayPicker",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the user picks a day.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;DateTime&gt; onChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/onChanged.html",
            "isDeprecated": false,
            "type": "foundation.ValueChanged<dart:core.DateTime>",
            "name": "onChanged",
            "memberOf": "material.DayPicker",
            "params": []
        },
        {
            "desc": "<p>Optional user supplied predicate function to customize selectable days.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SelectableDayPredicate selectableDayPredicate\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/selectableDayPredicate.html",
            "isDeprecated": false,
            "type": "material.SelectableDayPredicate",
            "name": "selectableDayPredicate",
            "memberOf": "material.DayPicker",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a day picker.<\/p>\n<p>Rarely used directly. Instead, typically used as part of a <a href=\"material\/MonthPicker-class.html\">MonthPicker<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DayPicker({\n  Key key,\n  @required this.selectedDate,\n  @required this.currentDate,\n  @required this.onChanged,\n  @required this.firstDate,\n  @required this.lastDate,\n  @required this.displayedMonth,\n  this.selectableDayPredicate,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(selectedDate != null),\n     assert(currentDate != null),\n     assert(onChanged != null),\n     assert(displayedMonth != null),\n     assert(dragStartBehavior != null),\n     assert(!firstDate.isAfter(lastDate)),\n     assert(selectedDate.isAfter(firstDate) || selectedDate.isAtSameMomentAs(firstDate)),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/DayPicker\/DayPicker.html",
            "isDeprecated": false,
            "type": "",
            "name": "DayPicker",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.DayPicker",
            "params": [
                {
                    "name": "currentDate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.DateTime"
                },
                {
                    "name": "displayedMonth",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.DateTime"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "firstDate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.DateTime"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "lastDate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.DateTime"
                },
                {
                    "name": "onChanged",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.DateTime>"
                },
                {
                    "name": "selectableDayPredicate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SelectableDayPredicate"
                },
                {
                    "name": "selectedDate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.DateTime"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/DayPicker\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final ThemeData themeData = Theme.of(context);\n  final MaterialLocalizations localizations = MaterialLocalizations.of(context);\n  final int year = displayedMonth.year;\n  final int month = displayedMonth.month;\n  final int daysInMonth = getDaysInMonth(year, month);\n  final int firstDayOffset = _computeFirstDayOffset(year, month, localizations);\n  final List&lt;Widget&gt; labels = &lt;Widget&gt;[];\n  labels.addAll(_getDayHeaders(themeData.textTheme.caption, localizations));\n  for (int i = 0; true; i += 1) {\n    \/\/ 1-based day of month, e.g. 1-31 for January, and 1-29 for February on\n    \/\/ a leap year.\n    final int day = i - firstDayOffset + 1;\n    if (day &gt; daysInMonth)\n      break;\n    if (day &lt; 1) {\n      labels.add(Container());\n    } else {\n      final DateTime dayToBuild = DateTime(year, month, day);\n      final bool disabled = dayToBuild.isAfter(lastDate)\n          || dayToBuild.isBefore(firstDate)\n          || (selectableDayPredicate != null &amp;&amp; !selectableDayPredicate(dayToBuild));\n\n      BoxDecoration decoration;\n      TextStyle itemStyle = themeData.textTheme.body1;\n\n      final bool isSelectedDay = selectedDate.year == year &amp;&amp; selectedDate.month == month &amp;&amp; selectedDate.day == day;\n      if (isSelectedDay) {\n        \/\/ The selected day gets a circle background highlight, and a contrasting text color.\n        itemStyle = themeData.accentTextTheme.body2;\n        decoration = BoxDecoration(\n          color: themeData.accentColor,\n          shape: BoxShape.circle,\n        );\n      } else if (disabled) {\n        itemStyle = themeData.textTheme.body1.copyWith(color: themeData.disabledColor);\n      } else if (currentDate.year == year &amp;&amp; currentDate.month == month &amp;&amp; currentDate.day == day) {\n        \/\/ The current day gets a different text color.\n        itemStyle = themeData.textTheme.body2.copyWith(color: themeData.accentColor);\n      }\n\n      Widget dayWidget = Container(\n        decoration: decoration,\n        child: Center(\n          child: Semantics(\n            \/\/ We want the day of month to be spoken first irrespective of the\n            \/\/ locale-specific preferences or TextDirection. This is because\n            \/\/ an accessibility user is more likely to be interested in the\n            \/\/ day of month before the rest of the date, as they are looking\n            \/\/ for the day of month. To do that we prepend day of month to the\n            \/\/ formatted full date.\n            label: '${localizations.formatDecimal(day)}, ${localizations.formatFullDate(dayToBuild)}',\n            selected: isSelectedDay,\n            child: ExcludeSemantics(\n              child: Text(localizations.formatDecimal(day), style: itemStyle),\n            ),\n          ),\n        ),\n      );\n\n      if (!disabled) {\n        dayWidget = GestureDetector(\n          behavior: HitTestBehavior.opaque,\n          onTap: () {\n            onChanged(dayToBuild);\n          },\n          child: dayWidget,\n          dragStartBehavior: dragStartBehavior,\n        );\n      }\n\n      labels.add(dayWidget);\n    }\n  }\n\n  return Padding(\n    padding: const EdgeInsets.symmetric(horizontal: 8.0),\n    child: Column(\n      children: &lt;Widget&gt;[\n        Container(\n          height: _kDayPickerRowHeight,\n          child: Center(\n            child: ExcludeSemantics(\n              child: Text(\n                localizations.formatMonthYear(displayedMonth),\n                style: themeData.textTheme.subhead,\n              ),\n            ),\n          ),\n        ),\n        Flexible(\n          child: GridView.custom(\n            gridDelegate: _kDayPickerGridDelegate,\n            childrenDelegate: SliverChildListDelegate(labels, addRepaintBoundaries: false),\n          ),\n        ),\n      ],\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/DayPicker\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.DayPicker",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Returns the number of days in a month, according to the proleptic\nGregorian calendar.<\/p>\n<p>This applies the leap year logic introduced by the Gregorian reforms of<\/p>\n<ol start=\"1582\"><li>It will not give valid results for dates prior to that time.<\/li><\/ol>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int getDaysInMonth(int year, int month) {\n  if (month == DateTime.february) {\n    final bool isLeapYear = (year % 4 == 0) &amp;&amp; (year % 100 != 0) || (year % 400 == 0);\n    if (isLeapYear)\n      return 29;\n    return 28;\n  }\n  return _daysInMonth[month - 1];\n}<\/code><\/pre>\n    ",
            "href": "material\/DayPicker\/getDaysInMonth.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "getDaysInMonth",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.DayPicker",
            "params": [
                {
                    "name": "month",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "year",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The current date at the time the picker is displayed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime currentDate\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/currentDate.html",
            "name": "currentDate",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DayPicker",
            "params": []
        },
        {
            "desc": "<p>The month whose days are displayed by this picker.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime displayedMonth\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/displayedMonth.html",
            "name": "displayedMonth",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DayPicker",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, the drag gesture used to scroll a\ndate picker wheel will begin upon the detection of a drag gesture. If set\nto <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first\ndetected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/DayPicker\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DayPicker",
            "params": []
        },
        {
            "desc": "<p>The earliest date the user is permitted to pick.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime firstDate\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/firstDate.html",
            "name": "firstDate",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DayPicker",
            "params": []
        },
        {
            "desc": "<p>The latest date the user is permitted to pick.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime lastDate\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/lastDate.html",
            "name": "lastDate",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DayPicker",
            "params": []
        },
        {
            "desc": "<p>The currently selected date.<\/p>\n<p>This date is highlighted in the picker.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime selectedDate\n\n<\/code><\/pre>\n        ",
            "href": "material\/DayPicker\/selectedDate.html",
            "name": "selectedDate",
            "isDeprecated": false,
            "type": "dart:core.DateTime",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.DayPicker",
            "params": []
        }
    ]
}