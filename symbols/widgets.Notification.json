{
    "desc": "<p>A notification that can bubble up the widget tree.<\/p>\n<p>You can determine the type of a notification using the <code>is<\/code> operator to\ncheck the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> of the notification.<\/p>\n<p>To listen for notifications in a subtree, use a <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>.<\/p>\n<p>To send a notification, call <a href=\"widgets\/Notification\/dispatch.html\">dispatch<\/a> on the notification you wish to\nsend. The notification will be delivered to any <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>\nwidgets with the appropriate type parameters that are ancestors of the given\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Notification-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Notification",
    "shortname": "Notification",
    "extends": [],
    "realImplementors": [
        "widgets.KeepAliveNotification",
        "widgets.LayoutChangedNotification",
        "widgets.OverscrollIndicatorNotification",
        "widgets.OverscrollNotification",
        "widgets.ScrollEndNotification",
        "widgets.ScrollStartNotification",
        "widgets.ScrollUpdateNotification",
        "widgets.SizeChangedLayoutNotification",
        "widgets.UserScrollNotification"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Notification();<\/code><\/pre>\n    ",
            "href": "widgets\/Notification\/Notification.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Notification",
            "params": []
        },
        {
            "desc": "<p>Add additional information to the given description for use by <a href=\"widgets\/Notification\/toString.html\">toString<\/a>.<\/p>\n<p>This method makes it easier for subclasses to coordinate to provide a\nhigh-quality <a href=\"widgets\/Notification\/toString.html\">toString<\/a> implementation. The <a href=\"widgets\/Notification\/toString.html\">toString<\/a> implementation on\nthe <a href=\"widgets\/Notification-class.html\">Notification<\/a> base class calls <a href=\"widgets\/Notification\/debugFillDescription.html\">debugFillDescription<\/a> to collect\nuseful information from subclasses to incorporate into its return value.<\/p>\n<p>If you override this, make sure to start your method with a call to\n<code>super.debugFillDescription(description)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid debugFillDescription(List&lt;String&gt; description) { }<\/code><\/pre>\n    ",
            "href": "widgets\/Notification\/debugFillDescription.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Notification",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Start bubbling this notification at the given build context.<\/p>\n<p>The notification will be delivered to any <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a> widgets\nwith the appropriate type parameters that are ancestors of the given\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>. If the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> is null, the notification is not\ndispatched.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void dispatch(BuildContext target) {\n  \/\/ The `target` may be null if the subtree the notification is supposed to be\n  \/\/ dispatched in is in the process of being disposed.\n  target?.visitAncestorElements(visitAncestor);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Notification\/dispatch.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Notification",
            "params": [
                {
                    "name": "target",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; description = &lt;String&gt;[];\n  debugFillDescription(description);\n  return '$runtimeType(${description.join(\", \")})';\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Notification\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Notification",
            "params": []
        },
        {
            "desc": "<p>Applied to each ancestor of the <a href=\"widgets\/Notification\/dispatch.html\">dispatch<\/a> target.<\/p>\n<p>The <a href=\"widgets\/Notification-class.html\">Notification<\/a> class implementation of this method dispatches the\ngiven <a href=\"widgets\/Notification-class.html\">Notification<\/a> to each ancestor <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a> widget.<\/p>\n<p>Subclasses can override this to apply additional filtering or to update\nthe notification as it is bubbled (for example, increasing a <code>depth<\/code> field\nfor each ancestor of a particular type).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nbool visitAncestor(Element element) {\n  if (element is StatelessElement) {\n    final StatelessWidget widget = element.widget;\n    if (widget is NotificationListener&lt;Notification&gt;) {\n      if (widget._dispatch(this, element)) \/\/ that function checks the type dynamically\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Notification\/visitAncestor.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Notification",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        }
    ],
    "props": []
}