{
    "desc": "<p>A count-down timer that can be configured to fire once or repeatedly.<\/p>\n<p>The timer counts down from the specified duration to 0.\nWhen the timer reaches 0, the timer invokes the specified callback function.\nUse a periodic timer to repeatedly count down the same interval.<\/p>\n<p>A negative duration is treated the same as a duration of 0.\nIf the duration is statically known to be 0, consider using <a href=\"dart-async\/Timer\/run.html\">run<\/a>.<\/p>\n<p>Frequently the duration is either a constant or computed as in the\nfollowing example (taking advantage of the multiplication operator of\nthe <a href=\"dart-core\/Duration-class.html\">Duration<\/a> class):<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const timeout = const Duration(seconds: 3);\nconst ms = const Duration(milliseconds: 1);\n\nstartTimeout([int milliseconds]) {\n  var duration = milliseconds == null ? timeout : ms * milliseconds;\n  return new Timer(duration, handleTimeout);\n}\n...\nvoid handleTimeout() {  \/\/ callback function\n  ...\n}\n<\/code><\/pre>\n<p>Note: If Dart code using Timer is compiled to JavaScript, the finest\ngranularity available in the browser is 4 milliseconds.<\/p>\n<p>See <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> for measuring elapsed time.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-async\/Timer-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:async",
    "name": "dart:async.Timer",
    "shortname": "Timer",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new timer.<\/p>\n<p>The <code>callback<\/code> function is invoked after the given <code>duration<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Timer(Duration duration, void callback()) {\n  if (Zone.current == Zone.root) {\n    \/\/ No need to bind the callback. We know that the root's timer will\n    \/\/ be invoked in the root zone.\n    return Zone.current.createTimer(duration, callback);\n  }\n  return Zone.current\n      .createTimer(duration, Zone.current.bindCallbackGuarded(callback));\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Timer\/Timer.html",
            "isDeprecated": "0",
            "type": "",
            "name": "Timer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:async.Timer",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<void>"
                },
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Cancels the timer.<\/p>\n<p>Once a <a href=\"dart-async\/Timer-class.html\">Timer<\/a> has been canceled, the callback function will not be called\nby the timer. Calling <a href=\"dart-async\/Timer\/cancel.html\">cancel<\/a> more than once on a <a href=\"dart-async\/Timer-class.html\">Timer<\/a> is allowed, and\nwill have no further effect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void cancel();<\/code><\/pre>\n    ",
            "href": "dart-async\/Timer\/cancel.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "cancel",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Timer",
            "params": []
        },
        {
            "desc": "<p>Runs the given <code>callback<\/code> asynchronously as soon as possible.<\/p>\n<p>This function is equivalent to <code>new Timer(Duration.zero, callback)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void run(void callback()) {\n  new Timer(Duration.zero, callback);\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Timer\/run.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "run",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Timer",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<void>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns whether the timer is still active.<\/p>\n<p>A non-periodic timer is active if the callback has not been executed,\nand the timer has not been canceled.<\/p>\n<p>A periodic timer is active if it has not been canceled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isActive;<\/code><\/pre>\n        ",
            "href": "dart-async\/Timer\/isActive.html",
            "name": "isActive",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:async.Timer",
            "params": []
        },
        {
            "desc": "<p>The number of durations preceding the most recent timer event.<\/p>\n<p>The value starts at zero and is incremented each time a timer event\noccurs, so each callback will see a larger value than the previous one.<\/p>\n<p>If a periodic timer with a non-zero duration is delayed too much,\nso more than one tick should have happened,\nall but the last tick in the past are considered \"missed\",\nand no callback is invoked for them.\nThe <a href=\"dart-async\/Timer\/tick.html\">tick<\/a> count reflects the number of durations that have passed and\nnot the number of callback invocations that have happened.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get tick;<\/code><\/pre>\n        ",
            "href": "dart-async\/Timer\/tick.html",
            "name": "tick",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:async.Timer",
            "params": []
        }
    ]
}