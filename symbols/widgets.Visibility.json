{
    "desc": "<p>Whether to show or hide a child.<\/p>\n<p>By default, the <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> property controls whether the <a href=\"widgets\/Visibility\/child.html\">child<\/a> is included\nin the subtree or not; when it is not <a href=\"widgets\/Visibility\/visible.html\">visible<\/a>, the <a href=\"widgets\/Visibility\/replacement.html\">replacement<\/a> child\n(typically a zero-sized box) is included instead.<\/p>\n<p>A variety of flags can be used to tweak exactly how the child is hidden.\n(Changing the flags dynamically is discouraged, as it can cause the <a href=\"widgets\/Visibility\/child.html\">child<\/a>\nsubtree to be rebuilt, with any state in the subtree being discarded.\nTypically, only the <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> flag is changed dynamically.)<\/p>\n<p>These widgets provide some of the facets of this one:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Opacity-class.html\">Opacity<\/a>, which can stop its child from being painted.<\/li>\n<li>\n<a href=\"widgets\/Offstage-class.html\">Offstage<\/a>, which can stop its child from being laid out or painted.<\/li>\n<li>\n<a href=\"widgets\/TickerMode-class.html\">TickerMode<\/a>, which can stop its child from being animated.<\/li>\n<li>\n<a href=\"widgets\/ExcludeSemantics-class.html\">ExcludeSemantics<\/a>, which can hide the child from accessibility tools.<\/li>\n<li>\n<a href=\"widgets\/IgnorePointer-class.html\">IgnorePointer<\/a>, which can disable touch interactions with the child.<\/li>\n<\/ul>\n<p>Using this widget is not necessary to hide children. The simplest way to\nhide a child is just to not include it, or, if a child <em>must<\/em> be given (e.g.\nbecause the parent is a <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>) then to use <a href=\"widgets\/SizedBox\/SizedBox.shrink.html\">SizedBox.shrink<\/a>\ninstead of the child that would otherwise be included.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AnimatedSwitcher-class.html\">AnimatedSwitcher<\/a>, which can fade from one child to the next as the\nsubtree changes.<\/li>\n<li>\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a>, which can fade between two specific children.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "widgets\/Visibility-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Visibility",
    "shortname": "Visibility",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Control whether the given <code>child<\/code> is <code>visible<\/code>.<\/p>\n<p>The <code>child<\/code> and <code>replacement<\/code> arguments must not be null.<\/p>\n<p>The boolean arguments must not be null.<\/p>\n<p>The <code>maintainSemantics<\/code> and <code>maintainInteractivity<\/code> arguments can only be\nset if <code>maintainSize<\/code> is set.<\/p>\n<p>The <code>maintainSize<\/code> argument can only be set if <code>maintainAnimation<\/code> is set.<\/p>\n<p>The <code>maintainAnimation<\/code> argument can only be set if <code>maintainState<\/code> is set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Visibility({\n  Key key,\n  @required this.child,\n  this.replacement = const SizedBox.shrink(),\n  this.visible = true,\n  this.maintainState = false,\n  this.maintainAnimation = false,\n  this.maintainSize = false,\n  this.maintainSemantics = false,\n  this.maintainInteractivity = false,\n}) : assert(child != null),\n     assert(replacement != null),\n     assert(visible != null),\n     assert(maintainState != null),\n     assert(maintainAnimation != null),\n     assert(maintainSize != null),\n     assert(maintainState == true || maintainAnimation == false, 'Cannot maintain animations if the state is not also maintained.'),\n     assert(maintainAnimation == true || maintainSize == false, 'Cannot maintain size if animations are not maintained.'),\n     assert(maintainSize == true || maintainSemantics == false, 'Cannot maintain semantics if size is not maintained.'),\n     assert(maintainSize == true || maintainInteractivity == false, 'Cannot maintain interactivity if size is not maintained.'),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Visibility\/Visibility.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Visibility",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "maintainAnimation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "maintainInteractivity",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "maintainSemantics",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "maintainSize",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "maintainState",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "replacement",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "visible",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/Visibility\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  if (maintainSize) {\n    Widget result = child;\n    if (!maintainInteractivity) {\n      result = IgnorePointer(\n        child: child,\n        ignoring: !visible,\n        ignoringSemantics: !visible &amp;&amp; !maintainSemantics,\n      );\n    }\n    return Opacity(\n      opacity: visible ? 1.0 : 0.0,\n      alwaysIncludeSemantics: maintainSemantics,\n      child: result,\n    );\n  }\n  assert(!maintainInteractivity);\n  assert(!maintainSemantics);\n  assert(!maintainSize);\n  if (maintainState) {\n    Widget result = child;\n    if (!maintainAnimation)\n      result = TickerMode(child: child, enabled: visible);\n    return Offstage(\n      child: result,\n      offstage: !visible,\n    );\n  }\n  assert(!maintainAnimation);\n  assert(!maintainState);\n  return visible ? child : replacement;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Visibility\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Visibility",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Visibility\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('visible', value: visible, ifFalse: 'hidden', ifTrue: 'visible'));\n  properties.add(FlagProperty('maintainState', value: maintainState, ifFalse: 'maintainState'));\n  properties.add(FlagProperty('maintainAnimation', value: maintainAnimation, ifFalse: 'maintainAnimation'));\n  properties.add(FlagProperty('maintainSize', value: maintainSize, ifFalse: 'maintainSize'));\n  properties.add(FlagProperty('maintainSemantics', value: maintainSemantics, ifFalse: 'maintainSemantics'));\n  properties.add(FlagProperty('maintainInteractivity', value: maintainInteractivity, ifFalse: 'maintainInteractivity'));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Visibility\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Visibility",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget to show or hide, as controlled by <a href=\"widgets\/Visibility\/visible.html\">visible<\/a>.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>Whether to maintain animations within the <a href=\"widgets\/Visibility\/child.html\">child<\/a> subtree when it is\nnot <a href=\"widgets\/Visibility\/visible.html\">visible<\/a>.<\/p>\n<p>To set this, <a href=\"widgets\/Visibility\/maintainState.html\">maintainState<\/a> must also be set.<\/p>\n<p>Keeping animations active when the widget is not visible is even more\nexpensive than only maintaining the state.<\/p>\n<p>One example when this might be useful is if the subtree is animating its\nlayout in time with an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, and the result of that\nlayout is being used to influence some other logic. If this flag is false,\nthen any <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>s hosted inside the <a href=\"widgets\/Visibility\/child.html\">child<\/a> subtree will be\nmuted while the <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> flag is false.<\/p>\n<p>If this property is true, no <a href=\"widgets\/TickerMode-class.html\">TickerMode<\/a> widget is used.<\/p>\n<p>If this property is false, then <a href=\"widgets\/Visibility\/maintainSize.html\">maintainSize<\/a> must also be false.<\/p>\n<p>Dynamically changing this value may cause the current state of the\nsubtree to be lost (and a new instance of the subtree, with new <a href=\"widgets\/State-class.html\">State<\/a>\nobjects, to be immediately created if <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> is true).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainAnimation\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/maintainAnimation.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>Whether to allow the widget to be interactive when hidden.<\/p>\n<p>To set this, <a href=\"widgets\/Visibility\/maintainSize.html\">maintainSize<\/a> must also be set.<\/p>\n<p>By default, with <a href=\"widgets\/Visibility\/maintainInteractivity.html\">maintainInteractivity<\/a> set to false, touch events cannot\nreach the <a href=\"widgets\/Visibility\/child.html\">child<\/a> when it is hidden from the user. If this flag is set to\ntrue, then touch events will nonetheless be passed through.<\/p>\n<p>Dynamically changing this value may cause the current state of the\nsubtree to be lost (and a new instance of the subtree, with new <a href=\"widgets\/State-class.html\">State<\/a>\nobjects, to be immediately created if <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> is true).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainInteractivity\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/maintainInteractivity.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>Whether to maintain the semantics for the widget when it is hidden (e.g.\nfor accessibility).<\/p>\n<p>To set this, <a href=\"widgets\/Visibility\/maintainSize.html\">maintainSize<\/a> must also be set.<\/p>\n<p>By default, with <a href=\"widgets\/Visibility\/maintainSemantics.html\">maintainSemantics<\/a> set to false, the <a href=\"widgets\/Visibility\/child.html\">child<\/a> is not\nvisible to accessibility tools when it is hidden from the user. If this\nflag is set to true, then accessibility tools will report the widget as if\nit was present.<\/p>\n<p>Dynamically changing this value may cause the current state of the\nsubtree to be lost (and a new instance of the subtree, with new <a href=\"widgets\/State-class.html\">State<\/a>\nobjects, to be immediately created if <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> is true).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/maintainSemantics.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>Whether to maintain space for where the widget would have been.<\/p>\n<p>To set this, <a href=\"widgets\/Visibility\/maintainAnimation.html\">maintainAnimation<\/a> must also be set.<\/p>\n<p>Maintaining the size when the widget is not <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> is not notably more\nexpensive than just keeping animations running without maintaining the\nsize, and may in some circumstances be slightly cheaper if the subtree is\nsimple and the <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> property is frequently toggled, since it avoids\ntriggering a layout change when the <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> property is toggled. If the\n<a href=\"widgets\/Visibility\/child.html\">child<\/a> subtree is not trivial then it is significantly cheaper to not\neven keep the state (see <a href=\"widgets\/Visibility\/maintainState.html\">maintainState<\/a>).<\/p>\n<p>If this property is true, <a href=\"widgets\/Opacity-class.html\">Opacity<\/a> is used instead of <a href=\"widgets\/Offstage-class.html\">Offstage<\/a>.<\/p>\n<p>If this property is false, then <a href=\"widgets\/Visibility\/maintainSemantics.html\">maintainSemantics<\/a> and\n<a href=\"widgets\/Visibility\/maintainInteractivity.html\">maintainInteractivity<\/a> must also be false.<\/p>\n<p>Dynamically changing this value may cause the current state of the\nsubtree to be lost (and a new instance of the subtree, with new <a href=\"widgets\/State-class.html\">State<\/a>\nobjects, to be immediately created if <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> is true).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AnimatedOpacity-class.html\">AnimatedOpacity<\/a> and <a href=\"widgets\/FadeTransition-class.html\">FadeTransition<\/a>, which apply animations to the\nopacity for a more subtle effect.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainSize\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/maintainSize.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>Whether to maintain the <a href=\"widgets\/State-class.html\">State<\/a> objects of the <a href=\"widgets\/Visibility\/child.html\">child<\/a> subtree when it is\nnot <a href=\"widgets\/Visibility\/visible.html\">visible<\/a>.<\/p>\n<p>Keeping the state of the subtree is potentially expensive (because it\nmeans all the objects are still in memory; their resources are not\nreleased). It should only be maintained if it cannot be recreated on\ndemand. One example of when the state would be maintained is if the child\nsubtree contains a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, since that widget maintains elaborate\nstate that cannot be recreated on the fly.<\/p>\n<p>If this property is true, an <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> widget is used to hide the child\ninstead of replacing it with <a href=\"widgets\/Visibility\/replacement.html\">replacement<\/a>.<\/p>\n<p>If this property is false, then <a href=\"widgets\/Visibility\/maintainAnimation.html\">maintainAnimation<\/a> must also be false.<\/p>\n<p>Dynamically changing this value may cause the current state of the\nsubtree to be lost (and a new instance of the subtree, with new <a href=\"widgets\/State-class.html\">State<\/a>\nobjects, to be immediately created if <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> is true).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainState\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/maintainState.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>The widget to use when the child is not <a href=\"widgets\/Visibility\/visible.html\">visible<\/a>, assuming that none of\nthe <code>maintain<\/code> flags (in particular, <a href=\"widgets\/Visibility\/maintainState.html\">maintainState<\/a>) are set.<\/p>\n<p>The normal behavior is to replace the widget with a zero by zero box\n(<a href=\"widgets\/SizedBox\/SizedBox.shrink.html\">SizedBox.shrink<\/a>).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a>, which can animate between two children.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget replacement\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/replacement.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.Visibility",
            "params": []
        },
        {
            "desc": "<p>Switches between showing the <a href=\"widgets\/Visibility\/child.html\">child<\/a> or hiding it.<\/p>\n<p>The <code>maintain<\/code> flags should be set to the same values regardless of the\nstate of the <a href=\"widgets\/Visibility\/visible.html\">visible<\/a> property, otherwise they will not operate correctly\n(specifically, the state will be lost regardless of the state of\n<a href=\"widgets\/Visibility\/maintainState.html\">maintainState<\/a> whenever any of the <code>maintain<\/code> flags are changed, since\ndoing so will result in a subtree shape change).<\/p>\n<p>Unless <a href=\"widgets\/Visibility\/maintainState.html\">maintainState<\/a> is set, the <a href=\"widgets\/Visibility\/child.html\">child<\/a> subtree will be disposed\n(removed from the tree) while hidden.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool visible\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Visibility\/visible.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Visibility",
            "params": []
        }
    ]
}