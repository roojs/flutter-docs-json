{
    "name": "widgets.UniqueWidget",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "UniqueWidget",
            "type": "",
            "desc": "<p>Creates a widget that has exactly one inflated instance in the tree.<\/p>\n<p>The <code>key<\/code> argument must not be null because it identifies the unique\ninflated instance of this widget.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.UniqueWidget",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "widgets.GlobalKey",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/UniqueWidget\/UniqueWidget.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const UniqueWidget({\n  @required GlobalKey&lt;T&gt; key,\n}) : assert(key != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/UniqueWidget\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.UniqueWidget",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/UniqueWidget\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT createState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "currentState",
            "type": "",
            "types": [],
            "desc": "<p>The state for the unique inflated instance of this widget.<\/p>\n<p>Might be null if the widget is not currently in the tree.<\/p>\n        ",
            "memberOf": "widgets.UniqueWidget",
            "isConstant": false,
            "href": "widgets\/UniqueWidget\/currentState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">T get currentState {\n  final GlobalKey&lt;T&gt; globalKey = key;\n  return globalKey.currentState;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/UniqueWidget-class.html",
    "desc": "<p>Base class for stateful widgets that have exactly one inflated instance in\nthe tree.<\/p>\n<p>Such widgets must be given a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>. This key can be generated by the\nsubclass from its <a href=\"dart-core\/Type-class.html\">Type<\/a> object, e.g. by calling <code>super(key: new\nGlobalObjectKey(MyWidget))<\/code> where <code>MyWidget<\/code> is the name of the subclass.<\/p>\n<p>Since only one instance can be inflated at a time, there is only ever one\ncorresponding <a href=\"widgets\/State-class.html\">State<\/a> object. That object is exposed, for convenience, via\nthe <a href=\"widgets\/UniqueWidget\/currentState.html\">currentState<\/a> property.<\/p>\n<p>When subclassing <a href=\"widgets\/UniqueWidget-class.html\">UniqueWidget<\/a>, provide the corresponding <a href=\"widgets\/State-class.html\">State<\/a> subclass\nas the type argument.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "UniqueWidget"
}