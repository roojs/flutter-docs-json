{
    "name": "widgets.MergeSemantics",
    "extends": [
        "widgets.SingleChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "MergeSemantics",
            "type": "",
            "desc": "<p>Creates a widget that merges the semantics of its descendants.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.MergeSemantics",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/MergeSemantics\/MergeSemantics.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MergeSemantics({ Key key, Widget child }) : super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderMergeSemantics",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.MergeSemantics",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/MergeSemantics\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderMergeSemantics createRenderObject(BuildContext context) =&gt; RenderMergeSemantics();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/MergeSemantics-class.html",
    "desc": "<p>A widget that merges the semantics of its descendants.<\/p>\n<p>Causes all the semantics of the subtree rooted at this node to be\nmerged into one node in the semantics tree. For example, if you\nhave a widget with a Text node next to a checkbox widget, this\ncould be used to merge the label from the Text node with the\n\"checked\" semantic state of the checkbox into a single node that\nhad both the label and the checked state. Otherwise, the label\nwould be presented as a separate feature than the checkbox, and\nthe user would not be able to be sure that they were related.<\/p>\n<p>Be aware that if two nodes in the subtree have conflicting\nsemantics, the result may be nonsensical. For example, a subtree\nwith a checked checkbox and an unchecked checkbox will be\npresented as checked. All the labels will be merged into a single\nstring (with newlines separating each label from the other). If\nmultiple nodes in the merged subtree can handle semantic gestures,\nthe first one in tree order will be the one to receive the\ncallbacks.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "MergeSemantics"
}