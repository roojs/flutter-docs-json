{
    "desc": "<p>Builds a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> containing the given visuals.<\/p>\n<p>A <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> can then be rendered using <a href=\"dart-ui\/Window\/render.html\">Window.render<\/a>.<\/p>\n<p>To draw graphical operations onto a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a>, first create a\n<a href=\"dart-ui\/Picture-class.html\">Picture<\/a> using a <a href=\"dart-ui\/PictureRecorder-class.html\">PictureRecorder<\/a> and a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, and then add\nit to the scene using <a href=\"dart-ui\/SceneBuilder\/addPicture.html\">addPicture<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/SceneBuilder-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.SceneBuilder",
    "shortname": "SceneBuilder",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an empty <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma('vm:entry-point')\nSceneBuilder() { _constructor(); }<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/SceneBuilder.html",
            "isDeprecated": false,
            "type": "",
            "name": "SceneBuilder",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": []
        },
        {
            "desc": "<p>(Fuchsia-only) Adds a scene rendered by another application to the scene\nfor this application.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addChildScene({\n  Offset offset: Offset.zero,\n  double width: 0.0,\n  double height: 0.0,\n  SceneHost sceneHost,\n  bool hitTestable: true\n}) {\n  _addChildScene(offset.dx,\n                 offset.dy,\n                 width,\n                 height,\n                 sceneHost,\n                 hitTestable);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/addChildScene.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addChildScene",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "hitTestable",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "sceneHost",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.SceneHost"
                },
                {
                    "name": "width",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Adds an object to the scene that displays performance statistics.<\/p>\n<p>Useful during development to assess the performance of the application.\nThe enabledOptions controls which statistics are displayed. The bounds\ncontrols where the statistics are displayed.<\/p>\n<p>enabledOptions is a bit field with the following bits defined:<\/p>\n<ul>\n<li>0x01: displayRasterizerStatistics - show GPU thread frame time<\/li>\n<li>0x02: visualizeRasterizerStatistics - graph GPU thread frame times<\/li>\n<li>0x04: displayEngineStatistics - show UI thread frame time<\/li>\n<li>0x08: visualizeEngineStatistics - graph UI thread frame times\nSet enabledOptions to 0x0F to enable all the currently defined features.<\/li>\n<\/ul>\n<p>The \"UI thread\" is the thread that includes all the execution of\nthe main Dart isolate (the isolate that can call\n<a href=\"dart-ui\/Window\/render.html\">Window.render<\/a>). The UI thread frame time is the total time\nspent executing the <a href=\"dart-ui\/Window\/onBeginFrame.html\">Window.onBeginFrame<\/a> callback. The \"GPU\nthread\" is the thread (running on the CPU) that subsequently\nprocesses the <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> provided by the Dart code to turn it into\nGPU commands and send it to the GPU.<\/p>\n<p>See also the <a href=\"rendering\/PerformanceOverlayOption-class.html\">PerformanceOverlayOption<\/a> enum in the rendering library.\nfor more details.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Values above must match constants in \/\/engine\/src\/sky\/compositor\/performance_overlay_layer.h\nvoid addPerformanceOverlay(int enabledOptions, Rect bounds) {\n  _addPerformanceOverlay(enabledOptions,\n                         bounds.left,\n                         bounds.right,\n                         bounds.top,\n                         bounds.bottom);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/addPerformanceOverlay.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addPerformanceOverlay",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "bounds",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "enabledOptions",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Adds a <a href=\"dart-ui\/Picture-class.html\">Picture<\/a> to the scene.<\/p>\n<p>The picture is rasterized at the given offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPicture(Offset offset, Picture picture, { bool isComplexHint: false, bool willChangeHint: false }) {\n  int hints = 0;\n  if (isComplexHint)\n    hints |= 1;\n  if (willChangeHint)\n    hints |= 2;\n  _addPicture(offset.dx, offset.dy, picture, hints);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/addPicture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addPicture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "isComplexHint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "picture",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Picture"
                },
                {
                    "name": "willChangeHint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Adds a platform view (e.g an iOS UIView) to the scene.<\/p>\n<p>Only supported on iOS, this is currently a no-op on other platforms.<\/p>\n<p>On iOS this layer splits the current output surface into two surfaces, one for the scene nodes\npreceding the platform view, and one for the scene nodes following the platform view.<\/p>\n<h2 id=\"performance-impact\">Performance impact<\/h2>\n<p>Adding an additional surface doubles the amount of graphics memory directly used by Flutter\nfor output buffers. Quartz might allocated extra buffers for compositing the Flutter surfaces\nand the platform view.<\/p>\n<p>With a platform view in the scene, Quartz has to composite the two Flutter surfaces and the\nembedded UIView. In addition to that, on iOS versions greater than 9, the Flutter frames are\nsynchronized with the UIView frames adding additional performance overhead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPlatformView(int viewId, { Offset offset: Offset.zero, double width: 0.0, double height: 0.0}) {\n  assert(offset != null, 'Offset argument was null');\n  _addPlatformView(offset.dx, offset.dy, width, height, viewId);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/addPlatformView.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addPlatformView",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "viewId",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "width",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Add a retained engine layer subtree from previous frames.<\/p>\n<p>All the engine layers that are in the subtree of the retained layer will\nbe automatically appended to the current engine layer tree.<\/p>\n<p>Therefore, when implementing a subclass of the <a href=\"rendering\/Layer-class.html\">Layer<\/a> concept defined in\nthe rendering layer of Flutter's framework, once this is called, there's\nno need to call <code>addToScene<\/code> for its children layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer addRetained(EngineLayer retainedLayer) native 'SceneBuilder_addRetained';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/addRetained.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "addRetained",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "retainedLayer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.EngineLayer"
                }
            ]
        },
        {
            "desc": "<p>Adds a backend texture to the scene.<\/p>\n<p>The texture is scaled to the given size and rasterized at the given offset.<\/p>\n<p>If <code>freeze<\/code> is true the texture that is added to the scene will not\nbe updated with new frames. <code>freeze<\/code> is used when resizing an embedded\nAndroid view: When resizing an Android view there is a short period during\nwhich the framework cannot tell if the newest texture frame has the\nprevious or new size, to workaround this the framework \"freezes\" the\ntexture just before resizing the Android view and un-freezes it when it is\ncertain that a frame with the new size is ready.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTexture(int textureId, { Offset offset: Offset.zero, double width: 0.0, double height: 0.0 , bool freeze: false}) {\n  assert(offset != null, 'Offset argument was null');\n  _addTexture(offset.dx, offset.dy, width, height, textureId, freeze);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/addTexture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addTexture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "freeze",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "textureId",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "width",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Finishes building the scene.<\/p>\n<p>Returns a <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> containing the objects that have been added to\nthis scene builder. The <a href=\"dart-ui\/Scene-class.html\">Scene<\/a> can then be displayed on the\nscreen with <a href=\"dart-ui\/Window\/render.html\">Window.render<\/a>.<\/p>\n<p>After calling this function, the scene builder object is invalid and\ncannot be used further.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Scene build() native 'SceneBuilder_build';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/build.html",
            "isDeprecated": false,
            "type": "dart:ui.Scene",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": []
        },
        {
            "desc": "<p>Ends the effect of the most recently pushed operation.<\/p>\n<p>Internally the scene builder maintains a stack of operations. Each of the\noperations in the stack applies to each of the objects added to the scene.\nCalling this function removes the most recently added operation from the\nstack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void pop() native 'SceneBuilder_pop';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pop.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "pop",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": []
        },
        {
            "desc": "<p>Pushes a backdrop filter operation onto the operation stack.<\/p>\n<p>The given filter is applied to the current contents of the scene prior to\nrasterizing the given objects.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushBackdropFilter(ImageFilter filter) native 'SceneBuilder_pushBackdropFilter';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushBackdropFilter.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushBackdropFilter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "filter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.ImageFilter"
                }
            ]
        },
        {
            "desc": "<p>Pushes a path clip operation onto the operation stack.<\/p>\n<p>Rasterization outside the given path is discarded.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack. See <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.\nBy default, the clip will be anti-aliased (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushClipPath(Path path, {Clip clipBehavior = Clip.antiAlias}) {\n  assert(clipBehavior != null);\n  assert(clipBehavior != Clip.none);\n  return _pushClipPath(path, clipBehavior.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushClipPath.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushClipPath",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "path",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Path"
                }
            ]
        },
        {
            "desc": "<p>Pushes a rounded-rectangular clip operation onto the operation stack.<\/p>\n<p>Rasterization outside the given rounded rectangle is discarded.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack, and <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.\nBy default, the clip will be anti-aliased (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushClipRRect(RRect rrect, {Clip clipBehavior = Clip.antiAlias}) {\n  assert(clipBehavior != null);\n  assert(clipBehavior != Clip.none);\n  return _pushClipRRect(rrect._value, clipBehavior.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushClipRRect.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushClipRRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "rrect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.RRect"
                }
            ]
        },
        {
            "desc": "<p>Pushes a rectangular clip operation onto the operation stack.<\/p>\n<p>Rasterization outside the given rectangle is discarded.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack, and <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.\nBy default, the clip will be anti-aliased (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushClipRect(Rect rect, {Clip clipBehavior = Clip.antiAlias}) {\n  assert(clipBehavior != null);\n  assert(clipBehavior != Clip.none);\n  return _pushClipRect(rect.left, rect.right, rect.top, rect.bottom, clipBehavior.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushClipRect.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushClipRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                }
            ]
        },
        {
            "desc": "<p>Pushes a color filter operation onto the operation stack.<\/p>\n<p>The given color is applied to the objects' rasterization using the given\nblend mode.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushColorFilter(Color color, BlendMode blendMode) {\n  return _pushColorFilter(color.value, blendMode.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushColorFilter.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushColorFilter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "blendMode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.BlendMode"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Pushes an offset operation onto the operation stack.<\/p>\n<p>This is equivalent to <a href=\"dart-ui\/SceneBuilder\/pushTransform.html\">pushTransform<\/a> with a matrix with only translation.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushOffset(double dx, double dy) native 'SceneBuilder_pushOffset';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushOffset.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "dx",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "dy",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Pushes an opacity operation onto the operation stack.<\/p>\n<p>The given alpha value is blended into the alpha value of the objects'\nrasterization. An alpha value of 0 makes the objects entirely invisible.\nAn alpha value of 255 has no effect (i.e., the objects retain the current\nopacity).<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushOpacity(int alpha, {Offset offset = Offset.zero}) {\n  return _pushOpacity(alpha, offset.dx, offset.dy);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushOpacity.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushOpacity",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "alpha",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Pushes a physical layer operation for an arbitrary shape onto the\noperation stack.<\/p>\n<p>By default, the layer's content will not be clipped (clip = <a href=\"dart-ui\/Clip-class.html\">Clip.none<\/a>).\nIf clip equals <a href=\"dart-ui\/Clip-class.html\">Clip.hardEdge<\/a>, <a href=\"dart-ui\/Clip-class.html\">Clip.antiAlias<\/a>, or <a href=\"dart-ui\/Clip-class.html\">Clip.antiAliasWithSaveLayer<\/a>,\nthen the content is clipped to the given shape defined by <code>path<\/code>.<\/p>\n<p>If <code>elevation<\/code> is greater than 0.0, then a shadow is drawn around the layer.\n<code>shadowColor<\/code> defines the color of the shadow if present and <code>color<\/code> defines the\ncolor of the layer background.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack, and <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for different clip modes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ ignore: deprecated_member_use\nEngineLayer pushPhysicalShape({ Path path, double elevation, Color color, Color shadowColor, Clip clipBehavior = Clip.none}) {\n  return _pushPhysicalShape(path, elevation, color.value, shadowColor?.value ?? 0xFF000000, clipBehavior.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushPhysicalShape.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushPhysicalShape",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "path",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Path"
                },
                {
                    "name": "shadowColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Pushes a shader mask operation onto the operation stack.<\/p>\n<p>The given shader is applied to the object's rasterization in the given\nrectangle using the given blend mode.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushShaderMask(Shader shader, Rect maskRect, BlendMode blendMode) {\n  return _pushShaderMask(shader,\n                         maskRect.left,\n                         maskRect.right,\n                         maskRect.top,\n                         maskRect.bottom,\n                         blendMode.index);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushShaderMask.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushShaderMask",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "blendMode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.BlendMode"
                },
                {
                    "name": "maskRect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "shader",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Shader"
                }
            ]
        },
        {
            "desc": "<p>Pushes a transform operation onto the operation stack.<\/p>\n<p>The objects are transformed by the given matrix before rasterization.<\/p>\n<p>See <a href=\"dart-ui\/SceneBuilder\/pop.html\">pop<\/a> for details about the operation stack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EngineLayer pushTransform(Float64List matrix4) {\n  if (matrix4 == null)\n    throw new ArgumentError('\"matrix4\" argument cannot be null');\n  if (matrix4.length != 16)\n    throw new ArgumentError('\"matrix4\" must have 16 entries.');\n  return _pushTransform(matrix4);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/pushTransform.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "pushTransform",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "matrix4",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:typed_data.Float64List"
                }
            ]
        },
        {
            "desc": "<p>Sets whether the compositor should checkerboard layers that are rendered\nto offscreen bitmaps.<\/p>\n<p>This is only useful for debugging purposes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCheckerboardOffscreenLayers(bool checkerboard) native 'SceneBuilder_setCheckerboardOffscreenLayers';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/setCheckerboardOffscreenLayers.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setCheckerboardOffscreenLayers",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "checkerboard",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Sets whether the raster cache should checkerboard cached entries. This is\nonly useful for debugging purposes.<\/p>\n<p>The compositor can sometimes decide to cache certain portions of the\nwidget hierarchy. Such portions typically don't change often from frame to\nframe and are expensive to render. This can speed up overall rendering. However,\nthere is certain upfront cost to constructing these cache entries. And, if\nthe cache entries are not used very often, this cost may not be worth the\nspeedup in rendering of subsequent frames. If the developer wants to be certain\nthat populating the raster cache is not causing stutters, this option can be\nset. Depending on the observations made, hints can be provided to the compositor\nthat aid it in making better decisions about caching.<\/p>\n<p>Currently this interface is difficult to use by end-developers. If you're\ninterested in using this feature, please contact <a href=\"https:\/\/groups.google.com\/forum\/#!forum\/flutter-dev\">flutter-dev<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCheckerboardRasterCacheImages(bool checkerboard) native 'SceneBuilder_setCheckerboardRasterCacheImages';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/setCheckerboardRasterCacheImages.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setCheckerboardRasterCacheImages",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "checkerboard",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Sets a threshold after which additional debugging information should be recorded.<\/p>\n<p>Currently this interface is difficult to use by end-developers. If you're\ninterested in using this feature, please contact <a href=\"https:\/\/groups.google.com\/forum\/#!forum\/flutter-dev\">flutter-dev<\/a>.\nWe'll hopefully be able to figure out how to make this feature more useful\nto you.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRasterizerTracingThreshold(int frameInterval) native 'SceneBuilder_setRasterizerTracingThreshold';<\/code><\/pre>\n    ",
            "href": "dart-ui\/SceneBuilder\/setRasterizerTracingThreshold.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setRasterizerTracingThreshold",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.SceneBuilder",
            "params": [
                {
                    "name": "frameInterval",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": []
}