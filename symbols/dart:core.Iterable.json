{
    "desc": "<p>A collection of values, or \"elements\", that can be accessed sequentially.<\/p>\n<p>The elements of the iterable are accessed by getting an <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a>\nusing the <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> getter, and using it to step through the values.\nStepping with the iterator is done by calling <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>,\nand if the call returns <code>true<\/code>,\nthe iterator has now moved to the next element,\nwhich is then available as <a href=\"dart-core\/Iterator\/current.html\">Iterator.current<\/a>.\nIf the call returns <code>false<\/code>, there are no more elements,\nand <code>iterator.current<\/code> returns <code>null<\/code>.<\/p>\n<p>You can create more than one iterator from the same <code>Iterable<\/code>.\nEach time <code>iterator<\/code> is read, it returns a new iterator,\nand different iterators can be stepped through independently,\neach giving access to all the elements of the iterable.\nThe iterators of the same iterable <em>should<\/em> provide the same values\nin the same order (unless the underlying collection is modified between\nthe iterations, which some collections allow).<\/p>\n<p>You can also iterate over the elements of an <code>Iterable<\/code>\nusing the for-in loop construct, which uses the <code>iterator<\/code> getter behind the\nscenes.\nFor example, you can iterate over all of the keys of a <a href=\"dart-core\/Map-class.html\">Map<\/a>,\nbecause <code>Map<\/code> keys are iterable.<\/p>\n<pre class=\"language-dart\"><code>Map kidsBooks = {'Matilda': 'Roald Dahl',\n                 'Green Eggs and Ham': 'Dr Seuss',\n                 'Where the Wild Things Are': 'Maurice Sendak'};\nfor (var book in kidsBooks.keys) {\n  print('$book was written by ${kidsBooks[book]}');\n}\n<\/code><\/pre>\n<p>The <a href=\"dart-core\/List-class.html\">List<\/a> and <a href=\"dart-core\/Set-class.html\">Set<\/a> classes are both <code>Iterable<\/code>,\nas are most classes in the <code>dart:collection<\/code> library.<\/p>\n<p>Some <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> collections can be modified.\nAdding an element to a <code>List<\/code> or <code>Set<\/code> will change which elements it\ncontains, and adding a new key to a <code>Map<\/code> changes the elements of <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a>.\nIterators created after the change will provide the new elements, and may\nor may not preserve the order of existing elements\n(for example, a <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> may completely change its order when a single\nelement is added).<\/p>\n<p>Changing a collection <em>while<\/em> it is being iterated\nis generally <em>not<\/em> allowed.\nDoing so will break the iteration, which is typically signalled\nby throwing a <a href=\"dart-core\/ConcurrentModificationError-class.html\">ConcurrentModificationError<\/a>\nthe next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called.\nThe current value of <a href=\"dart-core\/Iterator\/current.html\">Iterator.current<\/a> getter\nshould not be affected by the change in the collection,\nthe <code>current<\/code> value was set by the previous call to <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>.<\/p>\n<p>Some iterables compute their elements dynamically every time they are\niterated, like the one returned by <a href=\"dart-core\/Iterable\/Iterable.generate.html\">Iterable.generate<\/a> or the iterable\nreturned by a <code>sync*<\/code> generator function. If the computation doesn't depend\non other objects that may change, then the generated sequence should be\nthe same one every time it's iterated.<\/p>\n<p>The members of <code>Iterable<\/code>, other than <code>iterator<\/code> itself,\nwork by looking at the elements of the iterable.\nThis can be implemented by running through the <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>, but some classes\nmay have more efficient ways of finding the result\n(like <a href=\"dart-core\/Iterable\/last.html\">last<\/a> or <a href=\"dart-core\/Iterable\/length.html\">length<\/a> on a <a href=\"dart-core\/List-class.html\">List<\/a>, or <a href=\"dart-core\/Iterable\/contains.html\">contains<\/a> on a <a href=\"dart-core\/Set-class.html\">Set<\/a>).<\/p>\n<p>The methods that return another <code>Iterable<\/code> (like <a href=\"dart-core\/Iterable\/map.html\">map<\/a> and <a href=\"dart-core\/Iterable\/where.html\">where<\/a>)\nare all <em>lazy<\/em> - they will iterate the original (as necessary)\nevery time the returned iterable is iterated, and not before.<\/p>\n<p>Since an iterable may be iterated more than once, it's not recommended to\nhave detectable side-effects in the iterator.\nFor methods like <a href=\"dart-core\/Iterable\/map.html\">map<\/a> and <a href=\"dart-core\/Iterable\/where.html\">where<\/a>, the returned iterable will execute the\nargument function on every iteration, so those functions should also not\nhave side effects.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-core\/Iterable-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Iterable",
    "shortname": "Iterable",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Iterable();<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/Iterable.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  for (E element in this) {\n    if (test(element)) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/any.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-core\/Iterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;R&gt; cast&lt;R&gt;() =&gt; Iterable.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/cast.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Adapts <code>source<\/code> to be an <code>Iterable&lt;T&gt;<\/code>.<\/p>\n<p>Any time the iterable would produce an element that is not a <code>T<\/code>,\nthe element access will throw. If all elements of <code>source<\/code> are actually\ninstances of <code>T<\/code>, or if only elements that are actually instances of <code>T<\/code>\nare accessed, then the resulting iterable can be used as an <code>Iterable&lt;T&gt;<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;T&gt; castFrom&lt;S, T&gt;(Iterable&lt;S&gt; source) =&gt;\n    new CastIterable&lt;S, T&gt;(source);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/castFrom.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "source",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  for (E e in this) {\n    if (e == element) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/contains.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-core\/Iterable\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) {\n  ArgumentError.checkNotNull(index, \"index\");\n  RangeError.checkNotNegative(index, \"index\");\n  int elementIndex = 0;\n  for (E element in this) {\n    if (index == elementIndex) return element;\n    elementIndex++;\n  }\n  throw new RangeError.index(index, this, \"index\", null, elementIndex);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/elementAt.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) {\n  for (E element in this) {\n    if (!test(element)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/every.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt;\n    new ExpandIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/expand.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) {\n  for (E element in this) {\n    if (test(element)) return element;\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/firstWhere.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  for (E element in this) value = combine(value, element);\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/fold.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "initialValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                },
                {
                    "name": "previousValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) {\n  if (this is EfficientLengthIterable&lt;E&gt;) {\n    return new FollowedByIterable&lt;E&gt;.firstEfficient(this, other);\n  }\n  return new FollowedByIterable&lt;E&gt;(this, other);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/followedBy.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) {\n  for (E element in this) f(element);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/forEach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-core\/Iterable\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) return \"\";\n  StringBuffer buffer = new StringBuffer();\n  if (separator == null || separator == \"\") {\n    do {\n      buffer.write(\"${iterator.current}\");\n    } while (iterator.moveNext());\n  } else {\n    buffer.write(\"${iterator.current}\");\n    while (iterator.moveNext()) {\n      buffer.write(separator);\n      buffer.write(\"${iterator.current}\");\n    }\n  }\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/join.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "separator",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/lastWhere.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-core\/Iterable\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E e)) =&gt; new MappedIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/map.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "e",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E value = iterator.current;\n  while (iterator.moveNext()) {\n    value = combine(value, iterator.current);\n  }\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/reduce.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      if (foundMatching) {\n        throw IterableElementError.tooMany();\n      }\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/singleWhere.html",
            "isDeprecated": "0",
            "type": "<E>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "orElse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) {\n  return new SkipIterable&lt;E&gt;(this, count);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/skip.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "count",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) {\n  return new SkipWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/skipWhile.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) {\n  return new TakeIterable&lt;E&gt;(this, count);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/take.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "count",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) {\n  return new TakeWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/takeWhile.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable: true}) {\n  return new List&lt;E&gt;.from(this, growable: growable);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/toList.html",
            "isDeprecated": "0",
            "type": "dart:core.List",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "growable",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; new Set&lt;E&gt;.from(this);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/toSet.html",
            "isDeprecated": "0",
            "type": "dart:core.Set",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of (some of) the elements of <code>this<\/code>.<\/p>\n<p>Elements are represented by their own <code>toString<\/code> results.<\/p>\n<p>The default representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.<\/p>\n<p>If the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.<\/p>\n<p>The conversion may omit calling <code>toString<\/code> on some elements if they\nare known to not occur in the output, and it may stop iterating after\na hundred elements.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToShortString(this, '(', ')');<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; new WhereIterable&lt;E&gt;(this, test);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/where.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; new WhereTypeIterable&lt;T&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-core\/Iterable\/whereType.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Iterable",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; !iterator.moveNext();<\/code><\/pre>\n        ",
            "href": "dart-core\/Iterable\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
            "href": "dart-core\/Iterable\/isNotEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
            "href": "dart-core\/Iterable\/iterator.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterator",
            "memberOf": "dart:core.Iterable",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in <a href=\"dart-core\/Iterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length {\n  assert(this is! EfficientLengthIterable);\n  int count = 0;\n  Iterator it = iterator;\n  while (it.moveNext()) {\n    count++;\n  }\n  return count;\n}<\/code><\/pre>\n        ",
            "href": "dart-core\/Iterable\/length.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Iterable",
            "params": []
        }
    ]
}