{
    "name": "gestures.VelocityTracker",
    "extends": [],
    "memberOf": "gestures",
    "events": [],
    "methods": [
        {
            "name": "VelocityTracker",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "gestures.VelocityTracker",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "gestures\/VelocityTracker\/VelocityTracker.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "addPosition",
            "type": "",
            "desc": "<p>Adds a position as the given time to the tracker.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.VelocityTracker",
            "sig": "",
            "params": [
                {
                    "name": "time",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/VelocityTracker\/addPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addPosition(Duration time, Offset position) {\n  _index += 1;\n  if (_index == _historySize)\n    _index = 0;\n  _samples[_index] = _PointAtTime(position, time);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "getVelocity",
            "type": "gestures.Velocity",
            "desc": "<p>Computes the velocity of the pointer at the time of the last\nprovided data point.<\/p>\n<p>This can be expensive. Only call this when you need the velocity.<\/p>\n<p>Returns <a href=\"gestures\/Velocity\/zero-constant.html\">Velocity.zero<\/a> if there is no data from which to compute an\nestimate or if the estimated velocity is zero.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.VelocityTracker",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/VelocityTracker\/getVelocity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Velocity getVelocity() {\n  final VelocityEstimate estimate = getVelocityEstimate();\n  if (estimate == null || estimate.pixelsPerSecond == Offset.zero)\n    return Velocity.zero;\n  return Velocity(pixelsPerSecond: estimate.pixelsPerSecond);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getVelocityEstimate",
            "type": "gestures.VelocityEstimate",
            "desc": "<p>Returns an estimate of the velocity of the object being tracked by the\ntracker given the current information available to the tracker.<\/p>\n<p>Information is added using <a href=\"gestures\/VelocityTracker\/addPosition.html\">addPosition<\/a>.<\/p>\n<p>Returns null if there is no data on which to base an estimate.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.VelocityTracker",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/VelocityTracker\/getVelocityEstimate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">VelocityEstimate getVelocityEstimate() {\n  final List&lt;double&gt; x = &lt;double&gt;[];\n  final List&lt;double&gt; y = &lt;double&gt;[];\n  final List&lt;double&gt; w = &lt;double&gt;[];\n  final List&lt;double&gt; time = &lt;double&gt;[];\n  int sampleCount = 0;\n  int index = _index;\n\n  final _PointAtTime newestSample = _samples[index];\n  if (newestSample == null)\n    return null;\n\n  _PointAtTime previousSample = newestSample;\n  _PointAtTime oldestSample = newestSample;\n\n  \/\/ Starting with the most recent PointAtTime sample, iterate backwards while\n  \/\/ the samples represent continuous motion.\n  do {\n    final _PointAtTime sample = _samples[index];\n    if (sample == null)\n      break;\n\n    final double age = (newestSample.time - sample.time).inMilliseconds.toDouble();\n    final double delta = (sample.time - previousSample.time).inMilliseconds.abs().toDouble();\n    previousSample = sample;\n    if (age &gt; _horizonMilliseconds || delta &gt; _assumePointerMoveStoppedMilliseconds)\n      break;\n\n    oldestSample = sample;\n    final Offset position = sample.point;\n    x.add(position.dx);\n    y.add(position.dy);\n    w.add(1.0);\n    time.add(-age);\n    index = (index == 0 ? _historySize : index) - 1;\n\n    sampleCount += 1;\n  } while (sampleCount &lt; _historySize);\n\n  if (sampleCount &gt;= _minSampleSize) {\n    final LeastSquaresSolver xSolver = LeastSquaresSolver(time, x, w);\n    final PolynomialFit xFit = xSolver.solve(2);\n    if (xFit != null) {\n      final LeastSquaresSolver ySolver = LeastSquaresSolver(time, y, w);\n      final PolynomialFit yFit = ySolver.solve(2);\n      if (yFit != null) {\n        return VelocityEstimate( \/\/ convert from pixels\/ms to pixels\/s\n          pixelsPerSecond: Offset(xFit.coefficients[1] * 1000, yFit.coefficients[1] * 1000),\n          confidence: xFit.confidence * yFit.confidence,\n          duration: newestSample.time - oldestSample.time,\n          offset: newestSample.point - oldestSample.point,\n        );\n      }\n    }\n  }\n\n  \/\/ We're unable to make a velocity estimate but we did have at least one\n  \/\/ valid pointer position.\n  return VelocityEstimate(\n    pixelsPerSecond: Offset.zero,\n    confidence: 1.0,\n    duration: newestSample.time - oldestSample.time,\n    offset: newestSample.point - oldestSample.point,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "gestures\/VelocityTracker-class.html",
    "desc": "<p>Computes a pointer's velocity based on data from <a href=\"gestures\/PointerMoveEvent-class.html\">PointerMoveEvent<\/a>s.<\/p>\n<p>The input data is provided by calling <a href=\"gestures\/VelocityTracker\/addPosition.html\">addPosition<\/a>. Adding data is cheap.<\/p>\n<p>To obtain a velocity, call <a href=\"gestures\/VelocityTracker\/getVelocity.html\">getVelocity<\/a> or <a href=\"gestures\/VelocityTracker\/getVelocityEstimate.html\">getVelocityEstimate<\/a>. This will\ncompute the velocity based on the data added so far. Only call these when\nyou need to use the velocity, as they are comparatively expensive.<\/p>\n<p>The quality of the velocity estimation will be better if more data points\nhave been received.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "VelocityTracker"
}