{
    "name": "painting.EdgeInsetsGeometry",
    "extends": [],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator %",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n<p>This operator may have unexpected results when applied to a mixture of\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> and <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/operator_modulo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator %(double other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator *",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Scales the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator *(double other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator \/",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Divides the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/operator_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator \/(double other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/EdgeInsetsGeometry\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! EdgeInsetsGeometry)\n    return false;\n  final EdgeInsetsGeometry typedOther = other;\n  return _left == typedOther._left\n      &amp;&amp; _right == typedOther._right\n      &amp;&amp; _start == typedOther._start\n      &amp;&amp; _end == typedOther._end\n      &amp;&amp; _top == typedOther._top\n      &amp;&amp; _bottom == typedOther._bottom;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "EdgeInsetsGeometry",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "painting\/EdgeInsetsGeometry\/EdgeInsetsGeometry.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsetsGeometry();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry add(EdgeInsetsGeometry other) {\n  return _MixedEdgeInsets.fromLRSETB(\n    _left + other._left,\n    _right + other._right,\n    _start + other._start,\n    _end + other._end,\n    _top + other._top,\n    _bottom + other._bottom,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "along",
            "type": "dart:core.double",
            "desc": "<p>The total offset in the given direction.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "axis",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/along.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double along(Axis axis) {\n  assert(axis != null);\n  switch (axis) {\n    case Axis.horizontal:\n      return horizontal;\n    case Axis.vertical:\n      return vertical;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "deflateSize",
            "type": "dart:ui.Size",
            "desc": "<p>Returns a new size that is smaller than the given size by the amount of\ninset in the horizontal and vertical directions.<\/p>\n<p>If the argument is smaller than <a href=\"painting\/EdgeInsetsGeometry\/collapsedSize.html\">collapsedSize<\/a>, then the resulting size\nwill have negative dimensions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets\/deflateRect.html\">EdgeInsets.deflateRect<\/a>, to deflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than a <a href=\"dart-ui\/Size-class.html\">Size<\/a>. (for\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, requires first calling <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a> to establish\nhow the start and end map to the left or right).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/inflateSize.html\">inflateSize<\/a>, to inflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than deflating it.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/deflateSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size deflateSize(Size size) {\n  return Size(size.width - horizontal, size.height - vertical);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "inflateSize",
            "type": "dart:ui.Size",
            "desc": "<p>Returns a new size that is bigger than the given size by the amount of\ninset in the horizontal and vertical directions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets\/inflateRect.html\">EdgeInsets.inflateRect<\/a>, to inflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than a <a href=\"dart-ui\/Size-class.html\">Size<\/a> (for\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, requires first calling <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a> to establish\nhow the start and end map to the left or right).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/deflateSize.html\">deflateSize<\/a>, to deflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than inflating it.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/inflateSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size inflateSize(Size size) {\n  return Size(size.width + horizontal, size.height + vertical);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/EdgeInsets\/zero-constant.html\">EdgeInsets.zero<\/a>, and\nthe result is an object of the same type as the non-null argument.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/lerp.html\">lerp<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EdgeInsetsGeometry lerp(EdgeInsetsGeometry a, EdgeInsetsGeometry b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  if (a is EdgeInsets &amp;&amp; b is EdgeInsets)\n    return EdgeInsets.lerp(a, b, t);\n  if (a is EdgeInsetsDirectional &amp;&amp; b is EdgeInsetsDirectional)\n    return EdgeInsetsDirectional.lerp(a, b, t);\n  return _MixedEdgeInsets.fromLRSETB(\n    ui.lerpDouble(a._left, b._left, t),\n    ui.lerpDouble(a._right, b._right, t),\n    ui.lerpDouble(a._start, b._start, t),\n    ui.lerpDouble(a._end, b._end, t),\n    ui.lerpDouble(a._top, b._top, t),\n    ui.lerpDouble(a._bottom, b._bottom, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "resolve",
            "type": "painting.EdgeInsets",
            "desc": "<p>Convert this instance into an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, which uses literal coordinates\n(i.e. the <code>left<\/code> coordinate being explicitly a distance from the left, and\nthe <code>right<\/code> coordinate being explicitly a distance from the right).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/resolve.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets resolve(TextDirection direction);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "subtract",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/EdgeInsetsGeometry\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/subtract.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry subtract(EdgeInsetsGeometry other) {\n  return _MixedEdgeInsets.fromLRSETB(\n    _left - other._left,\n    _right - other._right,\n    _start - other._start,\n    _end - other._end,\n    _top - other._top,\n    _bottom - other._bottom,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_start == 0.0 &amp;&amp; _end == 0.0) {\n    if (_left == 0.0 &amp;&amp; _right == 0.0 &amp;&amp; _top == 0.0 &amp;&amp; _bottom == 0.0)\n      return 'EdgeInsets.zero';\n    if (_left == _right &amp;&amp; _right == _top &amp;&amp; _top == _bottom)\n      return 'EdgeInsets.all(${_left.toStringAsFixed(1)})';\n    return 'EdgeInsets(${_left.toStringAsFixed(1)}, '\n                      '${_top.toStringAsFixed(1)}, '\n                      '${_right.toStringAsFixed(1)}, '\n                      '${_bottom.toStringAsFixed(1)})';\n  }\n  if (_left == 0.0 &amp;&amp; _right == 0.0) {\n    return 'EdgeInsetsDirectional(${_start.toStringAsFixed(1)}, '\n                                 '${_top.toStringAsFixed(1)}, '\n                                 '${_end.toStringAsFixed(1)}, '\n                                 '${_bottom.toStringAsFixed(1)})';\n  }\n  return 'EdgeInsets(${_left.toStringAsFixed(1)}, '\n                    '${_top.toStringAsFixed(1)}, '\n                    '${_right.toStringAsFixed(1)}, '\n                    '${_bottom.toStringAsFixed(1)})'\n         ' + '\n         'EdgeInsetsDirectional(${_start.toStringAsFixed(1)}, '\n                               '0.0, '\n                               '${_end.toStringAsFixed(1)}, '\n                               '0.0)';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator unary-",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Returns the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object with each dimension negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/operator_unary_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator -();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~\/",
            "type": "painting.EdgeInsetsGeometry",
            "desc": "<p>Integer divides the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n<p>This operator may have unexpected results when applied to a mixture of\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> and <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.EdgeInsetsGeometry",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/EdgeInsetsGeometry\/operator_truncate_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator ~\/(double other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "collapsedSize",
            "type": "dart:ui.Size",
            "types": [],
            "desc": "<p>The size that this <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> would occupy with an empty interior.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsGeometry",
            "isConstant": false,
            "href": "painting\/EdgeInsetsGeometry\/collapsedSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get collapsedSize =&gt; Size(horizontal, vertical);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "flipped",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>An <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> with top and bottom, left and right, and start and end flipped.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsGeometry",
            "isConstant": false,
            "href": "painting\/EdgeInsetsGeometry\/flipped.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get flipped =&gt; _MixedEdgeInsets.fromLRSETB(_right, _left, _end, _start, _bottom, _top);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/EdgeInsetsGeometry\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsGeometry",
            "isConstant": false,
            "href": "painting\/EdgeInsetsGeometry\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_left, _right, _start, _end, _top, _bottom);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "horizontal",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The total offset in the horizontal direction.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsGeometry",
            "isConstant": false,
            "href": "painting\/EdgeInsetsGeometry\/horizontal.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get horizontal =&gt; _left + _right + _start + _end;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isNonNegative",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether every dimension is non-negative.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsGeometry",
            "isConstant": false,
            "href": "painting\/EdgeInsetsGeometry\/isNonNegative.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNonNegative {\n  return _left &gt;= 0.0\n      &amp;&amp; _right &gt;= 0.0\n      &amp;&amp; _start &gt;= 0.0\n      &amp;&amp; _end &gt;= 0.0\n      &amp;&amp; _top &gt;= 0.0\n      &amp;&amp; _bottom &gt;= 0.0;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "vertical",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The total offset in the vertical direction.<\/p>\n        ",
            "memberOf": "painting.EdgeInsetsGeometry",
            "isConstant": false,
            "href": "painting\/EdgeInsetsGeometry\/vertical.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get vertical =&gt; _top + _bottom;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "painting.EdgeInsets",
        "painting.EdgeInsetsDirectional",
        "widgets.EdgeInsetsGeometryTween"
    ],
    "realImplementors": [
        "painting.EdgeInsets",
        "painting.EdgeInsetsDirectional",
        "widgets.EdgeInsetsGeometryTween"
    ],
    "cn": [],
    "href": "painting\/EdgeInsetsGeometry-class.html",
    "desc": "<p>Base class for <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> that allows for text-direction aware\nresolution.<\/p>\n<p>A property or argument of this type accepts classes created either with <a href=\"painting\/EdgeInsets\/EdgeInsets.fromLTRB.html\">new\nEdgeInsets.fromLTRB<\/a> and its variants, or <a href=\"painting\/EdgeInsetsDirectional\/EdgeInsetsDirectional.fromSTEB.html\">new\nEdgeInsetsDirectional.fromSTEB<\/a> and its variants.<\/p>\n<p>To convert an <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object of indeterminate type into a\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> object, call the <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a> method.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Padding-class.html\">Padding<\/a>, a widget that describes margins using <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a>.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "EdgeInsetsGeometry"
}