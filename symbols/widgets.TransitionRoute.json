{
    "name": "widgets.TransitionRoute",
    "extends": [
        "widgets.OverlayRoute",
        "widgets.Route",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "TransitionRoute",
            "type": "",
            "desc": "<p>Creates a route that animates itself when it is pushed or popped.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "settings",
                    "type": "widgets.RouteSettings",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/TransitionRoute\/TransitionRoute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TransitionRoute({\n  RouteSettings settings,\n}) : super(settings: settings);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "canTransitionFrom",
            "type": "dart:core.bool",
            "desc": "<p>Returns true if <code>previousRoute<\/code> should animate when this route\nis pushed on top of it or when then this route is popped off of it.<\/p>\n<p>Subclasses can override this method to restrict the set of routes they\nneed to coordinate transitions with.<\/p>\n<p>If true, and <code>previousRoute.canTransitionTo()<\/code> is true, then the\nprevious route's <code>buildTransitions<\/code> <code>secondaryAnimation<\/code> will\nrun from 0.0 - 1.0 when this route is pushed on top of\nit. Similarly, if this route is popped off of <code>previousRoute<\/code>\nthe previous route's <code>secondaryAnimation<\/code> will run from 1.0 - 0.0.<\/p>\n<p>If false, then the previous route's <code>buildTransitions<\/code>\n<code>secondaryAnimation<\/code> value will be kAlwaysDismissedAnimation. In\nother words <code>previousRoute<\/code> will not animate when this route is\npushed on top of it or when then this route is popped off of it.<\/p>\n<p>Returns true by default.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/TransitionRoute\/canTransitionTo.html\">canTransitionTo<\/a>, which must be true for <code>previousRoute<\/code> for its\n<code>buildTransitions<\/code> <code>secondaryAnimation<\/code> to run.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "previousRoute",
                    "type": "widgets.TransitionRoute",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/canTransitionFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool canTransitionFrom(TransitionRoute&lt;dynamic&gt; previousRoute) =&gt; true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "canTransitionTo",
            "type": "dart:core.bool",
            "desc": "<p>Returns true if this route supports a transition animation that runs\nwhen <code>nextRoute<\/code> is pushed on top of it or when <code>nextRoute<\/code> is popped\noff of it.<\/p>\n<p>Subclasses can override this method to restrict the set of routes they\nneed to coordinate transitions with.<\/p>\n<p>If true, and <code>nextRoute.canTransitionFrom()<\/code> is true, then the\n<code>buildTransitions<\/code> <code>secondaryAnimation<\/code> will run from 0.0 - 1.0\nwhen <code>nextRoute<\/code> is pushed on top of this one.  Similarly, if\nthe <code>nextRoute<\/code> is popped off of this route, the\n<code>secondaryAnimation<\/code> will run from 1.0 - 0.0.<\/p>\n<p>If false, this route's <code>buildTransitions<\/code> <code>secondaryAnimation<\/code> parameter\nvalue will be <a href=\"animation\/kAlwaysDismissedAnimation-constant.html\">kAlwaysDismissedAnimation<\/a>. In other words, this route\nwill not animate when when <code>nextRoute<\/code> is pushed on top of it or when\n<code>nextRoute<\/code> is popped off of it.<\/p>\n<p>Returns true by default.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/TransitionRoute\/canTransitionFrom.html\">canTransitionFrom<\/a>, which must be true for <code>nextRoute<\/code> for the\n<code>buildTransitions<\/code> <code>secondaryAnimation<\/code> to run.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "nextRoute",
                    "type": "widgets.TransitionRoute",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/canTransitionTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool canTransitionTo(TransitionRoute&lt;dynamic&gt; nextRoute) =&gt; true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createAnimation",
            "type": "animation.Animation<dart:core.double>",
            "desc": "<p>Called to create the animation that exposes the current progress of\nthe transition controlled by the animation controller created by\n<a href=\"widgets\/TransitionRoute\/createAnimationController.html\">createAnimationController()<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/createAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; createAnimation() {\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  assert(_controller != null);\n  return _controller.view;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "animation.Animation",
                "dart:core.double"
            ]
        },
        {
            "name": "createAnimationController",
            "type": "animation.AnimationController",
            "desc": "<p>Called to create the animation controller that will drive the transitions to\nthis route from the previous one, and back to the previous route from this\none.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/createAnimationController.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AnimationController createAnimationController() {\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  final Duration duration = transitionDuration;\n  assert(duration != null &amp;&amp; duration &gt;= Duration.zero);\n  return AnimationController(\n    duration: duration,\n    debugLabel: debugLabel,\n    vsync: navigator,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "didChangeNext",
            "type": "",
            "desc": "<p>This route's next route has changed to the given new route. This is called\non a route whenever the next route changes for any reason, so long as it\nis in the history, including when a route is first added to a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>\n(e.g. by <a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a>), except for cases when <a href=\"widgets\/TransitionRoute\/didPopNext.html\">didPopNext<\/a> would be\ncalled. <code>nextRoute<\/code> will be null if there's no next route.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "nextRoute",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/didChangeNext.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didChangeNext(Route&lt;dynamic&gt; nextRoute) {\n  assert(_controller != null, '$runtimeType.didChangeNext called before calling install() or after calling dispose().');\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  _updateSecondaryAnimation(nextRoute);\n  super.didChangeNext(nextRoute);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didPop",
            "type": "dart:core.bool",
            "desc": "<p>A request was made to pop this route. If the route can handle it\ninternally (e.g. because it has its own stack of internal state) then\nreturn false, otherwise return true (by return the value of calling\n<code>super.didPop<\/code>). Returning false will prevent the default behavior of\n<a href=\"widgets\/NavigatorState\/pop.html\">NavigatorState.pop<\/a>.<\/p>\n<p>When this function returns true, the navigator removes this route from\nthe history but does not yet call <a href=\"widgets\/TransitionRoute\/dispose.html\">dispose<\/a>. Instead, it is the route's\nresponsibility to call <a href=\"widgets\/NavigatorState\/finalizeRoute.html\">NavigatorState.finalizeRoute<\/a>, which will in turn\ncall <a href=\"widgets\/TransitionRoute\/dispose.html\">dispose<\/a> on the route. This sequence lets the route perform an\nexit animation (or some other visual effect) after being popped but prior\nto being disposed.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "result",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/didPop.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool didPop(T result) {\n  assert(_controller != null, '$runtimeType.didPop called before calling install() or after calling dispose().');\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  _result = result;\n  _controller.reverse();\n  return super.didPop(result);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "didPopNext",
            "type": "",
            "desc": "<p>The given route, which was above this one, has been popped off the\nnavigator.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "nextRoute",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/didPopNext.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didPopNext(Route&lt;dynamic&gt; nextRoute) {\n  assert(_controller != null, '$runtimeType.didPopNext called before calling install() or after calling dispose().');\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  _updateSecondaryAnimation(nextRoute);\n  super.didPopNext(nextRoute);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didPush",
            "type": "scheduler.TickerFuture",
            "desc": "<p>Called after <a href=\"widgets\/TransitionRoute\/install.html\">install<\/a> when the route is pushed onto the navigator.<\/p>\n<p>The returned value resolves when the push transition is complete.<\/p>\n<p>The <a href=\"widgets\/TransitionRoute\/didChangeNext.html\">didChangeNext<\/a> and <a href=\"widgets\/Route\/didChangePrevious.html\">didChangePrevious<\/a> methods are typically called\nimmediately after this method is called.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/didPush.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nTickerFuture didPush() {\n  assert(_controller != null, '$runtimeType.didPush called before calling install() or after calling dispose().');\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  _animation.addStatusListener(_handleStatusChanged);\n  return _controller.forward();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "didReplace",
            "type": "",
            "desc": "<p>Called after <a href=\"widgets\/TransitionRoute\/install.html\">install<\/a> when the route replaced another in the navigator.<\/p>\n<p>The <a href=\"widgets\/TransitionRoute\/didChangeNext.html\">didChangeNext<\/a> and <a href=\"widgets\/Route\/didChangePrevious.html\">didChangePrevious<\/a> methods are typically called\nimmediately after this method is called.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "oldRoute",
                    "type": "widgets.Route",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/didReplace.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didReplace(Route&lt;dynamic&gt; oldRoute) {\n  assert(_controller != null, '$runtimeType.didReplace called before calling install() or after calling dispose().');\n  assert(!_transitionCompleter.isCompleted, 'Cannot reuse a $runtimeType after disposing it.');\n  if (oldRoute is TransitionRoute)\n    _controller.value = oldRoute._controller.value;\n  _animation.addStatusListener(_handleStatusChanged);\n  super.didReplace(oldRoute);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>The route should remove its overlays and free any other resources.<\/p>\n<p>This route is no longer referenced by the navigator.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  assert(!_transitionCompleter.isCompleted, 'Cannot dispose a $runtimeType twice.');\n  _controller?.dispose();\n  _transitionCompleter.complete(_result);\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "install",
            "type": "",
            "desc": "<p>Called when the route is inserted into the navigator.<\/p>\n<p>Use this to populate <a href=\"widgets\/OverlayRoute\/overlayEntries.html\">overlayEntries<\/a> and add them to the overlay\n(accessible as <code>Navigator.overlay<\/code>). (The reason the <a href=\"widgets\/Route-class.html\">Route<\/a> is\nresponsible for doing this, rather than the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, is that the\n<a href=\"widgets\/Route-class.html\">Route<\/a> will be responsible for <em>removing<\/em> the entries and this way it's\nsymmetric.)<\/p>\n<p>The <code>insertionPoint<\/code> argument will be null if this is the first route\ninserted. Otherwise, it indicates the overlay entry to place immediately\nbelow the first overlay for this route.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [
                {
                    "name": "insertionPoint",
                    "type": "widgets.OverlayEntry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/install.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid install(OverlayEntry insertionPoint) {\n  assert(!_transitionCompleter.isCompleted, 'Cannot install a $runtimeType after disposing it.');\n  _controller = createAnimationController();\n  assert(_controller != null, '$runtimeType.createAnimationController() returned null.');\n  _animation = createAnimation();\n  assert(_animation != null, '$runtimeType.createAnimation() returned null.');\n  super.install(insertionPoint);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TransitionRoute",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TransitionRoute\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(animation: $_controller)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "animation",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation that drives the route's transition and the previous route's\nforward transition.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/animation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get animation =&gt; _animation;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "completed",
            "type": "dart:async.Future",
            "types": [],
            "desc": "<p>This future completes only once the transition itself has finished, after\nthe overlay entries have been removed from the navigator's overlay.<\/p>\n<p>This future completes once the animation has been dismissed. That will be\nafter <a href=\"widgets\/Route\/popped.html\">popped<\/a>, because <a href=\"widgets\/Route\/popped.html\">popped<\/a> typically completes before the animation\neven starts, as soon as the route is popped.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/completed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; get completed =&gt; _transitionCompleter.future;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "controller",
            "type": "animation.AnimationController",
            "types": [],
            "desc": "<p>The animation controller that the route uses to drive the transitions.<\/p>\n<p>The animation itself is exposed by the <a href=\"widgets\/TransitionRoute\/animation.html\">animation<\/a> property.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/controller.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nAnimationController get controller =&gt; _controller;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "debugLabel",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A short description of this route useful for debugging.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/debugLabel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get debugLabel =&gt; '$runtimeType';<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "finishedWhenPopped",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Controls whether <a href=\"widgets\/TransitionRoute\/didPop.html\">didPop<\/a> calls <a href=\"widgets\/NavigatorState\/finalizeRoute.html\">NavigatorState.finalizeRoute<\/a>.<\/p>\n<p>If true, this route removes its overlay entries during <a href=\"widgets\/TransitionRoute\/didPop.html\">didPop<\/a>.\nSubclasses can override this getter if they want to delay finalization\n(for example to animate the route's exit before removing it from the\noverlay).<\/p>\n<p>Subclasses that return false from <a href=\"widgets\/TransitionRoute\/finishedWhenPopped.html\">finishedWhenPopped<\/a> are responsible for\ncalling <a href=\"widgets\/NavigatorState\/finalizeRoute.html\">NavigatorState.finalizeRoute<\/a> themselves.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/finishedWhenPopped.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get finishedWhenPopped =&gt; _controller.status == AnimationStatus.dismissed;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "opaque",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the route obscures previous routes when the transition is complete.<\/p>\n<p>When an opaque route's entrance transition is complete, the routes behind\nthe opaque route will not be built to save resources.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/opaque.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get opaque;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "secondaryAnimation",
            "type": "animation.Animation<dart:core.double>",
            "types": [
                "animation.Animation",
                "dart:core.double"
            ],
            "desc": "<p>The animation for the route being pushed on top of this route. This\nanimation lets this route coordinate with the entrance and exit transition\nof routes pushed on top of this route.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/secondaryAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get secondaryAnimation =&gt; _secondaryAnimation;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "transitionDuration",
            "type": "dart:core.Duration",
            "types": [],
            "desc": "<p>The duration the transition lasts.<\/p>\n        ",
            "memberOf": "widgets.TransitionRoute",
            "isConstant": false,
            "href": "widgets\/TransitionRoute\/transitionDuration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get transitionDuration;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "cupertino.CupertinoPageRoute",
        "material.MaterialPageRoute",
        "widgets.ModalRoute",
        "widgets.PageRoute",
        "widgets.PageRouteBuilder",
        "widgets.PopupRoute"
    ],
    "realImplementors": [
        "cupertino.CupertinoPageRoute",
        "material.MaterialPageRoute"
    ],
    "cn": [],
    "href": "widgets\/TransitionRoute-class.html",
    "desc": "<p>A route with entrance and exit transitions.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TransitionRoute"
}