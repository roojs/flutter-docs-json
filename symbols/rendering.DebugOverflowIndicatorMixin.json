{
    "name": "rendering.DebugOverflowIndicatorMixin",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "DebugOverflowIndicatorMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "rendering.DebugOverflowIndicatorMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/DebugOverflowIndicatorMixin\/DebugOverflowIndicatorMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "paintOverflowIndicator",
            "type": "",
            "desc": "<p>To be called when the overflow indicators should be painted.<\/p>\n<p>Typically only called if there is an overflow, and only from within a\ndebug build.<\/p>\n<p>See example code in <a href=\"rendering\/DebugOverflowIndicatorMixin-mixin.html\">DebugOverflowIndicatorMixin<\/a> documentation.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.DebugOverflowIndicatorMixin",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "rendering.PaintingContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "containerRect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childRect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "overflowHints",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/DebugOverflowIndicatorMixin\/paintOverflowIndicator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paintOverflowIndicator(\n  PaintingContext context,\n  Offset offset,\n  Rect containerRect,\n  Rect childRect, {\n  String overflowHints,\n}) {\n  final RelativeRect overflow = RelativeRect.fromRect(containerRect, childRect);\n\n  if (overflow.left &lt;= 0.0 &amp;&amp;\n      overflow.right &lt;= 0.0 &amp;&amp;\n      overflow.top &lt;= 0.0 &amp;&amp;\n      overflow.bottom &lt;= 0.0) {\n    return;\n  }\n\n  final List&lt;_OverflowRegionData&gt; overflowRegions = _calculateOverflowRegions(overflow, containerRect);\n  for (_OverflowRegionData region in overflowRegions) {\n    context.canvas.drawRect(region.rect.shift(offset), _indicatorPaint);\n\n    if (_indicatorLabel[region.side.index].text?.text != region.label) {\n      _indicatorLabel[region.side.index].text = TextSpan(\n        text: region.label,\n        style: _indicatorTextStyle,\n      );\n      _indicatorLabel[region.side.index].layout();\n    }\n\n    final Offset labelOffset = region.labelOffset + offset;\n    final Offset centerOffset = Offset(-_indicatorLabel[region.side.index].width \/ 2.0, 0.0);\n    final Rect textBackgroundRect = centerOffset &amp; _indicatorLabel[region.side.index].size;\n    context.canvas.save();\n    context.canvas.translate(labelOffset.dx, labelOffset.dy);\n    context.canvas.rotate(region.rotation);\n    context.canvas.drawRect(textBackgroundRect, _labelBackgroundPaint);\n    _indicatorLabel[region.side.index].paint(context.canvas, centerOffset);\n    context.canvas.restore();\n  }\n\n  if (_overflowReportNeeded) {\n    _overflowReportNeeded = false;\n    _reportOverflow(overflow, overflowHints);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "reassemble",
            "type": "",
            "desc": "<p>Cause the entire subtree rooted at the given <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> to be marked\ndirty for layout, paint, etc, so that the effects of a hot reload can be\nseen, or so that the effect of changing a global debug flag (such as\n<a href=\"rendering\/debugPaintSizeEnabled.html\">debugPaintSizeEnabled<\/a>) can be applied.<\/p>\n<p>This is called by the <a href=\"rendering\/RendererBinding-mixin.html\">RendererBinding<\/a> in response to the\n<code>ext.flutter.reassemble<\/code> hook, which is used by development tools when the\napplication code has changed, to cause the widget tree to pick up any\nchanged implementations.<\/p>\n<p>This is expensive and should not be called except during development.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/BindingBase\/reassembleApplication.html\">BindingBase.reassembleApplication<\/a><\/li><\/ul>",
            "static": false,
            "memberOf": "rendering.DebugOverflowIndicatorMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/DebugOverflowIndicatorMixin\/reassemble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid reassemble() {\n  super.reassemble();\n  \/\/ Users expect error messages to be shown again after hot reload.\n  assert(() {\n    _overflowReportNeeded = true;\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/DebugOverflowIndicatorMixin-mixin.html",
    "desc": "<p>An mixin indicator that is drawn when a <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> overflows its\ncontainer.<\/p>\n<p>This is used by some RenderObjects that are containers to show where, and by\nhow much, their children overflow their containers. These indicators are\ntypically only shown in a debug build (where the call to\n<a href=\"rendering\/DebugOverflowIndicatorMixin\/paintOverflowIndicator.html\">paintOverflowIndicator<\/a> is surrounded by an assert).<\/p>\n<p>This class will also print a debug message to the console when the container\noverflows. It will print on the first occurrence, and once after each time that\n<a href=\"rendering\/DebugOverflowIndicatorMixin\/reassemble.html\">reassemble<\/a> is called.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyRenderObject extends RenderAligningShiftedBox with DebugOverflowIndicatorMixin {\n  MyRenderObject({\n    AlignmentGeometry alignment,\n    TextDirection textDirection,\n    RenderBox child,\n  }) : super.mixin(alignment, textDirection, child);\n\n  Rect _containerRect;\n  Rect _childRect;\n\n  @override\n  void performLayout() {\n    \/\/ ...\n    final BoxParentData childParentData = child.parentData;\n    _containerRect = Offset.zero &amp; size;\n    _childRect = childParentData.offset &amp; child.size;\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    \/\/ Do normal painting here...\n    \/\/ ...\n\n    assert(() {\n      paintOverflowIndicator(context, offset, _containerRect, _childRect);\n      return true;\n    }());\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderUnconstrainedBox-class.html\">RenderUnconstrainedBox<\/a> and <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> for examples of classes that use this indicator mixin.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "DebugOverflowIndicatorMixin"
}