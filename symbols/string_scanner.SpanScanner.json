{
    "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that exposes matched ranges as source map\n<code>Span<\/code>s.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "package-string_scanner_string_scanner\/SpanScanner-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "string_scanner",
    "name": "string_scanner.SpanScanner",
    "shortname": "SpanScanner",
    "extends": [
        "string_scanner.StringScanner",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that starts scanning from <code>position<\/code>.<\/p>\n<p><code>sourceUrl<\/code> is used as <a href=\"package-string_scanner_string_scanner\/StringScanner\/sourceUrl.html\">SourceLocation.sourceUrl<\/a> for the returned\n<a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a>s as well as for error reporting. It can be a <a href=\"dart-core\/String-class.html\">String<\/a>, a\n<a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SpanScanner(String string, {sourceUrl, int position})\n    : _sourceFile = new SourceFile.fromString(string, url: sourceUrl),\n      super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "sourceUrl",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<dynamic>"
                },
                {
                    "name": "string",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> with <code>message<\/code> as well as a detailed\ndescription of the location of the error in the string.<\/p>\n<p><code>match<\/code> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a> property. By default, the error is associated with the last\nmatch.<\/p>\n<p>If <code>position<\/code> and\/or <code>length<\/code> are passed, they are used as the error span\ninstead. If only <code>length<\/code> is passed, <code>position<\/code> defaults to the current\nposition; if only <code>position<\/code> is passed, <code>length<\/code> defaults to 0.<\/p>\n<p>It's an error to pass <code>match<\/code> at the same time as <code>position<\/code> or <code>length<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void error(String message, {Match match, int position, int length}) {\n  validateErrorArgs(string, match, position, length);\n\n  if (match == null &amp;&amp; position == null &amp;&amp; length == null) match = lastMatch;\n  if (position == null) {\n    position = match == null ? this.position : match.start;\n  }\n  if (length == null) length = match == null ? 0 : match.end - match.start;\n\n  var span = _sourceFile.span(position, position + length);\n  throw new StringScannerException(message, span, string);\n}<\/code><\/pre>\n    ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/error.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "params": [
                {
                    "name": "length",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "match",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Match"
                },
                {
                    "name": "message",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns whether or not <code>pattern<\/code> matches at the current position of the\nstring.<\/p>\n<p>This doesn't move the scan pointer forward.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Pattern pattern) {\n  if (!super.matches(pattern)) {\n    _lastSpan = null;\n    return false;\n  }\n\n  _lastSpan = _sourceFile.span(position, lastMatch.end);\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/matches.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "params": [
                {
                    "name": "pattern",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Pattern"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> representing the source range between <code>startState<\/code>\nand the current position.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan spanFrom(LineScannerState startState, [LineScannerState endState]) {\n  var endPosition = endState == null ? position : endState.position;\n  return _sourceFile.span(startState.position, endPosition);\n}<\/code><\/pre>\n    ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/spanFrom.html",
            "isDeprecated": "0",
            "type": "source_span.FileSpan",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "params": [
                {
                    "name": "endState",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "string_scanner.LineScannerState"
                },
                {
                    "name": "startState",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "string_scanner.LineScannerState"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _sourceFile.getColumn(position);<\/code><\/pre>\n        ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/column.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "string_scanner.SpanScanner",
            "params": []
        },
        {
            "desc": "<p>Returns an empty span at the current location.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get emptySpan =&gt; location.pointSpan();<\/code><\/pre>\n        ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/emptySpan.html",
            "isDeprecated": "0",
            "type": "source_span.FileSpan",
            "memberOf": "string_scanner.SpanScanner",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> for <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n<p>This is the span for the entire match. There's no way to get spans for\nsubgroups since <a href=\"dart-core\/Match-class.html\">Match<\/a> exposes no information about their positions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get lastSpan {\n  if (lastMatch == null) _lastSpan = null;\n  return _lastSpan;\n}<\/code><\/pre>\n        ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/lastSpan.html",
            "isDeprecated": "0",
            "type": "source_span.FileSpan",
            "memberOf": "string_scanner.SpanScanner",
            "params": []
        },
        {
            "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _sourceFile.getLine(position);<\/code><\/pre>\n        ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/line.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "string_scanner.SpanScanner",
            "params": []
        },
        {
            "desc": "<p>The current location of the scanner.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation get location =&gt; _sourceFile.location(position);<\/code><\/pre>\n        ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/location.html",
            "isDeprecated": "0",
            "type": "source_span.FileLocation",
            "memberOf": "string_scanner.SpanScanner",
            "params": []
        },
        {
            "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt; new _SpanScannerState(this, position);<\/code><\/pre>\n        ",
            "href": "package-string_scanner_string_scanner\/SpanScanner\/state.html",
            "isDeprecated": "0",
            "type": "string_scanner.LineScannerState",
            "memberOf": "string_scanner.SpanScanner",
            "params": []
        }
    ]
}