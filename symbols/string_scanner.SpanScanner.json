{
    "name": "string_scanner.SpanScanner",
    "extends": [
        "string_scanner.StringScanner",
        "dart:core.Object"
    ],
    "memberOf": "string_scanner",
    "events": [],
    "methods": [
        {
            "name": "SpanScanner",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that starts scanning from <code>position<\/code>.<\/p>\n<p><code>sourceUrl<\/code> is used as <a href=\"package-string_scanner_string_scanner\/StringScanner\/sourceUrl.html\">SourceLocation.sourceUrl<\/a> for the returned\n<a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a>s as well as for error reporting. It can be a <a href=\"dart-core\/String-class.html\">String<\/a>, a\n<a href=\"dart-core\/Uri-class.html\">Uri<\/a>, or <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "sig": "",
            "params": [
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sourceUrl",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SpanScanner(String string, {sourceUrl, int position})\n    : _sourceFile = new SourceFile.fromString(string, url: sourceUrl),\n      super(string, sourceUrl: sourceUrl, position: position);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "SpanScanner.eager",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that eagerly computes line and column numbers.<\/p>\n<p>In general <a href=\"package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.html\">new SpanScanner<\/a> will be more efficient, since it avoids extra\ncomputation on every scan. However, eager scanning can be useful for\nsituations where the normal course of parsing frequently involves\naccessing the current line and column numbers.<\/p>\n<p>Note that <em>only<\/em> the <code>line<\/code> and <code>column<\/code> fields on the <code>SpanScanner<\/code>\nitself and its <code>LineScannerState<\/code> are eagerly computed. To limit their\nmemory footprint, returned spans and locations will still lazily compute\ntheir line and column numbers.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "sig": "",
            "params": [
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sourceUrl",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.eager.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SpanScanner.eager(String string, {sourceUrl, int position}) =\n    EagerSpanScanner;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "error",
            "type": "",
            "desc": "<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> with <code>message<\/code> as well as a detailed\ndescription of the location of the error in the string.<\/p>\n<p><code>match<\/code> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a> property. By default, the error is associated with the last\nmatch.<\/p>\n<p>If <code>position<\/code> and\/or <code>length<\/code> are passed, they are used as the error span\ninstead. If only <code>length<\/code> is passed, <code>position<\/code> defaults to the current\nposition; if only <code>position<\/code> is passed, <code>length<\/code> defaults to 0.<\/p>\n<p>It's an error to pass <code>match<\/code> at the same time as <code>position<\/code> or <code>length<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "match",
                    "type": "dart:core.Match",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/error.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void error(String message, {Match match, int position, int length}) {\n  validateErrorArgs(string, match, position, length);\n\n  if (match == null &amp;&amp; position == null &amp;&amp; length == null) match = lastMatch;\n  if (position == null) {\n    position = match == null ? this.position : match.start;\n  }\n  if (length == null) length = match == null ? 0 : match.end - match.start;\n\n  var span = _sourceFile.span(position, position + length);\n  throw new StringScannerException(message, span, string);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "matches",
            "type": "dart:core.bool",
            "desc": "<p>Returns whether or not <code>pattern<\/code> matches at the current position of the\nstring.<\/p>\n<p>This doesn't move the scan pointer forward.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "sig": "",
            "params": [
                {
                    "name": "pattern",
                    "type": "dart:core.Pattern",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/matches.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(Pattern pattern) {\n  if (!super.matches(pattern)) {\n    _lastSpan = null;\n    return false;\n  }\n\n  _lastSpan = _sourceFile.span(position, lastMatch.end);\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "spanFrom",
            "type": "source_span.FileSpan",
            "desc": "<p>Creates a <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> representing the source range between <code>startState<\/code>\nand the current position.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "sig": "",
            "params": [
                {
                    "name": "startState",
                    "type": "string_scanner.LineScannerState",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endState",
                    "type": "string_scanner.LineScannerState",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/spanFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan spanFrom(LineScannerState startState, [LineScannerState endState]) {\n  var endPosition = endState == null ? position : endState.position;\n  return _sourceFile.span(startState.position, endPosition);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "SpanScanner.within",
            "type": "",
            "desc": "<p>Creates a new <a href=\"package-string_scanner_string_scanner\/SpanScanner-class.html\">SpanScanner<\/a> that scans within <code>span<\/code>.<\/p>\n<p>This scans through <code>span.text<\/code>, but emits new spans from <code>span.file<\/code> in\ntheir appropriate relative positions. The <a href=\"package-string_scanner_string_scanner\/StringScanner\/string.html\">string<\/a> field contains only\n<code>span.text<\/code>, and <a href=\"package-string_scanner_string_scanner\/StringScanner\/position.html\">position<\/a>, <a href=\"package-string_scanner_string_scanner\/SpanScanner\/line.html\">line<\/a>, and <a href=\"package-string_scanner_string_scanner\/SpanScanner\/column.html\">column<\/a> are all relative to the\nspan.<\/p>\n    ",
            "static": false,
            "memberOf": "string_scanner.SpanScanner",
            "sig": "",
            "params": [
                {
                    "name": "span",
                    "type": "source_span.FileSpan",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/SpanScanner.within.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory SpanScanner.within(FileSpan span) = RelativeSpanScanner;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "column",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The scanner's current (zero-based) column number.<\/p>\n        ",
            "memberOf": "string_scanner.SpanScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/column.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get column =&gt; _sourceFile.getColumn(position);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "emptySpan",
            "type": "source_span.FileSpan",
            "types": [],
            "desc": "<p>Returns an empty span at the current location.<\/p>\n        ",
            "memberOf": "string_scanner.SpanScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/emptySpan.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get emptySpan =&gt; location.pointSpan();<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "lastSpan",
            "type": "source_span.FileSpan",
            "types": [],
            "desc": "<p>The <a href=\"package-source_span_source_span\/FileSpan-class.html\">FileSpan<\/a> for <a href=\"package-string_scanner_string_scanner\/StringScanner\/lastMatch.html\">lastMatch<\/a>.<\/p>\n<p>This is the span for the entire match. There's no way to get spans for\nsubgroups since <a href=\"dart-core\/Match-class.html\">Match<\/a> exposes no information about their positions.<\/p>\n        ",
            "memberOf": "string_scanner.SpanScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/lastSpan.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSpan get lastSpan {\n  if (lastMatch == null) _lastSpan = null;\n  return _lastSpan;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "line",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The scanner's current (zero-based) line number.<\/p>\n        ",
            "memberOf": "string_scanner.SpanScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/line.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get line =&gt; _sourceFile.getLine(position);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "location",
            "type": "source_span.FileLocation",
            "types": [],
            "desc": "<p>The current location of the scanner.<\/p>\n        ",
            "memberOf": "string_scanner.SpanScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/location.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileLocation get location =&gt; _sourceFile.location(position);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "state",
            "type": "string_scanner.LineScannerState",
            "types": [],
            "desc": "<p>The scanner's state, including line and column information.<\/p>\n<p>This can be used to efficiently save and restore the state of the scanner\nwhen backtracking. A given <a href=\"package-string_scanner_string_scanner\/LineScannerState-class.html\">LineScannerState<\/a> is only valid for the\n<a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that created it.<\/p>\n<p>This does not include the scanner's match information.<\/p>\n        ",
            "memberOf": "string_scanner.SpanScanner",
            "isConstant": false,
            "href": "package-string_scanner_string_scanner\/SpanScanner\/state.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LineScannerState get state =&gt; new _SpanScannerState(this, position);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-string_scanner_string_scanner\/SpanScanner-class.html",
    "desc": "<p>A subclass of <a href=\"package-string_scanner_string_scanner\/LineScanner-class.html\">LineScanner<\/a> that exposes matched ranges as source map\n<code>Span<\/code>s.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SpanScanner"
}