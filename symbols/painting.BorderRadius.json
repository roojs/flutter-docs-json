{
    "name": "painting.BorderRadius",
    "extends": [
        "painting.BorderRadiusGeometry",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator %",
            "type": "painting.BorderRadius",
            "desc": "<p>Computes the remainder of each corner by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_modulo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator %(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft % other,\n    topRight: topRight % other,\n    bottomLeft: bottomLeft % other,\n    bottomRight: bottomRight % other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator *",
            "type": "painting.BorderRadius",
            "desc": "<p>Scales each corner of the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator *(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft * other,\n    topRight: topRight * other,\n    bottomLeft: bottomLeft * other,\n    bottomRight: bottomRight * other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator +",
            "type": "painting.BorderRadius",
            "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius operator +(BorderRadius other) {\n  return BorderRadius.only(\n    topLeft: topLeft + other.topLeft,\n    topRight: topRight + other.topRight,\n    bottomLeft: bottomLeft + other.bottomLeft,\n    bottomRight: bottomRight + other.bottomRight,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator -",
            "type": "painting.BorderRadius",
            "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius operator -(BorderRadius other) {\n  return BorderRadius.only(\n    topLeft: topLeft - other.topLeft,\n    topRight: topRight - other.topRight,\n    bottomLeft: bottomLeft - other.bottomLeft,\n    bottomRight: bottomRight - other.bottomRight,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator \/",
            "type": "painting.BorderRadius",
            "desc": "<p>Divides each corner of the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator \/(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft \/ other,\n    topRight: topRight \/ other,\n    bottomLeft: bottomLeft \/ other,\n    bottomRight: bottomRight \/ other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "painting.BorderRadiusGeometry",
            "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadius\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadius\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusGeometry add(BorderRadiusGeometry other) {\n  if (other is BorderRadius)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "BorderRadius.all",
            "type": "",
            "desc": "<p>Creates a border radius where all radii are <code>radius<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "radius",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/BorderRadius\/BorderRadius.all.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.all(Radius radius) : this.only(\n  topLeft: radius,\n  topRight: radius,\n  bottomLeft: radius,\n  bottomRight: radius,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "BorderRadius.circular",
            "type": "",
            "desc": "<p>Creates a border radius where all radii are <a href=\"painting\/BorderRadius\/BorderRadius.circular.html\">Radius.circular(radius)<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/BorderRadius\/BorderRadius.circular.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius.circular(double radius) : this.all(\n  Radius.circular(radius),\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "BorderRadius.horizontal",
            "type": "",
            "desc": "<p>Creates a horizontally symmetrical border radius where the left and right\nsides of the rectangle have the same radii.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "left",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/BorderRadius\/BorderRadius.horizontal.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.horizontal({\n  Radius left = Radius.zero,\n  Radius right = Radius.zero,\n}) : this.only(\n  topLeft: left,\n  topRight: right,\n  bottomLeft: left,\n  bottomRight: right,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.BorderRadius",
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/BorderRadius\/zero-constant.html\">BorderRadius.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.BorderRadius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderRadius lerp(BorderRadius a, BorderRadius b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return BorderRadius.only(\n    topLeft: Radius.lerp(a.topLeft, b.topLeft, t),\n    topRight: Radius.lerp(a.topRight, b.topRight, t),\n    bottomLeft: Radius.lerp(a.bottomLeft, b.bottomLeft, t),\n    bottomRight: Radius.lerp(a.bottomRight, b.bottomRight, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "BorderRadius.only",
            "type": "",
            "desc": "<p>Creates a border radius with only the given non-zero values. The other\ncorners will be right angles.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "topLeft",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "topRight",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottomLeft",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottomRight",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/BorderRadius\/BorderRadius.only.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.only({\n  this.topLeft = Radius.zero,\n  this.topRight = Radius.zero,\n  this.bottomLeft = Radius.zero,\n  this.bottomRight = Radius.zero,\n});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "resolve",
            "type": "painting.BorderRadius",
            "desc": "<p>Convert this instance into a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, so that the radii are\nexpressed for specific physical corners (top-left, top-right, etc) rather\nthan in a direction-dependent manner.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/resolve.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius resolve(TextDirection direction) =&gt; this;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "subtract",
            "type": "painting.BorderRadiusGeometry",
            "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadius\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadius\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/BorderRadius\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/subtract.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusGeometry subtract(BorderRadiusGeometry other) {\n  if (other is BorderRadius)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toRRect",
            "type": "dart:ui.RRect",
            "desc": "<p>Creates an <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> from the current border radius and a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/toRRect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect toRRect(Rect rect) {\n  return RRect.fromRectAndCorners(\n    rect,\n    topLeft: topLeft,\n    topRight: topRight,\n    bottomLeft: bottomLeft,\n    bottomRight: bottomRight,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator unary-",
            "type": "painting.BorderRadius",
            "desc": "<p>Returns the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> object with each corner negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_unary_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator -() {\n  return BorderRadius.only(\n    topLeft: -topLeft,\n    topRight: -topRight,\n    bottomLeft: -bottomLeft,\n    bottomRight: -bottomRight,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "BorderRadius.vertical",
            "type": "",
            "desc": "<p>Creates a vertically symmetric border radius where the top and bottom\nsides of the rectangle have the same radii.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "top",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/BorderRadius\/BorderRadius.vertical.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.vertical({\n  Radius top = Radius.zero,\n  Radius bottom = Radius.zero,\n}) : this.only(\n  topLeft: top,\n  topRight: top,\n  bottomLeft: bottom,\n  bottomRight: bottom,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~\/",
            "type": "painting.BorderRadius",
            "desc": "<p>Integer divides each corner of the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> by the given factor.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.BorderRadius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/BorderRadius\/operator_truncate_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator ~\/(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft ~\/ other,\n    topRight: topRight ~\/ other,\n    bottomLeft: bottomLeft ~\/ other,\n    bottomRight: bottomRight ~\/ other,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bottomLeft",
            "type": "dart:ui.Radius",
            "types": [],
            "desc": "<p>The bottom-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "memberOf": "painting.BorderRadius",
            "isConstant": false,
            "href": "painting\/BorderRadius\/bottomLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius bottomLeft\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bottomRight",
            "type": "dart:ui.Radius",
            "types": [],
            "desc": "<p>The bottom-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "memberOf": "painting.BorderRadius",
            "isConstant": false,
            "href": "painting\/BorderRadius\/bottomRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius bottomRight\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topLeft",
            "type": "dart:ui.Radius",
            "types": [],
            "desc": "<p>The top-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "memberOf": "painting.BorderRadius",
            "isConstant": false,
            "href": "painting\/BorderRadius\/topLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius topLeft\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "topRight",
            "type": "dart:ui.Radius",
            "types": [],
            "desc": "<p>The top-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "memberOf": "painting.BorderRadius",
            "isConstant": false,
            "href": "painting\/BorderRadius\/topRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius topRight\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "painting\/BorderRadius\/zero-constant.html",
            "desc": "<p>A border radius with all zero radii.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BorderRadius zero = BorderRadius.all(Radius.zero)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "zero",
            "memberOf": "painting.BorderRadius"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.BorderRadiusTween"
    ],
    "realImplementors": [
        "widgets.BorderRadiusTween"
    ],
    "cn": [],
    "href": "painting\/BorderRadius-class.html",
    "desc": "<p>An immutable set of radii for each corner of a rectangle.<\/p>\n<p>Used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> when the shape is a <a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>.<\/p>\n<p>The <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> class specifies offsets in terms of visual corners, e.g.\n<a href=\"painting\/BorderRadius\/topLeft.html\">topLeft<\/a>. These values are not affected by the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. To support\nboth left-to-right and right-to-left layouts, consider using\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>, which is expressed in terms that are relative to\na <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> (typically obtained from the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>).<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "BorderRadius"
}