{
    "desc": "<p>A material design panel that slides in horizontally from the edge of a\n<a href=\"material\/Scaffold-class.html\">Scaffold<\/a> to show navigation links in an application.<\/p>\n<p>Drawers are typically used with the <a href=\"material\/Scaffold\/drawer.html\">Scaffold.drawer<\/a> property. The child of\nthe drawer is usually a <a href=\"widgets\/ListView-class.html\">ListView<\/a> whose first child is a <a href=\"material\/DrawerHeader-class.html\">DrawerHeader<\/a>\nthat displays status information about the current user. The remaining\ndrawer children are often constructed with <a href=\"material\/ListTile-class.html\">ListTile<\/a>s, often concluding\nwith an <a href=\"material\/AboutListTile-class.html\">AboutListTile<\/a>.<\/p>\n<p>An open drawer can be closed by calling <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>. For example\na drawer item might close the drawer when tapped:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">ListTile(\n  leading: Icon(Icons.change_history),\n  title: Text('Change history'),\n  onTap: () {\n    \/\/ change app state...\n    Navigator.pop(context); \/\/ close the drawer\n  },\n);\n<\/code><\/pre>\n<p>The <a href=\"material\/AppBar-class.html\">AppBar<\/a> automatically displays an appropriate <a href=\"material\/IconButton-class.html\">IconButton<\/a> to show the\n<a href=\"material\/Drawer-class.html\">Drawer<\/a> when a <a href=\"material\/Drawer-class.html\">Drawer<\/a> is available in the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a>. The <a href=\"material\/Scaffold-class.html\">Scaffold<\/a>\nautomatically handles the edge-swipe gesture to show the drawer.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Scaffold\/drawer.html\">Scaffold.drawer<\/a>, where one specifies a <a href=\"material\/Drawer-class.html\">Drawer<\/a> so that it can be\nshown.<\/li>\n<li>\n<a href=\"material\/Scaffold\/of.html\">Scaffold.of<\/a>, to obtain the current <a href=\"material\/ScaffoldState-class.html\">ScaffoldState<\/a>, which manages the\ndisplay and animation of the drawer.<\/li>\n<li>\n<a href=\"material\/ScaffoldState\/openDrawer.html\">ScaffoldState.openDrawer<\/a>, which displays its <a href=\"material\/Drawer-class.html\">Drawer<\/a>, if any.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/navigation-drawer.html\">material.io\/design\/components\/navigation-drawer.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/Drawer-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Drawer",
    "shortname": "Drawer",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a material design drawer.<\/p>\n<p>Typically used in the <a href=\"material\/Scaffold\/drawer.html\">Scaffold.drawer<\/a> property.<\/p>\n<p>The <code>elevation<\/code> must be non-negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Drawer({\n  Key key,\n  this.elevation = 16.0,\n  this.child,\n  this.semanticLabel,\n}) : assert(elevation != null &amp;&amp; elevation &gt;= 0.0),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Drawer\/Drawer.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Drawer",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "semanticLabel",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/Drawer\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterialLocalizations(context));\n  String label = semanticLabel;\n  switch (defaultTargetPlatform) {\n    case TargetPlatform.iOS:\n      label = semanticLabel;\n      break;\n    case TargetPlatform.android:\n    case TargetPlatform.fuchsia:\n      label = semanticLabel ?? MaterialLocalizations.of(context)?.drawerLabel;\n  }\n  return Semantics(\n    scopesRoute: true,\n    namesRoute: true,\n    explicitChildNodes: true,\n    label: label,\n    child: ConstrainedBox(\n      constraints: const BoxConstraints.expand(width: _kWidth),\n      child: Material(\n        elevation: elevation,\n        child: child,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Drawer\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Drawer",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"widgets\/SliverList-class.html\">SliverList<\/a>.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/Drawer\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.Drawer",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this drawer relative to its parent.<\/p>\n<p>This controls the size of the shadow below the drawer.<\/p>\n<p>Defaults to 16, the appropriate elevation for drawers. The value is\nalways non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/Drawer\/elevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.Drawer",
            "params": []
        },
        {
            "desc": "<p>The semantic label of the dialog used by accessibility frameworks to\nannounce screen transitions when the drawer is opened and closed.<\/p>\n<p>If this label is not provided, it will default to\n<a href=\"material\/MaterialLocalizations\/drawerLabel.html\">MaterialLocalizations.drawerLabel<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/namesRoute.html\">SemanticsConfiguration.namesRoute<\/a>, for a description of how this\nvalue is used.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticLabel\n\n<\/code><\/pre>\n        ",
            "href": "material\/Drawer\/semanticLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.Drawer",
            "params": []
        }
    ]
}