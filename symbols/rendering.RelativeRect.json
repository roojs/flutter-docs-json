{
    "desc": "<p>An immutable 2D, axis-aligned, floating-point rectangle whose coordinates\nare given relative to another rectangle's edges, known as the container.\nSince the dimensions of the rectangle are relative to those of the\ncontainer, this class has no width and height members. To determine the\nwidth or height of the rectangle, convert it to a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> using <a href=\"rendering\/RelativeRect\/toRect.html\">toRect()<\/a>\n(passing the container's own Rect), and then examine that object.<\/p>\n<p>The fields <a href=\"rendering\/RelativeRect\/left.html\">left<\/a>, <a href=\"rendering\/RelativeRect\/right.html\">right<\/a>, <a href=\"rendering\/RelativeRect\/bottom.html\">bottom<\/a>, and <a href=\"rendering\/RelativeRect\/top.html\">top<\/a> must not be null.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RelativeRect-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RelativeRect",
    "shortname": "RelativeRect",
    "extends": [],
    "realImplementors": [
        "widgets.RelativeRectTween"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns a new rectangle with edges moved inwards by the given delta.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RelativeRect deflate(double delta) {\n  return inflate(-delta);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/deflate.html",
            "isDeprecated": "0",
            "type": "rendering.RelativeRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "delta",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new rectangle with edges moved outwards by the given delta.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RelativeRect inflate(double delta) {\n  return RelativeRect.fromLTRB(left - delta, top - delta, right - delta, bottom - delta);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/inflate.html",
            "isDeprecated": "0",
            "type": "rendering.RelativeRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "delta",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new rectangle that is the intersection of the given rectangle and this rectangle.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RelativeRect intersect(RelativeRect other) {\n  return RelativeRect.fromLTRB(\n    math.max(left, other.left),\n    math.max(top, other.top),\n    math.max(right, other.right),\n    math.max(bottom, other.bottom),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/intersect.html",
            "isDeprecated": "0",
            "type": "rendering.RelativeRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RelativeRect"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two RelativeRects.<\/p>\n<p>If either rect is null, this function interpolates from <a href=\"rendering\/RelativeRect\/fill-constant.html\">RelativeRect.fill<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RelativeRect lerp(RelativeRect a, RelativeRect b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return RelativeRect.fromLTRB(b.left * t, b.top * t, b.right * t, b.bottom * t);\n  if (b == null) {\n    final double k = 1.0 - t;\n    return RelativeRect.fromLTRB(b.left * k, b.top * k, b.right * k, b.bottom * k);\n  }\n  return RelativeRect.fromLTRB(\n    lerpDouble(a.left, b.left, t),\n    lerpDouble(a.top, b.top, t),\n    lerpDouble(a.right, b.right, t),\n    lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/lerp.html",
            "isDeprecated": "0",
            "type": "rendering.RelativeRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RelativeRect"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RelativeRect"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new rectangle object translated by the given offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RelativeRect shift(Offset offset) {\n  return RelativeRect.fromLTRB(left + offset.dx, top + offset.dy, right - offset.dx, bottom - offset.dy);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/shift.html",
            "isDeprecated": "0",
            "type": "rendering.RelativeRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Convert this <a href=\"rendering\/RelativeRect-class.html\">RelativeRect<\/a> to a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>, in the coordinate space of the container.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RelativeRect\/toSize.html\">toSize<\/a>, which returns the size part of the rect, based on the size of\nthe container.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect toRect(Rect container) {\n  return Rect.fromLTRB(left, top, container.width - right, container.height - bottom);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/toRect.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "container",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                }
            ]
        },
        {
            "desc": "<p>Convert this <a href=\"rendering\/RelativeRect-class.html\">RelativeRect<\/a> to a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, assuming a container with the given size.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RelativeRect\/toRect.html\">toRect<\/a>, which also computes the position relative to the container.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size toSize(Size container) {\n  return Size(container.width - left - right, container.height - top - bottom);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/toSize.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": [
                {
                    "name": "container",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'RelativeRect.fromLTRB(${left?.toStringAsFixed(1)}, ${top?.toStringAsFixed(1)}, ${right?.toStringAsFixed(1)}, ${bottom?.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
            "href": "rendering\/RelativeRect\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RelativeRect",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Distance from the bottom side of the container to the bottom side of this rectangle.<\/p>\n<p>May be negative if the bottom side of the rectangle is outside of the container.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RelativeRect\/bottom.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RelativeRect",
            "params": []
        },
        {
            "desc": "<p>Returns whether any of the values are greater than zero.<\/p>\n<p>This corresponds to one of the sides (<a href=\"rendering\/RelativeRect\/left.html\">left<\/a>, <a href=\"rendering\/RelativeRect\/top.html\">top<\/a>, <a href=\"rendering\/RelativeRect\/right.html\">right<\/a>, or <a href=\"rendering\/RelativeRect\/bottom.html\">bottom<\/a>) having\nsome positive inset towards the center.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasInsets =&gt; left &gt; 0.0 || top &gt; 0.0 || right &gt; 0.0 || bottom &gt; 0.0;<\/code><\/pre>\n        ",
            "href": "rendering\/RelativeRect\/hasInsets.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RelativeRect",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"rendering\/RelativeRect\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"rendering\/RelativeRect\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"rendering\/RelativeRect\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"rendering\/RelativeRect\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"rendering\/RelativeRect\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"rendering\/RelativeRect\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(left, top, right, bottom);<\/code><\/pre>\n        ",
            "href": "rendering\/RelativeRect\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.RelativeRect",
            "params": []
        },
        {
            "desc": "<p>Distance from the left side of the container to the left side of this rectangle.<\/p>\n<p>May be negative if the left side of the rectangle is outside of the container.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double left\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RelativeRect\/left.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RelativeRect",
            "params": []
        },
        {
            "desc": "<p>Distance from the right side of the container to the right side of this rectangle.<\/p>\n<p>May be negative if the right side of the rectangle is outside of the container.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double right\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RelativeRect\/right.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RelativeRect",
            "params": []
        },
        {
            "desc": "<p>Distance from the top side of the container to the top side of this rectangle.<\/p>\n<p>May be negative if the top side of the rectangle is outside of the container.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RelativeRect\/top.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RelativeRect",
            "params": []
        }
    ]
}