{
    "desc": "<p>Spacer creates an adjustable, empty spacer that can be used to tune the\nspacing between widgets in a <a href=\"widgets\/Flex-class.html\">Flex<\/a> container, like <a href=\"widgets\/Row-class.html\">Row<\/a> or <a href=\"widgets\/Column-class.html\">Column<\/a>.<\/p>\n<p>The <a href=\"widgets\/Spacer-class.html\">Spacer<\/a> widget will take up any available space, so setting the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">Flex.mainAxisAlignment<\/a> on a flex container that contains a <a href=\"widgets\/Spacer-class.html\">Spacer<\/a> to\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceAround<\/a>, <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceBetween<\/a>, or\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceEvenly<\/a> will not have any visible effect: the\n<a href=\"widgets\/Spacer-class.html\">Spacer<\/a> has taken up all of the additional space, therefore there is none\nleft to redistribute.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Row(\n  children: &lt;Widget&gt;[\n    Text('Begin'),\n    Spacer(), \/\/ Defaults to a flex of one.\n    Text('Middle'),\n    \/\/ Gives twice the space between Middle and End than Begin and Middle.\n    Spacer(flex: 2),\n    Text('End'),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Row-class.html\">Row<\/a> and <a href=\"widgets\/Column-class.html\">Column<\/a>, which are the most common containers to use a Spacer\nin.<\/li>\n<li>\n<a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a>, to create a box with a specific size and an optional child.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Spacer-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Spacer",
    "shortname": "Spacer",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a flexible space to insert into a <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> widget.<\/p>\n<p>The <code>flex<\/code> parameter may not be null or less than one.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Spacer({Key key, this.flex = 1})\n  : assert(flex != null),\n    assert(flex &gt; 0),\n    super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Spacer\/Spacer.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Spacer",
            "params": [
                {
                    "name": "flex",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/Spacer\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return Expanded(\n    flex: flex,\n    child: const SizedBox.shrink(),\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Spacer\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Spacer",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The flex factor to use in determining how much space to take up.<\/p>\n<p>The amount of space the <a href=\"widgets\/Spacer-class.html\">Spacer<\/a> can occupy in the main axis is determined\nby dividing the free space proportionately, after placing the inflexible\nchildren, according to the flex factors of the flexible children.<\/p>\n<p>Defaults to one.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int flex\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Spacer\/flex.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "widgets.Spacer",
            "params": []
        }
    ]
}