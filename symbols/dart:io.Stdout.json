{
    "desc": "<p><a href=\"dart-io\/Stdout-class.html\">Stdout<\/a> represents the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for either <code>stdout<\/code> or <code>stderr<\/code>.<\/p>\n<p>It provides a <em>blocking<\/em> <code>IOSink<\/code>, so using this to write will block until\nthe output is written.<\/p>\n<p>In some situations this blocking behavior is undesirable as it does not\nprovide the same non-blocking behavior as dart:io in general exposes.\nUse the property <a href=\"dart-io\/Stdout\/nonBlocking.html\">nonBlocking<\/a> to get an <code>IOSink<\/code> which has the non-blocking\nbehavior.<\/p>\n<p>This class can also be used to check whether <code>stdout<\/code> or <code>stderr<\/code> is\nconnected to a terminal and query some terminal properties.<\/p>\n<p>The <a href=\"dart-io\/Stdout\/addError.html\">addError<\/a> API is inherited from  <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> and calling it will result\nin an unhandled asynchronous error unless there is an error handler on\n<a href=\"dart-io\/Stdout\/done.html\">done<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/Stdout-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.Stdout",
    "shortname": "Stdout",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Adds byte <code>data<\/code> to the target consumer, ignoring <a href=\"dart-io\/Stdout\/encoding.html\">encoding<\/a>.<\/p>\n<p>The <a href=\"dart-io\/Stdout\/encoding.html\">encoding<\/a> does not apply to this method, and the <code>data<\/code> list is passed\ndirectly to the target consumer as a stream event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/Stdout\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n<p>The data list should not be modified after it has been passed to <code>add<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; data) {\n  _sink.add(data);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                }
            ]
        },
        {
            "desc": "<p>Passes the error to the target consumer as an error event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/Stdout\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addError(error, [StackTrace stackTrace]) {\n  _sink.addError(error, stackTrace);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/addError.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "addError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "stackTrace",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.StackTrace"
                }
            ]
        },
        {
            "desc": "<p>Adds all elements of the given <code>stream<\/code> to <code>this<\/code>.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when\nall elements of the given <code>stream<\/code> are added to <code>this<\/code>.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; _sink.addStream(stream);<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/addStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "addStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                }
            ]
        },
        {
            "desc": "<p>Close the target consumer.<\/p>\n<p>NOTE: Writes to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> may be buffered, and may not be flushed by\na call to <code>close()<\/code>. To flush all buffered writes, call <code>flush()<\/code> before\ncalling <code>close()<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() =&gt; _sink.close();<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once all buffered data is accepted by the\nunderlying <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a>.<\/p>\n<p>This method must not be called while an <a href=\"dart-io\/Stdout\/addStream.html\">addStream<\/a> is incomplete.<\/p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future flush() =&gt; _sink.flush();<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/flush.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "flush",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\n<a href=\"dart-io\/Stdout\/add.html\">add<\/a>s the encoding of the result to the target consumer.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void write(object) {\n  _sink.write(object);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/write.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "write",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "object",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Iterates over the given <code>objects<\/code> and <a href=\"dart-io\/Stdout\/write.html\">write<\/a>s them in sequence.<\/p>\n<p>If <a href=\"package-path_path\/separator.html\">separator<\/a> is provided, a <code>write<\/code> with the <code>separator<\/code> is performed\nbetween any two elements of objects`.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAll(objects, [sep = \"\"]) {\n  _sink.writeAll(objects, sep);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/writeAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "writeAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "objects",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "sep",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Writes the character of <code>charCode<\/code>.<\/p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))<\/code>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeCharCode(int charCode) {\n  _sink.writeCharCode(charCode);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/writeCharCode.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "writeCharCode",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "charCode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\nwrites the result to <code>this<\/code>, followed by a newline.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeln([object = \"\"]) {\n  _sink.writeln(object);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdout\/writeln.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "writeln",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdout",
            "params": [
                {
                    "name": "object",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a href=\"dart-io\/Stdout\/close.html\">close<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done =&gt; _sink.done;<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/done.html",
            "name": "done",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Encoding get encoding =&gt; _sink.encoding;<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/encoding.html",
            "name": "encoding",
            "isDeprecated": false,
            "type": "dart:convert.Encoding",
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is a terminal attached to stdout.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasTerminal =&gt; _hasTerminal(_fd);<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/hasTerminal.html",
            "name": "hasTerminal",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Get a non-blocking <code>IOSink<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IOSink get nonBlocking {\n  _nonBlocking ??= new IOSink(new _FileStreamConsumer.fromStdio(_fd));\n  return _nonBlocking;\n}<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/nonBlocking.html",
            "name": "nonBlocking",
            "isDeprecated": false,
            "type": "dart:io.IOSink",
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Whether connected to a terminal that supports ANSI escape sequences.<\/p>\n<p>Not all terminals are recognized, and not all recognized terminals can\nreport whether they support ANSI escape sequences, so this value is a\nbest-effort attempt at detecting the support.<\/p>\n<p>The actual escape sequence support may differ between terminals,\nwith some terminals supporting more escape sequences than others,\nand some terminals even differing in behavior for the same escape\nsequence.<\/p>\n<p>The ANSI color selection is generally supported.<\/p>\n<p>Currently, a <code>TERM<\/code> environment variable containing the string <code>xterm<\/code>\nwill be taken as evidence that ANSI escape sequences are supported.\nOn Windows, only versions of Windows 10 after v.1511\n(\"TH2\", OS build 10586) will be detected as supporting the output of\nANSI escape sequences, and only versions after v.1607 (\"Anniversary\nUpdate\", OS build 14393) will be detected as supporting the input of\nANSI escape sequences.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get supportsAnsiEscapes =&gt; _supportsAnsiEscapes(_fd);<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/supportsAnsiEscapes.html",
            "name": "supportsAnsiEscapes",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Get the number of columns of the terminal.<\/p>\n<p>If no terminal is attached to stdout, a <a href=\"dart-io\/StdoutException-class.html\">StdoutException<\/a> is thrown. See\n<a href=\"dart-io\/Stdout\/hasTerminal.html\">hasTerminal<\/a> for more info.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get terminalColumns =&gt; _terminalColumns(_fd);<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/terminalColumns.html",
            "name": "terminalColumns",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:io.Stdout",
            "params": []
        },
        {
            "desc": "<p>Get the number of lines of the terminal.<\/p>\n<p>If no terminal is attached to stdout, a <a href=\"dart-io\/StdoutException-class.html\">StdoutException<\/a> is thrown. See\n<a href=\"dart-io\/Stdout\/hasTerminal.html\">hasTerminal<\/a> for more info.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get terminalLines =&gt; _terminalLines(_fd);<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdout\/terminalLines.html",
            "name": "terminalLines",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:io.Stdout",
            "params": []
        }
    ]
}