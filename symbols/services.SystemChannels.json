{
    "desc": "<p>Platform channels used by the Flutter system.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/SystemChannels-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.SystemChannels",
    "shortname": "SystemChannels",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [],
    "props": [
        {
            "desc": "<p>A <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for accessibility events.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsEvent-class.html\">SemanticsEvent<\/a> and its subclasses for a list of valid accessibility\nevents that can be sent over this channel.<\/li>\n<li>\n<a href=\"semantics\/SemanticsNode\/sendEvent.html\">SemanticsNode.sendEvent<\/a>, which uses this channel to dispatch events.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;dynamic&gt; accessibility = BasicMessageChannel&lt;dynamic&gt;(\n  'flutter\/accessibility',\n  StandardMessageCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/accessibility-constant.html",
            "name": "accessibility",
            "isDeprecated": false,
            "type": "services.BasicMessageChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A JSON <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for keyboard events.<\/p>\n<p>Each incoming message received on this channel (registered using\n<a href=\"services\/BasicMessageChannel\/setMessageHandler.html\">BasicMessageChannel.setMessageHandler<\/a>) consists of a <a href=\"dart-core\/Map-class.html\">Map<\/a> with\nplatform-specific data, plus a <code>type<\/code> field which is either <code>keydown<\/code>, or\n<code>keyup<\/code>.<\/p>\n<p>On Android, the available fields are those described by\n<a href=\"services\/RawKeyEventDataAndroid-class.html\">RawKeyEventDataAndroid<\/a>'s properties.<\/p>\n<p>On Fuchsia, the available fields are those described by\n<a href=\"services\/RawKeyEventDataFuchsia-class.html\">RawKeyEventDataFuchsia<\/a>'s properties.<\/p>\n<p>No messages are sent on other platforms currently.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this channel to expose key data.<\/li>\n<li>\n<a href=\"services\/RawKeyEvent\/RawKeyEvent.fromMessage.html\">new RawKeyEvent.fromMessage<\/a>, which can decode this data into the <a href=\"services\/RawKeyEvent-class.html\">RawKeyEvent<\/a>\nsubclasses mentioned above.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;dynamic&gt; keyEvent = BasicMessageChannel&lt;dynamic&gt;(\n    'flutter\/keyevent',\n    JSONMessageCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/keyEvent-constant.html",
            "name": "keyEvent",
            "isDeprecated": false,
            "type": "services.BasicMessageChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A string <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for lifecycle events.<\/p>\n<p>Valid messages are string representations of the values of the\n<a href=\"dart-ui\/AppLifecycleState-class.html\">AppLifecycleState<\/a> enumeration. A handler can be registered using\n<a href=\"services\/BasicMessageChannel\/setMessageHandler.html\">BasicMessageChannel.setMessageHandler<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver\/didChangeAppLifecycleState.html\">WidgetsBindingObserver.didChangeAppLifecycleState<\/a>, which triggers\nwhenever a message is received on this channel.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;String&gt; lifecycle = BasicMessageChannel&lt;String&gt;(\n    'flutter\/lifecycle',\n    StringCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/lifecycle-constant.html",
            "name": "lifecycle",
            "isDeprecated": false,
            "type": "services.BasicMessageChannel<dart:core.String>",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A JSON <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for navigation.<\/p>\n<p>The following incoming methods are defined for this channel (registered\nusing <a href=\"services\/MethodChannel\/setMethodCallHandler.html\">MethodChannel.setMethodCallHandler<\/a>):<\/p>\n<ul>\n<li>\n<p><code>popRoute<\/code>, which is called when the system wants the current route to\nbe removed (e.g. if the user hits a system-level back button).<\/p>\n<\/li>\n<li>\n<p><code>pushRoute<\/code>, which is called with a single string argument when the\noperating system instructs the application to open a particular page.<\/p>\n<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetsBindingObserver\/didPopRoute.html\">WidgetsBindingObserver.didPopRoute<\/a> and\n<a href=\"widgets\/WidgetsBindingObserver\/didPushRoute.html\">WidgetsBindingObserver.didPushRoute<\/a>, which expose this channel's\nmethods.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel navigation = MethodChannel(\n    'flutter\/navigation',\n    JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/navigation-constant.html",
            "name": "navigation",
            "isDeprecated": false,
            "type": "services.MethodChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A JSON <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for invoking miscellaneous platform methods.<\/p>\n<p>The following outgoing methods are defined for this channel (invoked using\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>):<\/p>\n<ul>\n<li>\n<p><code>Clipboard.setData<\/code>: Places the data from the <code>text<\/code> entry of the\nargument, which must be a <a href=\"dart-core\/Map-class.html\">Map<\/a>, onto the system clipboard. See\n<a href=\"services\/Clipboard\/setData.html\">Clipboard.setData<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>Clipboard.getData<\/code>: Returns the data that has the format specified in\nthe argument, a <a href=\"dart-core\/String-class.html\">String<\/a>, from the system clipboard. The only format\ncurrently supported is <code>text\/plain<\/code> (<a href=\"services\/Clipboard\/kTextPlain-constant.html\">Clipboard.kTextPlain<\/a>). The\nresult is a <a href=\"dart-core\/Map-class.html\">Map<\/a> with a single key, <code>text<\/code>. See <a href=\"services\/Clipboard\/getData.html\">Clipboard.getData<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>HapticFeedback.vibrate<\/code>: Triggers a system-default haptic response.\nSee <a href=\"services\/HapticFeedback\/vibrate.html\">HapticFeedback.vibrate<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemSound.play<\/code>: Triggers a system audio effect. The argument must\nbe a <a href=\"dart-core\/String-class.html\">String<\/a> describing the desired effect; currently only <code>click<\/code> is\nsupported. See <a href=\"services\/SystemSound\/play.html\">SystemSound.play<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setPreferredOrientations<\/code>: Informs the operating system\nof the desired orientation of the display. The argument is a <a href=\"dart-core\/List-class.html\">List<\/a> of\nvalues which are string representations of values of the\n<a href=\"services\/DeviceOrientation-class.html\">DeviceOrientation<\/a> enum. See <a href=\"services\/SystemChrome\/setPreferredOrientations.html\">SystemChrome.setPreferredOrientations<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setApplicationSwitcherDescription<\/code>: Informs the operating\nsystem of the desired label and color to be used to describe the\napplication in any system-level application lists (e.g. application\nswitchers). The argument is a <a href=\"dart-core\/Map-class.html\">Map<\/a> with two keys, <code>label<\/code> giving a\n<a href=\"dart-core\/String-class.html\">String<\/a> description, and <code>primaryColor<\/code> giving a 32 bit integer value\n(the lower eight bits being the blue channel, the next eight bits being\nthe green channel, the next eight bits being the red channel, and the\nhigh eight bits being set, as from <a href=\"dart-ui\/Color\/value.html\">Color.value<\/a> for an opaque color).\nThe <code>primaryColor<\/code> can also be zero to indicate that the system default\nshould be used. See <a href=\"services\/SystemChrome\/setPreferredOrientations.html\">SystemChrome.setPreferredOrientations<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setEnabledSystemUIOverlays<\/code>: Specifies the set of system\noverlays to have visible when the application is running. The argument\nis a <a href=\"dart-core\/List-class.html\">List<\/a> of values which are string representations of values of the\n<a href=\"services\/SystemUiOverlay-class.html\">SystemUiOverlay<\/a> enum. See <a href=\"services\/SystemChrome\/setEnabledSystemUIOverlays.html\">SystemChrome.setEnabledSystemUIOverlays<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemChrome.setSystemUIOverlayStyle<\/code>: Specifies whether system\noverlays (e.g. the status bar on Android or iOS) should be <code>light<\/code> or\n<code>dark<\/code>. The argument is one of those two strings. See\n<a href=\"services\/SystemChrome\/setSystemUIOverlayStyle.html\">SystemChrome.setSystemUIOverlayStyle<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>SystemNavigator.pop<\/code>: Tells the operating system to close the\napplication, or the closest equivalent. See <a href=\"services\/SystemNavigator\/pop.html\">SystemNavigator.pop<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>Calls to methods that are not implemented on the shell side are ignored\n(so it is safe to call methods when the relevant plugin might be missing).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel platform = OptionalMethodChannel(\n    'flutter\/platform',\n    JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/platform-constant.html",
            "name": "platform",
            "isDeprecated": false,
            "type": "services.MethodChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for controlling platform views.<\/p>\n<p>See also: <a href=\"services\/PlatformViewsService-class.html\">PlatformViewsService<\/a> for the available operations on this channel.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel platform_views = MethodChannel(\n  'flutter\/platform_views',\n  StandardMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/platform_views-constant.html",
            "name": "platform_views",
            "isDeprecated": false,
            "type": "services.MethodChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for configuring the Skia graphics library.<\/p>\n<p>The following outgoing methods are defined for this channel (invoked using\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>):<\/p>\n<ul><li>\n<code>Skia.setResourceCacheMaxBytes<\/code>: Set the maximum number of bytes that\ncan be held in the GPU resource cache.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel skia = MethodChannel(\n  'flutter\/skia',\n  JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/skia-constant.html",
            "name": "skia",
            "isDeprecated": false,
            "type": "services.MethodChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A JSON <a href=\"services\/BasicMessageChannel-class.html\">BasicMessageChannel<\/a> for system events.<\/p>\n<p>Events are exposed as <a href=\"dart-core\/Map-class.html\">Map<\/a>s with string keys. The <code>type<\/code> key specifies\nthe type of the event; the currently supported system event types are\nthose listed below. A handler can be registered using\n<a href=\"services\/BasicMessageChannel\/setMessageHandler.html\">BasicMessageChannel.setMessageHandler<\/a>.<\/p>\n<ul><li>\n<code>memoryPressure<\/code>: Indicates that the operating system would like\napplications to release caches to free up more memory. See\n<a href=\"widgets\/WidgetsBindingObserver\/didHaveMemoryPressure.html\">WidgetsBindingObserver.didHaveMemoryPressure<\/a>, which triggers whenever\na message is received on this channel.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BasicMessageChannel&lt;dynamic&gt; system = BasicMessageChannel&lt;dynamic&gt;(\n    'flutter\/system',\n    JSONMessageCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/system-constant.html",
            "name": "system",
            "isDeprecated": false,
            "type": "services.BasicMessageChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        },
        {
            "desc": "<p>A JSON <a href=\"services\/MethodChannel-class.html\">MethodChannel<\/a> for handling text input.<\/p>\n<p>This channel exposes a system text input control for interacting with IMEs\n(input method editors, for example on-screen keyboards). There is one\ncontrol, and at any time it can have one active transaction. Transactions\nare represented by an integer. New Transactions are started by\n<code>TextInput.setClient<\/code>. Messages that are sent are assumed to be for the\ncurrent transaction (the last \"client\" set by <code>TextInput.setClient<\/code>).\nMessages received from the shell side specify the transaction to which\nthey apply, so that stale messages referencing past transactions can be\nignored.<\/p>\n<p>The methods described below are wrapped in a more convenient form by the\n<a href=\"services\/TextInput-class.html\">TextInput<\/a> and <a href=\"services\/TextInputConnection-class.html\">TextInputConnection<\/a> class.<\/p>\n<p>The following outgoing methods are defined for this channel (invoked using\n<a href=\"services\/OptionalMethodChannel\/invokeMethod.html\">OptionalMethodChannel.invokeMethod<\/a>):<\/p>\n<ul>\n<li>\n<p><code>TextInput.setClient<\/code>: Establishes a new transaction. The arguments is\na <a href=\"dart-core\/List-class.html\">List<\/a> whose first value is an integer representing a previously\nunused transaction identifier, and the second is a <a href=\"dart-core\/String-class.html\">String<\/a> with a\nJSON-encoded object with five keys, as obtained from\n<code>TextInputConfiguration.toJSON<\/code>. This method must be invoked before any\nothers (except <code>TextInput.hide<\/code>). See <a href=\"services\/TextInput\/attach.html\">TextInput.attach<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.show<\/code>: Show the keyboard. See <a href=\"services\/TextInputConnection\/show.html\">TextInputConnection.show<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.setEditingState<\/code>: Update the value in the text editing\ncontrol. The argument is a <a href=\"dart-core\/String-class.html\">String<\/a> with a JSON-encoded object with\nseven keys, as obtained from <a href=\"services\/TextEditingValue\/toJSON.html\">TextEditingValue.toJSON<\/a>. See\n<a href=\"services\/TextInputConnection\/setEditingState.html\">TextInputConnection.setEditingState<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.clearClient<\/code>: End the current transaction. The next method\ncalled must be <code>TextInput.setClient<\/code> (or <code>TextInput.hide<\/code>). See\n<a href=\"services\/TextInputConnection\/close.html\">TextInputConnection.close<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInput.hide<\/code>: Hide the keyboard. Unlike the other methods, this can\nbe called at any time. See <a href=\"services\/TextInputConnection\/close.html\">TextInputConnection.close<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>The following incoming methods are defined for this channel (registered\nusing <a href=\"services\/MethodChannel\/setMethodCallHandler.html\">MethodChannel.setMethodCallHandler<\/a>). In each case, the first argument\nis a transaction identifier. Calls for stale transactions should be ignored.<\/p>\n<ul>\n<li>\n<p><code>TextInputClient.updateEditingState<\/code>: The user has changed the contents\nof the text control. The second argument is a <a href=\"dart-core\/String-class.html\">String<\/a> containing a\nJSON-encoded object with seven keys, in the form expected by <a href=\"services\/TextEditingValue\/TextEditingValue.fromJSON.html\">new\nTextEditingValue.fromJSON<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>TextInputClient.performAction<\/code>: The user has triggered an action. The\nsecond argument is a <a href=\"dart-core\/String-class.html\">String<\/a> consisting of the stringification of one\nof the values of the <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> enum.<\/p>\n<\/li>\n<\/ul>\n<p>Calls to methods that are not implemented on the shell side are ignored\n(so it is safe to call methods when the relevant plugin might be missing).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MethodChannel textInput = OptionalMethodChannel(\n    'flutter\/textinput',\n    JSONMethodCodec(),\n)\n\n<\/code><\/pre>\n    ",
            "href": "services\/SystemChannels\/textInput-constant.html",
            "name": "textInput",
            "isDeprecated": false,
            "type": "services.MethodChannel",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.SystemChannels",
            "params": []
        }
    ]
}