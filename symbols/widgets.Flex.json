{
    "desc": "<p>A widget that displays its children in a one-dimensional array.<\/p>\n<p>The <a href=\"widgets\/Flex-class.html\">Flex<\/a> widget allows you to control the axis along which the children are\nplaced (horizontal or vertical). This is referred to as the <em>main axis<\/em>. If\nyou know the main axis in advance, then consider using a <a href=\"widgets\/Row-class.html\">Row<\/a> (if it's\nhorizontal) or <a href=\"widgets\/Column-class.html\">Column<\/a> (if it's vertical) instead, because that will be less\nverbose.<\/p>\n<p>To cause a child to expand to fill the available space in the <a href=\"widgets\/Flex\/direction.html\">direction<\/a>\nof this widget's main axis, wrap the child in an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> widget.<\/p>\n<p>The <a href=\"widgets\/Flex-class.html\">Flex<\/a> widget does not scroll (and in general it is considered an error\nto have more children in a <a href=\"widgets\/Flex-class.html\">Flex<\/a> than will fit in the available room). If\nyou have some widgets and want them to be able to scroll if there is\ninsufficient room, consider using a <a href=\"widgets\/ListView-class.html\">ListView<\/a>.<\/p>\n<p>If you only have one child, then rather than using <a href=\"widgets\/Flex-class.html\">Flex<\/a>, <a href=\"widgets\/Row-class.html\">Row<\/a>, or\n<a href=\"widgets\/Column-class.html\">Column<\/a>, consider using <a href=\"widgets\/Align-class.html\">Align<\/a> or <a href=\"widgets\/Center-class.html\">Center<\/a> to position the child.<\/p>\n<h2 id=\"layout-algorithm\">Layout algorithm<\/h2>\n<p><em>This section describes how a <a href=\"widgets\/Flex-class.html\">Flex<\/a> is rendered by the framework.<\/em>\n<em>See <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> for an introduction to box layout models.<\/em><\/p>\n<p>Layout for a <a href=\"widgets\/Flex-class.html\">Flex<\/a> proceeds in six steps:<\/p>\n<ol>\n<li>Layout each child a null or zero flex factor (e.g., those that are not\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a>) with unbounded main axis constraints and the incoming\ncross axis constraints. If the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.stretch<\/a>, instead use tight cross axis constraints\nthat match the incoming max extent in the cross axis.<\/li>\n<li>Divide the remaining main axis space among the children with non-zero\nflex factors (e.g., those that are <a href=\"widgets\/Expanded-class.html\">Expanded<\/a>) according to their flex\nfactor. For example, a child with a flex factor of 2.0 will receive twice\nthe amount of main axis space as a child with a flex factor of 1.0.<\/li>\n<li>Layout each of the remaining children with the same cross axis\nconstraints as in step 1, but instead of using unbounded main axis\nconstraints, use max axis constraints based on the amount of space\nallocated in step 2. Children with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.tight<\/a> are given tight constraints (i.e., forced to fill the\nallocated space), and children with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a> are given loose constraints (i.e., not forced to fill the\nallocated space).<\/li>\n<li>The cross axis extent of the <a href=\"widgets\/Flex-class.html\">Flex<\/a> is the maximum cross axis extent of\nthe children (which will always satisfy the incoming constraints).<\/li>\n<li>The main axis extent of the <a href=\"widgets\/Flex-class.html\">Flex<\/a> is determined by the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a>\nproperty. If the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.max<\/a>, then the\nmain axis extent of the <a href=\"widgets\/Flex-class.html\">Flex<\/a> is the max extent of the incoming main\naxis constraints. If the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.min<\/a>,\nthen the main axis extent of the <a href=\"widgets\/Flex-class.html\">Flex<\/a> is the sum of the main axis\nextents of the children (subject to the incoming constraints).<\/li>\n<li>Determine the position for each child according to the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> and the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a>. For example, if the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceBetween<\/a>, any main axis\nspace that has not been allocated to children is divided evenly and\nplaced between the children.<\/li>\n<\/ol>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Row-class.html\">Row<\/a>, for a version of this widget that is always horizontal.<\/li>\n<li>\n<a href=\"widgets\/Column-class.html\">Column<\/a>, for a version of this widget that is always vertical.<\/li>\n<li>\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a>, to indicate children that should take all the remaining room.<\/li>\n<li>\n<a href=\"widgets\/Flexible-class.html\">Flexible<\/a>, to indicate children that should share the remaining room.<\/li>\n<li>\n<a href=\"widgets\/Spacer-class.html\">Spacer<\/a>, a widget that takes up space proportional to it's flex value.\nthat may be sized smaller (leaving some remaining room unused).<\/li>\n<li>The <a href=\"https:\/\/flutter.io\/widgets\/layout\/\">catalog of layout widgets<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Flex-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Flex",
    "shortname": "Flex",
    "extends": [
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.Column",
        "widgets.Expanded",
        "widgets.Flexible",
        "widgets.Row"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a flex layout.<\/p>\n<p>The <code>direction<\/code> is required.<\/p>\n<p>The <code>direction<\/code>, <code>mainAxisAlignment<\/code>, <code>crossAxisAlignment<\/code>, and\n<code>verticalDirection<\/code> arguments must not be null. If <code>crossAxisAlignment<\/code> is\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.baseline<\/a>, then <code>textBaseline<\/code> must not be null.<\/p>\n<p>The <code>textDirection<\/code> argument defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, if\nany. If there is no ambient directionality, and a text direction is going\nto be necessary to decide which direction to lay the children in or to\ndisambiguate <code>start<\/code> or <code>end<\/code> values for the main or cross axis\ndirections, the <code>textDirection<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Flex({\n  Key key,\n  @required this.direction,\n  this.mainAxisAlignment = MainAxisAlignment.start,\n  this.mainAxisSize = MainAxisSize.max,\n  this.crossAxisAlignment = CrossAxisAlignment.center,\n  this.textDirection,\n  this.verticalDirection = VerticalDirection.down,\n  this.textBaseline,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : assert(direction != null),\n     assert(mainAxisAlignment != null),\n     assert(mainAxisSize != null),\n     assert(crossAxisAlignment != null),\n     assert(verticalDirection != null),\n     assert(crossAxisAlignment != CrossAxisAlignment.baseline || textBaseline != null),\n     super(key: key, children: children);<\/code><\/pre>\n    ",
            "href": "widgets\/Flex\/Flex.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Flex",
            "params": [
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "crossAxisAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.CrossAxisAlignment"
                },
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "mainAxisAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.MainAxisAlignment"
                },
                {
                    "name": "mainAxisSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.MainAxisSize"
                },
                {
                    "name": "textBaseline",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextBaseline"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "verticalDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.VerticalDirection"
                }
            ]
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderFlex createRenderObject(BuildContext context) {\n  return RenderFlex(\n    direction: direction,\n    mainAxisAlignment: mainAxisAlignment,\n    mainAxisSize: mainAxisSize,\n    crossAxisAlignment: crossAxisAlignment,\n    textDirection: getEffectiveTextDirection(context),\n    verticalDirection: verticalDirection,\n    textBaseline: textBaseline,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Flex\/createRenderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderFlex",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Flex",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Flex\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;Axis&gt;('direction', direction));\n  properties.add(EnumProperty&lt;MainAxisAlignment&gt;('mainAxisAlignment', mainAxisAlignment));\n  properties.add(EnumProperty&lt;MainAxisSize&gt;('mainAxisSize', mainAxisSize, defaultValue: MainAxisSize.max));\n  properties.add(EnumProperty&lt;CrossAxisAlignment&gt;('crossAxisAlignment', crossAxisAlignment));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(EnumProperty&lt;VerticalDirection&gt;('verticalDirection', verticalDirection, defaultValue: VerticalDirection.down));\n  properties.add(EnumProperty&lt;TextBaseline&gt;('textBaseline', textBaseline, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Flex\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Flex",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>The value to pass to <a href=\"widgets\/Flex\/textDirection.html\">RenderFlex.textDirection<\/a>.<\/p>\n<p>This value is derived from the <a href=\"widgets\/Flex\/textDirection.html\">textDirection<\/a> property and the ambient\n<a href=\"widgets\/Directionality-class.html\">Directionality<\/a>. The value is null if there is no need to specify the\ntext direction. In practice there's always a need to specify the direction\nexcept for vertical flexes (e.g. <a href=\"widgets\/Column-class.html\">Column<\/a>s) whose <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\nnot dependent on the text direction (not <code>start<\/code> or <code>end<\/code>). In particular,\na <a href=\"widgets\/Row-class.html\">Row<\/a> always needs a text direction because the text direction controls\nits layout order. (For <a href=\"widgets\/Column-class.html\">Column<\/a>s, the layout order is controlled by\n<a href=\"widgets\/Flex\/verticalDirection.html\">verticalDirection<\/a>, which is always specified as it does not depend on an\ninherited widget and defaults to <a href=\"painting\/VerticalDirection-class.html\">VerticalDirection.down<\/a>.)<\/p>\n<p>This method exists so that subclasses of <a href=\"widgets\/Flex-class.html\">Flex<\/a> that create their own\nrender objects that are derived from <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> can do so and still use\nthe logic for providing a text direction only when it is necessary.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nTextDirection getEffectiveTextDirection(BuildContext context) {\n  return textDirection ?? (_needTextDirection ? Directionality.of(context) : null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Flex\/getEffectiveTextDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Flex",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Flex\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/MultiChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, covariant RenderFlex renderObject) {\n  renderObject\n    ..direction = direction\n    ..mainAxisAlignment = mainAxisAlignment\n    ..mainAxisSize = mainAxisSize\n    ..crossAxisAlignment = crossAxisAlignment\n    ..textDirection = getEffectiveTextDirection(context)\n    ..verticalDirection = verticalDirection\n    ..textBaseline = textBaseline;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Flex\/updateRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Flex",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderFlex"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>How the children should be placed along the cross axis.<\/p>\n<p>For example, <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.center<\/a>, the default, centers the\nchildren in the cross axis (e.g., horizontally for a <a href=\"widgets\/Column-class.html\">Column<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CrossAxisAlignment crossAxisAlignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/crossAxisAlignment.html",
            "isDeprecated": "0",
            "type": "rendering.CrossAxisAlignment",
            "memberOf": "widgets.Flex",
            "params": []
        },
        {
            "desc": "<p>The direction to use as the main axis.<\/p>\n<p>If you know the axis in advance, then consider using a <a href=\"widgets\/Row-class.html\">Row<\/a> (if it's\nhorizontal) or <a href=\"widgets\/Column-class.html\">Column<\/a> (if it's vertical) instead of a <a href=\"widgets\/Flex-class.html\">Flex<\/a>, since that\nwill be less verbose. (For <a href=\"widgets\/Row-class.html\">Row<\/a> and <a href=\"widgets\/Column-class.html\">Column<\/a> this property is fixed to\nthe appropriate axis.)<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis direction\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/direction.html",
            "isDeprecated": "0",
            "type": "painting.Axis",
            "memberOf": "widgets.Flex",
            "params": []
        },
        {
            "desc": "<p>How the children should be placed along the main axis.<\/p>\n<p>For example, <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a>, the default, places the children\nat the start (i.e., the left for a <a href=\"widgets\/Row-class.html\">Row<\/a> or the top for a <a href=\"widgets\/Column-class.html\">Column<\/a>) of the\nmain axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MainAxisAlignment mainAxisAlignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/mainAxisAlignment.html",
            "isDeprecated": "0",
            "type": "rendering.MainAxisAlignment",
            "memberOf": "widgets.Flex",
            "params": []
        },
        {
            "desc": "<p>How much space should be occupied in the main axis.<\/p>\n<p>After allocating space to children, there might be some remaining free\nspace. This value controls whether to maximize or minimize the amount of\nfree space, subject to the incoming layout constraints.<\/p>\n<p>If some children have a non-zero flex factors (and none have a fit of\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a>), they will expand to consume all the available space and\nthere will be no remaining free space to maximize or minimize, making this\nvalue irrelevant to the final layout.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MainAxisSize mainAxisSize\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/mainAxisSize.html",
            "isDeprecated": "0",
            "type": "rendering.MainAxisSize",
            "memberOf": "widgets.Flex",
            "params": []
        },
        {
            "desc": "<p>If aligning items according to their baseline, which baseline to use.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextBaseline textBaseline\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/textBaseline.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextBaseline",
            "memberOf": "widgets.Flex",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out horizontally and how to interpret\n<code>start<\/code> and <code>end<\/code> in the horizontal direction.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the order in which\nthe children are positioned (left-to-right or right-to-left), and the\nmeaning of the <a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> property's <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> and\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and either the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is either <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a>, or there's more than one child, then the\n<a href=\"widgets\/Flex\/textDirection.html\">textDirection<\/a> (or the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>) must not be null.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls the meaning of the\n<a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> and\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\neither <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>, then the\n<a href=\"widgets\/Flex\/textDirection.html\">textDirection<\/a> (or the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>) must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.Flex",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out vertically and how to interpret\n<code>start<\/code> and <code>end<\/code> in the vertical direction.<\/p>\n<p>Defaults to <a href=\"painting\/VerticalDirection-class.html\">VerticalDirection.down<\/a>.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls which order children\nare painted in (down or up), the meaning of the <a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a>\nproperty's <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> and <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and either the <a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a>\nis either <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a>, or there's\nmore than one child, then the <a href=\"widgets\/Flex\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the meaning of the\n<a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> and\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"widgets\/Flex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\neither <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>, then the\n<a href=\"widgets\/Flex\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VerticalDirection verticalDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Flex\/verticalDirection.html",
            "isDeprecated": "0",
            "type": "painting.VerticalDirection",
            "memberOf": "widgets.Flex",
            "params": []
        }
    ]
}