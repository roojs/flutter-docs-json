{
    "desc": "<p>A <a href=\"dart-io\/RawServerSocket-class.html\">RawServerSocket<\/a> represents a listening socket, and provides a\nstream of low-level <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> objects, one for each connection\nmade to the listening socket.<\/p>\n<p>See <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> for more info.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/RawServerSocket-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.RawServerSocket",
    "shortname": "RawServerSocket",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-io\/RawServerSocket\/RawServerSocket.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.RawServerSocket",
            "params": []
        },
        {
            "desc": "<p>Returns a future for a <code>RawServerSocket<\/code>. When the future\ncompletes the server socket is bound to the given <code>address<\/code> and\n<code>port<\/code> and has started listening on it.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawServerSocket\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <code>v6Only<\/code> to set\nversion 6 only.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will\nbe chosen by the system. The actual port used can be retrieved\nusing the <code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional RawServerSocket\nobjects can bind to the same combination of <code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.\nIf <code>shared<\/code> is <code>true<\/code> and more <code>RawServerSocket<\/code>s from this isolate or\nother isolates are bound to the port, then the incoming connections will be\ndistributed among all the bound <code>RawServerSocket<\/code>s. Connections can be\ndistributed over multiple isolates this way.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;RawServerSocket&gt; bind(address, int port,\n    {int backlog: 0, bool v6Only: false, bool shared: false});<\/code><\/pre>\n    ",
            "href": "dart-io\/RawServerSocket\/bind.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawServerSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawServerSocket",
            "params": [
                {
                    "name": "address",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "backlog",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "shared",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "v6Only",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RawServerSocket&gt; close();<\/code><\/pre>\n    ",
            "href": "dart-io\/RawServerSocket\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.RawServerSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawServerSocket",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawServerSocket\/address.html",
            "isDeprecated": "0",
            "type": "dart:io.InternetAddress",
            "memberOf": "dart:io.RawServerSocket",
            "params": []
        },
        {
            "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawServerSocket\/port.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:io.RawServerSocket",
            "params": []
        }
    ]
}