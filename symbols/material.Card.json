{
    "desc": "<p>A material design card. A card has slightly rounded corners and a shadow.<\/p>\n<p>A card is a sheet of <a href=\"material\/Material-class.html\">Material<\/a> used to represent some related information,\nfor example an album, a geographical location, a meal, contact details, etc.<\/p>\n<p>This is what it looks like when run:<\/p>\n<p><img alt=\"A card with a slight shadow, consisting of two rows, one with an icon and\nsome text describing a musical, and the other with buttons for buying\ntickets or listening to the show.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/material\/card.png\"><\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis sample shows creation of a <a href=\"material\/Card-class.html\">Card<\/a> widget that shows album information\nand two actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Center(\n    child: Card(\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        children: &lt;Widget&gt;[\n          const ListTile(\n            leading: Icon(Icons.album),\n            title: Text('The Enchanted Nightingale'),\n            subtitle: Text('Music by Julie Gable. Lyrics by Sidney Stein.'),\n          ),\n          ButtonTheme.bar( \/\/ make buttons use the appropriate styles for cards\n            child: ButtonBar(\n              children: &lt;Widget&gt;[\n                FlatButton(\n                  child: const Text('BUY TICKETS'),\n                  onPressed: () { \/* ... *\/ },\n                ),\n                FlatButton(\n                  child: const Text('LISTEN'),\n                  onPressed: () { \/* ... *\/ },\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.Card.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.Card.1\n\n\/\/ This sample shows creation of a [Card] widget that shows album information\n\/\/ and two actions.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatelessWidget(),\n      ),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Card(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: &lt;Widget&gt;[\n            const ListTile(\n              leading: Icon(Icons.album),\n              title: Text('The Enchanted Nightingale'),\n              subtitle: Text('Music by Julie Gable. Lyrics by Sidney Stein.'),\n            ),\n            ButtonTheme.bar(\n              \/\/ make buttons use the appropriate styles for cards\n              child: ButtonBar(\n                children: &lt;Widget&gt;[\n                  FlatButton(\n                    child: const Text('BUY TICKETS'),\n                    onPressed: () {\/* ... *\/},\n                  ),\n                  FlatButton(\n                    child: const Text('LISTEN'),\n                    onPressed: () {\/* ... *\/},\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Sometimes the primary action area of a card is the card itself. Cards can be\none large touch target that shows a detail screen when tapped.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nThis sample shows creation of a <a href=\"material\/Card-class.html\">Card<\/a> widget that can be tapped. When\ntapped this <a href=\"material\/Card-class.html\">Card<\/a>'s <a href=\"material\/InkWell-class.html\">InkWell<\/a> displays an \"ink splash\" that fills the\nentire card.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Center(\n    child: Card(\n      child: InkWell(\n        splashColor: Colors.blue.withAlpha(30),\n        onTap: () {\n          print('Card tapped.');\n        },\n        child: Container(\n          width: 300,\n          height: 100,\n          child: Text('A card that can be tapped'),\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.Card.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.Card.2\n\n\/\/ This sample shows creation of a [Card] widget that can be tapped. When\n\/\/ tapped this [Card]'s [InkWell] displays an \"ink splash\" that fills the\n\/\/ entire card.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatelessWidget(),\n      ),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Card(\n        child: InkWell(\n          splashColor: Colors.blue.withAlpha(30),\n          onTap: () {\n            print('Card tapped.');\n          },\n          child: Container(\n            width: 300,\n            height: 100,\n            child: Text('A card that can be tapped'),\n          ),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ListTile-class.html\">ListTile<\/a>, to display icons and text in a card.<\/li>\n<li>\n<a href=\"material\/ButtonBar-class.html\">ButtonBar<\/a>, to display buttons at the bottom of a card. Typically these\nwould be styled using a <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a> created with <a href=\"material\/ButtonTheme\/ButtonTheme.bar.html\">new ButtonTheme.bar<\/a>.<\/li>\n<li>\n<a href=\"material\/showDialog.html\">showDialog<\/a>, to display a modal card.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/cards.html\">material.io\/design\/components\/cards.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Card-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Card",
    "shortname": "Card",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a material design card.<\/p>\n<p>The <code>elevation<\/code> must be null or non-negative. The <code>borderOnForeground<\/code>\nmust not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Card({\n  Key key,\n  this.color,\n  this.elevation,\n  this.shape,\n  this.borderOnForeground = true,\n  this.margin,\n  this.clipBehavior,\n  this.child,\n  this.semanticContainer = true,\n}) : assert(elevation == null || elevation &gt;= 0.0),\n     assert(borderOnForeground != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/Card\/Card.html",
            "isDeprecated": "0",
            "type": "",
            "name": "Card",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Card",
            "params": [
                {
                    "name": "borderOnForeground",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "margin",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "semanticContainer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/Card\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final CardTheme cardTheme = CardTheme.of(context);\n\n  return Semantics(\n    container: semanticContainer,\n    child: Container(\n      margin: margin ?? cardTheme.margin ?? const EdgeInsets.all(4.0),\n      child: Material(\n        type: MaterialType.card,\n        color: color ?? cardTheme.color ?? Theme.of(context).cardColor,\n        elevation: elevation ?? cardTheme.elevation ?? _defaultElevation,\n        shape: shape ?? cardTheme.shape ?? const RoundedRectangleBorder(\n          borderRadius: BorderRadius.all(Radius.circular(4.0)),\n        ),\n        borderOnForeground: borderOnForeground,\n        clipBehavior: clipBehavior ?? cardTheme.clipBehavior ?? _defaultClipBehavior,\n        child: Semantics(\n          explicitChildNodes: !semanticContainer,\n          child: child,\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Card\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Card",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether to paint the <a href=\"material\/Card\/shape.html\">shape<\/a> border in front of the <a href=\"material\/Card\/child.html\">child<\/a>.<\/p>\n<p>The default value is true.\nIf false, the border will be painted behind the <a href=\"material\/Card\/child.html\">child<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool borderOnForeground\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/borderOnForeground.html",
            "name": "borderOnForeground",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.\nIf this property is null then <a href=\"material\/Card\/clipBehavior.html\">ThemeData.cardTheme.clipBehavior<\/a> is used.\nIf that's null then the behavior will be <a href=\"dart-ui\/Clip-class.html\">Clip.none<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/clipBehavior.html",
            "name": "clipBehavior",
            "isDeprecated": false,
            "type": "dart:ui.Clip",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>The card's background color.<\/p>\n<p>Defines the card's <a href=\"material\/Card\/color.html\">Material.color<\/a>.<\/p>\n<p>If this property is null then <a href=\"material\/Card\/color.html\">ThemeData.cardTheme.color<\/a> is used,\nif that's null then <a href=\"material\/ThemeData\/cardColor.html\">ThemeData.cardColor<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this card. This controls the size of\nthe shadow below the card.<\/p>\n<p>Defines the card's <a href=\"material\/Card\/elevation.html\">Material.elevation<\/a>.<\/p>\n<p>If this property is null then <a href=\"material\/Card\/elevation.html\">ThemeData.cardTheme.elevation<\/a> is used,\nif that's null, the default value is 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/elevation.html",
            "name": "elevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>The empty space that surrounds the card.<\/p>\n<p>Defines the card's outer <a href=\"material\/Card\/margin.html\">Container.margin<\/a>.<\/p>\n<p>If this property is null then <a href=\"material\/Card\/margin.html\">ThemeData.cardTheme.margin<\/a> is used,\nif that's null, the default margin is 4.0 logical pixels on all sides:\n<code>EdgeInsets.all(4.0)<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry margin\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/margin.html",
            "name": "margin",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>Whether this widget represents a single semantic container, or if false\na collection of individual semantic nodes.<\/p>\n<p>Defaults to true.<\/p>\n<p>Setting this flag to true will attempt to merge all child semantics into\nthis node. Setting this flag to false will force all child semantic nodes\nto be explicit.<\/p>\n<p>This flag should be false if the card contains multiple different types\nof content.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool semanticContainer\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/semanticContainer.html",
            "name": "semanticContainer",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "material.Card",
            "params": []
        },
        {
            "desc": "<p>The shape of the card's <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>Defines the card's <a href=\"material\/Card\/shape.html\">Material.shape<\/a>.<\/p>\n<p>If this property is null then <a href=\"material\/Card\/shape.html\">ThemeData.cardTheme.shape<\/a> is used.\nIf that's null then the shape will be a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> with a\ncircular corner radius of 4.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/Card\/shape.html",
            "name": "shape",
            "isDeprecated": false,
            "type": "painting.ShapeBorder",
            "memberOf": "material.Card",
            "params": []
        }
    ]
}