{
    "name": "dart:core.int",
    "extends": [
        "dart:core.num",
        "dart:core.Object"
    ],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "operator &",
            "type": "dart:core.int",
            "desc": "<p>Bit-wise and operator.<\/p>\n<p>Treating both <code>this<\/code> and <code>other<\/code> as sufficiently large two's component\nintegers, the result is a number with only the bits set that are set in\nboth <code>this<\/code> and <code>other<\/code><\/p>\n<p>Of both operands are negative, the result is negative, otherwise\nthe result is non-negative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_bitwise_and.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator &amp;(int other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator <<",
            "type": "dart:core.int",
            "desc": "<p>Shift the bits of this integer to the left by <code>shiftAmount<\/code>.<\/p>\n<p>Shifting to the left makes the number larger, effectively multiplying\nthe number by <code>pow(2, shiftIndex)<\/code>.<\/p>\n<p>There is no limit on the size of the result. It may be relevant to\nlimit intermediate values by using the \"and\" operator with a suitable\nmask.<\/p>\n<p>It is an error if <code>shiftAmount<\/code> is negative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "shiftAmount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_shift_left.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator &lt;&lt;(int shiftAmount);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator >>",
            "type": "dart:core.int",
            "desc": "<p>Shift the bits of this integer to the right by <code>shiftAmount<\/code>.<\/p>\n<p>Shifting to the right makes the number smaller and drops the least\nsignificant bits, effectively doing an integer division by\n<code>pow(2, shiftIndex)<\/code>.<\/p>\n<p>It is an error if <code>shiftAmount<\/code> is negative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "shiftAmount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_shift_right.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator &gt;&gt;(int shiftAmount);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ^",
            "type": "dart:core.int",
            "desc": "<p>Bit-wise exclusive-or operator.<\/p>\n<p>Treating both <code>this<\/code> and <code>other<\/code> as sufficiently large two's component\nintegers, the result is a number with the bits set that are set in one,\nbut not both, of <code>this<\/code> and <code>other<\/code><\/p>\n<p>If the operands have the same sign, the result is non-negative,\notherwise the result is negative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_bitwise_exclusive_or.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator ^(int other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "abs",
            "type": "dart:core.int",
            "desc": "<p>Returns the absolute value of this integer.<\/p>\n<p>For any integer <code>x<\/code>, the result is the same as <code>x &lt; 0 ? -x : x<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/abs.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int abs();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ceil",
            "type": "dart:core.int",
            "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/ceil.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ceil();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ceilToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/ceilToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double ceilToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "floor",
            "type": "dart:core.int",
            "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/floor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int floor();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "floorToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/floorToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double floorToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "int.fromEnvironment",
            "type": "",
            "desc": "<p>Returns the integer value of the given environment declaration <code>name<\/code>.<\/p>\n<p>The result is the same as would be returned by:<\/p>\n<pre class=\"language-dart\"><code>int.tryParse(const String.fromEnvironment(name, defaultValue: \"\"))\n    ?? defaultValue\n<\/code><\/pre>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>const int.fromEnvironment(\"defaultPort\", defaultValue: 80)\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/int\/int.fromEnvironment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The .fromEnvironment() constructors are special in that we do not want\n\/\/ users to call them using \"new\". We prohibit that by giving them bodies\n\/\/ that throw, even though const constructors are not allowed to have bodies.\n\/\/ Disable those static errors.\n\/\/ignore: const_constructor_with_body\n\/\/ignore: const_factory\nexternal const factory int.fromEnvironment(String name, {int defaultValue});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "gcd",
            "type": "dart:core.int",
            "desc": "<p>Returns the greatest common divisor of this integer and <code>other<\/code>.<\/p>\n<p>If either number is non-zero, the result is the numerically greatest\ninteger dividing both <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>The greatest common divisor is independent of the order,\nso <code>x.gcd(y)<\/code> is  always the same as <code>y.gcd(x)<\/code>.<\/p>\n<p>For any integer <code>x<\/code>, <code>x.gcd(x)<\/code> is <code>x.abs()<\/code>.<\/p>\n<p>If both <code>this<\/code> and <code>other<\/code> is zero, the result is also zero.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/gcd.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int gcd(int other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "modInverse",
            "type": "dart:core.int",
            "desc": "<p>Returns the modular multiplicative inverse of this integer\nmodulo <code>modulus<\/code>.<\/p>\n<p>The <code>modulus<\/code> must be positive.<\/p>\n<p>It is an error if no modular inverse exists.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "modulus",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/modInverse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int modInverse(int modulus);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "modPow",
            "type": "dart:core.int",
            "desc": "<p>Returns this integer to the power of <code>exponent<\/code> modulo <code>modulus<\/code>.<\/p>\n<p>The <code>exponent<\/code> must be non-negative and <code>modulus<\/code> must be\npositive.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "exponent",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "modulus",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/modPow.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int modPow(int exponent, int modulus);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "parse",
            "type": "dart:core.int",
            "desc": "<p>Parse <code>source<\/code> as a, possibly signed, integer literal and return its value.<\/p>\n<p>The <code>source<\/code> must be a non-empty sequence of base-<code>radix<\/code> digits,\noptionally prefixed with a minus or plus sign ('-' or '+').\nIt must not be <code>null<\/code>.<\/p>\n<p>The <code>radix<\/code> must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z' with\nvalues 10 through 35. Also accepts upper-case letters with the same\nvalues as the lower-case ones.<\/p>\n<p>If no <code>radix<\/code> is given then it defaults to 10. In this case, the <code>source<\/code>\ndigits may also start with <code>0x<\/code>, in which case the number is interpreted\nas a hexadecimal integer literal,\nWhen <code>int<\/code> is implemented by 64-bit signed integers,\nhexadecimal integer literals may represent values larger than\n2<sup>63<\/sup>, in which case the value is parsed as if it is an\n<em>unsigned<\/em> number, and the resulting value is the corresponding\nsigned integer value.<\/p>\n<p>For any int <code>n<\/code> and valid radix <code>r<\/code>, it is guaranteed that\n<code>n == int.parse(n.toRadixString(r), radix: r)<\/code>.<\/p>\n<p>If the <code>source<\/code> string does not contain a valid integer literal,\noptionally prefixed by a sign, a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> is thrown\n(unless the deprecated <code>onError<\/code> parameter is used, see below).<\/p>\n<p>Instead of throwing and immediately catching the <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>,\ninstead use <a href=\"dart-core\/int\/tryParse.html\">tryParse<\/a> to handle a parsing error.\nExample:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var value = int.tryParse(text);\nif (value == null) ... handle the problem\n<\/code><\/pre>\n<p>The <code>onError<\/code> parameter is deprecated and will be removed.\nInstead of <code>int.parse(string, onError: (string) =&gt; ...)<\/code>,\nyou should use <code>int.tryParse(string) ?? (...)<\/code>.<\/p>\n<p>When the source string is not valid and <code>onError<\/code> is provided,\nwhenever a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> would be thrown,\n<code>onError<\/code> is instead called with <code>source<\/code> as argument,\nand the result of that call is returned by <a href=\"dart-core\/int\/parse.html\">parse<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radix",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/parse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static int parse(String source,\n    {int radix, @deprecated int onError(String source)});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "round",
            "type": "dart:core.int",
            "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/round.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int round();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "roundToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/roundToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double roundToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toRadixString",
            "type": "dart:core.String",
            "desc": "<p>Converts <a href=\"dart-core\/int-class.html\">this<\/a> to a string representation in the given <code>radix<\/code>.<\/p>\n<p>In the string representation, lower-case letters are used for digits above\n'9', with 'a' being 10 an 'z' being 35.<\/p>\n<p>The <code>radix<\/code> argument must be an integer in the range 2 to 36.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "radix",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/toRadixString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toRadixString(int radix);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toSigned",
            "type": "dart:core.int",
            "desc": "<p>Returns the least significant <code>width<\/code> bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in <code>width<\/code> bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>                               V--sign bit-V\n16.toSigned(5) == -16   \/\/  00010000 -&gt; 11110000\n239.toSigned(5) == 15   \/\/  11101111 -&gt; 00001111\n                               ^           ^\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit signed quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toSigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>127<\/code>, wrap to <code>-128<\/code> and count back up to\n<code>127<\/code>.<\/p>\n<p>If the input value fits in <code>width<\/code> bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of <code>x<\/code>\nis <code>x.bitLength + 1<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toSigned(x.bitLength + 1);\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/toSigned.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toSigned(int width);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this integer.<\/p>\n<p>The returned string is parsable by <a href=\"dart-core\/int\/parse.html\">parse<\/a>.\nFor any <code>int<\/code> <code>i<\/code>, it is guaranteed that\n<code>i == int.parse(i.toString())<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toUnsigned",
            "type": "dart:core.int",
            "desc": "<p>Returns the least significant <code>width<\/code> bits of this integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>(-1).toUnsigned(5) == 31   \/\/ 11111111  -&gt;  00011111\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toUnsigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>255<\/code> and then wrap around to <code>0<\/code>.<\/p>\n<p>If the input fits in <code>width<\/code> bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of <code>x<\/code> is\ngiven by <code>x.bitLength<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toUnsigned(x.bitLength);\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "width",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/toUnsigned.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toUnsigned(int width);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "truncate",
            "type": "dart:core.int",
            "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/truncate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int truncate();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "truncateToDouble",
            "type": "dart:core.double",
            "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/truncateToDouble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double truncateToDouble();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "tryParse",
            "type": "dart:core.int",
            "desc": "<p>Parse <code>source<\/code> as a, possibly signed, integer literal and return its value.<\/p>\n<p>Like <a href=\"dart-core\/int\/parse.html\">parse<\/a> except that this function returns <code>null<\/code> where a\nsimilar call to <a href=\"dart-core\/int\/parse.html\">parse<\/a> would throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>,\nand the <code>source<\/code> must still not be <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "source",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radix",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/tryParse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static int tryParse(String source, {int radix});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator unary-",
            "type": "dart:core.int",
            "desc": "<p>Return the negative value of this integer.<\/p>\n<p>The result of negating an integer always has the opposite sign, except\nfor zero, which is its own negation.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_unary_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator -();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator |",
            "type": "dart:core.int",
            "desc": "<p>Bit-wise or operator.<\/p>\n<p>Treating both <code>this<\/code> and <code>other<\/code> as sufficiently large two's component\nintegers, the result is a number with the bits set that are set in either\nof <code>this<\/code> and <code>other<\/code><\/p>\n<p>If both operands are non-negative, the result is non-negative,\notherwise the result us negative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_bitwise_or.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator |(int other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~",
            "type": "dart:core.int",
            "desc": "<p>The bit-wise negate operator.<\/p>\n<p>Treating <code>this<\/code> as a sufficiently large two's component integer,\nthe result is a number with the opposite bits set.<\/p>\n<p>This maps any integer <code>x<\/code> to <code>-x - 1<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.int",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/int\/operator_bitwise_negate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int operator ~();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bitLength",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the minimum number of bits required to store this integer.<\/p>\n<p>The number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.<\/p>\n<p>To find the number of bits needed to store the value as a signed value,\nadd one, i.e. use <code>x.bitLength + 1<\/code>.<\/p>\n<pre class=\"language-dart\"><code>x.bitLength == (-x-1).bitLength\n\n3.bitLength == 2;     \/\/ 00000011\n2.bitLength == 2;     \/\/ 00000010\n1.bitLength == 1;     \/\/ 00000001\n0.bitLength == 0;     \/\/ 00000000\n(-1).bitLength == 0;  \/\/ 11111111\n(-2).bitLength == 1;  \/\/ 11111110\n(-3).bitLength == 2;  \/\/ 11111101\n(-4).bitLength == 2;  \/\/ 11111100\n<\/code><\/pre>\n        ",
            "memberOf": "dart:core.int",
            "isConstant": false,
            "href": "dart-core\/int\/bitLength.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get bitLength;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEven",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns true if and only if this integer is even.<\/p>\n        ",
            "memberOf": "dart:core.int",
            "isConstant": false,
            "href": "dart-core\/int\/isEven.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEven;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isOdd",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns true if and only if this integer is odd.<\/p>\n        ",
            "memberOf": "dart:core.int",
            "isConstant": false,
            "href": "dart-core\/int\/isOdd.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isOdd;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "sign",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the sign of this integer.<\/p>\n<p>Returns 0 for zero, -1 for values less than zero and\n+1 for values greater than zero.<\/p>\n        ",
            "memberOf": "dart:core.int",
            "isConstant": false,
            "href": "dart-core\/int\/sign.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get sign;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "animation.IntTween",
        "animation.StepTween",
        "convert.ByteAccumulatorSink",
        "convert.HexCodec",
        "convert.HexDecoder",
        "convert.HexEncoder",
        "convert.PercentCodec",
        "convert.PercentDecoder",
        "convert.PercentEncoder",
        "crypto.Hash",
        "crypto.Hmac",
        "crypto.MD5",
        "crypto.Sha1",
        "crypto.Sha256",
        "dart:convert.AsciiCodec",
        "dart:convert.AsciiDecoder",
        "dart:convert.AsciiEncoder",
        "dart:convert.Base64Codec",
        "dart:convert.Base64Decoder",
        "dart:convert.Base64Encoder",
        "dart:convert.ByteConversionSink",
        "dart:convert.ByteConversionSinkBase",
        "dart:convert.Encoding",
        "dart:convert.JsonUtf8Encoder",
        "dart:convert.Latin1Codec",
        "dart:convert.Latin1Decoder",
        "dart:convert.Latin1Encoder",
        "dart:convert.Utf8Codec",
        "dart:convert.Utf8Decoder",
        "dart:convert.Utf8Encoder",
        "dart:core.Runes",
        "dart:io.GZipCodec",
        "dart:io.Stdin",
        "dart:io.SystemEncoding",
        "dart:io.ZLibCodec",
        "dart:io.ZLibDecoder",
        "dart:io.ZLibEncoder",
        "dart:typed_data.UnmodifiableInt8ListView",
        "dart:typed_data.UnmodifiableInt16ListView",
        "dart:typed_data.UnmodifiableInt32ListView",
        "dart:typed_data.UnmodifiableInt64ListView",
        "dart:typed_data.UnmodifiableUint8ClampedListView",
        "dart:typed_data.UnmodifiableUint8ListView",
        "dart:typed_data.UnmodifiableUint16ListView",
        "dart:typed_data.UnmodifiableUint32ListView",
        "dart:typed_data.UnmodifiableUint64ListView",
        "foundation.IntProperty",
        "material.MaterialAccentColor",
        "material.MaterialColor",
        "typed_data.typed_buffers.Int8Buffer",
        "typed_data.typed_buffers.Int16Buffer",
        "typed_data.typed_buffers.Int32Buffer",
        "typed_data.typed_buffers.Int64Buffer",
        "typed_data.typed_buffers.Uint8Buffer",
        "typed_data.typed_buffers.Uint8ClampedBuffer",
        "typed_data.typed_buffers.Uint16Buffer",
        "typed_data.typed_buffers.Uint32Buffer",
        "typed_data.typed_buffers.Uint64Buffer"
    ],
    "realImplementors": [
        "animation.IntTween",
        "animation.StepTween",
        "convert.ByteAccumulatorSink",
        "convert.HexCodec",
        "convert.HexDecoder",
        "convert.HexEncoder",
        "convert.PercentCodec",
        "convert.PercentDecoder",
        "convert.PercentEncoder"
    ],
    "cn": [],
    "href": "dart-core\/int-class.html",
    "desc": "<p>An integer number.<\/p>\n<p>The default implementation of <code>int<\/code> is 64-bit two's complement integers\nwith operations that wrap to that range on overflow.<\/p>\n<p><strong>Note:<\/strong> When compiling to JavaScript, integers are restricted to values\nthat can be represented exactly by double-precision floating point values.\nThe available integer values include all integers between -2^53 and 2^53,\nand some integers with larger magnitude. That includes some integers larger\nthan 2^63.\nThe behavior of the operators and methods in the <a href=\"dart-core\/int-class.html\">int<\/a>\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript. For example, the bitwise operators truncate their\noperands to 32-bit integers when compiled to JavaScript.<\/p>\n<p>Classes cannot extend, implement, or mix in <code>int<\/code>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "int"
}