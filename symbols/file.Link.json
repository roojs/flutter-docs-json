{
    "name": "file.Link",
    "extends": [],
    "memberOf": "file",
    "events": [],
    "methods": [
        {
            "name": "Link",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "file.Link",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-file_file\/Link\/Link.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "create",
            "type": "dart:async.Future<file.Link>",
            "desc": "<p>Creates a symbolic link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with\nthe link when it has been created. If the link exists,\nthe future will complete with an error.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created\nonly if all directories in its path exist.\nIf <code>recursive<\/code> is true, all non-existing path\ncomponents are created. The directories in the path of <code>target<\/code> are\nnot affected, unless they are also in <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
            "static": false,
            "memberOf": "file.Link",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/Link\/create.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; create(String target, {bool recursive: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.Link"
            ]
        },
        {
            "name": "rename",
            "type": "dart:async.Future<file.Link>",
            "desc": "<p>Renames this link. Returns a <code>Future&lt;Link&gt;<\/code> that completes\nwith a <a href=\"package-file_file\/Link-class.html\">Link<\/a> instance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory,\nthe operation fails and the future completes with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "file.Link",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/Link\/rename.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; rename(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.Link"
            ]
        },
        {
            "name": "renameSync",
            "type": "file.Link",
            "desc": "<p>Synchronously renames this link. Returns a <a href=\"package-file_file\/Link-class.html\">Link<\/a>\ninstance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory\nthe operation fails and an exception is thrown.<\/p>\n    ",
            "static": false,
            "memberOf": "file.Link",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/Link\/renameSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLink renameSync(String newPath);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "update",
            "type": "dart:async.Future<file.Link>",
            "desc": "<p>Updates the link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with the\nlink when it has been updated.  Calling <a href=\"package-file_file\/Link\/update.html\">update<\/a> on a non-existing link\nwill complete its returned future with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "file.Link",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/Link\/update.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; update(String target);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "file.Link"
            ]
        }
    ],
    "props": [
        {
            "name": "absolute",
            "type": "file.Link",
            "types": [],
            "desc": "<p>Returns a <a href=\"package-file_file\/Link-class.html\">Link<\/a> instance whose path is the absolute path to <a href=\"package-file_file\/Link-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
            "memberOf": "file.Link",
            "isConstant": false,
            "href": "package-file_file\/Link\/absolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLink get absolute;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-file_file\/Link-class.html",
    "desc": "<p>A reference to a symbolic link on the file system.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Link"
}