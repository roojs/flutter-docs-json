{
    "desc": "<p>The <a href=\"dart-io\/RawDatagramSocket-class.html\">RawDatagramSocket<\/a> is a low-level interface to an UDP socket,\nexposing the raw events signaled by the system. It's a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> of\n<a href=\"dart-io\/RawSocketEvent-class.html\">RawSocketEvent<\/a>s.<\/p>\n<p>Note that the event <a href=\"dart-io\/RawSocketEvent\/readClosed-constant.html\">RawSocketEvent.readClosed<\/a> will never be\nreceived as an UDP socket cannot be closed by a remote peer.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/RawDatagramSocket-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.RawDatagramSocket",
    "shortname": "RawDatagramSocket",
    "extends": [
        "dart:io.RawSocketEvent",
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "dart-io\/RawDatagramSocket\/RawDatagramSocket.html",
            "isDeprecated": false,
            "type": "",
            "name": "RawDatagramSocket",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Creates a new raw datagram socket binding it to an address and\nport.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;RawDatagramSocket&gt; bind(host, int port,\n    {bool reuseAddress: true, bool reusePort: false, int ttl: 1});<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/bind.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:io.RawDatagramSocket>",
            "name": "bind",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": [
                {
                    "name": "host",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "reuseAddress",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "reusePort",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "ttl",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Close the datagram socket.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/close.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Use <a href=\"dart-io\/RawDatagramSocket\/getRawOption.html\">getRawOption<\/a> to get low level information about the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See\n<a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for available options.<\/p>\n<p>Returns <a href=\"dart-io\/RawSocketOption\/value.html\">RawSocketOption.value<\/a> on success.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List getRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/getRawOption.html",
            "isDeprecated": false,
            "type": "dart:typed_data.Uint8List",
            "name": "getRawOption",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": [
                {
                    "name": "option",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.RawSocketOption"
                }
            ]
        },
        {
            "desc": "<p>Join a multicast group.<\/p>\n<p>If an error occur when trying to join the multicast group an\nexception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void joinMulticast(InternetAddress group, [NetworkInterface interface]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/joinMulticast.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "joinMulticast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": [
                {
                    "name": "group",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.InternetAddress"
                },
                {
                    "name": "interface",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.NetworkInterface"
                }
            ]
        },
        {
            "desc": "<p>Leave a multicast group.<\/p>\n<p>If an error occur when trying to join the multicase group an\nexception is thrown.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void leaveMulticast(InternetAddress group, [NetworkInterface interface]);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/leaveMulticast.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "leaveMulticast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": [
                {
                    "name": "group",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.InternetAddress"
                },
                {
                    "name": "interface",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.NetworkInterface"
                }
            ]
        },
        {
            "desc": "<p>Receive a datagram. If there are no datagrams available <code>null<\/code> is\nreturned.<\/p>\n<p>The maximum length of the datagram that can be received is 65503 bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Datagram receive();<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/receive.html",
            "isDeprecated": false,
            "type": "dart:io.Datagram",
            "name": "receive",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Send a datagram.<\/p>\n<p>Returns the number of bytes written. This will always be either\nthe size of <code>buffer<\/code> or <code>0<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int send(List&lt;int&gt; buffer, InternetAddress address, int port);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/send.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "send",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": [
                {
                    "name": "address",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.InternetAddress"
                },
                {
                    "name": "buffer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "port",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Use <a href=\"dart-io\/RawDatagramSocket\/setRawOption.html\">setRawOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for\navailable options.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
            "href": "dart-io\/RawDatagramSocket\/setRawOption.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setRawOption",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.RawDatagramSocket",
            "params": [
                {
                    "name": "option",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.RawSocketOption"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/address.html",
            "name": "address",
            "isDeprecated": false,
            "type": "dart:io.InternetAddress",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Set or get, whether IPv4 broadcast is enabled.<\/p>\n<p>IPv4 broadcast needs to be enabled by the sender for sending IPv4\nbroadcast packages. By default IPv4 broadcast is disabled.<\/p>\n<p>For IPv6 there is no general broadcast mechanism. Use multicast\ninstead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool broadcastEnabled\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/broadcastEnabled.html",
            "name": "broadcastEnabled",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Set or get, the maximum network hops for multicast packages\noriginating from this socket.<\/p>\n<p>For IPv4 this is referred to as TTL (time to live).<\/p>\n<p>By default this value is 1 causing multicast traffic to stay on\nthe local network.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int multicastHops\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/multicastHops.html",
            "name": "multicastHops",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Set or get, the network interface used for outgoing multicast packages.<\/p>\n<p>A value of <code>null<\/code>indicate that the system chooses the network\ninterface to use.<\/p>\n<p>By default this value is <code>null<\/code><\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">NetworkInterface multicastInterface\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/multicastInterface.html",
            "name": "multicastInterface",
            "isDeprecated": false,
            "type": "dart:io.NetworkInterface",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Set or get, whether multicast traffic is looped back to the host.<\/p>\n<p>By default multicast loopback is enabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool multicastLoopback\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/multicastLoopback.html",
            "name": "multicastLoopback",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/port.html",
            "name": "port",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Set or get, if the <a href=\"dart-io\/RawDatagramSocket-class.html\">RawDatagramSocket<\/a> should listen for\n<a href=\"dart-io\/RawSocketEvent\/read-constant.html\">RawSocketEvent.read<\/a> events. Default is <code>true<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool readEventsEnabled\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/readEventsEnabled.html",
            "name": "readEventsEnabled",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        },
        {
            "desc": "<p>Set or get, if the <a href=\"dart-io\/RawDatagramSocket-class.html\">RawDatagramSocket<\/a> should listen for\n<a href=\"dart-io\/RawSocketEvent\/write-constant.html\">RawSocketEvent.write<\/a> events. Default is <code>true<\/code>.  This is a\none-shot listener, and writeEventsEnabled must be set to true\nagain to receive another write event.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool writeEventsEnabled\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/RawDatagramSocket\/writeEventsEnabled.html",
            "name": "writeEventsEnabled",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:io.RawDatagramSocket",
            "params": []
        }
    ]
}