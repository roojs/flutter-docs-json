{
    "desc": "<p>An iOS-style text field.<\/p>\n<p>A text field lets the user enter text, either with a hardware keyboard or with\nan onscreen keyboard.<\/p>\n<p>This widget corresponds to both a <code>UITextField<\/code> and an editable <code>UITextView<\/code>\non iOS.<\/p>\n<p>The text field calls the <a href=\"cupertino\/CupertinoTextField\/onChanged.html\">onChanged<\/a> callback whenever the user changes the\ntext in the field. If the user indicates that they are done typing in the\nfield (e.g., by pressing a button on the soft keyboard), the text field\ncalls the <a href=\"cupertino\/CupertinoTextField\/onSubmitted.html\">onSubmitted<\/a> callback.<\/p>\n<p>To control the text that is displayed in the text field, use the\n<a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a>. For example, to set the initial value of the text field, use\na <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> that already contains some text such as:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyPrefilledText extends StatefulWidget {\n  @override\n  _MyPrefilledTextState createState() =&gt; _MyPrefilledTextState();\n}\n\nclass _MyPrefilledTextState extends State&lt;MyPrefilledText&gt; {\n  TextEditingController _textController;\n\n  @override\n  void initState() {\n    super.initState();\n    _textController = TextEditingController(text: 'initial text');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoTextField(controller: _textController);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> can also control the selection and composing region (and to\nobserve changes to the text, selection, and composing region).<\/p>\n<p>The text field has an overridable <a href=\"cupertino\/CupertinoTextField\/decoration.html\">decoration<\/a> that, by default, draws a\nrounded rectangle border around the text field. If you set the <a href=\"cupertino\/CupertinoTextField\/decoration.html\">decoration<\/a>\nproperty to null, the decoration will be removed entirely.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uitextfield\">developer.apple.com\/documentation\/uikit\/uitextfield<\/a><\/li>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, an alternative text field widget that follows the Material\nDesign UI conventions.<\/li>\n<li>\n<a href=\"widgets\/EditableText-class.html\">EditableText<\/a>, which is the raw text editing control at the heart of a\n<a href=\"material\/TextField-class.html\">TextField<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "cupertino\/CupertinoTextField-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "cupertino",
    "name": "cupertino.CupertinoTextField",
    "shortname": "CupertinoTextField",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Called when the user initiates a change to the TextField's\nvalue: when they have inserted or deleted text.<\/p>\n<p>This callback does run not when the TextField's text is changed\nprogrammatically, via the TextField's <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a>. Typically it\nisn't necessary to be notified of such changes, since they're\ninitiated by the app itself.<\/p>\n<p>To be notified of all changes to the TextField's text, cursor,\nand selection, one can add a listener to its <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> with\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">TextEditingController.addListener<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;String&gt; onChanged\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/onChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.String>",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Called when the user submits editable content (e.g., user presses the \"done\"\nbutton on the keyboard).<\/p>\n<p>The default implementation of <a href=\"cupertino\/CupertinoTextField\/onEditingComplete.html\">onEditingComplete<\/a> executes 2 different\nbehaviors based on the situation:<\/p>\n<ul>\n<li>\n<p>When a completion action is pressed, such as \"done\", \"go\", \"send\", or\n\"search\", the user's content is submitted to the <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> and then\nfocus is given up.<\/p>\n<\/li>\n<li>\n<p>When a non-completion action is pressed, such as \"next\" or \"previous\",\nthe user's content is submitted to the <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a>, but focus is not\ngiven up because developers may want to immediately move focus to\nanother input widget within <a href=\"cupertino\/CupertinoTextField\/onSubmitted.html\">onSubmitted<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>Providing <a href=\"cupertino\/CupertinoTextField\/onEditingComplete.html\">onEditingComplete<\/a> prevents the aforementioned default behavior.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onEditingComplete\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/onEditingComplete.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Called when the user indicates that they are done editing the text in the\nfield.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;String&gt; onSubmitted\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/onSubmitted.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.String>",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates an iOS-style text field.<\/p>\n<p>To provide a pre-filled text entry, pass in a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a> with\nan initial value to the <code>controller<\/code> parameter.<\/p>\n<p>To provide a hint placeholder text that appears when the text entry is\nempty, pass a <a href=\"dart-core\/String-class.html\">String<\/a> to the <code>placeholder<\/code> parameter.<\/p>\n<p>The <code>maxLines<\/code> property can be set to null to remove the restriction on\nthe number of lines. In this mode, the intrinsic height of the widget will\ngrow as the number of lines of text grows. By default, it is <code>1<\/code>, meaning\nthis is a single-line text field and will scroll horizontally when\noverflown. <code>maxLines<\/code> must not be zero.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><code>minLines<\/code><\/li>\n<li>\n<code>expands<\/code>, to allow the widget to size itself to its parent's height.<\/li>\n<li>\n<code>maxLength<\/code>, which discusses the precise meaning of \"number of\ncharacters\" and how it may differ from the intuitive meaning.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTextField({\n  Key key,\n  this.controller,\n  this.focusNode,\n  this.decoration = _kDefaultRoundedBorderDecoration,\n  this.padding = const EdgeInsets.all(6.0),\n  this.placeholder,\n  this.prefix,\n  this.prefixMode = OverlayVisibilityMode.always,\n  this.suffix,\n  this.suffixMode = OverlayVisibilityMode.always,\n  this.clearButtonMode = OverlayVisibilityMode.never,\n  TextInputType keyboardType,\n  this.textInputAction,\n  this.textCapitalization = TextCapitalization.none,\n  this.style,\n  this.strutStyle,\n  this.textAlign = TextAlign.start,\n  this.autofocus = false,\n  this.obscureText = false,\n  this.autocorrect = true,\n  this.maxLines = 1,\n  this.minLines,\n  this.expands = false,\n  this.maxLength,\n  this.maxLengthEnforced = true,\n  this.onChanged,\n  this.onEditingComplete,\n  this.onSubmitted,\n  this.inputFormatters,\n  this.enabled,\n  this.cursorWidth = 2.0,\n  this.cursorRadius = const Radius.circular(2.0),\n  this.cursorColor,\n  this.keyboardAppearance,\n  this.scrollPadding = const EdgeInsets.all(20.0),\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(textAlign != null),\n     assert(autofocus != null),\n     assert(obscureText != null),\n     assert(autocorrect != null),\n     assert(maxLengthEnforced != null),\n     assert(scrollPadding != null),\n     assert(dragStartBehavior != null),\n     assert(maxLines == null || maxLines &gt; 0),\n     assert(minLines == null || minLines &gt; 0),\n     assert(\n       (maxLines == null) || (minLines == null) || (maxLines &gt;= minLines),\n       'minLines can\\'t be greater than maxLines',\n     ),\n     assert(expands != null),\n     assert(\n       !expands || (maxLines == null &amp;&amp; minLines == null),\n       'minLines and maxLines must be null when expands is true.',\n     ),\n     assert(maxLength == null || maxLength &gt; 0),\n     assert(clearButtonMode != null),\n     assert(prefixMode != null),\n     assert(suffixMode != null),\n     keyboardType = keyboardType ?? (maxLines == 1 ? TextInputType.text : TextInputType.multiline),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoTextField\/CupertinoTextField.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "cupertino.CupertinoTextField",
            "params": [
                {
                    "name": "autocorrect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "autofocus",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "clearButtonMode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "cupertino.OverlayVisibilityMode"
                },
                {
                    "name": "controller",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.TextEditingController"
                },
                {
                    "name": "cursorColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cursorRadius",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Radius"
                },
                {
                    "name": "cursorWidth",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "decoration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.BoxDecoration"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "enabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "expands",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focusNode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.FocusNode"
                },
                {
                    "name": "inputFormatters",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<services.TextInputFormatter>"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "keyboardAppearance",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "keyboardType",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextInputType"
                },
                {
                    "name": "maxLength",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "maxLengthEnforced",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "maxLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "minLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "obscureText",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onChanged",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.String>"
                },
                {
                    "name": "onEditingComplete",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onSubmitted",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.String>"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "placeholder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "prefix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "prefixMode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "cupertino.OverlayVisibilityMode"
                },
                {
                    "name": "scrollPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsets"
                },
                {
                    "name": "strutStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.StrutStyle"
                },
                {
                    "name": "style",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "suffix",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "suffixMode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "cupertino.OverlayVisibilityMode"
                },
                {
                    "name": "textAlign",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                },
                {
                    "name": "textCapitalization",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextCapitalization"
                },
                {
                    "name": "textInputAction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextInputAction"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoTextField\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoTextFieldState createState() =&gt; _CupertinoTextFieldState();<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoTextField\/createState.html",
            "isDeprecated": "0",
            "type": "<_CupertinoTextFieldState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoTextField\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n\n  properties.add(DiagnosticsProperty&lt;TextEditingController&gt;('controller', controller, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;FocusNode&gt;('focusNode', focusNode, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;BoxDecoration&gt;('decoration', decoration));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding));\n  properties.add(StringProperty('placeholder', placeholder));\n  properties.add(DiagnosticsProperty&lt;OverlayVisibilityMode&gt;('prefix', prefix == null ? null : prefixMode));\n  properties.add(DiagnosticsProperty&lt;OverlayVisibilityMode&gt;('suffix', suffix == null ? null : suffixMode));\n  properties.add(DiagnosticsProperty&lt;OverlayVisibilityMode&gt;('clearButtonMode', clearButtonMode));\n  properties.add(DiagnosticsProperty&lt;TextInputType&gt;('keyboardType', keyboardType, defaultValue: TextInputType.text));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('style', style, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('autofocus', autofocus, defaultValue: false));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('autocorrect', autocorrect, defaultValue: false));\n  properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n  properties.add(IntProperty('minLines', minLines, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('expands', expands, defaultValue: false));\n  properties.add(IntProperty('maxLength', maxLength, defaultValue: null));\n  properties.add(FlagProperty('maxLengthEnforced', value: maxLengthEnforced, ifTrue: 'max length enforced'));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('cursorColor', cursorColor, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoTextField\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoTextField",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether to enable autocorrection.<\/p>\n<p>Defaults to true. Cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autocorrect\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/autocorrect.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Whether this text field should focus itself if nothing else is already\nfocused.<\/p>\n<p>If true, the keyboard will open as soon as this text field obtains focus.\nOtherwise, the keyboard is only shown after the user taps the text field.<\/p>\n<p>Defaults to false. Cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autofocus\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/autofocus.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Show an iOS-style clear button to clear the current text entry.<\/p>\n<p>Can be made to appear depending on various text states of the\n<a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>.<\/p>\n<p>Will only appear if no <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> widget is appearing.<\/p>\n<p>Defaults to never appearing and cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OverlayVisibilityMode clearButtonMode\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/clearButtonMode.html",
            "isDeprecated": "0",
            "type": "cupertino.OverlayVisibilityMode",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Controls the text being edited.<\/p>\n<p>If null, this widget will create its own <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextEditingController controller\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/controller.html",
            "isDeprecated": "0",
            "type": "widgets.TextEditingController",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The color to use when painting the cursor.<\/p>\n<p>Defaults to the <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">CupertinoThemeData.primaryColor<\/a> of the ambient theme,\nwhich itself defaults to <a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a> in the light theme\nand <a href=\"cupertino\/CupertinoColors\/activeOrange-constant.html\">CupertinoColors.activeOrange<\/a> in the dark theme.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color cursorColor\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/cursorColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>How rounded the corners of the cursor should be.<\/p>\n<p>By default, the cursor has no radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius cursorRadius\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/cursorRadius.html",
            "isDeprecated": "0",
            "type": "dart:ui.Radius",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>How thick the cursor will be.<\/p>\n<p>Defaults to 2.0<\/p>\n<p>The cursor will draw under the text. The cursor width will extend\nto the right of the boundary between characters for left-to-right text\nand to the left for right-to-left text. This corresponds to extending\ndownstream relative to the selected position. Negative values may be used\nto reverse this behavior.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double cursorWidth\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/cursorWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Controls the <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> of the box behind the text input.<\/p>\n<p>Defaults to having a rounded rectangle grey border and can be null to have\nno box decoration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxDecoration decoration\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/decoration.html",
            "isDeprecated": "0",
            "type": "painting.BoxDecoration",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoTextField\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/dragStartBehavior.html",
            "isDeprecated": "0",
            "type": "gestures.DragStartBehavior",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Disables the text field when false.<\/p>\n<p>Text fields in disabled states have a light grey background and don't\nrespond to touch events including the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a>, <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> and the clear\nbutton.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/enabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Whether this widget's height will be sized to fill its parent.<\/p>\n<p>If set to true and wrapped in a parent widget like <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or\n<a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a>, the input will expand to fill the parent.<\/p>\n<p><a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> and <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> must both be null when this is set to true,\notherwise an error is thrown.<\/p>\n<p>Defaults to false.<\/p>\n<p>See the examples in <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> for the complete picture of how <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a>,\n<a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a>, and <a href=\"cupertino\/CupertinoTextField\/expands.html\">expands<\/a> interact to produce various behaviors.<\/p>\n<p>Input that matches the height of its parent<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Expanded(\n  child: TextField(maxLines: null, expands: true),\n)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool expands\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/expands.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Controls whether this widget has keyboard focus.<\/p>\n<p>If null, this widget will create its own <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FocusNode focusNode\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/focusNode.html",
            "isDeprecated": "0",
            "type": "widgets.FocusNode",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Optional input validation and formatting overrides.<\/p>\n<p>Formatters are run in the provided order when the text input changes.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;TextInputFormatter&gt; inputFormatters\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/inputFormatters.html",
            "isDeprecated": "0",
            "type": "dart:core.List<services.TextInputFormatter>",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The appearance of the keyboard.<\/p>\n<p>This setting is only honored on iOS devices.<\/p>\n<p>If null, defaults to <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness keyboardAppearance\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/keyboardAppearance.html",
            "isDeprecated": "0",
            "type": "dart:ui.Brightness",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The type of keyboard to use for editing the text.<\/p>\n<p>Defaults to <a href=\"services\/TextInputType\/text-constant.html\">TextInputType.text<\/a> if <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> is one and\n<a href=\"services\/TextInputType\/multiline-constant.html\">TextInputType.multiline<\/a> otherwise.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextInputType keyboardType\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/keyboardType.html",
            "isDeprecated": "0",
            "type": "services.TextInputType",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The maximum number of characters (Unicode scalar values) to allow in the\ntext field.<\/p>\n<p>If set, a character counter will be displayed below the\nfield, showing how many characters have been entered and how many are\nallowed. After <a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a> characters have been input, additional input\nis ignored, unless <a href=\"cupertino\/CupertinoTextField\/maxLengthEnforced.html\">maxLengthEnforced<\/a> is set to false. The TextField\nenforces the length with a <a href=\"services\/LengthLimitingTextInputFormatter-class.html\">LengthLimitingTextInputFormatter<\/a>, which is\nevaluated after the supplied <a href=\"cupertino\/CupertinoTextField\/inputFormatters.html\">inputFormatters<\/a>, if any.<\/p>\n<p>This value must be either null or greater than zero. If set to null\n(the default), there is no limit to the number of characters allowed.<\/p>\n<p>Whitespace characters (e.g. newline, space, tab) are included in the\ncharacter count.<\/p>\n<h2 id=\"limitations\">Limitations<\/h2>\n<p>The CupertinoTextField does not currently count Unicode grapheme clusters\n(i.e. characters visible to the user), it counts Unicode scalar values,\nwhich leaves out a number of useful possible characters (like many emoji\nand composed characters), so this will be inaccurate in the presence of\nthose characters. If you expect to encounter these kinds of characters, be\ngenerous in the maxLength used.<\/p>\n<p>For instance, the character \"\u00f6\" can be represented as '\\u{006F}\\u{0308}',\nwhich is the letter \"o\" followed by a composed diaeresis \"\u00a8\", or it can\nbe represented as '\\u{00F6}', which is the Unicode scalar value \"LATIN\nSMALL LETTER O WITH DIAERESIS\". In the first case, the text field will\ncount two characters, and the second case will be counted as one\ncharacter, even though the user can see no difference in the input.<\/p>\n<p>Similarly, some emoji are represented by multiple scalar values. The\nUnicode \"THUMBS UP SIGN + MEDIUM SKIN TONE MODIFIER\", \"\ud83d\udc4d\ud83c\udffd\", should be\ncounted as a single character, but because it is a combination of two\nUnicode scalar values, '\\u{1F44D}\\u{1F3FD}', it is counted as two\ncharacters.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/LengthLimitingTextInputFormatter-class.html\">LengthLimitingTextInputFormatter<\/a> for more information on how it\ncounts characters, and how it may differ from the intuitive meaning.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLength\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/maxLength.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>If true, prevents the field from allowing more than <a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a>\ncharacters.<\/p>\n<p>If <a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a> is set, <a href=\"cupertino\/CupertinoTextField\/maxLengthEnforced.html\">maxLengthEnforced<\/a> indicates whether or not to\nenforce the limit, or merely provide a character counter and warning when\n<a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a> is exceeded.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maxLengthEnforced\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/maxLengthEnforced.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The maximum number of lines for the text to span, wrapping if necessary.<\/p>\n<p>If this is 1 (the default), the text will not wrap, but will scroll\nhorizontally instead.<\/p>\n<p>If this is null, there is no limit to the number of lines, and the text\ncontainer will start with enough vertical space for one line and\nautomatically grow to accommodate additional lines as they are entered.<\/p>\n<p>If this is not null, the value must be greater than zero, and it will lock\nthe input to the given number of lines and take up enough horizontal space\nto accommodate that number of lines. Setting <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> as well allows the\ninput to grow between the indicated range.<\/p>\n<p>The full set of behaviors possible with <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> and <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> are as\nfollows. These examples apply equally to <code>TextField<\/code>, <code>TextFormField<\/code>, and\n<code>EditableText<\/code>.<\/p>\n<p>Input that occupies a single line and scrolls horizontally as needed.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField()\n<\/code><\/pre>\n<p>Input whose height grows from one line up to as many lines as needed for\nthe text that was entered. If a height limit is imposed by its parent, it\nwill scroll vertically when its height reaches that limit.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField(maxLines: null)\n<\/code><\/pre>\n<p>The input's height is large enough for the given number of lines. If\nadditional lines are entered the input scrolls vertically.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField(maxLines: 2)\n<\/code><\/pre>\n<p>Input whose height grows with content between a min and max. An infinite\nmax is possible with <code>maxLines: null<\/code>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField(minLines: 2, maxLines: 4)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLines\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/maxLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The minimum number of lines to occupy when the content spans fewer lines.\nWhen <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> is set as well, the height will grow between the indicated\nrange of lines. When <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> is null, it will grow as high as needed,\nstarting from <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a>.<\/p>\n<p>See the examples in <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> for the complete picture of how <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a>\nand <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> interact to produce various behaviors.<\/p>\n<p>Defaults to null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minLines\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/minLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Whether to hide the text being edited (e.g., for passwords).<\/p>\n<p>When this is set to true, all the characters in the text field are\nreplaced by U+2022 BULLET characters (\u2022).<\/p>\n<p>Defaults to false. Cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscureText\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/obscureText.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Padding around the text entry area between the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> and <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a>\nor the clear button when <a href=\"cupertino\/CupertinoTextField\/clearButtonMode.html\">clearButtonMode<\/a> is not never.<\/p>\n<p>Defaults to a padding of 6 pixels on all sides and can be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>A lighter colored placeholder hint that appears on the first line of the\ntext field when the text entry is empty.<\/p>\n<p>Defaults to having no placeholder text.<\/p>\n<p>The text style of the placeholder text matches that of the text field's\nmain text entry except a lighter font weight and a grey font color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String placeholder\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/placeholder.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>An optional <a href=\"widgets\/Widget-class.html\">Widget<\/a> to display before the text.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget prefix\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/prefix.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Controls the visibility of the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> widget based on the state of\ntext entry when the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> argument is not null.<\/p>\n<p>Defaults to <a href=\"cupertino\/OverlayVisibilityMode-class.html\">OverlayVisibilityMode.always<\/a> and cannot be null.<\/p>\n<p>Has no effect when <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OverlayVisibilityMode prefixMode\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/prefixMode.html",
            "isDeprecated": "0",
            "type": "cupertino.OverlayVisibilityMode",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Configures padding to edges surrounding a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> when the Textfield scrolls into view.<\/p>\n<p>When this widget receives focus and is not completely visible (for example scrolled partially\noff the screen or overlapped by the keyboard)\nthen it will attempt to make itself visible by scrolling a surrounding <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, if one is present.\nThis value controls how far from the edges of a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> the TextField will be positioned after the scroll.<\/p>\n<p>Defaults to EdgeInserts.all(20.0).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsets scrollPadding\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/scrollPadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsets",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The strut style used for the vertical layout.<\/p>\n<p><a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> is used to establish a predictable vertical layout.\nSince fonts may vary depending on user input and due to font\nfallback, <a href=\"painting\/StrutStyle\/forceStrutHeight.html\">StrutStyle.forceStrutHeight<\/a> is enabled by default\nto lock all lines to the height of the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>, provided by\n<a href=\"cupertino\/CupertinoTextField\/style.html\">style<\/a>. This ensures the typed text fits within the allotted space.<\/p>\n<p>If null, the strut used will is inherit values from the <a href=\"cupertino\/CupertinoTextField\/style.html\">style<\/a> and will\nhave <a href=\"painting\/StrutStyle\/forceStrutHeight.html\">StrutStyle.forceStrutHeight<\/a> set to true. When no <a href=\"cupertino\/CupertinoTextField\/style.html\">style<\/a> is\npassed, the theme's <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> will be used to generate <a href=\"cupertino\/CupertinoTextField\/strutStyle.html\">strutStyle<\/a>\ninstead.<\/p>\n<p>To disable strut-based vertical alignment and allow dynamic vertical\nlayout based on the glyphs typed, use <a href=\"painting\/StrutStyle\/disabled-constant.html\">StrutStyle.disabled<\/a>.<\/p>\n<p>Flutter's strut is based on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Strut_(typesetting)\">typesetting strut<\/a>\nand CSS's <a href=\"https:\/\/www.w3.org\/TR\/CSS2\/visudet.html#line-height\">line-height<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StrutStyle strutStyle\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/strutStyle.html",
            "isDeprecated": "0",
            "type": "painting.StrutStyle",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The style to use for the text being edited.<\/p>\n<p>Also serves as a base for the <a href=\"cupertino\/CupertinoTextField\/placeholder.html\">placeholder<\/a> text's style.<\/p>\n<p>Defaults to the standard iOS font style from <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> if null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle style\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/style.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>An optional <a href=\"widgets\/Widget-class.html\">Widget<\/a> to display after the text.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget suffix\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/suffix.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Controls the visibility of the <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> widget based on the state of\ntext entry when the <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> argument is not null.<\/p>\n<p>Defaults to <a href=\"cupertino\/OverlayVisibilityMode-class.html\">OverlayVisibilityMode.always<\/a> and cannot be null.<\/p>\n<p>Has no effect when <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OverlayVisibilityMode suffixMode\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/suffixMode.html",
            "isDeprecated": "0",
            "type": "cupertino.OverlayVisibilityMode",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>How the text should be aligned horizontally.<\/p>\n<p>Defaults to <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAlign textAlign\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/textAlign.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextAlign",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>Configures how the platform keyboard will select an uppercase or\nlowercase keyboard.<\/p>\n<p>Only supports text keyboards, other keyboard types will ignore this\nconfiguration. Capitalization is locale-aware.<\/p>\n<p>Defaults to <a href=\"services\/TextCapitalization-class.html\">TextCapitalization.none<\/a>. Must not be null.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/TextCapitalization-class.html\">TextCapitalization<\/a>, for a description of each capitalization behavior.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextCapitalization textCapitalization\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/textCapitalization.html",
            "isDeprecated": "0",
            "type": "services.TextCapitalization",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        },
        {
            "desc": "<p>The type of action button to use for the keyboard.<\/p>\n<p>Defaults to <a href=\"services\/TextInputAction-class.html\">TextInputAction.newline<\/a> if <a href=\"cupertino\/CupertinoTextField\/keyboardType.html\">keyboardType<\/a> is\n<a href=\"services\/TextInputType\/multiline-constant.html\">TextInputType.multiline<\/a> and <a href=\"services\/TextInputAction-class.html\">TextInputAction.done<\/a> otherwise.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextInputAction textInputAction\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoTextField\/textInputAction.html",
            "isDeprecated": "0",
            "type": "services.TextInputAction",
            "memberOf": "cupertino.CupertinoTextField",
            "params": []
        }
    ]
}