{
    "desc": "<p>Recognizes movement.<\/p>\n<p>In contrast to <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a>, <a href=\"gestures\/DragGestureRecognizer-class.html\">DragGestureRecognizer<\/a>\nrecognizes a single gesture sequence for all the pointers it watches, which\nmeans that the recognizer has at most one drag sequence active at any given\ntime regardless of how many pointers are in contact with the screen.<\/p>\n<p><a href=\"gestures\/DragGestureRecognizer-class.html\">DragGestureRecognizer<\/a> is not intended to be used directly. Instead,\nconsider using one of its subclasses to recognize specific types for drag\ngestures.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/HorizontalDragGestureRecognizer-class.html\">HorizontalDragGestureRecognizer<\/a>, for left and right drags.<\/li>\n<li>\n<a href=\"gestures\/VerticalDragGestureRecognizer-class.html\">VerticalDragGestureRecognizer<\/a>, for up and down drags.<\/li>\n<li>\n<a href=\"gestures\/PanGestureRecognizer-class.html\">PanGestureRecognizer<\/a>, for drags that are not locked to a single axis.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "gestures\/DragGestureRecognizer-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "gestures",
    "name": "gestures.DragGestureRecognizer",
    "shortname": "DragGestureRecognizer",
    "extends": [
        "gestures.OneSequenceGestureRecognizer",
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "realImplementors": [
        "gestures.HorizontalDragGestureRecognizer",
        "gestures.PanGestureRecognizer",
        "gestures.VerticalDragGestureRecognizer"
    ],
    "events": [
        {
            "desc": "<p>The pointer that previously triggered <a href=\"gestures\/DragGestureRecognizer\/onDown.html\">onDown<\/a> did not complete.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragCancelCallback onCancel\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/onCancel.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragCancelCallback",
            "name": "onCancel",
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and might begin to move.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/DragDownDetails-class.html\">DragDownDetails<\/a> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragDownCallback onDown\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/onDown.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragDownCallback",
            "name": "onDown",
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer that was previously in contact with the screen and moving is no\nlonger in contact with the screen and was moving at a specific velocity\nwhen it stopped contacting the screen.<\/p>\n<p>The velocity is provided in the callback's <code>details<\/code> argument, which is a\n<a href=\"gestures\/DragEndDetails-class.html\">DragEndDetails<\/a> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragEndCallback onEnd\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/onEnd.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragEndCallback",
            "name": "onEnd",
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer has contacted the screen and has begun to move.<\/p>\n<p>The position of the pointer is provided in the callback's <code>details<\/code>\nargument, which is a <a href=\"gestures\/DragStartDetails-class.html\">DragStartDetails<\/a> object.<\/p>\n<p>Depending on the value of <a href=\"gestures\/DragGestureRecognizer\/dragStartBehavior.html\">dragStartBehavior<\/a>, this function will be\ncalled on the initial touch down, if set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> or\nwhen the drag gesture is first detected, if set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragStartCallback onStart\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/onStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragStartCallback",
            "name": "onStart",
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>A pointer that is in contact with the screen and moving has moved again.<\/p>\n<p>The distance travelled by the pointer since the last update is provided in\nthe callback's <code>details<\/code> argument, which is a <a href=\"gestures\/DragUpdateDetails-class.html\">DragUpdateDetails<\/a> object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureDragUpdateCallback onUpdate\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/onUpdate.html",
            "isDeprecated": false,
            "type": "gestures.GestureDragUpdateCallback",
            "name": "onUpdate",
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Initialize the object.<\/p>\n<p><code>dragStartBehavior<\/code> must not be null.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DragGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(dragStartBehavior != null),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/DragGestureRecognizer.html",
            "isDeprecated": false,
            "type": "",
            "name": "DragGestureRecognizer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "debugOwner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "kind",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.PointerDeviceKind"
                }
            ]
        },
        {
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  if (_state != _DragState.accepted) {\n    _state = _DragState.accepted;\n    final Offset delta = _pendingDragOffset;\n    final Duration timestamp = _lastPendingEventTimestamp;\n    Offset updateDelta;\n    switch (dragStartBehavior) {\n      case DragStartBehavior.start:\n        _initialPosition = _initialPosition + delta;\n        updateDelta = Offset.zero;\n        break;\n      case DragStartBehavior.down:\n        updateDelta = _getDeltaForDetails(delta);\n        break;\n    }\n    _pendingDragOffset = Offset.zero;\n    _lastPendingEventTimestamp = null;\n    if (onStart != null) {\n      invokeCallback&lt;void&gt;('onStart', () =&gt; onStart(DragStartDetails(\n        sourceTimeStamp: timestamp,\n        globalPosition: _initialPosition,\n      )));\n    }\n    if (updateDelta != Offset.zero &amp;&amp; onUpdate != null) {\n      invokeCallback&lt;void&gt;('onUpdate', () =&gt; onUpdate(DragUpdateDetails(\n        sourceTimeStamp: timestamp,\n        delta: updateDelta,\n        primaryDelta: _getPrimaryValueFromOffset(updateDelta),\n        globalPosition: _initialPosition + updateDelta, \/\/ Only adds delta for down behaviour\n      )));\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/acceptGesture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "acceptGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/DragGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerEvent event) {\n  startTrackingPointer(event.pointer);\n  _velocityTrackers[event.pointer] = VelocityTracker();\n  if (_state == _DragState.ready) {\n    _state = _DragState.possible;\n    _initialPosition = event.position;\n    _pendingDragOffset = Offset.zero;\n    _lastPendingEventTimestamp = event.timeStamp;\n    if (onDown != null)\n      invokeCallback&lt;void&gt;('onDown', () =&gt; onDown(DragDownDetails(globalPosition: _initialPosition)));\n  } else if (_state == _DragState.accepted) {\n    resolve(GestureDisposition.accepted);\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/addAllowedPointer.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addAllowedPointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/DragGestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;DragStartBehavior&gt;('start behavior', dragStartBehavior));\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  if (_state == _DragState.possible) {\n    resolve(GestureDisposition.rejected);\n    _state = _DragState.ready;\n    if (onCancel != null)\n      invokeCallback&lt;void&gt;('onCancel', onCancel);\n    return;\n  }\n  final bool wasAccepted = _state == _DragState.accepted;\n  _state = _DragState.ready;\n  if (wasAccepted &amp;&amp; onEnd != null) {\n    final VelocityTracker tracker = _velocityTrackers[pointer];\n    assert(tracker != null);\n\n    final VelocityEstimate estimate = tracker.getVelocityEstimate();\n    if (estimate != null &amp;&amp; _isFlingGesture(estimate)) {\n      final Velocity velocity = Velocity(pixelsPerSecond: estimate.pixelsPerSecond)\n        .clampMagnitude(minFlingVelocity ?? kMinFlingVelocity, maxFlingVelocity ?? kMaxFlingVelocity);\n      invokeCallback&lt;void&gt;('onEnd', () =&gt; onEnd(DragEndDetails(\n        velocity: velocity,\n        primaryVelocity: _getPrimaryValueFromOffset(velocity.pixelsPerSecond),\n      )), debugReport: () {\n        return '$estimate; fling at $velocity.';\n      });\n    } else {\n      invokeCallback&lt;void&gt;('onEnd', () =&gt; onEnd(DragEndDetails(\n        velocity: Velocity.zero,\n        primaryVelocity: 0.0,\n      )), debugReport: () {\n        if (estimate == null)\n          return 'Could not estimate velocity.';\n        return '$estimate; judged to not be a fling.';\n      });\n    }\n  }\n  _velocityTrackers.clear();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/didStopTrackingLastPointer.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didStopTrackingLastPointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _velocityTrackers.clear();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/dispose.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(_state != _DragState.ready);\n  if (!event.synthesized\n      &amp;&amp; (event is PointerDownEvent || event is PointerMoveEvent)) {\n    final VelocityTracker tracker = _velocityTrackers[event.pointer];\n    assert(tracker != null);\n    tracker.addPosition(event.timeStamp, event.position);\n  }\n\n  if (event is PointerMoveEvent) {\n    final Offset delta = event.delta;\n    if (_state == _DragState.accepted) {\n      if (onUpdate != null) {\n        invokeCallback&lt;void&gt;('onUpdate', () =&gt; onUpdate(DragUpdateDetails(\n          sourceTimeStamp: event.timeStamp,\n          delta: _getDeltaForDetails(delta),\n          primaryDelta: _getPrimaryValueFromOffset(delta),\n          globalPosition: event.position,\n        )));\n      }\n    } else {\n      _pendingDragOffset += delta;\n      _lastPendingEventTimestamp = event.timeStamp;\n      if (_hasSufficientPendingDragDeltaToAccept)\n        resolve(GestureDisposition.accepted);\n    }\n  }\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/handleEvent.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "handleEvent",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  stopTrackingPointer(pointer);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/DragGestureRecognizer\/rejectGesture.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "rejectGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Configure the behavior of offsets sent to <a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a>.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, the <a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a> callback will be called at the time and\nposition when the gesture detector wins the arena. If <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a>,\n<a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a> will be called at the time and position when a down event was\nfirst detected.<\/p>\n<p>For more information about the gesture arena:\n<a href=\"https:\/\/flutter.io\/docs\/development\/ui\/advanced\/gestures#gesture-disambiguation\">https:\/\/flutter.io\/docs\/development\/ui\/advanced\/gestures#gesture-disambiguation<\/a><\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<h2 id=\"example\">Example:<\/h2>\n<p>A finger presses down on the screen with offset (500.0, 500.0),\nand then moves to position (510.0, 500.0) before winning the arena.\nWith <a href=\"gestures\/DragGestureRecognizer\/dragStartBehavior.html\">dragStartBehavior<\/a> set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a>, the <a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a>\ncallback will be called at the time corresponding to the touch's position\nat (500.0, 500.0). If it is instead set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>,\n<a href=\"gestures\/DragGestureRecognizer\/onStart.html\">onStart<\/a> will be called at the time corresponding to the touch's position\nat (510.0, 500.0).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Fling velocity magnitudes will be clamped to this value.<\/p>\n<p>If null then <a href=\"gestures\/kMaxFlingVelocity-constant.html\">kMaxFlingVelocity<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double maxFlingVelocity\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/maxFlingVelocity.html",
            "name": "maxFlingVelocity",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The minimum distance an input pointer drag must have moved to\nto be considered a fling gesture.<\/p>\n<p>This value is typically compared with the distance traveled along the\nscrolling axis. If null then <a href=\"gestures\/kTouchSlop-constant.html\">kTouchSlop<\/a> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double minFlingDistance\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/minFlingDistance.html",
            "name": "minFlingDistance",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The minimum velocity for an input pointer drag to be considered fling.<\/p>\n<p>This value is typically compared with the magnitude of fling gesture's\nvelocity along the scrolling axis. If null then <a href=\"gestures\/kMinFlingVelocity-constant.html\">kMinFlingVelocity<\/a>\nis used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double minFlingVelocity\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/DragGestureRecognizer\/minFlingVelocity.html",
            "name": "minFlingVelocity",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "gestures.DragGestureRecognizer",
            "params": []
        }
    ]
}