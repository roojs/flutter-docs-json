{
    "desc": "<p>Applies a chip theme to descendant <a href=\"material\/RawChip-class.html\">RawChip<\/a>-based widgets, like <a href=\"material\/Chip-class.html\">Chip<\/a>,\n<a href=\"material\/InputChip-class.html\">InputChip<\/a>, <a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>, <a href=\"material\/FilterChip-class.html\">FilterChip<\/a>, and <a href=\"material\/ActionChip-class.html\">ActionChip<\/a>.<\/p>\n<p>A chip theme describes the color, shape and text styles for the chips it is\napplied to<\/p>\n<p>Descendant widgets obtain the current theme's <a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a> object using\n<a href=\"material\/ChipTheme\/of.html\">ChipTheme.of<\/a>. When a widget uses <a href=\"material\/ChipTheme\/of.html\">ChipTheme.of<\/a>, it is automatically\nrebuilt if the theme later changes.<\/p>\n<p>The <a href=\"material\/ThemeData-class.html\">ThemeData<\/a> object given by the <a href=\"material\/ChipTheme\/of.html\">Theme.of<\/a> call also contains a default\n<code>Theme.chipTheme<\/code> that can be customized by copying it (using\n<a href=\"material\/ChipThemeData\/copyWith.html\">ChipThemeData.copyWith<\/a>).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a>, a chip that displays information and can be deleted.<\/li>\n<li>\n<a href=\"material\/InputChip-class.html\">InputChip<\/a>, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.<\/li>\n<li>\n<a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.<\/li>\n<li>\n<a href=\"material\/FilterChip-class.html\">FilterChip<\/a>, uses tags or descriptive words as a way to filter content.<\/li>\n<li>\n<a href=\"material\/ActionChip-class.html\">ActionChip<\/a>, represents an action related to primary content.<\/li>\n<li>\n<a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a>, which describes the actual configuration of a chip\ntheme.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, which describes the overall theme information for the\napplication.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/ChipTheme-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.ChipTheme",
    "shortname": "ChipTheme",
    "extends": [
        "widgets.InheritedWidget",
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Applies the given theme <code>data<\/code> to <code>child<\/code>.<\/p>\n<p>The <code>data<\/code> and <code>child<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ChipTheme({\n  Key key,\n  @required this.data,\n  @required Widget child,\n}) : assert(child != null),\n     assert(data != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "material\/ChipTheme\/ChipTheme.html",
            "isDeprecated": false,
            "type": "",
            "name": "ChipTheme",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ChipTheme",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.ChipThemeData"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Returns the data from the closest <a href=\"material\/ChipTheme-class.html\">ChipTheme<\/a> instance that encloses\nthe given context.<\/p>\n<p>Defaults to the ambient <a href=\"material\/ThemeData\/chipTheme.html\">ThemeData.chipTheme<\/a> if there is no\n<a href=\"material\/ChipTheme-class.html\">ChipTheme<\/a> in the given build context.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Spaceship extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ChipTheme(\n      data: ChipTheme.of(context).copyWith(backgroundColor: Colors.red),\n      child: ActionChip(\n        label: const Text('Launch'),\n        onPressed: () { print('We have liftoff!'); },\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a>, which describes the actual configuration of a chip\ntheme.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ChipThemeData of(BuildContext context) {\n  final ChipTheme inheritedTheme = context.inheritFromWidgetOfExactType(ChipTheme);\n  return inheritedTheme?.data ?? Theme.of(context).chipTheme;\n}<\/code><\/pre>\n    ",
            "href": "material\/ChipTheme\/of.html",
            "isDeprecated": false,
            "type": "material.ChipThemeData",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ChipTheme",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(ChipTheme oldWidget) =&gt; data != oldWidget.data;<\/code><\/pre>\n    ",
            "href": "material\/ChipTheme\/updateShouldNotify.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "updateShouldNotify",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ChipTheme",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ChipTheme"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Specifies the color, shape, and text style values for descendant chip\nwidgets.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ChipThemeData data\n\n<\/code><\/pre>\n        ",
            "href": "material\/ChipTheme\/data.html",
            "name": "data",
            "isDeprecated": false,
            "type": "material.ChipThemeData",
            "memberOf": "material.ChipTheme",
            "params": []
        }
    ]
}