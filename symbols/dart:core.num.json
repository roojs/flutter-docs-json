{
    "desc": "<p>An integer or floating-point number.<\/p>\n<p>It is a compile-time error for any type other than <a href=\"dart-core\/int-class.html\">int<\/a> or <a href=\"dart-core\/double-class.html\">double<\/a>\nto attempt to extend or implement num.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/num-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.num",
    "shortname": "num",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns the absolute value of this <a href=\"dart-core\/num-class.html\">num<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num abs();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/abs.html",
            "isDeprecated": false,
            "type": "dart:core.num",
            "name": "abs",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns the least integer no smaller than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ceil();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/ceil.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "ceil",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns the least double integer value no smaller than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double ceilToDouble();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/ceilToDouble.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "ceilToDouble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns this <a href=\"dart-core\/num-class.html\">num<\/a> clamped to be in the range <code>lowerLimit<\/code>-<code>upperLimit<\/code>.<\/p>\n<p>The comparison is done using <a href=\"dart-core\/num\/compareTo.html\">compareTo<\/a> and therefore takes <code>-0.0<\/code> into\naccount. This also implies that <a href=\"dart-core\/double\/nan-constant.html\">double.nan<\/a> is treated as the maximal\ndouble value.<\/p>\n<p>The arguments <code>lowerLimit<\/code> and <code>upperLimit<\/code> must form a valid range where\n<code>lowerLimit.compareTo(upperLimit) &lt;= 0<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num clamp(num lowerLimit, num upperLimit);<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/clamp.html",
            "isDeprecated": false,
            "type": "dart:core.num",
            "name": "clamp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "lowerLimit",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.num"
                },
                {
                    "name": "upperLimit",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.num"
                }
            ]
        },
        {
            "desc": "<p>Compares this to <code>other<\/code>.<\/p>\n<p>Returns a negative number if <code>this<\/code> is less than <code>other<\/code>, zero if they are\nequal, and a positive number if <code>this<\/code> is greater than <code>other<\/code>.<\/p>\n<p>The ordering represented by this method is a total ordering of <a href=\"dart-core\/num-class.html\">num<\/a>\nvalues. All distinct doubles are non-equal, as are all distinct integers,\nbut integers are equal to doubles if they have the same numerical\nvalue.<\/p>\n<p>For doubles, the <code>compareTo<\/code> operation is different from the partial\nordering given by <a href=\"dart-core\/num\/operator_equals.html\">operator==<\/a>, <a href=\"dart-core\/num\/operator_less.html\">operator&lt;<\/a> and <a href=\"dart-core\/num\/operator_greater.html\">operator&gt;<\/a>. For example,\nIEEE doubles impose that <code>0.0 == -0.0<\/code> and all comparison operations on\nNaN return false.<\/p>\n<p>This function imposes a complete ordering for doubles. When using\n<code>compareTo<\/code> the following properties hold:<\/p>\n<ul>\n<li>All NaN values are considered equal, and greater than any numeric value.<\/li>\n<li>-0.0 is less than 0.0 (and the integer 0), but greater than any non-zero\n negative value.<\/li>\n<li>Negative infinity is less than all other values and positive infinity is\ngreater than all non-NaN values.<\/li>\n<li>All other values are compared using their numeric value.<\/li>\n<\/ul>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>print(1.compareTo(2)); \/\/ =&gt; -1\nprint(2.compareTo(1)); \/\/ =&gt; 1\nprint(1.compareTo(1)); \/\/ =&gt; 0\n\n\/\/ The following comparisons yield different results than the\n\/\/ corresponding comparison operators.\nprint((-0.0).compareTo(0.0));  \/\/ =&gt; -1\nprint(double.nan.compareTo(double.nan));  \/\/ =&gt; 0\nprint(double.infinity.compareTo(double.nan)); \/\/ =&gt; -1\n\n\/\/ -0.0, and NaN comparison operators have rules imposed by the IEEE\n\/\/ standard.\nprint(-0.0 == 0.0); \/\/ =&gt; true\nprint(double.nan == double.nan);  \/\/ =&gt; false\nprint(double.infinity &lt; double.nan);  \/\/ =&gt; false\nprint(double.nan &lt; double.infinity);  \/\/ =&gt; false\nprint(double.nan == double.infinity);  \/\/ =&gt; false\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(num other);<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/compareTo.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "compareTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.num"
                }
            ]
        },
        {
            "desc": "<p>Returns the greatest integer no greater than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int floor();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/floor.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "floor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns the greatest double integer value no greater than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>0.0 &lt; d &lt; 1.0<\/code> will return <code>0.0<\/code>.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double floorToDouble();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/floorToDouble.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "floorToDouble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "",
            "example": "",
            "href": "dart-core\/num\/num.html",
            "isDeprecated": false,
            "type": "",
            "name": "num",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Parses a string containing a number literal into a number.<\/p>\n<p>The method first tries to read the <code>input<\/code> as integer (similar to\n<a href=\"dart-core\/num\/parse.html\">int.parse<\/a> without a radix).\nIf that fails, it tries to parse the <code>input<\/code> as a double (similar to\n<a href=\"dart-core\/num\/parse.html\">double.parse<\/a>).\nIf that fails, too, it invokes <code>onError<\/code> with <code>input<\/code>, and the result\nof that invocation becomes the result of calling <code>parse<\/code>.<\/p>\n<p>If no <code>onError<\/code> is supplied, it defaults to a function that throws a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n<p>For any number <code>n<\/code>, this function satisfies\n<code>identical(n, num.parse(n.toString()))<\/code> (except when <code>n<\/code> is a NaN <code>double<\/code>\nwith a payload).<\/p>\n<p>The <code>onError<\/code> parameter is deprecated and will be removed.\nInstead of <code>num.parse(string, (string) { ... })<\/code>,\nyou should use <code>num.tryParse(string) ?? (...)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static num parse(String input, [@deprecated num onError(String input)]) {\n  num result = tryParse(input);\n  if (result != null) return result;\n  if (onError == null) throw new FormatException(input);\n  return onError(input);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/parse.html",
            "isDeprecated": false,
            "type": "dart:core.num",
            "name": "parse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "input",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns the remainder of the truncating division of <code>this<\/code> by <code>other<\/code>.<\/p>\n<p>The result <code>r<\/code> of this operation satisfies:\n<code>this == (this ~\/ other) * other + r<\/code>.\nAs a consequence the remainder <code>r<\/code> has the same sign as the divider <code>this<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num remainder(num other);<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/remainder.html",
            "isDeprecated": false,
            "type": "dart:core.num",
            "name": "remainder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.num"
                }
            ]
        },
        {
            "desc": "<p>Returns the integer closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).round() == 4<\/code> and <code>(-3.5).round() == -4<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int round();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/round.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "round",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns the double integer value closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).roundToDouble() == 4<\/code> and <code>(-3.5).roundToDouble() == -4<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>,\nand <code>-0.0<\/code> is therefore considered closer to negative numbers than <code>0.0<\/code>.\nThis means that for a value, <code>d<\/code> in the range <code>-0.5 &lt; d &lt; 0.0<\/code>,\nthe result is <code>-0.0<\/code>.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double roundToDouble();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/roundToDouble.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "roundToDouble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Return this <a href=\"dart-core\/num-class.html\">num<\/a> as a <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>If the number is not representable as a <a href=\"dart-core\/double-class.html\">double<\/a>, an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double toDouble();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/toDouble.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "toDouble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Truncates this <a href=\"dart-core\/num-class.html\">num<\/a> to an integer and returns the result as an <a href=\"dart-core\/int-class.html\">int<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toInt();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/toInt.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "toInt",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns the shortest string that correctly represent the input number.<\/p>\n<p>All <a href=\"dart-core\/double-class.html\">double<\/a>s in the range <code>10^-6<\/code> (inclusive) to <code>10^21<\/code> (exclusive)\nare converted to their decimal representation with at least one digit\nafter the decimal point. For all other doubles,\nexcept for special values like <code>NaN<\/code> or <code>Infinity<\/code>, this method returns an\nexponential representation (see <a href=\"dart-core\/num\/toStringAsExponential.html\">toStringAsExponential<\/a>).<\/p>\n<p>Returns <code>\"NaN\"<\/code> for <a href=\"dart-core\/double\/nan-constant.html\">double.nan<\/a>, <code>\"Infinity\"<\/code> for <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>, and\n<code>\"-Infinity\"<\/code> for <a href=\"dart-core\/double\/negativeInfinity-constant.html\">double.negativeInfinity<\/a>.<\/p>\n<p>An <a href=\"dart-core\/int-class.html\">int<\/a> is converted to a decimal representation with no decimal point.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>(0.000001).toString();  \/\/ \"0.000001\"\n(0.0000001).toString(); \/\/ \"1e-7\"\n(111111111111111111111.0).toString();  \/\/ \"111111111111111110000.0\"\n(100000000000000000000.0).toString();  \/\/ \"100000000000000000000.0\"\n(1000000000000000000000.0).toString(); \/\/ \"1e+21\"\n(1111111111111111111111.0).toString(); \/\/ \"1.1111111111111111e+21\"\n1.toString(); \/\/ \"1\"\n111111111111111111111.toString();  \/\/ \"111111111111111110000\"\n100000000000000000000.toString();  \/\/ \"100000000000000000000\"\n1000000000000000000000.toString(); \/\/ \"1000000000000000000000\"\n1111111111111111111111.toString(); \/\/ \"1111111111111111111111\"\n1.234e5.toString();   \/\/ 123400\n1234.5e6.toString();  \/\/ 1234500000\n12.345e67.toString(); \/\/ 1.2345e+68\n<\/code><\/pre>\n<p>Note: the conversion may round the output if the returned string\nis accurate enough to uniquely identify the input-number.\nFor example the most precise representation of the <a href=\"dart-core\/double-class.html\">double<\/a> <code>9e59<\/code> equals\n<code>\"899999999999999918767229449717619953810131273674690656206848\"<\/code>, but\nthis method returns the shorter (but still uniquely identifying) <code>\"9e59\"<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns an exponential string-representation of <code>this<\/code>.<\/p>\n<p>Converts <code>this<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> before computing the string representation.<\/p>\n<p>If <code>fractionDigits<\/code> is given then it must be an integer satisfying:\n<code>0 &lt;= fractionDigits &lt;= 20<\/code>. In this case the string contains exactly\n<code>fractionDigits<\/code> after the decimal point. Otherwise, without the parameter,\nthe returned string uses the shortest number of digits that accurately\nrepresent <a href=\"dart-core\/num-class.html\">this<\/a>.<\/p>\n<p>If <code>fractionDigits<\/code> equals 0 then the decimal point is omitted.\nExamples:<\/p>\n<pre class=\"language-dart\"><code>1.toStringAsExponential();       \/\/ 1e+0\n1.toStringAsExponential(3);      \/\/ 1.000e+0\n123456.toStringAsExponential();  \/\/ 1.23456e+5\n123456.toStringAsExponential(3); \/\/ 1.235e+5\n123.toStringAsExponential(0);    \/\/ 1e+2\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringAsExponential([int fractionDigits]);<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/toStringAsExponential.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringAsExponential",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "fractionDigits",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a decimal-point string-representation of <code>this<\/code>.<\/p>\n<p>Converts <code>this<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> before computing the string representation.<\/p>\n<p>If the absolute value of <code>this<\/code> is greater or equal to <code>10^21<\/code> then this\nmethods returns an exponential representation computed by\n<code>this.toStringAsExponential()<\/code>. Otherwise the result\nis the closest string representation with exactly <code>fractionDigits<\/code> digits\nafter the decimal point. If <code>fractionDigits<\/code> equals 0 then the decimal\npoint is omitted.<\/p>\n<p>The parameter <code>fractionDigits<\/code> must be an integer satisfying:\n<code>0 &lt;= fractionDigits &lt;= 20<\/code>.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>1.toStringAsFixed(3);  \/\/ 1.000\n(4321.12345678).toStringAsFixed(3);  \/\/ 4321.123\n(4321.12345678).toStringAsFixed(5);  \/\/ 4321.12346\n123456789012345678901.toStringAsFixed(3);  \/\/ 123456789012345683968.000\n1000000000000000000000.toStringAsFixed(3); \/\/ 1e+21\n5.25.toStringAsFixed(0); \/\/ 5\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringAsFixed(int fractionDigits);<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/toStringAsFixed.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringAsFixed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "fractionDigits",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Converts <code>this<\/code> to a double and returns a string representation with\nexactly <code>precision<\/code> significant digits.<\/p>\n<p>The parameter <code>precision<\/code> must be an integer satisfying:\n<code>1 &lt;= precision &lt;= 21<\/code>.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>1.toStringAsPrecision(2);       \/\/ 1.0\n1e15.toStringAsPrecision(3);    \/\/ 1.00e+15\n1234567.toStringAsPrecision(3); \/\/ 1.23e+6\n1234567.toStringAsPrecision(9); \/\/ 1234567.00\n12345678901234567890.toStringAsPrecision(20); \/\/ 12345678901234567168\n12345678901234567890.toStringAsPrecision(14); \/\/ 1.2345678901235e+19\n0.00000012345.toStringAsPrecision(15); \/\/ 1.23450000000000e-7\n0.0000012345.toStringAsPrecision(15);  \/\/ 0.00000123450000000000\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringAsPrecision(int precision);<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/toStringAsPrecision.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringAsPrecision",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "precision",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the integer obtained by discarding any fractional\ndigits from <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int truncate();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/truncate.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "truncate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns the double integer value obtained by discarding any fractional\ndigits from the double value of <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>, and\nin the range <code>0.0 &lt; d &lt; 1.0<\/code> it will return 0.0.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double truncateToDouble();<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/truncateToDouble.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "truncateToDouble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Parses a string containing a number literal into a number.<\/p>\n<p>Like <a href=\"dart-core\/num\/parse.html\">parse<\/a> except that this function returns <code>null<\/code> for invalid inputs\ninstead of throwing.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static num tryParse(String input) {\n  String source = input.trim();\n  \/\/ TODO(lrn): Optimize to detect format and result type in one check.\n  return int.tryParse(source) ?? double.tryParse(source);\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/num\/tryParse.html",
            "isDeprecated": false,
            "type": "dart:core.num",
            "name": "tryParse",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.num",
            "params": [
                {
                    "name": "input",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a hash code for a numerical value.<\/p>\n<p>The hash code is compatible with equality. It returns the same value\nfor an <a href=\"dart-core\/int-class.html\">int<\/a> and a <a href=\"dart-core\/double-class.html\">double<\/a> with the same numerical value, and therefore\nthe same value for the doubles zero and minus zero.<\/p>\n<p>No guarantees are made about the hash code of NaN values.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
            "href": "dart-core\/num\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>True if the number is finite; otherwise, false.<\/p>\n<p>The only non-finite numbers are NaN, positive infinity, and\nnegative infinity.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite;<\/code><\/pre>\n        ",
            "href": "dart-core\/num\/isFinite.html",
            "name": "isFinite",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>True if the number is positive infinity or negative infinity; otherwise,\nfalse.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInfinite;<\/code><\/pre>\n        ",
            "href": "dart-core\/num\/isInfinite.html",
            "name": "isInfinite",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>True if the number is the double Not-a-Number value; otherwise, false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNaN;<\/code><\/pre>\n        ",
            "href": "dart-core\/num\/isNaN.html",
            "name": "isNaN",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>True if the number is negative; otherwise, false.<\/p>\n<p>Negative numbers are those less than zero, and the double <code>-0.0<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNegative;<\/code><\/pre>\n        ",
            "href": "dart-core\/num\/isNegative.html",
            "name": "isNegative",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:core.num",
            "params": []
        },
        {
            "desc": "<p>Returns minus one, zero or plus one depending on the sign and\nnumerical value of the number.<\/p>\n<p>Returns minus one if the number is less than zero,\nplus one if the number is greater than zero,\nand zero if the number is equal to zero.<\/p>\n<p>Returns NaN if the number is the double NaN value.<\/p>\n<p>Returns a number of the same type as this number.\nFor doubles, <code>-0.0.sign == -0.0<\/code>.<\/p>\n<p>The result satisfies:<\/p>\n<pre class=\"language-dart\"><code>n == n.sign * n.abs()\n<\/code><\/pre>\n<p>for all numbers <code>n<\/code> (except NaN, because NaN isn't <code>==<\/code> to itself).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">num get sign;<\/code><\/pre>\n        ",
            "href": "dart-core\/num\/sign.html",
            "name": "sign",
            "isDeprecated": false,
            "type": "dart:core.num",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:core.num",
            "params": []
        }
    ]
}