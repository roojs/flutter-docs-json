{
    "desc": "<p>Platform-specific key event data for Android.<\/p>\n<p>This object contains information about key events obtained from Android's\n<code>KeyEvent<\/code> interface.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "services\/RawKeyEventDataAndroid-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.RawKeyEventDataAndroid",
    "shortname": "RawKeyEventDataAndroid",
    "extends": [
        "services.RawKeyEventData",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a key event data structure specific for Android.<\/p>\n<p>The <code>flags<\/code>, <code>codePoint<\/code>, <code>keyCode<\/code>, <code>scanCode<\/code>, and <code>metaState<\/code> arguments\nmust not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventDataAndroid({\n  this.flags = 0,\n  this.codePoint = 0,\n  this.plainCodePoint = 0,\n  this.keyCode = 0,\n  this.scanCode = 0,\n  this.metaState = 0,\n}) : assert(flags != null),\n     assert(codePoint != null),\n     assert(keyCode != null),\n     assert(scanCode != null),\n     assert(metaState != null);<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataAndroid\/RawKeyEventDataAndroid.html",
            "isDeprecated": false,
            "type": "",
            "name": "RawKeyEventDataAndroid",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": [
                {
                    "name": "codePoint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "flags",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "keyCode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "metaState",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "plainCodePoint",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "scanCode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nKeyboardSide getModifierSide(ModifierKey key) {\n  KeyboardSide findSide(int leftMask, int rightMask) {\n    final int combinedMask = leftMask | rightMask;\n    final int combined = metaState &amp; combinedMask;\n    if (combined == leftMask) {\n      return KeyboardSide.left;\n    } else if (combined == rightMask) {\n      return KeyboardSide.right;\n    } else if (combined == combinedMask) {\n      return KeyboardSide.all;\n    }\n    return null;\n  }\n\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return findSide(modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return findSide(modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return findSide(modifierLeftAlt, modifierRightAlt);\n    case ModifierKey.metaModifier:\n      return findSide(modifierLeftMeta, modifierRightMeta);\n    case ModifierKey.capsLockModifier:\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      return KeyboardSide.all;\n  }\n\n  assert(false, 'Not handling $key type properly.');\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataAndroid\/getModifierSide.html",
            "isDeprecated": false,
            "type": "services.KeyboardSide",
            "name": "getModifierSide",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.ModifierKey"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isModifierPressed(ModifierKey key, { KeyboardSide side = KeyboardSide.any }) {\n  assert(side != null);\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return _isLeftRightModifierPressed(side, modifierControl, modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return _isLeftRightModifierPressed(side, modifierShift, modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return _isLeftRightModifierPressed(side, modifierAlt, modifierLeftAlt, modifierRightAlt);\n    case ModifierKey.metaModifier:\n      return _isLeftRightModifierPressed(side, modifierMeta, modifierLeftMeta, modifierRightMeta);\n    case ModifierKey.capsLockModifier:\n      return metaState &amp; modifierCapsLock != 0;\n    case ModifierKey.numLockModifier:\n      return metaState &amp; modifierNumLock != 0;\n    case ModifierKey.scrollLockModifier:\n      return metaState &amp; modifierScrollLock != 0;\n    case ModifierKey.functionModifier:\n      return metaState &amp; modifierFunction != 0;\n    case ModifierKey.symbolModifier:\n      return metaState &amp; modifierSym != 0;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataAndroid\/isModifierPressed.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isModifierPressed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.ModifierKey"
                },
                {
                    "name": "side",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.KeyboardSide"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(keyLabel: $keyLabel flags: $flags, codePoint: $codePoint, '\n    'keyCode: $keyCode, scanCode: $scanCode, metaState: $metaState, '\n    'modifiers down: $modifiersPressed)';\n}<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataAndroid\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The Unicode code point represented by the key event, if any.<\/p>\n<p>If there is no Unicode code point, this value is zero.<\/p>\n<p>Dead keys are represented as Unicode combining characters.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar()<\/a>\nfor more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int codePoint\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/codePoint.html",
            "name": "codePoint",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>The current set of additional flags for this event.<\/p>\n<p>Flags indicate things like repeat state, etc.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getFlags()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getFlags()<\/a>\nfor more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int flags\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/flags.html",
            "name": "flags",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>The hardware key code corresponding to this key event.<\/p>\n<p>This is the physical key that was pressed, not the Unicode character.\nSee <a href=\"services\/RawKeyEventDataAndroid\/codePoint.html\">codePoint<\/a> for the Unicode character.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getKeyCode()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getKeyCode()<\/a>\nfor more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int keyCode\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/keyCode.html",
            "name": "keyCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventDataAndroid\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get keyLabel =&gt; plainCodePoint == 0 ? null : String.fromCharCode(plainCodePoint &amp; _kCombiningCharacterMask);<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/keyLabel.html",
            "name": "keyLabel",
            "isDeprecated": false,
            "type": "dart:core.String",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLogicalKeyboardKey get logicalKey {\n  \/\/ Look to see if the keyCode is a printable number pad key, so that a\n  \/\/ difference between regular keys (e.g. \"=\") and the number pad version\n  \/\/ (e.g. the \"=\" on the number pad) can be determined.\n  final LogicalKeyboardKey numPadKey = kAndroidNumPadMap[keyCode];\n  if (numPadKey != null) {\n    return numPadKey;\n  }\n\n  \/\/ If it has a non-control-character label, then either return the existing\n  \/\/ constant, or construct a new Unicode-based key from it. Don't mark it as\n  \/\/ autogenerated, since the label uniquely identifies an ID from the Unicode\n  \/\/ plane.\n  if (keyLabel != null &amp;&amp; keyLabel.isNotEmpty &amp;&amp; !LogicalKeyboardKey.isControlCharacter(keyLabel)) {\n    final int combinedCodePoint = plainCodePoint &amp; _kCombiningCharacterMask;\n    final int keyId = LogicalKeyboardKey.unicodePlane | (combinedCodePoint &amp; LogicalKeyboardKey.valueMask);\n    return LogicalKeyboardKey.findKeyByKeyId(keyId) ?? LogicalKeyboardKey(\n      keyId,\n      keyLabel: keyLabel,\n      debugName: kReleaseMode ? null : 'Key ${keyLabel.toUpperCase()}',\n    );\n  }\n\n  \/\/ Look to see if the keyCode is one we know about and have a mapping for.\n  LogicalKeyboardKey newKey = kAndroidToLogicalKey[keyCode];\n  if (newKey != null) {\n    return newKey;\n  }\n\n  \/\/ This is a non-printable key that we don't know about, so we mint a new\n  \/\/ code with the autogenerated bit set.\n  const int androidKeyIdPlane = 0x00200000000;\n  newKey ??= LogicalKeyboardKey(\n    androidKeyIdPlane | keyCode | LogicalKeyboardKey.autogeneratedMask,\n    debugName: kReleaseMode ? null : 'Unknown Android key code $keyCode',\n  );\n  return newKey;\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/logicalKey.html",
            "name": "logicalKey",
            "isDeprecated": false,
            "type": "services.LogicalKeyboardKey",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>The modifiers that were present when the key event occurred.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getMetaState()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getMetaState()<\/a>\nfor the numerical values of the <code>metaState<\/code>. Many of these constants are\nalso replicated as static constants in this class.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/modifiersPressed.html\">modifiersPressed<\/a>, which returns a Map of currently pressed modifiers\nand their keyboard side.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/isModifierPressed.html\">isModifierPressed<\/a>, to see if a specific modifier is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isControlPressed.html\">isControlPressed<\/a>, to see if a CTRL key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isShiftPressed.html\">isShiftPressed<\/a>, to see if a SHIFT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isAltPressed.html\">isAltPressed<\/a>, to see if an ALT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isMetaPressed.html\">isMetaPressed<\/a>, to see if a META key is pressed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int metaState\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/metaState.html",
            "name": "metaState",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventDataAndroid\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataAndroid\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPhysicalKeyboardKey get physicalKey =&gt; kAndroidToPhysicalKey[scanCode] ?? PhysicalKeyboardKey.none;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/physicalKey.html",
            "name": "physicalKey",
            "isDeprecated": false,
            "type": "services.PhysicalKeyboardKey",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>The Unicode code point represented by the key event, if any, without\nregard to any modifier keys which are currently pressed.<\/p>\n<p>If there is no Unicode code point, this value is zero.<\/p>\n<p>Dead keys are represented as Unicode combining characters.<\/p>\n<p>This is the result of calling KeyEvent.getUnicodeChar(0) on Android.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar(int)\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getUnicodeChar(int)<\/a>\nfor more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int plainCodePoint\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/plainCodePoint.html",
            "name": "plainCodePoint",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        },
        {
            "desc": "<p>The hardware scan code id corresponding to this key event.<\/p>\n<p>These values are not reliable and vary from device to device, so this\ninformation is mainly useful for debugging.<\/p>\n<p>See <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/KeyEvent.html#getScanCode()\">developer.android.com\/reference\/android\/view\/KeyEvent.html#getScanCode()<\/a>\nfor more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int scanCode\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataAndroid\/scanCode.html",
            "name": "scanCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "services.RawKeyEventDataAndroid",
            "params": []
        }
    ]
}