{
    "desc": "<p>A view of several iterables combined sequentially into a single iterable.<\/p>\n<p>All methods and accessors treat the <a href=\"package-collection_collection\/CombinedIterableView-class.html\">CombinedIterableView<\/a> as if it were a\nsingle concatenated iterable, but the underlying implementation is based on\nlazily accessing individual iterable instances. This means that if the\nunderlying iterables change, the <a href=\"package-collection_collection\/CombinedIterableView-class.html\">CombinedIterableView<\/a> will reflect those\nchanges.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-collection_collection\/CombinedIterableView-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "collection",
    "name": "collection.CombinedIterableView",
    "shortname": "CombinedIterableView",
    "extends": [
        "dart:collection.IterableBase",
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a combined view of <code>iterables<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CombinedIterableView(this._iterables);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/CombinedIterableView\/CombinedIterableView.html",
            "isDeprecated": false,
            "type": "",
            "name": "CombinedIterableView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "collection.CombinedIterableView",
            "params": [
                {
                    "name": "_iterables",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Iterable<dart:core.Iterable>"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; _iterables.any((i) =&gt; i.contains(element));<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/CombinedIterableView\/contains.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "contains",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.CombinedIterableView",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _iterables.every((i) =&gt; i.isEmpty);<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/CombinedIterableView\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "collection.CombinedIterableView",
            "params": []
        },
        {
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;T&gt; get iterator =&gt;\n    new _CombinedIterator&lt;T&gt;(_iterables.map((i) =&gt; i.iterator).iterator);<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/CombinedIterableView\/iterator.html",
            "name": "iterator",
            "isDeprecated": false,
            "type": "dart:core.Iterator",
            "memberOf": "collection.CombinedIterableView",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/CombinedIterableView-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _iterables.fold(0, (length, i) =&gt; length + i.length);<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/CombinedIterableView\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "collection.CombinedIterableView",
            "params": []
        }
    ]
}