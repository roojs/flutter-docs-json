{
    "name": "quiver.iterables.EnumerateIterable",
    "extends": [
        "quiver.iterables.IndexedValue",
        "dart:collection.IterableBase",
        "quiver.iterables.IndexedValue",
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "memberOf": "quiver.iterables",
    "events": [],
    "methods": [
        {
            "name": "EnumerateIterable",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "quiver.iterables.EnumerateIterable",
            "sig": "",
            "params": [
                {
                    "name": "_iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "quiver.iterables\/EnumerateIterable\/EnumerateIterable.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EnumerateIterable(this._iterable);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "elementAt",
            "type": "quiver.iterables.IndexedValue",
            "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"quiver.iterables\/EnumerateIterable\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.iterables.EnumerateIterable",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.iterables\/EnumerateIterable\/elementAt.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; elementAt(int index) =&gt;\n    new IndexedValue&lt;V&gt;(index, _iterable.elementAt(index));<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "first",
            "type": "quiver.iterables.IndexedValue",
            "types": [],
            "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
            "memberOf": "quiver.iterables.EnumerateIterable",
            "isConstant": false,
            "href": "quiver.iterables\/EnumerateIterable\/first.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get first =&gt; new IndexedValue&lt;V&gt;(0, _iterable.first);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "memberOf": "quiver.iterables.EnumerateIterable",
            "isConstant": false,
            "href": "quiver.iterables\/EnumerateIterable\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _iterable.isEmpty;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iterator",
            "type": "dart:core.Iterator<quiver.iterables.IndexedValue>",
            "types": [
                "dart:core.Iterator",
                "quiver.iterables.IndexedValue"
            ],
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "memberOf": "quiver.iterables.EnumerateIterable",
            "isConstant": false,
            "href": "quiver.iterables\/EnumerateIterable\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;IndexedValue&lt;V&gt;&gt; get iterator =&gt;\n    new EnumerateIterator&lt;V&gt;(_iterable.iterator);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "last",
            "type": "quiver.iterables.IndexedValue",
            "types": [],
            "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
            "memberOf": "quiver.iterables.EnumerateIterable",
            "isConstant": false,
            "href": "quiver.iterables\/EnumerateIterable\/last.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get last =&gt; new IndexedValue&lt;V&gt;(length - 1, _iterable.last);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of elements in <a href=\"quiver.iterables\/EnumerateIterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "memberOf": "quiver.iterables.EnumerateIterable",
            "isConstant": false,
            "href": "quiver.iterables\/EnumerateIterable\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _iterable.length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "single",
            "type": "quiver.iterables.IndexedValue",
            "types": [],
            "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
            "memberOf": "quiver.iterables.EnumerateIterable",
            "isConstant": false,
            "href": "quiver.iterables\/EnumerateIterable\/single.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get single =&gt; new IndexedValue&lt;V&gt;(0, _iterable.single);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "quiver.iterables\/EnumerateIterable-class.html",
    "desc": "<p>An <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of <a href=\"quiver.iterables\/IndexedValue-class.html\">IndexedValue<\/a>s where the nth value holds the nth\nelement of <code>iterable<\/code> and its index. See <a href=\"quiver.iterables\/enumerate.html\">enumerate<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "EnumerateIterable"
}