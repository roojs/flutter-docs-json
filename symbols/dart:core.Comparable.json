{
    "desc": "<p>Interface used by types that have an intrinsic ordering.<\/p>\n<p>The <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> operation defines a total ordering of objects,\nwhich can be used for ordering and sorting.<\/p>\n<p>The <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> interface should be used for the natural ordering of a type.\nIf a type can be ordered in more than one way,\nand none of them is the obvious natural ordering,\nthen it might be better not to use the <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> interface,\nand to provide separate <a href=\"dart-core\/Comparator.html\">Comparator<\/a>s instead.<\/p>\n<p>It is recommended that the order of a <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> agrees\nwith its operator <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> equality (<code>a.compareTo(b) == 0<\/code> iff <code>a == b<\/code>),\nbut this is not a requirement.\nFor example, <a href=\"dart-core\/double-class.html\">double<\/a> and <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> have <code>compareTo<\/code> methods\nthat do not agree with operator <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>.\nFor doubles the <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> method is more precise than the equality,\nand for <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> it is less precise.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code> (0.0).compareTo(-0.0);  \/\/ =&gt; 1\n 0.0 == -0.0;            \/\/ =&gt; true\n var dt = new DateTime.now();\n var dt2 = dt.toUtc();\n dt == dt2;              \/\/ =&gt; false\n dt.compareTo(dt2);      \/\/ =&gt; 0\n<\/code><\/pre>\n<p>The <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> interface does not imply the existence\nof the comparison operators <code>&lt;<\/code>, <code>&lt;=<\/code>, <code>&gt;<\/code> and <code>&gt;=<\/code>.\nThese should only be defined\nif the ordering is a less-than\/greater-than ordering,\nthat is, an ordering where you would naturally\nuse the words \"less than\" about the order of two elements.<\/p>\n<p>If the equality operator and <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> disagree,\nthe comparison operators should follow the equality operator,\nand will likely also disagree with <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a>.\nOtherwise they should match the <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> method,\nso that <code>a &lt; b<\/code> iff <code>a.compareTo(b) &lt; 0<\/code>.<\/p>\n<p>The <a href=\"dart-core\/double-class.html\">double<\/a> class defines comparison operators\nthat are compatible with equality.\nThe operators differ from <code>double.compareTo<\/code> on -0.0 and NaN.<\/p>\n<p>The <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> class has no comparison operators, instead it has the more\nprecisely named <a href=\"dart-core\/DateTime\/isBefore.html\">DateTime.isBefore<\/a> and <a href=\"dart-core\/DateTime\/isAfter.html\">DateTime.isAfter<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-core\/Comparable-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Comparable",
    "shortname": "Comparable",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": null,
            "href": "dart-core\/Comparable\/Comparable.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Comparable",
            "params": []
        },
        {
            "desc": "<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> that compares one comparable to another.<\/p>\n<p>It returns the result of <code>a.compareTo(b)<\/code>.<\/p>\n<p>This utility function is used as the default comparator\nfor ordering collections, for example in the <a href=\"dart-core\/List-class.html\">List<\/a> sort function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int compare(Comparable a, Comparable b) =&gt; a.compareTo(b);<\/code><\/pre>\n    ",
            "href": "dart-core\/Comparable\/compare.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Comparable",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Comparable"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Comparable"
                }
            ]
        },
        {
            "desc": "<p>Compares this object to another <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a><\/p>\n<p>Returns a value like a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> when comparing <code>this<\/code> to <code>other<\/code>.\nThat is, it returns a negative integer if <code>this<\/code> is ordered before <code>other<\/code>,\na positive integer if <code>this<\/code> is ordered after <code>other<\/code>,\nand zero if <code>this<\/code> and <code>other<\/code> are ordered together.<\/p>\n<p>The <code>other<\/code> argument must be a value that is comparable to this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(T other);<\/code><\/pre>\n    ",
            "href": "dart-core\/Comparable\/compareTo.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Comparable",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        }
    ],
    "props": []
}