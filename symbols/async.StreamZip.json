{
    "desc": "<p>A stream that combines the values of other streams.<\/p>\n<p>This emits lists of collected values from each input stream. The first list\ncontains the first value emitted by each stream, the second contains the\nsecond value, and so on. The lists have the same ordering as the iterable\npassed to <a href=\"package-async_async\/StreamZip\/StreamZip.html\">new StreamZip<\/a>.<\/p>\n<p>Any errors from any of the streams are forwarded directly to this stream.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/StreamZip-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "async",
    "name": "async.StreamZip",
    "shortname": "StreamZip",
    "extends": [
        "dart:core.List",
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamZip(Iterable&lt;Stream&lt;T&gt;&gt; streams) : _streams = streams;<\/code><\/pre>\n    ",
            "href": "package-async_async\/StreamZip\/StreamZip.html",
            "isDeprecated": false,
            "type": "",
            "name": "StreamZip",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.StreamZip",
            "params": [
                {
                    "name": "streams",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Iterable<dart:async.Stream>"
                }
            ]
        },
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;List&lt;T&gt;&gt; listen(void onData(List&lt;T&gt; data),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  cancelOnError = identical(true, cancelOnError);\n  var subscriptions = &lt;StreamSubscription&lt;T&gt;&gt;[];\n  StreamController&lt;List&lt;T&gt;&gt; controller;\n  List&lt;T&gt; current;\n  int dataCount = 0;\n\n  \/\/\/ Called for each data from a subscription in [subscriptions].\n  void handleData(int index, T data) {\n    current[index] = data;\n    dataCount++;\n    if (dataCount == subscriptions.length) {\n      var data = current;\n      current = new List(subscriptions.length);\n      dataCount = 0;\n      for (int i = 0; i &lt; subscriptions.length; i++) {\n        if (i != index) subscriptions[i].resume();\n      }\n      controller.add(data);\n    } else {\n      subscriptions[index].pause();\n    }\n  }\n\n  \/\/\/ Called for each error from a subscription in [subscriptions].\n  \/\/\/ Except if [cancelOnError] is true, in which case the function below\n  \/\/\/ is used instead.\n  void handleError(Object error, StackTrace stackTrace) {\n    controller.addError(error, stackTrace);\n  }\n\n  \/\/\/ Called when a subscription has an error and [cancelOnError] is true.\n  \/\/\/\n  \/\/\/ Prematurely cancels all subscriptions since we know that we won't\n  \/\/\/ be needing any more values.\n  void handleErrorCancel(Object error, StackTrace stackTrace) {\n    for (int i = 0; i &lt; subscriptions.length; i++) {\n      subscriptions[i].cancel();\n    }\n    controller.addError(error, stackTrace);\n  }\n\n  void handleDone() {\n    for (int i = 0; i &lt; subscriptions.length; i++) {\n      subscriptions[i].cancel();\n    }\n    controller.close();\n  }\n\n  try {\n    for (var stream in _streams) {\n      int index = subscriptions.length;\n      subscriptions.add(stream.listen((data) {\n        handleData(index, data);\n      },\n          onError: cancelOnError ? handleError : handleErrorCancel,\n          onDone: handleDone,\n          cancelOnError: cancelOnError));\n    }\n  } catch (e) {\n    for (int i = subscriptions.length - 1; i &gt;= 0; i--) {\n      subscriptions[i].cancel();\n    }\n    rethrow;\n  }\n\n  current = new List(subscriptions.length);\n\n  controller = new StreamController&lt;List&lt;T&gt;&gt;(onPause: () {\n    for (int i = 0; i &lt; subscriptions.length; i++) {\n      \/\/ This may pause some subscriptions more than once.\n      \/\/ These will not be resumed by onResume below, but must wait for the\n      \/\/ next round.\n      subscriptions[i].pause();\n    }\n  }, onResume: () {\n    for (int i = 0; i &lt; subscriptions.length; i++) {\n      subscriptions[i].resume();\n    }\n  }, onCancel: () {\n    for (int i = 0; i &lt; subscriptions.length; i++) {\n      \/\/ Canceling more than once is safe.\n      subscriptions[i].cancel();\n    }\n  });\n\n  if (subscriptions.isEmpty) {\n    controller.close();\n  }\n  return controller.stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/StreamZip\/listen.html",
            "isDeprecated": false,
            "type": "dart:async.StreamSubscription<dart:core.List>",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.StreamZip",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "data",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List"
                },
                {
                    "name": "onDone",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": []
}