{
    "desc": "<p>Border specification for <a href=\"widgets\/Table-class.html\">Table<\/a> widgets.<\/p>\n<p>This is like <a href=\"painting\/Border-class.html\">Border<\/a>, with the addition of two sides: the inner horizontal\nborders between rows and the inner vertical borders between columns.<\/p>\n<p>The sides are represented by <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/TableBorder-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.TableBorder",
    "shortname": "TableBorder",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a border for a table.<\/p>\n<p>All the sides of the border default to <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TableBorder({\n  this.top = BorderSide.none,\n  this.right = BorderSide.none,\n  this.bottom = BorderSide.none,\n  this.left = BorderSide.none,\n  this.horizontalInside = BorderSide.none,\n  this.verticalInside = BorderSide.none,\n});<\/code><\/pre>\n    ",
            "href": "rendering\/TableBorder\/TableBorder.html",
            "isDeprecated": "0",
            "type": "",
            "name": "TableBorder",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.TableBorder",
            "params": [
                {
                    "name": "bottom",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "horizontalInside",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "left",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "right",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "top",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "verticalInside",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderSide"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two table borders.<\/p>\n<p>If a border is null, it is treated as having only <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nborders.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TableBorder lerp(TableBorder a, TableBorder b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return TableBorder(\n    top: BorderSide.lerp(a.top, b.top, t),\n    right: BorderSide.lerp(a.right, b.right, t),\n    bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n    left: BorderSide.lerp(a.left, b.left, t),\n    horizontalInside: BorderSide.lerp(a.horizontalInside, b.horizontalInside, t),\n    verticalInside: BorderSide.lerp(a.verticalInside, b.verticalInside, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/TableBorder\/lerp.html",
            "isDeprecated": "0",
            "type": "rendering.TableBorder",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.TableBorder",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.TableBorder"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.TableBorder"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Paints the border around the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, with the\ngiven rows and columns.<\/p>\n<p>Uniform borders are more efficient to paint than more complex borders.<\/p>\n<p>The <code>rows<\/code> argument specifies the vertical positions between the rows,\nrelative to the given rectangle. For example, if the table contained two\nrows of height 100.0 each, then <code>rows<\/code> would contain a single value,\n100.0, which is the vertical position between the two rows (relative to\nthe top edge of <code>rect<\/code>).<\/p>\n<p>The <code>columns<\/code> argument specifies the horizontal positions between the\ncolumns, relative to the given rectangle. For example, if the table\ncontained two columns of height 100.0 each, then <code>columns<\/code> would contain a\nsingle value, 100.0, which is the vertical position between the two\ncolumns (relative to the left edge of <code>rect<\/code>).<\/p>\n<p>The <a href=\"rendering\/TableBorder\/verticalInside.html\">verticalInside<\/a> border is only drawn if there are at least two\ncolumns. The <a href=\"rendering\/TableBorder\/horizontalInside.html\">horizontalInside<\/a> border is only drawn if there are at least\ntwo rows. The horizontal borders are drawn after the vertical borders.<\/p>\n<p>The outer borders (in the order <a href=\"rendering\/TableBorder\/top.html\">top<\/a>, <a href=\"rendering\/TableBorder\/right.html\">right<\/a>, <a href=\"rendering\/TableBorder\/bottom.html\">bottom<\/a>, <a href=\"rendering\/TableBorder\/left.html\">left<\/a>, with\n<a href=\"rendering\/TableBorder\/left.html\">left<\/a> above the others) are painted after the inner borders.<\/p>\n<p>The paint order is particularly notable in the case of\npartially-transparent borders.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(\n  Canvas canvas,\n  Rect rect, {\n  @required Iterable&lt;double&gt; rows,\n  @required Iterable&lt;double&gt; columns,\n}) {\n  \/\/ properties can't be null\n  assert(top != null);\n  assert(right != null);\n  assert(bottom != null);\n  assert(left != null);\n  assert(horizontalInside != null);\n  assert(verticalInside != null);\n\n  \/\/ arguments can't be null\n  assert(canvas != null);\n  assert(rect != null);\n  assert(rows != null);\n  assert(rows.isEmpty || (rows.first &gt;= 0.0 &amp;&amp; rows.last &lt;= rect.height));\n  assert(columns != null);\n  assert(columns.isEmpty || (columns.first &gt;= 0.0 &amp;&amp; columns.last &lt;= rect.width));\n\n  if (columns.isNotEmpty || rows.isNotEmpty) {\n    final Paint paint = Paint();\n    final Path path = Path();\n\n    if (columns.isNotEmpty) {\n      switch (verticalInside.style) {\n        case BorderStyle.solid:\n          paint\n            ..color = verticalInside.color\n            ..strokeWidth = verticalInside.width\n            ..style = PaintingStyle.stroke;\n          path.reset();\n          for (double x in columns) {\n            path.moveTo(rect.left + x, rect.top);\n            path.lineTo(rect.left + x, rect.bottom);\n          }\n          canvas.drawPath(path, paint);\n          break;\n        case BorderStyle.none:\n          break;\n      }\n    }\n\n    if (rows.isNotEmpty) {\n      switch (horizontalInside.style) {\n        case BorderStyle.solid:\n          paint\n            ..color = horizontalInside.color\n            ..strokeWidth = horizontalInside.width\n            ..style = PaintingStyle.stroke;\n          path.reset();\n          for (double y in rows) {\n            path.moveTo(rect.left, rect.top + y);\n            path.lineTo(rect.right, rect.top + y);\n          }\n          canvas.drawPath(path, paint);\n          break;\n        case BorderStyle.none:\n          break;\n      }\n    }\n  }\n  paintBorder(canvas, rect, top: top, right: right, bottom: bottom, left: left);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/TableBorder\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.TableBorder",
            "params": [
                {
                    "name": "canvas",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Canvas"
                },
                {
                    "name": "columns",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.double>"
                },
                {
                    "name": "rect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "rows",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.double>"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this border but with the widths scaled by the factor <code>t<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are treated like zero.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/TableBorder\/scale.html\">BorderSide.scale<\/a>, which is used to implement this method.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TableBorder scale(double t) {\n  return TableBorder(\n    top: top.scale(t),\n    right: right.scale(t),\n    bottom: bottom.scale(t),\n    left: left.scale(t),\n    horizontalInside: horizontalInside.scale(t),\n    verticalInside: verticalInside.scale(t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/TableBorder\/scale.html",
            "isDeprecated": "0",
            "type": "rendering.TableBorder",
            "name": "scale",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.TableBorder",
            "params": [
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TableBorder($top, $right, $bottom, $left, $horizontalInside, $verticalInside)';<\/code><\/pre>\n    ",
            "href": "rendering\/TableBorder\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.TableBorder",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The bottom side of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide bottom\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/bottom.html",
            "name": "bottom",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets get dimensions {\n  return EdgeInsets.fromLTRB(left.width, top.width, right.width, bottom.width);\n}<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/dimensions.html",
            "name": "dimensions",
            "isDeprecated": false,
            "type": "painting.EdgeInsets",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"rendering\/TableBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"rendering\/TableBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"rendering\/TableBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"rendering\/TableBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"rendering\/TableBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"rendering\/TableBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(top, right, bottom, left, horizontalInside, verticalInside);<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The horizontal interior sides of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide horizontalInside\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/horizontalInside.html",
            "name": "horizontalInside",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>Whether all the sides of the border (outside and inside) are identical.\nUniform borders are typically more efficient to paint.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isUniform {\n  assert(top != null);\n  assert(right != null);\n  assert(bottom != null);\n  assert(left != null);\n  assert(horizontalInside != null);\n  assert(verticalInside != null);\n\n  final Color topColor = top.color;\n  if (right.color != topColor ||\n      bottom.color != topColor ||\n      left.color != topColor ||\n      horizontalInside.color != topColor ||\n      verticalInside.color != topColor)\n    return false;\n\n  final double topWidth = top.width;\n  if (right.width != topWidth ||\n      bottom.width != topWidth ||\n      left.width != topWidth ||\n      horizontalInside.width != topWidth ||\n      verticalInside.width != topWidth)\n    return false;\n\n  final BorderStyle topStyle = top.style;\n  if (right.style != topStyle ||\n      bottom.style != topStyle ||\n      left.style != topStyle ||\n      horizontalInside.style != topStyle ||\n      verticalInside.style != topStyle)\n    return false;\n\n  return true;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/isUniform.html",
            "name": "isUniform",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The left side of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide left\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/left.html",
            "name": "left",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The right side of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide right\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/right.html",
            "name": "right",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The top side of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide top\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/top.html",
            "name": "top",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "rendering.TableBorder",
            "params": []
        },
        {
            "desc": "<p>The vertical interior sides of this border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide verticalInside\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/TableBorder\/verticalInside.html",
            "name": "verticalInside",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "memberOf": "rendering.TableBorder",
            "params": []
        }
    ]
}