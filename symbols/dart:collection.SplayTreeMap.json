{
    "desc": "<p>A <a href=\"dart-core\/Map-class.html\">Map<\/a> of objects that can be ordered relative to each other.<\/p>\n<p>The map is based on a self-balancing binary tree. It allows most operations\nin amortized logarithmic time.<\/p>\n<p>Keys of the map are compared using the <code>compare<\/code> function passed in\nthe constructor, both for ordering and for equality.\nIf the map contains only the key <code>a<\/code>, then <code>map.containsKey(b)<\/code>\nwill return <code>true<\/code> if and only if <code>compare(a, b) == 0<\/code>,\nand the value of <code>a == b<\/code> is not even checked.\nIf the compare function is omitted, the objects are assumed to be\n<a href=\"dart-core\/Comparable-class.html\">Comparable<\/a>, and are compared using their <a href=\"dart-core\/Comparable\/compareTo.html\">Comparable.compareTo<\/a> method.\nNon-comparable objects (including <code>null<\/code>) will not work as keys\nin that case.<\/p>\n<p>To allow calling <a href=\"dart-collection\/SplayTreeMap\/operator_get.html\">operator []<\/a>, <a href=\"dart-collection\/SplayTreeMap\/remove.html\">remove<\/a> or <a href=\"dart-collection\/SplayTreeMap\/containsKey.html\">containsKey<\/a> with objects\nthat are not supported by the <code>compare<\/code> function, an extra <code>isValidKey<\/code>\npredicate function can be supplied. This function is tested before\nusing the <code>compare<\/code> function on an argument value that may not be a <code>K<\/code>\nvalue. If omitted, the <code>isValidKey<\/code> function defaults to testing if the\nvalue is a <code>K<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-collection\/SplayTreeMap-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:collection",
    "name": "dart:collection.SplayTreeMap",
    "shortname": "SplayTreeMap",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SplayTreeMap([int compare(K key1, K key2), bool isValidKey(potentialKey)])\n    : _comparator = compare ?? _defaultCompare&lt;K&gt;(),\n      _validKey = isValidKey ?? ((v) =&gt; v is K);<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/SplayTreeMap.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "key1",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<K>"
                },
                {
                    "name": "key2",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<K>"
                },
                {
                    "name": "potentialKey",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) {\n  other.forEach((K key, V value) {\n    this[key] = value;\n  });\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/addAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map"
                }
            ]
        },
        {
            "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _clear();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/clear.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) {\n  return _validKey(key) &amp;&amp; _splay(key) == 0;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/containsKey.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) {\n  int initialSplayCount = _splayCount;\n  bool visit(_SplayTreeMapNode node) {\n    while (node != null) {\n      if (node.value == value) return true;\n      if (initialSplayCount != _splayCount) {\n        throw ConcurrentModificationError(this);\n      }\n      if (node.right != null &amp;&amp; visit(node.right)) return true;\n      node = node.left;\n    }\n    return false;\n  }\n\n  return visit(_root);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/containsValue.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Get the first key in the map. Returns <code>null<\/code> if the map is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K firstKey() {\n  if (_root == null) return null;\n  return _first.key;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/firstKey.html",
            "isDeprecated": "0",
            "type": "<K>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>Get the first key in the map that is strictly larger than <code>key<\/code>. Returns\n<code>null<\/code> if no key was not found.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K firstKeyAfter(K key) {\n  if (key == null) throw ArgumentError(key);\n  if (_root == null) return null;\n  int comp = _splay(key);\n  if (comp &gt; 0) return _root.key;\n  _SplayTreeNode&lt;K&gt; node = _root.right;\n  if (node == null) return null;\n  while (node.left != null) {\n    node = node.left;\n  }\n  return node.key;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/firstKeyAfter.html",
            "isDeprecated": "0",
            "type": "<K>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                }
            ]
        },
        {
            "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) {\n  Iterator&lt;_SplayTreeNode&lt;K&gt;&gt; nodes = _SplayTreeNodeIterator&lt;K&gt;(this);\n  while (nodes.moveNext()) {\n    _SplayTreeMapNode&lt;K, V&gt; node = nodes.current;\n    f(node.key, node.value);\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/forEach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Get the last key in the map. Returns <code>null<\/code> if the map is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K lastKey() {\n  if (_root == null) return null;\n  return _last.key;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/lastKey.html",
            "isDeprecated": "0",
            "type": "<K>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>Get the last key in the map that is strictly smaller than <code>key<\/code>. Returns\n<code>null<\/code> if no key was not found.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">K lastKeyBefore(K key) {\n  if (key == null) throw ArgumentError(key);\n  if (_root == null) return null;\n  int comp = _splay(key);\n  if (comp &lt; 0) return _root.key;\n  _SplayTreeNode&lt;K&gt; node = _root.left;\n  if (node == null) return null;\n  while (node.right != null) {\n    node = node.right;\n  }\n  return node.key;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/lastKeyBefore.html",
            "isDeprecated": "0",
            "type": "<K>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                }
            ]
        },
        {
            "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  if (key == null) throw ArgumentError(key);\n  int comp = _splay(key);\n  if (comp == 0) {\n    return _root.value;\n  }\n  int modificationCount = _modificationCount;\n  int splayCount = _splayCount;\n  V value = ifAbsent();\n  if (modificationCount != _modificationCount) {\n    throw ConcurrentModificationError(this);\n  }\n  if (splayCount != _splayCount) {\n    comp = _splay(key);\n    \/\/ Key is still not there, otherwise _modificationCount would be changed.\n    assert(comp != 0);\n  }\n  _addNewRoot(_SplayTreeMapNode(key, value), comp);\n  return value;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/putIfAbsent.html",
            "isDeprecated": "0",
            "type": "<V>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "ifAbsent",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                }
            ]
        },
        {
            "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) {\n  if (!_validKey(key)) return null;\n  _SplayTreeMapNode&lt;K, V&gt; mapRoot = _remove(key);\n  if (mapRoot != null) return mapRoot.value;\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/SplayTreeMap\/remove.html",
            "isDeprecated": "0",
            "type": "<V>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.SplayTreeMap",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty {\n  return (_root == null);\n}<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeMap\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeMap\/isNotEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>The keys of <a href=\"dart-collection\/SplayTreeMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-collection\/SplayTreeMap\/length.html\">length<\/a> and <a href=\"dart-collection\/SplayTreeMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _SplayTreeKeyIterable&lt;K&gt;(this);<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeMap\/keys.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length {\n  return _count;\n}<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeMap\/length.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        },
        {
            "desc": "<p>The values of <a href=\"dart-collection\/SplayTreeMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"dart-collection\/SplayTreeMap\/keys.html\">keys<\/a> and <a href=\"dart-collection\/SplayTreeMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"dart-collection\/SplayTreeMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _SplayTreeValueIterable&lt;K, V&gt;(this);<\/code><\/pre>\n        ",
            "href": "dart-collection\/SplayTreeMap\/values.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "memberOf": "dart:collection.SplayTreeMap",
            "params": []
        }
    ]
}