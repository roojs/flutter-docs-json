{
    "desc": "<p>A 2D gradient.<\/p>\n<p>This is an interface that allows <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>, <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, and\n<a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a> classes to be used interchangeably in <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>s.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/dart-ui\/Gradient-class.html\">Gradient<\/a>, the class in the <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> library.<\/li><\/ul>",
    "dtype": "class",
    "example": null,
    "href": "painting\/Gradient-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.Gradient",
    "shortname": "Gradient",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initialize the gradient's colors and stops.<\/p>\n<p>The <code>colors<\/code> argument must not be null, and must have at least two colors\n(the length is not verified until the <a href=\"painting\/Gradient\/createShader.html\">createShader<\/a> method is called).<\/p>\n<p>If specified, the <code>stops<\/code> argument must have the same number of entries as\n<code>colors<\/code> (this is also not verified until the <a href=\"painting\/Gradient\/createShader.html\">createShader<\/a> method is\ncalled).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Gradient({\n  @required this.colors,\n  this.stops,\n}) : assert(colors != null);<\/code><\/pre>\n    ",
            "href": "painting\/Gradient\/Gradient.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.Gradient",
            "params": [
                {
                    "name": "colors",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<dart:ui.Color>"
                },
                {
                    "name": "stops",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<dart:core.double>"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Shader createShader(Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
            "href": "painting\/Gradient\/createShader.html",
            "isDeprecated": "0",
            "type": "dart:ui.Shader",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Gradient",
            "params": [
                {
                    "name": "rect",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates between two <a href=\"painting\/Gradient-class.html\">Gradient<\/a>s.<\/p>\n<p>This defers to <code>b<\/code>'s <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a> function if <code>b<\/code> is not null. If <code>b<\/code> is\nnull or if its <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a> returns null, it uses <code>a<\/code>'s <a href=\"painting\/Gradient\/lerpFrom.html\">lerpFrom<\/a>\nfunction instead. If both return null, it returns <code>a<\/code> before <code>t == 0.5<\/code>\nand <code>b<\/code> after <code>t == 0.5<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Gradient lerp(Gradient a, Gradient b, double t) {\n  assert(t != null);\n  Gradient result;\n  if (b != null)\n    result = b.lerpFrom(a, t); \/\/ if a is null, this must return non-null\n  if (result == null &amp;&amp; a != null)\n    result = a.lerpTo(b, t); \/\/ if b is null, this must return non-null\n  if (result != null)\n    return result;\n  if (a == null &amp;&amp; b == null)\n    return null;\n  assert(a != null &amp;&amp; b != null);\n  return t &lt; 0.5 ? a.scale(1.0 - (t * 2.0)) : b.scale((t - 0.5) * 2.0);\n}<\/code><\/pre>\n    ",
            "href": "painting\/Gradient\/lerp.html",
            "isDeprecated": "0",
            "type": "painting.Gradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Gradient",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.Gradient"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.Gradient"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Gradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/Gradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Gradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null)\n    return scale(t);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "painting\/Gradient\/lerpFrom.html",
            "isDeprecated": "0",
            "type": "painting.Gradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Gradient",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.Gradient"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Gradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/Gradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Gradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nGradient lerpTo(Gradient b, double t) {\n  if (b == null)\n    return scale(1.0 - t);\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "painting\/Gradient\/lerpTo.html",
            "isDeprecated": "0",
            "type": "painting.Gradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Gradient",
            "params": [
                {
                    "name": "b",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "painting.Gradient"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new gradient with its properties scaled by the given factor.<\/p>\n<p>A factor of 0.0 (or less) should result in a variant of the gradient that\nis invisible; any two factors epsilon apart should be unnoticeably\ndifferent from each other at first glance. From this it follows that\nscaling a gradient with values from 1.0 to 0.0 over time should cause the\ngradient to smoothly disappear.<\/p>\n<p>Typically this is the same as interpolating from null (with <a href=\"painting\/Gradient\/lerp.html\">lerp<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient scale(double factor);<\/code><\/pre>\n    ",
            "href": "painting\/Gradient\/scale.html",
            "isDeprecated": "0",
            "type": "painting.Gradient",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Gradient",
            "params": [
                {
                    "name": "factor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The colors the gradient should obtain at each of the stops.<\/p>\n<p>If <a href=\"painting\/Gradient\/stops.html\">stops<\/a> is non-null, this list must have the same length as <a href=\"painting\/Gradient\/stops.html\">stops<\/a>.<\/p>\n<p>This list must have at least two colors in it (otherwise, it's not a\ngradient!).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Color&gt; colors\n\n<\/code><\/pre>\n        ",
            "href": "painting\/Gradient\/colors.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:ui.Color>",
            "memberOf": "painting.Gradient",
            "params": []
        },
        {
            "desc": "<p>A list of values from 0.0 to 1.0 that denote fractions along the gradient.<\/p>\n<p>If non-null, this list must have the same length as <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>If the first value is not 0.0, then a stop with position 0.0 and a color\nequal to the first color in <a href=\"painting\/Gradient\/colors.html\">colors<\/a> is implied.<\/p>\n<p>If the last value is not 1.0, then a stop with position 1.0 and a color\nequal to the last color in <a href=\"painting\/Gradient\/colors.html\">colors<\/a> is implied.<\/p>\n<p>The values in the <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list must be in ascending order. If a value in\nthe <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list is less than an earlier value in the list, then its value\nis assumed to equal the previous value.<\/p>\n<p>If stops is null, then a set of uniformly distributed stops is implied,\nwith the first stop at 0.0 and the last stop at 1.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;double&gt; stops\n\n<\/code><\/pre>\n        ",
            "href": "painting\/Gradient\/stops.html",
            "isDeprecated": "0",
            "type": "dart:core.List<dart:core.double>",
            "memberOf": "painting.Gradient",
            "params": []
        }
    ]
}