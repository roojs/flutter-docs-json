{
    "desc": "<p>A widget that is bigger on the inside.<\/p>\n<p><a href=\"widgets\/Viewport-class.html\">Viewport<\/a> is the visual workhorse of the scrolling machinery. It displays a\nsubset of its children according to its own dimensions and the given\n<a href=\"widgets\/Viewport\/offset.html\">offset<\/a>. As the offset varies, different children are visible through\nthe viewport.<\/p>\n<p><a href=\"widgets\/Viewport-class.html\">Viewport<\/a> hosts a bidirectional list of slivers, anchored on a <a href=\"widgets\/Viewport\/center.html\">center<\/a>\nsliver, which is placed at the zero scroll offset. The center widget is\ndisplayed in the viewport according to the <a href=\"widgets\/Viewport\/anchor.html\">anchor<\/a> property.<\/p>\n<p>Slivers that are earlier in the child list than <a href=\"widgets\/Viewport\/center.html\">center<\/a> are displayed in\nreverse order in the reverse <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> starting from the <a href=\"widgets\/Viewport\/center.html\">center<\/a>. For\nexample, if the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, the first sliver\nbefore <a href=\"widgets\/Viewport\/center.html\">center<\/a> is placed above the <a href=\"widgets\/Viewport\/center.html\">center<\/a>. The slivers that are later in\nthe child list than <a href=\"widgets\/Viewport\/center.html\">center<\/a> are placed in order in the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a>. For\nexample, in the preceding scenario, the first sliver after <a href=\"widgets\/Viewport\/center.html\">center<\/a> is\nplaced below the <a href=\"widgets\/Viewport\/center.html\">center<\/a>.<\/p>\n<p><a href=\"widgets\/Viewport-class.html\">Viewport<\/a> cannot contain box children directly. Instead, use a\n<a href=\"widgets\/SliverList-class.html\">SliverList<\/a>, <a href=\"widgets\/SliverFixedExtentList-class.html\">SliverFixedExtentList<\/a>, <a href=\"widgets\/SliverGrid-class.html\">SliverGrid<\/a>, or a\n<a href=\"widgets\/SliverToBoxAdapter-class.html\">SliverToBoxAdapter<\/a>, for example.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, <a href=\"widgets\/PageView-class.html\">PageView<\/a>, <a href=\"widgets\/GridView-class.html\">GridView<\/a>, and <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>, which combine\n<a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> and <a href=\"widgets\/Viewport-class.html\">Viewport<\/a> into widgets that are easier to use.<\/li>\n<li>\n<a href=\"widgets\/SliverToBoxAdapter-class.html\">SliverToBoxAdapter<\/a>, which allows a box widget to be placed inside a\nsliver context (the opposite of this widget).<\/li>\n<li>\n<a href=\"widgets\/ShrinkWrappingViewport-class.html\">ShrinkWrappingViewport<\/a>, a variant of <a href=\"widgets\/Viewport-class.html\">Viewport<\/a> that shrink-wraps its\ncontents along the main axis.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Viewport-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Viewport",
    "shortname": "Viewport",
    "extends": [
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.NestedScrollViewViewport"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that is bigger on the inside.<\/p>\n<p>The viewport listens to the <code>offset<\/code>, which means you do not need to\nrebuild this widget when the <code>offset<\/code> changes.<\/p>\n<p>The <code>offset<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Viewport({\n  Key key,\n  this.axisDirection = AxisDirection.down,\n  this.crossAxisDirection,\n  this.anchor = 0.0,\n  @required this.offset,\n  this.center,\n  this.cacheExtent,\n  List&lt;Widget&gt; slivers = const &lt;Widget&gt;[],\n}) : assert(offset != null),\n     assert(slivers != null),\n     assert(center == null || slivers.where((Widget child) =&gt; child.key == center).length == 1),\n     super(key: key, children: slivers);<\/code><\/pre>\n    ",
            "href": "widgets\/Viewport\/Viewport.html",
            "isDeprecated": false,
            "type": "",
            "name": "Viewport",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Viewport",
            "params": [
                {
                    "name": "anchor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "axisDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "cacheExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "center",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "crossAxisDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.ViewportOffset"
                },
                {
                    "name": "slivers",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                }
            ]
        },
        {
            "desc": "<p>RenderObjectWidgets always inflate to a <a href=\"widgets\/RenderObjectElement-class.html\">RenderObjectElement<\/a> subclass.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ViewportElement createElement() =&gt; _ViewportElement(this);<\/code><\/pre>\n    ",
            "href": "widgets\/Viewport\/createElement.html",
            "isDeprecated": false,
            "type": "<_ViewportElement>",
            "name": "createElement",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Viewport",
            "params": []
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/Viewport\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderViewport createRenderObject(BuildContext context) {\n  return RenderViewport(\n    axisDirection: axisDirection,\n    crossAxisDirection: crossAxisDirection ?? Viewport.getDefaultCrossAxisDirection(context, axisDirection),\n    anchor: anchor,\n    offset: offset,\n    cacheExtent: cacheExtent,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Viewport\/createRenderObject.html",
            "isDeprecated": false,
            "type": "rendering.RenderViewport",
            "name": "createRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Viewport",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Viewport\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;AxisDirection&gt;('axisDirection', axisDirection));\n  properties.add(EnumProperty&lt;AxisDirection&gt;('crossAxisDirection', crossAxisDirection, defaultValue: null));\n  properties.add(DoubleProperty('anchor', anchor));\n  properties.add(DiagnosticsProperty&lt;ViewportOffset&gt;('offset', offset));\n  if (center != null) {\n    properties.add(DiagnosticsProperty&lt;Key&gt;('center', center));\n  } else if (children.isNotEmpty &amp;&amp; children.first.key != null) {\n    properties.add(DiagnosticsProperty&lt;Key&gt;('center', children.first.key, tooltip: 'implicit'));\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Viewport\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Viewport",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Given a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and an <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a>, determine the correct cross\naxis direction.<\/p>\n<p>This depends on the <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> if the <code>axisDirection<\/code> is vertical;\notherwise, the default cross axis direction is downwards.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AxisDirection getDefaultCrossAxisDirection(BuildContext context, AxisDirection axisDirection) {\n  assert(axisDirection != null);\n  switch (axisDirection) {\n    case AxisDirection.up:\n      return textDirectionToAxisDirection(Directionality.of(context));\n    case AxisDirection.right:\n      return AxisDirection.down;\n    case AxisDirection.down:\n      return textDirectionToAxisDirection(Directionality.of(context));\n    case AxisDirection.left:\n      return AxisDirection.down;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Viewport\/getDefaultCrossAxisDirection.html",
            "isDeprecated": false,
            "type": "painting.AxisDirection",
            "name": "getDefaultCrossAxisDirection",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Viewport",
            "params": [
                {
                    "name": "axisDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AxisDirection"
                },
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Viewport\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/Viewport\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderViewport renderObject) {\n  renderObject\n    ..axisDirection = axisDirection\n    ..crossAxisDirection = crossAxisDirection ?? Viewport.getDefaultCrossAxisDirection(context, axisDirection)\n    ..anchor = anchor\n    ..offset = offset\n    ..cacheExtent = cacheExtent;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Viewport\/updateRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Viewport",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderViewport"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The relative position of the zero scroll offset.<\/p>\n<p>For example, if <a href=\"widgets\/Viewport\/anchor.html\">anchor<\/a> is 0.5 and the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> is\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then the zero scroll offset is\nvertically centered within the viewport. If the <a href=\"widgets\/Viewport\/anchor.html\">anchor<\/a> is 1.0, and the\n<a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>, then the zero scroll offset is\non the left edge of the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double anchor\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Viewport\/anchor.html",
            "name": "anchor",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Viewport",
            "params": []
        },
        {
            "desc": "<p>The direction in which the <a href=\"widgets\/Viewport\/offset.html\">offset<\/a>'s <a href=\"rendering\/ViewportOffset\/pixels.html\">ViewportOffset.pixels<\/a> increases.<\/p>\n<p>For example, if the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, a scroll\noffset of zero is at the top of the viewport and increases towards the\nbottom of the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AxisDirection axisDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Viewport\/axisDirection.html",
            "name": "axisDirection",
            "isDeprecated": false,
            "type": "painting.AxisDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Viewport",
            "params": []
        },
        {
            "desc": "<p>The viewport has an area before and after the visible area to cache items\nthat are about to become visible when the user scrolls.<\/p>\n<p>Items that fall in this cache area are laid out even though they are not\n(yet) visible on screen. The <a href=\"widgets\/Viewport\/cacheExtent.html\">cacheExtent<\/a> describes how many pixels\nthe cache area extends before the leading edge and after the trailing edge\nof the viewport.<\/p>\n<p>The total extent, which the viewport will try to cover with children, is\n<a href=\"widgets\/Viewport\/cacheExtent.html\">cacheExtent<\/a> before the leading edge + extent of the main axis +\n<a href=\"widgets\/Viewport\/cacheExtent.html\">cacheExtent<\/a> after the trailing edge.<\/p>\n<p>The cache area is also used to implement implicit accessibility scrolling\non iOS: When the accessibility focus moves from an item in the visible\nviewport to an invisible item in the cache area, the framework will bring\nthat item into view with an (implicit) scroll action.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double cacheExtent\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Viewport\/cacheExtent.html",
            "name": "cacheExtent",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Viewport",
            "params": []
        },
        {
            "desc": "<p>The first child in the <a href=\"rendering\/GrowthDirection-class.html\">GrowthDirection.forward<\/a> growth direction.<\/p>\n<p>Children after <a href=\"widgets\/Viewport\/center.html\">center<\/a> will be placed in the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> relative to\nthe <a href=\"widgets\/Viewport\/center.html\">center<\/a>. Children before <a href=\"widgets\/Viewport\/center.html\">center<\/a> will be placed in the opposite of\nthe <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> relative to the <a href=\"widgets\/Viewport\/center.html\">center<\/a>.<\/p>\n<p>The <a href=\"widgets\/Viewport\/center.html\">center<\/a> must be the key of a child of the viewport.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Key center\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Viewport\/center.html",
            "name": "center",
            "isDeprecated": false,
            "type": "foundation.Key",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Viewport",
            "params": []
        },
        {
            "desc": "<p>The direction in which child should be laid out in the cross axis.<\/p>\n<p>If the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, this\nproperty defaults to <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a> if the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nis <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> and <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a> if the ambient\n<a href=\"widgets\/Directionality-class.html\">Directionality<\/a> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>.<\/p>\n<p>If the <a href=\"widgets\/Viewport\/axisDirection.html\">axisDirection<\/a> is <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>,\nthis property defaults to <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AxisDirection crossAxisDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Viewport\/crossAxisDirection.html",
            "name": "crossAxisDirection",
            "isDeprecated": false,
            "type": "painting.AxisDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Viewport",
            "params": []
        },
        {
            "desc": "<p>Which part of the content inside the viewport should be visible.<\/p>\n<p>The <a href=\"rendering\/ViewportOffset\/pixels.html\">ViewportOffset.pixels<\/a> value determines the scroll offset that the\nviewport uses to select which part of its content to display. As the user\nscrolls the viewport, this value changes, which changes the content that\nis displayed.<\/p>\n<p>Typically a <a href=\"widgets\/ScrollPosition-class.html\">ScrollPosition<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ViewportOffset offset\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Viewport\/offset.html",
            "name": "offset",
            "isDeprecated": false,
            "type": "rendering.ViewportOffset",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Viewport",
            "params": []
        }
    ]
}