{
    "desc": "<p>Simple delegating wrapper around a <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a>.<\/p>\n<p>Subclasses can override individual methods, or use this to expose only the\n<a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a> methods of a subclass.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/DelegatingStreamConsumer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.DelegatingStreamConsumer",
    "shortname": "DelegatingStreamConsumer",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a delegating consumer forwarding calls to <code>consumer<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DelegatingStreamConsumer(StreamConsumer&lt;T&gt; consumer) : _consumer = consumer;<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamConsumer\/DelegatingStreamConsumer.html",
            "isDeprecated": false,
            "type": "",
            "name": "DelegatingStreamConsumer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.DelegatingStreamConsumer",
            "params": [
                {
                    "name": "consumer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:async.StreamConsumer"
                }
            ]
        },
        {
            "desc": "<p>Consumes the elements of <code>stream<\/code>.<\/p>\n<p>Listens on <code>stream<\/code> and does something for each event.<\/p>\n<p>Returns a future which is completed when the stream is done being added,\nand the consumer is ready to accept a new stream.\nNo further calls to <a href=\"package-async_async\/DelegatingStreamConsumer\/addStream.html\">addStream<\/a> or <a href=\"package-async_async\/DelegatingStreamConsumer\/close.html\">close<\/a> should happen before the\nreturned future has completed.<\/p>\n<p>The consumer may stop listening to the stream after an error,\nit may consume all the errors and only stop at a done event,\nor it may be canceled early if the receiver don't want any further events.<\/p>\n<p>If the consumer stops listening because of some error preventing it\nfrom continuing, it may report this error in the returned future,\notherwise it will just complete the future with <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;T&gt; stream) =&gt; _consumer.addStream(stream);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamConsumer\/addStream.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "addStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamConsumer",
            "params": [
                {
                    "name": "stream",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Tells the consumer that no further streams will be added.<\/p>\n<p>This allows the consumer to complete any remaining work and release\nresources that are no longer needed<\/p>\n<p>Returns a future which is completed when the consumer has shut down.\nIf cleaning up can fail, the error may be reported in the returned future,\notherwise it completes with <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() =&gt; _consumer.close();<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamConsumer\/close.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamConsumer",
            "params": []
        },
        {
            "desc": "<p>Creates a wrapper that coerces the type of <code>consumer<\/code>.<\/p>\n<p>Unlike <a href=\"dart-async\/StreamConsumer\/StreamConsumer.html\">new StreamConsumer<\/a>, this only requires its argument to be an\ninstance of <code>StreamConsumer<\/code>, not <code>StreamConsumer&lt;T&gt;<\/code>. This means that\ncalls to <a href=\"package-async_async\/DelegatingStreamConsumer\/addStream.html\">addStream<\/a> may throw a <a href=\"dart-core\/CastError-class.html\">CastError<\/a> if the argument type doesn't\nmatch the reified type of <code>consumer<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static StreamConsumer&lt;T&gt; typed&lt;T&gt;(StreamConsumer consumer) =&gt;\n    consumer is StreamConsumer&lt;T&gt;\n        ? consumer\n        : new DelegatingStreamConsumer._(consumer);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingStreamConsumer\/typed.html",
            "isDeprecated": false,
            "type": "dart:async.StreamConsumer",
            "name": "typed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingStreamConsumer",
            "params": [
                {
                    "name": "consumer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.StreamConsumer"
                }
            ]
        }
    ],
    "props": []
}