{
    "desc": "<p>A converter that decodes hexadecimal strings into byte arrays.<\/p>\n<p>Because two hexadecimal digits correspond to a single byte, this will throw\na <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if given an odd-length string. It will also throw a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if given a string containing non-hexadecimal code units.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "convert\/HexDecoder-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "convert",
    "name": "convert.HexDecoder",
    "shortname": "HexDecoder",
    "extends": [
        "dart:core.int",
        "dart:core.List",
        "dart:core.String",
        "dart:convert.Converter",
        "dart:core.int",
        "dart:core.List",
        "dart:core.String",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(String string) {\n  if (!string.length.isEven) {\n    throw new FormatException(\n        \"Invalid input length, must be even.\", string, string.length);\n  }\n\n  var bytes = new Uint8List(string.length ~\/ 2);\n  _decode(string.codeUnits, 0, string.length, bytes, 0);\n  return bytes;\n}<\/code><\/pre>\n    ",
            "href": "convert\/HexDecoder\/convert.html",
            "isDeprecated": false,
            "type": "dart:core.List<dart:core.int>",
            "name": "convert",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "convert.HexDecoder",
            "params": [
                {
                    "name": "string",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) =&gt;\n    new _HexDecoderSink(sink);<\/code><\/pre>\n    ",
            "href": "convert\/HexDecoder\/startChunkedConversion.html",
            "isDeprecated": false,
            "type": "dart:convert.StringConversionSink",
            "name": "startChunkedConversion",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "convert.HexDecoder",
            "params": [
                {
                    "name": "sink",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Sink<dart:core.List<dart:core.int>>"
                }
            ]
        }
    ],
    "props": []
}