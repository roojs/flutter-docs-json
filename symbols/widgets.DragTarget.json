{
    "desc": "<p>A widget that receives data when a <a href=\"widgets\/Draggable-class.html\">Draggable<\/a> widget is dropped.<\/p>\n<p>When a draggable is dragged on top of a drag target, the drag target is\nasked whether it will accept the data the draggable is carrying. If the user\ndoes drop the draggable on top of the drag target (and the drag target has\nindicated that it will accept the draggable's data), then the drag target is\nasked to accept the draggable's data.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/Draggable-class.html\">Draggable<\/a><\/li>\n<li><a href=\"widgets\/LongPressDraggable-class.html\">LongPressDraggable<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/DragTarget-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.DragTarget",
    "shortname": "DragTarget",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called to build the contents of this widget.<\/p>\n<p>The builder can build different widgets depending on what is being dragged\ninto this drag target.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragTargetBuilder&lt;T&gt; builder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/DragTarget\/builder.html",
            "isDeprecated": false,
            "type": "widgets.DragTargetBuilder",
            "name": "builder",
            "memberOf": "widgets.DragTarget",
            "params": []
        },
        {
            "desc": "<p>Called when an acceptable piece of data was dropped over this drag target.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragTargetAccept&lt;T&gt; onAccept\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/DragTarget\/onAccept.html",
            "isDeprecated": false,
            "type": "widgets.DragTargetAccept",
            "name": "onAccept",
            "memberOf": "widgets.DragTarget",
            "params": []
        },
        {
            "desc": "<p>Called when a given piece of data being dragged over this target leaves\nthe target.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragTargetLeave&lt;T&gt; onLeave\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/DragTarget\/onLeave.html",
            "isDeprecated": false,
            "type": "widgets.DragTargetLeave",
            "name": "onLeave",
            "memberOf": "widgets.DragTarget",
            "params": []
        },
        {
            "desc": "<p>Called to determine whether this widget is interested in receiving a given\npiece of data being dragged over this drag target.<\/p>\n<p>Called when a piece of data enters the target. This will be followed by\neither <a href=\"widgets\/DragTarget\/onAccept.html\">onAccept<\/a>, if the data is dropped, or <a href=\"widgets\/DragTarget\/onLeave.html\">onLeave<\/a>, if the drag\nleaves the target.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragTargetWillAccept&lt;T&gt; onWillAccept\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/DragTarget\/onWillAccept.html",
            "isDeprecated": false,
            "type": "widgets.DragTargetWillAccept",
            "name": "onWillAccept",
            "memberOf": "widgets.DragTarget",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that receives drags.<\/p>\n<p>The <code>builder<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DragTarget({\n  Key key,\n  @required this.builder,\n  this.onWillAccept,\n  this.onAccept,\n  this.onLeave,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/DragTarget\/DragTarget.html",
            "isDeprecated": false,
            "type": "",
            "name": "DragTarget",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.DragTarget",
            "params": [
                {
                    "name": "builder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DragTargetBuilder"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onAccept",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DragTargetAccept"
                },
                {
                    "name": "onLeave",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DragTargetLeave"
                },
                {
                    "name": "onWillAccept",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DragTargetWillAccept"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/DragTarget\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_DragTargetState&lt;T&gt; createState() =&gt; _DragTargetState&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "widgets\/DragTarget\/createState.html",
            "isDeprecated": false,
            "type": "<_DragTargetState<T>>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.DragTarget",
            "params": []
        }
    ],
    "props": []
}