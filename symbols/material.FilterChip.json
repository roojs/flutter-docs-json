{
    "desc": "<p>A material design filter chip.<\/p>\n<p>Filter chips use tags or descriptive words as a way to filter content.<\/p>\n<p>Filter chips are a good alternative to <a href=\"material\/Checkbox-class.html\">Checkbox<\/a> or <a href=\"material\/Switch-class.html\">Switch<\/a> widgets.\nUnlike these alternatives, filter chips allow for clearly delineated and\nexposed options in a compact area.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ActorFilterEntry {\n  const ActorFilterEntry(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastFilter extends StatefulWidget {\n  @override\n  State createState() =&gt; CastFilterState();\n}\n\nclass CastFilterState extends State&lt;CastFilter&gt; {\n  final List&lt;ActorFilterEntry&gt; _cast = &lt;ActorFilterEntry&gt;[\n    const ActorFilterEntry('Aaron Burr', 'AB'),\n    const ActorFilterEntry('Alexander Hamilton', 'AH'),\n    const ActorFilterEntry('Eliza Hamilton', 'EH'),\n    const ActorFilterEntry('James Madison', 'JM'),\n  ];\n  List&lt;String&gt; _filters = &lt;String&gt;[];\n\n  Iterable&lt;Widget&gt; get actorWidgets sync* {\n    for (ActorFilterEntry actor in _cast) {\n      yield Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: FilterChip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          selected: _filters.contains(actor.name),\n          onSelected: (bool value) {\n            setState(() {\n              if (value) {\n                _filters.add(actor.name);\n              } else {\n                _filters.removeWhere((String name) {\n                  return name == actor.name;\n                });\n              }\n            });\n          },\n        ),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: &lt;Widget&gt;[\n        Wrap(\n          children: actorWidgets.toList(),\n        ),\n        Text('Look for: ${_filters.join(', ')}'),\n      ],\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a>, a chip that displays information and can be deleted.<\/li>\n<li>\n<a href=\"material\/InputChip-class.html\">InputChip<\/a>, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.<\/li>\n<li>\n<a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a>, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.<\/li>\n<li>\n<a href=\"material\/ActionChip-class.html\">ActionChip<\/a>, represents an action related to primary content.<\/li>\n<li>\n<a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a>, which shows images or initials of people.<\/li>\n<li>\n<a href=\"widgets\/Wrap-class.html\">Wrap<\/a>, A widget that displays its children in multiple horizontal or\nvertical runs.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/chips.html\">material.io\/design\/components\/chips.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/FilterChip-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.FilterChip",
    "shortname": "FilterChip",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the chip should change between selected and de-selected\nstates.<\/p>\n<p>When the chip is tapped, then the <a href=\"material\/FilterChip\/onSelected.html\">onSelected<\/a> callback, if set, will be\napplied to <code>!selected<\/code> (see <a href=\"material\/FilterChip\/selected.html\">selected<\/a>).<\/p>\n<p>The chip passes the new value to the callback but does not actually\nchange state until the parent widget rebuilds the chip with the new\nvalue.<\/p>\n<p>The callback provided to <a href=\"material\/FilterChip\/onSelected.html\">onSelected<\/a> should update the state of the\nparent <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the\nparent gets rebuilt.<\/p>\n<p>The <a href=\"material\/FilterChip\/onSelected.html\">onSelected<\/a> and <a href=\"material\/TappableChipAttributes\/onPressed.html\">TappableChipAttributes.onPressed<\/a> callbacks must not\nboth be specified at the same time.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> that illustrates use of onSelected in an <a href=\"material\/InputChip-class.html\">InputChip<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Wood extends StatefulWidget {\n  @override\n  State&lt;StatefulWidget&gt; createState() =&gt; WoodState();\n}\n\nclass WoodState extends State&lt;Wood&gt; {\n  bool _useChisel = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return InputChip(\n      label: const Text('Use Chisel'),\n      selected: _useChisel,\n      onSelected: (bool newValue) {\n        setState(() {\n          _useChisel = newValue;\n        });\n      },\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onSelected\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/onSelected.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.bool>",
            "memberOf": "material.FilterChip",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Create a chip that acts like a checkbox.<\/p>\n<p>The <code>selected<\/code>, <code>label<\/code>, and <code>clipBehavior<\/code> arguments must not be null.\nThe <code>pressElevation<\/code> and <code>elevation<\/code> must be null or non-negative.\nTypically, <code>pressElevation<\/code> is greater than <code>elevation<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FilterChip({\n  Key key,\n  this.avatar,\n  @required this.label,\n  this.labelStyle,\n  this.labelPadding,\n  this.selected = false,\n  @required this.onSelected,\n  this.pressElevation,\n  this.disabledColor,\n  this.selectedColor,\n  this.tooltip,\n  this.shape,\n  this.clipBehavior = Clip.none,\n  this.backgroundColor,\n  this.padding,\n  this.materialTapTargetSize,\n  this.elevation,\n  this.shadowColor,\n  this.selectedShadowColor,\n  this.avatarBorder = const CircleBorder(),\n}) : assert(selected != null),\n     assert(label != null),\n     assert(clipBehavior != null),\n     assert(pressElevation == null || pressElevation &gt;= 0.0),\n     assert(elevation == null || elevation &gt;= 0.0),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/FilterChip\/FilterChip.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.FilterChip",
            "params": [
                {
                    "name": "avatar",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "avatarBorder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "backgroundColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "disabledColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "label",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "labelPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "labelStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "onSelected",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.bool>"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "pressElevation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "selected",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "selectedColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "selectedShadowColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shadowColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "tooltip",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/FilterChip\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterial(context));\n  return RawChip(\n    avatar: avatar,\n    label: label,\n    labelStyle: labelStyle,\n    labelPadding: labelPadding,\n    onSelected: onSelected,\n    pressElevation: pressElevation,\n    selected: selected,\n    tooltip: tooltip,\n    shape: shape,\n    clipBehavior: clipBehavior,\n    backgroundColor: backgroundColor,\n    disabledColor: disabledColor,\n    selectedColor: selectedColor,\n    padding: padding,\n    isEnabled: isEnabled,\n    materialTapTargetSize: materialTapTargetSize,\n    elevation: elevation,\n    shadowColor: shadowColor,\n    selectedShadowColor: selectedShadowColor,\n    avatarBorder: avatarBorder,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/FilterChip\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.FilterChip",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>A widget to display prior to the chip's label.<\/p>\n<p>Typically a <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget avatar\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/avatar.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The shape of the translucent highlight painted over the avatar when the\n<a href=\"material\/FilterChip\/selected.html\">selected<\/a> property is true.<\/p>\n<p>Only the outer path of the shape is used.<\/p>\n<p>Defaults to <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder avatarBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/avatarBorder.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Color to be used for the unselected, enabled chip's background.<\/p>\n<p>The default is light grey.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/backgroundColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/clipBehavior.html",
            "isDeprecated": "0",
            "type": "dart:ui.Clip",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Color to be used for the chip's background indicating that it is disabled.<\/p>\n<p>The chip is disabled when <a href=\"material\/FilterChip\/isEnabled.html\">isEnabled<\/a> is false, or all three of\n<a href=\"material\/FilterChip\/onSelected.html\">SelectableChipAttributes.onSelected<\/a>, <a href=\"material\/TappableChipAttributes\/onPressed.html\">TappableChipAttributes.onPressed<\/a>,\nand <code>DeletableChipAttributes.onDelete<\/code> are null.<\/p>\n<p>It defaults to <a href=\"material\/Colors\/black38-constant.html\">Colors.black38<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/disabledColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Elevation to be applied on the chip relative to its parent.<\/p>\n<p>This controls the size of the shadow below the chip.<\/p>\n<p>Defaults to 0. The value is always non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/elevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Whether or not this chip is enabled for input.<\/p>\n<p>If this is true, but all of the user action callbacks are null (i.e.\n<a href=\"material\/FilterChip\/onSelected.html\">SelectableChipAttributes.onSelected<\/a>, <a href=\"material\/TappableChipAttributes\/onPressed.html\">TappableChipAttributes.onPressed<\/a>,\nand <code>DeletableChipAttributes.onDelete<\/code>), then the\ncontrol will still be shown as disabled.<\/p>\n<p>This is typically used if you want the chip to be disabled, but also show\na delete button.<\/p>\n<p>For classes which don't have this as a constructor argument, <a href=\"material\/FilterChip\/isEnabled.html\">isEnabled<\/a>\nreturns true if their user action callback is set.<\/p>\n<p>Defaults to true. Cannot be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isEnabled =&gt; onSelected != null;<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/isEnabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The primary content of the chip.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget label\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/label.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The padding around the <a href=\"material\/FilterChip\/label.html\">label<\/a> widget.<\/p>\n<p>By default, this is 4 logical pixels at the beginning and the end of the\nlabel, and zero on top and bottom.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry labelPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/labelPadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The style to be applied to the chip's label.<\/p>\n<p>This only has an effect on widgets that respect the <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>,\nsuch as <a href=\"widgets\/Text-class.html\">Text<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/labelStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/FilterChip\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/materialTapTargetSize.html",
            "isDeprecated": "0",
            "type": "material.MaterialTapTargetSize",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The padding between the contents of the chip and the outside <a href=\"material\/FilterChip\/shape.html\">shape<\/a>.<\/p>\n<p>Defaults to 4 logical pixels on all sides.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Elevation to be applied on the chip relative to its parent during the\npress motion.<\/p>\n<p>This controls the size of the shadow below the chip.<\/p>\n<p>Defaults to 8. The value is always non-negative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressElevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/pressElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Whether or not this chip is selected.<\/p>\n<p>If <a href=\"material\/FilterChip\/onSelected.html\">onSelected<\/a> is not null, this value will be used to determine if the\nselect check mark will be shown or not.<\/p>\n<p>Must not be null. Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool selected\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/selected.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Color to be used for the chip's background, indicating that it is\nselected.<\/p>\n<p>The chip is selected when <a href=\"material\/FilterChip\/selected.html\">selected<\/a> is true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/selectedColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0 and the\nchip is selected.<\/p>\n<p>The default is <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedShadowColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/selectedShadowColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0.<\/p>\n<p>The default is <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color shadowColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/shadowColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> to draw around the chip.<\/p>\n<p>Defaults to the shape in the ambient <a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/shape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.FilterChip",
            "params": []
        },
        {
            "desc": "<p>Tooltip string to be used for the body area (where the label and avatar\nare) of the chip.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
            "href": "material\/FilterChip\/tooltip.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.FilterChip",
            "params": []
        }
    ]
}