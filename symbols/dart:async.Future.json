{
    "desc": "<p>An object representing a delayed computation.<\/p>\n<p>A <a href=\"dart-async\/Future-class.html\">Future<\/a> is used to represent a potential value, or error,\nthat will be available at some time in the future.\nReceivers of a <a href=\"dart-async\/Future-class.html\">Future<\/a> can register callbacks\nthat handle the value or error once it is available.\nFor example:<\/p>\n<pre class=\"language-dart\"><code>Future&lt;int&gt; future = getFuture();\nfuture.then((value) =&gt; handleValue(value))\n      .catchError((error) =&gt; handleError(error));\n<\/code><\/pre>\n<p>A <a href=\"dart-async\/Future-class.html\">Future<\/a> can be completed in two ways:\nwith a value (\"the future succeeds\")\nor with an error (\"the future fails\").\nUsers can install callbacks for each case.<\/p>\n<p>In some cases we say that a future is completed with another future.\nThis is a short way of stating that the future is completed in the same way,\nwith the same value or error,\nas the other future once that completes.\nWhenever a function in the core library may complete a future\n(for example <a href=\"dart-async\/Completer\/complete.html\">Completer.complete<\/a> or <a href=\"dart-async\/Future\/Future.value.html\">new Future.value<\/a>),\nthen it also accepts another future and does this work for the developer.<\/p>\n<p>The result of registering a pair of callbacks is a new Future (the\n\"successor\") which in turn is completed with the result of invoking the\ncorresponding callback.\nThe successor is completed with an error if the invoked callback throws.\nFor example:<\/p>\n<pre class=\"language-dart\"><code>Future&lt;int&gt; successor = future.then((int value) {\n    \/\/ Invoked when the future is completed with a value.\n    return 42;  \/\/ The successor is completed with the value 42.\n  },\n  onError: (e) {\n    \/\/ Invoked when the future is completed with an error.\n    if (canHandle(e)) {\n      return 499;  \/\/ The successor is completed with the value 499.\n    } else {\n      throw e;  \/\/ The successor is completed with the error e.\n    }\n  });\n<\/code><\/pre>\n<p>If a future does not have a successor when it completes with an error,\nit forwards the error message to the global error-handler.\nThis behavior makes sure that no error is silently dropped.\nHowever, it also means that error handlers should be installed early,\nso that they are present as soon as a future is completed with an error.\nThe following example demonstrates this potential bug:<\/p>\n<pre class=\"language-dart\"><code>var future = getFuture();\nnew Timer(new Duration(milliseconds: 5), () {\n  \/\/ The error-handler is not attached until 5 ms after the future has\n  \/\/ been received. If the future fails before that, the error is\n  \/\/ forwarded to the global error-handler, even though there is code\n  \/\/ (just below) to eventually handle the error.\n  future.then((value) { useValue(value); },\n              onError: (e) { handleError(e); });\n});\n<\/code><\/pre>\n<p>When registering callbacks, it's often more readable to register the two\ncallbacks separately, by first using <a href=\"dart-async\/Future\/then.html\">then<\/a> with one argument\n(the value handler) and using a second <a href=\"dart-async\/Future\/catchError.html\">catchError<\/a> for handling errors.\nEach of these will forward the result that they don't handle\nto their successors, and together they handle both value and error result.\nIt also has the additional benefit of the <a href=\"dart-async\/Future\/catchError.html\">catchError<\/a> handling errors in the\n<a href=\"dart-async\/Future\/then.html\">then<\/a> value callback too.\nUsing sequential handlers instead of parallel ones often leads to code that\nis easier to reason about.\nIt also makes asynchronous code very similar to synchronous code:<\/p>\n<pre class=\"language-dart\"><code>\/\/ Synchronous code.\ntry {\n  int value = foo();\n  return bar(value);\n} catch (e) {\n  return 499;\n}\n<\/code><\/pre>\n<p>Equivalent asynchronous code, based on futures:<\/p>\n<pre class=\"language-dart\"><code>Future&lt;int&gt; future = new Future(foo);  \/\/ Result of foo() as a future.\nfuture.then((int value) =&gt; bar(value))\n      .catchError((e) =&gt; 499);\n<\/code><\/pre>\n<p>Similar to the synchronous code, the error handler (registered with\n<a href=\"dart-async\/Future\/catchError.html\">catchError<\/a>) is handling any errors thrown by either <code>foo<\/code> or <code>bar<\/code>.\nIf the error-handler had been registered as the <code>onError<\/code> parameter of\nthe <code>then<\/code> call, it would not catch errors from the <code>bar<\/code> call.<\/p>\n<p>Futures can have more than one callback-pair registered. Each successor is\ntreated independently and is handled as if it was the only successor.<\/p>\n<p>A future may also fail to ever complete. In that case, no callbacks are\ncalled.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-async\/Future-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:async",
    "name": "dart:async.Future",
    "shortname": "Future",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a future containing the result of calling <code>computation<\/code>\nasynchronously with <a href=\"dart-async\/Timer\/run.html\">Timer.run<\/a>.<\/p>\n<p>If the result of executing <code>computation<\/code> throws, the returned future is\ncompleted with the error.<\/p>\n<p>If the returned value is itself a <a href=\"dart-async\/Future-class.html\">Future<\/a>, completion of\nthe created future will wait until the returned future completes,\nand will then complete with the same result.<\/p>\n<p>If a non-future value is returned, the returned future is completed\nwith that value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Future(FutureOr&lt;T&gt; computation()) {\n  _Future&lt;T&gt; result = new _Future&lt;T&gt;();\n  Timer.run(() {\n    try {\n      result._complete(computation());\n    } catch (e, s) {\n      _completeWithErrorCallback(result, e, s);\n    }\n  });\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/Future.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "computation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:async.FutureOr"
                }
            ]
        },
        {
            "desc": "<p>Returns the result of the first future in <code>futures<\/code> to complete.<\/p>\n<p>The returned future is completed with the result of the first\nfuture in <code>futures<\/code> to report that it is complete,\nwhether it's with a value or an error.\nThe results of all the other futures are discarded.<\/p>\n<p>If <code>futures<\/code> is empty, or if none of its futures complete,\nthe returned future never completes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;T&gt; any&lt;T&gt;(Iterable&lt;Future&lt;T&gt;&gt; futures) {\n  var completer = new Completer&lt;T&gt;.sync();\n  var onValue = (T value) {\n    if (!completer.isCompleted) completer.complete(value);\n  };\n  var onError = (error, StackTrace stack) {\n    if (!completer.isCompleted) completer.completeError(error, stack);\n  };\n  for (var future in futures) {\n    future.then(onValue, onError: onError);\n  }\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/any.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "futures",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:async.Future>"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> containing the result of this future.<\/p>\n<p>The stream will produce single data or error event containing the\ncompletion result of this future, and then it will close with a\ndone event.<\/p>\n<p>If the future never completes, the stream will not produce any events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; asStream();<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/asStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": []
        },
        {
            "desc": "<p>Handles errors emitted by this <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>This is the asynchronous equivalent of a \"catch\" block.<\/p>\n<p>Returns a new <a href=\"dart-async\/Future-class.html\">Future<\/a> that will be completed with either the result of\nthis future or the result of calling the <code>onError<\/code> callback.<\/p>\n<p>If this future completes with a value,\nthe returned future completes with the same value.<\/p>\n<p>If this future completes with an error,\nthen <code>test<\/code> is first called with the error value.<\/p>\n<p>If <code>test<\/code> returns false, the exception is not handled by this <code>catchError<\/code>,\nand the returned future completes with the same error and stack trace\nas this future.<\/p>\n<p>If <code>test<\/code> returns <code>true<\/code>,\n<code>onError<\/code> is called with the error and possibly stack trace,\nand the returned future is completed with the result of this call\nin exactly the same way as for <a href=\"dart-async\/Future\/then.html\">then<\/a>'s <code>onError<\/code>.<\/p>\n<p>If <code>test<\/code> is omitted, it defaults to a function that always returns true.\nThe <code>test<\/code> function should not throw, but if it does, it is handled as\nif the <code>onError<\/code> function had thrown.<\/p>\n<p>Note that futures don't delay reporting of errors until listeners are\nadded. If the first <code>catchError<\/code> (or <code>then<\/code>) call happens after this future\nhas completed with an error then the error is reported as unhandled error.\nSee the description on <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The `Function` below stands for one of two types:\n\/\/ - (dynamic) -&gt; FutureOr&lt;T&gt;\n\/\/ - (dynamic, StackTrace) -&gt; FutureOr&lt;T&gt;\n\/\/ Given that there is a `test` function that is usually used to do an\n\/\/ `isCheck` we should also expect functions that take a specific argument.\n\/\/ Note: making `catchError` return a `Future&lt;T&gt;` in non-strong mode could be\n\/\/ a breaking change.\nFuture&lt;T&gt; catchError(Function onError, {bool test(Object error)});<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/catchError.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "error",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        },
        {
            "desc": "<p>Performs an operation repeatedly until it returns <code>false<\/code>.<\/p>\n<p>The operation, <code>action<\/code>, may be either synchronous or asynchronous.<\/p>\n<p>The operation is called repeatedly as long as it returns either the <a href=\"dart-core\/bool-class.html\">bool<\/a>\nvalue <code>true<\/code> or a <code>Future&lt;bool&gt;<\/code> which completes with the value <code>true<\/code>.<\/p>\n<p>If a call to <code>action<\/code> returns <code>false<\/code> or a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes to\n<code>false<\/code>, iteration ends and the future returned by <a href=\"dart-async\/Future\/doWhile.html\">doWhile<\/a> is completed\nwith a <code>null<\/code> value.<\/p>\n<p>If a call to <code>action<\/code> throws or a future returned by <code>action<\/code> completes\nwith an error, iteration ends and the future returned by <a href=\"dart-async\/Future\/doWhile.html\">doWhile<\/a>\ncompletes with the same error.<\/p>\n<p>Calls to <code>action<\/code> may happen at any time,\nincluding immediately after calling <code>doWhile<\/code>.\nThe only restriction is a new call to <code>action<\/code> won't happen before\nthe previous call has returned, and if it returned a <code>Future&lt;bool&gt;<\/code>, not\nuntil that future has completed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future doWhile(FutureOr&lt;bool&gt; action()) {\n  _Future doneSignal = new _Future();\n  void Function(bool) nextIteration;\n  \/\/ Bind this callback explicitly so that each iteration isn't bound in the\n  \/\/ context of all the previous iterations' callbacks.\n  \/\/ This avoids, e.g., deeply nested stack traces from the stack trace\n  \/\/ package.\n  nextIteration = Zone.current.bindUnaryCallbackGuarded((bool keepGoing) {\n    while (keepGoing) {\n      FutureOr&lt;bool&gt; result;\n      try {\n        result = action();\n      } catch (error, stackTrace) {\n        \/\/ Cannot use _completeWithErrorCallback because it completes\n        \/\/ the future synchronously.\n        _asyncCompleteWithErrorCallback(doneSignal, error, stackTrace);\n        return;\n      }\n      if (result is Future&lt;bool&gt;) {\n        result.then(nextIteration, onError: doneSignal._completeError);\n        return;\n      }\n      keepGoing = result;\n    }\n    doneSignal._complete(null);\n  });\n  nextIteration(true);\n  return doneSignal;\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/doWhile.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "action",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.FutureOr<dart:core.bool>"
                }
            ]
        },
        {
            "desc": "<p>Performs an action for each element of the iterable, in turn.<\/p>\n<p>The <code>action<\/code> may be either synchronous or asynchronous.<\/p>\n<p>Calls <code>action<\/code> with each element in <code>elements<\/code> in order.\nIf the call to <code>action<\/code> returns a <code>Future&lt;T&gt;<\/code>, the iteration waits\nuntil the future is completed before continuing with the next element.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with <code>null<\/code> when all elements have been\nprocessed.<\/p>\n<p>Non-<a href=\"dart-async\/Future-class.html\">Future<\/a> return values, and completion-values of returned <a href=\"dart-async\/Future-class.html\">Future<\/a>s,\nare discarded.<\/p>\n<p>Any error from <code>action<\/code>, synchronous or asynchronous,\nwill stop the iteration and be reported in the returned <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future forEach&lt;T&gt;(Iterable&lt;T&gt; elements, FutureOr action(T element)) {\n  var iterator = elements.iterator;\n  return doWhile(() {\n    if (!iterator.moveNext()) return false;\n    var result = action(iterator.current);\n    if (result is Future) return result.then(_kTrue);\n    return true;\n  });\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/forEach.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "element",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                },
                {
                    "name": "elements",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Register callbacks to be called when this future completes.<\/p>\n<p>When this future completes with a value,\nthe <code>onValue<\/code> callback will be called with that value.\nIf this future is already completed, the callback will not be called\nimmediately, but will be scheduled in a later microtask.<\/p>\n<p>If <code>onError<\/code> is provided, and this future completes with an error,\nthe <code>onError<\/code> callback is called with that error and its stack trace.\nThe <code>onError<\/code> callback must accept either one argument or two arguments\nwhere the latter is a <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a>.\nIf <code>onError<\/code> accepts two arguments,\nit is called with both the error and the stack trace,\notherwise it is called with just the error object.\nThe <code>onError<\/code> callback must return a value or future that can be used\nto complete the returned future, so it must be something assignable to\n<code>FutureOr&lt;R&gt;<\/code>.<\/p>\n<p>Returns a new <a href=\"dart-async\/Future-class.html\">Future<\/a>\nwhich is completed with the result of the call to <code>onValue<\/code>\n(if this future completes with a value)\nor to <code>onError<\/code> (if this future completes with an error).<\/p>\n<p>If the invoked callback throws,\nthe returned future is completed with the thrown error\nand a stack trace for the error.\nIn the case of <code>onError<\/code>,\nif the exception thrown is <code>identical<\/code> to the error argument to <code>onError<\/code>,\nthe throw is considered a rethrow,\nand the original stack trace is used instead.<\/p>\n<p>If the callback returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>,\nthe future returned by <code>then<\/code> will be completed with\nthe same result as the future returned by the callback.<\/p>\n<p>If <code>onError<\/code> is not given, and this future completes with an error,\nthe error is forwarded directly to the returned future.<\/p>\n<p>In most cases, it is more readable to use <a href=\"dart-async\/Future\/catchError.html\">catchError<\/a> separately, possibly\nwith a <code>test<\/code> parameter, instead of handling both value and error in a\nsingle <a href=\"dart-async\/Future\/then.html\">then<\/a> call.<\/p>\n<p>Note that futures don't delay reporting of errors until listeners are\nadded. If the first <code>then<\/code> or <code>catchError<\/code> call happens after this future\nhas completed with an error then the error is reported as unhandled error.\nSee the description on <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;R&gt; then&lt;R&gt;(FutureOr&lt;R&gt; onValue(T value), {Function onError});<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/then.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "onError",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Time-out the future computation after <code>timeLimit<\/code> has passed.<\/p>\n<p>Returns a new future that completes with the same value as this future,\nif this future completes in time.<\/p>\n<p>If this future does not complete before <code>timeLimit<\/code> has passed,\nthe <code>onTimeout<\/code> action is executed instead, and its result (whether it\nreturns or throws) is used as the result of the returned future.\nThe <code>onTimeout<\/code> function must return a <code>T<\/code> or a <code>Future&lt;T&gt;<\/code>.<\/p>\n<p>If <code>onTimeout<\/code> is omitted, a timeout will cause the returned future to\ncomplete with a <a href=\"dart-async\/TimeoutException-class.html\">TimeoutException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; timeout(Duration timeLimit, {FutureOr&lt;T&gt; onTimeout()});<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/timeout.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "onTimeout",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.FutureOr"
                },
                {
                    "name": "timeLimit",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Waits for multiple futures to complete and collects their results.<\/p>\n<p>Returns a future which will complete once all the provided futures\nhave completed, either with their results, or with an error if any\nof the provided futures fail.<\/p>\n<p>The value of the returned future will be a list of all the values that\nwere produced in the order that the futures are provided by iterating\n<code>futures<\/code>.<\/p>\n<p>If any future completes with an error,\nthen the returned future completes with that error.\nIf further futures also complete with errors, those errors are discarded.<\/p>\n<p>If <code>eagerError<\/code> is true, the returned future completes with an error\nimmediately on the first error from one of the futures. Otherwise all\nfutures must complete before the returned future is completed (still with\nthe first error; the remaining errors are silently dropped).<\/p>\n<p>In the case of an error, <code>cleanUp<\/code> (if provided), is invoked on any\nnon-null result of successful futures.\nThis makes it possible to <code>cleanUp<\/code> resources that would otherwise be\nlost (since the returned future does not provide access to these values).\nThe <code>cleanUp<\/code> function is unused if there is no error.<\/p>\n<p>The call to <code>cleanUp<\/code> should not throw. If it does, the error will be an\nuncaught asynchronous error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;List&lt;T&gt;&gt; wait&lt;T&gt;(Iterable&lt;Future&lt;T&gt;&gt; futures,\n    {bool eagerError: false, void cleanUp(T successValue)}) {\n  final _Future&lt;List&lt;T&gt;&gt; result = new _Future&lt;List&lt;T&gt;&gt;();\n  List&lt;T&gt; values; \/\/ Collects the values. Set to null on error.\n  int remaining = 0; \/\/ How many futures are we waiting for.\n  var error; \/\/ The first error from a future.\n  StackTrace stackTrace; \/\/ The stackTrace that came with the error.\n\n  \/\/ Handle an error from any of the futures.\n  \/\/ TODO(jmesserly): use `void` return type once it can be inferred for the\n  \/\/ `then` call below.\n  handleError(theError, StackTrace theStackTrace) {\n    remaining--;\n    if (values != null) {\n      if (cleanUp != null) {\n        for (var value in values) {\n          if (value != null) {\n            \/\/ Ensure errors from cleanUp are uncaught.\n            new Future.sync(() {\n              cleanUp(value);\n            });\n          }\n        }\n      }\n      values = null;\n      if (remaining == 0 || eagerError) {\n        result._completeError(theError, theStackTrace);\n      } else {\n        error = theError;\n        stackTrace = theStackTrace;\n      }\n    } else if (remaining == 0 &amp;&amp; !eagerError) {\n      result._completeError(error, stackTrace);\n    }\n  }\n\n  try {\n    \/\/ As each future completes, put its value into the corresponding\n    \/\/ position in the list of values.\n    for (var future in futures) {\n      int pos = remaining;\n      future.then((T value) {\n        remaining--;\n        if (values != null) {\n          values[pos] = value;\n          if (remaining == 0) {\n            result._completeWithValue(values);\n          }\n        } else {\n          if (cleanUp != null &amp;&amp; value != null) {\n            \/\/ Ensure errors from cleanUp are uncaught.\n            new Future.sync(() {\n              cleanUp(value);\n            });\n          }\n          if (remaining == 0 &amp;&amp; !eagerError) {\n            result._completeError(error, stackTrace);\n          }\n        }\n      }, onError: handleError);\n      \/\/ Increment the 'remaining' after the call to 'then'.\n      \/\/ If that call throws, we don't expect any future callback from\n      \/\/ the future, and we also don't increment remaining.\n      remaining++;\n    }\n    if (remaining == 0) {\n      return new Future.value(const []);\n    }\n    values = new List&lt;T&gt;(remaining);\n  } catch (e, st) {\n    \/\/ The error must have been thrown while iterating over the futures\n    \/\/ list, or while installing a callback handler on the future.\n    if (remaining == 0 || eagerError) {\n      \/\/ Throw a new Future.error.\n      \/\/ Don't just call `result._completeError` since that would propagate\n      \/\/ the error too eagerly, not giving the callers time to install\n      \/\/ error handlers.\n      \/\/ Also, don't use `_asyncCompleteError` since that one doesn't give\n      \/\/ zones the chance to intercept the error.\n      return new Future.error(e, st);\n    } else {\n      \/\/ Don't allocate a list for values, thus indicating that there was an\n      \/\/ error.\n      \/\/ Set error to the caught exception.\n      error = e;\n      stackTrace = st;\n    }\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/wait.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.List>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "eagerError",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "futures",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:async.Future>"
                },
                {
                    "name": "successValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Registers a function to be called when this future completes.<\/p>\n<p>The <code>action<\/code> function is called when this future completes, whether it\ndoes so with a value or with an error.<\/p>\n<p>This is the asynchronous equivalent of a \"finally\" block.<\/p>\n<p>The future returned by this call, <code>f<\/code>, will complete the same way\nas this future unless an error occurs in the <code>action<\/code> call, or in\na <a href=\"dart-async\/Future-class.html\">Future<\/a> returned by the <code>action<\/code> call. If the call to <code>action<\/code>\ndoes not return a future, its return value is ignored.<\/p>\n<p>If the call to <code>action<\/code> throws, then <code>f<\/code> is completed with the\nthrown error.<\/p>\n<p>If the call to <code>action<\/code> returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>, <code>f2<\/code>, then completion of\n<code>f<\/code> is delayed until <code>f2<\/code> completes. If <code>f2<\/code> completes with\nan error, that will be the result of <code>f<\/code> too. The value of <code>f2<\/code> is always\nignored.<\/p>\n<p>This method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>Future&lt;T&gt; whenComplete(action()) {\n  return this.then((v) {\n    var f2 = action();\n    if (f2 is Future) return f2.then((_) =&gt; v);\n    return v\n  }, onError: (e) {\n    var f2 = action();\n    if (f2 is Future) return f2.then((_) { throw e; });\n    throw e;\n  });\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; whenComplete(FutureOr action());<\/code><\/pre>\n    ",
            "href": "dart-async\/Future\/whenComplete.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.Future",
            "params": [
                {
                    "name": "action",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.FutureOr"
                }
            ]
        }
    ],
    "props": []
}