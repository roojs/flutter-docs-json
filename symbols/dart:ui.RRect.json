{
    "desc": "<p>An immutable rounded rectangle with the custom radii for all four corners.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/RRect-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.RRect",
    "shortname": "RRect",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Whether the point specified by the given offset (which is assumed to be\nrelative to the origin) lies inside the rounded rectangle.<\/p>\n<p>This method may allocate (and cache) a copy of the object with normalized\nradii the first time it is called on a particular <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> instance. When\nusing this method, prefer to reuse existing <a href=\"dart-ui\/RRect-class.html\">RRect<\/a>s rather than\nrecreating the object each time.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset point) {\n  if (point.dx &lt; left || point.dx &gt;= right || point.dy &lt; top || point.dy &gt;= bottom)\n    return false; \/\/ outside bounding box\n\n  _scaleRadii();\n\n  double x;\n  double y;\n  double radiusX;\n  double radiusY;\n  \/\/ check whether point is in one of the rounded corner areas\n  \/\/ x, y -&gt; translate to ellipse center\n  if (point.dx &lt; left + _scaled.tlRadiusX &amp;&amp;\n      point.dy &lt; top + _scaled.tlRadiusY) {\n    x = point.dx - left - _scaled.tlRadiusX;\n    y = point.dy - top - _scaled.tlRadiusY;\n    radiusX = _scaled.tlRadiusX;\n    radiusY = _scaled.tlRadiusY;\n  } else if (point.dx &gt; right - _scaled.trRadiusX &amp;&amp;\n             point.dy &lt; top + _scaled.trRadiusY) {\n    x = point.dx - right + _scaled.trRadiusX;\n    y = point.dy - top - _scaled.trRadiusY;\n    radiusX = _scaled.trRadiusX;\n    radiusY = _scaled.trRadiusY;\n  } else if (point.dx &gt; right - _scaled.brRadiusX &amp;&amp;\n             point.dy &gt; bottom - _scaled.brRadiusY) {\n    x = point.dx - right + _scaled.brRadiusX;\n    y = point.dy - bottom + _scaled.brRadiusY;\n    radiusX = _scaled.brRadiusX;\n    radiusY = _scaled.brRadiusY;\n  } else if (point.dx &lt; left + _scaled.blRadiusX &amp;&amp;\n             point.dy &gt; bottom - _scaled.blRadiusY) {\n    x = point.dx - left - _scaled.blRadiusX;\n    y = point.dy - bottom + _scaled.blRadiusY;\n    radiusX = _scaled.blRadiusX;\n    radiusY = _scaled.blRadiusY;\n  } else {\n    return true; \/\/ inside and not within the rounded corner area\n  }\n\n  x = x \/ radiusX;\n  y = y \/ radiusY;\n  \/\/ check if the point is outside the unit circle\n  if (x * x + y * y &gt; 1.0)\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/RRect\/contains.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "contains",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.RRect",
            "params": [
                {
                    "name": "point",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> with edges and radii moved inwards by the given delta.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect deflate(double delta) =&gt; inflate(-delta);<\/code><\/pre>\n    ",
            "href": "dart-ui\/RRect\/deflate.html",
            "isDeprecated": false,
            "type": "dart:ui.RRect",
            "name": "deflate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.RRect",
            "params": [
                {
                    "name": "delta",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> with edges and radii moved outwards by the given\ndelta.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect inflate(double delta) {\n  return new RRect.fromLTRBAndCorners(\n    _value[0] - delta,\n    _value[1] - delta,\n    _value[2] + delta,\n    _value[3] + delta,\n    topLeft: new Radius.elliptical(\n      _value[4] + delta,\n      _value[5] + delta\n    ),\n    topRight: new Radius.elliptical(\n      _value[6] + delta,\n      _value[7] + delta\n    ),\n    bottomRight: new Radius.elliptical(\n      _value[8] + delta,\n      _value[9] + delta\n    ),\n    bottomLeft: new Radius.elliptical(\n      _value[10] + delta,\n      _value[11] + delta\n    )\n  );\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/RRect\/inflate.html",
            "isDeprecated": false,
            "type": "dart:ui.RRect",
            "name": "inflate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.RRect",
            "params": [
                {
                    "name": "delta",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two rounded rectangles.<\/p>\n<p>If either is null, this function substitutes <a href=\"dart-ui\/RRect\/zero.html\">RRect.zero<\/a> instead.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RRect lerp(RRect a, RRect b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null) {\n    return new RRect._fromList(&lt;double&gt;[\n      b.left * t,\n      b.top * t,\n      b.right * t,\n      b.bottom * t,\n      b.tlRadiusX * t,\n      b.tlRadiusY * t,\n      b.trRadiusX * t,\n      b.trRadiusY * t,\n      b.brRadiusX * t,\n      b.brRadiusY * t,\n      b.blRadiusX * t,\n      b.blRadiusY * t,\n    ]);\n  }\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new RRect._fromList(&lt;double&gt;[\n      a.left * k,\n      a.top * k,\n      a.right * k,\n      a.bottom * k,\n      a.tlRadiusX * k,\n      a.tlRadiusY * k,\n      a.trRadiusX * k,\n      a.trRadiusY * k,\n      a.brRadiusX * k,\n      a.brRadiusY * k,\n      a.blRadiusX * k,\n      a.blRadiusY * k,\n    ]);\n  }\n  return new RRect._fromList(&lt;double&gt;[\n    lerpDouble(a.left, b.left, t),\n    lerpDouble(a.top, b.top, t),\n    lerpDouble(a.right, b.right, t),\n    lerpDouble(a.bottom, b.bottom, t),\n    lerpDouble(a.tlRadiusX, b.tlRadiusX, t),\n    lerpDouble(a.tlRadiusY, b.tlRadiusY, t),\n    lerpDouble(a.trRadiusX, b.trRadiusX, t),\n    lerpDouble(a.trRadiusY, b.trRadiusY, t),\n    lerpDouble(a.brRadiusX, b.brRadiusX, t),\n    lerpDouble(a.brRadiusY, b.brRadiusY, t),\n    lerpDouble(a.blRadiusX, b.blRadiusX, t),\n    lerpDouble(a.blRadiusY, b.blRadiusY, t),\n  ]);\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/RRect\/lerp.html",
            "isDeprecated": false,
            "type": "dart:ui.RRect",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.RRect",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.RRect"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.RRect"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> translated by the given offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect shift(Offset offset) {\n  return new RRect.fromLTRBAndCorners(\n    _value[0] + offset.dx,\n    _value[1] + offset.dy,\n    _value[2] + offset.dx,\n    _value[3] + offset.dy,\n    topLeft: new Radius.elliptical(\n      _value[4],\n      _value[5]\n    ),\n    topRight: new Radius.elliptical(\n      _value[6],\n      _value[7]\n    ),\n    bottomRight: new Radius.elliptical(\n      _value[8],\n      _value[9]\n    ),\n    bottomLeft: new Radius.elliptical(\n      _value[10],\n      _value[11]\n    )\n  );\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/RRect\/shift.html",
            "isDeprecated": false,
            "type": "dart:ui.RRect",
            "name": "shift",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.RRect",
            "params": [
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String rect = '${left.toStringAsFixed(1)}, '\n                      '${top.toStringAsFixed(1)}, '\n                      '${right.toStringAsFixed(1)}, '\n                      '${bottom.toStringAsFixed(1)}';\n  if (tlRadius == trRadius &amp;&amp;\n      trRadius == brRadius &amp;&amp;\n      brRadius == blRadius) {\n    if (tlRadius.x == tlRadius.y)\n      return 'RRect.fromLTRBR($rect, ${tlRadius.x.toStringAsFixed(1)})';\n    return 'RRect.fromLTRBXY($rect, ${tlRadius.x.toStringAsFixed(1)}, ${tlRadius.y.toStringAsFixed(1)})';\n  }\n  return 'RRect.fromLTRBAndCorners('\n           '$rect, '\n           'topLeft: $tlRadius, '\n           'topRight: $trRadius, '\n           'bottomRight: $brRadius, '\n           'bottomLeft: $blRadius'\n         ')';\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/RRect\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The bottom-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get blRadius =&gt; new Radius.elliptical(_value[10], _value[11]);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/blRadius.html",
            "name": "blRadius",
            "isDeprecated": false,
            "type": "dart:ui.Radius",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The bottom-left horizontal radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get blRadiusX =&gt; _value[10];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/blRadiusX.html",
            "name": "blRadiusX",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The bottom-left vertical radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get blRadiusY =&gt; _value[11];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/blRadiusY.html",
            "name": "blRadiusY",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The offset of the bottom edge of this rectangle from the y axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get bottom =&gt; _value[3];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/bottom.html",
            "name": "bottom",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The bottom-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get brRadius =&gt; new Radius.elliptical(_value[8], _value[9]);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/brRadius.html",
            "name": "brRadius",
            "isDeprecated": false,
            "type": "dart:ui.Radius",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The bottom-right horizontal radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get brRadiusX =&gt; _value[8];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/brRadiusX.html",
            "name": "brRadiusX",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The bottom-right vertical radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get brRadiusY =&gt; _value[9];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/brRadiusY.html",
            "name": "brRadiusY",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The offset to the point halfway between the left and right and the top and\nbottom edges of this rectangle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get center =&gt; new Offset(left + width \/ 2.0, top + height \/ 2.0);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/center.html",
            "name": "center",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/RRect\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/RRect\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashList(_value);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The distance between the top and bottom edges of this rectangle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height =&gt; bottom - top;<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/height.html",
            "name": "height",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>Whether this rounded rectangle would draw as a circle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCircle =&gt; width == height &amp;&amp; isEllipse;<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/isCircle.html",
            "name": "isCircle",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>Whether this rounded rectangle has no side with a straight section.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEllipse {\n  return tlRadius == trRadius\n      &amp;&amp; trRadius == brRadius\n      &amp;&amp; brRadius == blRadius\n      &amp;&amp; width &lt;= 2.0 * tlRadiusX\n      &amp;&amp; height &lt;= 2.0 * tlRadiusY;\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/isEllipse.html",
            "name": "isEllipse",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>Whether this rounded rectangle encloses a non-zero area.\nNegative areas are considered empty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; left &gt;= right || top &gt;= bottom;<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>Whether all coordinates of this rounded rectangle are finite.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite =&gt; left.isFinite &amp;&amp; top.isFinite &amp;&amp; right.isFinite &amp;&amp; bottom.isFinite;<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/isFinite.html",
            "name": "isFinite",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>Whether this rounded rectangle is a simple rectangle with zero\ncorner radii.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRect {\n  return (tlRadiusX == 0.0 || tlRadiusY == 0.0) &amp;&amp;\n         (trRadiusX == 0.0 || trRadiusY == 0.0) &amp;&amp;\n         (blRadiusX == 0.0 || blRadiusY == 0.0) &amp;&amp;\n         (brRadiusX == 0.0 || brRadiusY == 0.0);\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/isRect.html",
            "name": "isRect",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>Whether this rounded rectangle has a side with no straight section.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isStadium {\n  return tlRadius == trRadius\n      &amp;&amp; trRadius == brRadius\n      &amp;&amp; brRadius == blRadius\n      &amp;&amp; (width &lt;= 2.0 * tlRadiusX || height &lt;= 2.0 * tlRadiusY);\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/isStadium.html",
            "name": "isStadium",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The offset of the left edge of this rectangle from the x axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get left =&gt; _value[0];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/left.html",
            "name": "left",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The greater of the magnitudes of the <a href=\"dart-ui\/RRect\/width.html\">width<\/a> and the <a href=\"dart-ui\/RRect\/height.html\">height<\/a> of this\nrounded rectangle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get longestSide =&gt; math.max(width.abs(), height.abs());<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/longestSide.html",
            "name": "longestSide",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The rectangle that would be formed using the axis-aligned intersection of\nthe sides of the rectangle, i.e., the rectangle formed from the\ninner-most centers of the ellipses that form the corners. This is the\nintersection of the <a href=\"dart-ui\/RRect\/wideMiddleRect.html\">wideMiddleRect<\/a> and the <a href=\"dart-ui\/RRect\/tallMiddleRect.html\">tallMiddleRect<\/a>. If any of\nthe intersections are void, the resulting <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> will have negative width\nor height.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get middleRect {\n  final double leftRadius = math.max(blRadiusX, tlRadiusX);\n  final double topRadius = math.max(tlRadiusY, trRadiusY);\n  final double rightRadius = math.max(trRadiusX, brRadiusX);\n  final double bottomRadius = math.max(brRadiusY, blRadiusY);\n  return new Rect.fromLTRB(\n    left + leftRadius,\n    top + topRadius,\n    right - rightRadius,\n    bottom - bottomRadius\n  );\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/middleRect.html",
            "name": "middleRect",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The bounding box of this rounded rectangle (the rectangle with no rounded corners).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get outerRect =&gt; new Rect.fromLTRB(left, top, right, bottom);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/outerRect.html",
            "name": "outerRect",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The offset of the right edge of this rectangle from the x axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get right =&gt; _value[2];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/right.html",
            "name": "right",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The non-rounded rectangle that is constrained by the smaller of the two\ndiagonals, with each diagonal traveling through the middle of the curve\ncorners. The middle of a corner is the intersection of the curve with its\nrespective quadrant bisector.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get safeInnerRect {\n  const double kInsetFactor = 0.29289321881; \/\/ 1-cos(pi\/4)\n\n  final double leftRadius = math.max(blRadiusX, tlRadiusX);\n  final double topRadius = math.max(tlRadiusY, trRadiusY);\n  final double rightRadius = math.max(trRadiusX, brRadiusX);\n  final double bottomRadius = math.max(brRadiusY, blRadiusY);\n\n  return new Rect.fromLTRB(\n    left + leftRadius * kInsetFactor,\n    top + topRadius * kInsetFactor,\n    right - rightRadius * kInsetFactor,\n    bottom - bottomRadius * kInsetFactor\n  );\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/safeInnerRect.html",
            "name": "safeInnerRect",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The lesser of the magnitudes of the <a href=\"dart-ui\/RRect\/width.html\">width<\/a> and the <a href=\"dart-ui\/RRect\/height.html\">height<\/a> of this\nrounded rectangle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get shortestSide =&gt; math.min(width.abs(), height.abs());<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/shortestSide.html",
            "name": "shortestSide",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The biggest rectangle that is entirely inside the rounded rectangle and\nhas the full height of the rounded rectangle. If the rounded rectangle\ndoes not have an axis-aligned intersection of its top and bottom side, the\nresulting <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> will have negative width or height.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get tallMiddleRect {\n  final double leftRadius = math.max(blRadiusX, tlRadiusX);\n  final double rightRadius = math.max(trRadiusX, brRadiusX);\n  return new Rect.fromLTRB(\n    left + leftRadius,\n    top,\n    right - rightRadius,\n    bottom\n  );\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/tallMiddleRect.html",
            "name": "tallMiddleRect",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The top-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get tlRadius =&gt; new Radius.elliptical(_value[4], _value[5]);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/tlRadius.html",
            "name": "tlRadius",
            "isDeprecated": false,
            "type": "dart:ui.Radius",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The top-left horizontal radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get tlRadiusX =&gt; _value[4];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/tlRadiusX.html",
            "name": "tlRadiusX",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The top-left vertical radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get tlRadiusY =&gt; _value[5];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/tlRadiusY.html",
            "name": "tlRadiusY",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The offset of the top edge of this rectangle from the y axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get top =&gt; _value[1];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/top.html",
            "name": "top",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The top-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get trRadius =&gt; new Radius.elliptical(_value[6], _value[7]);<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/trRadius.html",
            "name": "trRadius",
            "isDeprecated": false,
            "type": "dart:ui.Radius",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The top-right horizontal radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get trRadiusX =&gt; _value[6];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/trRadiusX.html",
            "name": "trRadiusX",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The top-right vertical radius.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get trRadiusY =&gt; _value[7];<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/trRadiusY.html",
            "name": "trRadiusY",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The biggest rectangle that is entirely inside the rounded rectangle and\nhas the full width of the rounded rectangle. If the rounded rectangle does\nnot have an axis-aligned intersection of its left and right side, the\nresulting <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> will have negative width or height.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get wideMiddleRect {\n  final double topRadius = math.max(tlRadiusY, trRadiusY);\n  final double bottomRadius = math.max(brRadiusY, blRadiusY);\n  return new Rect.fromLTRB(\n    left,\n    top + topRadius,\n    right,\n    bottom - bottomRadius\n  );\n}<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/wideMiddleRect.html",
            "name": "wideMiddleRect",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>The distance between the left and right edges of this rectangle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width =&gt; right - left;<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/width.html",
            "name": "width",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        },
        {
            "desc": "<p>A rounded rectangle with all the values set to zero.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final RRect zero = new RRect._()\n\n<\/code><\/pre>\n        ",
            "href": "dart-ui\/RRect\/zero.html",
            "name": "zero",
            "isDeprecated": false,
            "type": "dart:ui.RRect",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:ui.RRect",
            "params": []
        }
    ]
}