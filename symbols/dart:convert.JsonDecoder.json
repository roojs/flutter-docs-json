{
    "name": "dart:convert.JsonDecoder",
    "extends": [
        "dart:core.Object",
        "dart:core.String",
        "dart:convert.Converter",
        "dart:core.Object",
        "dart:core.String",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "JsonDecoder",
            "type": "",
            "desc": "<p>Constructs a new JsonDecoder.<\/p>\n<p>The <code>reviver<\/code> may be <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonDecoder",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "key",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/JsonDecoder\/JsonDecoder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const JsonDecoder([reviver(Object key, Object value)]) : _reviver = reviver;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bind",
            "type": "dart:async.Stream<dart:core.Object>",
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonDecoder",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonDecoder\/bind.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;Object&gt; bind(Stream&lt;String&gt; stream) =&gt; super.bind(stream);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Stream",
                "dart:core.Object"
            ]
        },
        {
            "name": "convert",
            "type": "",
            "desc": "<p>Converts the given JSON-string <code>input<\/code> to its corresponding object.<\/p>\n<p>Parsed JSON values are of the types <a href=\"dart-core\/num-class.html\">num<\/a>, <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-core\/bool-class.html\">bool<\/a>, <a href=\"dart-core\/Null-class.html\">Null<\/a>,\n<a href=\"dart-core\/List-class.html\">List<\/a>s of parsed JSON values or <a href=\"dart-core\/Map-class.html\">Map<\/a>s from <a href=\"dart-core\/String-class.html\">String<\/a> to parsed JSON\nvalues.<\/p>\n<p>If <code>this<\/code> was initialized with a reviver, then the parsing operation\ninvokes the reviver on every object or list property that has been parsed.\nThe arguments are the property name (<a href=\"dart-core\/String-class.html\">String<\/a>) or list index (<a href=\"dart-core\/int-class.html\">int<\/a>), and\nthe value is the parsed value. The return value of the reviver is used as\nthe value of that property instead the parsed value.<\/p>\n<p>Throws <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the input is not valid JSON text.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonDecoder",
            "sig": "",
            "params": [
                {
                    "name": "input",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonDecoder\/convert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic convert(String input) =&gt; _parseJson(input, _reviver);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "startChunkedConversion",
            "type": "dart:convert.StringConversionSink",
            "desc": "<p>Starts a conversion from a chunked JSON string to its corresponding object.<\/p>\n<p>The output <code>sink<\/code> receives exactly one decoded element through <code>add<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonDecoder",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonDecoder\/startChunkedConversion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external StringConversionSink startChunkedConversion(Sink&lt;Object&gt; sink);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/JsonDecoder-class.html",
    "desc": "<p>This class parses JSON strings and builds the corresponding objects.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "JsonDecoder"
}