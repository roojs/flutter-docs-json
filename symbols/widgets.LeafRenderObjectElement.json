{
    "name": "widgets.LeafRenderObjectElement",
    "extends": [
        "widgets.RenderObjectElement",
        "widgets.Element",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "LeafRenderObjectElement",
            "type": "",
            "desc": "<p>Creates an element that uses the given widget as its configuration.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.LeafRenderObjectElement",
            "sig": "",
            "params": [
                {
                    "name": "widget",
                    "type": "widgets.LeafRenderObjectWidget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/LeafRenderObjectElement\/LeafRenderObjectElement.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LeafRenderObjectElement(LeafRenderObjectWidget widget) : super(widget);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugDescribeChildren",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTree\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/LeafRenderObjectElement\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.LeafRenderObjectElement",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/LeafRenderObjectElement\/debugDescribeChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  return widget.debugDescribeChildren();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "foundation.DiagnosticsNode"
            ]
        },
        {
            "name": "forgetChild",
            "type": "",
            "desc": "<p>Remove the given child from the element's child list, in preparation for\nthe child being reused elsewhere in the element tree.<\/p>\n<p>This updates the child model such that, e.g., <a href=\"widgets\/Element\/visitChildren.html\">visitChildren<\/a> does not\nwalk that child anymore.<\/p>\n<p>The element will still have a valid parent when this is called. After this\nis called, <a href=\"widgets\/Element\/deactivateChild.html\">deactivateChild<\/a> is called to sever the link to this object.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.LeafRenderObjectElement",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "widgets.Element",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/LeafRenderObjectElement\/forgetChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid forgetChild(Element child) {\n  assert(false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "insertChildRenderObject",
            "type": "",
            "desc": "<p>Insert the given child into <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a> at the given slot.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.LeafRenderObjectElement",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "slot",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/LeafRenderObjectElement\/insertChildRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid insertChildRenderObject(RenderObject child, dynamic slot) {\n  assert(false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "moveChildRenderObject",
            "type": "",
            "desc": "<p>Move the given child to the given slot.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.LeafRenderObjectElement",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "slot",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/LeafRenderObjectElement\/moveChildRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid moveChildRenderObject(RenderObject child, dynamic slot) {\n  assert(false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeChildRenderObject",
            "type": "",
            "desc": "<p>Remove the given child from <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a>.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/RenderObjectElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.LeafRenderObjectElement",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/LeafRenderObjectElement\/removeChildRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeChildRenderObject(RenderObject child) {\n  assert(false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/LeafRenderObjectElement-class.html",
    "desc": "<p>An <a href=\"widgets\/Element-class.html\">Element<\/a> that uses a <a href=\"widgets\/LeafRenderObjectWidget-class.html\">LeafRenderObjectWidget<\/a> as its configuration.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LeafRenderObjectElement"
}