{
    "name": "dart:typed_data.UnmodifiableByteDataView",
    "extends": [],
    "memberOf": "dart:typed_data",
    "events": [],
    "methods": [
        {
            "name": "UnmodifiableByteDataView",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "data",
                    "type": "dart:typed_data.ByteData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/UnmodifiableByteDataView.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnmodifiableByteDataView(ByteData data) : _data = data;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getFloat32",
            "type": "dart:core.double",
            "desc": "<p>Returns the floating point number represented by the four bytes at\nthe specified <code>byteOffset<\/code> in this object, in IEEE 754\nsingle-precision binary floating-point format (binary32).<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 4<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getFloat32.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getFloat32(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getFloat32(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getFloat64",
            "type": "dart:core.double",
            "desc": "<p>Returns the floating point number represented by the eight bytes at\nthe specified <code>byteOffset<\/code> in this object, in IEEE 754\ndouble-precision binary floating-point format (binary64).<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 8<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getFloat64.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double getFloat64(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getFloat64(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getInt8",
            "type": "dart:core.int",
            "desc": "<p>Returns the (possibly negative) integer represented by the byte at the\nspecified <code>byteOffset<\/code> in this object, in two's complement binary\nrepresentation.<\/p>\n<p>The return value will be between -128 and 127, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\ngreater than or equal to the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getInt8.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getInt8(int byteOffset) =&gt; _data.getInt8(byteOffset);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getInt16",
            "type": "dart:core.int",
            "desc": "<p>Returns the (possibly negative) integer represented by the two bytes at\nthe specified <code>byteOffset<\/code> in this object, in two's complement binary\nform.<\/p>\n<p>The return value will be between -2<sup>15<\/sup> and 2<sup>15<\/sup> - 1,\ninclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 2<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getInt16.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getInt16(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getInt16(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getInt32",
            "type": "dart:core.int",
            "desc": "<p>Returns the (possibly negative) integer represented by the four bytes at\nthe specified <code>byteOffset<\/code> in this object, in two's complement binary\nform.<\/p>\n<p>The return value will be between -2<sup>31<\/sup> and 2<sup>31<\/sup> - 1,\ninclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 4<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getInt32.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getInt32(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getInt32(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getInt64",
            "type": "dart:core.int",
            "desc": "<p>Returns the (possibly negative) integer represented by the eight bytes at\nthe specified <code>byteOffset<\/code> in this object, in two's complement binary\nform.<\/p>\n<p>The return value will be between -2<sup>63<\/sup> and 2<sup>63<\/sup> - 1,\ninclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 8<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getInt64.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getInt64(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getInt64(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getUint8",
            "type": "dart:core.int",
            "desc": "<p>Returns the positive integer represented by the byte at the specified\n<code>byteOffset<\/code> in this object, in unsigned binary form.<\/p>\n<p>The return value will be between 0 and 255, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\ngreater than or equal to the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getUint8.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint8(int byteOffset) =&gt; _data.getUint8(byteOffset);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getUint16",
            "type": "dart:core.int",
            "desc": "<p>Returns the positive integer represented by the two bytes starting\nat the specified <code>byteOffset<\/code> in this object, in unsigned binary\nform.<\/p>\n<p>The return value will be between 0 and  2<sup>16<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 2<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getUint16.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint16(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getUint16(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getUint32",
            "type": "dart:core.int",
            "desc": "<p>Returns the positive integer represented by the four bytes starting\nat the specified <code>byteOffset<\/code> in this object, in unsigned binary\nform.<\/p>\n<p>The return value will be between 0 and  2<sup>32<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 4<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getUint32.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint32(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getUint32(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getUint64",
            "type": "dart:core.int",
            "desc": "<p>Returns the positive integer represented by the eight bytes starting\nat the specified <code>byteOffset<\/code> in this object, in unsigned binary\nform.<\/p>\n<p>The return value will be between 0 and  2<sup>64<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 8<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/getUint64.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getUint64(int byteOffset, [Endian endian = Endian.big]) =&gt;\n    _data.getUint64(byteOffset, endian);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setFloat32",
            "type": "",
            "desc": "<p>Sets the four bytes starting at the specified <code>byteOffset<\/code> in this\nobject to the IEEE 754 single-precision binary floating-point\n(binary32) representation of the specified <code>value<\/code>.<\/p>\n<p><strong>Note that this method can lose precision.<\/strong> The input <code>value<\/code> is\na 64-bit floating point value, which will be converted to 32-bit\nfloating point value by IEEE 754 rounding rules before it is stored.\nIf <code>value<\/code> cannot be represented exactly as a binary32, it will be\nconverted to the nearest binary32 value.  If two binary32 values are\nequally close, the one whose least significant bit is zero will be used.\nNote that finite (but large) values can be converted to infinity, and\nsmall non-zero values can be converted to zero.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 4<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setFloat32.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFloat32(int byteOffset, double value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setFloat64",
            "type": "",
            "desc": "<p>Sets the eight bytes starting at the specified <code>byteOffset<\/code> in this\nobject to the IEEE 754 double-precision binary floating-point\n(binary64) representation of the specified <code>value<\/code>.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 8<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setFloat64.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFloat64(int byteOffset, double value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setInt8",
            "type": "",
            "desc": "<p>Sets the byte at the specified <code>byteOffset<\/code> in this object to the\ntwo's complement binary representation of the specified <code>value<\/code>, which\nmust fit in a single byte.<\/p>\n<p>In other words, <code>value<\/code> must be between -128 and 127, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\ngreater than or equal to the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setInt8.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setInt8(int byteOffset, int value) =&gt; _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setInt16",
            "type": "",
            "desc": "<p>Sets the two bytes starting at the specified <code>byteOffset<\/code> in this\nobject to the two's complement binary representation of the specified\n<code>value<\/code>, which must fit in two bytes.<\/p>\n<p>In other words, <code>value<\/code> must lie\nbetween -2<sup>15<\/sup> and 2<sup>15<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 2<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setInt16.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setInt16(int byteOffset, int value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setInt32",
            "type": "",
            "desc": "<p>Sets the four bytes starting at the specified <code>byteOffset<\/code> in this\nobject to the two's complement binary representation of the specified\n<code>value<\/code>, which must fit in four bytes.<\/p>\n<p>In other words, <code>value<\/code> must lie\nbetween -2<sup>31<\/sup> and 2<sup>31<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 4<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setInt32.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setInt32(int byteOffset, int value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setInt64",
            "type": "",
            "desc": "<p>Sets the eight bytes starting at the specified <code>byteOffset<\/code> in this\nobject to the two's complement binary representation of the specified\n<code>value<\/code>, which must fit in eight bytes.<\/p>\n<p>In other words, <code>value<\/code> must lie\nbetween -2<sup>63<\/sup> and 2<sup>63<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 8<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setInt64.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setInt64(int byteOffset, int value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUint8",
            "type": "",
            "desc": "<p>Sets the byte at the specified <code>byteOffset<\/code> in this object to the\nunsigned binary representation of the specified <code>value<\/code>, which must fit\nin a single byte.<\/p>\n<p>In other words, <code>value<\/code> must be between 0 and 255, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative,\nor greater than or equal to the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setUint8.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUint8(int byteOffset, int value) =&gt; _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUint16",
            "type": "",
            "desc": "<p>Sets the two bytes starting at the specified <code>byteOffset<\/code> in this object\nto the unsigned binary representation of the specified <code>value<\/code>,\nwhich must fit in two bytes.<\/p>\n<p>In other words, <code>value<\/code> must be between\n0 and 2<sup>16<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 2<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setUint16.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUint16(int byteOffset, int value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUint32",
            "type": "",
            "desc": "<p>Sets the four bytes starting at the specified <code>byteOffset<\/code> in this object\nto the unsigned binary representation of the specified <code>value<\/code>,\nwhich must fit in four bytes.<\/p>\n<p>In other words, <code>value<\/code> must be between\n0 and 2<sup>32<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 4<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setUint32.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUint32(int byteOffset, int value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setUint64",
            "type": "",
            "desc": "<p>Sets the eight bytes starting at the specified <code>byteOffset<\/code> in this object\nto the unsigned binary representation of the specified <code>value<\/code>,\nwhich must fit in eight bytes.<\/p>\n<p>In other words, <code>value<\/code> must be between\n0 and 2<sup>64<\/sup> - 1, inclusive.<\/p>\n<p>Throws <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>byteOffset<\/code> is negative, or\n<code>byteOffset + 8<\/code> is greater than the length of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "sig": "",
            "params": [
                {
                    "name": "byteOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endian",
                    "type": "dart:typed_data.Endian",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/setUint64.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setUint64(int byteOffset, int value, [Endian endian = Endian.big]) =&gt;\n    _unsupported();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "buffer",
            "type": "dart:typed_data.ByteBuffer",
            "types": [],
            "desc": "<p>Returns the byte buffer associated with this object.<\/p>\n        ",
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "isConstant": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/buffer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ByteBuffer get buffer =&gt; new UnmodifiableByteBufferView(_data.buffer);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "elementSizeInBytes",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of bytes in the representation of each element in this\nlist.<\/p>\n        ",
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "isConstant": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/elementSizeInBytes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elementSizeInBytes =&gt; _data.elementSizeInBytes;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "lengthInBytes",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the length of this view, in bytes.<\/p>\n        ",
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "isConstant": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/lengthInBytes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get lengthInBytes =&gt; _data.lengthInBytes;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "offsetInBytes",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the offset in bytes into the underlying byte buffer of this view.<\/p>\n        ",
            "memberOf": "dart:typed_data.UnmodifiableByteDataView",
            "isConstant": false,
            "href": "dart-typed_data\/UnmodifiableByteDataView\/offsetInBytes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get offsetInBytes =&gt; _data.offsetInBytes;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-typed_data\/UnmodifiableByteDataView-class.html",
    "desc": "<p>A read-only view of a <a href=\"dart-typed_data\/ByteData-class.html\">ByteData<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "UnmodifiableByteDataView"
}