{
    "name": "quiver.pattern.Glob",
    "extends": [],
    "memberOf": "quiver.pattern",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"quiver.pattern\/Glob\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.pattern.Glob",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "quiver.pattern\/Glob\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) =&gt; other is Glob &amp;&amp; pattern == other.pattern;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Glob",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "quiver.pattern.Glob",
            "sig": "",
            "params": [
                {
                    "name": "pattern",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "quiver.pattern\/Glob\/Glob.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Glob(String pattern)\n    : pattern = pattern,\n      regex = _regexpFromGlobPattern(pattern);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "allMatches",
            "type": "dart:core.Iterable<dart:core.Match>",
            "desc": "<p>Match this pattern against the string repeatedly.<\/p>\n<p>If <code>start<\/code> is provided, matching will start at that index.<\/p>\n<p>The returned iterable lazily computes all the non-overlapping matches\nof the pattern on the string, ordered by start index.\nIf a user only requests the first\nmatch, this function should not compute all possible matches.<\/p>\n<p>The matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.<\/p>\n<p>If the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.pattern.Glob",
            "sig": "",
            "params": [
                {
                    "name": "str",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.pattern\/Glob\/allMatches.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Match&gt; allMatches(String str, [int start = 0]) =&gt;\n    regex.allMatches(str, start);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Iterable",
                "dart:core.Match"
            ]
        },
        {
            "name": "hasMatch",
            "type": "dart:core.bool",
            "desc": "",
            "static": false,
            "memberOf": "quiver.pattern.Glob",
            "sig": "",
            "params": [
                {
                    "name": "str",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.pattern\/Glob\/hasMatch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasMatch(String str) =&gt; regex.hasMatch(str);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "matchAsPrefix",
            "type": "dart:core.Match",
            "desc": "<p>Match this pattern against the start of <code>string<\/code>.<\/p>\n<p>If <code>start<\/code> is provided, it must be an integer in the range <code>0<\/code> ..\n<code>string.length<\/code>. In that case, this patten is tested against the\nstring at the <code>start<\/code> position. That is, a <a href=\"dart-core\/Match-class.html\">Match<\/a> is returned if the\npattern can match a part of the string starting from position <code>start<\/code>.\nReturns <code>null<\/code> if the pattern doesn't match.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.pattern.Glob",
            "sig": "",
            "params": [
                {
                    "name": "string",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "quiver.pattern\/Glob\/matchAsPrefix.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Match matchAsPrefix(String string, [int start = 0]) =&gt;\n    regex.matchAsPrefix(string, start);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "quiver.pattern.Glob",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "quiver.pattern\/Glob\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; pattern;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"quiver.pattern\/Glob\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"quiver.pattern\/Glob\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"quiver.pattern\/Glob\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"quiver.pattern\/Glob\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"quiver.pattern\/Glob\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"quiver.pattern\/Glob\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "quiver.pattern.Glob",
            "isConstant": false,
            "href": "quiver.pattern\/Glob\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; pattern.hashCode;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pattern",
            "type": "dart:core.String",
            "types": [],
            "desc": "",
            "memberOf": "quiver.pattern.Glob",
            "isConstant": false,
            "href": "quiver.pattern\/Glob\/pattern.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String pattern\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "regex",
            "type": "dart:core.RegExp",
            "types": [],
            "desc": "",
            "memberOf": "quiver.pattern.Glob",
            "isConstant": false,
            "href": "quiver.pattern\/Glob\/regex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RegExp regex\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "quiver.pattern\/Glob-class.html",
    "desc": "<p>A <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a> that matches against filesystem path-like strings with\nwildcards.<\/p>\n<p>The pattern matches strings as follows:<\/p>\n<ul>\n<li>The whole string must match, not a substring<\/li>\n<li>Any non wildcard is matched as a literal<\/li>\n<li>'*' matches one or more characters except '\/'<\/li>\n<li>'?' matches exactly one character except '\/'<\/li>\n<li>'**' matches one or more characters including '\/'<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Glob"
}