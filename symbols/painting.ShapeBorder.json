{
    "name": "painting.ShapeBorder",
    "extends": [],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator +",
            "type": "painting.ShapeBorder",
            "desc": "<p>Creates a new border consisting of the two borders on either side of the\noperator.<\/p>\n<p>If the borders belong to classes that know how to add themselves, then\nthis results in a new border that represents the intelligent addition of\nthose two borders (see <a href=\"painting\/ShapeBorder\/add.html\">add<\/a>). Otherwise, an object is returned that\nmerely paints the two borders sequentially, with the left hand operand on\nthe inside and the right hand operand on the outside.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ShapeBorder operator +(ShapeBorder other) {\n  return add(other) ?? other.add(this, reversed: true) ?? _CompoundBorder(&lt;ShapeBorder&gt;[other, this]);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ShapeBorder",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "painting\/ShapeBorder\/ShapeBorder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ShapeBorder();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "painting.ShapeBorder",
            "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reversed",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nShapeBorder add(ShapeBorder other, { bool reversed = false }) =&gt; null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getInnerPath",
            "type": "dart:ui.Path",
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/ShapeBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/ShapeBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/getInnerPath.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path getInnerPath(Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getOuterPath",
            "type": "dart:ui.Path",
            "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/ShapeBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/ShapeBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/getOuterPath.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path getOuterPath(Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates between two <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>s.<\/p>\n<p>This defers to <code>b<\/code>'s <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a> function if <code>b<\/code> is not null. If <code>b<\/code> is\nnull or if its <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a> returns null, it uses <code>a<\/code>'s <a href=\"painting\/ShapeBorder\/lerpFrom.html\">lerpFrom<\/a>\nfunction instead. If both return null, it returns <code>a<\/code> before <code>t=0.5<\/code>\nand <code>b<\/code> after <code>t=0.5<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ShapeBorder lerp(ShapeBorder a, ShapeBorder b, double t) {\n  assert(t != null);\n  ShapeBorder result;\n  if (b != null)\n    result = b.lerpFrom(a, t);\n  if (result == null &amp;&amp; a != null)\n    result = a.lerpTo(b, t);\n  return result ?? (t &lt; 0.5 ? a : b);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpFrom",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/ShapeBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/lerpFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a == null)\n    return scale(t);\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpTo",
            "type": "painting.ShapeBorder",
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/ShapeBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/lerpTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b == null)\n    return scale(1.0 - t);\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "paint",
            "type": "",
            "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/paint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "scale",
            "type": "painting.ShapeBorder",
            "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/ShapeBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ShapeBorder scale(double t);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ShapeBorder",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/ShapeBorder\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType()';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "dimensions",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/ShapeBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/ShapeBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
            "memberOf": "painting.ShapeBorder",
            "isConstant": false,
            "href": "painting\/ShapeBorder\/dimensions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get dimensions;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "material.InputBorder",
        "material.OutlineInputBorder",
        "material.ShapeBorderTween",
        "material.UnderlineInputBorder",
        "painting.BeveledRectangleBorder",
        "painting.Border",
        "painting.BorderDirectional",
        "painting.BoxBorder",
        "painting.CircleBorder",
        "painting.ContinuousRectangleBorder",
        "painting.RoundedRectangleBorder",
        "painting.StadiumBorder"
    ],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/ShapeBorder-class.html",
    "desc": "<p>Base class for shape outlines.<\/p>\n<p>This class handles how to add multiple borders together. Subclasses define\nvarious shapes, like circles (<a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), rounded rectangles\n(<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>), continuous rectangles\n(<a href=\"painting\/ContinuousRectangleBorder-class.html\">ContinuousRectangleBorder<\/a>), or beveled rectangles\n(<a href=\"painting\/BeveledRectangleBorder-class.html\">BeveledRectangleBorder<\/a>).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>, which can be used with <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> to show a shape.<\/li>\n<li>\n<a href=\"material\/Material-class.html\">Material<\/a> (and many other widgets in the Material library), which takes\na <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> to define its shape.<\/li>\n<li>\n<a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a>, which describes a shape with a hole in it.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ShapeBorder"
}