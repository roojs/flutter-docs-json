{
    "desc": "<p>A <a href=\"dart-core\/Set-class.html\">Set<\/a> of items stored in a binary tree according to <a href=\"quiver.collection\/TreeSet\/comparator.html\">comparator<\/a>.\nSupports bidirectional iteration.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "quiver.collection\/TreeSet-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "quiver.collection",
    "name": "quiver.collection.TreeSet",
    "shortname": "TreeSet",
    "extends": [
        "dart:collection.IterableBase",
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "quiver.collection.AvlTreeSet"
    ],
    "events": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Comparator&lt;V&gt; comparator\n\n<\/code><\/pre>\n        ",
            "href": "quiver.collection\/TreeSet\/comparator.html",
            "isDeprecated": false,
            "type": "dart:core.Comparator",
            "name": "comparator",
            "memberOf": "quiver.collection.TreeSet",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Create a new <a href=\"quiver.collection\/TreeSet-class.html\">TreeSet<\/a> with an ordering defined by <code>comparator<\/code> or the\ndefault <code>(a, b) =&gt; a.compareTo(b)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory TreeSet({Comparator&lt;V&gt; comparator}) {\n  comparator ??= (a, b) =&gt; (a as dynamic).compareTo(b);\n  return new AvlTreeSet(comparator: comparator);\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/TreeSet\/TreeSet.html",
            "isDeprecated": false,
            "type": "",
            "name": "TreeSet",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": [
                {
                    "name": "comparator",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Comparator"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"dart-core\/Set\/add.html\">add<\/a> or <a href=\"dart-core\/Set\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ ignore: override_on_non_overriding_method\nSet&lt;T&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "quiver.collection\/TreeSet\/cast.html",
            "isDeprecated": false,
            "type": "dart:core.Set",
            "name": "cast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/BidirectionalIterator-class.html\">BidirectionalIterator<\/a> that starts at <code>anchor<\/code>.  By default,\nthe iterator includes the anchor with the first movement; set <code>inclusive<\/code>\nto false if you want to exclude the anchor. Set <code>reversed<\/code> to true to\nchange the direction of of moveNext and movePrevious.<\/p>\n<p>Note: This iterator allows you to walk the entire set. It does not\npresent a subview.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; fromIterator(V anchor,\n    {bool reversed: false, bool inclusive: true});<\/code><\/pre>\n    ",
            "href": "quiver.collection\/TreeSet\/fromIterator.html",
            "isDeprecated": false,
            "type": "dart:core.BidirectionalIterator",
            "name": "fromIterator",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": [
                {
                    "name": "anchor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                },
                {
                    "name": "inclusive",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "reversed",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Search the tree for the matching <code>object<\/code> or the <code>nearestOption<\/code>\nif missing.  See <a href=\"quiver.collection\/TreeSearch-class.html\">TreeSearch<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V nearest(V object, {TreeSearch nearestOption: TreeSearch.NEAREST});<\/code><\/pre>\n    ",
            "href": "quiver.collection\/TreeSet\/nearest.html",
            "isDeprecated": false,
            "type": "<V>",
            "name": "nearest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": [
                {
                    "name": "nearestOption",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "quiver.collection.TreeSearch"
                },
                {
                    "name": "object",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ ignore: override_on_non_overriding_method\nSet&lt;T&gt; retype&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "quiver.collection\/TreeSet\/retype.html",
            "isDeprecated": false,
            "type": "dart:core.Set",
            "name": "retype",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns an <a href=\"dart-core\/BidirectionalIterator-class.html\">BidirectionalIterator<\/a> that iterates over this tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get iterator;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/TreeSet\/iterator.html",
            "name": "iterator",
            "isDeprecated": false,
            "type": "dart:core.BidirectionalIterator",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in <a href=\"quiver.collection\/TreeSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/TreeSet\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": []
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/BidirectionalIterator-class.html\">BidirectionalIterator<\/a> that iterates over this tree, in\nreverse.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get reverseIterator;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/TreeSet\/reverseIterator.html",
            "name": "reverseIterator",
            "isDeprecated": false,
            "type": "dart:core.BidirectionalIterator",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.TreeSet",
            "params": []
        }
    ]
}