{
    "desc": "<p>A Stream that will emit the same values as the stream returned by <code>future<\/code>\nonce <code>future<\/code> completes.<\/p>\n<p>If <code>future<\/code> completes to an error, the return value will emit that error\nand then close.<\/p>\n<p>If <code>broadcast<\/code> is true, this will be a broadcast stream. This assumes that\nthe stream returned by <code>future<\/code> will be a broadcast stream as well.\n<code>broadcast<\/code> defaults to false.<\/p>\n<h1 id=\"example\">Example<\/h1>\n<p>This class is useful when you need to retreive some object via a <code>Future<\/code>,\nthen return a <code>Stream<\/code> from that object:<\/p>\n<pre class=\"language-dart\"><code>var futureOfStream = getResource().then((resource) =&gt; resource.stream);\nreturn new FutureStream(futureOfStream);\n<\/code><\/pre>\n    ",
    "dtype": "class",
    "example": "",
    "href": "quiver.async\/FutureStream-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "quiver.async",
    "name": "quiver.async.FutureStream",
    "shortname": "FutureStream",
    "extends": [
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FutureStream(Future&lt;Stream&lt;T&gt;&gt; future, {bool broadcast: false}) {\n  _future = future.then(_identity, onError: (e, stackTrace) {\n    \/\/ Since [controller] is synchronous, it's likely that emitting an error\n    \/\/ will cause it to be cancelled before we call close.\n    if (_controller != null) {\n      _controller.addError(e, stackTrace);\n      _controller.close();\n    }\n    _controller = null;\n  });\n\n  if (broadcast == true) {\n    _controller = new StreamController.broadcast(\n        sync: true, onListen: _onListen, onCancel: _onCancel);\n  } else {\n    _controller = new StreamController(\n        sync: true, onListen: _onListen, onCancel: _onCancel);\n  }\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/FutureStream\/FutureStream.html",
            "isDeprecated": "0",
            "type": "",
            "name": "FutureStream",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "quiver.async.FutureStream",
            "params": [
                {
                    "name": "broadcast",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "future",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:async.Future<dart:async.Stream>"
                }
            ]
        },
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;T&gt; listen(void onData(T event),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _controller.stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/FutureStream\/listen.html",
            "isDeprecated": "0",
            "type": "dart:async.StreamSubscription",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.FutureStream",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                },
                {
                    "name": "onDone",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this stream is a broadcast stream.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isBroadcast =&gt; _controller.stream.isBroadcast;<\/code><\/pre>\n        ",
            "href": "quiver.async\/FutureStream\/isBroadcast.html",
            "name": "isBroadcast",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "quiver.async.FutureStream",
            "params": []
        }
    ]
}