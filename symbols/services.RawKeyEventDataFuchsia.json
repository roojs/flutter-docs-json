{
    "desc": "<p>Platform-specific key event data for Fuchsia.<\/p>\n<p>This object contains information about key events obtained from Fuchsia's\n<code>KeyData<\/code> interface.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "services\/RawKeyEventDataFuchsia-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "services",
    "name": "services.RawKeyEventDataFuchsia",
    "shortname": "RawKeyEventDataFuchsia",
    "extends": [
        "services.RawKeyEventData",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a key event data structure specific for Fuchsia.<\/p>\n<p>The <code>hidUsage<\/code>, <code>codePoint<\/code>, and <code>modifiers<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEventDataFuchsia({\n  this.hidUsage = 0,\n  this.codePoint = 0,\n  this.modifiers = 0,\n}) : assert(hidUsage != null),\n     assert(codePoint != null),\n     assert(modifiers != null);<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/RawKeyEventDataFuchsia.html",
            "isDeprecated": false,
            "type": "",
            "name": "RawKeyEventDataFuchsia",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": [
                {
                    "name": "codePoint",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "hidUsage",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "modifiers",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a <a href=\"services\/KeyboardSide-class.html\">KeyboardSide<\/a> enum value that describes which side or sides of\nthe given keyboard modifier key were pressed at the time of this event.<\/p>\n<p>If the modifier key wasn't pressed at the time of this event, returns\nnull. If the given key only appears in one place on the keyboard, returns\n<a href=\"services\/KeyboardSide-class.html\">KeyboardSide.all<\/a> if pressed. Never returns <a href=\"services\/KeyboardSide-class.html\">KeyboardSide.any<\/a>, because\nthat doesn't make sense in this context.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nKeyboardSide getModifierSide(ModifierKey key) {\n  KeyboardSide findSide(int leftMask, int rightMask, int combinedMask) {\n    final int combined = modifiers &amp; combinedMask;\n    if (combined == leftMask) {\n      return KeyboardSide.left;\n    } else if (combined == rightMask) {\n      return KeyboardSide.right;\n    } else if (combined == combinedMask) {\n      return KeyboardSide.all;\n    }\n    return null;\n  }\n\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return findSide(modifierLeftControl, modifierRightControl, modifierControl);\n    case ModifierKey.shiftModifier:\n      return findSide(modifierLeftShift, modifierRightShift, modifierShift);\n    case ModifierKey.altModifier:\n      return findSide(modifierLeftAlt, modifierRightAlt, modifierAlt);\n    case ModifierKey.metaModifier:\n      return findSide(modifierLeftMeta, modifierRightMeta, modifierMeta);\n    case ModifierKey.capsLockModifier:\n      return (modifiers &amp; modifierCapsLock == 0) ? null : KeyboardSide.all;\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      \/\/ Fuchsia doesn't support these modifiers, so they can't be pressed.\n      return null;\n  }\n\n  assert(false, 'Not handling $key type properly.');\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/getModifierSide.html",
            "isDeprecated": false,
            "type": "services.KeyboardSide",
            "name": "getModifierSide",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.ModifierKey"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the given <a href=\"services\/ModifierKey-class.html\">ModifierKey<\/a> was pressed at the time of this\nevent.<\/p>\n<p>If <code>side<\/code> is specified, then this restricts its check to the specified\nside of the keyboard. Defaults to checking for the key being down on\neither side of the keyboard. If there is only one instance of the key on\nthe keyboard, then <code>side<\/code> is ignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool isModifierPressed(ModifierKey key, { KeyboardSide side = KeyboardSide.any }) {\n  assert(side != null);\n  switch (key) {\n    case ModifierKey.controlModifier:\n      return _isLeftRightModifierPressed(side, modifierControl, modifierLeftControl, modifierRightControl);\n    case ModifierKey.shiftModifier:\n      return _isLeftRightModifierPressed(side, modifierShift, modifierLeftShift, modifierRightShift);\n    case ModifierKey.altModifier:\n      return _isLeftRightModifierPressed(side, modifierAlt, modifierLeftAlt, modifierRightAlt);\n    case ModifierKey.metaModifier:\n      return _isLeftRightModifierPressed(side, modifierMeta, modifierLeftMeta, modifierRightMeta);\n    case ModifierKey.capsLockModifier:\n      return modifiers &amp; modifierCapsLock != 0;\n    case ModifierKey.numLockModifier:\n    case ModifierKey.scrollLockModifier:\n    case ModifierKey.functionModifier:\n    case ModifierKey.symbolModifier:\n      \/\/ Fuchsia doesn't have masks for these keys (yet).\n      return false;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/isModifierPressed.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isModifierPressed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.ModifierKey"
                },
                {
                    "name": "side",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.KeyboardSide"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(hidUsage: $hidUsage, codePoint: $codePoint, modifiers: $modifiers, '\n      'modifiers down: $modifiersPressed)';\n}<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The Unicode code point represented by the key event, if any.<\/p>\n<p>If there is no Unicode code point, this value is zero.<\/p>\n<p>Dead keys are represented as Unicode combining characters.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int codePoint\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataFuchsia\/codePoint.html",
            "name": "codePoint",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>The USB HID usage.<\/p>\n<p>See <a href=\"http:\/\/www.usb.org\/developers\/hidpage\/Hut1_12v2.pdf\">www.usb.org\/developers\/hidpage\/Hut1_12v2.pdf<\/a> for more\ninformation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int hidUsage\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataFuchsia\/hidUsage.html",
            "name": "hidUsage",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>Returns the Unicode string representing the label on this key.<\/p>\n<p>Do not use the <a href=\"services\/RawKeyEventDataFuchsia\/keyLabel.html\">keyLabel<\/a> to compose a text string: it will be missing\nspecial processing for Unicode strings for combining characters and other\nspecial characters, and the effects of modifiers.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are composing text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get keyLabel =&gt; codePoint == 0 ? null : String.fromCharCode(codePoint);<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataFuchsia\/keyLabel.html",
            "name": "keyLabel",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/physicalKey.html\">physicalKey<\/a> for the location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/logicalKey.html\">RawKeyEvent.logicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLogicalKeyboardKey get logicalKey {\n  \/\/ If the key has a printable representation, then make a logical key based\n  \/\/ on that.\n  if (codePoint != 0) {\n    return LogicalKeyboardKey(\n      LogicalKeyboardKey.unicodePlane | codePoint &amp; LogicalKeyboardKey.valueMask,\n      keyLabel: keyLabel,\n      debugName: kReleaseMode ? null : 'Key $keyLabel',\n    );\n  }\n\n  \/\/ Look to see if the hidUsage is one we know about and have a mapping for.\n  LogicalKeyboardKey newKey = kFuchsiaToLogicalKey[hidUsage | LogicalKeyboardKey.hidPlane];\n  if (newKey != null) {\n    return newKey;\n  }\n\n  \/\/ This is a non-printable key that we don't know about, so we mint a new\n  \/\/ code with the autogenerated bit set.\n  const int fuchsiaKeyIdPlane = 0x00300000000;\n  newKey ??= LogicalKeyboardKey(\n    fuchsiaKeyIdPlane | hidUsage | LogicalKeyboardKey.autogeneratedMask,\n    debugName: kReleaseMode ? null : 'Ephemeral Fuchsia key code $hidUsage',\n  );\n  return newKey;\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataFuchsia\/logicalKey.html",
            "name": "logicalKey",
            "isDeprecated": false,
            "type": "services.LogicalKeyboardKey",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe ALT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierAlt = modifierLeftAlt | modifierRightAlt\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierAlt-constant.html",
            "name": "modifierAlt",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the CAPS\nLOCK modifier key is on.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierCapsLock = 0x1\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierCapsLock-constant.html",
            "name": "modifierCapsLock",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe CTRL modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierControl = modifierLeftControl | modifierRightControl\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierControl-constant.html",
            "name": "modifierControl",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftAlt = 0x20\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierLeftAlt-constant.html",
            "name": "modifierLeftAlt",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftControl = 0x8\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierLeftControl-constant.html",
            "name": "modifierLeftControl",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nMETA modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftMeta = 0x80\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierLeftMeta-constant.html",
            "name": "modifierLeftMeta",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the left\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierLeftShift = 0x2\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierLeftShift-constant.html",
            "name": "modifierLeftShift",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe META modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierMeta = modifierLeftMeta | modifierRightMeta\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierMeta-constant.html",
            "name": "modifierMeta",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field indicates that no modifier keys are pressed if it\nequals this value.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierNone = 0x0\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierNone-constant.html",
            "name": "modifierNone",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nALT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightAlt = 0x40\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierRightAlt-constant.html",
            "name": "modifierRightAlt",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nCTRL modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightControl = 0x10\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierRightControl-constant.html",
            "name": "modifierRightControl",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nMETA modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightMeta = 0x100\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierRightMeta-constant.html",
            "name": "modifierRightMeta",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether the right\nSHIFT modifier key is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierRightShift = 0x4\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierRightShift-constant.html",
            "name": "modifierRightShift",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>This mask is used to check the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field to test whether one of\nthe SHIFT modifier keys is pressed.<\/p>\n<p>Use this value if you need to decode the <a href=\"services\/RawKeyEventDataFuchsia\/modifiers.html\">modifiers<\/a> field yourself, but\nit's much easier to use <a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a> if you just want to know if\na modifier is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modifierShift = modifierLeftShift | modifierRightShift\n\n<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEventDataFuchsia\/modifierShift-constant.html",
            "name": "modifierShift",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>The modifiers that were present when the key event occurred.<\/p>\n<p>See <a href=\"https:\/\/fuchsia.googlesource.com\/garnet\/+\/master\/public\/fidl\/fuchsia.ui.input\/input_event_constants.fidl\">fuchsia.googlesource.com\/garnet\/+\/master\/public\/fidl\/fuchsia.ui.input\/input_event_constants.fidl<\/a>\nfor the numerical values of the modifiers. Many of these are also\nreplicated as static constants in this class.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventData\/modifiersPressed.html\">modifiersPressed<\/a>, which returns a Map of currently pressed modifiers\nand their keyboard side.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/isModifierPressed.html\">isModifierPressed<\/a>, to see if a specific modifier is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isControlPressed.html\">isControlPressed<\/a>, to see if a CTRL key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isShiftPressed.html\">isShiftPressed<\/a>, to see if a SHIFT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isAltPressed.html\">isAltPressed<\/a>, to see if an ALT key is pressed.<\/li>\n<li>\n<a href=\"services\/RawKeyEventData\/isMetaPressed.html\">isMetaPressed<\/a>, to see if a META key is pressed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int modifiers\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataFuchsia\/modifiers.html",
            "name": "modifiers",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the physical location of this key on a\nQWERTY keyboard.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEventDataFuchsia\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/logicalKey.html\">logicalKey<\/a> for the non-location-specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEventDataFuchsia\/physicalKey.html\">RawKeyEvent.physicalKey<\/a>, where this value is available on the event.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPhysicalKeyboardKey get physicalKey =&gt; kFuchsiaToPhysicalKey[hidUsage] ?? PhysicalKeyboardKey.none;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEventDataFuchsia\/physicalKey.html",
            "name": "physicalKey",
            "isDeprecated": false,
            "type": "services.PhysicalKeyboardKey",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEventDataFuchsia",
            "params": []
        }
    ]
}