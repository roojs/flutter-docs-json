{
    "desc": "<p>A list optimized for containment queries.<\/p>\n<p>Consider using an <a href=\"foundation\/ObserverList-class.html\">ObserverList<\/a> instead of a <a href=\"dart-core\/List-class.html\">List<\/a> when the number of\n<a href=\"foundation\/ObserverList\/contains.html\">contains<\/a> calls dominates the number of <a href=\"foundation\/ObserverList\/add.html\">add<\/a> and <a href=\"foundation\/ObserverList\/remove.html\">remove<\/a> calls.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "foundation\/ObserverList-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "foundation",
    "name": "foundation.ObserverList",
    "shortname": "ObserverList",
    "extends": [
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "foundation\/ObserverList\/ObserverList.html",
            "isDeprecated": false,
            "type": "",
            "name": "ObserverList",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.ObserverList",
            "params": []
        },
        {
            "desc": "<p>Adds an item to the end of this list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(T item) {\n  _isDirty = true;\n  _list.add(item);\n}<\/code><\/pre>\n    ",
            "href": "foundation\/ObserverList\/add.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.ObserverList",
            "params": [
                {
                    "name": "item",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool contains(Object element) {\n  if (_list.length &lt; 3)\n    return _list.contains(element);\n\n  if (_isDirty) {\n    if (_set == null) {\n      _set = HashSet&lt;T&gt;.from(_list);\n    } else {\n      _set.clear();\n      _set.addAll(_list);\n    }\n    _isDirty = false;\n  }\n\n  return _set.contains(element);\n}<\/code><\/pre>\n    ",
            "href": "foundation\/ObserverList\/contains.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "contains",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.ObserverList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes an item from the list.<\/p>\n<p>This is O(N) in the number of items in the list.<\/p>\n<p>Returns whether the item was present in the list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(T item) {\n  _isDirty = true;\n  return _list.remove(item);\n}<\/code><\/pre>\n    ",
            "href": "foundation\/ObserverList\/remove.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.ObserverList",
            "params": [
                {
                    "name": "item",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isEmpty =&gt; _list.isEmpty;<\/code><\/pre>\n        ",
            "href": "foundation\/ObserverList\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.ObserverList",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isNotEmpty =&gt; _list.isNotEmpty;<\/code><\/pre>\n        ",
            "href": "foundation\/ObserverList\/isNotEmpty.html",
            "name": "isNotEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.ObserverList",
            "params": []
        },
        {
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterator&lt;T&gt; get iterator =&gt; _list.iterator;<\/code><\/pre>\n        ",
            "href": "foundation\/ObserverList\/iterator.html",
            "name": "iterator",
            "isDeprecated": false,
            "type": "dart:core.Iterator",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.ObserverList",
            "params": []
        }
    ]
}