{
    "desc": "<p>The result of a computation.<\/p>\n<p>Capturing a result (either a returned value or a thrown error) means\nconverting it into a <a href=\"package-async_async\/Result-class.html\">Result<\/a> - either a <a href=\"package-async_async\/ValueResult-class.html\">ValueResult<\/a> or an <a href=\"package-async_async\/ErrorResult-class.html\">ErrorResult<\/a>.<\/p>\n<p>This value can release itself by writing itself either to a <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a> or a\n<a href=\"dart-async\/Completer-class.html\">Completer<\/a>, or by becoming a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>A <a href=\"dart-async\/Future-class.html\">Future<\/a> represents a potential result, one that might not have been\ncomputed yet, and a <a href=\"package-async_async\/Result-class.html\">Result<\/a> is always a completed and available result.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/Result-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.Result",
    "shortname": "Result",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <code>Result<\/code> with the result of calling <code>computation<\/code>.<\/p>\n<p>This generates either a <a href=\"package-async_async\/ValueResult-class.html\">ValueResult<\/a> with the value returned by\ncalling <code>computation<\/code>, or an <a href=\"package-async_async\/ErrorResult-class.html\">ErrorResult<\/a> with an error thrown by\nthe call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Result(T computation()) {\n  try {\n    return new ValueResult&lt;T&gt;(computation());\n  } catch (e, s) {\n    return new ErrorResult(e, s);\n  }\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/Result.html",
            "isDeprecated": false,
            "type": "",
            "name": "Result",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "computation",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Adds this result to an <a href=\"dart-async\/EventSink-class.html\">EventSink<\/a>.<\/p>\n<p>Calls the sink's <code>add<\/code> or <code>addError<\/code> method as appropriate.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTo(EventSink&lt;T&gt; sink);<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/addTo.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "sink",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.EventSink"
                }
            ]
        },
        {
            "desc": "<p>Captures the result of a future into a <code>Result<\/code> future.<\/p>\n<p>The resulting future will never have an error.\nErrors have been converted to an <a href=\"package-async_async\/ErrorResult-class.html\">ErrorResult<\/a> value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;Result&lt;T&gt;&gt; capture&lt;T&gt;(Future&lt;T&gt; future) {\n  return future.then((value) =&gt; new ValueResult(value),\n      onError: (error, stackTrace) =&gt; new ErrorResult(error, stackTrace));\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/capture.html",
            "isDeprecated": false,
            "type": "dart:async.Future<async.Result>",
            "name": "capture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "future",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Captures each future in <code>elements<\/code>,<\/p>\n<p>Returns a (future of) a list of results for each element in <code>elements<\/code>,\nin iteration order.\nEach future in <code>elements<\/code> is <a href=\"package-async_async\/Result\/capture.html\">capture<\/a>d and each non-future is\nwrapped as a <a href=\"package-async_async\/Result\/Result.value.html\">Result.value<\/a>.\nThe returned future will never have an error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;List&lt;Result&lt;T&gt;&gt;&gt; captureAll&lt;T&gt;(Iterable&lt;FutureOr&lt;T&gt;&gt; elements) {\n  var results = &lt;Result&lt;T&gt;&gt;[];\n  int pending = 0;\n  Completer&lt;List&lt;Result&lt;T&gt;&gt;&gt; completer;\n  for (var element in elements) {\n    if (element is Future&lt;T&gt;) {\n      int i = results.length;\n      results.add(null);\n      pending++;\n      Result.capture&lt;T&gt;(element).then((result) {\n        results[i] = result;\n        if (--pending == 0) {\n          completer.complete(results);\n        }\n      });\n    } else {\n      results.add(new Result&lt;T&gt;.value(element));\n    }\n  }\n  if (pending == 0) {\n    return new Future&lt;List&lt;Result&lt;T&gt;&gt;&gt;.value(results);\n  }\n  completer = new Completer&lt;List&lt;Result&lt;T&gt;&gt;&gt;();\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/captureAll.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.List<async.Result>>",
            "name": "captureAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "elements",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:async.FutureOr>"
                }
            ]
        },
        {
            "desc": "<p>Captures the events of the returned sink into results on <code>sink<\/code>.<\/p>\n<p>Data and error events added to the returned sink are captured into\n<a href=\"package-async_async\/Result-class.html\">Result<\/a> values and added as data events on the provided <code>sink<\/code>.\nNo error events are ever added to <code>sink<\/code>.<\/p>\n<p>When the returned sink is closed, so is <code>sink<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EventSink&lt;T&gt; captureSink&lt;T&gt;(EventSink&lt;Result&lt;T&gt;&gt; sink) =&gt;\n    new CaptureSink&lt;T&gt;(sink);<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/captureSink.html",
            "isDeprecated": false,
            "type": "dart:async.EventSink",
            "name": "captureSink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "sink",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.EventSink<async.Result>"
                }
            ]
        },
        {
            "desc": "<p>Captures the results of a stream into a stream of <a href=\"package-async_async\/Result-class.html\">Result<\/a> values.<\/p>\n<p>The returned stream will not have any error events.\nErrors from the source stream have been converted to <a href=\"package-async_async\/ErrorResult-class.html\">ErrorResult<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Stream&lt;Result&lt;T&gt;&gt; captureStream&lt;T&gt;(Stream&lt;T&gt; source) =&gt;\n    source.transform(new CaptureStreamTransformer&lt;T&gt;());<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/captureStream.html",
            "isDeprecated": false,
            "type": "dart:async.Stream<async.Result>",
            "name": "captureStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "source",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Completes a completer with this result.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void complete(Completer&lt;T&gt; completer);<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/complete.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "complete",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "completer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Completer"
                }
            ]
        },
        {
            "desc": "<p>Converts a result of a result to a single result.<\/p>\n<p>If the result is an error, or it is a <code>Result<\/code> value\nwhich is then an error, then a result with that error is returned.\nOtherwise both levels of results are value results, and a single\nresult with the value is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Result&lt;T&gt; flatten&lt;T&gt;(Result&lt;Result&lt;T&gt;&gt; result) {\n  if (result.isValue) return result.asValue.value;\n  return result.asError;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/flatten.html",
            "isDeprecated": false,
            "type": "async.Result",
            "name": "flatten",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "result",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "async.Result<async.Result>"
                }
            ]
        },
        {
            "desc": "<p>Converts a sequence of results to a result of a list.<\/p>\n<p>Returns either a list of values if <code>results<\/code> doesn't contain any errors,\nor the first error result in <code>results<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Result&lt;List&lt;T&gt;&gt; flattenAll&lt;T&gt;(Iterable&lt;Result&lt;T&gt;&gt; results) {\n  var values = &lt;T&gt;[];\n  for (var result in results) {\n    if (result.isValue) {\n      values.add(result.asValue.value);\n    } else {\n      return result.asError;\n    }\n  }\n  return new Result&lt;List&lt;T&gt;&gt;.value(values);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/flattenAll.html",
            "isDeprecated": false,
            "type": "async.Result<dart:core.List>",
            "name": "flattenAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "results",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<async.Result>"
                }
            ]
        },
        {
            "desc": "<p>Releases the result of a captured future.<\/p>\n<p>Converts the <a href=\"package-async_async\/Result-class.html\">Result<\/a> value of the given <code>future<\/code> to a value or error\ncompletion of the returned future.<\/p>\n<p>If <code>future<\/code> completes with an error, the returned future completes with\nthe same error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;T&gt; release&lt;T&gt;(Future&lt;Result&lt;T&gt;&gt; future) =&gt;\n    future.then&lt;T&gt;((result) =&gt; result.asFuture);<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/release.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "release",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "future",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Future<async.Result>"
                }
            ]
        },
        {
            "desc": "<p>Releases results added to the returned sink as data and errors on <code>sink<\/code>.<\/p>\n<p>A <a href=\"package-async_async\/Result-class.html\">Result<\/a> added to the returned sink is added as a data or error event\non <code>sink<\/code>. Errors added to the returned sink are forwarded directly to\n<code>sink<\/code> and so is the <a href=\"dart-async\/EventSink\/close.html\">EventSink.close<\/a> calls.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EventSink&lt;Result&lt;T&gt;&gt; releaseSink&lt;T&gt;(EventSink&lt;T&gt; sink) =&gt;\n    new ReleaseSink&lt;T&gt;(sink);<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/releaseSink.html",
            "isDeprecated": false,
            "type": "dart:async.EventSink<async.Result>",
            "name": "releaseSink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "sink",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.EventSink"
                }
            ]
        },
        {
            "desc": "<p>Releases a stream of <code>result<\/code> values into a stream of the results.<\/p>\n<p><code>Result<\/code> values of the source stream become value or error events in\nthe returned stream as appropriate.\nErrors from the source stream become errors in the returned stream.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Stream&lt;T&gt; releaseStream&lt;T&gt;(Stream&lt;Result&lt;T&gt;&gt; source) =&gt;\n    source.transform(new ReleaseStreamTransformer&lt;T&gt;());<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/releaseStream.html",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "name": "releaseStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.Result",
            "params": [
                {
                    "name": "source",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream<async.Result>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>If this is an error result, returns itself.<\/p>\n<p>Otherwise returns <code>null<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ErrorResult get asError;<\/code><\/pre>\n        ",
            "href": "package-async_async\/Result\/asError.html",
            "name": "asError",
            "isDeprecated": false,
            "type": "async.ErrorResult",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>A future that has been completed with this result as a value or an error.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; get asFuture;<\/code><\/pre>\n        ",
            "href": "package-async_async\/Result\/asFuture.html",
            "name": "asFuture",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>If this is a value result, returns itself.<\/p>\n<p>Otherwise returns <code>null<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueResult&lt;T&gt; get asValue;<\/code><\/pre>\n        ",
            "href": "package-async_async\/Result\/asValue.html",
            "name": "asValue",
            "isDeprecated": false,
            "type": "async.ValueResult",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>A sink transformer that captures events into <a href=\"package-async_async\/Result-class.html\">Result<\/a>s.<\/p>\n<p>The result of the transformation is a sink that only forwards <a href=\"package-async_async\/Result-class.html\">Result<\/a>\nvalues and no error events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">captureSinkTransformer =\nconst StreamSinkTransformer&lt;Object, Result&lt;Object&gt;&gt;.fromStreamTransformer(\n    const CaptureStreamTransformer&lt;Object&gt;())\n\n<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/captureSinkTransformer-constant.html",
            "name": "captureSinkTransformer",
            "isDeprecated": false,
            "type": "async.StreamSinkTransformer<dart:core.Object<async.Result<dart:core.Object>>>",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>A stream transformer that captures a stream of events into <a href=\"package-async_async\/Result-class.html\">Result<\/a>s.<\/p>\n<p>The result of the transformation is a stream of <a href=\"package-async_async\/Result-class.html\">Result<\/a> values and no\nerror events. This is the transformer used by <a href=\"package-async_async\/Result\/captureStream.html\">captureStream<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">captureStreamTransformer = const CaptureStreamTransformer&lt;Object&gt;()\n\n<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/captureStreamTransformer-constant.html",
            "name": "captureStreamTransformer",
            "isDeprecated": false,
            "type": "dart:async.StreamTransformer<dart:core.Object<async.Result<dart:core.Object>>>",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>Whether this result is an error result.<\/p>\n<p>Always the opposite of <a href=\"package-async_async\/Result\/isValue.html\">isValue<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isError;<\/code><\/pre>\n        ",
            "href": "package-async_async\/Result\/isError.html",
            "name": "isError",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>Whether this result is a value result.<\/p>\n<p>Always the opposite of <a href=\"package-async_async\/Result\/isError.html\">isError<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isValue;<\/code><\/pre>\n        ",
            "href": "package-async_async\/Result\/isValue.html",
            "name": "isValue",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>A sink transformer that releases result events.<\/p>\n<p>The result of the transformation is a sink that forwards of values and\nerror events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">releaseSinkTransformer =\nconst StreamSinkTransformer&lt;Result&lt;Object&gt;, Object&gt;.fromStreamTransformer(\n    const ReleaseStreamTransformer&lt;Object&gt;())\n\n<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/releaseSinkTransformer-constant.html",
            "name": "releaseSinkTransformer",
            "isDeprecated": false,
            "type": "async.StreamSinkTransformer<async.Result<dart:core.Object<dart:core.Object>>>",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "async.Result",
            "params": []
        },
        {
            "desc": "<p>A stream transformer that releases a stream of result events.<\/p>\n<p>The result of the transformation is a stream of values and error events.\nThis is the transformer used by <a href=\"package-async_async\/Result\/releaseStream.html\">releaseStream<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">releaseStreamTransformer = const ReleaseStreamTransformer&lt;Object&gt;()\n\n<\/code><\/pre>\n    ",
            "href": "package-async_async\/Result\/releaseStreamTransformer-constant.html",
            "name": "releaseStreamTransformer",
            "isDeprecated": false,
            "type": "dart:async.StreamTransformer<async.Result<dart:core.Object<dart:core.Object>>>",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "async.Result",
            "params": []
        }
    ]
}