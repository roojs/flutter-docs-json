{
    "desc": "<p><a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> using the Flutter standard binary encoding.<\/p>\n<p>Supported messages are acyclic values of these forms:<\/p>\n<ul>\n<li>null<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/num-class.html\">num<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>s<\/li>\n<li>\n<a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>s, <a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a>s, <a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a>s, <a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a>s<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>s of supported values<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>s from supported values to supported values<\/li>\n<\/ul>\n<p>Decoded values will use <code>List&lt;dynamic&gt;<\/code> and <code>Map&lt;dynamic, dynamic&gt;<\/code>\nirrespective of content.<\/p>\n<p>On Android, messages are represented as follows:<\/p>\n<ul>\n<li>null: null<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>: <code>java.lang.Boolean<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/int-class.html\">int<\/a>: <code>java.lang.Integer<\/code> for values that are representable using 32-bit\ntwo's complement; <code>java.lang.Long<\/code> otherwise<\/li>\n<li>\n<a href=\"dart-core\/double-class.html\">double<\/a>: <code>java.lang.Double<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>: <code>java.lang.String<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>: <code>byte[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a>: <code>int[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a>: <code>long[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a>: <code>double[]<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>: <code>java.util.ArrayList<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>: <code>java.util.HashMap<\/code>\n<\/li>\n<\/ul>\n<p>On iOS, messages are represented as follows:<\/p>\n<ul>\n<li>null: nil<\/li>\n<li>\n<a href=\"dart-core\/bool-class.html\">bool<\/a>: <code>NSNumber numberWithBool:<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/int-class.html\">int<\/a>: <code>NSNumber numberWithInt:<\/code> for values that are representable using\n32-bit two's complement; <code>NSNumber numberWithLong:<\/code> otherwise<\/li>\n<li>\n<a href=\"dart-core\/double-class.html\">double<\/a>: <code>NSNumber numberWithDouble:<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/String-class.html\">String<\/a>: <code>NSString<\/code>\n<\/li>\n<li>\n<a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a>, <a href=\"dart-typed_data\/Int32List-class.html\">Int32List<\/a>, <a href=\"dart-typed_data\/Int64List-class.html\">Int64List<\/a>, <a href=\"dart-typed_data\/Float64List-class.html\">Float64List<\/a>:\n<code>FlutterStandardTypedData<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/List-class.html\">List<\/a>: <code>NSArray<\/code>\n<\/li>\n<li>\n<a href=\"dart-core\/Map-class.html\">Map<\/a>: <code>NSDictionary<\/code>\n<\/li>\n<\/ul>\n<p>When sending a <code>java.math.BigInteger<\/code> from Java, it is converted into a\n<a href=\"dart-core\/String-class.html\">String<\/a> with the hexadecimal representation of the integer. (The value is\ntagged as being a big integer; subclasses of this class could be made to\nsupport it natively; see the discussion at <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.) This codec does\nnot support sending big integers from Dart.<\/p>\n<p>The codec is extensible by subclasses overriding <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a> and\n<a href=\"services\/StandardMessageCodec\/readValueOfType.html\">readValueOfType<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/StandardMessageCodec-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "services",
    "name": "services.StandardMessageCodec",
    "shortname": "StandardMessageCodec",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"services\/MessageCodec-class.html\">MessageCodec<\/a> using the Flutter standard binary encoding.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StandardMessageCodec();<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/StandardMessageCodec.html",
            "isDeprecated": false,
            "type": "",
            "name": "StandardMessageCodec",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": []
        },
        {
            "desc": "<p>Decodes the specified <code>message<\/code> from binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndynamic decodeMessage(ByteData message) {\n  if (message == null)\n    return null;\n  final ReadBuffer buffer = ReadBuffer(message);\n  final dynamic result = readValue(buffer);\n  if (buffer.hasRemaining)\n    throw const FormatException('Message corrupted');\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/decodeMessage.html",
            "isDeprecated": false,
            "type": "<dynamic>",
            "name": "decodeMessage",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "message",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:typed_data.ByteData"
                }
            ]
        },
        {
            "desc": "<p>Encodes the specified <code>message<\/code> in binary.<\/p>\n<p>Returns null if the message is null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteData encodeMessage(dynamic message) {\n  if (message == null)\n    return null;\n  final WriteBuffer buffer = WriteBuffer();\n  writeValue(buffer, message);\n  return buffer.done();\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/encodeMessage.html",
            "isDeprecated": false,
            "type": "dart:typed_data.ByteData",
            "name": "encodeMessage",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "message",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Reads a non-negative int from <code>buffer<\/code> as written by <a href=\"services\/StandardMessageCodec\/writeSize.html\">writeSize<\/a>.<\/p>\n<p>This method is intended for use by subclasses overriding\n<a href=\"services\/StandardMessageCodec\/readValueOfType.html\">readValueOfType<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readSize(ReadBuffer buffer) {\n  final int value = buffer.getUint8();\n  switch (value) {\n    case 254:\n      return buffer.getUint16();\n    case 255:\n      return buffer.getUint32();\n    default:\n      return value;\n  }\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/readSize.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "readSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "buffer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.ReadBuffer"
                }
            ]
        },
        {
            "desc": "<p>Reads a value from <code>buffer<\/code> as written by <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.<\/p>\n<p>This method is intended for use by subclasses overriding\n<a href=\"services\/StandardMessageCodec\/readValueOfType.html\">readValueOfType<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic readValue(ReadBuffer buffer) {\n  if (!buffer.hasRemaining)\n    throw const FormatException('Message corrupted');\n  final int type = buffer.getUint8();\n  return readValueOfType(type, buffer);\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/readValue.html",
            "isDeprecated": false,
            "type": "<dynamic>",
            "name": "readValue",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "buffer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.ReadBuffer"
                }
            ]
        },
        {
            "desc": "<p>Reads a value of the indicated <code>type<\/code> from <code>buffer<\/code>.<\/p>\n<p>The codec can be extended by overriding this method, calling super for\ntypes that the extension does not handle. See the discussion at\n<a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">dynamic readValueOfType(int type, ReadBuffer buffer) {\n  switch (type) {\n    case _valueNull:\n      return null;\n    case _valueTrue:\n      return true;\n    case _valueFalse:\n      return false;\n    case _valueInt32:\n      return buffer.getInt32();\n    case _valueInt64:\n      return buffer.getInt64();\n    case _valueFloat64:\n      return buffer.getFloat64();\n    case _valueLargeInt:\n    case _valueString:\n      final int length = readSize(buffer);\n      return utf8.decoder.convert(buffer.getUint8List(length));\n    case _valueUint8List:\n      final int length = readSize(buffer);\n      return buffer.getUint8List(length);\n    case _valueInt32List:\n      final int length = readSize(buffer);\n      return buffer.getInt32List(length);\n    case _valueInt64List:\n      final int length = readSize(buffer);\n      return buffer.getInt64List(length);\n    case _valueFloat64List:\n      final int length = readSize(buffer);\n      return buffer.getFloat64List(length);\n    case _valueList:\n      final int length = readSize(buffer);\n      final dynamic result = List&lt;dynamic&gt;(length);\n      for (int i = 0; i &lt; length; i++)\n        result[i] = readValue(buffer);\n      return result;\n    case _valueMap:\n      final int length = readSize(buffer);\n      final dynamic result = &lt;dynamic, dynamic&gt;{};\n      for (int i = 0; i &lt; length; i++)\n        result[readValue(buffer)] = readValue(buffer);\n      return result;\n    default: throw const FormatException('Message corrupted');\n  }\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/readValueOfType.html",
            "isDeprecated": false,
            "type": "<dynamic>",
            "name": "readValueOfType",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "buffer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.ReadBuffer"
                },
                {
                    "name": "type",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Writes a non-negative 32-bit integer <code>value<\/code> to <code>buffer<\/code>\nusing an expanding 1-5 byte encoding that optimizes for small values.<\/p>\n<p>This method is intended for use by subclasses overriding\n<a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeSize(WriteBuffer buffer, int value) {\n  assert(0 &lt;= value &amp;&amp; value &lt;= 0xffffffff);\n  if (value &lt; 254) {\n    buffer.putUint8(value);\n  } else if (value &lt;= 0xffff) {\n    buffer.putUint8(254);\n    buffer.putUint16(value);\n  } else {\n    buffer.putUint8(255);\n    buffer.putUint32(value);\n  }\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/writeSize.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "writeSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "buffer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.WriteBuffer"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Writes <code>value<\/code> to <code>buffer<\/code> by first writing a type discriminator\nbyte, then the value itself.<\/p>\n<p>This method may be called recursively to serialize container values.<\/p>\n<p>Type discriminators 0 through 127 inclusive are reserved for use by the\nbase class, as follows:<\/p>\n<ul>\n<li>null = 0<\/li>\n<li>true = 1<\/li>\n<li>false = 2<\/li>\n<li>32 bit integer = 3<\/li>\n<li>64 bit integer = 4<\/li>\n<li>larger integers = 5 (see below)<\/li>\n<li>64 bit floating-point number = 6<\/li>\n<li>String = 7<\/li>\n<li>Uint8List = 8<\/li>\n<li>Int32List = 9<\/li>\n<li>Int64List = 10<\/li>\n<li>Float64List = 11<\/li>\n<li>List = 12<\/li>\n<li>Map = 13<\/li>\n<li>Reserved for future expansion: 14..127<\/li>\n<\/ul>\n<p>The codec can be extended by overriding this method, calling super\nfor values that the extension does not handle. Type discriminators\nused by extensions must be greater than or equal to 128 in order to avoid\nclashes with any later extensions to the base class.<\/p>\n<p>The \"larger integers\" type, 5, is never used by <a href=\"services\/StandardMessageCodec\/writeValue.html\">writeValue<\/a>. A subclass\ncould represent big integers from another package using that type. The\nformat is first the type byte (0x05), then the actual number as an ASCII\nstring giving the hexadecimal representation of the integer, with the\nstring's length as encoded by <a href=\"services\/StandardMessageCodec\/writeSize.html\">writeSize<\/a> followed by the string bytes. On\nAndroid, that would get converted to a <code>java.math.BigInteger<\/code> object. On\niOS, the string representation is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeValue(WriteBuffer buffer, dynamic value) {\n  if (value == null) {\n    buffer.putUint8(_valueNull);\n  } else if (value is bool) {\n    buffer.putUint8(value ? _valueTrue : _valueFalse);\n  } else if (value is int) {\n    if (-0x7fffffff - 1 &lt;= value &amp;&amp; value &lt;= 0x7fffffff) {\n      buffer.putUint8(_valueInt32);\n      buffer.putInt32(value);\n    } else {\n      buffer.putUint8(_valueInt64);\n      buffer.putInt64(value);\n    }\n  } else if (value is double) {\n    buffer.putUint8(_valueFloat64);\n    buffer.putFloat64(value);\n  } else if (value is String) {\n    buffer.putUint8(_valueString);\n    final List&lt;int&gt; bytes = utf8.encoder.convert(value);\n    writeSize(buffer, bytes.length);\n    buffer.putUint8List(bytes);\n  } else if (value is Uint8List) {\n    buffer.putUint8(_valueUint8List);\n    writeSize(buffer, value.length);\n    buffer.putUint8List(value);\n  } else if (value is Int32List) {\n    buffer.putUint8(_valueInt32List);\n    writeSize(buffer, value.length);\n    buffer.putInt32List(value);\n  } else if (value is Int64List) {\n    buffer.putUint8(_valueInt64List);\n    writeSize(buffer, value.length);\n    buffer.putInt64List(value);\n  } else if (value is Float64List) {\n    buffer.putUint8(_valueFloat64List);\n    writeSize(buffer, value.length);\n    buffer.putFloat64List(value);\n  } else if (value is List) {\n    buffer.putUint8(_valueList);\n    writeSize(buffer, value.length);\n    for (final dynamic item in value) {\n      writeValue(buffer, item);\n    }\n  } else if (value is Map) {\n    buffer.putUint8(_valueMap);\n    writeSize(buffer, value.length);\n    value.forEach((dynamic key, dynamic value) {\n      writeValue(buffer, key);\n      writeValue(buffer, value);\n    });\n  } else {\n    throw ArgumentError.value(value);\n  }\n}<\/code><\/pre>\n    ",
            "href": "services\/StandardMessageCodec\/writeValue.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "writeValue",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.StandardMessageCodec",
            "params": [
                {
                    "name": "buffer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.WriteBuffer"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        }
    ],
    "props": []
}