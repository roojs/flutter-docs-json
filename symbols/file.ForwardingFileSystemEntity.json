{
    "name": "file.ForwardingFileSystemEntity",
    "extends": [],
    "memberOf": "file",
    "events": [],
    "methods": [
        {
            "name": "ForwardingFileSystemEntity",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-file_file\/ForwardingFileSystemEntity\/ForwardingFileSystemEntity.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "delete",
            "type": "dart:async.Future",
            "desc": "<p>Deletes this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"package-file_file\/ForwardingFileSystemEntity\/delete.html\">delete<\/a> to be used to unconditionally delete any file\nsystem object.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with this\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> when the deletion is done. If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>\ncannot be deleted, the future completes with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/delete.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; delete({bool recursive: false}) async =&gt;\n    wrap(await delegate.delete(recursive: recursive) as D);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "deleteSync",
            "type": "",
            "desc": "<p>Synchronously deletes this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"package-file_file\/ForwardingFileSystemEntity\/deleteSync.html\">deleteSync<\/a> to be used to unconditionally delete any\nfile system object.<\/p>\n<p>Throws an exception if the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> cannot be deleted.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/deleteSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid deleteSync({bool recursive: false}) =&gt;\n    delegate.deleteSync(recursive: recursive);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "exists",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Checks whether the file system entity with this path exists. Returns\na <code>Future&lt;bool&gt;<\/code> that completes with the result.<\/p>\n<p>Since FileSystemEntity is abstract, every FileSystemEntity object\nis actually an instance of one of the subclasses <a href=\"package-file_file\/File-class.html\">File<\/a>,\n<a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, and <a href=\"package-file_file\/Link-class.html\">Link<\/a>.  Calling <a href=\"package-file_file\/ForwardingFileSystemEntity\/exists.html\">exists<\/a> on an instance of one\nof these subclasses checks whether the object exists in the file\nsystem object exists and is of the correct type (file, directory,\nor link).  To check whether a path points to an object on the\nfile system, regardless of the object's type, use the <a href=\"dart-io\/FileSystemEntity\/type.html\">type<\/a>\nstatic method.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/exists.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;bool&gt; exists() =&gt; delegate.exists();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        },
        {
            "name": "existsSync",
            "type": "dart:core.bool",
            "desc": "<p>Synchronously checks whether the file system entity with this path\nexists.<\/p>\n<p>Since FileSystemEntity is abstract, every FileSystemEntity object\nis actually an instance of one of the subclasses <a href=\"package-file_file\/File-class.html\">File<\/a>,\n<a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, and <a href=\"package-file_file\/Link-class.html\">Link<\/a>.  Calling <a href=\"package-file_file\/ForwardingFileSystemEntity\/existsSync.html\">existsSync<\/a> on an instance of\none of these subclasses checks whether the object exists in the\nfile system object exists and is of the correct type (file,\ndirectory, or link).  To check whether a path points to an object\non the file system, regardless of the object's type, use the\n<a href=\"dart-io\/FileSystemEntity\/typeSync.html\">typeSync<\/a> static method.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/existsSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool existsSync() =&gt; delegate.existsSync();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "rename",
            "type": "dart:async.Future",
            "desc": "<p>Renames this file system entity.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with a\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> instance for the renamed file system entity.<\/p>\n<p>If <code>newPath<\/code> identifies an existing entity of the same type, that entity\nis replaced. If <code>newPath<\/code> identifies an existing entity of a different\ntype, the operation fails and the future completes with an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/rename.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;T&gt; rename(String newPath) async =&gt;\n    wrap(await delegate.rename(newPath) as D);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "renameSync",
            "type": "",
            "desc": "<p>Synchronously renames this file system entity.<\/p>\n<p>Returns a <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> instance for the renamed entity.<\/p>\n<p>If <code>newPath<\/code> identifies an existing entity of the same type, that entity\nis replaced. If <code>newPath<\/code> identifies an existing entity of a different\ntype, the operation fails and an exception is thrown.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "newPath",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/renameSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT renameSync(String newPath) =&gt; wrap(delegate.renameSync(newPath) as D);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "resolveSymbolicLinks",
            "type": "dart:async.Future<dart:core.String>",
            "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinks.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; resolveSymbolicLinks() =&gt; delegate.resolveSymbolicLinks();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.String"
            ]
        },
        {
            "name": "resolveSymbolicLinksSync",
            "type": "dart:core.String",
            "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/resolveSymbolicLinksSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString resolveSymbolicLinksSync() =&gt; delegate.resolveSymbolicLinksSync();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "stat",
            "type": "dart:async.Future<dart:io.FileStat>",
            "desc": "<p>Calls the operating system's stat() function on the <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a> of this\n<a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Identical to <code>FileStat.stat(this.path)<\/code>.<\/p>\n<p>Returns a <code>Future&lt;FileStat&gt;<\/code> object containing the data returned by\nstat().<\/p>\n<p>If the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object\nwith .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/stat.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.FileStat&gt; stat() =&gt; delegate.stat();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.FileStat"
            ]
        },
        {
            "name": "statSync",
            "type": "dart:io.FileStat",
            "desc": "<p>Synchronously calls the operating system's stat() function on the\n<a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a> of this <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Identical to <code>FileStat.statSync(this.path)<\/code>.<\/p>\n<p>Returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().<\/p>\n<p>If the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/statSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.FileStat statSync() =&gt; delegate.statSync();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "watch",
            "type": "dart:async.Stream<dart:io.FileSystemEvent>",
            "desc": "<p>Start watching the <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> for changes.<\/p>\n<p>The implementation uses platform-dependent event-based APIs for receiving\nfile-system notifications, thus behavior depends on the platform.<\/p>\n<ul>\n<li>\n<code>Windows<\/code>: Uses <code>ReadDirectoryChangesW<\/code>. The implementation only\nsupports watching directories. Recursive watching is supported.<\/li>\n<li>\n<code>Linux<\/code>: Uses <code>inotify<\/code>. The implementation supports watching both\nfiles and directories. Recursive watching is not supported.\nNote: When watching files directly, delete events might not happen\nas expected.<\/li>\n<li>\n<code>OS X<\/code>: Uses <code>FSEvents<\/code>. The implementation supports watching both\nfiles and directories. Recursive watching is supported.<\/li>\n<\/ul>\n<p>The system will start listening for events once the returned <a href=\"dart-async\/Stream-class.html\">Stream<\/a> is\nbeing listened to, not when the call to <a href=\"package-file_file\/ForwardingFileSystemEntity\/watch.html\">watch<\/a> is issued.<\/p>\n<p>The returned value is an endless broadcast <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, that only stops when\none of the following happens:<\/p>\n<ul>\n<li>The <a href=\"dart-async\/Stream-class.html\">Stream<\/a> is canceled, e.g. by calling <code>cancel<\/code> on the\n <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a>.<\/li>\n<li>The <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> being watches, is deleted.<\/li>\n<\/ul>\n<p>Use <code>events<\/code> to specify what events to listen for. The constants in\n<a href=\"dart-io\/FileSystemEvent-class.html\">FileSystemEvent<\/a> can be or'ed together to mix events. Default is\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEvent\/ALL-constant.html\">FileSystemEvent.ALL<\/a>.<\/p>\n<p>A move event may be reported as seperate delete and create events.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "events",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "recursive",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/watch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nStream&lt;FileSystemEvent&gt; watch({\n  int events: FileSystemEvent.all,\n  bool recursive: false,\n}) =&gt;\n    delegate.watch(events: events, recursive: recursive);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Stream",
                "dart:io.FileSystemEvent"
            ]
        },
        {
            "name": "wrap",
            "type": "",
            "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "delegate",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/wrap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nT wrap(D delegate);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "wrapDirectory",
            "type": "file.Directory",
            "desc": "<p>Creates a new directory with the same file system as this entity and\nbacked by the specified delegate.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "delegate",
                    "type": "dart:io.Directory",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/wrapDirectory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDirectory wrapDirectory(io.Directory delegate);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "wrapFile",
            "type": "file.File",
            "desc": "<p>Creates a new file with the same file system as this entity and\nbacked by the specified delegate.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "delegate",
                    "type": "dart:io.File",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/wrapFile.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFile wrapFile(io.File delegate);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "wrapLink",
            "type": "file.Link",
            "desc": "<p>Creates a new link with the same file system as this entity and\nbacked by the specified delegate.<\/p>\n    ",
            "static": false,
            "memberOf": "file.ForwardingFileSystemEntity",
            "sig": "",
            "params": [
                {
                    "name": "delegate",
                    "type": "dart:io.Link",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/wrapLink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nLink wrapLink(io.Link delegate);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "absolute",
            "type": "",
            "types": [],
            "desc": "<p>Returns a <a href=\"package-file_file\/FileSystemEntity-class.html\">FileSystemEntity<\/a> whose path is the absolute path to <a href=\"package-file_file\/ForwardingFileSystemEntity-class.html\">this<\/a>.<\/p>\n<p>The type of the returned instance is the type of <a href=\"package-file_file\/ForwardingFileSystemEntity-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/absolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nT get absolute =&gt; wrap(delegate.absolute as D);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "basename",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Gets the part of this entity's path after the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/foo.dart'); \/\/ -&gt; 'foo.dart'\ncontext.basename('path\/to');          \/\/ -&gt; 'to'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/'); \/\/ -&gt; 'to'\n<\/code><\/pre>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/basename.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get basename =&gt; fileSystem.path.basename(path);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "delegate",
            "type": "",
            "types": [],
            "desc": "<p>The entity to which this entity will forward all methods and properties.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/delegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nD get delegate;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "dirname",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Gets the part of this entity's path before the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to'\ncontext.dirname('path\/to');          \/\/ -&gt; 'path'\ncontext.dirname('foo.dart');         \/\/ -&gt; '.'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/'); \/\/ -&gt; 'path'\n<\/code><\/pre>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/dirname.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get dirname =&gt; fileSystem.path.dirname(path);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isAbsolute",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns a <a href=\"dart-core\/bool-class.html\">bool<\/a> indicating whether this object's path is absolute.<\/p>\n<p>On Windows, a path is absolute if it starts with \\\\ or a drive letter\nbetween a and z (upper or lower case) followed by :\\ or :\/.\nOn non-Windows, a path is absolute if it starts with \/.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/isAbsolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isAbsolute =&gt; delegate.isAbsolute;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "parent",
            "type": "file.Directory",
            "types": [],
            "desc": "<p>The directory containing <a href=\"package-file_file\/ForwardingFileSystemEntity-class.html\">this<\/a>.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/parent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDirectory get parent =&gt; wrapDirectory(delegate.parent);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "path",
            "type": "dart:core.String",
            "types": [],
            "desc": "",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/path.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get path =&gt; delegate.path;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "uri",
            "type": "dart:core.Uri",
            "types": [],
            "desc": "<p>Returns a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> representing the file system entity's location.<\/p>\n<p>The returned URI's scheme is always \"file\" if the entity's <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a> is\nabsolute, otherwise the scheme will be empty.<\/p>\n        ",
            "memberOf": "file.ForwardingFileSystemEntity",
            "isConstant": false,
            "href": "package-file_file\/ForwardingFileSystemEntity\/uri.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nUri get uri =&gt; delegate.uri;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-file_file\/ForwardingFileSystemEntity-class.html",
    "desc": "<p>A file system entity that forwards all methods and properties to a delegate.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ForwardingFileSystemEntity"
}