{
    "name": "painting.DecorationImagePainter",
    "extends": [],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>Releases the resources used by this painter.<\/p>\n<p>This should be called whenever the painter is no longer needed.<\/p>\n<p>After this method has been called, the object is no longer usable.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImagePainter",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/DecorationImagePainter\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() {\n  _imageStream?.removeListener(_imageListener);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "paint",
            "type": "",
            "desc": "<p>Draw the image onto the given canvas.<\/p>\n<p>The image is drawn at the position and size given by the <code>rect<\/code> argument.<\/p>\n<p>The image is clipped to the given <code>clipPath<\/code>, if any.<\/p>\n<p>The <code>configuration<\/code> object is used to resolve the image (e.g. to pick\nresolution-specific assets), and to implement the\n<a href=\"painting\/DecorationImage\/matchTextDirection.html\">DecorationImage.matchTextDirection<\/a> feature.<\/p>\n<p>If the image needs to be painted again, e.g. because it is animated or\nbecause it had not yet been loaded the first time this method was called,\nthen the <code>onChanged<\/code> callback passed to <a href=\"painting\/DecorationImage\/createPainter.html\">DecorationImage.createPainter<\/a>\nwill be called.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImagePainter",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "clipPath",
                    "type": "dart:ui.Path",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "configuration",
                    "type": "painting.ImageConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/DecorationImagePainter\/paint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Rect rect, Path clipPath, ImageConfiguration configuration) {\n  assert(canvas != null);\n  assert(rect != null);\n  assert(configuration != null);\n\n  bool flipHorizontally = false;\n  if (_details.matchTextDirection) {\n    assert(() {\n      \/\/ We check this first so that the assert will fire immediately, not just\n      \/\/ when the image is ready.\n      if (configuration.textDirection == null) {\n        throw FlutterError(\n          'ImageDecoration.matchTextDirection can only be used when a TextDirection is available.\\n'\n          'When DecorationImagePainter.paint() was called, there was no text direction provided '\n          'in the ImageConfiguration object to match.\\n'\n          'The DecorationImage was:\\n'\n          '  $_details\\n'\n          'The ImageConfiguration was:\\n'\n          '  $configuration'\n        );\n      }\n      return true;\n    }());\n    if (configuration.textDirection == TextDirection.rtl)\n      flipHorizontally = true;\n  }\n\n  final ImageStream newImageStream = _details.image.resolve(configuration);\n  if (newImageStream.key != _imageStream?.key) {\n    _imageStream?.removeListener(_imageListener);\n    _imageStream = newImageStream;\n    _imageStream.addListener(_imageListener);\n  }\n  if (_image == null)\n    return;\n\n  if (clipPath != null) {\n    canvas.save();\n    canvas.clipPath(clipPath);\n  }\n\n  paintImage(\n    canvas: canvas,\n    rect: rect,\n    image: _image.image,\n    scale: _image.scale,\n    colorFilter: _details.colorFilter,\n    fit: _details.fit,\n    alignment: _details.alignment.resolve(configuration.textDirection),\n    centerSlice: _details.centerSlice,\n    repeat: _details.repeat,\n    flipHorizontally: flipHorizontally,\n    filterQuality: FilterQuality.low,\n  );\n\n  if (clipPath != null)\n    canvas.restore();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.DecorationImagePainter",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/DecorationImagePainter\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(stream: $_imageStream, image: $_image) for $_details';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/DecorationImagePainter-class.html",
    "desc": "<p>The painter for a <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>.<\/p>\n<p>To obtain a painter, call <a href=\"painting\/DecorationImage\/createPainter.html\">DecorationImage.createPainter<\/a>.<\/p>\n<p>To paint, call <a href=\"painting\/DecorationImagePainter\/paint.html\">paint<\/a>. The <code>onChanged<\/code> callback passed to\n<a href=\"painting\/DecorationImage\/createPainter.html\">DecorationImage.createPainter<\/a> will be called if the image needs to paint\nagain (e.g. because it is animated or because it had not yet loaded the\nfirst time the <a href=\"painting\/DecorationImagePainter\/paint.html\">paint<\/a> method was called).<\/p>\n<p>This object should be disposed using the <a href=\"painting\/DecorationImagePainter\/dispose.html\">dispose<\/a> method when it is no\nlonger needed.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DecorationImagePainter"
}