{
    "name": "dart:ui.Shadow",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Shadow\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! Shadow)\n    return false;\n  final Shadow typedOther = other;\n  return color == typedOther.color &amp;&amp;\n         offset == typedOther.offset &amp;&amp;\n         blurRadius == typedOther.blurRadius;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Shadow",
            "type": "",
            "desc": "<p>Construct a shadow.<\/p>\n<p>The default shadow is a black shadow with zero offset and zero blur.\nDefault shadows should be completely covered by the casting element,\nand not be visible.<\/p>\n<p>Transparency should be adjusted through the <code>color<\/code> alpha.<\/p>\n<p>Shadow order matters due to compositing multiple translucent objects not\nbeing commutative.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "blurRadius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Shadow\/Shadow.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Shadow({\n  this.color = const Color(_kColorDefault),\n  this.offset = Offset.zero,\n  this.blurRadius = 0.0,\n}) : assert(color != null, 'Text shadow color was null.'),\n     assert(offset != null, 'Text shadow offset was null.'),\n     assert(blurRadius &gt;= 0.0, 'Text shadow blur radius should be non-negative.');<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "convertRadiusToSigma",
            "type": "dart:core.double",
            "desc": "<p>Converts a blur radius in pixels to sigmas.<\/p>\n<p>See the sigma argument to <a href=\"dart-ui\/MaskFilter\/MaskFilter.blur.html\">MaskFilter.blur<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/convertRadiusToSigma.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ See SkBlurMask::ConvertRadiusToSigma().\n\/\/ &lt;https:\/\/github.com\/google\/skia\/blob\/bb5b77db51d2e149ee66db284903572a5aac09be\/src\/effects\/SkBlurMask.cpp#L23&gt;\nstatic double convertRadiusToSigma(double radius) {\n  return radius * 0.57735 + 0.5;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "dart:ui.Shadow",
            "desc": "<p>Linearly interpolate between two shadows.<\/p>\n<p>If either shadow is null, this function linearly interpolates from a\na shadow that matches the other shadow in color but has a zero\noffset and a zero blurRadius.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:ui.Shadow",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:ui.Shadow",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Shadow lerp(Shadow a, Shadow b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return Shadow(\n    color: Color.lerp(a.color, b.color, t),\n    offset: Offset.lerp(a.offset, b.offset, t),\n    blurRadius: lerpDouble(a.blurRadius, b.blurRadius, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpList",
            "type": "dart:core.List<dart:ui.Shadow>",
            "desc": "<p>Linearly interpolate between two lists of shadows.<\/p>\n<p>If the lists differ in length, excess items are lerped with null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ]
                },
                {
                    "name": "b",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ]
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/lerpList.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;Shadow&gt; lerpList(List&lt;Shadow&gt; a, List&lt;Shadow&gt; b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  a ??= &lt;Shadow&gt;[];\n  b ??= &lt;Shadow&gt;[];\n  final List&lt;Shadow&gt; result = &lt;Shadow&gt;[];\n  final int commonLength = math.min(a.length, b.length);\n  for (int i = 0; i &lt; commonLength; i += 1)\n    result.add(Shadow.lerp(a[i], b[i], t));\n  for (int i = commonLength; i &lt; a.length; i += 1)\n    result.add(a[i].scale(1.0 - t));\n  for (int i = commonLength; i &lt; b.length; i += 1)\n    result.add(b[i].scale(t));\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "dart:ui.Shadow"
            ]
        },
        {
            "name": "scale",
            "type": "dart:ui.Shadow",
            "desc": "<p>Returns a new shadow with its <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> and <a href=\"dart-ui\/Shadow\/blurRadius.html\">blurRadius<\/a> scaled by the given\nfactor.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [
                {
                    "name": "factor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Shadow scale(double factor) {\n  return Shadow(\n    color: color,\n    offset: offset * factor,\n    blurRadius: blurRadius * factor,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toPaint",
            "type": "dart:ui.Paint",
            "desc": "<p>Create the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object that corresponds to this shadow description.<\/p>\n<p>The <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> is not represented in the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object.\nTo honor this as well, the shape should be translated by <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> before\nbeing filled using this <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n<p>This class does not provide a way to disable shadows to avoid\ninconsistencies in shadow blur rendering, primarily as a method of\nreducing test flakiness. <a href=\"dart-ui\/Shadow\/toPaint.html\">toPaint<\/a> should be overridden in subclasses to\nprovide this functionality.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/toPaint.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Paint toPaint() {\n  return Paint()\n    ..color = color\n    ..maskFilter = MaskFilter.blur(BlurStyle.normal, blurSigma);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Shadow",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/Shadow\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TextShadow($color, $offset, $blurRadius)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "blurRadius",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The standard deviation of the Gaussian to convolve with the shadow's shape.<\/p>\n        ",
            "memberOf": "dart:ui.Shadow",
            "isConstant": false,
            "href": "dart-ui\/Shadow\/blurRadius.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double blurRadius\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "blurSigma",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The <a href=\"dart-ui\/Shadow\/blurRadius.html\">blurRadius<\/a> in sigmas instead of logical pixels.<\/p>\n<p>See the sigma argument to <a href=\"dart-ui\/MaskFilter\/MaskFilter.blur.html\">MaskFilter.blur<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Shadow",
            "isConstant": false,
            "href": "dart-ui\/Shadow\/blurSigma.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get blurSigma =&gt; convertRadiusToSigma(blurRadius);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "color",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color that the shadow will be drawn with.<\/p>\n<p>The shadows are shapes composited directly over the base canvas, and do not\nrepresent optical occlusion.<\/p>\n        ",
            "memberOf": "dart:ui.Shadow",
            "isConstant": false,
            "href": "dart-ui\/Shadow\/color.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Shadow\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Shadow\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.Shadow",
            "isConstant": false,
            "href": "dart-ui\/Shadow\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(color, offset, blurRadius);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "offset",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The displacement of the shadow from the casting element.<\/p>\n<p>Positive x\/y offsets will shift the shadow to the right and down, while\nnegative offsets shift the shadow to the left and up. The offsets are\nrelative to the position of the element that is casting it.<\/p>\n        ",
            "memberOf": "dart:ui.Shadow",
            "isConstant": false,
            "href": "dart-ui\/Shadow\/offset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset offset\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "painting.BoxShadow"
    ],
    "realImplementors": [
        "painting.BoxShadow"
    ],
    "cn": [],
    "href": "dart-ui\/Shadow-class.html",
    "desc": "<p>A single shadow.<\/p>\n<p>Multiple shadows are stacked together in a <a href=\"dart-ui\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Shadow"
}