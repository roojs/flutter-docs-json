{
    "name": "rendering.ContainerParentDataMixin",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "ContainerParentDataMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "rendering.ContainerParentDataMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/ContainerParentDataMixin\/ContainerParentDataMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "detach",
            "type": "",
            "desc": "<p>Clear the sibling pointers.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.ContainerParentDataMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/ContainerParentDataMixin\/detach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  super.detach();\n  if (previousSibling != null) {\n    final ContainerParentDataMixin&lt;ChildType&gt; previousSiblingParentData = previousSibling.parentData;\n    assert(previousSibling != this);\n    assert(previousSiblingParentData.nextSibling == this);\n    previousSiblingParentData.nextSibling = nextSibling;\n  }\n  if (nextSibling != null) {\n    final ContainerParentDataMixin&lt;ChildType&gt; nextSiblingParentData = nextSibling.parentData;\n    assert(nextSibling != this);\n    assert(nextSiblingParentData.previousSibling == this);\n    nextSiblingParentData.previousSibling = previousSibling;\n  }\n  previousSibling = null;\n  nextSibling = null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "nextSibling",
            "type": "",
            "types": [],
            "desc": "<p>The next sibling in the parent's child list.<\/p>\n        ",
            "memberOf": "rendering.ContainerParentDataMixin",
            "isConstant": false,
            "href": "rendering\/ContainerParentDataMixin\/nextSibling.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ChildType nextSibling\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "previousSibling",
            "type": "",
            "types": [],
            "desc": "<p>The previous sibling in the parent's child list.<\/p>\n        ",
            "memberOf": "rendering.ContainerParentDataMixin",
            "isConstant": false,
            "href": "rendering\/ContainerParentDataMixin\/previousSibling.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ChildType previousSibling\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/ContainerParentDataMixin-mixin.html",
    "desc": "<p>Parent data to support a doubly-linked list of children.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "ContainerParentDataMixin"
}