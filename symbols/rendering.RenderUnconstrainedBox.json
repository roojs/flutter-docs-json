{
    "desc": "<p>Renders a box, imposing no constraints on its child, allowing the child to\nrender at its \"natural\" size.<\/p>\n<p>This allows a child to render at the size it would render if it were alone\non an infinite canvas with no constraints. This box will then attempt to\nadopt the same size, within the limits of its own constraints. If it ends\nup with a different size, it will align the child based on <a href=\"rendering\/RenderAligningShiftedBox\/alignment.html\">alignment<\/a>.\nIf the box cannot expand enough to accommodate the entire child, the\nchild will be clipped.<\/p>\n<p>In debug mode, if the child overflows the box, a warning will be printed on\nthe console, and black and yellow striped areas will appear where the\noverflow occurs.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderConstrainedBox-class.html\">RenderConstrainedBox<\/a>, which renders a box which imposes constraints\non its child.<\/li>\n<li>\n<a href=\"rendering\/RenderConstrainedOverflowBox-class.html\">RenderConstrainedOverflowBox<\/a>, which renders a box that imposes different\nconstraints on its child than it gets from its parent, possibly allowing\nthe child to overflow the parent.<\/li>\n<li>\n<a href=\"rendering\/RenderSizedOverflowBox-class.html\">RenderSizedOverflowBox<\/a>, a render object that is a specific size but\npasses its original constraints through to its child, which it allows to\noverflow.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "rendering\/RenderUnconstrainedBox-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderUnconstrainedBox",
    "shortname": "RenderUnconstrainedBox",
    "extends": [
        "rendering.RenderAligningShiftedBox",
        "rendering.RenderShiftedBox",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a render object that sizes itself to the child but does not\npass the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> down to that child.<\/p>\n<p>The <code>alignment<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderUnconstrainedBox({\n  @required AlignmentGeometry alignment,\n  @required TextDirection textDirection,\n  Axis constrainedAxis,\n  RenderBox child,\n}) : assert(alignment != null),\n     _constrainedAxis = constrainedAxis,\n     super.mixin(alignment, textDirection, child);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderUnconstrainedBox\/RenderUnconstrainedBox.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderUnconstrainedBox",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "constrainedAxis",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns a rect in this object's coordinate system that describes\nthe approximate bounding box of the clip rect that would be\napplied to the given child during the paint phase, if any.<\/p>\n<p>Returns null if the child would not be clipped.<\/p>\n<p>This is used in the semantics phase to avoid including children\nthat are not physically visible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRect describeApproximatePaintClip(RenderObject child) {\n  return _isOverflowing ? Offset.zero &amp; size : null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderUnconstrainedBox\/describeApproximatePaintClip.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderUnconstrainedBox",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  \/\/ There's no point in drawing the child if we're empty, or there is no\n  \/\/ child.\n  if (child == null || size.isEmpty)\n    return;\n\n  if (!_isOverflowing) {\n    super.paint(context, offset);\n    return;\n  }\n\n  \/\/ We have overflow. Clip it.\n  context.pushClipRect(needsCompositing, offset, Offset.zero &amp; size, super.paint);\n\n  \/\/ Display the overflow indicator.\n  assert(() {\n    paintOverflowIndicator(context, offset, _overflowContainerRect, _overflowChildRect);\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderUnconstrainedBox\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderUnconstrainedBox",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  if (child != null) {\n    \/\/ Let the child lay itself out at it's \"natural\" size, but if\n    \/\/ constrainedAxis is non-null, keep any constraints on that axis.\n    BoxConstraints childConstraints;\n    if (constrainedAxis != null) {\n      switch (constrainedAxis) {\n        case Axis.horizontal:\n          childConstraints = BoxConstraints(maxWidth: constraints.maxWidth, minWidth: constraints.minWidth);\n          break;\n        case Axis.vertical:\n          childConstraints = BoxConstraints(maxHeight: constraints.maxHeight, minHeight: constraints.minHeight);\n          break;\n      }\n    } else {\n      childConstraints = const BoxConstraints();\n    }\n    child.layout(childConstraints, parentUsesSize: true);\n    size = constraints.constrain(child.size);\n    alignChild();\n    final BoxParentData childParentData = child.parentData;\n    _overflowContainerRect = Offset.zero &amp; size;\n    _overflowChildRect = childParentData.offset &amp; child.size;\n  } else {\n    size = constraints.smallest;\n    _overflowContainerRect = Rect.zero;\n    _overflowChildRect = Rect.zero;\n  }\n  _isOverflowing = RelativeRect.fromRect(_overflowContainerRect, _overflowChildRect).hasInsets;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderUnconstrainedBox\/performLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderUnconstrainedBox",
            "params": []
        },
        {
            "desc": "<p>Returns a human understandable name.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() {\n  String header = super.toStringShort();\n  if (_isOverflowing)\n    header += ' OVERFLOWING';\n  return header;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderUnconstrainedBox\/toStringShort.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderUnconstrainedBox",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The axis to retain constraints on, if any.<\/p>\n<p>If not set, or set to null (the default), neither axis will retain its\nconstraints. If set to <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, then vertical constraints will\nbe retained, and if set to <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, then horizontal constraints\nwill be retained.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Axis get constrainedAxis =&gt; _constrainedAxis;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderUnconstrainedBox\/constrainedAxis.html",
            "isDeprecated": "0",
            "type": "painting.Axis",
            "memberOf": "rendering.RenderUnconstrainedBox",
            "params": []
        }
    ]
}