{
    "desc": "<p>A base class for widgets with implicit animations.<\/p>\n<p><a href=\"widgets\/ImplicitlyAnimatedWidgetState-class.html\">ImplicitlyAnimatedWidgetState<\/a> requires that subclasses respond to the\nanimation, themselves. If you would like <code>setState()<\/code> to be called\nautomatically as the animation changes, use <a href=\"widgets\/AnimatedWidgetBaseState-class.html\">AnimatedWidgetBaseState<\/a>.<\/p>\n<p>Subclasses must implement the <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a> method to allow\n<a href=\"widgets\/ImplicitlyAnimatedWidgetState-class.html\">ImplicitlyAnimatedWidgetState<\/a> to iterate through the subclasses' widget's\nfields and animate them.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ImplicitlyAnimatedWidgetState-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ImplicitlyAnimatedWidgetState",
    "shortname": "ImplicitlyAnimatedWidgetState",
    "extends": [
        "widgets.State",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/ImplicitlyAnimatedWidgetState.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": []
        },
        {
            "desc": "<p>Optional hook for subclasses that runs after all tweens have been updated\nvia <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a>.<\/p>\n<p>Any properties that depend upon tweens created by <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a> should be\nupdated within <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateTweens.html\">didUpdateTweens<\/a>, not within <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didUpdateTweens() { }<\/code><\/pre>\n    ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/didUpdateTweens.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": []
        },
        {
            "desc": "<p>Called whenever the widget configuration changes.<\/p>\n<p>If the parent widget rebuilds and request that this location in the tree\nupdate to display a new widget with the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and\n<a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>, the framework will update the <a href=\"widgets\/State\/widget.html\">widget<\/a> property of this\n<a href=\"widgets\/State-class.html\">State<\/a> object to refer to the new widget and then call this method\nwith the previous widget as an argument.<\/p>\n<p>Override this method to respond when the <a href=\"widgets\/State\/widget.html\">widget<\/a> changes (e.g., to start\nimplicit animations).<\/p>\n<p>The framework always calls <a href=\"widgets\/State\/build.html\">build<\/a> after calling <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a>, which\nmeans any calls to <a href=\"widgets\/State\/setState.html\">setState<\/a> in <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a> are redundant.<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/State\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/initState.html\">initState<\/a>,\n<a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.didUpdateWidget(oldWidget).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didUpdateWidget(T oldWidget) {\n  super.didUpdateWidget(oldWidget);\n  if (widget.curve != oldWidget.curve)\n    _updateCurve();\n  _controller.duration = widget.duration;\n  if (_constructTweens()) {\n    forEachTween((Tween&lt;dynamic&gt; tween, dynamic targetValue, TweenConstructor&lt;dynamic&gt; constructor) {\n      _updateTween(tween, targetValue);\n      return tween;\n    });\n    _controller\n      ..value = 0.0\n      ..forward();\n    didUpdateTweens();\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is removed from the tree permanently.<\/p>\n<p>The framework calls this method when this <a href=\"widgets\/State-class.html\">State<\/a> object will never\nbuild again. After the framework calls <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>, the <a href=\"widgets\/State-class.html\">State<\/a> object is\nconsidered unmounted and the <a href=\"widgets\/State\/mounted.html\">mounted<\/a> property is false. It is an error\nto call <a href=\"widgets\/State\/setState.html\">setState<\/a> at this point. This stage of the lifecycle is terminal:\nthere is no way to remount a <a href=\"widgets\/State-class.html\">State<\/a> object that has been disposed.<\/p>\n<p>Subclasses should override this method to release any resources retained\nby this object (e.g., stop any active animations).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/State\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/initState.html\">initState<\/a>,\n<a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure to end your method with a call to\nsuper.dispose().<\/p>\n<p>See also <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a>, which is called prior to <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _controller.dispose();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": []
        },
        {
            "desc": "<p>Subclasses must implement this function by running through the following\nsteps for each animatable facet in the class:<\/p>\n<ol>\n<li>\n<p>Call the visitor callback with three arguments, the first argument\nbeing the current value of the Tween<t> object that represents the\ntween (initially null), the second argument, of type T, being the value\non the Widget that represents the current target value of the\ntween, and the third being a callback that takes a value T (which will\nbe the second argument to the visitor callback), and that returns an\nTween<t> object for the tween, configured with the given value\nas the begin value.<\/t><\/t><\/p>\n<\/li>\n<li>\n<p>Take the value returned from the callback, and store it. This is the\nvalue to use as the current value the next time that the <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a>\nmethod is called.<\/p>\n<\/li>\n<\/ol>\n<p>Subclasses that contain properties based on tweens created by\n<a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a> should override <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateTweens.html\">didUpdateTweens<\/a> to update those\nproperties. Dependent properties should not be updated within\n<a href=\"widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html\">forEachTween<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nSample code implementing an implicitly animated widget's <code>State<\/code>.\nThe widget animates between colors whenever <code>widget.targetColor<\/code>\nchanges.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyWidgetState extends AnimatedWidgetBaseState&lt;MyWidget&gt; {\n  ColorTween _colorTween;\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      'Hello World',\n      \/\/ Computes the value of the text color at any given time.\n      style: TextStyle(color: _colorTween.evaluate(animation)),\n    );\n  }\n\n  @override\n  void forEachTween(TweenVisitor&lt;dynamic&gt; visitor) {\n    \/\/ Update the tween using the provided visitor function.\n    _colorTween = visitor(\n      \/\/ The latest tween value. Can be `null`.\n      _colorTween,\n      \/\/ The color value toward which we are animating.\n      widget.targetColor,\n      \/\/ A function that takes a color value and returns a tween\n      \/\/ beginning at that value.\n      (value) =&gt; ColorTween(begin: value),\n    );\n\n    \/\/ We could have more tweens than one by using the visitor\n    \/\/ multiple times.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid forEachTween(TweenVisitor&lt;dynamic&gt; visitor);<\/code><\/pre>\n    ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/forEachTween.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.TweenVisitor"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is inserted into the tree.<\/p>\n<p>The framework will call this method exactly once for each <a href=\"widgets\/State-class.html\">State<\/a> object\nit creates.<\/p>\n<p>Override this method to perform initialization that depends on the\nlocation at which this object was inserted into the tree (i.e., <a href=\"widgets\/State\/context.html\">context<\/a>)\nor on the widget used to configure this object (i.e., <a href=\"widgets\/State\/widget.html\">widget<\/a>).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/State\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/initState.html\">initState<\/a>,\n<a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/ImplicitlyAnimatedWidgetState\/dispose.html\">dispose<\/a>, unsubscribe from the object.\nYou cannot use <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this\nmethod. However, <a href=\"widgets\/SingleTickerProviderStateMixin\/didChangeDependencies.html\">didChangeDependencies<\/a> will be called immediately\nfollowing this method, and <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> can\nbe used there.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.initState().<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initState() {\n  super.initState();\n  _controller = AnimationController(\n    duration: widget.duration,\n    debugLabel: '${widget.toStringShort()}',\n    vsync: this,\n  );\n  _updateCurve();\n  _constructTweens();\n  didUpdateTweens();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/initState.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The animation driving this widget's implicit animations.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Animation&lt;double&gt; get animation =&gt; _animation;<\/code><\/pre>\n        ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/animation.html",
            "isDeprecated": "0",
            "type": "animation.Animation<dart:core.double>",
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": []
        },
        {
            "desc": "<p>The animation controller driving this widget's implicit animations.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nAnimationController get controller =&gt; _controller;<\/code><\/pre>\n        ",
            "href": "widgets\/ImplicitlyAnimatedWidgetState\/controller.html",
            "isDeprecated": "0",
            "type": "animation.AnimationController",
            "memberOf": "widgets.ImplicitlyAnimatedWidgetState",
            "params": []
        }
    ]
}