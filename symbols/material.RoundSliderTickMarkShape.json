{
    "desc": "<p>This is the default shape of each <a href=\"material\/Slider-class.html\">Slider<\/a> tick mark.<\/p>\n<p>Tick marks are only displayed if the slider is discrete, which can be done\nby setting the <a href=\"material\/Slider\/divisions.html\">Slider.divisions<\/a> as non-null.<\/p>\n<p>It paints a solid circle, centered in the on the track.\nThe color is determined by the <a href=\"material\/Slider-class.html\">Slider<\/a>'s enabled state and track's active\nstates. These colors are defined in:\n  <a href=\"material\/SliderThemeData\/activeTrackColor.html\">SliderThemeData.activeTrackColor<\/a>,\n  <a href=\"material\/SliderThemeData\/inactiveTrackColor.html\">SliderThemeData.inactiveTrackColor<\/a>,\n  <a href=\"material\/SliderThemeData\/disabledActiveTrackColor.html\">SliderThemeData.disabledActiveTrackColor<\/a>,\n  <a href=\"material\/SliderThemeData\/disabledInactiveTrackColor.html\">SliderThemeData.disabledInactiveTrackColor<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Slider-class.html\">Slider<\/a>, which includes tick marks defined by this shape.<\/li>\n<li>\n<a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a>, which can be used to configure the tick mark shape of all\nsliders in a widget subtree.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/RoundSliderTickMarkShape-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.RoundSliderTickMarkShape",
    "shortname": "RoundSliderTickMarkShape",
    "extends": [
        "material.SliderTickMarkShape",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a slider tick mark that draws a circle.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RoundSliderTickMarkShape({ this.tickMarkRadius });<\/code><\/pre>\n    ",
            "href": "material\/RoundSliderTickMarkShape\/RoundSliderTickMarkShape.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.RoundSliderTickMarkShape",
            "params": [
                {
                    "name": "tickMarkRadius",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the preferred size of the shape.<\/p>\n<p>It is used to help position the tick marks within the slider.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize getPreferredSize({\n  bool isEnabled,\n  SliderThemeData sliderTheme,\n}) {\n  \/\/ The tick marks are tiny circles. If no radius is provided, then they are\n  \/\/ defaulted to be the same height as the track.\n  return Size.fromRadius(tickMarkRadius ?? sliderTheme.trackHeight \/ 2);\n}<\/code><\/pre>\n    ",
            "href": "material\/RoundSliderTickMarkShape\/getPreferredSize.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RoundSliderTickMarkShape",
            "params": [
                {
                    "name": "isEnabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "sliderTheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                }
            ]
        },
        {
            "desc": "<p>Paints the slider track.<\/p>\n<p><code>context<\/code> is the same context for the render box of the <a href=\"material\/Slider-class.html\">Slider<\/a>.<\/p>\n<p><code>center<\/code> is the offset of the center where this shape should be painted.\nThis offset is relative to the origin of the <code>context<\/code> canvas.<\/p>\n<p><code>parentBox<\/code> is the <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> of the <a href=\"material\/Slider-class.html\">Slider<\/a>. Its attributes, such as\nsize, can be used to assist in painting this shape.<\/p>\n<p><code>sliderTheme<\/code> is the theme assigned to the <a href=\"material\/Slider-class.html\">Slider<\/a> that this shape\nbelongs to.<\/p>\n<p><code>enableAnimation<\/code> is an animation triggered when the <a href=\"material\/Slider-class.html\">Slider<\/a> is enabled,\nand it reverses when the slider is disabled. Enabled is the\n<code>Slider.isInteractive<\/code> state. Use this to paint intermediate frames for\nthis shape when the slider changes enabled state.<\/p>\n<p><code>isEnabled<\/code> has the same value as <code>Slider.isInteractive<\/code>. If true, the\nslider will respond to input.<\/p>\n<p><code>textDirection<\/code> can be used to determine how the tick marks are painting\ndepending on whether they are on an active track segment or not. The track\nsegment between the start of the slider and the thumb is the active track\nsegment. The track segment between the thumb and the end of the slider is\nthe inactive track segment. In LTR text direction, the start of the slider\nis on the left, and in RTL text direction, the start of the slider is on\nthe right.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  PaintingContext context,\n  Offset center, {\n  RenderBox parentBox,\n  SliderThemeData sliderTheme,\n  Animation&lt;double&gt; enableAnimation,\n  TextDirection textDirection,\n  Offset thumbCenter,\n  bool isEnabled,\n}) {\n  \/\/ The paint color of the tick mark depends on its position relative\n  \/\/ to the thumb and the text direction.\n  Color begin;\n  Color end;\n  switch (textDirection) {\n    case TextDirection.ltr:\n      final bool isTickMarkRightOfThumb = center.dx &gt; thumbCenter.dx;\n      begin = isTickMarkRightOfThumb ? sliderTheme.disabledInactiveTickMarkColor : sliderTheme.disabledActiveTickMarkColor;\n      end = isTickMarkRightOfThumb ? sliderTheme.inactiveTickMarkColor : sliderTheme.activeTickMarkColor;\n      break;\n    case TextDirection.rtl:\n      final bool isTickMarkLeftOfThumb = center.dx &lt; thumbCenter.dx;\n      begin = isTickMarkLeftOfThumb ? sliderTheme.disabledInactiveTickMarkColor : sliderTheme.disabledActiveTickMarkColor;\n      end = isTickMarkLeftOfThumb ? sliderTheme.inactiveTickMarkColor : sliderTheme.activeTickMarkColor;\n      break;\n  }\n  final Paint paint = Paint()..color = ColorTween(begin: begin, end: end).evaluate(enableAnimation);\n\n  \/\/ The tick marks are tiny circles that are the same height as the track.\n  final double tickMarkRadius = getPreferredSize(\n    isEnabled: isEnabled,\n    sliderTheme: sliderTheme,\n  ).width \/ 2;\n  context.canvas.drawCircle(center, tickMarkRadius, paint);\n}<\/code><\/pre>\n    ",
            "href": "material\/RoundSliderTickMarkShape\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.RoundSliderTickMarkShape",
            "params": [
                {
                    "name": "center",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "enableAnimation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "isEnabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "parentBox",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "sliderTheme",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "thumbCenter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The preferred radius of the round tick mark.<\/p>\n<p>If it is not provided, then half of the track height is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double tickMarkRadius\n\n<\/code><\/pre>\n        ",
            "href": "material\/RoundSliderTickMarkShape\/tickMarkRadius.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.RoundSliderTickMarkShape",
            "params": []
        }
    ]
}