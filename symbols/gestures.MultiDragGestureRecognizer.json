{
    "desc": "<p>Recognizes movement on a per-pointer basis.<\/p>\n<p>In contrast to <a href=\"gestures\/DragGestureRecognizer-class.html\">DragGestureRecognizer<\/a>, <a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> watches\neach pointer separately, which means multiple drags can be recognized\nconcurrently if multiple pointers are in contact with the screen.<\/p>\n<p><a href=\"gestures\/MultiDragGestureRecognizer-class.html\">MultiDragGestureRecognizer<\/a> is not intended to be used directly. Instead,\nconsider using one of its subclasses to recognize specific types for drag\ngestures.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"gestures\/ImmediateMultiDragGestureRecognizer-class.html\">ImmediateMultiDragGestureRecognizer<\/a>, the most straight-forward variant\nof multi-pointer drag gesture recognizer.<\/li>\n<li>\n<a href=\"gestures\/HorizontalMultiDragGestureRecognizer-class.html\">HorizontalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart horizontally.<\/li>\n<li>\n<a href=\"gestures\/VerticalMultiDragGestureRecognizer-class.html\">VerticalMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart vertically.<\/li>\n<li>\n<a href=\"gestures\/DelayedMultiDragGestureRecognizer-class.html\">DelayedMultiDragGestureRecognizer<\/a>, which only recognizes drags that\nstart after a long-press gesture.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "gestures\/MultiDragGestureRecognizer-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "gestures",
    "name": "gestures.MultiDragGestureRecognizer",
    "shortname": "MultiDragGestureRecognizer",
    "extends": [
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "realImplementors": [
        "gestures.DelayedMultiDragGestureRecognizer",
        "gestures.HorizontalMultiDragGestureRecognizer",
        "gestures.ImmediateMultiDragGestureRecognizer",
        "gestures.VerticalMultiDragGestureRecognizer"
    ],
    "events": [
        {
            "desc": "<p>Called when this class recognizes the start of a drag gesture.<\/p>\n<p>The remaining notifications for this drag gesture are delivered to the\n<a href=\"gestures\/Drag-class.html\">Drag<\/a> object returned by this callback.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureMultiDragStartCallback onStart\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/MultiDragGestureRecognizer\/onStart.html",
            "isDeprecated": false,
            "type": "gestures.GestureMultiDragStartCallback",
            "name": "onStart",
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Initialize the object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MultiDragGestureRecognizer({\n  @required Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
            "href": "gestures\/MultiDragGestureRecognizer\/MultiDragGestureRecognizer.html",
            "isDeprecated": "0",
            "type": "",
            "name": "MultiDragGestureRecognizer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": [
                {
                    "name": "debugOwner",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "kind",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.PointerDeviceKind"
                }
            ]
        },
        {
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  assert(_pointers != null);\n  final T state = _pointers[pointer];\n  if (state == null)\n    return; \/\/ We might already have canceled this drag if the up comes before the accept.\n  state.accepted((Offset initialPosition) =&gt; _startDrag(initialPosition, pointer));\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MultiDragGestureRecognizer\/acceptGesture.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "acceptGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/MultiDragGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerDownEvent event) {\n  assert(_pointers != null);\n  assert(event.pointer != null);\n  assert(event.position != null);\n  assert(!_pointers.containsKey(event.pointer));\n  final T state = createNewPointerState(event);\n  _pointers[event.pointer] = state;\n  GestureBinding.instance.pointerRouter.addRoute(event.pointer, _handleEvent);\n  state._setArenaEntry(GestureBinding.instance.gestureArena.add(event.pointer, this));\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MultiDragGestureRecognizer\/addAllowedPointer.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "addAllowedPointer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerDownEvent"
                }
            ]
        },
        {
            "desc": "<p>Subclasses should override this method to create per-pointer state\nobjects to track the pointer associated with the given event.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nT createNewPointerState(PointerDownEvent event);<\/code><\/pre>\n    ",
            "href": "gestures\/MultiDragGestureRecognizer\/createNewPointerState.html",
            "isDeprecated": "0",
            "type": "<T>",
            "name": "createNewPointerState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerDownEvent"
                }
            ]
        },
        {
            "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _pointers.keys.toList().forEach(_removeState);\n  assert(_pointers.isEmpty);\n  _pointers = null;\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MultiDragGestureRecognizer\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  assert(_pointers != null);\n  if (_pointers.containsKey(pointer)) {\n    final T state = _pointers[pointer];\n    assert(state != null);\n    state.rejected();\n    _removeState(pointer);\n  } \/\/ else we already preemptively forgot about it (e.g. we got an up event)\n}<\/code><\/pre>\n    ",
            "href": "gestures\/MultiDragGestureRecognizer\/rejectGesture.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "rejectGesture",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.MultiDragGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": []
}