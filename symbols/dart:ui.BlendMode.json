{
    "desc": "<p>Algorithms to use when painting on the canvas.<\/p>\n<p>When drawing a shape or image onto a canvas, different algorithms can be\nused to blend the pixels. The different values of <a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a> specify\ndifferent such algorithms.<\/p>\n<p>Each algorithm has two inputs, the <em>source<\/em>, which is the image being drawn,\nand the <em>destination<\/em>, which is the image into which the source image is\nbeing composited. The destination is often thought of as the <em>background<\/em>.\nThe source and destination both have four color channels, the red, green,\nblue, and alpha channels. These are typically represented as numbers in the\nrange 0.0 to 1.0. The output of the algorithm also has these same four\nchannels, with values computed from the source and destination.<\/p>\n<p>The documentation of each value below describes how the algorithm works. In\neach case, an image shows the output of blending a source image with a\ndestination image. In the images below, the destination is represented by an\nimage with horizontal lines and an opaque landscape photograph, and the\nsource is represented by an image with vertical lines (the same lines but\nrotated) and a bird clip-art image. The <a href=\"dart-ui\/BlendMode-class.html\">src<\/a> mode shows only the source\nimage, and the <a href=\"dart-ui\/BlendMode-class.html\">dst<\/a> mode shows only the destination image. In the\ndocumentation below, the transparency is illustrated by a checkerboard\npattern. The <a href=\"dart-ui\/BlendMode-class.html\">clear<\/a> mode drops both the source and destination, resulting\nin an output that is entirely transparent (illustrated by a solid\ncheckerboard pattern).<\/p>\n<p>The horizontal and vertical bars in these images show the red, green, and\nblue channels with varying opacity levels, then all three color channels\ntogether with those same varying opacity levels, then all three color\nchannels set to zero with those varying opacity levels, then two bars showing\na red\/green\/blue repeating gradient, the first with full opacity and the\nsecond with partial opacity, and finally a bar with the three color channels\nset to zero but the opacity varying in a repeating gradient.<\/p>\n<h2 id=\"application-to-the-canvas-api\">Application to the <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> API<\/h2>\n<p>When using <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> and <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a>, the blend mode of the\n<a href=\"dart-ui\/Paint-class.html\">Paint<\/a> given to the <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> will be applied when\n<a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a> is called. Each call to <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> introduces a new\nlayer onto which shapes and images are painted; when <a href=\"dart-ui\/Canvas\/restore.html\">Canvas.restore<\/a> is\ncalled, that layer is then composited onto the parent layer, with the source\nbeing the most-recently-drawn shapes and images, and the destination being\nthe parent layer. (For the first <a href=\"dart-ui\/Canvas\/saveLayer.html\">Canvas.saveLayer<\/a> call, the parent layer\nis the canvas itself.)<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Paint\/blendMode.html\">Paint.blendMode<\/a>, which uses <a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a> to define the compositing\nstrategy.<\/li><\/ul>",
    "dtype": "enum",
    "example": "",
    "href": "dart-ui\/BlendMode-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "dart:ui",
    "name": "dart:ui.BlendMode",
    "shortname": "BlendMode",
    "extends": [],
    "is_enum": true,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [],
    "props": [
        {
            "desc": "\n          <p>Drop both the source and destination images, leaving nothing.<\/p>\n<p>This corresponds to the \"clear\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_clear.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(0)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "clear",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Take the hue and saturation of the source image, and the luminosity of the\ndestination image.<\/p>\n<p>The effect is to tint the destination image with the source image.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>. Regions that are entirely transparent in the source image take\ntheir hue and saturation from the destination.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_color.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">hue<\/a>, which is a similar but weaker effect.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">softLight<\/a>, which is a similar tinting effect but also tints white.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">saturation<\/a>, which only applies the saturation of the source image.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(27)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "color",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Divide the inverse of the destination by the the source, and inverse the result.<\/p>\n<p>Inverting the components means that a fully saturated channel (opaque\nwhite) is treated as the value 0.0, and values normally treated as 0.0\n(black, transparent) are treated as 1.0.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_colorBurn.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(19)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "colorBurn",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Divide the destination by the inverse of the source.<\/p>\n<p>Inverting the components means that a fully saturated channel (opaque\nwhite) is treated as the value 0.0, and values normally treated as 0.0\n(black, transparent) are treated as 1.0.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_colorDodge.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(18)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "colorDodge",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Composite the source and destination image by choosing the lowest value\nfrom each color channel.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_darken.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(16)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "darken",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Subtract the smaller value from the bigger value for each channel.<\/p>\n<p>Compositing black has no effect; compositing white inverts the colors of\nthe other image.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>.<\/p>\n<p>The effect is similar to <a href=\"dart-ui\/BlendMode-class.html\">exclusion<\/a> but harsher.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_difference.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(22)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "difference",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Drop the source image, only paint the destination image.<\/p>\n<p>Conceptually, the source image is discarded, leaving the destination\nuntouched.<\/p>\n<p>This corresponds to the \"Destination\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_dst.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(2)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "dst",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Composite the destination image over the source image, but only where it\noverlaps the source.<\/p>\n<p>This corresponds to the \"Destination atop Source\" Porter-Duff operator.<\/p>\n<p>This is essentially the <a href=\"dart-ui\/BlendMode-class.html\">dstOver<\/a> operator, but with the output's opacity\nchannel being set to that of the source image instead of being a\ncombination of both image's opacity channels.<\/p>\n<p>For a variant with the source on top instead of the destination, see\n<a href=\"dart-ui\/BlendMode-class.html\">srcATop<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_dstATop.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(10)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "dstATop",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Show the destination image, but only where the two images overlap. The\nsource image is not rendered, it is treated merely as a mask. The color\nchannels of the source are ignored, only the opacity has an effect.<\/p>\n<p>To show the source image instead, consider <a href=\"dart-ui\/BlendMode-class.html\">srcIn<\/a>.<\/p>\n<p>To reverse the semantic of the mask (only showing the source where the\ndestination is present, rather than where it is absent), consider <a href=\"dart-ui\/BlendMode-class.html\">dstOut<\/a>.<\/p>\n<p>This corresponds to the \"Destination in Source\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_dstIn.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(6)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "dstIn",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Show the destination image, but only where the two images do not overlap. The\nsource image is not rendered, it is treated merely as a mask. The color\nchannels of the source are ignored, only the opacity has an effect.<\/p>\n<p>To show the source image instead, consider <a href=\"dart-ui\/BlendMode-class.html\">srcOut<\/a>.<\/p>\n<p>To reverse the semantic of the mask (only showing the destination where the\nsource is present, rather than where it is absent), consider <a href=\"dart-ui\/BlendMode-class.html\">dstIn<\/a>.<\/p>\n<p>This corresponds to the \"Destination out Source\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_dstOut.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(8)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "dstOut",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Composite the source image under the destination image.<\/p>\n<p>This is the opposite of <a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>.<\/p>\n<p>This corresponds to the \"Destination over Source\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_dstOver.png\"><\/p>\n<p>This is useful when the source image should have been painted before the\ndestination image, but could not be.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(4)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "dstOver",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Subtract double the product of the two images from the sum of the two\nimages.<\/p>\n<p>Compositing black has no effect; compositing white inverts the colors of\nthe other image.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>.<\/p>\n<p>The effect is similar to <a href=\"dart-ui\/BlendMode-class.html\">difference<\/a> but softer.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_exclusion.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(23)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "exclusion",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Multiply the components of the source and destination images after\nadjusting them to favor the source.<\/p>\n<p>Specifically, if the source value is smaller, this multiplies it with the\ndestination value, whereas is the destination value is smaller, it\nmultiplies the inverse of the destination value with the inverse of the\nsource value, then inverts the result.<\/p>\n<p>Inverting the components means that a fully saturated channel (opaque\nwhite) is treated as the value 0.0, and values normally treated as 0.0\n(black, transparent) are treated as 1.0.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_hardLight.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a>, which always multiplies the values.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">screen<\/a>, which always multiplies the inverses of the values.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">overlay<\/a>, which is similar to <a href=\"dart-ui\/BlendMode-class.html\">hardLight<\/a> but favors the destination\nimage instead of the source image.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(20)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "hardLight",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Take the hue of the source image, and the saturation and luminosity of the\ndestination image.<\/p>\n<p>The effect is to tint the destination image with the source image.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>. Regions that are entirely transparent in the source image take\ntheir hue from the destination.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_hue.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">color<\/a>, which is a similar but stronger effect as it also applies the\nsaturation of the source image.<\/li>\n<li>\n<a href=\"painting\/HSVColor-class.html\">HSVColor<\/a>, which allows colors to be expressed using Hue rather than\nthe red\/green\/blue channels of <a href=\"dart-ui\/Color-class.html\">Color<\/a>.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(25)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "hue",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Composite the source and destination image by choosing the highest value\nfrom each color channel.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_lighten.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(17)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "lighten",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Take the luminosity of the source image, and the hue and saturation of the\ndestination image.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>. Regions that are entirely transparent in the source image take\ntheir luminosity from the destination.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_luminosity.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">saturation<\/a>, which applies the saturation of the source image to the\ndestination.<\/li>\n<li>\n<a href=\"dart-ui\/ImageFilter\/ImageFilter.blur.html\">ImageFilter.blur<\/a>, which can be used with <a href=\"widgets\/BackdropFilter-class.html\">BackdropFilter<\/a> for a\nrelated effect.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(28)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "luminosity",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Multiply the color components of the source and destination images.<\/p>\n<p>This can only result in the same or darker colors (multiplying by white,\n1.0, results in no change; multiplying by black, 0.0, results in black).<\/p>\n<p>When compositing two opaque images, this has similar effect to overlapping\ntwo transparencies on a projector.<\/p>\n<p>For a variant that also multiplies the alpha channel, consider <a href=\"dart-ui\/BlendMode-class.html\">multiply<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_modulate.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">screen<\/a>, which does a similar computation but inverted.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">overlay<\/a>, which combines <a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a> and <a href=\"dart-ui\/BlendMode-class.html\">screen<\/a> to favor the\ndestination image.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">hardLight<\/a>, which combines <a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a> and <a href=\"dart-ui\/BlendMode-class.html\">screen<\/a> to favor the\nsource image.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(13)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "modulate",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Multiply the components of the source and destination images, including\nthe alpha channel.<\/p>\n<p>This can only result in the same or darker colors (multiplying by white,\n1.0, results in no change; multiplying by black, 0.0, results in black).<\/p>\n<p>Since the alpha channel is also multiplied, a fully-transparent pixel\n(opacity 0.0) in one image results in a fully transparent pixel in the\noutput. This is similar to <a href=\"dart-ui\/BlendMode-class.html\">dstIn<\/a>, but with the colors combined.<\/p>\n<p>For a variant that multiplies the colors but does not multiply the alpha\nchannel, consider <a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_multiply.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(24)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "multiply",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Multiply the components of the source and destination images after\nadjusting them to favor the destination.<\/p>\n<p>Specifically, if the destination value is smaller, this multiplies it with\nthe source value, whereas is the source value is smaller, it multiplies\nthe inverse of the source value with the inverse of the destination value,\nthen inverts the result.<\/p>\n<p>Inverting the components means that a fully saturated channel (opaque\nwhite) is treated as the value 0.0, and values normally treated as 0.0\n(black, transparent) are treated as 1.0.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_overlay.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a>, which always multiplies the values.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">screen<\/a>, which always multiplies the inverses of the values.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">hardLight<\/a>, which is similar to <a href=\"dart-ui\/BlendMode-class.html\">overlay<\/a> but favors the source image\ninstead of the destination image.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(15)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "overlay",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Sum the components of the source and destination images.<\/p>\n<p>Transparency in a pixel of one of the images reduces the contribution of\nthat image to the corresponding output pixel, as if the color of that\npixel in that image was darker.<\/p>\n<p>This corresponds to the \"Source plus Destination\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_plus.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(12)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "plus",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Take the saturation of the source image, and the hue and luminosity of the\ndestination image.<\/p>\n<p>The opacity of the output image is computed in the same way as for\n<a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a>. Regions that are entirely transparent in the source image take\ntheir saturation from the destination.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_hue.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">color<\/a>, which also applies the hue of the source image.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">luminosity<\/a>, which applies the luminosity of the source image to the\ndestination.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(26)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "saturation",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Multiply the inverse of the components of the source and destination\nimages, and inverse the result.<\/p>\n<p>Inverting the components means that a fully saturated channel (opaque\nwhite) is treated as the value 0.0, and values normally treated as 0.0\n(black, transparent) are treated as 1.0.<\/p>\n<p>This is essentially the same as <a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a> blend mode, but with the values\nof the colors inverted before the multiplication and the result being\ninverted back before rendering.<\/p>\n<p>This can only result in the same or lighter colors (multiplying by black,\n1.0, results in no change; multiplying by white, 0.0, results in white).\nSimilarly, in the alpha channel, it can only result in more opaque colors.<\/p>\n<p>This has similar effect to two projectors displaying their images on the\nsame screen simultaneously.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_screen.png\"><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a>, which does a similar computation but without inverting the\nvalues.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">overlay<\/a>, which combines <a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a> and <a href=\"dart-ui\/BlendMode-class.html\">screen<\/a> to favor the\ndestination image.<\/li>\n<li>\n<a href=\"dart-ui\/BlendMode-class.html\">hardLight<\/a>, which combines <a href=\"dart-ui\/BlendMode-class.html\">modulate<\/a> and <a href=\"dart-ui\/BlendMode-class.html\">screen<\/a> to favor the\nsource image.<\/li>\n<\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(14)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "screen",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Use <a href=\"dart-ui\/BlendMode-class.html\">colorDodge<\/a> for source values below 0.5 and <a href=\"dart-ui\/BlendMode-class.html\">colorBurn<\/a> for source\nvalues above 0.5.<\/p>\n<p>This results in a similar but softer effect than <a href=\"dart-ui\/BlendMode-class.html\">overlay<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_softLight.png\"><\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/BlendMode-class.html\">color<\/a>, which is a more subtle tinting effect.<\/li><\/ul>\n<div>\n            <span class=\"signature\"><code>const BlendMode(21)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "softLight",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Drop the destination image, only paint the source image.<\/p>\n<p>Conceptually, the destination is first cleared, then the source image is\npainted.<\/p>\n<p>This corresponds to the \"Copy\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_src.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(1)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "src",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Composite the source image over the destination image, but only where it\noverlaps the destination.<\/p>\n<p>This corresponds to the \"Source atop Destination\" Porter-Duff operator.<\/p>\n<p>This is essentially the <a href=\"dart-ui\/BlendMode-class.html\">srcOver<\/a> operator, but with the output's opacity\nchannel being set to that of the destination image instead of being a\ncombination of both image's opacity channels.<\/p>\n<p>For a variant with the destination on top instead of the source, see\n<a href=\"dart-ui\/BlendMode-class.html\">dstATop<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_srcATop.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(9)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "srcATop",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Show the source image, but only where the two images overlap. The\ndestination image is not rendered, it is treated merely as a mask. The\ncolor channels of the destination are ignored, only the opacity has an\neffect.<\/p>\n<p>To show the destination image instead, consider <a href=\"dart-ui\/BlendMode-class.html\">dstIn<\/a>.<\/p>\n<p>To reverse the semantic of the mask (only showing the source where the\ndestination is absent, rather than where it is present), consider\n<a href=\"dart-ui\/BlendMode-class.html\">srcOut<\/a>.<\/p>\n<p>This corresponds to the \"Source in Destination\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_srcIn.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(5)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "srcIn",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Show the source image, but only where the two images do not overlap. The\ndestination image is not rendered, it is treated merely as a mask. The color\nchannels of the destination are ignored, only the opacity has an effect.<\/p>\n<p>To show the destination image instead, consider <a href=\"dart-ui\/BlendMode-class.html\">dstOut<\/a>.<\/p>\n<p>To reverse the semantic of the mask (only showing the source where the\ndestination is present, rather than where it is absent), consider <a href=\"dart-ui\/BlendMode-class.html\">srcIn<\/a>.<\/p>\n<p>This corresponds to the \"Source out Destination\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_srcOut.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(7)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "srcOut",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Composite the source image over the destination image.<\/p>\n<p>This is the default value. It represents the most intuitive case, where\nshapes are painted on top of what is below, with transparent areas showing\nthe destination layer.<\/p>\n<p>This corresponds to the \"Source over Destination\" Porter-Duff operator,\nalso known as the Painter's Algorithm.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_srcOver.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(3)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "srcOver",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">BlendMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "values",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        },
        {
            "desc": "\n          <p>Apply a bitwise <code>xor<\/code> operator to the source and destination images. This\nleaves transparency where they would overlap.<\/p>\n<p>This corresponds to the \"Source xor Destination\" Porter-Duff operator.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/blend_mode_xor.png\"><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const BlendMode(11)<\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "xor",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.BlendMode",
            "params": []
        }
    ]
}