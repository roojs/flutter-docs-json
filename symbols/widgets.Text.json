{
    "desc": "<p>A run of text with a single style.<\/p>\n<p>The <a href=\"widgets\/Text-class.html\">Text<\/a> widget displays a string of text with single style. The string\nmight break across multiple lines or might all be displayed on the same line\ndepending on the layout constraints.<\/p>\n<p>The <a href=\"widgets\/Text\/style.html\">style<\/a> argument is optional. When omitted, the text will use the style\nfrom the closest enclosing <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>. If the given style's\n<a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> property is true (the default), the given style will\nbe merged with the closest enclosing <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>. This merging\nbehavior is useful, for example, to make the text bold while using the\ndefault font family and size.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'Hello, $_name! How are you?',\n  textAlign: TextAlign.center,\n  overflow: TextOverflow.ellipsis,\n  style: TextStyle(fontWeight: FontWeight.bold),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Using the <a href=\"widgets\/Text\/Text.rich.html\">Text.rich<\/a> constructor, the <a href=\"widgets\/Text-class.html\">Text<\/a> widget can\ndisplay a paragraph with differently styled <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s. The sample\nthat follows displays \"Hello beautiful world\" with different styles\nfor each word.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text.rich(\n  TextSpan(\n    text: 'Hello', \/\/ default text style\n    children: &lt;TextSpan&gt;[\n      TextSpan(text: ' beautiful ', style: TextStyle(fontStyle: FontStyle.italic)),\n      TextSpan(text: 'world', style: TextStyle(fontWeight: FontWeight.bold)),\n    ],\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h2 id=\"interactivity\">Interactivity<\/h2>\n<p>To make <a href=\"widgets\/Text-class.html\">Text<\/a> react to touch events, wrap it in a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> widget\nwith a <a href=\"widgets\/GestureDetector\/onTap.html\">GestureDetector.onTap<\/a> handler.<\/p>\n<p>In a material design application, consider using a <a href=\"material\/FlatButton-class.html\">FlatButton<\/a> instead, or\nif that isn't appropriate, at least using an <a href=\"material\/InkWell-class.html\">InkWell<\/a> instead of\n<a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>.<\/p>\n<p>To make sections of the text interactive, use <a href=\"widgets\/RichText-class.html\">RichText<\/a> and specify a\n<a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a> as the <a href=\"painting\/TextSpan\/recognizer.html\">TextSpan.recognizer<\/a> of the relevant part of\nthe text.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/RichText-class.html\">RichText<\/a>, which gives you more control over the text styles.<\/li>\n<li>\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, which sets default styles for <a href=\"widgets\/Text-class.html\">Text<\/a> widgets.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Text-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Text",
    "shortname": "Text",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a text widget.<\/p>\n<p>If the <code>style<\/code> argument is null, the text will use the style from the\nclosest enclosing <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.<\/p>\n<p>The <code>data<\/code> parameter must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Text(\n  this.data, {\n  Key key,\n  this.style,\n  this.strutStyle,\n  this.textAlign,\n  this.textDirection,\n  this.locale,\n  this.softWrap,\n  this.overflow,\n  this.textScaleFactor,\n  this.maxLines,\n  this.semanticsLabel,\n}) : assert(\n       data != null,\n       'A non-null String must be provided to a Text widget.',\n     ),\n     textSpan = null,\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Text\/Text.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Text",
            "params": [
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "locale",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                },
                {
                    "name": "maxLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "overflow",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TextOverflow"
                },
                {
                    "name": "semanticsLabel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "softWrap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "strutStyle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.StrutStyle"
                },
                {
                    "name": "style",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "textAlign",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textScaleFactor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/Text\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final DefaultTextStyle defaultTextStyle = DefaultTextStyle.of(context);\n  TextStyle effectiveTextStyle = style;\n  if (style == null || style.inherit)\n    effectiveTextStyle = defaultTextStyle.style.merge(style);\n  if (MediaQuery.boldTextOverride(context))\n    effectiveTextStyle = effectiveTextStyle.merge(const TextStyle(fontWeight: FontWeight.bold));\n  Widget result = RichText(\n    textAlign: textAlign ?? defaultTextStyle.textAlign ?? TextAlign.start,\n    textDirection: textDirection, \/\/ RichText uses Directionality.of to obtain a default if this is null.\n    locale: locale, \/\/ RichText uses Localizations.localeOf to obtain a default if this is null\n    softWrap: softWrap ?? defaultTextStyle.softWrap,\n    overflow: overflow ?? defaultTextStyle.overflow,\n    textScaleFactor: textScaleFactor ?? MediaQuery.textScaleFactorOf(context),\n    maxLines: maxLines ?? defaultTextStyle.maxLines,\n    strutStyle: strutStyle,\n    text: TextSpan(\n      style: effectiveTextStyle,\n      text: data,\n      children: textSpan != null ? &lt;TextSpan&gt;[textSpan] : null,\n    ),\n  );\n  if (semanticsLabel != null) {\n    result = Semantics(\n      textDirection: textDirection,\n      label: semanticsLabel,\n      child: ExcludeSemantics(\n        child: result,\n      ),\n    );\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Text\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Text",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Text\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(StringProperty('data', data, showName: false));\n  if (textSpan != null) {\n    properties.add(textSpan.toDiagnosticsNode(name: 'textSpan', style: DiagnosticsTreeStyle.transition));\n  }\n  style?.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Locale&gt;('locale', locale, defaultValue: null));\n  properties.add(FlagProperty('softWrap', value: softWrap, ifTrue: 'wrapping at box width', ifFalse: 'no wrapping except at line break characters', showName: true));\n  properties.add(EnumProperty&lt;TextOverflow&gt;('overflow', overflow, defaultValue: null));\n  properties.add(DoubleProperty('textScaleFactor', textScaleFactor, defaultValue: null));\n  properties.add(IntProperty('maxLines', maxLines, defaultValue: null));\n  if (semanticsLabel != null) {\n    properties.add(StringProperty('semanticsLabel', semanticsLabel));\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Text\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Text",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The text to display.<\/p>\n<p>This will be null if a <a href=\"widgets\/Text\/textSpan.html\">textSpan<\/a> is provided instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String data\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/data.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>Used to select a font when the same Unicode character can\nbe rendered differently, depending on the locale.<\/p>\n<p>It's rarely necessary to set this property. By default its value\nis inherited from the enclosing app with <code>Localizations.localeOf(context)<\/code>.<\/p>\n<p>See <a href=\"widgets\/Text\/locale.html\">RenderParagraph.locale<\/a> for more information.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/locale.html",
            "isDeprecated": "0",
            "type": "dart:ui.Locale",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>An optional maximum number of lines for the text to span, wrapping if necessary.\nIf the text exceeds the given number of lines, it will be truncated according\nto <a href=\"widgets\/Text\/overflow.html\">overflow<\/a>.<\/p>\n<p>If this is 1, text will not wrap. Otherwise, text will be wrapped at the\nedge of the box.<\/p>\n<p>If this is null, but there is an ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> that specifies\nan explicit number for its <a href=\"widgets\/Text\/maxLines.html\">DefaultTextStyle.maxLines<\/a>, then the\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> value will take precedence. You can use a <a href=\"widgets\/RichText-class.html\">RichText<\/a>\nwidget directly to entirely override the <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLines\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/maxLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>How visual overflow should be handled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextOverflow overflow\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/overflow.html",
            "isDeprecated": "0",
            "type": "rendering.TextOverflow",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>An alternative semantics label for this text.<\/p>\n<p>If present, the semantics of this widget will contain this value instead\nof the actual text.<\/p>\n<p>This is useful for replacing abbreviations or shorthands with the full\ntext value:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Text(r'$$', semanticsLabel: 'Double dollars')\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String semanticsLabel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/semanticsLabel.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>Whether the text should break at soft line breaks.<\/p>\n<p>If false, the glyphs in the text will be positioned as if there was unlimited horizontal space.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool softWrap\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/softWrap.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>The strut style to use. Strut style defines the strut, which sets minimum\nvertical layout metrics.<\/p>\n<p>Omitting or providing null will disable strut.<\/p>\n<p>Omitting or providing null for any properties of <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> will result in\ndefault values being used. It is highly recommended to at least specify a\n<code>fontSize<\/code>.<\/p>\n<p>See <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> for details.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StrutStyle strutStyle\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/strutStyle.html",
            "isDeprecated": "0",
            "type": "painting.StrutStyle",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>If non-null, the style to use for this text.<\/p>\n<p>If the style's \"inherit\" property is true, the style will be merged with\nthe closest enclosing <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>. Otherwise, the style will\nreplace the closest enclosing <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle style\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/style.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>How the text should be aligned horizontally.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAlign textAlign\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/textAlign.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextAlign",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>The directionality of the text.<\/p>\n<p>This decides how <a href=\"widgets\/Text\/textAlign.html\">textAlign<\/a> values like <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a> are interpreted.<\/p>\n<p>This is also used to disambiguate how to render bidirectional text. For\nexample, if the <a href=\"widgets\/Text\/data.html\">data<\/a> is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, if any.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n<p>The value given to the constructor as textScaleFactor. If null, will\nuse the <a href=\"widgets\/Text\/textScaleFactor.html\">MediaQueryData.textScaleFactor<\/a> obtained from the ambient\n<a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>, or 1.0 if there is no <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> in scope.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double textScaleFactor\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/textScaleFactor.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "widgets.Text",
            "params": []
        },
        {
            "desc": "<p>The text to display as a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>.<\/p>\n<p>This will be null if <a href=\"widgets\/Text\/data.html\">data<\/a> is provided instead.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSpan textSpan\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Text\/textSpan.html",
            "isDeprecated": "0",
            "type": "painting.TextSpan",
            "memberOf": "widgets.Text",
            "params": []
        }
    ]
}