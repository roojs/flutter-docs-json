{
    "desc": "<p>Displays a row of small circular indicators, one per tab. The selected\ntab's indicator is highlighted. Often used in conjunction with a <a href=\"material\/TabBarView-class.html\">TabBarView<\/a>.<\/p>\n<p>If a <a href=\"material\/TabController-class.html\">TabController<\/a> is not provided, then there must be a <a href=\"material\/DefaultTabController-class.html\">DefaultTabController<\/a>\nancestor.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/TabPageSelector-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.TabPageSelector",
    "shortname": "TabPageSelector",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a compact widget that indicates which tab has been selected.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TabPageSelector({\n  Key key,\n  this.controller,\n  this.indicatorSize = 12.0,\n  this.color,\n  this.selectedColor,\n}) : assert(indicatorSize != null &amp;&amp; indicatorSize &gt; 0.0),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/TabPageSelector\/TabPageSelector.html",
            "isDeprecated": false,
            "type": "",
            "name": "TabPageSelector",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.TabPageSelector",
            "params": [
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "controller",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TabController"
                },
                {
                    "name": "indicatorSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "selectedColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/TabPageSelector\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final Color fixColor = color ?? Colors.transparent;\n  final Color fixSelectedColor = selectedColor ?? Theme.of(context).accentColor;\n  final ColorTween selectedColorTween = ColorTween(begin: fixColor, end: fixSelectedColor);\n  final ColorTween previousColorTween = ColorTween(begin: fixSelectedColor, end: fixColor);\n  final TabController tabController = controller ?? DefaultTabController.of(context);\n  assert(() {\n    if (tabController == null) {\n      throw FlutterError(\n        'No TabController for $runtimeType.\\n'\n        'When creating a $runtimeType, you must either provide an explicit TabController '\n        'using the \"controller\" property, or you must ensure that there is a '\n        'DefaultTabController above the $runtimeType.\\n'\n        'In this case, there was neither an explicit controller nor a default controller.'\n      );\n    }\n    return true;\n  }());\n  final Animation&lt;double&gt; animation = CurvedAnimation(\n    parent: tabController.animation,\n    curve: Curves.fastOutSlowIn,\n  );\n  return AnimatedBuilder(\n    animation: animation,\n    builder: (BuildContext context, Widget child) {\n      return Semantics(\n        label: 'Page ${tabController.index + 1} of ${tabController.length}',\n        child: Row(\n          mainAxisSize: MainAxisSize.min,\n          children: List&lt;Widget&gt;.generate(tabController.length, (int tabIndex) {\n            return _buildTabIndicator(tabIndex, tabController, selectedColorTween, previousColorTween);\n          }).toList(),\n        ),\n      );\n    },\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/TabPageSelector\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.TabPageSelector",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The indicator circle's fill color for unselected pages.<\/p>\n<p>If this parameter is null then the indicator is filled with <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabPageSelector\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.TabPageSelector",
            "params": []
        },
        {
            "desc": "<p>This widget's selection and animation state.<\/p>\n<p>If <a href=\"material\/TabController-class.html\">TabController<\/a> is not provided, then the value of <a href=\"material\/DefaultTabController\/of.html\">DefaultTabController.of<\/a>\nwill be used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TabController controller\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabPageSelector\/controller.html",
            "name": "controller",
            "isDeprecated": false,
            "type": "material.TabController",
            "memberOf": "material.TabPageSelector",
            "params": []
        },
        {
            "desc": "<p>The indicator circle's diameter (the default value is 12.0).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double indicatorSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabPageSelector\/indicatorSize.html",
            "name": "indicatorSize",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "material.TabPageSelector",
            "params": []
        },
        {
            "desc": "<p>The indicator circle's fill color for selected pages and border color\nfor all indicator circles.<\/p>\n<p>If this parameter is null then the indicator is filled with the theme's\naccent color, <a href=\"material\/ThemeData\/accentColor.html\">ThemeData.accentColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabPageSelector\/selectedColor.html",
            "name": "selectedColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "memberOf": "material.TabPageSelector",
            "params": []
        }
    ]
}