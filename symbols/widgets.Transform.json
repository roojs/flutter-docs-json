{
    "name": "widgets.Transform",
    "extends": [
        "widgets.SingleChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "Transform",
            "type": "",
            "desc": "<p>Creates a widget that transforms its child.<\/p>\n<p>The <code>transform<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Transform",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transform",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "painting.AlignmentGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transformHitTests",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/Transform\/Transform.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Transform({\n  Key key,\n  @required this.transform,\n  this.origin,\n  this.alignment,\n  this.transformHitTests = true,\n  Widget child,\n}) : assert(transform != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createRenderObject",
            "type": "rendering.RenderTransform",
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Transform",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/Transform\/createRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderTransform createRenderObject(BuildContext context) {\n  return RenderTransform(\n    transform: transform,\n    origin: origin,\n    alignment: alignment,\n    textDirection: Directionality.of(context),\n    transformHitTests: transformHitTests,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Transform.rotate",
            "type": "",
            "desc": "<p>Creates a widget that transforms its child using a rotation around the\ncenter.<\/p>\n<p>The <code>angle<\/code> argument must not be null. It gives the rotation in clockwise\nradians.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example rotates an orange box containing text around its center by\nfifteen degrees.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Transform.rotate(\n  angle: -math.pi \/ 12.0,\n  child: Container(\n    padding: const EdgeInsets.all(8.0),\n    color: const Color(0xFFE8581C),\n    child: const Text('Apartment for rent!'),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "static": false,
            "memberOf": "widgets.Transform",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "angle",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "painting.AlignmentGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transformHitTests",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/Transform\/Transform.rotate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Transform.rotate({\n  Key key,\n  @required double angle,\n  this.origin,\n  this.alignment = Alignment.center,\n  this.transformHitTests = true,\n  Widget child,\n}) : transform = Matrix4.rotationZ(angle),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Transform.scale",
            "type": "",
            "desc": "<p>Creates a widget that scales its child uniformly.<\/p>\n<p>The <code>scale<\/code> argument must not be null. It gives the scalar by which\nto multiply the <code>x<\/code> and <code>y<\/code> axes.<\/p>\n<p>The <code>alignment<\/code> controls the origin of the scale; by default, this is\nthe center of the box.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shrinks an orange box containing text such that each dimension\nis half the size it would otherwise be.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Transform.scale(\n  scale: 0.5,\n  child: Container(\n    padding: const EdgeInsets.all(8.0),\n    color: const Color(0xFFE8581C),\n    child: const Text('Bad Ideas'),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "static": false,
            "memberOf": "widgets.Transform",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "painting.AlignmentGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transformHitTests",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/Transform\/Transform.scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Transform.scale({\n  Key key,\n  @required double scale,\n  this.origin,\n  this.alignment = Alignment.center,\n  this.transformHitTests = true,\n  Widget child,\n}) : transform = Matrix4.diagonal3Values(scale, scale, 1.0),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Transform.translate",
            "type": "",
            "desc": "<p>Creates a widget that transforms its child using a translation.<\/p>\n<p>The <code>offset<\/code> argument must not be null. It specifies the translation.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shifts the silver-colored child down by fifteen pixels.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Transform.translate(\n  offset: const Offset(0.0, 15.0),\n  child: Container(\n    padding: const EdgeInsets.all(8.0),\n    color: const Color(0xFF7F7F7F),\n    child: const Text('Quarter'),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "static": false,
            "memberOf": "widgets.Transform",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transformHitTests",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/Transform\/Transform.translate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Transform.translate({\n  Key key,\n  @required Offset offset,\n  this.transformHitTests = true,\n  Widget child,\n}) : transform = Matrix4.translationValues(offset.dx, offset.dy, 0.0),\n     origin = null,\n     alignment = null,\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "updateRenderObject",
            "type": "",
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Transform\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/SingleChildRenderObjectWidget\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.Transform",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "renderObject",
                    "type": "rendering.RenderTransform",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/Transform\/updateRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderTransform renderObject) {\n  renderObject\n    ..transform = transform\n    ..origin = origin\n    ..alignment = alignment\n    ..textDirection = Directionality.of(context)\n    ..transformHitTests = transformHitTests;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "alignment",
            "type": "painting.AlignmentGeometry",
            "types": [],
            "desc": "<p>The alignment of the origin, relative to the size of the box.<\/p>\n<p>This is equivalent to setting an origin based on the size of the box.\nIf it is specified at the same time as the <a href=\"widgets\/Transform\/origin.html\">origin<\/a>, both are applied.<\/p>\n<p>An <a href=\"painting\/AlignmentDirectional\/start.html\">AlignmentDirectional.start<\/a> value is the same as an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nwhose <a href=\"painting\/Alignment\/x.html\">Alignment.x<\/a> value is <code>-1.0<\/code> if <code>textDirection<\/code> is\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>, and <code>1.0<\/code> if <code>textDirection<\/code> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>.\nSimilarly <code>AlignmentDirectional.end<\/code> is the same as an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nwhose <a href=\"painting\/Alignment\/x.html\">Alignment.x<\/a> value is <code>1.0<\/code> if <code>textDirection<\/code> is\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>, and <code>-1.0<\/code> if <code>textDirection<\/code> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>.<\/p>\n        ",
            "memberOf": "widgets.Transform",
            "isConstant": false,
            "href": "widgets\/Transform\/alignment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "origin",
            "type": "dart:ui.Offset",
            "types": [],
            "desc": "<p>The origin of the coordinate system (relative to the upper left corder of\nthis render object) in which to apply the matrix.<\/p>\n<p>Setting an origin is equivalent to conjugating the transform matrix by a\ntranslation. This property is provided just for convenience.<\/p>\n        ",
            "memberOf": "widgets.Transform",
            "isConstant": false,
            "href": "widgets\/Transform\/origin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset origin\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "transform",
            "type": "vector_math_64.Matrix4",
            "types": [],
            "desc": "<p>The matrix to transform the child by during painting.<\/p>\n        ",
            "memberOf": "widgets.Transform",
            "isConstant": false,
            "href": "widgets\/Transform\/transform.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Matrix4 transform\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "transformHitTests",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to apply the transformation when performing hit tests.<\/p>\n        ",
            "memberOf": "widgets.Transform",
            "isConstant": false,
            "href": "widgets\/Transform\/transformHitTests.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool transformHitTests\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/Transform-class.html",
    "desc": "<p>A widget that applies a transformation before painting its child.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example rotates and skews an orange box containing text, keeping the\ntop right corner pinned to its original position.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  color: Colors.black,\n  child: Transform(\n    alignment: Alignment.topRight,\n    transform: Matrix4.skewY(0.3)..rotateZ(-math.pi \/ 12.0),\n    child: Container(\n      padding: const EdgeInsets.all(8.0),\n      color: const Color(0xFFE8581C),\n      child: const Text('Apartment for rent!'),\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/RotatedBox-class.html\">RotatedBox<\/a>, which rotates the child widget during layout, not just\nduring painting.<\/li>\n<li>\n<a href=\"widgets\/FractionalTranslation-class.html\">FractionalTranslation<\/a>, which applies a translation to the child\nthat is relative to the child's size.<\/li>\n<li>\n<a href=\"widgets\/FittedBox-class.html\">FittedBox<\/a>, which sizes and positions its child widget to fit the parent\naccording to a given <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> discipline.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Transform"
}