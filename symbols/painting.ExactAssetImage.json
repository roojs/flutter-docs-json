{
    "name": "painting.ExactAssetImage",
    "extends": [
        "painting.AssetBundleImageProvider",
        "painting.AssetBundleImageKey",
        "painting.ImageProvider",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ExactAssetImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ExactAssetImage",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/ExactAssetImage\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ExactAssetImage typedOther = other;\n  return keyName == typedOther.keyName\n      &amp;&amp; scale == typedOther.scale\n      &amp;&amp; bundle == typedOther.bundle;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "ExactAssetImage",
            "type": "",
            "desc": "<p>Creates an object that fetches the given image from an asset bundle.<\/p>\n<p>The <code>assetName<\/code> and <code>scale<\/code> arguments must not be null. The <code>scale<\/code> arguments\ndefaults to 1.0. The <code>bundle<\/code> argument may be null, in which case the\nbundle provided in the <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> passed to the <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a> call\nwill be used instead.<\/p>\n<p>The <code>package<\/code> argument must be non-null when fetching an asset that is\nincluded in a package. See the documentation for the <a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a> class\nitself for details.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ExactAssetImage",
            "sig": "",
            "params": [
                {
                    "name": "assetName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bundle",
                    "type": "services.AssetBundle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "package",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/ExactAssetImage\/ExactAssetImage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ExactAssetImage(\n  this.assetName, {\n  this.scale = 1.0,\n  this.bundle,\n  this.package,\n}) : assert(assetName != null),\n     assert(scale != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "obtainKey",
            "type": "dart:async.Future<painting.AssetBundleImageKey>",
            "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/AssetBundleImageProvider\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ExactAssetImage",
            "sig": "",
            "params": [
                {
                    "name": "configuration",
                    "type": "painting.ImageConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ExactAssetImage\/obtainKey.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;AssetBundleImageKey&gt; obtainKey(ImageConfiguration configuration) {\n  return SynchronousFuture&lt;AssetBundleImageKey&gt;(AssetBundleImageKey(\n    bundle: bundle ?? configuration.bundle ?? rootBundle,\n    name: keyName,\n    scale: scale,\n  ));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "painting.AssetBundleImageKey"
            ]
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.ExactAssetImage",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/ExactAssetImage\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(name: \"$keyName\", scale: $scale, bundle: $bundle)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "assetName",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The name of the asset.<\/p>\n        ",
            "memberOf": "painting.ExactAssetImage",
            "isConstant": false,
            "href": "painting\/ExactAssetImage\/assetName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String assetName\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "bundle",
            "type": "services.AssetBundle",
            "types": [],
            "desc": "<p>The bundle from which the image will be obtained.<\/p>\n<p>If the provided <a href=\"painting\/ExactAssetImage\/bundle.html\">bundle<\/a> is null, the bundle provided in the\n<a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> passed to the <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a> call will be used instead. If\nthat is also null, the <a href=\"services\/rootBundle.html\">rootBundle<\/a> is used.<\/p>\n<p>The image is obtained by calling <a href=\"painting\/AssetBundleImageProvider\/load.html\">AssetBundle.load<\/a> on the given <a href=\"painting\/ExactAssetImage\/bundle.html\">bundle<\/a>\nusing the key given by <a href=\"painting\/ExactAssetImage\/keyName.html\">keyName<\/a>.<\/p>\n        ",
            "memberOf": "painting.ExactAssetImage",
            "isConstant": false,
            "href": "painting\/ExactAssetImage\/bundle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AssetBundle bundle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ExactAssetImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.ExactAssetImage",
            "isConstant": false,
            "href": "painting\/ExactAssetImage\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(keyName, scale, bundle);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "keyName",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The key to use to obtain the resource from the <a href=\"painting\/ExactAssetImage\/bundle.html\">bundle<\/a>. This is the\nargument passed to <a href=\"painting\/AssetBundleImageProvider\/load.html\">AssetBundle.load<\/a>.<\/p>\n        ",
            "memberOf": "painting.ExactAssetImage",
            "isConstant": false,
            "href": "painting\/ExactAssetImage\/keyName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get keyName =&gt; package == null ? assetName : 'packages\/$package\/$assetName';<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "package",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The name of the package from which the image is included. See the\ndocumentation for the <a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a> class itself for details.<\/p>\n        ",
            "memberOf": "painting.ExactAssetImage",
            "isConstant": false,
            "href": "painting\/ExactAssetImage\/package.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String package\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scale",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
            "memberOf": "painting.ExactAssetImage",
            "isConstant": false,
            "href": "painting\/ExactAssetImage\/scale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "painting\/ExactAssetImage-class.html",
    "desc": "<p>Fetches an image from an <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>, associating it with the given scale.<\/p>\n<p>This implementation requires an explicit final <a href=\"painting\/ExactAssetImage\/assetName.html\">assetName<\/a> and <a href=\"painting\/ExactAssetImage\/scale.html\">scale<\/a> on\nconstruction, and ignores the device pixel ratio and size in the\nconfiguration passed into <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a>. For a resolution-aware variant that\nuses the configuration to pick an appropriate image based on the device\npixel ratio and size, see <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a>.<\/p>\n<h2 id=\"fetching-assets\">Fetching assets<\/h2>\n<p>When fetching an image provided by the app itself, use the <a href=\"painting\/ExactAssetImage\/assetName.html\">assetName<\/a>\nargument to name the asset to choose. For instance, consider a directory\n<code>icons<\/code> with an image <code>heart.png<\/code>. First, the <code>pubspec.yaml<\/code> of the project\nshould specify its assets in the <code>flutter<\/code> section:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  assets:\n    - icons\/heart.png\n<\/code><\/pre>\n<p>Then, to fetch the image and associate it with scale <code>1.5<\/code>, use<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetImage('icons\/heart.png', scale: 1.5)\n<\/code><\/pre>\n<h2 id=\"assets-in-packages\">Assets in packages<\/h2>\n<p>To fetch an asset from a package, the <a href=\"painting\/ExactAssetImage\/package.html\">package<\/a> argument must be provided.\nFor instance, suppose the structure above is inside a package called\n<code>my_icons<\/code>. Then to fetch the image, use:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetImage('icons\/heart.png', scale: 1.5, package: 'my_icons')\n<\/code><\/pre>\n<p>Assets used by the package itself should also be fetched using the <a href=\"painting\/ExactAssetImage\/package.html\">package<\/a>\nargument as above.<\/p>\n<p>If the desired asset is specified in the <code>pubspec.yaml<\/code> of the package, it\nis bundled automatically with the app. In particular, assets used by the\npackage itself must be specified in its <code>pubspec.yaml<\/code>.<\/p>\n<p>A package can also choose to have assets in its 'lib\/' folder that are not\nspecified in its <code>pubspec.yaml<\/code>. In this case for those images to be\nbundled, the app has to specify which ones to include. For instance a\npackage named <code>fancy_backgrounds<\/code> could have:<\/p>\n<pre class=\"language-dart\"><code>lib\/backgrounds\/background1.png\nlib\/backgrounds\/background2.png\nlib\/backgrounds\/background3.png\n<\/code><\/pre>\n<p>To include, say the first image, the <code>pubspec.yaml<\/code> of the app should specify\nit in the <code>assets<\/code> section:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  assets:\n    - packages\/fancy_backgrounds\/backgrounds\/background1.png\n<\/code><\/pre>\n<p>The <code>lib\/<\/code> is implied, so it should not be included in the asset path.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Image\/Image.asset.html\">Image.asset<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by\n<a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a> when using a scale.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ExactAssetImage"
}