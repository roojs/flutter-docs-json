{
    "desc": "<p>Allows access to the platform's accessibility services.<\/p>\n<p>Events sent by this service are handled by the platform-specific\naccessibility bridge in Flutter's engine.<\/p>\n<p>When possible, prefer using mechanisms like <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> to implicitly\ntrigger announcements over using this event.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "semantics\/SemanticsService-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "semantics",
    "name": "semantics.SemanticsService",
    "shortname": "SemanticsService",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Sends a semantic announcement.<\/p>\n<p>This should be used for announcement that are not seamlessly announced by\nthe system as a result of a UI state change.<\/p>\n<p>For example a camera application can use this method to make accessibility\nannouncements regarding objects in the viewfinder.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; announce(String message, TextDirection textDirection) async {\n  final AnnounceSemanticsEvent event = AnnounceSemanticsEvent(message, textDirection);\n  await SystemChannels.accessibility.send(event.toMap());\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsService\/announce.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "announce",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsService",
            "params": [
                {
                    "name": "message",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Sends a semantic announcement of a tooltip.<\/p>\n<p>Currently only honored on Android. The contents of <code>message<\/code> will be\nread by TalkBack.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; tooltip(String message) async {\n  final TooltipSemanticsEvent event = TooltipSemanticsEvent(message);\n  await SystemChannels.accessibility.send(event.toMap());\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsService\/tooltip.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "tooltip",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsService",
            "params": [
                {
                    "name": "message",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": []
}