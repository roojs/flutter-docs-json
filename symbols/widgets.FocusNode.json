{
    "desc": "<p>A leaf node in the focus tree that can receive focus.<\/p>\n<p>The focus tree keeps track of which widget is the user's current focus. The\nfocused widget often listens for keyboard events.<\/p>\n<p>To request focus, find the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for the current <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\nand call the <a href=\"widgets\/FocusScopeNode\/requestFocus.html\">FocusScopeNode.requestFocus<\/a> method:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">FocusScope.of(context).requestFocus(focusNode);\n<\/code><\/pre>\n<p>If your widget requests focus, be sure to call\n<code>FocusScope.of(context).reparentIfNeeded(focusNode);<\/code> in your <code>build<\/code>\nmethod to reparent your <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> if your widget moves from one\nlocation in the tree to another.<\/p>\n<h2 id=\"lifetime\">Lifetime<\/h2>\n<p>Focus nodes are long-lived objects. For example, if a stateful widget has a\nfocusable child widget, it should create a <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> in the\n<a href=\"widgets\/State\/initState.html\">State.initState<\/a> method, and <a href=\"widgets\/FocusNode\/dispose.html\">dispose<\/a> it in the <a href=\"widgets\/FocusNode\/dispose.html\">State.dispose<\/a> method,\nproviding the same <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> to the focusable child each time the\n<a href=\"widgets\/State\/build.html\">State.build<\/a> method is run. In particular, creating a <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> each time\n<a href=\"widgets\/State\/build.html\">State.build<\/a> is invoked will cause the focus to be lost each time the\nwidget is built.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a>, which is an interior node in the focus tree.<\/li>\n<li>\n<a href=\"widgets\/FocusScope\/of.html\">FocusScope.of<\/a>, which provides the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for a given\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/FocusNode-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.FocusNode",
    "shortname": "FocusNode",
    "extends": [
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "widgets\/FocusNode\/FocusNode.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FocusNode",
            "params": []
        },
        {
            "desc": "<p>Removes the keyboard token from this focus node if it has one.<\/p>\n<p>This mechanism helps distinguish between an input control gaining focus by\ndefault and gaining focus as a result of an explicit user action.<\/p>\n<p>When a focus node requests the focus (either via\n<a href=\"widgets\/FocusScopeNode\/requestFocus.html\">FocusScopeNode.requestFocus<\/a> or <a href=\"widgets\/FocusScopeNode\/autofocus.html\">FocusScopeNode.autofocus<\/a>), the focus\nnode receives a keyboard token if it does not already have one. Later,\nwhen the focus node becomes focused, the widget that manages the\n<a href=\"services\/TextInputConnection-class.html\">TextInputConnection<\/a> should show the keyboard (i.e., call\n<a href=\"services\/TextInputConnection\/show.html\">TextInputConnection.show<\/a>) only if it successfully consumes the keyboard\ntoken from the focus node.<\/p>\n<p>Returns whether this function successfully consumes a keyboard token.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool consumeKeyboardToken() {\n  if (!_hasKeyboardToken)\n    return false;\n  _hasKeyboardToken = false;\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusNode\/consumeKeyboardToken.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusNode",
            "params": []
        },
        {
            "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _manager?._willDisposeFocusNode(this);\n  _parent?._resignFocus(this);\n  assert(_parent == null);\n  assert(_manager == null);\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusNode\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusNode",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '${describeIdentity(this)}${hasFocus ? '(FOCUSED)' : ''}';<\/code><\/pre>\n    ",
            "href": "widgets\/FocusNode\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusNode",
            "params": []
        },
        {
            "desc": "<p>Cancels any outstanding requests for focus.<\/p>\n<p>This method is safe to call regardless of whether this node has ever\nrequested focus.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unfocus() {\n  _parent?._resignFocus(this);\n  assert(_parent == null);\n  assert(_manager == null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusNode\/unfocus.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusNode",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this node has the overall focus.<\/p>\n<p>A <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> has the overall focus when the node is focused in its\nparent <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> and <a href=\"widgets\/FocusScopeNode\/isFirstFocus.html\">FocusScopeNode.isFirstFocus<\/a> is true for\nthat scope and all its ancestor scopes.<\/p>\n<p>To request focus, find the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for the current <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\nand call the <a href=\"widgets\/FocusScopeNode\/requestFocus.html\">FocusScopeNode.requestFocus<\/a> method:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">FocusScope.of(context).requestFocus(focusNode);\n<\/code><\/pre>\n<p>This object notifies its listeners whenever this value changes.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasFocus =&gt; _manager?._currentFocus == this;<\/code><\/pre>\n        ",
            "href": "widgets\/FocusNode\/hasFocus.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.FocusNode",
            "params": []
        }
    ]
}