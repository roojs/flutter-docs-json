{
    "desc": "<p>A sliver that contains multiple box children that have the same extent in\nthe main axis.<\/p>\n<p><a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor-class.html\">RenderSliverFixedExtentBoxAdaptor<\/a> places its children in a linear array\nalong the main axis. Each child is forced to have the <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html\">itemExtent<\/a> in the\nmain axis and the <a href=\"rendering\/SliverConstraints\/crossAxisExtent.html\">SliverConstraints.crossAxisExtent<\/a> in the cross axis.<\/p>\n<p>Subclasses should override <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html\">itemExtent<\/a> to control the size of the children\nin the main axis. For a concrete subclass with a configurable <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html\">itemExtent<\/a>,\nsee <a href=\"rendering\/RenderSliverFixedExtentList-class.html\">RenderSliverFixedExtentList<\/a>.<\/p>\n<p><a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor-class.html\">RenderSliverFixedExtentBoxAdaptor<\/a> is more efficient than\n<a href=\"rendering\/RenderSliverList-class.html\">RenderSliverList<\/a> because <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor-class.html\">RenderSliverFixedExtentBoxAdaptor<\/a> does not need\nto perform layout on its children to obtain their extent in the main axis.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSliverFixedExtentList-class.html\">RenderSliverFixedExtentList<\/a>, which has a configurable <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html\">itemExtent<\/a>.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverFillViewport-class.html\">RenderSliverFillViewport<\/a>, which determines the <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html\">itemExtent<\/a> based on\n<a href=\"rendering\/SliverConstraints\/viewportMainAxisExtent.html\">SliverConstraints.viewportMainAxisExtent<\/a>.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverFillRemaining-class.html\">RenderSliverFillRemaining<\/a>, which determines the <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html\">itemExtent<\/a> based on\n<a href=\"rendering\/SliverConstraints\/remainingPaintExtent.html\">SliverConstraints.remainingPaintExtent<\/a>.<\/li>\n<li>\n<a href=\"rendering\/RenderSliverList-class.html\">RenderSliverList<\/a>, which does not require its children to have the same\nextent in the main axis.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverFixedExtentBoxAdaptor-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverFixedExtentBoxAdaptor",
    "shortname": "RenderSliverFixedExtentBoxAdaptor",
    "extends": [
        "rendering.RenderSliverMultiBoxAdaptor",
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [
        "rendering.RenderSliverFillViewport",
        "rendering.RenderSliverFixedExtentList"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a sliver that contains multiple box children that have the same\nextent in the main axis.<\/p>\n<p>The <code>childManager<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverFixedExtentBoxAdaptor({\n  @required RenderSliverBoxChildManager childManager,\n}) : super(childManager: childManager);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/RenderSliverFixedExtentBoxAdaptor.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderSliverFixedExtentBoxAdaptor",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": [
                {
                    "name": "childManager",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderSliverBoxChildManager"
                }
            ]
        },
        {
            "desc": "<p>Called to obtain a precise measure of the total scrollable extents of this\nobject.<\/p>\n<p>Must return the precise total distance from the start of the child with\nthe earliest possible index to the end of the child with the last possible\nindex.<\/p>\n<p>This is used when no child is available for the index corresponding to the\ncurrent scroll offset, to determine the precise dimensions of the sliver.\nIt must return a precise value. It will not be called if the\n<a href=\"rendering\/RenderSliverMultiBoxAdaptor\/childManager.html\">childManager<\/a> returns an infinite number of children for positive\nindices.<\/p>\n<p>By default, multiplies the <code>itemExtent<\/code> by the number of children reported\nby <a href=\"rendering\/ContainerRenderObjectMixin\/childCount.html\">RenderSliverBoxChildManager.childCount<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/estimateMaxScrollOffset.html\">estimateMaxScrollOffset<\/a>, which is similar but may provide inaccurate\nvalues.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble computeMaxScrollOffset(SliverConstraints constraints, double itemExtent) {\n  return childManager.childCount * itemExtent;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/computeMaxScrollOffset.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMaxScrollOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": [
                {
                    "name": "constraints",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.SliverConstraints"
                },
                {
                    "name": "itemExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called to estimate the total scrollable extents of this object.<\/p>\n<p>Must return the total distance from the start of the child with the\nearliest possible index to the end of the child with the last possible\nindex.<\/p>\n<p>By default, defers to <a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/estimateMaxScrollOffset.html\">RenderSliverBoxChildManager.estimateMaxScrollOffset<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderSliverFixedExtentBoxAdaptor\/computeMaxScrollOffset.html\">computeMaxScrollOffset<\/a>, which is similar but must provide a precise\nvalue.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble estimateMaxScrollOffset(\n  SliverConstraints constraints, {\n  int firstIndex,\n  int lastIndex,\n  double leadingScrollOffset,\n  double trailingScrollOffset,\n}) {\n  return childManager.estimateMaxScrollOffset(\n    constraints,\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    leadingScrollOffset: leadingScrollOffset,\n    trailingScrollOffset: trailingScrollOffset,\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/estimateMaxScrollOffset.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "estimateMaxScrollOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": [
                {
                    "name": "constraints",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.SliverConstraints"
                },
                {
                    "name": "firstIndex",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "lastIndex",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "leadingScrollOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "trailingScrollOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>The maximum child index that is visible at the given scroll offset.<\/p>\n<p>This function is given the <code>itemExtent<\/code> as an argument to avoid\nrecomputing <code>itemExtent<\/code> repeatedly during layout.<\/p>\n<p>By default, returns a value consistent with the children being placed in\norder, without gaps, starting from layout offset zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nint getMaxChildIndexForScrollOffset(double scrollOffset, double itemExtent) {\n  return itemExtent &gt; 0.0 ? math.max(0, (scrollOffset \/ itemExtent).ceil() - 1) : 0;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/getMaxChildIndexForScrollOffset.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "getMaxChildIndexForScrollOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": [
                {
                    "name": "itemExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "scrollOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>The minimum child index that is visible at the given scroll offset.<\/p>\n<p>This function is given the <code>itemExtent<\/code> as an argument to avoid\nrecomputing <code>itemExtent<\/code> repeatedly during layout.<\/p>\n<p>By default, returns a value consistent with the children being placed in\norder, without gaps, starting from layout offset zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nint getMinChildIndexForScrollOffset(double scrollOffset, double itemExtent) {\n  return itemExtent &gt; 0.0 ? math.max(0, scrollOffset ~\/ itemExtent) : 0;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/getMinChildIndexForScrollOffset.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "getMinChildIndexForScrollOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": [
                {
                    "name": "itemExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "scrollOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>The layout offset for the child with the given index.<\/p>\n<p>This function is given the <code>itemExtent<\/code> as an argument to avoid\nrecomputing <code>itemExtent<\/code> repeatedly during layout.<\/p>\n<p>By default, places the children in order, without gaps, starting from\nlayout offset zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble indexToLayoutOffset(double itemExtent, int index) =&gt; itemExtent * index;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/indexToLayoutOffset.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "indexToLayoutOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "itemExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderSliver\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  childManager.didStartLayout();\n  childManager.setDidUnderflow(false);\n\n  final double itemExtent = this.itemExtent;\n\n  final double scrollOffset = constraints.scrollOffset + constraints.cacheOrigin;\n  assert(scrollOffset &gt;= 0.0);\n  final double remainingExtent = constraints.remainingCacheExtent;\n  assert(remainingExtent &gt;= 0.0);\n  final double targetEndScrollOffset = scrollOffset + remainingExtent;\n\n  final BoxConstraints childConstraints = constraints.asBoxConstraints(\n    minExtent: itemExtent,\n    maxExtent: itemExtent,\n  );\n\n  final int firstIndex = getMinChildIndexForScrollOffset(scrollOffset, itemExtent);\n  final int targetLastIndex = targetEndScrollOffset.isFinite ?\n      getMaxChildIndexForScrollOffset(targetEndScrollOffset, itemExtent) : null;\n\n  if (firstChild != null) {\n    final int oldFirstIndex = indexOf(firstChild);\n    final int oldLastIndex = indexOf(lastChild);\n    final int leadingGarbage = (firstIndex - oldFirstIndex).clamp(0, childCount);\n    final int trailingGarbage = targetLastIndex == null ? 0 : (oldLastIndex - targetLastIndex).clamp(0, childCount);\n    collectGarbage(leadingGarbage, trailingGarbage);\n  } else {\n    collectGarbage(0, 0);\n  }\n\n  if (firstChild == null) {\n    if (!addInitialChild(index: firstIndex, layoutOffset: indexToLayoutOffset(itemExtent, firstIndex))) {\n      \/\/ There are either no children, or we are past the end of all our children.\n      final double max = computeMaxScrollOffset(constraints, itemExtent);\n      geometry = SliverGeometry(\n        scrollExtent: max,\n        maxPaintExtent: max,\n      );\n      childManager.didFinishLayout();\n      return;\n    }\n  }\n\n  RenderBox trailingChildWithLayout;\n\n  for (int index = indexOf(firstChild) - 1; index &gt;= firstIndex; --index) {\n    final RenderBox child = insertAndLayoutLeadingChild(childConstraints);\n    if (child == null) {\n      \/\/ Items before the previously first child are no longer present.\n      \/\/ Reset the scroll offset to offset all items prior and up to the\n      \/\/ missing item. Let parent re-layout everything.\n      geometry = SliverGeometry(scrollOffsetCorrection: index * itemExtent);\n      return;\n    }\n    final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n    childParentData.layoutOffset = indexToLayoutOffset(itemExtent, index);\n    assert(childParentData.index == index);\n    trailingChildWithLayout ??= child;\n  }\n\n  if (trailingChildWithLayout == null) {\n    firstChild.layout(childConstraints);\n    final SliverMultiBoxAdaptorParentData childParentData = firstChild.parentData;\n    childParentData.layoutOffset = indexToLayoutOffset(itemExtent, firstIndex);\n    trailingChildWithLayout = firstChild;\n  }\n\n  while (targetLastIndex == null || indexOf(trailingChildWithLayout) &lt; targetLastIndex) {\n    RenderBox child = childAfter(trailingChildWithLayout);\n    if (child == null) {\n      child = insertAndLayoutChild(childConstraints, after: trailingChildWithLayout);\n      if (child == null) {\n        \/\/ We have run out of children.\n        break;\n      }\n    } else {\n      child.layout(childConstraints);\n    }\n    trailingChildWithLayout = child;\n    assert(child != null);\n    final SliverMultiBoxAdaptorParentData childParentData = child.parentData;\n    childParentData.layoutOffset = indexToLayoutOffset(itemExtent, childParentData.index);\n  }\n\n  final int lastIndex = indexOf(lastChild);\n  final double leadingScrollOffset = indexToLayoutOffset(itemExtent, firstIndex);\n  final double trailingScrollOffset = indexToLayoutOffset(itemExtent, lastIndex + 1);\n\n  assert(firstIndex == 0 || childScrollOffset(firstChild) &lt;= scrollOffset);\n  assert(debugAssertChildListIsNonEmptyAndContiguous());\n  assert(indexOf(firstChild) == firstIndex);\n  assert(targetLastIndex == null || lastIndex &lt;= targetLastIndex);\n\n  final double estimatedMaxScrollOffset = estimateMaxScrollOffset(\n    constraints,\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    leadingScrollOffset: leadingScrollOffset,\n    trailingScrollOffset: trailingScrollOffset,\n  );\n\n  final double paintExtent = calculatePaintOffset(\n    constraints,\n    from: leadingScrollOffset,\n    to: trailingScrollOffset,\n  );\n\n  final double cacheExtent = calculateCacheOffset(\n    constraints,\n    from: leadingScrollOffset,\n    to: trailingScrollOffset,\n  );\n\n  final double targetEndScrollOffsetForPaint = constraints.scrollOffset + constraints.remainingPaintExtent;\n  final int targetLastIndexForPaint = targetEndScrollOffsetForPaint.isFinite ?\n      getMaxChildIndexForScrollOffset(targetEndScrollOffsetForPaint, itemExtent) : null;\n  geometry = SliverGeometry(\n    scrollExtent: estimatedMaxScrollOffset,\n    paintExtent: paintExtent,\n    cacheExtent: cacheExtent,\n    maxPaintExtent: estimatedMaxScrollOffset,\n    \/\/ Conservative to avoid flickering away the clip during scroll.\n    hasVisualOverflow: (targetLastIndexForPaint != null &amp;&amp; lastIndex &gt;= targetLastIndexForPaint)\n      || constraints.scrollOffset &gt; 0.0,\n  );\n\n  \/\/ We may have started the layout while scrolled to the end, which would not\n  \/\/ expose a new child.\n  if (estimatedMaxScrollOffset == trailingScrollOffset)\n    childManager.setDidUnderflow(true);\n  childManager.didFinishLayout();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The main-axis extent of each item.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get itemExtent;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverFixedExtentBoxAdaptor\/itemExtent.html",
            "name": "itemExtent",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderSliverFixedExtentBoxAdaptor",
            "params": []
        }
    ]
}