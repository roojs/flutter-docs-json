{
    "name": "animation.CompoundAnimation",
    "extends": [
        "animation.Animation",
        "foundation.Listenable",
        "dart:core.Object"
    ],
    "memberOf": "animation",
    "events": [],
    "methods": [
        {
            "name": "CompoundAnimation",
            "type": "",
            "desc": "<p>Creates a CompoundAnimation. Both arguments must be non-null. Either can\nbe a CompoundAnimation itself to combine multiple animations.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.CompoundAnimation",
            "sig": "",
            "params": [
                {
                    "name": "first",
                    "type": "animation.Animation",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "next",
                    "type": "animation.Animation",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "animation\/CompoundAnimation\/CompoundAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CompoundAnimation({\n  @required this.first,\n  @required this.next,\n}) : assert(first != null),\n     assert(next != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "didStartListening",
            "type": "",
            "desc": "<p>Called when the number of listeners changes from zero to one.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.CompoundAnimation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/CompoundAnimation\/didStartListening.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStartListening() {\n  first.addListener(_maybeNotifyListeners);\n  first.addStatusListener(_maybeNotifyStatusListeners);\n  next.addListener(_maybeNotifyListeners);\n  next.addStatusListener(_maybeNotifyStatusListeners);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didStopListening",
            "type": "",
            "desc": "<p>Called when the number of listeners changes from one to zero.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.CompoundAnimation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/CompoundAnimation\/didStopListening.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopListening() {\n  first.removeListener(_maybeNotifyListeners);\n  first.removeStatusListener(_maybeNotifyStatusListeners);\n  next.removeListener(_maybeNotifyListeners);\n  next.removeStatusListener(_maybeNotifyStatusListeners);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.CompoundAnimation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/CompoundAnimation\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($first, $next)';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "first",
            "type": "animation.Animation",
            "types": [],
            "desc": "<p>The first sub-animation. Its status takes precedence if neither are\nanimating.<\/p>\n        ",
            "memberOf": "animation.CompoundAnimation",
            "isConstant": false,
            "href": "animation\/CompoundAnimation\/first.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;T&gt; first\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "next",
            "type": "animation.Animation",
            "types": [],
            "desc": "<p>The second sub-animation.<\/p>\n        ",
            "memberOf": "animation.CompoundAnimation",
            "isConstant": false,
            "href": "animation\/CompoundAnimation\/next.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;T&gt; next\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "status",
            "type": "animation.AnimationStatus",
            "types": [],
            "desc": "<p>Gets the status of this animation based on the <a href=\"animation\/CompoundAnimation\/first.html\">first<\/a> and <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> status.<\/p>\n<p>The default is that if the <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> animation is moving, use its status.\nOtherwise, default to <a href=\"animation\/CompoundAnimation\/first.html\">first<\/a>.<\/p>\n        ",
            "memberOf": "animation.CompoundAnimation",
            "isConstant": false,
            "href": "animation\/CompoundAnimation\/status.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAnimationStatus get status {\n  if (next.status == AnimationStatus.forward || next.status == AnimationStatus.reverse)\n    return next.status;\n  return first.status;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "animation.AnimationMax",
        "animation.AnimationMean",
        "animation.AnimationMin"
    ],
    "realImplementors": [
        "animation.AnimationMax",
        "animation.AnimationMean",
        "animation.AnimationMin"
    ],
    "cn": [],
    "href": "animation\/CompoundAnimation-class.html",
    "desc": "<p>An interface for combining multiple Animations. Subclasses need only\nimplement the <code>value<\/code> getter to control how the child animations are\ncombined. Can be chained to combine more than 2 animations.<\/p>\n<p>For example, to create an animation that is the sum of two others, subclass\nthis class and define <code>T get value = first.value + second.value;<\/code><\/p>\n<p>By default, the <a href=\"animation\/CompoundAnimation\/status.html\">status<\/a> of a <a href=\"animation\/CompoundAnimation-class.html\">CompoundAnimation<\/a> is the status of the\n<a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> animation if <a href=\"animation\/CompoundAnimation\/next.html\">next<\/a> is moving, and the status of the <a href=\"animation\/CompoundAnimation\/first.html\">first<\/a>\nanimation otherwise.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "CompoundAnimation"
}