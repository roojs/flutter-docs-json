{
    "desc": "<p>An easing curve, i.e. a mapping of the unit interval to the unit interval.<\/p>\n<p>Easing curves are used to adjust the rate of change of an animation over\ntime, allowing them to speed up and slow down, rather than moving at a\nconstant rate.<\/p>\n<p>A curve must map t=0.0 to 0.0 and t=1.0 to 1.0.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Curves-class.html\">Curves<\/a>, a collection of common animation easing curves.<\/li>\n<li>\n<a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>, which can be used to apply a <a href=\"animation\/Curve-class.html\">Curve<\/a> to an <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/li>\n<li>\n<a href=\"dart-ui\/Canvas\/drawArc.html\">Canvas.drawArc<\/a>, which draws an arc, and has nothing to do with easing\ncurves.<\/li>\n<li>\n<a href=\"animation\/Animatable-class.html\">Animatable<\/a>, for a more flexible interface that maps fractions to\narbitrary values.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "animation\/Curve-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "animation",
    "name": "animation.Curve",
    "shortname": "Curve",
    "extends": [],
    "realImplementors": [
        "animation.Cubic",
        "animation.ElasticInCurve",
        "animation.ElasticInOutCurve",
        "animation.ElasticOutCurve",
        "animation.FlippedCurve",
        "animation.Interval",
        "animation.SawTooth",
        "animation.Threshold"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Curve();<\/code><\/pre>\n    ",
            "href": "animation\/Curve\/Curve.html",
            "isDeprecated": false,
            "type": "",
            "name": "Curve",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "animation.Curve",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType';\n}<\/code><\/pre>\n    ",
            "href": "animation\/Curve\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Curve",
            "params": []
        },
        {
            "desc": "<p>Returns the value of the curve at point <code>t<\/code>.<\/p>\n<p>This function must ensure the following:<\/p>\n<ul>\n<li>The value of <code>t<\/code> must be between 0.0 and 1.0<\/li>\n<li>Values of <code>t<\/code>=0.0 and <code>t<\/code>=1.0 must be mapped to 0.0 and 1.0,\nrespectively.<\/li>\n<\/ul>\n<p>It is recommended that subclasses override <a href=\"animation\/Curve\/transformInternal.html\">transformInternal<\/a> instead of\nthis function, as the above cases are already handled in the default\nimplementation of <a href=\"animation\/Curve\/transform.html\">transform<\/a>, which delegates the remaining logic to\n<a href=\"animation\/Curve\/transformInternal.html\">transformInternal<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double transform(double t) {\n  assert(t &gt;= 0.0 &amp;&amp; t &lt;= 1.0);\n  if (t == 0.0 || t == 1.0) {\n    return t;\n  }\n  return transformInternal(t);\n}<\/code><\/pre>\n    ",
            "href": "animation\/Curve\/transform.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "transform",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Curve",
            "params": [
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the value of the curve at point <code>t<\/code>, in cases where\n1.0 &gt; <code>t<\/code> &gt; 0.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble transformInternal(double t) {\n  throw UnimplementedError();\n}<\/code><\/pre>\n    ",
            "href": "animation\/Curve\/transformInternal.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "transformInternal",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Curve",
            "params": [
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a new curve that is the reversed inversion of this one.<\/p>\n<p>This is often useful with <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">CurvedAnimation.reverseCurve<\/a>.<\/p>\n<div style=\"position: relative;\">\n  <div id=\"animation_1_play_button_\" onclick=\"if (animation_1.paused) {\n                  animation_1.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_1.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_1\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_1_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_1_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_bounce_in.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<div style=\"position: relative;\">\n  <div id=\"animation_2_play_button_\" onclick=\"if (animation_2.paused) {\n                  animation_2.play();\n                  this.style.display = 'none';\n                } else {\n                  animation_2.pause();\n                  this.style.display = 'block';\n                }\" style=\"position:absolute;\n              width:464px;\n              height:192px;\n              z-index:100000;\n              background-position: center;\n              background-repeat: no-repeat;\n              background-image: url(static-assets\/play_button.svg);\">\n  <\/div>\n  <video id=\"animation_2\" style=\"width:464px; height:192px;\" onclick=\"if (this.paused) {\n                    this.play();\n                    animation_2_play_button_.style.display = 'none';\n                  } else {\n                    this.pause();\n                    animation_2_play_button_.style.display = 'block';\n                  }\" loop=\"\"><source src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/animation\/curve_flipped.mp4\" type=\"video\/mp4\"><\/source><\/video>\n<\/div>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/FlippedCurve-class.html\">FlippedCurve<\/a>, the class that is used to implement this getter.<\/li>\n<li>\n<a href=\"animation\/ReverseAnimation-class.html\">ReverseAnimation<\/a>, which reverses an <a href=\"animation\/Animation-class.html\">Animation<\/a> rather than a <a href=\"animation\/Curve-class.html\">Curve<\/a>.<\/li>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, which can take a separate curve and reverse curve.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve get flipped =&gt; FlippedCurve(this);<\/code><\/pre>\n        ",
            "href": "animation\/Curve\/flipped.html",
            "name": "flipped",
            "isDeprecated": false,
            "type": "animation.Curve",
            "memberOf": "animation.Curve",
            "params": []
        }
    ]
}