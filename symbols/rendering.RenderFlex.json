{
    "desc": "<p>Displays its children in a one-dimensional array.<\/p>\n<h2 id=\"layout-algorithm\">Layout algorithm<\/h2>\n<p><em>This section describes how the framework causes <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> to position\nits children.<\/em>\n<em>See <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> for an introduction to box layout models.<\/em><\/p>\n<p>Layout for a <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> proceeds in six steps:<\/p>\n<ol>\n<li>Layout each child a null or zero flex factor with unbounded main axis\nconstraints and the incoming cross axis constraints. If the\n<a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.stretch<\/a>, instead use tight\ncross axis constraints that match the incoming max extent in the cross\naxis.<\/li>\n<li>Divide the remaining main axis space among the children with non-zero\nflex factors according to their flex factor. For example, a child with a\nflex factor of 2.0 will receive twice the amount of main axis space as a\nchild with a flex factor of 1.0.<\/li>\n<li>Layout each of the remaining children with the same cross axis\nconstraints as in step 1, but instead of using unbounded main axis\nconstraints, use max axis constraints based on the amount of space\nallocated in step 2. Children with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.tight<\/a> are given tight constraints (i.e., forced to fill the\nallocated space), and children with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a> are given loose constraints (i.e., not forced to fill the\nallocated space).<\/li>\n<li>The cross axis extent of the <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> is the maximum cross axis\nextent of the children (which will always satisfy the incoming\nconstraints).<\/li>\n<li>The main axis extent of the <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> is determined by the\n<a href=\"rendering\/RenderFlex\/mainAxisSize.html\">mainAxisSize<\/a> property. If the <a href=\"rendering\/RenderFlex\/mainAxisSize.html\">mainAxisSize<\/a> property is\n<a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.max<\/a>, then the main axis extent of the <a href=\"rendering\/RenderFlex-class.html\">RenderFlex<\/a> is the\nmax extent of the incoming main axis constraints. If the <a href=\"rendering\/RenderFlex\/mainAxisSize.html\">mainAxisSize<\/a>\nproperty is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.min<\/a>, then the main axis extent of the <a href=\"widgets\/Flex-class.html\">Flex<\/a>\nis the sum of the main axis extents of the children (subject to the\nincoming constraints).<\/li>\n<li>Determine the position for each child according to the\n<a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> and the <a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a>. For example, if the\n<a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceBetween<\/a>, any main axis\nspace that has not been allocated to children is divided evenly and\nplaced between the children.<\/li>\n<\/ol>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Flex-class.html\">Flex<\/a>, the widget equivalent.<\/li>\n<li>\n<a href=\"widgets\/Row-class.html\">Row<\/a> and <a href=\"widgets\/Column-class.html\">Column<\/a>, direction-specific variants of <a href=\"widgets\/Flex-class.html\">Flex<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderFlex-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.RenderFlex",
    "shortname": "RenderFlex",
    "extends": [
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a flex render object.<\/p>\n<p>By default, the flex layout is horizontal and children are aligned to the\nstart of the main axis and the center of the cross axis.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderFlex({\n  List&lt;RenderBox&gt; children,\n  Axis direction = Axis.horizontal,\n  MainAxisSize mainAxisSize = MainAxisSize.max,\n  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,\n  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,\n  TextDirection textDirection,\n  VerticalDirection verticalDirection = VerticalDirection.down,\n  TextBaseline textBaseline,\n}) : assert(direction != null),\n     assert(mainAxisAlignment != null),\n     assert(mainAxisSize != null),\n     assert(crossAxisAlignment != null),\n     _direction = direction,\n     _mainAxisAlignment = mainAxisAlignment,\n     _mainAxisSize = mainAxisSize,\n     _crossAxisAlignment = crossAxisAlignment,\n     _textDirection = textDirection,\n     _verticalDirection = verticalDirection,\n     _textBaseline = textBaseline {\n  addAll(children);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/RenderFlex.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderFlex",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<rendering.RenderBox>"
                },
                {
                    "name": "crossAxisAlignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.CrossAxisAlignment"
                },
                {
                    "name": "direction",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "mainAxisAlignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.MainAxisAlignment"
                },
                {
                    "name": "mainAxisSize",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.MainAxisSize"
                },
                {
                    "name": "textBaseline",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextBaseline"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "verticalDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.VerticalDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the y-coordinate of the position of the box to\nthe y-coordinate of the first given baseline in the box's contents, if\nany, or null otherwise.<\/p>\n<p>Do not call this function directly. If you need to know the baseline of a\nchild from an invocation of <a href=\"rendering\/RenderFlex\/performLayout.html\">performLayout<\/a> or <a href=\"rendering\/RenderFlex\/paint.html\">paint<\/a>, call\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>.<\/p>\n<p>Subclasses should override this method to supply the distances to their\nbaselines. When implementing this method, there are generally three\nstrategies:<\/p>\n<ul>\n<li>\n<p>For classes that use the <a href=\"rendering\/ContainerRenderObjectMixin-mixin.html\">ContainerRenderObjectMixin<\/a> child model,\nconsider mixing in the <a href=\"rendering\/RenderBoxContainerDefaultsMixin-mixin.html\">RenderBoxContainerDefaultsMixin<\/a> class and\nusing\n<a href=\"rendering\/RenderBoxContainerDefaultsMixin\/defaultComputeDistanceToFirstActualBaseline.html\">RenderBoxContainerDefaultsMixin.defaultComputeDistanceToFirstActualBaseline<\/a>.<\/p>\n<\/li>\n<li>\n<p>For classes that define a particular baseline themselves, return that\nvalue directly.<\/p>\n<\/li>\n<li>\n<p>For classes that have a child to which they wish to defer the\ncomputation, call <a href=\"rendering\/RenderBox\/getDistanceToActualBaseline.html\">getDistanceToActualBaseline<\/a> on the child (not\n<a href=\"rendering\/RenderFlex\/computeDistanceToActualBaseline.html\">computeDistanceToActualBaseline<\/a>, the internal implementation, and not\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>, the public entry point for this API).<\/p>\n<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeDistanceToActualBaseline(TextBaseline baseline) {\n  if (_direction == Axis.horizontal)\n    return defaultComputeDistanceToHighestActualBaseline(baseline);\n  return defaultComputeDistanceToFirstActualBaseline(baseline);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/computeDistanceToActualBaseline.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeDistanceToActualBaseline",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "baseline",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextBaseline"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderFlex\/performLayout.html\">performLayout<\/a>. Should return the\nsmallest height beyond which increasing the height never decreases the\npreferred width. The preferred width is the value that would be returned\nby <a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for that height.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderFlex\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for the same width.<\/p>\n<p>Otherwise, the width argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderFlex\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a>.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicHeight(double width) {\n  return _getIntrinsicSize(\n    sizingDirection: Axis.vertical,\n    extent: width,\n    childSize: (RenderBox child, double extent) =&gt; child.getMaxIntrinsicHeight(extent),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/computeMaxIntrinsicHeight.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMaxIntrinsicHeight",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderFlex\/performLayout.html\">performLayout<\/a>. This should return\nthe smallest width beyond which increasing the width never decreases the\npreferred height. The preferred height is the value that would be returned\nby <a href=\"rendering\/RenderFlex\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for that width.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for the same height.<\/p>\n<p>Otherwise, the height argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicWidth(double height) {\n  return _getIntrinsicSize(\n    sizingDirection: Axis.horizontal,\n    extent: height,\n    childSize: (RenderBox child, double extent) =&gt; child.getMaxIntrinsicWidth(extent),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/computeMaxIntrinsicWidth.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMaxIntrinsicWidth",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "height",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderFlex\/performLayout.html\">performLayout<\/a>. Should return the\nminimum height that this box could be without failing to correctly paint\nits contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nheight-in-width-out, or if the layout algorithm uses both the incoming\nheight and width constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>width<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then the width\nargument is the width to use.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicHeight(double width) {\n  return _getIntrinsicSize(\n    sizingDirection: Axis.vertical,\n    extent: width,\n    childSize: (RenderBox child, double extent) =&gt; child.getMinIntrinsicHeight(extent),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/computeMinIntrinsicHeight.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMinIntrinsicHeight",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderFlex\/performLayout.html\">performLayout<\/a>. This method should\nreturn the minimum width that this box could be without failing to\ncorrectly paint its contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nwidth-in-height-out, or if the layout algorithm uses both the incoming\nwidth and height constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>height<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then the height\nargument is the height to use.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<h3 id=\"text\">Text<\/h3>\n<p>Text is the canonical example of a width-in-height-out algorithm. The\n<code>height<\/code> argument is therefore ignored.<\/p>\n<p>Consider the string \"Hello World\" The <em>maximum<\/em> intrinsic width (as\nreturned from <a href=\"rendering\/RenderFlex\/computeMaxIntrinsicWidth.html\">computeMaxIntrinsicWidth<\/a>) would be the width of the string\nwith no line breaks.<\/p>\n<p>The minimum intrinsic width would be the width of the widest word, \"Hello\"\nor \"World\". If the text is rendered in an even narrower width, however, it\nmight still not overflow. For example, maybe the rendering would put a\nline-break half-way through the words, as in \"Hel\u205elo\u205eWor\u205eld\". However,\nthis wouldn't be a <em>correct<\/em> rendering, and <a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> is\nsupposed to render the minimum width that the box could be without failing\nto <em>correctly<\/em> paint the contents within itself.<\/p>\n<p>The minimum intrinsic <em>height<\/em> for a given width smaller than the minimum\nintrinsic width could therefore be greater than the minimum intrinsic\nheight for the minimum intrinsic width.<\/p>\n<h3 id=\"viewports-eg-scrolling-lists\">Viewports (e.g. scrolling lists)<\/h3>\n<p>Some render boxes are intended to clip their children. For example, the\nrender box for a scrolling list might always size itself to its parents'\nsize (or rather, to the maximum incoming constraints), regardless of the\nchildren's sizes, and then clip the children and position them based on\nthe current scroll offset.<\/p>\n<p>The intrinsic dimensions in these cases still depend on the children, even\nthough the layout algorithm sizes the box in a way independent of the\nchildren. It is the size that is needed to paint the box's contents (in\nthis case, the children) <em>without clipping<\/em> that matters.<\/p>\n<h3 id=\"when-the-intrinsic-dimensions-cannot-be-known\">When the intrinsic dimensions cannot be known<\/h3>\n<p>There are cases where render objects do not have an efficient way to\ncompute their intrinsic dimensions. For example, it may be prohibitively\nexpensive to reify and measure every child of a lazy viewport (viewports\ngenerally only instantiate the actually visible children), or the\ndimensions may be computed by a callback about which the render object\ncannot reason.<\/p>\n<p>In such cases, it may be impossible (or at least impractical) to actually\nreturn a valid answer. In such cases, the intrinsic functions should throw\nwhen <a href=\"rendering\/RenderObject\/debugCheckingIntrinsics.html\">RenderObject.debugCheckingIntrinsics<\/a> is false and asserts are\nenabled, and return 0.0 otherwise.<\/p>\n<p>See the implementations of <a href=\"widgets\/LayoutBuilder-class.html\">LayoutBuilder<\/a> or <a href=\"rendering\/RenderViewportBase-class.html\">RenderViewportBase<\/a> for\nexamples (in particular,\n<a href=\"rendering\/RenderViewportBase\/debugThrowIfNotCheckingIntrinsics.html\">RenderViewportBase.debugThrowIfNotCheckingIntrinsics<\/a>).<\/p>\n<h3 id=\"aspect-ratio-driven-boxes\">Aspect-ratio-driven boxes<\/h3>\n<p>Some boxes always return a fixed size based on the constraints. For these\nboxes, the intrinsic functions should return the appropriate size when the\nincoming <code>height<\/code> or <code>width<\/code> argument is finite, treating that as a tight\nconstraint in the respective direction and treating the other direction's\nconstraints as unbounded. This is because the definitions of\n<a href=\"rendering\/RenderFlex\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> and <a href=\"rendering\/RenderFlex\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> are in terms of\nwhat the dimensions <em>could be<\/em>, and such boxes can only be one size in\nsuch cases.<\/p>\n<p>When the incoming argument is not finite, then they should return the\nactual intrinsic dimensions based on the contents, as any other box would.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicWidth(double height) {\n  return _getIntrinsicSize(\n    sizingDirection: Axis.horizontal,\n    extent: height,\n    childSize: (RenderBox child, double extent) =&gt; child.getMinIntrinsicWidth(extent),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/computeMinIntrinsicWidth.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "computeMinIntrinsicWidth",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "height",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderFlex\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;Axis&gt;('direction', direction));\n  properties.add(EnumProperty&lt;MainAxisAlignment&gt;('mainAxisAlignment', mainAxisAlignment));\n  properties.add(EnumProperty&lt;MainAxisSize&gt;('mainAxisSize', mainAxisSize));\n  properties.add(EnumProperty&lt;CrossAxisAlignment&gt;('crossAxisAlignment', crossAxisAlignment));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(EnumProperty&lt;VerticalDirection&gt;('verticalDirection', verticalDirection, defaultValue: null));\n  properties.add(EnumProperty&lt;TextBaseline&gt;('textBaseline', textBaseline, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Returns a rect in this object's coordinate system that describes\nthe approximate bounding box of the clip rect that would be\napplied to the given child during the paint phase, if any.<\/p>\n<p>Returns null if the child would not be clipped.<\/p>\n<p>This is used in the semantics phase to avoid including children\nthat are not physically visible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRect describeApproximatePaintClip(RenderObject child) =&gt; _overflow &gt; 0.0 ? Offset.zero &amp; size : null;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/describeApproximatePaintClip.html",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "name": "describeApproximatePaintClip",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { Offset position }) {\n  return defaultHitTestChildren(result, position: position);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/hitTestChildren.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTestChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "result",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (_overflow &lt;= 0.0) {\n    defaultPaint(context, offset);\n    return;\n  }\n\n  \/\/ There's no point in drawing the children if we're empty.\n  if (size.isEmpty)\n    return;\n\n  \/\/ We have overflow. Clip it.\n  context.pushClipRect(needsCompositing, offset, Offset.zero &amp; size, defaultPaint);\n\n  assert(() {\n    \/\/ Only set this if it's null to save work. It gets reset to null if the\n    \/\/ _direction changes.\n    final String debugOverflowHints =\n      'The overflowing $runtimeType has an orientation of $_direction.\\n'\n      'The edge of the $runtimeType that is overflowing has been marked '\n      'in the rendering with a yellow and black striped pattern. This is '\n      'usually caused by the contents being too big for the $runtimeType. '\n      'Consider applying a flex factor (e.g. using an Expanded widget) to '\n      'force the children of the $runtimeType to fit within the available '\n      'space instead of being sized to their natural size.\\n'\n      'This is considered an error condition because it indicates that there '\n      'is content that cannot be seen. If the content is legitimately bigger '\n      'than the available space, consider clipping it with a ClipRect widget '\n      'before putting it in the flex, or using a scrollable container rather '\n      'than a Flex, like a ListView.';\n\n    \/\/ Simulate a child rect that overflows by the right amount. This child\n    \/\/ rect is never used for drawing, just for determining the overflow\n    \/\/ location and amount.\n    Rect overflowChildRect;\n    switch (_direction) {\n      case Axis.horizontal:\n        overflowChildRect = Rect.fromLTWH(0.0, 0.0, size.width + _overflow, 0.0);\n        break;\n      case Axis.vertical:\n        overflowChildRect = Rect.fromLTWH(0.0, 0.0, 0.0, size.height + _overflow);\n        break;\n    }\n    paintOverflowIndicator(context, offset, Offset.zero &amp; size, overflowChildRect, overflowHints: debugOverflowHints);\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  assert(_debugHasNecessaryDirections);\n  \/\/ Determine used flex factor, size inflexible items, calculate free space.\n  int totalFlex = 0;\n  int totalChildren = 0;\n  assert(constraints != null);\n  final double maxMainSize = _direction == Axis.horizontal ? constraints.maxWidth : constraints.maxHeight;\n  final bool canFlex = maxMainSize &lt; double.infinity;\n\n  double crossSize = 0.0;\n  double allocatedSize = 0.0; \/\/ Sum of the sizes of the non-flexible children.\n  RenderBox child = firstChild;\n  RenderBox lastFlexChild;\n  while (child != null) {\n    final FlexParentData childParentData = child.parentData;\n    totalChildren++;\n    final int flex = _getFlex(child);\n    if (flex &gt; 0) {\n      assert(() {\n        final String identity = _direction == Axis.horizontal ? 'row' : 'column';\n        final String axis = _direction == Axis.horizontal ? 'horizontal' : 'vertical';\n        final String dimension = _direction == Axis.horizontal ? 'width' : 'height';\n        String error, message;\n        String addendum = '';\n        if (!canFlex &amp;&amp; (mainAxisSize == MainAxisSize.max || _getFit(child) == FlexFit.tight)) {\n          error = 'RenderFlex children have non-zero flex but incoming $dimension constraints are unbounded.';\n          message = 'When a $identity is in a parent that does not provide a finite $dimension constraint, for example '\n                    'if it is in a $axis scrollable, it will try to shrink-wrap its children along the $axis '\n                    'axis. Setting a flex on a child (e.g. using Expanded) indicates that the child is to '\n                    'expand to fill the remaining space in the $axis direction.';\n          final StringBuffer information = StringBuffer();\n          RenderBox node = this;\n          switch (_direction) {\n            case Axis.horizontal:\n              while (!node.constraints.hasBoundedWidth &amp;&amp; node.parent is RenderBox)\n                node = node.parent;\n              if (!node.constraints.hasBoundedWidth)\n                node = null;\n              break;\n            case Axis.vertical:\n              while (!node.constraints.hasBoundedHeight &amp;&amp; node.parent is RenderBox)\n                node = node.parent;\n              if (!node.constraints.hasBoundedHeight)\n                node = null;\n              break;\n          }\n          if (node != null) {\n            information.writeln('The nearest ancestor providing an unbounded width constraint is:');\n            information.write('  ');\n            information.writeln(node.toStringShallow(joiner: '\\n  '));\n          }\n          information.writeln('See also: https:\/\/flutter.io\/layout\/');\n          addendum = information.toString();\n        } else {\n          return true;\n        }\n        throw FlutterError(\n          '$error\\n'\n          '$message\\n'\n          'These two directives are mutually exclusive. If a parent is to shrink-wrap its child, the child '\n          'cannot simultaneously expand to fit its parent.\\n'\n          'Consider setting mainAxisSize to MainAxisSize.min and using FlexFit.loose fits for the flexible '\n          'children (using Flexible rather than Expanded). This will allow the flexible children '\n          'to size themselves to less than the infinite remaining space they would otherwise be '\n          'forced to take, and then will cause the RenderFlex to shrink-wrap the children '\n          'rather than expanding to fit the maximum constraints provided by the parent.\\n'\n          'The affected RenderFlex is:\\n'\n          '  $this\\n'\n          'The creator information is set to:\\n'\n          '  $debugCreator\\n'\n          '$addendum'\n          'If this message did not help you determine the problem, consider using debugDumpRenderTree():\\n'\n          '  https:\/\/flutter.io\/debugging\/#rendering-layer\\n'\n          '  http:\/\/docs.flutter.io\/flutter\/rendering\/debugDumpRenderTree.html\\n'\n          'If none of the above helps enough to fix this problem, please don\\'t hesitate to file a bug:\\n'\n          '  https:\/\/github.com\/flutter\/flutter\/issues\/new?template=BUG.md'\n        );\n      }());\n      totalFlex += childParentData.flex;\n      lastFlexChild = child;\n    } else {\n      BoxConstraints innerConstraints;\n      if (crossAxisAlignment == CrossAxisAlignment.stretch) {\n        switch (_direction) {\n          case Axis.horizontal:\n            innerConstraints = BoxConstraints(minHeight: constraints.maxHeight,\n                                                  maxHeight: constraints.maxHeight);\n            break;\n          case Axis.vertical:\n            innerConstraints = BoxConstraints(minWidth: constraints.maxWidth,\n                                                  maxWidth: constraints.maxWidth);\n            break;\n        }\n      } else {\n        switch (_direction) {\n          case Axis.horizontal:\n            innerConstraints = BoxConstraints(maxHeight: constraints.maxHeight);\n            break;\n          case Axis.vertical:\n            innerConstraints = BoxConstraints(maxWidth: constraints.maxWidth);\n            break;\n        }\n      }\n      child.layout(innerConstraints, parentUsesSize: true);\n      allocatedSize += _getMainSize(child);\n      crossSize = math.max(crossSize, _getCrossSize(child));\n    }\n    assert(child.parentData == childParentData);\n    child = childParentData.nextSibling;\n  }\n\n  \/\/ Distribute free space to flexible children, and determine baseline.\n  final double freeSpace = math.max(0.0, (canFlex ? maxMainSize : 0.0) - allocatedSize);\n  double allocatedFlexSpace = 0.0;\n  double maxBaselineDistance = 0.0;\n  if (totalFlex &gt; 0 || crossAxisAlignment == CrossAxisAlignment.baseline) {\n    final double spacePerFlex = canFlex &amp;&amp; totalFlex &gt; 0 ? (freeSpace \/ totalFlex) : double.nan;\n    child = firstChild;\n    while (child != null) {\n      final int flex = _getFlex(child);\n      if (flex &gt; 0) {\n        final double maxChildExtent = canFlex ? (child == lastFlexChild ? (freeSpace - allocatedFlexSpace) : spacePerFlex * flex) : double.infinity;\n        double minChildExtent;\n        switch (_getFit(child)) {\n          case FlexFit.tight:\n            assert(maxChildExtent &lt; double.infinity);\n            minChildExtent = maxChildExtent;\n            break;\n          case FlexFit.loose:\n            minChildExtent = 0.0;\n            break;\n        }\n        assert(minChildExtent != null);\n        BoxConstraints innerConstraints;\n        if (crossAxisAlignment == CrossAxisAlignment.stretch) {\n          switch (_direction) {\n            case Axis.horizontal:\n              innerConstraints = BoxConstraints(minWidth: minChildExtent,\n                                                    maxWidth: maxChildExtent,\n                                                    minHeight: constraints.maxHeight,\n                                                    maxHeight: constraints.maxHeight);\n              break;\n            case Axis.vertical:\n              innerConstraints = BoxConstraints(minWidth: constraints.maxWidth,\n                                                    maxWidth: constraints.maxWidth,\n                                                    minHeight: minChildExtent,\n                                                    maxHeight: maxChildExtent);\n              break;\n          }\n        } else {\n          switch (_direction) {\n            case Axis.horizontal:\n              innerConstraints = BoxConstraints(minWidth: minChildExtent,\n                                                    maxWidth: maxChildExtent,\n                                                    maxHeight: constraints.maxHeight);\n              break;\n            case Axis.vertical:\n              innerConstraints = BoxConstraints(maxWidth: constraints.maxWidth,\n                                                    minHeight: minChildExtent,\n                                                    maxHeight: maxChildExtent);\n              break;\n          }\n        }\n        child.layout(innerConstraints, parentUsesSize: true);\n        final double childSize = _getMainSize(child);\n        assert(childSize &lt;= maxChildExtent);\n        allocatedSize += childSize;\n        allocatedFlexSpace += maxChildExtent;\n        crossSize = math.max(crossSize, _getCrossSize(child));\n      }\n      if (crossAxisAlignment == CrossAxisAlignment.baseline) {\n        assert(() {\n          if (textBaseline == null)\n            throw FlutterError('To use FlexAlignItems.baseline, you must also specify which baseline to use using the \"baseline\" argument.');\n          return true;\n        }());\n        final double distance = child.getDistanceToBaseline(textBaseline, onlyReal: true);\n        if (distance != null)\n          maxBaselineDistance = math.max(maxBaselineDistance, distance);\n      }\n      final FlexParentData childParentData = child.parentData;\n      child = childParentData.nextSibling;\n    }\n  }\n\n  \/\/ Align items along the main axis.\n  final double idealSize = canFlex &amp;&amp; mainAxisSize == MainAxisSize.max ? maxMainSize : allocatedSize;\n  double actualSize;\n  double actualSizeDelta;\n  switch (_direction) {\n    case Axis.horizontal:\n      size = constraints.constrain(Size(idealSize, crossSize));\n      actualSize = size.width;\n      crossSize = size.height;\n      break;\n    case Axis.vertical:\n      size = constraints.constrain(Size(crossSize, idealSize));\n      actualSize = size.height;\n      crossSize = size.width;\n      break;\n  }\n  actualSizeDelta = actualSize - allocatedSize;\n  _overflow = math.max(0.0, -actualSizeDelta);\n\n  final double remainingSpace = math.max(0.0, actualSizeDelta);\n  double leadingSpace;\n  double betweenSpace;\n  \/\/ flipMainAxis is used to decide whether to lay out left-to-right\/top-to-bottom (false), or\n  \/\/ right-to-left\/bottom-to-top (true). The _startIsTopLeft will return null if there's only\n  \/\/ one child and the relevant direction is null, in which case we arbitrarily decide not to\n  \/\/ flip, but that doesn't have any detectable effect.\n  final bool flipMainAxis = !(_startIsTopLeft(direction, textDirection, verticalDirection) ?? true);\n  switch (_mainAxisAlignment) {\n    case MainAxisAlignment.start:\n      leadingSpace = 0.0;\n      betweenSpace = 0.0;\n      break;\n    case MainAxisAlignment.end:\n      leadingSpace = remainingSpace;\n      betweenSpace = 0.0;\n      break;\n    case MainAxisAlignment.center:\n      leadingSpace = remainingSpace \/ 2.0;\n      betweenSpace = 0.0;\n      break;\n    case MainAxisAlignment.spaceBetween:\n      leadingSpace = 0.0;\n      betweenSpace = totalChildren &gt; 1 ? remainingSpace \/ (totalChildren - 1) : 0.0;\n      break;\n    case MainAxisAlignment.spaceAround:\n      betweenSpace = totalChildren &gt; 0 ? remainingSpace \/ totalChildren : 0.0;\n      leadingSpace = betweenSpace \/ 2.0;\n      break;\n    case MainAxisAlignment.spaceEvenly:\n      betweenSpace = totalChildren &gt; 0 ? remainingSpace \/ (totalChildren + 1) : 0.0;\n      leadingSpace = betweenSpace;\n      break;\n  }\n\n  \/\/ Position elements\n  double childMainPosition = flipMainAxis ? actualSize - leadingSpace : leadingSpace;\n  child = firstChild;\n  while (child != null) {\n    final FlexParentData childParentData = child.parentData;\n    double childCrossPosition;\n    switch (_crossAxisAlignment) {\n      case CrossAxisAlignment.start:\n      case CrossAxisAlignment.end:\n        childCrossPosition = _startIsTopLeft(flipAxis(direction), textDirection, verticalDirection)\n                             == (_crossAxisAlignment == CrossAxisAlignment.start)\n                           ? 0.0\n                           : crossSize - _getCrossSize(child);\n        break;\n      case CrossAxisAlignment.center:\n        childCrossPosition = crossSize \/ 2.0 - _getCrossSize(child) \/ 2.0;\n        break;\n      case CrossAxisAlignment.stretch:\n        childCrossPosition = 0.0;\n        break;\n      case CrossAxisAlignment.baseline:\n        childCrossPosition = 0.0;\n        if (_direction == Axis.horizontal) {\n          assert(textBaseline != null);\n          final double distance = child.getDistanceToBaseline(textBaseline, onlyReal: true);\n          if (distance != null)\n            childCrossPosition = maxBaselineDistance - distance;\n        }\n        break;\n    }\n    if (flipMainAxis)\n      childMainPosition -= _getMainSize(child);\n    switch (_direction) {\n      case Axis.horizontal:\n        childParentData.offset = Offset(childMainPosition, childCrossPosition);\n        break;\n      case Axis.vertical:\n        childParentData.offset = Offset(childCrossPosition, childMainPosition);\n        break;\n    }\n    if (flipMainAxis) {\n      childMainPosition -= betweenSpace;\n    } else {\n      childMainPosition += _getMainSize(child) + betweenSpace;\n    }\n    child = childParentData.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>Override to setup parent data correctly for your children.<\/p>\n<p>You can call this function to set up the parent data for child before the\nchild is added to the parent's child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderBox child) {\n  if (child.parentData is! FlexParentData)\n    child.parentData = FlexParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/setupParentData.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setupParentData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Returns a human understandable name.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() {\n  String header = super.toStringShort();\n  if (_overflow is double &amp;&amp; _overflow &gt; 0.0)\n    header += ' OVERFLOWING';\n  return header;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderFlex\/toStringShort.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringShort",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>How the children should be placed along the cross axis.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and the <a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\neither <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>, then the\n<a href=\"rendering\/RenderFlex\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and the <a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\neither <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>, then the\n<a href=\"rendering\/RenderFlex\/textDirection.html\">textDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CrossAxisAlignment get crossAxisAlignment =&gt; _crossAxisAlignment;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/crossAxisAlignment.html",
            "name": "crossAxisAlignment",
            "isDeprecated": false,
            "type": "rendering.CrossAxisAlignment",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>The direction to use as the main axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Axis get direction =&gt; _direction;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/direction.html",
            "name": "direction",
            "isDeprecated": false,
            "type": "painting.Axis",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>How the children should be placed along the main axis.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and the <a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is\neither <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a>, then the\n<a href=\"rendering\/RenderFlex\/textDirection.html\">textDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and the <a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is\neither <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a>, then the\n<a href=\"rendering\/RenderFlex\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MainAxisAlignment get mainAxisAlignment =&gt; _mainAxisAlignment;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/mainAxisAlignment.html",
            "name": "mainAxisAlignment",
            "isDeprecated": false,
            "type": "rendering.MainAxisAlignment",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>How much space should be occupied in the main axis.<\/p>\n<p>After allocating space to children, there might be some remaining free\nspace. This value controls whether to maximize or minimize the amount of\nfree space, subject to the incoming layout constraints.<\/p>\n<p>If some children have a non-zero flex factors (and none have a fit of\n<a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a>), they will expand to consume all the available space and\nthere will be no remaining free space to maximize or minimize, making this\nvalue irrelevant to the final layout.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MainAxisSize get mainAxisSize =&gt; _mainAxisSize;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/mainAxisSize.html",
            "name": "mainAxisSize",
            "isDeprecated": false,
            "type": "rendering.MainAxisSize",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>If aligning items according to their baseline, which baseline to use.<\/p>\n<p>Must not be null if <a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.baseline<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextBaseline get textBaseline =&gt; _textBaseline;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/textBaseline.html",
            "name": "textBaseline",
            "isDeprecated": false,
            "type": "dart:ui.TextBaseline",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out horizontally and how to interpret\n<code>start<\/code> and <code>end<\/code> in the horizontal direction.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the order in which\nchildren are positioned (left-to-right or right-to-left), and the meaning\nof the <a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> property's <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> and\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and either the\n<a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is either <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a>, or there's more than one child, then the\n<a href=\"rendering\/RenderFlex\/textDirection.html\">textDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls the meaning of the\n<a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> and\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and the <a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\neither <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>, then the\n<a href=\"rendering\/RenderFlex\/textDirection.html\">textDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        },
        {
            "desc": "<p>Determines the order to lay children out vertically and how to interpret\n<code>start<\/code> and <code>end<\/code> in the vertical direction.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, this controls which order children\nare painted in (down or up), the meaning of the <a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a>\nproperty's <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> and <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and either the <a href=\"rendering\/RenderFlex\/mainAxisAlignment.html\">mainAxisAlignment<\/a>\nis either <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.end<\/a>, or there's\nmore than one child, then the <a href=\"rendering\/RenderFlex\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this controls the meaning of the\n<a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> property's <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> and\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a> values.<\/p>\n<p>If the <a href=\"rendering\/RenderFlex\/direction.html\">direction<\/a> is <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, and the <a href=\"rendering\/RenderFlex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\neither <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>, then the\n<a href=\"rendering\/RenderFlex\/verticalDirection.html\">verticalDirection<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VerticalDirection get verticalDirection =&gt; _verticalDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderFlex\/verticalDirection.html",
            "name": "verticalDirection",
            "isDeprecated": false,
            "type": "painting.VerticalDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderFlex",
            "params": []
        }
    ]
}