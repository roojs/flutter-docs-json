{
    "name": "rendering.SingleChildLayoutDelegate",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "SingleChildLayoutDelegate",
            "type": "",
            "desc": "<p>Creates a layout delegate.<\/p>\n<p>The layout will update whenever <code>relayout<\/code> notifies its listeners.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.SingleChildLayoutDelegate",
            "sig": "",
            "params": [
                {
                    "name": "relayout",
                    "type": "foundation.Listenable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "rendering\/SingleChildLayoutDelegate\/SingleChildLayoutDelegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SingleChildLayoutDelegate({ Listenable relayout }) : _relayout = relayout;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getConstraintsForChild",
            "type": "rendering.BoxConstraints",
            "desc": "<p>The constraints for the child given the incoming constraints.<\/p>\n<p>During layout, the child is given the layout constraints returned by this\nfunction. The child is required to pick a size for itself that satisfies\nthese constraints.<\/p>\n<p>Defaults to the given constraints.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.SingleChildLayoutDelegate",
            "sig": "",
            "params": [
                {
                    "name": "constraints",
                    "type": "rendering.BoxConstraints",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/SingleChildLayoutDelegate\/getConstraintsForChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxConstraints getConstraintsForChild(BoxConstraints constraints) =&gt; constraints;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getPositionForChild",
            "type": "dart:ui.Offset",
            "desc": "<p>The position where the child should be placed.<\/p>\n<p>The <code>size<\/code> argument is the size of the parent, which might be different\nfrom the value returned by <a href=\"rendering\/SingleChildLayoutDelegate\/getSize.html\">getSize<\/a> if that size doesn't satisfy the\nconstraints passed to <a href=\"rendering\/SingleChildLayoutDelegate\/getSize.html\">getSize<\/a>. The <code>childSize<\/code> argument is the size of\nthe child, which will satisfy the constraints returned by\n<a href=\"rendering\/SingleChildLayoutDelegate\/getConstraintsForChild.html\">getConstraintsForChild<\/a>.<\/p>\n<p>Defaults to positioning the child in the upper left corner of the parent.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.SingleChildLayoutDelegate",
            "sig": "",
            "params": [
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/SingleChildLayoutDelegate\/getPositionForChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getPositionForChild(Size size, Size childSize) =&gt; Offset.zero;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getSize",
            "type": "dart:ui.Size",
            "desc": "<p>The size of this object given the incoming constraints.<\/p>\n<p>Defaults to the biggest size that satisfies the given constraints.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.SingleChildLayoutDelegate",
            "sig": "",
            "params": [
                {
                    "name": "constraints",
                    "type": "rendering.BoxConstraints",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/SingleChildLayoutDelegate\/getSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size getSize(BoxConstraints constraints) =&gt; constraints.biggest;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "shouldRelayout",
            "type": "dart:core.bool",
            "desc": "<p>Called whenever a new instance of the custom layout delegate class is\nprovided to the <a href=\"rendering\/RenderCustomSingleChildLayoutBox-class.html\">RenderCustomSingleChildLayoutBox<\/a> object, or any time\nthat a new <a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a> object is created with a new instance\nof the custom layout delegate class (which amounts to the same thing,\nbecause the latter is implemented in terms of the former).<\/p>\n<p>If the new instance represents different information than the old\ninstance, then the method should return true, otherwise it should return\nfalse.<\/p>\n<p>If the method returns false, then the <a href=\"rendering\/SingleChildLayoutDelegate\/getSize.html\">getSize<\/a>,\n<a href=\"rendering\/SingleChildLayoutDelegate\/getConstraintsForChild.html\">getConstraintsForChild<\/a>, and <a href=\"rendering\/SingleChildLayoutDelegate\/getPositionForChild.html\">getPositionForChild<\/a> calls might be\noptimized away.<\/p>\n<p>It's possible that the layout methods will get called even if\n<a href=\"rendering\/SingleChildLayoutDelegate\/shouldRelayout.html\">shouldRelayout<\/a> returns false (e.g. if an ancestor changed its layout).\nIt's also possible that the layout method will get called\nwithout <a href=\"rendering\/SingleChildLayoutDelegate\/shouldRelayout.html\">shouldRelayout<\/a> being called at all (e.g. if the parent changes\nsize).<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.SingleChildLayoutDelegate",
            "sig": "",
            "params": [
                {
                    "name": "oldDelegate",
                    "type": "rendering.SingleChildLayoutDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/SingleChildLayoutDelegate\/shouldRelayout.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldRelayout(covariant SingleChildLayoutDelegate oldDelegate);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/SingleChildLayoutDelegate-class.html",
    "desc": "<p>A delegate for computing the layout of a render object with a single child.<\/p>\n<p>Used by <a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a> (in the widgets library) and\n<a href=\"rendering\/RenderCustomSingleChildLayoutBox-class.html\">RenderCustomSingleChildLayoutBox<\/a> (in the rendering library).<\/p>\n<p>When asked to layout, <a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a> first calls <a href=\"rendering\/SingleChildLayoutDelegate\/getSize.html\">getSize<\/a> with\nits incoming constraints to determine its size. It then calls\n<a href=\"rendering\/SingleChildLayoutDelegate\/getConstraintsForChild.html\">getConstraintsForChild<\/a> to determine the constraints to apply to the child.\nAfter the child completes its layout, <a href=\"rendering\/RenderCustomSingleChildLayoutBox-class.html\">RenderCustomSingleChildLayoutBox<\/a>\ncalls <a href=\"rendering\/SingleChildLayoutDelegate\/getPositionForChild.html\">getPositionForChild<\/a> to determine the child's position.<\/p>\n<p>The <a href=\"rendering\/SingleChildLayoutDelegate\/shouldRelayout.html\">shouldRelayout<\/a> method is called when a new instance of the class\nis provided, to check if the new instance actually represents different\ninformation.<\/p>\n<p>The most efficient way to trigger a relayout is to supply a relayout\nargument to the constructor of the <a href=\"rendering\/SingleChildLayoutDelegate-class.html\">SingleChildLayoutDelegate<\/a>. The custom\nobject will listen to this value and relayout whenever the animation\nticks, avoiding both the build phase of the pipeline.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/CustomSingleChildLayout-class.html\">CustomSingleChildLayout<\/a>, the widget that uses this delegate.<\/li>\n<li>\n<a href=\"rendering\/RenderCustomSingleChildLayoutBox-class.html\">RenderCustomSingleChildLayoutBox<\/a>, render object that uses this\ndelegate.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SingleChildLayoutDelegate"
}