{
    "name": "dart:isolate.ReceivePort",
    "extends": [],
    "memberOf": "dart:isolate",
    "events": [],
    "methods": [
        {
            "name": "ReceivePort",
            "type": "",
            "desc": "<p>Opens a long-lived port for receiving messages.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> is a non-broadcast stream. This means that it buffers\nincoming messages until a listener is registered. Only one listener can\nreceive messages. See <a href=\"dart-async\/Stream\/asBroadcastStream.html\">Stream.asBroadcastStream<\/a> for transforming the port\nto a broadcast stream.<\/p>\n<p>A receive port is closed by canceling its subscription.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-isolate\/ReceivePort\/ReceivePort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory ReceivePort();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "close",
            "type": "",
            "desc": "<p>Closes <code>this<\/code>.<\/p>\n<p>If the stream has not been canceled yet, adds a close-event to the event\nqueue and discards any further incoming messages.<\/p>\n<p>If the stream has already been canceled this method has no effect.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-isolate\/ReceivePort\/close.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "ReceivePort.fromRawReceivePort",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> from a <a href=\"dart-isolate\/RawReceivePort-class.html\">RawReceivePort<\/a>.<\/p>\n<p>The handler of the given <code>rawPort<\/code> is overwritten during the construction\nof the result.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "sig": "",
            "params": [
                {
                    "name": "rawPort",
                    "type": "dart:isolate.RawReceivePort",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-isolate\/ReceivePort\/ReceivePort.fromRawReceivePort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory ReceivePort.fromRawReceivePort(RawReceivePort rawPort);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "listen",
            "type": "dart:async.StreamSubscription",
            "desc": "<p>Inherited from <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/p>\n<p>Note that <code>onError<\/code> and <code>cancelOnError<\/code> are ignored since a ReceivePort\nwill never receive an error.<\/p>\n<p>The <code>onDone<\/code> handler will be called when the stream closes.\nThe stream closes when <a href=\"dart-isolate\/ReceivePort\/close.html\">close<\/a> is called.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "message",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "onError",
                    "type": "dart:core.Function",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDone",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cancelOnError",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-isolate\/ReceivePort\/listen.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription listen(void onData(var message),\n    {Function onError, void onDone(), bool cancelOnError});<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "sendPort",
            "type": "dart:isolate.SendPort",
            "types": [],
            "desc": "<p>Returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> that sends to this receive port.<\/p>\n        ",
            "memberOf": "dart:isolate.ReceivePort",
            "isConstant": false,
            "href": "dart-isolate\/ReceivePort\/sendPort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SendPort get sendPort;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-isolate\/ReceivePort-class.html",
    "desc": "<p>Together with <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>, the only means of communication between isolates.<\/p>\n<p><a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>s have a <code>sendPort<\/code> getter which returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>.\nAny message that is sent through this <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>\nis delivered to the <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> it has been created from. There, the\nmessage is dispatched to the <code>ReceivePort<\/code>'s listener.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> is a non-broadcast stream. This means that it buffers\nincoming messages until a listener is registered. Only one listener can\nreceive messages. See <a href=\"dart-async\/Stream\/asBroadcastStream.html\">Stream.asBroadcastStream<\/a> for transforming the port\nto a broadcast stream.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> may have many <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ReceivePort"
}