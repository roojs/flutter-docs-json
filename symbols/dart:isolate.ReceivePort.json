{
    "desc": "<p>Together with <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>, the only means of communication between isolates.<\/p>\n<p><a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>s have a <code>sendPort<\/code> getter which returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>.\nAny message that is sent through this <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>\nis delivered to the <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> it has been created from. There, the\nmessage is dispatched to the <code>ReceivePort<\/code>'s listener.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> is a non-broadcast stream. This means that it buffers\nincoming messages until a listener is registered. Only one listener can\nreceive messages. See <a href=\"dart-async\/Stream\/asBroadcastStream.html\">Stream.asBroadcastStream<\/a> for transforming the port\nto a broadcast stream.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> may have many <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-isolate\/ReceivePort-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:isolate",
    "name": "dart:isolate.ReceivePort",
    "shortname": "ReceivePort",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Opens a long-lived port for receiving messages.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> is a non-broadcast stream. This means that it buffers\nincoming messages until a listener is registered. Only one listener can\nreceive messages. See <a href=\"dart-async\/Stream\/asBroadcastStream.html\">Stream.asBroadcastStream<\/a> for transforming the port\nto a broadcast stream.<\/p>\n<p>A receive port is closed by canceling its subscription.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory ReceivePort();<\/code><\/pre>\n    ",
            "href": "dart-isolate\/ReceivePort\/ReceivePort.html",
            "isDeprecated": false,
            "type": "",
            "name": "ReceivePort",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "params": []
        },
        {
            "desc": "<p>Closes <code>this<\/code>.<\/p>\n<p>If the stream has not been canceled yet, adds a close-event to the event\nqueue and discards any further incoming messages.<\/p>\n<p>If the stream has already been canceled this method has no effect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
            "href": "dart-isolate\/ReceivePort\/close.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "params": []
        },
        {
            "desc": "<p>Inherited from <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/p>\n<p>Note that <code>onError<\/code> and <code>cancelOnError<\/code> are ignored since a ReceivePort\nwill never receive an error.<\/p>\n<p>The <code>onDone<\/code> handler will be called when the stream closes.\nThe stream closes when <a href=\"dart-isolate\/ReceivePort\/close.html\">close<\/a> is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription listen(void onData(var message),\n    {Function onError, void onDone(), bool cancelOnError});<\/code><\/pre>\n    ",
            "href": "dart-isolate\/ReceivePort\/listen.html",
            "isDeprecated": false,
            "type": "dart:async.StreamSubscription",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:isolate.ReceivePort",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "message",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "onDone",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> that sends to this receive port.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SendPort get sendPort;<\/code><\/pre>\n        ",
            "href": "dart-isolate\/ReceivePort\/sendPort.html",
            "name": "sendPort",
            "isDeprecated": false,
            "type": "dart:isolate.SendPort",
            "memberOf": "dart:isolate.ReceivePort",
            "params": []
        }
    ]
}