{
    "desc": "<p>A convenience widget that combines common painting, positioning, and sizing\nwidgets.<\/p>\n<p>A container first surrounds the child with <a href=\"widgets\/Container\/padding.html\">padding<\/a> (inflated by any\nborders present in the <a href=\"widgets\/Container\/decoration.html\">decoration<\/a>) and then applies additional\n<a href=\"widgets\/Container\/constraints.html\">constraints<\/a> to the padded extent (incorporating the <code>width<\/code> and <code>height<\/code>\nas constraints, if either is non-null). The container is then surrounded by\nadditional empty space described from the <a href=\"widgets\/Container\/margin.html\">margin<\/a>.<\/p>\n<p>During painting, the container first applies the given <a href=\"widgets\/Container\/transform.html\">transform<\/a>, then\npaints the <a href=\"widgets\/Container\/decoration.html\">decoration<\/a> to fill the padded extent, then it paints the child,\nand finally paints the <a href=\"widgets\/Container\/foregroundDecoration.html\">foregroundDecoration<\/a>, also filling the padded\nextent.<\/p>\n<p>Containers with no children try to be as big as possible unless the incoming\nconstraints are unbounded, in which case they try to be as small as\npossible. Containers with children size themselves to their children. The\n<code>width<\/code>, <code>height<\/code>, and <a href=\"widgets\/Container\/constraints.html\">constraints<\/a> arguments to the constructor override\nthis.<\/p>\n<h2 id=\"layout-behavior\">Layout behavior<\/h2>\n<p><em>See <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> for an introduction to box layout models.<\/em><\/p>\n<p>Since <a href=\"widgets\/Container-class.html\">Container<\/a> combines a number of other widgets each with their own\nlayout behavior, <a href=\"widgets\/Container-class.html\">Container<\/a>'s layout behavior is somewhat complicated.<\/p>\n<p>Summary: <a href=\"widgets\/Container-class.html\">Container<\/a> tries, in order: to honor <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>, to size itself\nto the <a href=\"widgets\/Container\/child.html\">child<\/a>, to honor the <code>width<\/code>, <code>height<\/code>, and <a href=\"widgets\/Container\/constraints.html\">constraints<\/a>, to expand\nto fit the parent, to be as small as possible.<\/p>\n<p>More specifically:<\/p>\n<p>If the widget has no child, no <code>height<\/code>, no <code>width<\/code>, no <a href=\"widgets\/Container\/constraints.html\">constraints<\/a>,\nand the parent provides unbounded constraints, then <a href=\"widgets\/Container-class.html\">Container<\/a> tries to\nsize as small as possible.<\/p>\n<p>If the widget has no child and no <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>, but a <code>height<\/code>, <code>width<\/code>, or\n<a href=\"widgets\/Container\/constraints.html\">constraints<\/a> are provided, then the <a href=\"widgets\/Container-class.html\">Container<\/a> tries to be as small as\npossible given the combination of those constraints and the parent's\nconstraints.<\/p>\n<p>If the widget has no child, no <code>height<\/code>, no <code>width<\/code>, no <a href=\"widgets\/Container\/constraints.html\">constraints<\/a>, and\nno <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>, but the parent provides bounded constraints, then\n<a href=\"widgets\/Container-class.html\">Container<\/a> expands to fit the constraints provided by the parent.<\/p>\n<p>If the widget has an <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>, and the parent provides unbounded\nconstraints, then the <a href=\"widgets\/Container-class.html\">Container<\/a> tries to size itself around the child.<\/p>\n<p>If the widget has an <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>, and the parent provides bounded\nconstraints, then the <a href=\"widgets\/Container-class.html\">Container<\/a> tries to expand to fit the parent, and\nthen positions the child within itself as per the <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>.<\/p>\n<p>Otherwise, the widget has a <a href=\"widgets\/Container\/child.html\">child<\/a> but no <code>height<\/code>, no <code>width<\/code>, no\n<a href=\"widgets\/Container\/constraints.html\">constraints<\/a>, and no <a href=\"widgets\/Container\/alignment.html\">alignment<\/a>, and the <a href=\"widgets\/Container-class.html\">Container<\/a> passes the\nconstraints from the parent to the child and sizes itself to match the\nchild.<\/p>\n<p>The <a href=\"widgets\/Container\/margin.html\">margin<\/a> and <a href=\"widgets\/Container\/padding.html\">padding<\/a> properties also affect the layout, as described\nin the documentation for those properties. (Their effects merely augment the\nrules described above.) The <a href=\"widgets\/Container\/decoration.html\">decoration<\/a> can implicitly increase the\n<a href=\"widgets\/Container\/padding.html\">padding<\/a> (e.g. borders in a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> contribute to the <a href=\"widgets\/Container\/padding.html\">padding<\/a>);\nsee <a href=\"widgets\/Container\/padding.html\">Decoration.padding<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows a 48x48 amber square (placed inside a <a href=\"widgets\/Center-class.html\">Center<\/a> widget in\ncase the parent widget has its own opinions regarding the size that the\n<a href=\"widgets\/Container-class.html\">Container<\/a> should take), with a margin so that it stays away from\nneighboring widgets:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Center(\n  child: Container(\n    margin: const EdgeInsets.all(10.0),\n    color: Colors.amber[600],\n    width: 48.0,\n    height: 48.0,\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how to use many of the features of <a href=\"widgets\/Container-class.html\">Container<\/a> at once.\nThe <a href=\"widgets\/Container\/constraints.html\">constraints<\/a> are set to fit the font size plus ample headroom\nvertically, while expanding horizontally to fit the parent. The <a href=\"widgets\/Container\/padding.html\">padding<\/a> is\nused to make sure there is space between the contents and the text. The\n<code>color<\/code> makes the box blue. The <a href=\"widgets\/Container\/alignment.html\">alignment<\/a> causes the <a href=\"widgets\/Container\/child.html\">child<\/a> to be\ncentered in the box. Finally, the <a href=\"widgets\/Container\/transform.html\">transform<\/a> applies a slight rotation to the\nentire contraption to complete the effect.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  constraints: BoxConstraints.expand(\n    height: Theme.of(context).textTheme.display1.fontSize * 1.1 + 200.0,\n  ),\n  padding: const EdgeInsets.all(8.0),\n  color: Colors.blue[600],\n  alignment: Alignment.center,\n  child: Text('Hello World',\n    style: Theme.of(context)\n        .textTheme\n        .display1\n        .copyWith(color: Colors.white)),\n  transform: Matrix4.rotationZ(0.1),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AnimatedContainer-class.html\">AnimatedContainer<\/a>, a variant that smoothly animates the properties when\nthey change.<\/li>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which has a sample which uses <a href=\"widgets\/Container-class.html\">Container<\/a> heavily.<\/li>\n<li>\n<a href=\"material\/Ink-class.html\">Ink<\/a>, which paints a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> on a <a href=\"material\/Material-class.html\">Material<\/a>, allowing\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a> and <a href=\"material\/InkWell-class.html\">InkWell<\/a> splashes to paint over them.<\/li>\n<li>The <a href=\"https:\/\/flutter.io\/widgets\/layout\/\">catalog of layout widgets<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "widgets\/Container-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Container",
    "shortname": "Container",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that combines common painting, positioning, and sizing widgets.<\/p>\n<p>The <code>height<\/code> and <code>width<\/code> values include the padding.<\/p>\n<p>The <code>color<\/code> argument is a shorthand for <code>decoration: new\nBoxDecoration(color: color)<\/code>, which means you cannot supply both a <code>color<\/code>\nand a <code>decoration<\/code> argument. If you want to have both a <code>color<\/code> and a\n<code>decoration<\/code>, you can pass the color as the <code>color<\/code> argument to the\n<code>BoxDecoration<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Container({\n  Key key,\n  this.alignment,\n  this.padding,\n  Color color,\n  Decoration decoration,\n  this.foregroundDecoration,\n  double width,\n  double height,\n  BoxConstraints constraints,\n  this.margin,\n  this.transform,\n  this.child,\n}) : assert(margin == null || margin.isNonNegative),\n     assert(padding == null || padding.isNonNegative),\n     assert(decoration == null || decoration.debugAssertIsValid()),\n     assert(constraints == null || constraints.debugAssertIsValid()),\n     assert(color == null || decoration == null,\n       'Cannot provide both a color and a decoration\\n'\n       'The color argument is just a shorthand for \"decoration: new BoxDecoration(color: color)\".'\n     ),\n     decoration = decoration ?? (color != null ? BoxDecoration(color: color) : null),\n     constraints =\n      (width != null || height != null)\n        ? constraints?.tighten(width: width, height: height)\n          ?? BoxConstraints.tightFor(width: width, height: height)\n        : constraints,\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Container\/Container.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Container",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "constraints",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.BoxConstraints"
                },
                {
                    "name": "decoration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.Decoration"
                },
                {
                    "name": "foregroundDecoration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.Decoration"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "margin",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "transform",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "vector_math_64.Matrix4"
                },
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"widgets\/Container\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  Widget current = child;\n\n  if (child == null &amp;&amp; (constraints == null || !constraints.isTight)) {\n    current = LimitedBox(\n      maxWidth: 0.0,\n      maxHeight: 0.0,\n      child: ConstrainedBox(constraints: const BoxConstraints.expand()),\n    );\n  }\n\n  if (alignment != null)\n    current = Align(alignment: alignment, child: current);\n\n  final EdgeInsetsGeometry effectivePadding = _paddingIncludingDecoration;\n  if (effectivePadding != null)\n    current = Padding(padding: effectivePadding, child: current);\n\n  if (decoration != null)\n    current = DecoratedBox(decoration: decoration, child: current);\n\n  if (foregroundDecoration != null) {\n    current = DecoratedBox(\n      decoration: foregroundDecoration,\n      position: DecorationPosition.foreground,\n      child: current,\n    );\n  }\n\n  if (constraints != null)\n    current = ConstrainedBox(constraints: constraints, child: current);\n\n  if (margin != null)\n    current = Padding(padding: margin, child: current);\n\n  if (transform != null)\n    current = Transform(transform: transform, child: current);\n\n  return current;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Container\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Container",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Container\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;AlignmentGeometry&gt;('alignment', alignment, showName: false, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Decoration&gt;('bg', decoration, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Decoration&gt;('fg', foregroundDecoration, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;BoxConstraints&gt;('constraints', constraints, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('margin', margin, defaultValue: null));\n  properties.add(ObjectFlagProperty&lt;Matrix4&gt;.has('transform', transform));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Container\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Container",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Align the <a href=\"widgets\/Container\/child.html\">child<\/a> within the container.<\/p>\n<p>If non-null, the container will expand to fill its parent and position its\nchild within itself according to the given value. If the incoming\nconstraints are unbounded, then the child will be shrink-wrapped instead.<\/p>\n<p>Ignored if <a href=\"widgets\/Container\/child.html\">child<\/a> is null.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/alignment.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"widgets\/Container\/child.html\">child<\/a> contained by the container.<\/p>\n<p>If null, and if the <a href=\"widgets\/Container\/constraints.html\">constraints<\/a> are unbounded or also null, the\ncontainer will expand to fill all available space in its parent, unless\nthe parent provides unbounded constraints, in which case the container\nwill attempt to be as small as possible.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>Additional constraints to apply to the child.<\/p>\n<p>The constructor <code>width<\/code> and <code>height<\/code> arguments are combined with the\n<code>constraints<\/code> argument to set this property.<\/p>\n<p>The <a href=\"widgets\/Container\/padding.html\">padding<\/a> goes inside the constraints.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxConstraints constraints\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/constraints.html",
            "isDeprecated": "0",
            "type": "rendering.BoxConstraints",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>The decoration to paint behind the <a href=\"widgets\/Container\/child.html\">child<\/a>.<\/p>\n<p>A shorthand for specifying just a solid color is available in the\nconstructor: set the <code>color<\/code> argument instead of the <code>decoration<\/code>\nargument.<\/p>\n<p>The <a href=\"widgets\/Container\/child.html\">child<\/a> is not clipped to the decoration. To clip a child to the shape\nof a particular <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>, consider using a <a href=\"widgets\/ClipPath-class.html\">ClipPath<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Decoration decoration\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/decoration.html",
            "isDeprecated": "0",
            "type": "painting.Decoration",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>The decoration to paint in front of the <a href=\"widgets\/Container\/child.html\">child<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Decoration foregroundDecoration\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/foregroundDecoration.html",
            "isDeprecated": "0",
            "type": "painting.Decoration",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>Empty space to surround the <a href=\"widgets\/Container\/decoration.html\">decoration<\/a> and <a href=\"widgets\/Container\/child.html\">child<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry margin\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/margin.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>Empty space to inscribe inside the <a href=\"widgets\/Container\/decoration.html\">decoration<\/a>. The <a href=\"widgets\/Container\/child.html\">child<\/a>, if any, is\nplaced inside this padding.<\/p>\n<p>This padding is in addition to any padding inherent in the <a href=\"widgets\/Container\/decoration.html\">decoration<\/a>;\nsee <a href=\"widgets\/Container\/padding.html\">Decoration.padding<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "widgets.Container",
            "params": []
        },
        {
            "desc": "<p>The transformation matrix to apply before painting the container.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Matrix4 transform\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Container\/transform.html",
            "isDeprecated": "0",
            "type": "vector_math_64.Matrix4",
            "memberOf": "widgets.Container",
            "params": []
        }
    ]
}