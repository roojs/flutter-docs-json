{
    "name": "animation.AnimationLocalListenersMixin",
    "extends": [],
    "memberOf": "animation",
    "events": [],
    "methods": [
        {
            "name": "AnimationLocalListenersMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "animation.AnimationLocalListenersMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "animation\/AnimationLocalListenersMixin\/AnimationLocalListenersMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "addListener",
            "type": "",
            "desc": "<p>Calls the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/AnimationLocalListenersMixin\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLocalListenersMixin",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "animation\/AnimationLocalListenersMixin\/addListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addListener(VoidCallback listener) {\n  didRegisterListener();\n  _listeners.add(listener);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didRegisterListener",
            "type": "",
            "desc": "<p>Called immediately before a listener is added via <a href=\"animation\/AnimationLocalListenersMixin\/addListener.html\">addListener<\/a>.<\/p>\n<p>At the time this method is called the registered listener is not yet\nnotified by <a href=\"animation\/AnimationLocalListenersMixin\/notifyListeners.html\">notifyListeners<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLocalListenersMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLocalListenersMixin\/didRegisterListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didRegisterListener();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didUnregisterListener",
            "type": "",
            "desc": "<p>Called immediately after a listener is removed via <a href=\"animation\/AnimationLocalListenersMixin\/removeListener.html\">removeListener<\/a>.<\/p>\n<p>At the time this method is called the removed listener is no longer\nnotified by <a href=\"animation\/AnimationLocalListenersMixin\/notifyListeners.html\">notifyListeners<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLocalListenersMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLocalListenersMixin\/didUnregisterListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didUnregisterListener();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "notifyListeners",
            "type": "",
            "desc": "<p>Calls all the listeners.<\/p>\n<p>If listeners are added or removed during this function, the modifications\nwill not change which listeners are called during this iteration.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLocalListenersMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLocalListenersMixin\/notifyListeners.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void notifyListeners() {\n  final List&lt;VoidCallback&gt; localListeners = List&lt;VoidCallback&gt;.from(_listeners);\n  for (VoidCallback listener in localListeners) {\n    try {\n      if (_listeners.contains(listener))\n        listener();\n    } catch (exception, stack) {\n      FlutterError.reportError(FlutterErrorDetails(\n        exception: exception,\n        stack: stack,\n        library: 'animation library',\n        context: 'while notifying listeners for $runtimeType',\n        informationCollector: (StringBuffer information) {\n          information.writeln('The $runtimeType notifying listeners was:');\n          information.write('  $this');\n        },\n      ));\n    }\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeListener",
            "type": "",
            "desc": "<p>Stop calling the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/AnimationLocalListenersMixin\/addListener.html\">addListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLocalListenersMixin",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "animation\/AnimationLocalListenersMixin\/removeListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeListener(VoidCallback listener) {\n  final bool removed = _listeners.remove(listener);\n  if (removed) {\n    didUnregisterListener();\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "animation\/AnimationLocalListenersMixin-mixin.html",
    "desc": "<p>A mixin that implements the <a href=\"animation\/AnimationLocalListenersMixin\/addListener.html\">addListener<\/a>\/<a href=\"animation\/AnimationLocalListenersMixin\/removeListener.html\">removeListener<\/a> protocol and notifies\nall the registered listeners when <a href=\"animation\/AnimationLocalListenersMixin\/notifyListeners.html\">notifyListeners<\/a> is called.<\/p>\n<p>This mixin requires that the mixing class provide methods <a href=\"animation\/AnimationLocalListenersMixin\/didRegisterListener.html\">didRegisterListener<\/a>\nand <a href=\"animation\/AnimationLocalListenersMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>. Implementations of these methods can be obtained\nby mixing in another mixin from this library, such as <a href=\"animation\/AnimationLazyListenerMixin-mixin.html\">AnimationLazyListenerMixin<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "AnimationLocalListenersMixin"
}