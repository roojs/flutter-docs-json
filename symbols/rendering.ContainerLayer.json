{
    "desc": "<p>A composited layer that has a list of children.<\/p>\n<p>A <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a> instance merely takes a list of children and inserts them\ninto the composited rendering in order. There are subclasses of\n<a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a> which apply more elaborate effects in the process.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/ContainerLayer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.ContainerLayer",
    "shortname": "ContainerLayer",
    "extends": [
        "rendering.Layer",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "rendering.AnnotatedRegionLayer",
        "rendering.BackdropFilterLayer",
        "rendering.ClipPathLayer",
        "rendering.ClipRRectLayer",
        "rendering.ClipRectLayer",
        "rendering.FollowerLayer",
        "rendering.LeaderLayer",
        "rendering.OffsetLayer",
        "rendering.OpacityLayer",
        "rendering.PhysicalModelLayer",
        "rendering.ShaderMaskLayer",
        "rendering.TransformLayer"
    ],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "rendering\/ContainerLayer\/ContainerLayer.html",
            "isDeprecated": false,
            "type": "",
            "name": "ContainerLayer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        },
        {
            "desc": "<p>Uploads all of this layer's children to the engine.<\/p>\n<p>This method is typically used by <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a> to insert the children into\nthe scene. Subclasses of <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a> typically override <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a>\nto apply effects to the scene using the <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> API, then insert\ntheir children using <a href=\"rendering\/ContainerLayer\/addChildrenToScene.html\">addChildrenToScene<\/a>, then reverse the aforementioned\neffects before returning from <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addChildrenToScene(ui.SceneBuilder builder, [ Offset childOffset = Offset.zero ]) {\n  Layer child = firstChild;\n  while (child != null) {\n    if (childOffset == Offset.zero) {\n      child._addToSceneWithRetainedRendering(builder);\n    } else {\n      child.addToScene(builder, childOffset);\n    }\n    child = child.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/addChildrenToScene.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addChildrenToScene",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": [
                {
                    "name": "builder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.SceneBuilder"
                },
                {
                    "name": "childOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Override this method to upload this layer to the engine.<\/p>\n<p>Return the engine layer for retained rendering. When there's no\ncorresponding engine layer, null is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nui.EngineLayer addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]) {\n  addChildrenToScene(builder, layerOffset);\n  return null; \/\/ ContainerLayer does not have a corresponding engine layer\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/addToScene.html",
            "isDeprecated": false,
            "type": "dart:ui.EngineLayer",
            "name": "addToScene",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": [
                {
                    "name": "builder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.SceneBuilder"
                },
                {
                    "name": "layerOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Adds the given layer to the end of this layer's child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void append(Layer child) {\n  assert(child != this);\n  assert(child != firstChild);\n  assert(child != lastChild);\n  assert(child.parent == null);\n  assert(!child.attached);\n  assert(child.nextSibling == null);\n  assert(child.previousSibling == null);\n  assert(() {\n    Layer node = this;\n    while (node.parent != null)\n      node = node.parent;\n    assert(node != child); \/\/ indicates we are about to create a cycle\n    return true;\n  }());\n  adoptChild(child);\n  child._previousSibling = lastChild;\n  if (lastChild != null)\n    lastChild._nextSibling = child;\n  _lastChild = child;\n  _firstChild ??= child;\n  assert(child.attached == attached);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/append.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "append",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.Layer"
                }
            ]
        },
        {
            "desc": "<p>Applies the transform that would be applied when compositing the given\nchild to the given matrix.<\/p>\n<p>Specifically, this should apply the transform that is applied to child's\n<em>origin<\/em>. When using <a href=\"rendering\/ContainerLayer\/applyTransform.html\">applyTransform<\/a> with a chain of layers, results will\nbe unreliable unless the deepest layer in the chain collapses the\n<code>layerOffset<\/code> in <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a> to zero, meaning that it passes\n<a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a> to its children, and bakes any incoming <code>layerOffset<\/code> into\nthe <a href=\"dart-ui\/SceneBuilder-class.html\">SceneBuilder<\/a> as (for instance) a transform (which is then also\nincluded in the transformation applied by <a href=\"rendering\/ContainerLayer\/applyTransform.html\">applyTransform<\/a>).<\/p>\n<p>For example, if <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a> applies the <code>layerOffset<\/code> and then\npasses <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a> to the children, then it should be included in the\ntransform applied here, whereas if <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a> just passes the\n<code>layerOffset<\/code> to the child, then it should not be included in the\ntransform applied here.<\/p>\n<p>This method is only valid immediately after <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a> has been called,\nbefore any of the properties have been changed.<\/p>\n<p>The default implementation does nothing, since <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a>, by\ndefault, composites its children at the origin of the <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a>\nitself.<\/p>\n<p>The <code>child<\/code> argument should generally not be null, since in principle a\nlayer could transform each child independently. However, certain layers\nmay explicitly allow null as a value, for example if they know that they\ntransform all their children identically.<\/p>\n<p>The <code>transform<\/code> argument must not be null.<\/p>\n<p>Used by <a href=\"rendering\/FollowerLayer-class.html\">FollowerLayer<\/a> to transform its child to a <a href=\"rendering\/LeaderLayer-class.html\">LeaderLayer<\/a>'s\nposition.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void applyTransform(Layer child, Matrix4 transform) {\n  assert(child != null);\n  assert(transform != null);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/applyTransform.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "applyTransform",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.Layer"
                },
                {
                    "name": "transform",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"rendering\/Layer\/parent.html\">parent<\/a>'s <a href=\"rendering\/ContainerLayer\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/ContainerLayer\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/ContainerLayer\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(Object owner) {\n  super.attach(owner);\n  Layer child = firstChild;\n  while (child != null) {\n    child.attach(owner);\n    child = child.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/attach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "attach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": [
                {
                    "name": "owner",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/ContainerLayer\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  final List&lt;DiagnosticsNode&gt; children = &lt;DiagnosticsNode&gt;[];\n  if (firstChild == null)\n    return children;\n  Layer child = firstChild;\n  int count = 1;\n  while (true) {\n    children.add(child.toDiagnosticsNode(name: 'child $count'));\n    if (child == lastChild)\n      break;\n    count += 1;\n    child = child.nextSibling;\n  }\n  return children;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/debugDescribeChildren.html",
            "isDeprecated": false,
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "name": "debugDescribeChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"rendering\/Layer\/parent.html\">parent<\/a>'s <a href=\"rendering\/ContainerLayer\/detach.html\">detach<\/a>, and by the <a href=\"foundation\/AbstractNode\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/ContainerLayer\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/ContainerLayer\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  super.detach();\n  Layer child = firstChild;\n  while (child != null) {\n    child.detach();\n    child = child.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/detach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        },
        {
            "desc": "<p>Returns the value of <code>S<\/code> that corresponds to the point described by\n<code>regionOffset<\/code>.<\/p>\n<p>Returns null if no matching region is found.<\/p>\n<p>The main way for a value to be assigned here is by pushing an\n<a href=\"rendering\/AnnotatedRegionLayer-class.html\">AnnotatedRegionLayer<\/a> into the layer tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/AnnotatedRegionLayer-class.html\">AnnotatedRegionLayer<\/a>, for placing values in the layer tree.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nS find&lt;S&gt;(Offset regionOffset) {\n  Layer current = lastChild;\n  while (current != null) {\n    final Object value = current.find&lt;S&gt;(regionOffset);\n    if (value != null) {\n      return value;\n    }\n    current = current.previousSibling;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/find.html",
            "isDeprecated": false,
            "type": "<S>",
            "name": "find",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": [
                {
                    "name": "regionOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Removes all of this layer's children from its child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAllChildren() {\n  Layer child = firstChild;\n  while (child != null) {\n    final Layer next = child.nextSibling;\n    child._previousSibling = null;\n    child._nextSibling = null;\n    assert(child.attached == attached);\n    dropChild(child);\n    child = next;\n  }\n  _firstChild = null;\n  _lastChild = null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/removeAllChildren.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeAllChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        },
        {
            "desc": "<p>Traverse the layer tree and compute if any subtree needs <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a>.<\/p>\n<p>A subtree needs <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a> if any of its layer needs <a href=\"rendering\/ContainerLayer\/addToScene.html\">addToScene<\/a>.\nThe <a href=\"rendering\/ContainerLayer-class.html\">ContainerLayer<\/a> will override this to respect its children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateSubtreeNeedsAddToScene() {\n  super.updateSubtreeNeedsAddToScene();\n  Layer child = firstChild;\n  while (child != null) {\n    child.updateSubtreeNeedsAddToScene();\n    _subtreeNeedsAddToScene = _subtreeNeedsAddToScene || child._subtreeNeedsAddToScene;\n    child = child.nextSibling;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/ContainerLayer\/updateSubtreeNeedsAddToScene.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateSubtreeNeedsAddToScene",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The first composited layer in this layer's child list.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Layer get firstChild =&gt; _firstChild;<\/code><\/pre>\n        ",
            "href": "rendering\/ContainerLayer\/firstChild.html",
            "name": "firstChild",
            "isDeprecated": false,
            "type": "rendering.Layer",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        },
        {
            "desc": "<p>The last composited layer in this layer's child list.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Layer get lastChild =&gt; _lastChild;<\/code><\/pre>\n        ",
            "href": "rendering\/ContainerLayer\/lastChild.html",
            "name": "lastChild",
            "isDeprecated": false,
            "type": "rendering.Layer",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.ContainerLayer",
            "params": []
        }
    ]
}