{
    "desc": "<p>A JSON-RPC 2.0 server.<\/p>\n<p>A server exposes methods that are called by requests, to which it provides\nresponses. Methods can be registered using <a href=\"package-json_rpc_2_json_rpc_2\/Server\/registerMethod.html\">registerMethod<\/a> and\n<a href=\"package-json_rpc_2_json_rpc_2\/Server\/registerFallback.html\">registerFallback<\/a>. Requests can be handled using <code>handleRequest<\/code> and\n<code>parseRequest<\/code>.<\/p>\n<p>Note that since requests can arrive asynchronously and methods can run\nasynchronously, it's possible for multiple methods to be invoked at the same\ntime, or even for a single method to be invoked multiple times at once.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-json_rpc_2_json_rpc_2\/Server-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "json_rpc_2",
    "name": "json_rpc_2.Server",
    "shortname": "Server",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"package-json_rpc_2_json_rpc_2\/Server-class.html\">Server<\/a> that communicates over <code>channel<\/code>.<\/p>\n<p>Note that the server won't begin listening to <code>requests<\/code> until\n<a href=\"package-json_rpc_2_json_rpc_2\/Server\/listen.html\">Server.listen<\/a> is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Server(StreamChannel&lt;String&gt; channel)\n    : this.withoutJson(\n          jsonDocument.bind(channel).transform(respondToFormatExceptions));<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/Server.html",
            "isDeprecated": false,
            "type": "",
            "name": "Server",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "json_rpc_2.Server",
            "params": [
                {
                    "name": "channel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "stream_channel.StreamChannel<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Closes the underlying connection.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when all resources have been released.\nThis is the same as <a href=\"package-json_rpc_2_json_rpc_2\/Server\/done.html\">done<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() =&gt; _manager.close();<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/close.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Server",
            "params": []
        },
        {
            "desc": "<p>Starts listening to the underlying stream.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that will complete when the connection is closed or\nwhen it has an error. This is the same as <a href=\"package-json_rpc_2_json_rpc_2\/Server\/done.html\">done<\/a>.<\/p>\n<p><a href=\"package-json_rpc_2_json_rpc_2\/Server\/listen.html\">listen<\/a> may only be called once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future listen() =&gt; _manager.listen(_handleRequest);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/listen.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Server",
            "params": []
        },
        {
            "desc": "<p>Registers a fallback method on this server.<\/p>\n<p>A server may have any number of fallback methods. When a request comes in\nthat doesn't match any named methods, each fallback is tried in order. A\nfallback can pass on handling a request by throwing a\n<a href=\"package-json_rpc_2_json_rpc_2\/RpcException\/RpcException.methodNotFound.html\">RpcException.methodNotFound<\/a> exception.<\/p>\n<p><code>callback<\/code> can return either a JSON-serializable object or a Future that\ncompletes to a JSON-serializable object. Any errors in <code>callback<\/code> will be\nreported to the client as JSON-RPC 2.0 errors. <code>callback<\/code> may send custom\nerrors by throwing an <a href=\"package-json_rpc_2_json_rpc_2\/RpcException-class.html\">RpcException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void registerFallback(callback(Parameters parameters)) {\n  _fallbacks.add(callback);\n}<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/registerFallback.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "registerFallback",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Server",
            "params": [
                {
                    "name": "parameters",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "json_rpc_2.Parameters"
                }
            ]
        },
        {
            "desc": "<p>Registers a method named <code>name<\/code> on this server.<\/p>\n<p><code>callback<\/code> can take either zero or one arguments. If it takes zero, any\nrequests for that method that include parameters will be rejected. If it\ntakes one, it will be passed a <a href=\"package-json_rpc_2_json_rpc_2\/Parameters-class.html\">Parameters<\/a> object.<\/p>\n<p><code>callback<\/code> can return either a JSON-serializable object or a Future that\ncompletes to a JSON-serializable object. Any errors in <code>callback<\/code> will be\nreported to the client as JSON-RPC 2.0 errors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void registerMethod(String name, Function callback) {\n  if (_methods.containsKey(name)) {\n    throw new ArgumentError('There\\'s already a method named \"$name\".');\n  }\n\n  _methods[name] = callback;\n}<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/registerMethod.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "registerMethod",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Server",
            "params": [
                {
                    "name": "callback",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "name",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the underlying connection is\nclosed.<\/p>\n<p>This is the same future that's returned by <a href=\"package-json_rpc_2_json_rpc_2\/Server\/listen.html\">listen<\/a> and <a href=\"package-json_rpc_2_json_rpc_2\/Server\/close.html\">close<\/a>. It may\ncomplete before <a href=\"package-json_rpc_2_json_rpc_2\/Server\/close.html\">close<\/a> is called if the remote endpoint closes the\nconnection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done =&gt; _manager.done;<\/code><\/pre>\n        ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/done.html",
            "name": "done",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "json_rpc_2.Server",
            "params": []
        },
        {
            "desc": "<p>Whether the underlying connection is closed.<\/p>\n<p>Note that this will be <code>true<\/code> before <a href=\"package-json_rpc_2_json_rpc_2\/Server\/close.html\">close<\/a> is called if the remote\nendpoint closes the connection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed =&gt; _manager.isClosed;<\/code><\/pre>\n        ",
            "href": "package-json_rpc_2_json_rpc_2\/Server\/isClosed.html",
            "name": "isClosed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "json_rpc_2.Server",
            "params": []
        }
    ]
}