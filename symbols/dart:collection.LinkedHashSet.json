{
    "name": "dart:collection.LinkedHashSet",
    "extends": [],
    "memberOf": "dart:collection",
    "events": [],
    "methods": [
        {
            "name": "LinkedHashSet",
            "type": "",
            "desc": "<p>Create an insertion-ordered hash set using the provided\n<code>equals<\/code> and <code>hashCode<\/code>.<\/p>\n<p>The provided <code>equals<\/code> must define a stable equivalence relation, and\n<code>hashCode<\/code> must be consistent with <code>equals<\/code>. If the <code>equals<\/code> or <code>hashCode<\/code>\nmethods won't work on all objects, but only on some instances of E, the\n<code>isValidKey<\/code> predicate can be used to restrict the keys that the functions\nare applied to.\nAny key for which <code>isValidKey<\/code> returns false is automatically assumed\nto not be in the set when asking <code>contains<\/code>.<\/p>\n<p>If <code>equals<\/code> or <code>hashCode<\/code> are omitted, the set uses\nthe elements' intrinsic <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> and <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a>,\nand <code>isValidKey<\/code> is ignored since these operations are assumed\nto work on all objects.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n<p>If the supplied <code>equals<\/code> or <code>hashCode<\/code> functions won't work on all <code>E<\/code>\nobjects, and the map will be used in a setting where a non-<code>E<\/code> object\nis passed to, e.g., <code>contains<\/code>, then the <code>isValidKey<\/code> function should\nalso be supplied.<\/p>\n<p>If <code>isValidKey<\/code> is omitted, it defaults to testing if the object is an\n<code>E<\/code> instance. That means that:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashSet&lt;int&gt;(equals: (int e1, int e2) =&gt; (e1 - e2) % 5 == 0,\n                       hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>does not need an <code>isValidKey<\/code> argument, because it defaults to only\naccepting <code>int<\/code> values which are accepted by both <code>equals<\/code> and <code>hashCode<\/code>.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all values.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting set is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/LinkedHashSet\/LinkedHashSet.identity.html\">LinkedHashSet.identity<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashSet",
            "sig": "",
            "params": [
                {
                    "name": "e2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e1",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "potentialKey",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "potentialKey",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashSet(\n    {bool equals(E e1, E e2),\n    int hashCode(E e),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "forEach",
            "type": "",
            "desc": "<p>Executes a function on each element of the set.<\/p>\n<p>The elements are iterated in insertion order.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashSet",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/LinkedHashSet\/forEach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(E element));<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "LinkedHashSet.from",
            "type": "",
            "desc": "<p>Create a linked hash set containing all <code>elements<\/code>.<\/p>\n<p>Creates a linked hash set as by <code>new LinkedHashSet&lt;E&gt;()<\/code> and adds each\nelement of <code>elements<\/code> to this set in the order they are iterated.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type,\nso this constructor can be used to down-cast a <code>Set<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code>Set&lt;SuperType&gt; superSet = ...;\nIterable&lt;SuperType&gt; tmp = superSet.where((e) =&gt; e is SubType);\nSet&lt;SubType&gt; subSet = new LinkedHashSet&lt;SubType&gt;.from(tmp);\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.from.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashSet.from(Iterable elements) {\n  LinkedHashSet&lt;E&gt; result = LinkedHashSet&lt;E&gt;();\n  for (final element in elements) {\n    result.add(element);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashSet.identity",
            "type": "",
            "desc": "<p>Creates an insertion-ordered identity-based set.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashSet&lt;E&gt;(equals: identical,\n                     hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashSet",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.identity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashSet.identity();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashSet.of",
            "type": "",
            "desc": "<p>Create a linked hash set from <code>elements<\/code>.<\/p>\n<p>Creates a linked hash set as by <code>new LinkedHashSet&lt;E&gt;()<\/code> and adds each\nelement of <code>elements<\/code> to this set in the order they are iterated.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashSet",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashSet\/LinkedHashSet.of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashSet.of(Iterable&lt;E&gt; elements) =&gt;\n    LinkedHashSet&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "iterator",
            "type": "dart:core.Iterator",
            "types": [],
            "desc": "<p>Provides an iterator that iterates over the elements in insertion order.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedHashSet",
            "isConstant": false,
            "href": "dart-collection\/LinkedHashSet\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of elements in the iterable.<\/p>\n<p>This is an efficient operation that doesn't require iterating through\nthe elements.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedHashSet",
            "isConstant": false,
            "href": "dart-collection\/LinkedHashSet\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-collection\/LinkedHashSet-class.html",
    "desc": "<p>A <a href=\"dart-collection\/LinkedHashSet-class.html\">LinkedHashSet<\/a> is a hash-table based <a href=\"dart-core\/Set-class.html\">Set<\/a> implementation.<\/p>\n<p>The <code>LinkedHashSet<\/code> also keep track of the order that elements were inserted\nin, and iteration happens in first-to-last insertion order.<\/p>\n<p>The elements of a <code>LinkedHashSet<\/code> must have consistent <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>\nand <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementations. This means that the <code>==<\/code> operator\nmust define a stable equivalence relation on the elements (reflexive,\nsymmetric, transitive, and consistent over time), and that <code>hashCode<\/code>\nmust be the same for objects that are considered equal by <code>==<\/code>.<\/p>\n<p>The set allows <code>null<\/code> as an element.<\/p>\n<p>Iteration of elements is done in element insertion order.\nAn element that was added after another will occur later in the iteration.\nAdding an element that is already in the set\ndoes not change its position in the iteration order,\nbut removing an element and adding it again,\nwill make it the last element of an iteration.<\/p>\n<p>Most simple operations on <code>HashSet<\/code> are done in (potentially amortized)\nconstant time: <a href=\"dart-core\/Set\/add.html\">add<\/a>, <a href=\"dart-core\/Set\/contains.html\">contains<\/a>, <a href=\"dart-core\/Set\/remove.html\">remove<\/a>, and <a href=\"dart-collection\/LinkedHashSet\/length.html\">length<\/a>, provided the hash\ncodes of objects are well distributed..<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LinkedHashSet"
}