{
    "desc": "<p>A <a href=\"dart-core\/List-class.html\">List<\/a> that delegates all operations to a base list.<\/p>\n<p>This class can be used to hide non-<code>List<\/code> methods of a list object, or it\ncan be extended to add extra functionality on top of an existing list\nobject.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-collection_collection\/DelegatingList-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "collection",
    "name": "collection.DelegatingList",
    "shortname": "DelegatingList",
    "extends": [
        "collection.DelegatingIterable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "collection.NonGrowableListView"
    ],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DelegatingList(List&lt;E&gt; base) : super(base);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/DelegatingList.html",
            "isDeprecated": false,
            "type": "",
            "name": "DelegatingList",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "base",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _listBase.add(value);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/add.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  _listBase.addAll(iterable);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/addAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "iterable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap() =&gt; _listBase.asMap();<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/asMap.html",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.int>",
            "name": "asMap",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        },
        {
            "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"package-collection_collection\/DelegatingList\/add.html\">add<\/a> or <a href=\"package-collection_collection\/DelegatingList\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;T&gt; cast&lt;T&gt;() =&gt; _listBase.cast&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/cast.html",
            "isDeprecated": false,
            "type": "dart:core.List",
            "name": "cast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        },
        {
            "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _listBase.clear();\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/clear.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clear",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        },
        {
            "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fillValue]) {\n  _listBase.fillRange(start, end, fillValue);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/fillRange.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "fillRange",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "fillValue",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end) =&gt; _listBase.getRange(start, end);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/getRange.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "name": "getRange",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(E element, [int start = 0]) =&gt; _listBase.indexOf(element, start);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/indexOf.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "indexOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexWhere(bool test(E element), [int start = 0]) =&gt;\n    _listBase.indexWhere(test, start);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/indexWhere.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "indexWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) {\n  _listBase.insert(index, element);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/insert.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "insert",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">insertAll(int index, Iterable&lt;E&gt; iterable) {\n  _listBase.insertAll(index, iterable);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/insertAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "insertAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(E element, [int start]) =&gt;\n    _listBase.lastIndexOf(element, start);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/lastIndexOf.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "lastIndexOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexWhere(bool test(E element), [int start]) =&gt;\n    _listBase.lastIndexWhere(test, start);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/lastIndexWhere.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "lastIndexWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; _listBase.remove(value);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/remove.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) =&gt; _listBase.removeAt(index);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/removeAt.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "removeAt",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() =&gt; _listBase.removeLast();<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/removeLast.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "removeLast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        },
        {
            "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) {\n  _listBase.removeRange(start, end);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/removeRange.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeRange",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _listBase.removeWhere(test);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/removeWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"package-collection_collection\/DelegatingList\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; iterable) {\n  _listBase.replaceRange(start, end, iterable);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/replaceRange.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "replaceRange",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _listBase.retainWhere(test);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/retainWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "retainWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nList&lt;T&gt; retype&lt;T&gt;() =&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/retype.html",
            "isDeprecated": false,
            "type": "dart:core.List",
            "name": "retype",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        },
        {
            "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"package-collection_collection\/DelegatingList\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"package-collection_collection\/DelegatingList\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable) {\n  _listBase.setAll(index, iterable);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/setAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]) {\n  _listBase.setRange(start, end, iterable, skipCount);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/setRange.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setRange",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "iterable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "skipCount",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([math.Random random]) {\n  _listBase.shuffle(random);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/shuffle.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "shuffle",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "random",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:math.Random"
                }
            ]
        },
        {
            "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]) {\n  _listBase.sort(compare);\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/sort.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "sort",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"package-collection_collection\/DelegatingList\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]) =&gt; _listBase.sublist(start, end);<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/sublist.html",
            "isDeprecated": false,
            "type": "dart:core.List",
            "name": "sublist",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Creates a wrapper that asserts the types of values in <code>base<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-core\/List-class.html\">List<\/a> without a generic type to a <code>List&lt;E&gt;<\/code> by\nasserting that its elements are instances of <code>E<\/code> whenever they're\naccessed. If they're not, it throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>. Note that even if an\noperation throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>, it may still mutate the underlying\ncollection.<\/p>\n<p>This forwards all operations to <code>base<\/code>, so any changes in <code>base<\/code> will be\nreflected in <a href=\"package-collection_collection\/DelegatingList-class.html\">this<\/a>. If <code>base<\/code> is already a <code>List&lt;E&gt;<\/code>, it's returned\nunmodified.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use list.cast&lt;E&gt; instead.')\nstatic List&lt;E&gt; typed&lt;E&gt;(List base) =&gt; base.cast&lt;E&gt;();<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/DelegatingList\/typed.html",
            "isDeprecated": false,
            "type": "dart:core.List",
            "name": "typed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.DelegatingList",
            "params": [
                {
                    "name": "base",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the number of elements in <a href=\"package-collection_collection\/DelegatingList-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _base.length;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/DelegatingList\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        },
        {
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed =&gt; _listBase.reversed;<\/code><\/pre>\n        ",
            "href": "package-collection_collection\/DelegatingList\/reversed.html",
            "name": "reversed",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "collection.DelegatingList",
            "params": []
        }
    ]
}