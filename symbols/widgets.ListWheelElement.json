{
    "desc": "<p>Element that supports building children lazily for <a href=\"widgets\/ListWheelViewport-class.html\">ListWheelViewport<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ListWheelElement-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ListWheelElement",
    "shortname": "ListWheelElement",
    "extends": [
        "widgets.RenderObjectElement",
        "widgets.Element",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an element that lazily builds children for the given widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ListWheelElement(ListWheelViewport widget) : super(widget);<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/ListWheelElement.html",
            "isDeprecated": false,
            "type": "",
            "name": "ListWheelElement",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "widget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ListWheelViewport"
                }
            ]
        },
        {
            "desc": "<p>Checks whether the delegate is able to provide a child widget at the given\nindex.<\/p>\n<p>This function is not about whether the child at the given index is\nattached to the <a href=\"rendering\/RenderListWheelViewport-class.html\">RenderListWheelViewport<\/a> or not.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool childExistsAt(int index) =&gt; retrieveWidget(index) != null;<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/childExistsAt.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "childExistsAt",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Creates a new child at the given index and updates it to the child list\nof <a href=\"rendering\/RenderListWheelViewport-class.html\">RenderListWheelViewport<\/a>. If no child corresponds to <code>index<\/code>, then do\nnothing.<\/p>\n<p>It is possible to create children with negative indices.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createChild(int index, { @required RenderBox after }) {\n  owner.buildScope(this, () {\n    final bool insertFirst = after == null;\n    assert(insertFirst || _childElements[index - 1] != null);\n    final Element newChild =\n      updateChild(_childElements[index], retrieveWidget(index), index);\n    if (newChild != null) {\n      _childElements[index] = newChild;\n    } else {\n      _childElements.remove(index);\n    }\n  });\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/createChild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "createChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "after",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Remove the given child from the element's child list, in preparation for\nthe child being reused elsewhere in the element tree.<\/p>\n<p>This updates the child model such that, e.g., <a href=\"widgets\/ListWheelElement\/visitChildren.html\">visitChildren<\/a> does not\nwalk that child anymore.<\/p>\n<p>The element will still have a valid parent when this is called. After this\nis called, <a href=\"widgets\/Element\/deactivateChild.html\">deactivateChild<\/a> is called to sever the link to this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid forgetChild(Element child) {\n  _childElements.remove(child.slot);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/forgetChild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "forgetChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Insert the given child into <a href=\"widgets\/ListWheelElement\/renderObject.html\">renderObject<\/a> at the given slot.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid insertChildRenderObject(RenderObject child, int slot) {\n  final RenderListWheelViewport renderObject = this.renderObject;\n  assert(renderObject.debugValidateChild(child));\n  renderObject.insert(child, after: _childElements[slot - 1]?.renderObject);\n  assert(renderObject == this.renderObject);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/insertChildRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "insertChildRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "slot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Move the given child to the given slot.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/ListWheelElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n<p>The semantics of <code>slot<\/code> are determined by this element. For example, if\nthis element has a single child, the slot should always be null. If this\nelement has a list of children, the previous sibling is a convenient value\nfor the slot.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid moveChildRenderObject(RenderObject child, dynamic slot) {\n  const String moveChildRenderObjectErrorMessage =\n      'Currently we maintain the list in contiguous increasing order, so '\n      'moving children around is not allowed.';\n  assert(false, moveChildRenderObjectErrorMessage);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/moveChildRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "moveChildRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "slot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Called by rebuild() after the appropriate checks have been made.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performRebuild() {\n  _childWidgets.clear();\n  super.performRebuild();\n  if (_childElements.isEmpty)\n    return;\n\n  final int firstIndex = _childElements.firstKey();\n  final int lastIndex = _childElements.lastKey();\n\n  for (int index = firstIndex; index &lt;= lastIndex; ++index) {\n    final Element newChild = updateChild(_childElements[index], retrieveWidget(index), index);\n    if (newChild != null) {\n      _childElements[index] = newChild;\n    } else {\n      _childElements.remove(index);\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/performRebuild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performRebuild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": []
        },
        {
            "desc": "<p>Removes the child element corresponding with the given RenderBox.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeChild(RenderBox child) {\n  final int index = renderObject.indexOf(child);\n  owner.buildScope(this, () {\n    assert(_childElements.containsKey(index));\n    final Element result = updateChild(_childElements[index], null, index);\n    assert(result == null);\n    _childElements.remove(index);\n    assert(!_childElements.containsKey(index));\n  });\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/removeChild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Remove the given child from <a href=\"widgets\/ListWheelElement\/renderObject.html\">renderObject<\/a>.<\/p>\n<p>The given child is guaranteed to have <a href=\"widgets\/ListWheelElement\/renderObject.html\">renderObject<\/a> as its parent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeChildRenderObject(RenderObject child) {\n  assert(child.parent == renderObject);\n  renderObject.remove(child);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/removeChildRenderObject.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeChildRenderObject",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Asks the underlying delegate for a widget at the given index.<\/p>\n<p>Normally the builder is only called once for each index and the result\nwill be cached. However when the element is rebuilt, the cache will be\ncleared.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget retrieveWidget(int index) {\n  return _childWidgets.putIfAbsent(index, () =&gt; widget.childDelegate.build(this, index));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/retrieveWidget.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "retrieveWidget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "index",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Change the widget used to configure this element.<\/p>\n<p>The framework calls this function when the parent wishes to use a\ndifferent widget to configure this element. The new widget is guaranteed\nto have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as the old widget.<\/p>\n<p>This function is called only during the \"active\" lifecycle state.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid update(ListWheelViewport newWidget) {\n  final ListWheelViewport oldWidget = widget;\n  super.update(newWidget);\n  final ListWheelChildDelegate newDelegate = newWidget.childDelegate;\n  final ListWheelChildDelegate oldDelegate = oldWidget.childDelegate;\n  if (newDelegate != oldDelegate &amp;&amp;\n      (newDelegate.runtimeType != oldDelegate.runtimeType || newDelegate.shouldRebuild(oldDelegate)))\n    performRebuild();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/update.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "update",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "newWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ListWheelViewport"
                }
            ]
        },
        {
            "desc": "<p>Update the given child with the given new configuration.<\/p>\n<p>This method is the core of the widgets system. It is called each time we\nare to add, update, or remove a child based on an updated configuration.<\/p>\n<p>If the <code>child<\/code> is null, and the <code>newWidget<\/code> is not null, then we have a new\nchild for which we need to create an <a href=\"widgets\/Element-class.html\">Element<\/a>, configured with <code>newWidget<\/code>.<\/p>\n<p>If the <code>newWidget<\/code> is null, and the <code>child<\/code> is not null, then we need to\nremove it because it no longer has a configuration.<\/p>\n<p>If neither are null, then we need to update the <code>child<\/code>'s configuration to\nbe the new configuration given by <code>newWidget<\/code>. If <code>newWidget<\/code> can be given\nto the existing child (as determined by <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>), then it is so\ngiven. Otherwise, the old child needs to be disposed and a new child\ncreated for the new configuration.<\/p>\n<p>If both are null, then we don't have a child and won't have a child, so we\ndo nothing.<\/p>\n<p>The <a href=\"widgets\/ListWheelElement\/updateChild.html\">updateChild<\/a> method returns the new child, if it had to create one,\nor the child that was passed in, if it just had to update the child, or\nnull, if it removed the child and did not replace it.<\/p>\n<p>The following table summarizes the above:<\/p>\n<table>\n<thead><tr>\n<th style=\"text-align: center;\"><\/th>\n<th style=\"text-align: left;\"><strong>newWidget == null<\/strong><\/th>\n<th style=\"text-align: left;\"><strong>newWidget != null<\/strong><\/th>\n<\/tr><\/thead>\n<tbody>\n<tr>\n<td style=\"text-align: center;\"><strong>child == null<\/strong><\/td>\n<td style=\"text-align: left;\">Returns null.<\/td>\n<td style=\"text-align: left;\">Returns new <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/td>\n<\/tr>\n<tr>\n<td style=\"text-align: center;\"><strong>child != null<\/strong><\/td>\n<td style=\"text-align: left;\">Old child is removed, returns null.<\/td>\n<td style=\"text-align: left;\">Old child updated if possible, returns child or new <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/td>\n<\/tr>\n<\/tbody>\n<\/table>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nElement updateChild(Element child, Widget newWidget, dynamic newSlot) {\n  final ListWheelParentData oldParentData = child?.renderObject?.parentData;\n  final Element newChild = super.updateChild(child, newWidget, newSlot);\n  final ListWheelParentData newParentData = newChild?.renderObject?.parentData;\n  if (newParentData != null) {\n    newParentData.index = newSlot;\n    if (oldParentData != null)\n      newParentData.offset = oldParentData.offset;\n  }\n\n  return newChild;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/updateChild.html",
            "isDeprecated": false,
            "type": "widgets.Element",
            "name": "updateChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Element"
                },
                {
                    "name": "newSlot",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "newWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Widget"
                }
            ]
        },
        {
            "desc": "<p>Calls the argument for each child. Must be overridden by subclasses that\nsupport having children.<\/p>\n<p>There is no guaranteed order in which the children will be visited, though\nit should be consistent over time.<\/p>\n<p>Calling this during build is dangerous: the child list might still be\nbeing updated at that point, so the children might not be constructed yet,\nor might be old children that are going to be replaced. This method should\nonly be called if it is provable that the children are available.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildren(ElementVisitor visitor) {\n  _childElements.forEach((int key, Element child) {\n    visitor(child);\n  });\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ListWheelElement\/visitChildren.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "visitChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ListWheelElement",
            "params": [
                {
                    "name": "visitor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ElementVisitor"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The maximum number of children that can be provided to\n<a href=\"rendering\/RenderListWheelViewport-class.html\">RenderListWheelViewport<\/a>.<\/p>\n<p>If non-null, the children will have index in the range <code>0, childCount - 1<\/code>.<\/p>\n<p>If null, then there's no explicit limits to the range of the children\nexcept that it has to be contiguous. If <a href=\"widgets\/ListWheelElement\/childExistsAt.html\">childExistsAt<\/a> for a certain\nindex returns false, that index is already past the limit.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get childCount =&gt; widget.childDelegate.estimatedChildCount;<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelElement\/childCount.html",
            "name": "childCount",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "widgets.ListWheelElement",
            "params": []
        },
        {
            "desc": "<p>The underlying <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> for this element.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderListWheelViewport get renderObject =&gt; super.renderObject;<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelElement\/renderObject.html",
            "name": "renderObject",
            "isDeprecated": false,
            "type": "rendering.RenderListWheelViewport",
            "memberOf": "widgets.ListWheelElement",
            "params": []
        },
        {
            "desc": "<p>The configuration for this element.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nListWheelViewport get widget =&gt; super.widget;<\/code><\/pre>\n        ",
            "href": "widgets\/ListWheelElement\/widget.html",
            "name": "widget",
            "isDeprecated": false,
            "type": "widgets.ListWheelViewport",
            "memberOf": "widgets.ListWheelElement",
            "params": []
        }
    ]
}