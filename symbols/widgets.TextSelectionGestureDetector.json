{
    "name": "widgets.TextSelectionGestureDetector",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [
        {
            "name": "onDoubleTapDown",
            "type": "gestures.GestureTapDownCallback",
            "desc": "<p>Called after a momentary hold or a short tap that is close in space and\ntime (within <a href=\"gestures\/kDoubleTapTimeout-constant.html\">kDoubleTapTimeout<\/a>) to a previous short tap.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onDoubleTapDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapDownCallback onDoubleTapDown\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onDragSelectionEnd",
            "type": "gestures.GestureDragEndCallback",
            "desc": "<p>Called when a mouse that was previously dragging is released.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onDragSelectionEnd.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragEndCallback onDragSelectionEnd\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onDragSelectionStart",
            "type": "gestures.GestureDragStartCallback",
            "desc": "<p>Called when a mouse starts dragging to select text.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onDragSelectionStart.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureDragStartCallback onDragSelectionStart\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onDragSelectionUpdate",
            "type": "widgets.DragSelectionUpdateCallback",
            "desc": "<p>Called repeatedly as a mouse moves while dragging.<\/p>\n<p>The frequency of calls is throttled to avoid excessive text layout\noperations in text fields. The throttling is controlled by the constant\n<code>_kDragSelectionUpdateThrottle<\/code>.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onDragSelectionUpdate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragSelectionUpdateCallback onDragSelectionUpdate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onForcePressEnd",
            "type": "gestures.GestureForcePressEndCallback",
            "desc": "<p>Called when a pointer that had previously triggered <a href=\"widgets\/TextSelectionGestureDetector\/onForcePressStart.html\">onForcePressStart<\/a> is\nlifted off the screen.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onForcePressEnd.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForcePressEndCallback onForcePressEnd\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onForcePressStart",
            "type": "gestures.GestureForcePressStartCallback",
            "desc": "<p>Called when a pointer has tapped down and the force of the pointer has\njust become greater than <code>ForcePressGestureDetector.startPressure<\/code>.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onForcePressStart.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureForcePressStartCallback onForcePressStart\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSingleLongTapEnd",
            "type": "gestures.GestureLongPressEndCallback",
            "desc": "<p>Called after <a href=\"widgets\/TextSelectionGestureDetector\/onSingleLongTapStart.html\">onSingleLongTapStart<\/a> when the pointer is lifted.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onSingleLongTapEnd.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressEndCallback onSingleLongTapEnd\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSingleLongTapMoveUpdate",
            "type": "gestures.GestureLongPressMoveUpdateCallback",
            "desc": "<p>Called after <a href=\"widgets\/TextSelectionGestureDetector\/onSingleLongTapStart.html\">onSingleLongTapStart<\/a> when the pointer is dragged.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onSingleLongTapMoveUpdate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressMoveUpdateCallback onSingleLongTapMoveUpdate\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSingleLongTapStart",
            "type": "gestures.GestureLongPressStartCallback",
            "desc": "<p>Called for a single long tap that's sustained for longer than\n<a href=\"gestures\/kLongPressTimeout-constant.html\">kLongPressTimeout<\/a> but not necessarily lifted. Not called for a\ndouble-tap-hold, which calls <a href=\"widgets\/TextSelectionGestureDetector\/onDoubleTapDown.html\">onDoubleTapDown<\/a> instead.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onSingleLongTapStart.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressStartCallback onSingleLongTapStart\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSingleTapCancel",
            "type": "gestures.GestureTapCancelCallback",
            "desc": "<p>Called for each touch that becomes recognized as a gesture that is not a\nshort tap, such as a long tap or drag. It is called at the moment when\nanother gesture from the touch is recognized.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onSingleTapCancel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCancelCallback onSingleTapCancel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSingleTapUp",
            "type": "gestures.GestureTapUpCallback",
            "desc": "<p>Called for each distinct tap except for every second tap of a double tap.\nFor example, if the detector was configured <code>onSingleTapDown<\/code> and\n<a href=\"widgets\/TextSelectionGestureDetector\/onDoubleTapDown.html\">onDoubleTapDown<\/a>, three quick taps would be recognized as a single tap\ndown, followed by a double tap down, followed by a single tap down.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onSingleTapUp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapUpCallback onSingleTapUp\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onTapDown",
            "type": "gestures.GestureTapDownCallback",
            "desc": "<p>Called for every tap down including every tap down that's part of a\ndouble click or a long press, except touches that include enough movement\nto not qualify as taps (e.g. pans and flings).<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/onTapDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapDownCallback onTapDown\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "TextSelectionGestureDetector",
            "type": "",
            "desc": "<p>Create a <a href=\"widgets\/TextSelectionGestureDetector-class.html\">TextSelectionGestureDetector<\/a>.<\/p>\n<p>Multiple callbacks can be called for one sequence of input gesture.\nThe <code>child<\/code> parameter must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TextSelectionGestureDetector",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onTapDown",
                    "type": "gestures.GestureTapDownCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onForcePressStart",
                    "type": "gestures.GestureForcePressStartCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onForcePressEnd",
                    "type": "gestures.GestureForcePressEndCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSingleTapUp",
                    "type": "gestures.GestureTapUpCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSingleTapCancel",
                    "type": "gestures.GestureTapCancelCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSingleLongTapStart",
                    "type": "gestures.GestureLongPressStartCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSingleLongTapMoveUpdate",
                    "type": "gestures.GestureLongPressMoveUpdateCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSingleLongTapEnd",
                    "type": "gestures.GestureLongPressEndCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDoubleTapDown",
                    "type": "gestures.GestureTapDownCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDragSelectionStart",
                    "type": "gestures.GestureDragStartCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDragSelectionUpdate",
                    "type": "widgets.DragSelectionUpdateCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDragSelectionEnd",
                    "type": "gestures.GestureDragEndCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "behavior",
                    "type": "rendering.HitTestBehavior",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/TextSelectionGestureDetector\/TextSelectionGestureDetector.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSelectionGestureDetector({\n  Key key,\n  this.onTapDown,\n  this.onForcePressStart,\n  this.onForcePressEnd,\n  this.onSingleTapUp,\n  this.onSingleTapCancel,\n  this.onSingleLongTapStart,\n  this.onSingleLongTapMoveUpdate,\n  this.onSingleLongTapEnd,\n  this.onDoubleTapDown,\n  this.onDragSelectionStart,\n  this.onDragSelectionUpdate,\n  this.onDragSelectionEnd,\n  this.behavior,\n  @required this.child,\n}) : assert(child != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "widgets.State<widgets.StatefulWidget>",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/TextSelectionGestureDetector\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.TextSelectionGestureDetector",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/TextSelectionGestureDetector\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;StatefulWidget&gt; createState() =&gt; _TextSelectionGestureDetectorState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "widgets.State",
                "widgets.StatefulWidget"
            ]
        }
    ],
    "props": [
        {
            "name": "behavior",
            "type": "rendering.HitTestBehavior",
            "types": [],
            "desc": "<p>How this gesture detector should behave during hit testing.<\/p>\n<p>This defaults to <a href=\"rendering\/HitTestBehavior-class.html\">HitTestBehavior.deferToChild<\/a>.<\/p>\n        ",
            "memberOf": "widgets.TextSelectionGestureDetector",
            "isConstant": false,
            "href": "widgets\/TextSelectionGestureDetector\/behavior.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HitTestBehavior behavior\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>Child below this widget.<\/p>\n        ",
            "memberOf": "widgets.TextSelectionGestureDetector",
            "isConstant": false,
            "href": "widgets\/TextSelectionGestureDetector\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/TextSelectionGestureDetector-class.html",
    "desc": "<p>A gesture detector to respond to non-exclusive event chains for a text field.<\/p>\n<p>An ordinary <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> configured to handle events like tap and\ndouble tap will only recognize one or the other. This widget detects both:\nfirst the tap and then, if another tap down occurs within a time limit, the\ndouble tap.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, a Material text field which uses this gesture detector.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a>, a Cupertino text field which uses this gesture\ndetector.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextSelectionGestureDetector"
}