{
    "desc": "<p>Displays some text in a scrollable container with a potentially blinking\ncursor and with gesture recognizers.<\/p>\n<p>This is the renderer for an editable text field. It does not directly\nprovide affordances for editing the text, but it does handle text selection\nand manipulation of the text cursor.<\/p>\n<p>The <a href=\"rendering\/RenderEditable\/text.html\">text<\/a> is displayed, scrolled by the given <a href=\"rendering\/RenderEditable\/offset.html\">offset<\/a>, aligned according\nto <a href=\"rendering\/RenderEditable\/textAlign.html\">textAlign<\/a>. The <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a> property controls whether the text displays\non one line or many. The <a href=\"rendering\/RenderEditable\/selection.html\">selection<\/a>, if it is not collapsed, is painted in\nthe <a href=\"rendering\/RenderEditable\/selectionColor.html\">selectionColor<\/a>. If it <em>is<\/em> collapsed, then it represents the cursor\nposition. The cursor is shown while <a href=\"rendering\/RenderEditable\/showCursor.html\">showCursor<\/a> is true. It is painted in\nthe <a href=\"rendering\/RenderEditable\/cursorColor.html\">cursorColor<\/a>.<\/p>\n<p>If, when the render object paints, the caret is found to have changed\nlocation, <a href=\"rendering\/RenderEditable\/onCaretChanged.html\">onCaretChanged<\/a> is called.<\/p>\n<p>The user may interact with the render object by tapping or long-pressing.\nWhen the user does so, the selection is updated, and <a href=\"rendering\/RenderEditable\/onSelectionChanged.html\">onSelectionChanged<\/a> is\ncalled.<\/p>\n<p>Keyboard handling, IME handling, scrolling, toggling the <a href=\"rendering\/RenderEditable\/showCursor.html\">showCursor<\/a> value\nto actually blink the cursor, and other features not mentioned above are the\nresponsibility of higher layers and not handled by this object.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "rendering\/RenderEditable-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderEditable",
    "shortname": "RenderEditable",
    "extends": [
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Called during the paint phase when the caret location changes.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CaretChangedHandler onCaretChanged\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/onCaretChanged.html",
            "isDeprecated": "0",
            "type": "rendering.CaretChangedHandler",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Called when the selection changes.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SelectionChangedHandler onSelectionChanged\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/onSelectionChanged.html",
            "isDeprecated": "0",
            "type": "rendering.SelectionChangedHandler",
            "memberOf": "rendering.RenderEditable",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a render object that implements the visual aspects of a text field.<\/p>\n<p>The <code>textAlign<\/code> argument must not be null. It defaults to <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must not be null.<\/p>\n<p>If <code>showCursor<\/code> is not specified, then it defaults to hiding the cursor.<\/p>\n<p>The <code>maxLines<\/code> property can be set to null to remove the restriction on\nthe number of lines. By default, it is 1, meaning this is a single-line\ntext field. If it is not null, it must be greater than zero.<\/p>\n<p>The <code>offset<\/code> is required and must not be null. You can use <a href=\"rendering\/ViewportOffset\/ViewportOffset.zero.html\">new\nViewportOffset.zero<\/a> if you have no need for scrolling.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderEditable({\n  TextSpan text,\n  @required TextDirection textDirection,\n  TextAlign textAlign = TextAlign.start,\n  Color cursorColor,\n  Color backgroundCursorColor,\n  ValueNotifier&lt;bool&gt; showCursor,\n  bool hasFocus,\n  int maxLines = 1,\n  int minLines,\n  bool expands = false,\n  StrutStyle strutStyle,\n  Color selectionColor,\n  double textScaleFactor = 1.0,\n  TextSelection selection,\n  @required ViewportOffset offset,\n  this.onSelectionChanged,\n  this.onCaretChanged,\n  this.ignorePointer = false,\n  bool obscureText = false,\n  Locale locale,\n  double cursorWidth = 1.0,\n  Radius cursorRadius,\n  bool paintCursorAboveText = false,\n  Offset cursorOffset,\n  double devicePixelRatio = 1.0,\n  bool enableInteractiveSelection,\n  EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5),\n  @required this.textSelectionDelegate,\n}) : assert(textAlign != null),\n     assert(textDirection != null, 'RenderEditable created without a textDirection.'),\n     assert(maxLines == null || maxLines &gt; 0),\n     assert(minLines == null || minLines &gt; 0),\n     assert(\n       (maxLines == null) || (minLines == null) || (maxLines &gt;= minLines),\n       'minLines can\\'t be greater than maxLines',\n     ),\n     assert(expands != null),\n     assert(\n       !expands || (maxLines == null &amp;&amp; minLines == null),\n       'minLines and maxLines must be null when expands is true.',\n     ),\n     assert(textScaleFactor != null),\n     assert(offset != null),\n     assert(ignorePointer != null),\n     assert(paintCursorAboveText != null),\n     assert(obscureText != null),\n     assert(textSelectionDelegate != null),\n     assert(cursorWidth != null &amp;&amp; cursorWidth &gt;= 0.0),\n      assert(devicePixelRatio != null),\n     _textPainter = TextPainter(\n       text: text,\n       textAlign: textAlign,\n       textDirection: textDirection,\n       textScaleFactor: textScaleFactor,\n       locale: locale,\n       strutStyle: strutStyle,\n     ),\n     _cursorColor = cursorColor,\n     _backgroundCursorColor = backgroundCursorColor,\n     _showCursor = showCursor ?? ValueNotifier&lt;bool&gt;(false),\n     _hasFocus = hasFocus ?? false,\n     _maxLines = maxLines,\n     _minLines = minLines,\n     _expands = expands,\n     _selectionColor = selectionColor,\n     _selection = selection,\n     _offset = offset,\n     _cursorWidth = cursorWidth,\n     _cursorRadius = cursorRadius,\n     _paintCursorOnTop = paintCursorAboveText,\n     _cursorOffset = cursorOffset,\n     _floatingCursorAddedMargin = floatingCursorAddedMargin,\n     _enableInteractiveSelection = enableInteractiveSelection,\n     _devicePixelRatio = devicePixelRatio,\n     _obscureText = obscureText {\n  assert(_showCursor != null);\n  assert(!_showCursor.value || cursorColor != null);\n  _tap = TapGestureRecognizer(debugOwner: this)\n    ..onTapDown = _handleTapDown\n    ..onTap = _handleTap;\n  _longPress = LongPressGestureRecognizer(debugOwner: this)\n    ..onLongPress = _handleLongPress;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/RenderEditable.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "backgroundCursorColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cursorColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "cursorOffset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "cursorRadius",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Radius"
                },
                {
                    "name": "cursorWidth",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "devicePixelRatio",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "enableInteractiveSelection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "expands",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "floatingCursorAddedMargin",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsets"
                },
                {
                    "name": "hasFocus",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "ignorePointer",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "locale",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                },
                {
                    "name": "maxLines",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "minLines",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "obscureText",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.ViewportOffset"
                },
                {
                    "name": "onCaretChanged",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.CaretChangedHandler"
                },
                {
                    "name": "onSelectionChanged",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.SelectionChangedHandler"
                },
                {
                    "name": "paintCursorAboveText",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "selection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextSelection"
                },
                {
                    "name": "selectionColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "showCursor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueNotifier<dart:core.bool>"
                },
                {
                    "name": "strutStyle",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.StrutStyle"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextSpan"
                },
                {
                    "name": "textAlign",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextAlign"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "textScaleFactor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "textSelectionDelegate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "services.TextSelectionDelegate"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderEditable\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderEditable\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/RenderEditable\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  _offset.addListener(markNeedsPaint);\n  _showCursor.addListener(markNeedsPaint);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/attach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "owner",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PipelineOwner"
                }
            ]
        },
        {
            "desc": "<p>Returns the position within the text field closest to the raw cursor offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset calculateBoundedFloatingCursorOffset(Offset rawCursorOffset) {\n  Offset deltaPosition = const Offset(0, 0);\n  final double topBound = -floatingCursorAddedMargin.top;\n  final double bottomBound = _textPainter.height - preferredLineHeight + floatingCursorAddedMargin.bottom;\n  final double leftBound = -floatingCursorAddedMargin.left;\n  final double rightBound = _textPainter.width + floatingCursorAddedMargin.right;\n\n  if (_previousOffset != null)\n    deltaPosition = rawCursorOffset - _previousOffset;\n\n  \/\/ If the raw cursor offset has gone off an edge, we want to reset the relative\n  \/\/ origin of the dragging when the user drags back into the field.\n  if (_resetOriginOnLeft &amp;&amp; deltaPosition.dx &gt; 0) {\n    _relativeOrigin = Offset(rawCursorOffset.dx - leftBound, _relativeOrigin.dy);\n    _resetOriginOnLeft = false;\n  } else if (_resetOriginOnRight &amp;&amp; deltaPosition.dx &lt; 0) {\n    _relativeOrigin = Offset(rawCursorOffset.dx - rightBound, _relativeOrigin.dy);\n    _resetOriginOnRight = false;\n  }\n  if (_resetOriginOnTop &amp;&amp; deltaPosition.dy &gt; 0) {\n    _relativeOrigin = Offset(_relativeOrigin.dx, rawCursorOffset.dy - topBound);\n    _resetOriginOnTop = false;\n  } else if (_resetOriginOnBottom &amp;&amp; deltaPosition.dy &lt; 0) {\n    _relativeOrigin = Offset(_relativeOrigin.dx, rawCursorOffset.dy - bottomBound);\n    _resetOriginOnBottom = false;\n  }\n\n  final double currentX = rawCursorOffset.dx - _relativeOrigin.dx;\n  final double currentY = rawCursorOffset.dy - _relativeOrigin.dy;\n  final double adjustedX = math.min(math.max(currentX, leftBound), rightBound);\n  final double adjustedY = math.min(math.max(currentY, topBound), bottomBound);\n  final Offset adjustedOffset = Offset(adjustedX, adjustedY);\n\n  if (currentX &lt; leftBound &amp;&amp; deltaPosition.dx &lt; 0)\n    _resetOriginOnLeft = true;\n  else if (currentX &gt; rightBound &amp;&amp; deltaPosition.dx &gt; 0)\n    _resetOriginOnRight = true;\n  if (currentY &lt; topBound &amp;&amp; deltaPosition.dy &lt; 0)\n    _resetOriginOnTop = true;\n  else if (currentY &gt; bottomBound &amp;&amp; deltaPosition.dy &gt; 0)\n    _resetOriginOnBottom = true;\n\n  _previousOffset = rawCursorOffset;\n\n  return adjustedOffset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/calculateBoundedFloatingCursorOffset.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "rawCursorOffset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the y-coordinate of the position of the box to\nthe y-coordinate of the first given baseline in the box's contents, if\nany, or null otherwise.<\/p>\n<p>Do not call this function directly. If you need to know the baseline of a\nchild from an invocation of <a href=\"rendering\/RenderEditable\/performLayout.html\">performLayout<\/a> or <a href=\"rendering\/RenderEditable\/paint.html\">paint<\/a>, call\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>.<\/p>\n<p>Subclasses should override this method to supply the distances to their\nbaselines. When implementing this method, there are generally three\nstrategies:<\/p>\n<ul>\n<li>\n<p>For classes that use the <a href=\"rendering\/ContainerRenderObjectMixin-mixin.html\">ContainerRenderObjectMixin<\/a> child model,\nconsider mixing in the <a href=\"rendering\/RenderBoxContainerDefaultsMixin-mixin.html\">RenderBoxContainerDefaultsMixin<\/a> class and\nusing\n<a href=\"rendering\/RenderBoxContainerDefaultsMixin\/defaultComputeDistanceToFirstActualBaseline.html\">RenderBoxContainerDefaultsMixin.defaultComputeDistanceToFirstActualBaseline<\/a>.<\/p>\n<\/li>\n<li>\n<p>For classes that define a particular baseline themselves, return that\nvalue directly.<\/p>\n<\/li>\n<li>\n<p>For classes that have a child to which they wish to defer the\ncomputation, call <a href=\"rendering\/RenderBox\/getDistanceToActualBaseline.html\">getDistanceToActualBaseline<\/a> on the child (not\n<a href=\"rendering\/RenderEditable\/computeDistanceToActualBaseline.html\">computeDistanceToActualBaseline<\/a>, the internal implementation, and not\n<a href=\"rendering\/RenderBox\/getDistanceToBaseline.html\">getDistanceToBaseline<\/a>, the public entry point for this API).<\/p>\n<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeDistanceToActualBaseline(TextBaseline baseline) {\n  _layoutText(constraints.maxWidth);\n  return _textPainter.computeDistanceToActualBaseline(baseline);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/computeDistanceToActualBaseline.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "baseline",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextBaseline"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicHeight.html\">getMaxIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderEditable\/performLayout.html\">performLayout<\/a>. Should return the\nsmallest height beyond which increasing the height never decreases the\npreferred width. The preferred width is the value that would be returned\nby <a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for that height.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderEditable\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for the same width.<\/p>\n<p>Otherwise, the width argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderEditable\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a>.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicHeight(double width) {\n  return _preferredHeight(width);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/computeMaxIntrinsicHeight.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMaxIntrinsicWidth.html\">getMaxIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderEditable\/performLayout.html\">performLayout<\/a>. This should return\nthe smallest width beyond which increasing the width never decreases the\npreferred height. The preferred height is the value that would be returned\nby <a href=\"rendering\/RenderEditable\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> for that width.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then this should\nreturn the same value as <a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> for the same height.<\/p>\n<p>Otherwise, the height argument should be ignored, and the returned value\nshould be equal to or bigger than the value returned by\n<a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>The value returned by this method might not match the size that the object\nwould actually take. For example, a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> subclass that always\nexactly sizes itself using <a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a> might well size itself\nbigger than its max intrinsic size.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMaxIntrinsicWidth(double height) {\n  _layoutText(double.infinity);\n  return _textPainter.maxIntrinsicWidth + cursorWidth;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/computeMaxIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicHeight.html\">getMinIntrinsicHeight<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderEditable\/performLayout.html\">performLayout<\/a>. Should return the\nminimum height that this box could be without failing to correctly paint\nits contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nheight-in-width-out, or if the layout algorithm uses both the incoming\nheight and width constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>width<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly width-in-height-out, or is\nwidth-in-height-out when the height is unconstrained, then the width\nargument is the width to use.<\/p>\n<p>The <code>width<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<p>See also examples in the definition of <a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicHeight(double width) {\n  return _preferredHeight(width);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/computeMinIntrinsicHeight.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "width",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Computes the value returned by <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>. Do not call this\nfunction directly, instead, call <a href=\"rendering\/RenderBox\/getMinIntrinsicWidth.html\">getMinIntrinsicWidth<\/a>.<\/p>\n<p>Override in subclasses that implement <a href=\"rendering\/RenderEditable\/performLayout.html\">performLayout<\/a>. This method should\nreturn the minimum width that this box could be without failing to\ncorrectly paint its contents within itself, without clipping.<\/p>\n<p>If the layout algorithm is independent of the context (e.g. it always\ntries to be a particular size), or if the layout algorithm is\nwidth-in-height-out, or if the layout algorithm uses both the incoming\nwidth and height constraints (e.g. it always sizes itself to\n<a href=\"rendering\/BoxConstraints\/biggest.html\">BoxConstraints.biggest<\/a>), then the <code>height<\/code> argument should be ignored.<\/p>\n<p>If the layout algorithm is strictly height-in-width-out, or is\nheight-in-width-out when the width is unconstrained, then the height\nargument is the height to use.<\/p>\n<p>The <code>height<\/code> argument will never be negative or null. It may be infinite.<\/p>\n<p>If this algorithm depends on the intrinsic dimensions of a child, the\nintrinsic dimensions of that child should be obtained using the functions\nwhose names start with <code>get<\/code>, not <code>compute<\/code>.<\/p>\n<p>This function should never return a negative or infinite value.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<h3 id=\"text\">Text<\/h3>\n<p>Text is the canonical example of a width-in-height-out algorithm. The\n<code>height<\/code> argument is therefore ignored.<\/p>\n<p>Consider the string \"Hello World\" The <em>maximum<\/em> intrinsic width (as\nreturned from <a href=\"rendering\/RenderEditable\/computeMaxIntrinsicWidth.html\">computeMaxIntrinsicWidth<\/a>) would be the width of the string\nwith no line breaks.<\/p>\n<p>The minimum intrinsic width would be the width of the widest word, \"Hello\"\nor \"World\". If the text is rendered in an even narrower width, however, it\nmight still not overflow. For example, maybe the rendering would put a\nline-break half-way through the words, as in \"Hel\u205elo\u205eWor\u205eld\". However,\nthis wouldn't be a <em>correct<\/em> rendering, and <a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> is\nsupposed to render the minimum width that the box could be without failing\nto <em>correctly<\/em> paint the contents within itself.<\/p>\n<p>The minimum intrinsic <em>height<\/em> for a given width smaller than the minimum\nintrinsic width could therefore be greater than the minimum intrinsic\nheight for the minimum intrinsic width.<\/p>\n<h3 id=\"viewports-eg-scrolling-lists\">Viewports (e.g. scrolling lists)<\/h3>\n<p>Some render boxes are intended to clip their children. For example, the\nrender box for a scrolling list might always size itself to its parents'\nsize (or rather, to the maximum incoming constraints), regardless of the\nchildren's sizes, and then clip the children and position them based on\nthe current scroll offset.<\/p>\n<p>The intrinsic dimensions in these cases still depend on the children, even\nthough the layout algorithm sizes the box in a way independent of the\nchildren. It is the size that is needed to paint the box's contents (in\nthis case, the children) <em>without clipping<\/em> that matters.<\/p>\n<h3 id=\"when-the-intrinsic-dimensions-cannot-be-known\">When the intrinsic dimensions cannot be known<\/h3>\n<p>There are cases where render objects do not have an efficient way to\ncompute their intrinsic dimensions. For example, it may be prohibitively\nexpensive to reify and measure every child of a lazy viewport (viewports\ngenerally only instantiate the actually visible children), or the\ndimensions may be computed by a callback about which the render object\ncannot reason.<\/p>\n<p>In such cases, it may be impossible (or at least impractical) to actually\nreturn a valid answer. In such cases, the intrinsic functions should throw\nwhen <a href=\"rendering\/RenderObject\/debugCheckingIntrinsics.html\">RenderObject.debugCheckingIntrinsics<\/a> is false and asserts are\nenabled, and return 0.0 otherwise.<\/p>\n<p>See the implementations of <a href=\"widgets\/LayoutBuilder-class.html\">LayoutBuilder<\/a> or <a href=\"rendering\/RenderViewportBase-class.html\">RenderViewportBase<\/a> for\nexamples (in particular,\n<a href=\"rendering\/RenderViewportBase\/debugThrowIfNotCheckingIntrinsics.html\">RenderViewportBase.debugThrowIfNotCheckingIntrinsics<\/a>).<\/p>\n<h3 id=\"aspect-ratio-driven-boxes\">Aspect-ratio-driven boxes<\/h3>\n<p>Some boxes always return a fixed size based on the constraints. For these\nboxes, the intrinsic functions should return the appropriate size when the\nincoming <code>height<\/code> or <code>width<\/code> argument is finite, treating that as a tight\nconstraint in the respective direction and treating the other direction's\nconstraints as unbounded. This is because the definitions of\n<a href=\"rendering\/RenderEditable\/computeMinIntrinsicWidth.html\">computeMinIntrinsicWidth<\/a> and <a href=\"rendering\/RenderEditable\/computeMinIntrinsicHeight.html\">computeMinIntrinsicHeight<\/a> are in terms of\nwhat the dimensions <em>could be<\/em>, and such boxes can only be one size in\nsuch cases.<\/p>\n<p>When the incoming argument is not finite, then they should return the\nactual intrinsic dimensions based on the contents, as any other box would.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble computeMinIntrinsicWidth(double height) {\n  _layoutText(double.infinity);\n  return _textPainter.minIntrinsicWidth;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/computeMinIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"rendering\/RenderObject\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderEditable\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  return &lt;DiagnosticsNode&gt;[\n    text.toDiagnosticsNode(\n      name: 'text',\n      style: DiagnosticsTreeStyle.transition,\n    ),\n  ];\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/debugDescribeChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderEditable\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Color&gt;('cursorColor', cursorColor));\n  properties.add(DiagnosticsProperty&lt;ValueNotifier&lt;bool&gt;&gt;('showCursor', showCursor));\n  properties.add(IntProperty('maxLines', maxLines));\n  properties.add(IntProperty('minLines', minLines));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('expands', expands, defaultValue: false));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('selectionColor', selectionColor));\n  properties.add(DoubleProperty('textScaleFactor', textScaleFactor));\n  properties.add(DiagnosticsProperty&lt;Locale&gt;('locale', locale, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;TextSelection&gt;('selection', selection));\n  properties.add(DiagnosticsProperty&lt;ViewportOffset&gt;('offset', offset));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Returns a rect in this object's coordinate system that describes\nthe approximate bounding box of the clip rect that would be\napplied to the given child during the paint phase, if any.<\/p>\n<p>Returns null if the child would not be clipped.<\/p>\n<p>This is used in the semantics phase to avoid including children\nthat are not physically visible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRect describeApproximatePaintClip(RenderObject child) =&gt; _hasVisualOverflow ? Offset.zero &amp; size : null;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/describeApproximatePaintClip.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"rendering\/RenderEditable\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration(SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n\n  config\n    ..value = obscureText\n        ? obscuringCharacter * text.toPlainText().length\n        : text.toPlainText()\n    ..isObscured = obscureText\n    ..textDirection = textDirection\n    ..isFocused = hasFocus\n    ..isTextField = true;\n\n  if (hasFocus &amp;&amp; selectionEnabled)\n    config.onSetSelection = _handleSetSelection;\n\n  if (selectionEnabled &amp;&amp; _selection?.isValid == true) {\n    config.textSelection = _selection;\n    if (_textPainter.getOffsetBefore(_selection.extentOffset) != null) {\n      config\n        ..onMoveCursorBackwardByWord = _handleMoveCursorBackwardByWord\n        ..onMoveCursorBackwardByCharacter = _handleMoveCursorBackwardByCharacter;\n    }\n    if (_textPainter.getOffsetAfter(_selection.extentOffset) != null) {\n      config\n        ..onMoveCursorForwardByWord = _handleMoveCursorForwardByWord\n        ..onMoveCursorForwardByCharacter = _handleMoveCursorForwardByCharacter;\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/describeSemanticsConfiguration.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "config",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderEditable\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderEditable\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderEditable\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _offset.removeListener(markNeedsPaint);\n  _showCursor.removeListener(markNeedsPaint);\n  if (_listenerAttached)\n    RawKeyboard.instance.removeListener(_handleKeyEvent);\n  super.detach();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/detach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Returns the local coordinates of the endpoints of the given selection.<\/p>\n<p>If the selection is collapsed (and therefore occupies a single point), the\nreturned list is of length one. Otherwise, the selection is not collapsed\nand the returned list is of length two. In this case, however, the two\npoints might actually be co-located (e.g., because of a bidirectional\nselection that contains some text but whose ends meet in the middle).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderEditable\/getLocalRectForCaret.html\">getLocalRectForCaret<\/a>, which is the equivalent but for\na <a href=\"dart-ui\/TextPosition-class.html\">TextPosition<\/a> rather than a <a href=\"services\/TextSelection-class.html\">TextSelection<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;TextSelectionPoint&gt; getEndpointsForSelection(TextSelection selection) {\n  assert(constraints != null);\n  _layoutText(constraints.maxWidth);\n\n  final Offset paintOffset = _paintOffset;\n\n  if (selection.isCollapsed) {\n    \/\/ TODO(mpcomplete): This doesn't work well at an RTL\/LTR boundary.\n    final Offset caretOffset = _textPainter.getOffsetForCaret(selection.extent, _caretPrototype);\n    final Offset start = Offset(0.0, preferredLineHeight) + caretOffset + paintOffset;\n    return &lt;TextSelectionPoint&gt;[TextSelectionPoint(start, null)];\n  } else {\n    final List&lt;ui.TextBox&gt; boxes = _textPainter.getBoxesForSelection(selection);\n    final Offset start = Offset(boxes.first.start, boxes.first.bottom) + paintOffset;\n    final Offset end = Offset(boxes.last.end, boxes.last.bottom) + paintOffset;\n    return &lt;TextSelectionPoint&gt;[\n      TextSelectionPoint(start, boxes.first.direction),\n      TextSelectionPoint(end, boxes.last.direction),\n    ];\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/getEndpointsForSelection.html",
            "isDeprecated": "0",
            "type": "dart:core.List<rendering.TextSelectionPoint>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "selection",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "services.TextSelection"
                }
            ]
        },
        {
            "desc": "<p>Returns the <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> in local coordinates for the caret at the given text\nposition.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderEditable\/getPositionForPoint.html\">getPositionForPoint<\/a>, which is the reverse operation, taking\nan <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> in global coordinates and returning a <a href=\"dart-ui\/TextPosition-class.html\">TextPosition<\/a>.<\/li>\n<li>\n<a href=\"rendering\/RenderEditable\/getEndpointsForSelection.html\">getEndpointsForSelection<\/a>, which is the equivalent but for\na selection rather than a particular text position.<\/li>\n<li>\n<a href=\"painting\/TextPainter\/getOffsetForCaret.html\">TextPainter.getOffsetForCaret<\/a>, the equivalent method for a\n<a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> object.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect getLocalRectForCaret(TextPosition caretPosition) {\n  _layoutText(constraints.maxWidth);\n  final Offset caretOffset = _textPainter.getOffsetForCaret(caretPosition, _caretPrototype);\n  \/\/ This rect is the same as _caretPrototype but without the vertical padding.\n  Rect rect = Rect.fromLTWH(0.0, 0.0, cursorWidth, preferredLineHeight).shift(caretOffset + _paintOffset);\n  \/\/ Add additional cursor offset (generally only if on iOS).\n  if (_cursorOffset != null)\n    rect = rect.shift(_cursorOffset);\n\n  return rect.shift(_getPixelPerfectCursorOffset(rect));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/getLocalRectForCaret.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "caretPosition",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                }
            ]
        },
        {
            "desc": "<p>Returns the position in the text for the given global coordinate.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderEditable\/getLocalRectForCaret.html\">getLocalRectForCaret<\/a>, which is the reverse operation, taking\na <a href=\"dart-ui\/TextPosition-class.html\">TextPosition<\/a> and returning a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/li>\n<li>\n<a href=\"painting\/TextPainter\/getPositionForOffset.html\">TextPainter.getPositionForOffset<\/a>, which is the equivalent method\nfor a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> object.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition getPositionForPoint(Offset globalPosition) {\n  _layoutText(constraints.maxWidth);\n  globalPosition += -_paintOffset;\n  return _textPainter.getPositionForOffset(globalToLocal(globalPosition));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/getPositionForPoint.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "globalPosition",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>If <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is false (the default) then this method is called by\nthe internal gesture recognizer's <a href=\"gestures\/DoubleTapGestureRecognizer\/onDoubleTap.html\">DoubleTapGestureRecognizer.onDoubleTap<\/a>\ncallback.<\/p>\n<p>When <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is true, an ancestor widget must respond to double\ntap events by calling this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void handleDoubleTap() {\n  selectWord(cause: SelectionChangedCause.doubleTap);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/handleDoubleTap.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Override this method to handle pointer events that hit this render object.<\/p>\n<p>For <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> objects, the <code>entry<\/code> argument is a <a href=\"rendering\/BoxHitTestEntry-class.html\">BoxHitTestEntry<\/a>. From this\nobject you can determine the <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a>'s position in local coordinates.\n(This is useful because <a href=\"gestures\/PointerEvent\/position.html\">PointerEvent.position<\/a> is in global coordinates.)<\/p>\n<p>If you override this, consider calling <a href=\"rendering\/RenderBox\/debugHandleEvent.html\">debugHandleEvent<\/a> as follows, so\nthat you can support <a href=\"rendering\/debugPaintPointersEnabled.html\">debugPaintPointersEnabled<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, HitTestEntry entry) {\n  assert(debugHandleEvent(event, entry));\n  \/\/ ... handle the event ...\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, BoxHitTestEntry entry) {\n  if (ignorePointer)\n    return;\n  assert(debugHandleEvent(event, entry));\n  if (event is PointerDownEvent &amp;&amp; onSelectionChanged != null) {\n    _tap.addPointer(event);\n    _longPress.addPointer(event);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/handleEvent.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "entry",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.BoxHitTestEntry"
                },
                {
                    "name": "event",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>If <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is false (the default) then this method is called by\nthe internal gesture recognizer's <a href=\"gestures\/LongPressGestureRecognizer\/onLongPress.html\">LongPressGestureRecognizer.onLongPress<\/a>\ncallback.<\/p>\n<p>When <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is true, an ancestor widget must respond to long\npress events by calling this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void handleLongPress() {\n  selectWord(cause: SelectionChangedCause.longPress);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/handleLongPress.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>If <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is false (the default) then this method is called by\nthe internal gesture recognizer's <a href=\"gestures\/TapGestureRecognizer\/onTap.html\">TapGestureRecognizer.onTap<\/a>\ncallback.<\/p>\n<p>When <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is true, an ancestor widget must respond to tap\nevents by calling this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void handleTap() {\n  selectPosition(cause: SelectionChangedCause.tap);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/handleTap.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>If <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is false (the default) then this method is called by\nthe internal gesture recognizer's <a href=\"gestures\/TapGestureRecognizer\/onTapDown.html\">TapGestureRecognizer.onTapDown<\/a>\ncallback.<\/p>\n<p>When <a href=\"rendering\/RenderEditable\/ignorePointer.html\">ignorePointer<\/a> is true, an ancestor widget must respond to tap\ndown events by calling this method.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void handleTapDown(TapDownDetails details) {\n  _lastTapDownPosition = details.globalPosition;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/handleTapDown.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "details",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.TapDownDetails"
                }
            ]
        },
        {
            "desc": "<p>Override this method if this render object can be hit even if its\nchildren were not hit.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderBox\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestSelf(Offset position) =&gt; true;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/hitTestSelf.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Marks the render object as needing to be laid out again and have its text\nmetrics recomputed.<\/p>\n<p>Implies <a href=\"rendering\/RenderBox\/markNeedsLayout.html\">markNeedsLayout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid markNeedsTextLayout() {\n  _textLayoutLastWidth = null;\n  markNeedsLayout();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/markNeedsTextLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  _layoutText(constraints.maxWidth);\n  if (_hasVisualOverflow)\n    context.pushClipRect(needsCompositing, offset, Offset.zero &amp; size, _paintContents);\n  else\n    _paintContents(context, offset);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  _layoutText(constraints.maxWidth);\n  _caretPrototype = _getCaretPrototype;\n  _selectionRects = null;\n  \/\/ We grab _textPainter.size here because assigning to `size` on the next\n  \/\/ line will trigger us to validate our intrinsic sizes, which will change\n  \/\/ _textPainter's layout because the intrinsic size calculations are\n  \/\/ destructive, which would mean we would get different results if we later\n  \/\/ used properties on _textPainter in this method.\n  \/\/ Other _textPainter state like didExceedMaxLines will also be affected,\n  \/\/ though we currently don't use those here.\n  \/\/ See also RenderParagraph which has a similar issue.\n  final Size textPainterSize = _textPainter.size;\n  size = Size(constraints.maxWidth, constraints.constrainHeight(_preferredHeight(constraints.maxWidth)));\n  final Size contentSize = Size(textPainterSize.width + _kCaretGap + cursorWidth, textPainterSize.height);\n  _maxScrollExtent = _getMaxScrollExtent(contentSize);\n  offset.applyViewportDimension(_viewportExtent);\n  offset.applyContentDimensions(0.0, _maxScrollExtent);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/performLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Move selection to the location of the last tap down.<\/p>\n<p>This method is mainly used to translate user inputs in global positions\ninto a <a href=\"services\/TextSelection-class.html\">TextSelection<\/a>. When used in conjunction with a <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>,\nthe selection change is fed back into <a href=\"rendering\/RenderEditable\/selection.html\">TextEditingController.selection<\/a>.<\/p>\n<p>If you have a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>, it's generally easier to\nprogrammatically manipulate its <code>value<\/code> or <code>selection<\/code> directly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void selectPosition({ @required SelectionChangedCause cause }) {\n  selectPositionAt(from: _lastTapDownPosition, cause: cause);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/selectPosition.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "cause",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SelectionChangedCause"
                }
            ]
        },
        {
            "desc": "<p>Select text between the global positions <code>from<\/code> and <code>to<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void selectPositionAt({ @required Offset from, Offset to, @required SelectionChangedCause cause }) {\n  assert(cause != null);\n  assert(from != null);\n  _layoutText(constraints.maxWidth);\n  if (onSelectionChanged != null) {\n    final TextPosition fromPosition = _textPainter.getPositionForOffset(globalToLocal(from - _paintOffset));\n    final TextPosition toPosition = to == null\n      ? null\n      : _textPainter.getPositionForOffset(globalToLocal(to - _paintOffset));\n\n    int baseOffset = fromPosition.offset;\n    int extentOffset = fromPosition.offset;\n    if (toPosition != null) {\n      baseOffset = math.min(fromPosition.offset, toPosition.offset);\n      extentOffset = math.max(fromPosition.offset, toPosition.offset);\n    }\n\n    final TextSelection newSelection = TextSelection(\n      baseOffset: baseOffset,\n      extentOffset: extentOffset,\n      affinity: fromPosition.affinity,\n    );\n    \/\/ Call [onSelectionChanged] only when the selection actually changed.\n    if (newSelection != _selection) {\n      onSelectionChanged(newSelection, this, cause);\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/selectPositionAt.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "cause",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SelectionChangedCause"
                },
                {
                    "name": "from",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "to",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Select a word around the location of the last tap down.<\/p>\n<p>This method is mainly used to translate user inputs in global positions\ninto a <a href=\"services\/TextSelection-class.html\">TextSelection<\/a>. When used in conjunction with a <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>,\nthe selection change is fed back into <a href=\"rendering\/RenderEditable\/selection.html\">TextEditingController.selection<\/a>.<\/p>\n<p>If you have a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>, it's generally easier to\nprogrammatically manipulate its <code>value<\/code> or <code>selection<\/code> directly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void selectWord({ @required SelectionChangedCause cause }) {\n  selectWordsInRange(from: _lastTapDownPosition, cause: cause);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/selectWord.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "cause",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SelectionChangedCause"
                }
            ]
        },
        {
            "desc": "<p>Move the selection to the beginning or end of a word.<\/p>\n<p>This method is mainly used to translate user inputs in global positions\ninto a <a href=\"services\/TextSelection-class.html\">TextSelection<\/a>. When used in conjunction with a <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>,\nthe selection change is fed back into <a href=\"rendering\/RenderEditable\/selection.html\">TextEditingController.selection<\/a>.<\/p>\n<p>If you have a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>, it's generally easier to\nprogrammatically manipulate its <code>value<\/code> or <code>selection<\/code> directly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void selectWordEdge({ @required SelectionChangedCause cause }) {\n  assert(cause != null);\n  _layoutText(constraints.maxWidth);\n  assert(_lastTapDownPosition != null);\n  if (onSelectionChanged != null) {\n    final TextPosition position = _textPainter.getPositionForOffset(globalToLocal(_lastTapDownPosition - _paintOffset));\n    final TextRange word = _textPainter.getWordBoundary(position);\n    if (position.offset - word.start &lt;= 1) {\n      onSelectionChanged(\n        TextSelection.collapsed(offset: word.start, affinity: TextAffinity.downstream),\n        this,\n        cause,\n      );\n    } else {\n      onSelectionChanged(\n        TextSelection.collapsed(offset: word.end, affinity: TextAffinity.upstream),\n        this,\n        cause,\n      );\n    }\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/selectWordEdge.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "cause",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SelectionChangedCause"
                }
            ]
        },
        {
            "desc": "<p>Selects the set words of a paragraph in a given range of global positions.<\/p>\n<p>The first and last endpoints of the selection will always be at the\nbeginning and end of a word respectively.<\/p>\n<p>This method is mainly used to translate user inputs in global positions\ninto a <a href=\"services\/TextSelection-class.html\">TextSelection<\/a>. When used in conjunction with a <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>,\nthe selection change is fed back into <a href=\"rendering\/RenderEditable\/selection.html\">TextEditingController.selection<\/a>.<\/p>\n<p>If you have a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>, it's generally easier to\nprogrammatically manipulate its <code>value<\/code> or <code>selection<\/code> directly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void selectWordsInRange({ @required Offset from, Offset to, @required SelectionChangedCause cause }) {\n  assert(cause != null);\n  assert(from != null);\n  _layoutText(constraints.maxWidth);\n  if (onSelectionChanged != null) {\n    final TextPosition firstPosition = _textPainter.getPositionForOffset(globalToLocal(from - _paintOffset));\n    final TextSelection firstWord = _selectWordAtOffset(firstPosition);\n    final TextSelection lastWord = to == null ?\n      firstWord : _selectWordAtOffset(_textPainter.getPositionForOffset(globalToLocal(to - _paintOffset)));\n\n    onSelectionChanged(\n      TextSelection(\n        baseOffset: firstWord.base.offset,\n        extentOffset: lastWord.extent.offset,\n        affinity: firstWord.affinity,\n      ), this, cause,\n    );\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/selectWordsInRange.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "cause",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.SelectionChangedCause"
                },
                {
                    "name": "from",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "to",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Sets the screen position of the floating cursor and the text position\nclosest to the cursor.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFloatingCursor(FloatingCursorDragState state, Offset boundedOffset, TextPosition lastTextPosition, { double resetLerpValue }) {\n  assert(state != null);\n  assert(boundedOffset != null);\n  assert(lastTextPosition != null);\n  if (state == FloatingCursorDragState.Start) {\n    _relativeOrigin = const Offset(0, 0);\n    _previousOffset = null;\n    _resetOriginOnBottom = false;\n    _resetOriginOnTop = false;\n    _resetOriginOnRight = false;\n    _resetOriginOnBottom = false;\n  }\n  _floatingCursorOn = state != FloatingCursorDragState.End;\n  _resetFloatingCursorAnimationValue = resetLerpValue;\n  if (_floatingCursorOn) {\n    _floatingCursorOffset = boundedOffset;\n    _floatingCursorTextPosition = lastTextPosition;\n  }\n  markNeedsPaint();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderEditable\/setFloatingCursor.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderEditable",
            "params": [
                {
                    "name": "boundedOffset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "lastTextPosition",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                },
                {
                    "name": "resetLerpValue",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "state",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "services.FloatingCursorDragState"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color to use when painting the cursor aligned to the text while\nrendering the floating cursor.<\/p>\n<p>The default is light grey.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get backgroundCursorColor =&gt; _backgroundCursorColor;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/backgroundCursorColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The color to use when painting the cursor.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get cursorColor =&gt; _cursorColor;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/cursorColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The offset that is used, in pixels, when painting the cursor on screen.<\/p>\n<p>By default, the cursor position should be set to an offset of\n(-<a href=\"rendering\/RenderEditable\/cursorWidth.html\">cursorWidth<\/a> * 0.5, 0.0) on iOS platforms and (0, 0) on Android\nplatforms. The origin from where the offset is applied to is the arbitrary\nlocation where the cursor ends up being rendered from by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get cursorOffset =&gt; _cursorOffset;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/cursorOffset.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>How rounded the corners of the cursor should be.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Radius get cursorRadius =&gt; _cursorRadius;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/cursorRadius.html",
            "isDeprecated": "0",
            "type": "dart:ui.Radius",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>How thick the cursor will be.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get cursorWidth =&gt; _cursorWidth;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/cursorWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The pixel ratio of the current device.<\/p>\n<p>Should be obtained by querying MediaQuery for the devicePixelRatio.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get devicePixelRatio =&gt; _devicePixelRatio;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/devicePixelRatio.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>If false, <a href=\"rendering\/RenderEditable\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> will not set the\nconfiguration's cursor motion or set selection callbacks.<\/p>\n<p>True by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get enableInteractiveSelection =&gt; _enableInteractiveSelection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/enableInteractiveSelection.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Whether this widget's height will be sized to fill its parent.<\/p>\n<p>If set to true and wrapped in a parent widget like <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or\n<a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a>, the input will expand to fill the parent.<\/p>\n<p><a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a> and <a href=\"rendering\/RenderEditable\/minLines.html\">minLines<\/a> must both be null when this is set to true,\notherwise an error is thrown.<\/p>\n<p>Defaults to false.<\/p>\n<p>See the examples in <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a> for the complete picture of how <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a>,\n<a href=\"rendering\/RenderEditable\/minLines.html\">minLines<\/a>, and <a href=\"rendering\/RenderEditable\/expands.html\">expands<\/a> interact to produce various behaviors.<\/p>\n<p>Input that matches the height of its parent<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Expanded(\n  child: TextField(maxLines: null, expands: true),\n)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get expands =&gt; _expands;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/expands.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The padding applied to text field. Used to determine the bounds when\nmoving the floating cursor.<\/p>\n<p>Defaults to a padding with left, top and right set to 4, bottom to 5.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets get floatingCursorAddedMargin =&gt; _floatingCursorAddedMargin;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/floatingCursorAddedMargin.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsets",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Whether the editable is currently focused.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasFocus =&gt; _hasFocus;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/hasFocus.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>If true <a href=\"rendering\/RenderEditable\/handleEvent.html\">handleEvent<\/a> does nothing and it's assumed that this\nrenderer will be notified of input gestures via <a href=\"rendering\/RenderEditable\/handleTapDown.html\">handleTapDown<\/a>,\n<a href=\"rendering\/RenderEditable\/handleTap.html\">handleTap<\/a>, <a href=\"rendering\/RenderEditable\/handleDoubleTap.html\">handleDoubleTap<\/a>, and <a href=\"rendering\/RenderEditable\/handleLongPress.html\">handleLongPress<\/a>.<\/p>\n<p>The default value of this property is false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool ignorePointer\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/ignorePointer.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Used by this renderer's internal <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> to select a locale-specific\nfont.<\/p>\n<p>In some cases the same Unicode character may be rendered differently depending\non the locale. For example the '\u9aa8' character is rendered differently in\nthe Chinese and Japanese locales. In these cases the <a href=\"rendering\/RenderEditable\/locale.html\">locale<\/a> may be used\nto select a locale-specific font.<\/p>\n<p>If this value is null, a system-dependent algorithm is used to select\nthe font.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Locale get locale =&gt; _textPainter.locale;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/locale.html",
            "isDeprecated": "0",
            "type": "dart:ui.Locale",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The maximum number of lines for the text to span, wrapping if necessary.<\/p>\n<p>If this is 1 (the default), the text will not wrap, but will extend\nindefinitely instead.<\/p>\n<p>If this is null, there is no limit to the number of lines.<\/p>\n<p>When this is not null, the intrinsic height of the render object is the\nheight of one line of text multiplied by this value. In other words, this\nalso controls the height of the actual editing widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get maxLines =&gt; _maxLines;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/maxLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The minimum number of lines to occupy when the content spans fewer lines.\nWhen <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a> is set as well, the height will grow between the indicated\nrange of lines. When <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a> is null, it will grow as high as needed,\nstarting from <a href=\"rendering\/RenderEditable\/minLines.html\">minLines<\/a>.<\/p>\n<p>See the examples in <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a> for the complete picture of how <a href=\"rendering\/RenderEditable\/maxLines.html\">maxLines<\/a>\nand <a href=\"rendering\/RenderEditable\/minLines.html\">minLines<\/a> interact to produce various behaviors.<\/p>\n<p>Defaults to null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get minLines =&gt; _minLines;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/minLines.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Whether to hide the text being edited (e.g., for passwords).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get obscureText =&gt; _obscureText;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/obscureText.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The offset at which the text should be painted.<\/p>\n<p>If the text content is larger than the editable line itself, the editable\nline clips the text. This property controls which part of the text is\nvisible by shifting the text by the given offset before clipping.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ViewportOffset get offset =&gt; _offset;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/offset.html",
            "isDeprecated": "0",
            "type": "rendering.ViewportOffset",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>If the cursor should be painted on top of the text or underneath it.<\/p>\n<p>By default, the cursor should be painted on top for iOS platforms and\nunderneath for Android platforms.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get paintCursorAboveText =&gt; _paintCursorOnTop;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/paintCursorAboveText.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>An estimate of the height of a line in the text. See <a href=\"rendering\/RenderEditable\/preferredLineHeight.html\">TextPainter.preferredLineHeight<\/a>.\nThis does not required the layout to be updated.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get preferredLineHeight =&gt; _textPainter.preferredLineHeight;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/preferredLineHeight.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The region of text that is selected, if any.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection get selection =&gt; _selection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/selection.html",
            "isDeprecated": "0",
            "type": "services.TextSelection",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The color to use when painting the selection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get selectionColor =&gt; _selectionColor;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/selectionColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>True if interactive selection is enabled based on the values of\n<a href=\"rendering\/RenderEditable\/enableInteractiveSelection.html\">enableInteractiveSelection<\/a> and <a href=\"rendering\/RenderEditable\/obscureText.html\">obscureText<\/a>.<\/p>\n<p>By default <a href=\"rendering\/RenderEditable\/enableInteractiveSelection.html\">enableInteractiveSelection<\/a> is null, obscureText is false,\nand this method returns true.\nIf <a href=\"rendering\/RenderEditable\/enableInteractiveSelection.html\">enableInteractiveSelection<\/a> is null and obscureText is true, then this\nmethod returns false. This is the common case for password fields.\nIf <a href=\"rendering\/RenderEditable\/enableInteractiveSelection.html\">enableInteractiveSelection<\/a> is non-null then its value is returned. An\napp might set it to true to enable interactive selection for a password\nfield, or to false to unconditionally disable interactive selection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get selectionEnabled {\n  return enableInteractiveSelection ?? !obscureText;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/selectionEnabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Track whether position of the end of the selected text is within the viewport.<\/p>\n<p>For example, if the text contains \"Hello World\", and the user selects\n\"World\", then scrolls so only \"Hello\" is visible, this will become\n'false'. If the user scrolls back so that the \"d\" is visible again, this\nwill become 'true'.<\/p>\n<p>This bool indicates whether the text is scrolled so that the handle is\ninside the text field viewport, as opposed to whether it is actually\nvisible on the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueListenable&lt;bool&gt; get selectionEndInViewport =&gt; _selectionEndInViewport;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/selectionEndInViewport.html",
            "isDeprecated": "0",
            "type": "foundation.ValueListenable<dart:core.bool>",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Track whether position of the start of the selected text is within the viewport.<\/p>\n<p>For example, if the text contains \"Hello World\", and the user selects\n\"Hello\", then scrolls so only \"World\" is visible, this will become false.\nIf the user scrolls back so that the \"H\" is visible again, this will\nbecome true.<\/p>\n<p>This bool indicates whether the text is scrolled so that the handle is\ninside the text field viewport, as opposed to whether it is actually\nvisible on the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueListenable&lt;bool&gt; get selectionStartInViewport =&gt; _selectionStartInViewport;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/selectionStartInViewport.html",
            "isDeprecated": "0",
            "type": "foundation.ValueListenable<dart:core.bool>",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>Whether to paint the cursor.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueNotifier&lt;bool&gt; get showCursor =&gt; _showCursor;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/showCursor.html",
            "isDeprecated": "0",
            "type": "foundation.ValueNotifier<dart:core.bool>",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> used by the renderer's internal <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> to\ndetermine the strut to use.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle get strutStyle =&gt; _textPainter.strutStyle;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/strutStyle.html",
            "isDeprecated": "0",
            "type": "painting.StrutStyle",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The text to display.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSpan get text =&gt; _textPainter.text;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/text.html",
            "isDeprecated": "0",
            "type": "painting.TextSpan",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>How the text should be aligned horizontally.<\/p>\n<p>This must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextAlign get textAlign =&gt; _textPainter.textAlign;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/textAlign.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextAlign",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The directionality of the text.<\/p>\n<p>This decides how the <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>, <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a>, and\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.justify<\/a> values of <a href=\"rendering\/RenderEditable\/textAlign.html\">textAlign<\/a> are interpreted.<\/p>\n<p>This is also used to disambiguate how to render bidirectional text. For\nexample, if the <a href=\"rendering\/RenderEditable\/text.html\">text<\/a> is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>This must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textPainter.textDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get textScaleFactor =&gt; _textPainter.textScaleFactor;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/textScaleFactor.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderEditable",
            "params": []
        },
        {
            "desc": "<p>The object that controls the text selection, used by this render object\nfor implementing cut, copy, and paste keyboard shortcuts.<\/p>\n<p>It must not be null. It will make cut, copy and paste functionality work\nwith the most recently set <a href=\"services\/TextSelectionDelegate-class.html\">TextSelectionDelegate<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSelectionDelegate textSelectionDelegate\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderEditable\/textSelectionDelegate.html",
            "isDeprecated": "0",
            "type": "services.TextSelectionDelegate",
            "memberOf": "rendering.RenderEditable",
            "params": []
        }
    ]
}