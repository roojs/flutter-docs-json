{
    "desc": "<p>A widget that can be dragged from to a <a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a>.<\/p>\n<p>When a draggable widget recognizes the start of a drag gesture, it displays\na <a href=\"widgets\/Draggable\/feedback.html\">feedback<\/a> widget that tracks the user's finger across the screen. If the\nuser lifts their finger while on top of a <a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a>, that target is given\nthe opportunity to accept the <a href=\"widgets\/Draggable\/data.html\">data<\/a> carried by the draggable.<\/p>\n<p>On multitouch devices, multiple drags can occur simultaneously because there\ncan be multiple pointers in contact with the device at once. To limit the\nnumber of simultaneous drags, use the <a href=\"widgets\/Draggable\/maxSimultaneousDrags.html\">maxSimultaneousDrags<\/a> property. The\ndefault is to allow an unlimited number of simultaneous drags.<\/p>\n<p>This widget displays <a href=\"widgets\/Draggable\/child.html\">child<\/a> when zero drags are under way. If\n<a href=\"widgets\/Draggable\/childWhenDragging.html\">childWhenDragging<\/a> is non-null, this widget instead displays\n<a href=\"widgets\/Draggable\/childWhenDragging.html\">childWhenDragging<\/a> when one or more drags are underway. Otherwise, this\nwidget always displays <a href=\"widgets\/Draggable\/child.html\">child<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a><\/li>\n<li><a href=\"widgets\/LongPressDraggable-class.html\">LongPressDraggable<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Draggable-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Draggable",
    "shortname": "Draggable",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.LongPressDraggable"
    ],
    "events": [
        {
            "desc": "<p>Called when the draggable is dropped and accepted by a <a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a>.<\/p>\n<p>This function might be called after this widget has been removed from the\ntree. For example, if a drag was in progress when this widget was removed\nfrom the tree and the drag ended up completing, this callback will\nstill be called. For this reason, implementations of this callback might\nneed to check <a href=\"widgets\/State\/mounted.html\">State.mounted<\/a> to check whether the state receiving the\ncallback is still in the tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDragCompleted\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/onDragCompleted.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onDragCompleted",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>Called when the draggable is dropped.<\/p>\n<p>The velocity and offset at which the pointer was moving when it was\ndropped is available in the <a href=\"widgets\/DraggableDetails-class.html\">DraggableDetails<\/a>. Also included in the\n<code>details<\/code> is whether the draggable's <a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a> accepted it.<\/p>\n<p>This function will only be called while this widget is still mounted to\nthe tree (i.e. <a href=\"widgets\/State\/mounted.html\">State.mounted<\/a> is true).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragEndCallback onDragEnd\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/onDragEnd.html",
            "isDeprecated": false,
            "type": "widgets.DragEndCallback",
            "name": "onDragEnd",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>Called when the draggable starts being dragged.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDragStarted\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/onDragStarted.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onDragStarted",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>Called when the draggable is dropped without being accepted by a <a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a>.<\/p>\n<p>This function might be called after this widget has been removed from the\ntree. For example, if a drag was in progress when this widget was removed\nfrom the tree and the drag ended up being canceled, this callback will\nstill be called. For this reason, implementations of this callback might\nneed to check <a href=\"widgets\/State\/mounted.html\">State.mounted<\/a> to check whether the state receiving the\ncallback is still in the tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DraggableCanceledCallback onDraggableCanceled\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/onDraggableCanceled.html",
            "isDeprecated": false,
            "type": "widgets.DraggableCanceledCallback",
            "name": "onDraggableCanceled",
            "memberOf": "widgets.Draggable",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that can be dragged to a <a href=\"widgets\/DragTarget-class.html\">DragTarget<\/a>.<\/p>\n<p>The <code>child<\/code> and <code>feedback<\/code> arguments must not be null. If\n<code>maxSimultaneousDrags<\/code> is non-null, it must be non-negative.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Draggable({\n  Key key,\n  @required this.child,\n  @required this.feedback,\n  this.data,\n  this.axis,\n  this.childWhenDragging,\n  this.feedbackOffset = Offset.zero,\n  this.dragAnchor = DragAnchor.child,\n  this.affinity,\n  this.maxSimultaneousDrags,\n  this.onDragStarted,\n  this.onDraggableCanceled,\n  this.onDragEnd,\n  this.onDragCompleted,\n  this.ignoringFeedbackSemantics = true,\n}) : assert(child != null),\n     assert(feedback != null),\n     assert(ignoringFeedbackSemantics != null),\n     assert(maxSimultaneousDrags == null || maxSimultaneousDrags &gt;= 0),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Draggable\/Draggable.html",
            "isDeprecated": false,
            "type": "",
            "name": "Draggable",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Draggable",
            "params": [
                {
                    "name": "affinity",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "axis",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.Axis"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "childWhenDragging",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<T>"
                },
                {
                    "name": "dragAnchor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DragAnchor"
                },
                {
                    "name": "feedback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "feedbackOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "ignoringFeedbackSemantics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "maxSimultaneousDrags",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "onDragCompleted",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDragEnd",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DragEndCallback"
                },
                {
                    "name": "onDragStarted",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "onDraggableCanceled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.DraggableCanceledCallback"
                }
            ]
        },
        {
            "desc": "<p>Creates a gesture recognizer that recognizes the start of the drag.<\/p>\n<p>Subclasses can override this function to customize when they start\nrecognizing a drag.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nMultiDragGestureRecognizer&lt;MultiDragPointerState&gt; createRecognizer(GestureMultiDragStartCallback onStart) {\n  switch (affinity) {\n    case Axis.horizontal:\n      return HorizontalMultiDragGestureRecognizer()..onStart = onStart;\n    case Axis.vertical:\n      return VerticalMultiDragGestureRecognizer()..onStart = onStart;\n  }\n  return ImmediateMultiDragGestureRecognizer()..onStart = onStart;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Draggable\/createRecognizer.html",
            "isDeprecated": false,
            "type": "gestures.MultiDragGestureRecognizer<gestures.MultiDragPointerState>",
            "name": "createRecognizer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Draggable",
            "params": [
                {
                    "name": "onStart",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.GestureMultiDragStartCallback"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/Draggable\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_DraggableState&lt;T&gt; createState() =&gt; _DraggableState&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "widgets\/Draggable\/createState.html",
            "isDeprecated": false,
            "type": "<_DraggableState<T>>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Draggable",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Controls how this widget competes with other gestures to initiate a drag.<\/p>\n<p>If affinity is null, this widget initiates a drag as soon as it recognizes\na tap down gesture, regardless of any directionality. If affinity is\nhorizontal (or vertical), then this widget will compete with other\nhorizontal (or vertical, respectively) gestures.<\/p>\n<p>For example, if this widget is placed in a vertically scrolling region and\nhas horizontal affinity, pointer motion in the vertical direction will\nresult in a scroll and pointer motion in the horizontal direction will\nresult in a drag. Conversely, if the widget has a null or vertical\naffinity, pointer motion in any direction will result in a drag rather\nthan in a scroll because the draggable widget, being the more specific\nwidget, will out-compete the <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> for vertical gestures.<\/p>\n<p>For the directions this widget can be dragged in after the drag event\nstarts, see <a href=\"widgets\/Draggable\/axis.html\">Draggable.axis<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis affinity\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/affinity.html",
            "name": "affinity",
            "isDeprecated": false,
            "type": "painting.Axis",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"painting\/Axis-class.html\">Axis<\/a> to restrict this draggable's movement, if specified.<\/p>\n<p>When axis is set to <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a>, this widget can only be dragged\nhorizontally. Behavior is similar for <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n<p>Defaults to allowing drag on both <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a> and <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n<p>When null, allows drag on both <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a> and <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>.<\/p>\n<p>For the direction of gestures this widget competes with to start a drag\nevent, see <a href=\"widgets\/Draggable\/affinity.html\">Draggable.affinity<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Axis axis\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/axis.html",
            "name": "axis",
            "isDeprecated": false,
            "type": "painting.Axis",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget displays <a href=\"widgets\/Draggable\/child.html\">child<\/a> when zero drags are under way. If\n<a href=\"widgets\/Draggable\/childWhenDragging.html\">childWhenDragging<\/a> is non-null, this widget instead displays\n<a href=\"widgets\/Draggable\/childWhenDragging.html\">childWhenDragging<\/a> when one or more drags are underway. Otherwise, this\nwidget always displays <a href=\"widgets\/Draggable\/child.html\">child<\/a>.<\/p>\n<p>The <a href=\"widgets\/Draggable\/feedback.html\">feedback<\/a> widget is shown under the pointer when a drag is under way.<\/p>\n<p>To limit the number of simultaneous drags on multitouch devices, see\n<a href=\"widgets\/Draggable\/maxSimultaneousDrags.html\">maxSimultaneousDrags<\/a>.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>The widget to display instead of <a href=\"widgets\/Draggable\/child.html\">child<\/a> when one or more drags are under way.<\/p>\n<p>If this is null, then this widget will always display <a href=\"widgets\/Draggable\/child.html\">child<\/a> (and so the\ndrag source representation will not change while a drag is under\nway).<\/p>\n<p>The <a href=\"widgets\/Draggable\/feedback.html\">feedback<\/a> widget is shown under the pointer when a drag is under way.<\/p>\n<p>To limit the number of simultaneous drags on multitouch devices, see\n<a href=\"widgets\/Draggable\/maxSimultaneousDrags.html\">maxSimultaneousDrags<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget childWhenDragging\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/childWhenDragging.html",
            "name": "childWhenDragging",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>Where this widget should be anchored during a drag.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragAnchor dragAnchor\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/dragAnchor.html",
            "name": "dragAnchor",
            "isDeprecated": false,
            "type": "widgets.DragAnchor",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>The widget to show under the pointer when a drag is under way.<\/p>\n<p>See <a href=\"widgets\/Draggable\/child.html\">child<\/a> and <a href=\"widgets\/Draggable\/childWhenDragging.html\">childWhenDragging<\/a> for information about what is shown\nat the location of the <a href=\"widgets\/Draggable-class.html\">Draggable<\/a> itself when a drag is under way.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget feedback\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/feedback.html",
            "name": "feedback",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>The feedbackOffset can be used to set the hit test target point for the\npurposes of finding a drag target. It is especially useful if the feedback\nis transformed compared to the child.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Offset feedbackOffset\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/feedbackOffset.html",
            "name": "feedbackOffset",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>Whether the semantics of the <a href=\"widgets\/Draggable\/feedback.html\">feedback<\/a> widget is ignored when building\nthe semantics tree.<\/p>\n<p>This value should be set to false when the <a href=\"widgets\/Draggable\/feedback.html\">feedback<\/a> widget is intended\nto be the same object as the <a href=\"widgets\/Draggable\/child.html\">child<\/a>.  Placing a <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a> on this\nwidget will ensure semantic focus is kept on the element as it moves in\nand out of the feedback position.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool ignoringFeedbackSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/ignoringFeedbackSemantics.html",
            "name": "ignoringFeedbackSemantics",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.Draggable",
            "params": []
        },
        {
            "desc": "<p>How many simultaneous drags to support.<\/p>\n<p>When null, no limit is applied. Set this to 1 if you want to only allow\nthe drag source to have one item dragged at a time. Set this to 0 if you\nwant to prevent the draggable from actually being dragged.<\/p>\n<p>If you set this property to 1, consider supplying an \"empty\" widget for\n<a href=\"widgets\/Draggable\/childWhenDragging.html\">childWhenDragging<\/a> to create the illusion of actually moving <a href=\"widgets\/Draggable\/child.html\">child<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxSimultaneousDrags\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Draggable\/maxSimultaneousDrags.html",
            "name": "maxSimultaneousDrags",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "widgets.Draggable",
            "params": []
        }
    ]
}