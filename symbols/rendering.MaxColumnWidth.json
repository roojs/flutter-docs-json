{
    "desc": "<p>Sizes the column such that it is the size that is the maximum of\ntwo column width specifications.<\/p>\n<p>For example, to have a column be 10% of the container width or\n100px, whichever is bigger, you could use:<\/p>\n<pre class=\"language-dart\"><code>const MaxColumnWidth(const FixedColumnWidth(100.0), FractionColumnWidth(0.1))\n<\/code><\/pre>\n<p>Both specifications are evaluated, so if either specification is\nexpensive, so is this.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "rendering\/MaxColumnWidth-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.MaxColumnWidth",
    "shortname": "MaxColumnWidth",
    "extends": [
        "rendering.TableColumnWidth",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a column width that is the maximum of two other column widths.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MaxColumnWidth(this.a, this.b);<\/code><\/pre>\n    ",
            "href": "rendering\/MaxColumnWidth\/MaxColumnWidth.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.MaxColumnWidth",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TableColumnWidth"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TableColumnWidth"
                }
            ]
        },
        {
            "desc": "<p>The flex factor to apply to the cell if there is any room left\nover when laying out the table. The remaining space is\ndistributed to any columns with flex in proportion to their flex\nvalue (higher values get more space).<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble flex(Iterable&lt;RenderBox&gt; cells) {\n  final double aFlex = a.flex(cells);\n  if (aFlex == null)\n    return b.flex(cells);\n  final double bFlex = b.flex(cells);\n  if (bFlex == null)\n    return null;\n  return math.max(aFlex, bFlex);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/MaxColumnWidth\/flex.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MaxColumnWidth",
            "params": [
                {
                    "name": "cells",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<rendering.RenderBox>"
                }
            ]
        },
        {
            "desc": "<p>The ideal width that the column should have. This must be equal\nto or greater than the <a href=\"rendering\/MaxColumnWidth\/minIntrinsicWidth.html\">minIntrinsicWidth<\/a>. The column might be\nbigger than this width, e.g. if the column is flexible or if the\ntable's width ends up being forced to be bigger than the sum of\nall the maxIntrinsicWidth values.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble maxIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth) {\n  return math.max(\n    a.maxIntrinsicWidth(cells, containerWidth),\n    b.maxIntrinsicWidth(cells, containerWidth),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/MaxColumnWidth\/maxIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MaxColumnWidth",
            "params": [
                {
                    "name": "cells",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<rendering.RenderBox>"
                },
                {
                    "name": "containerWidth",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>The smallest width that the column can have.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble minIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth) {\n  return math.max(\n    a.minIntrinsicWidth(cells, containerWidth),\n    b.minIntrinsicWidth(cells, containerWidth),\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/MaxColumnWidth\/minIntrinsicWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MaxColumnWidth",
            "params": [
                {
                    "name": "cells",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<rendering.RenderBox>"
                },
                {
                    "name": "containerWidth",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($a, $b)';<\/code><\/pre>\n    ",
            "href": "rendering\/MaxColumnWidth\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MaxColumnWidth",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>A lower bound for the width of this column.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TableColumnWidth a\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/MaxColumnWidth\/a.html",
            "isDeprecated": "0",
            "type": "rendering.TableColumnWidth",
            "memberOf": "rendering.MaxColumnWidth",
            "params": []
        },
        {
            "desc": "<p>Another lower bound for the width of this column.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TableColumnWidth b\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/MaxColumnWidth\/b.html",
            "isDeprecated": "0",
            "type": "rendering.TableColumnWidth",
            "memberOf": "rendering.MaxColumnWidth",
            "params": []
        }
    ]
}