{
    "desc": "<p>A widget that by default does a <a href=\"widgets\/FadeTransition-class.html\">FadeTransition<\/a> between a new widget and\nthe widget previously set on the <a href=\"widgets\/AnimatedSwitcher-class.html\">AnimatedSwitcher<\/a> as a child.<\/p>\n<p>If they are swapped fast enough (i.e. before <a href=\"widgets\/AnimatedSwitcher\/duration.html\">duration<\/a> elapses), more than\none previous child can exist and be transitioning out while the newest one\nis transitioning in.<\/p>\n<p>If the \"new\" child is the same widget type and key as the \"old\" child, but\nwith different parameters, then <a href=\"widgets\/AnimatedSwitcher-class.html\">AnimatedSwitcher<\/a> will <em>not<\/em> do a\ntransition between them, since as far as the framework is concerned, they\nare the same widget and the existing widget can be updated with the new\nparameters. To force the transition to occur, set a <a href=\"foundation\/Key-class.html\">Key<\/a> on each child\nwidget that you wish to be considered unique (typically a <a href=\"foundation\/ValueKey-class.html\">ValueKey<\/a> on the\nwidget data that distinguishes this child from the others).<\/p>\n<p>The same key can be used for a new child as was used for an already-outgoing\nchild; the two will not be considered related. (For example, if a progress\nindicator with key A is first shown, then an image with key B, then another\nprogress indicator with key A again, all in rapid succession, then the old\nprogress indicator and the image will be fading out while a new progress\nindicator is fading in.)<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ClickCounter extends StatefulWidget {\n  const ClickCounter({Key key}) : super(key: key);\n\n  @override\n  _ClickCounterState createState() =&gt; _ClickCounterState();\n}\n\nclass _ClickCounterState extends State&lt;ClickCounter&gt; {\n  int _count = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Material(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: &lt;Widget&gt;[\n            AnimatedSwitcher(\n              duration: const Duration(milliseconds: 500),\n              transitionBuilder: (Widget child, Animation&lt;double&gt; animation) {\n                return ScaleTransition(child: child, scale: animation);\n              },\n              child: Text(\n                '$_count',\n                \/\/ This key causes the AnimatedSwitcher to interpret this as a \"new\"\n                \/\/ child each time the count changes, so that it will begin its animation\n                \/\/ when the count changes.\n                key: ValueKey&lt;int&gt;(_count),\n                style: Theme.of(context).textTheme.display1,\n              ),\n            ),\n            RaisedButton(\n              child: const Text('Increment'),\n              onPressed: () {\n                setState(() {\n                  _count += 1;\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AnimatedCrossFade-class.html\">AnimatedCrossFade<\/a>, which only fades between two children, but also\ninterpolates their sizes, and is reversible.<\/li>\n<li>\n<a href=\"widgets\/FadeTransition-class.html\">FadeTransition<\/a> which <a href=\"widgets\/AnimatedSwitcher-class.html\">AnimatedSwitcher<\/a> uses to perform the transition.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/AnimatedSwitcher-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.AnimatedSwitcher",
    "shortname": "AnimatedSwitcher",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>A function that wraps all of the children that are transitioning out, and\nthe <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> that's transitioning in, with a widget that lays all of them\nout. This is called every time this widget is built. The function must not\nreturn null.<\/p>\n<p>The default is <a href=\"widgets\/AnimatedSwitcher\/defaultLayoutBuilder.html\">AnimatedSwitcher.defaultLayoutBuilder<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AnimatedSwitcherLayoutBuilder.html\">AnimatedSwitcherLayoutBuilder<\/a> for more information about\nhow a layout builder should function.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AnimatedSwitcherLayoutBuilder layoutBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedSwitcher\/layoutBuilder.html",
            "isDeprecated": false,
            "type": "widgets.AnimatedSwitcherLayoutBuilder",
            "name": "layoutBuilder",
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        },
        {
            "desc": "<p>A function that wraps a new <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> with an animation that transitions\nthe <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> in when the animation runs in the forward direction and out\nwhen the animation runs in the reverse direction. This is only called\nwhen a new <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> is set (not for each build), or when a new\n<a href=\"widgets\/AnimatedSwitcher\/transitionBuilder.html\">transitionBuilder<\/a> is set. If a new <a href=\"widgets\/AnimatedSwitcher\/transitionBuilder.html\">transitionBuilder<\/a> is set, then\nthe transition is rebuilt for the current child and all previous children\nusing the new <a href=\"widgets\/AnimatedSwitcher\/transitionBuilder.html\">transitionBuilder<\/a>. The function must not return null.<\/p>\n<p>The default is <a href=\"widgets\/AnimatedSwitcher\/defaultTransitionBuilder.html\">AnimatedSwitcher.defaultTransitionBuilder<\/a>.<\/p>\n<p>The animation provided to the builder has the <a href=\"widgets\/AnimatedSwitcher\/duration.html\">duration<\/a> and\n<a href=\"widgets\/AnimatedSwitcher\/switchInCurve.html\">switchInCurve<\/a> or <a href=\"widgets\/AnimatedSwitcher\/switchOutCurve.html\">switchOutCurve<\/a> applied as provided when the\ncorresponding <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> was first provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/AnimatedSwitcherTransitionBuilder.html\">AnimatedSwitcherTransitionBuilder<\/a> for more information about\nhow a transition builder should function.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AnimatedSwitcherTransitionBuilder transitionBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedSwitcher\/transitionBuilder.html",
            "isDeprecated": false,
            "type": "widgets.AnimatedSwitcherTransitionBuilder",
            "name": "transitionBuilder",
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates an <a href=\"widgets\/AnimatedSwitcher-class.html\">AnimatedSwitcher<\/a>.<\/p>\n<p>The <code>duration<\/code>, <code>transitionBuilder<\/code>, <code>layoutBuilder<\/code>, <code>switchInCurve<\/code>, and\n<code>switchOutCurve<\/code> parameters must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnimatedSwitcher({\n  Key key,\n  this.child,\n  @required this.duration,\n  this.switchInCurve = Curves.linear,\n  this.switchOutCurve = Curves.linear,\n  this.transitionBuilder = AnimatedSwitcher.defaultTransitionBuilder,\n  this.layoutBuilder = AnimatedSwitcher.defaultLayoutBuilder,\n}) : assert(duration != null),\n     assert(switchInCurve != null),\n     assert(switchOutCurve != null),\n     assert(transitionBuilder != null),\n     assert(layoutBuilder != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedSwitcher\/AnimatedSwitcher.html",
            "isDeprecated": false,
            "type": "",
            "name": "AnimatedSwitcher",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.AnimatedSwitcher",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "duration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "layoutBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.AnimatedSwitcherLayoutBuilder"
                },
                {
                    "name": "switchInCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "switchOutCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "transitionBuilder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.AnimatedSwitcherTransitionBuilder"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/AnimatedSwitcher\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_AnimatedSwitcherState createState() =&gt; _AnimatedSwitcherState();<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedSwitcher\/createState.html",
            "isDeprecated": false,
            "type": "<_AnimatedSwitcherState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        },
        {
            "desc": "<p>The layout builder used as the default value of <a href=\"widgets\/AnimatedSwitcher\/layoutBuilder.html\">layoutBuilder<\/a>.<\/p>\n<p>The new child is placed in a <a href=\"widgets\/Stack-class.html\">Stack<\/a> that sizes itself to match the\nlargest of the child or a previous child. The children are centered on\neach other.<\/p>\n<p>This is an <a href=\"widgets\/AnimatedSwitcherLayoutBuilder.html\">AnimatedSwitcherLayoutBuilder<\/a> function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Widget defaultLayoutBuilder(Widget currentChild, List&lt;Widget&gt; previousChildren) {\n  List&lt;Widget&gt; children = previousChildren;\n  if (currentChild != null)\n    children = children.toList()..add(currentChild);\n  return Stack(\n    children: children,\n    alignment: Alignment.center,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedSwitcher\/defaultLayoutBuilder.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "defaultLayoutBuilder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedSwitcher",
            "params": [
                {
                    "name": "currentChild",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Widget"
                },
                {
                    "name": "previousChildren",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<widgets.Widget>"
                }
            ]
        },
        {
            "desc": "<p>The transition builder used as the default value of <a href=\"widgets\/AnimatedSwitcher\/transitionBuilder.html\">transitionBuilder<\/a>.<\/p>\n<p>The new child is given a <a href=\"widgets\/FadeTransition-class.html\">FadeTransition<\/a> which increases opacity as\nthe animation goes from 0.0 to 1.0, and decreases when the animation is\nreversed.<\/p>\n<p>This is an <a href=\"widgets\/AnimatedSwitcherTransitionBuilder.html\">AnimatedSwitcherTransitionBuilder<\/a> function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Widget defaultTransitionBuilder(Widget child, Animation&lt;double&gt; animation) {\n  return FadeTransition(\n    opacity: animation,\n    child: child,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/AnimatedSwitcher\/defaultTransitionBuilder.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "defaultTransitionBuilder",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.AnimatedSwitcher",
            "params": [
                {
                    "name": "animation",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.Widget"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The current child widget to display. If there was a previous child, then\nthat child will be faded out using the <a href=\"widgets\/AnimatedSwitcher\/switchOutCurve.html\">switchOutCurve<\/a>, while the new\nchild is faded in with the <a href=\"widgets\/AnimatedSwitcher\/switchInCurve.html\">switchInCurve<\/a>, over the <a href=\"widgets\/AnimatedSwitcher\/duration.html\">duration<\/a>.<\/p>\n<p>If there was no previous child, then this child will fade in using the\n<a href=\"widgets\/AnimatedSwitcher\/switchInCurve.html\">switchInCurve<\/a> over the <a href=\"widgets\/AnimatedSwitcher\/duration.html\">duration<\/a>.<\/p>\n<p>The child is considered to be \"new\" if it has a different type or <a href=\"foundation\/Key-class.html\">Key<\/a>\n(see <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>).<\/p>\n<p>To change the kind of transition used, see <a href=\"widgets\/AnimatedSwitcher\/transitionBuilder.html\">transitionBuilder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedSwitcher\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        },
        {
            "desc": "<p>The duration of the transition from the old <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> value to the new one.<\/p>\n<p>This duration is applied to the given <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> when that property is set to\na new child. The same duration is used when fading out. Changing\n<a href=\"widgets\/AnimatedSwitcher\/duration.html\">duration<\/a> will not affect the durations of transitions already in\nprogress.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration duration\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedSwitcher\/duration.html",
            "name": "duration",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        },
        {
            "desc": "<p>The animation curve to use when transitioning in a new <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a>.<\/p>\n<p>This curve is applied to the given <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> when that property is set to a\nnew child. Changing <a href=\"widgets\/AnimatedSwitcher\/switchInCurve.html\">switchInCurve<\/a> will not affect the curve of a\ntransition already in progress.<\/p>\n<p>The <a href=\"widgets\/AnimatedSwitcher\/switchOutCurve.html\">switchOutCurve<\/a> is used when fading out, except that if <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> is\nchanged while the current child is in the middle of fading in,\n<a href=\"widgets\/AnimatedSwitcher\/switchInCurve.html\">switchInCurve<\/a> will be run in reverse from that point instead of jumping\nto the corresponding point on <a href=\"widgets\/AnimatedSwitcher\/switchOutCurve.html\">switchOutCurve<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve switchInCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedSwitcher\/switchInCurve.html",
            "name": "switchInCurve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        },
        {
            "desc": "<p>The animation curve to use when transitioning a previous <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> out.<\/p>\n<p>This curve is applied to the <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> when the child is faded in (or when\nthe widget is created, for the first child). Changing <a href=\"widgets\/AnimatedSwitcher\/switchOutCurve.html\">switchOutCurve<\/a>\nwill not affect the curves of already-visible widgets, it only affects the\ncurves of future children.<\/p>\n<p>If <a href=\"widgets\/AnimatedSwitcher\/child.html\">child<\/a> is changed while the current child is in the middle of fading\nin, <a href=\"widgets\/AnimatedSwitcher\/switchInCurve.html\">switchInCurve<\/a> will be run in reverse from that point instead of\njumping to the corresponding point on <a href=\"widgets\/AnimatedSwitcher\/switchOutCurve.html\">switchOutCurve<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve switchOutCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/AnimatedSwitcher\/switchOutCurve.html",
            "name": "switchOutCurve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "memberOf": "widgets.AnimatedSwitcher",
            "params": []
        }
    ]
}