{
    "name": "record_replay.RecordingFileSystem",
    "extends": [
        "file.FileSystem",
        "dart:core.Object"
    ],
    "memberOf": "record_replay",
    "events": [],
    "methods": [
        {
            "name": "RecordingFileSystem",
            "type": "",
            "desc": "<p>Creates a new <code>RecordingFileSystem<\/code>.<\/p>\n<p>Invocations will be recorded and forwarded to the specified <code>delegate<\/code>\nfile system.<\/p>\n<p>The recording will be serialized to the specified <code>destination<\/code> directory\n(only when <code>flush<\/code> is called on this file system's <a href=\"package-file_record_replay\/RecordingFileSystem\/recording.html\">recording<\/a>).<\/p>\n<p>If <code>stopwatch<\/code> is specified, it will be assumed to have already been\nstarted by the caller, and it will be used to record timestamps on each\nrecorded invocation. If <code>stopwatch<\/code> is unspecified (or <code>null<\/code>), a new\nstopwatch will be created and started immediately to record these\ntimestamps.<\/p>\n    ",
            "static": false,
            "memberOf": "record_replay.RecordingFileSystem",
            "sig": "",
            "params": [
                {
                    "name": "delegate",
                    "type": "file.FileSystem",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "destination",
                    "type": "file.Directory",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "stopwatch",
                    "type": "dart:core.Stopwatch",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "package-file_record_replay\/RecordingFileSystem\/RecordingFileSystem.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RecordingFileSystem({\n  @required FileSystem delegate,\n  @required Directory destination,\n  Stopwatch stopwatch,\n}) =&gt;\n    new RecordingFileSystemImpl(delegate, destination, stopwatch);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "delegate",
            "type": "file.FileSystem",
            "types": [],
            "desc": "<p>The file system to which invocations will be forwarded upon recording.<\/p>\n        ",
            "memberOf": "record_replay.RecordingFileSystem",
            "isConstant": false,
            "href": "package-file_record_replay\/RecordingFileSystem\/delegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSystem get delegate;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "recording",
            "type": "record_replay.LiveRecording",
            "types": [],
            "desc": "<p>The recording generated by invocations on this file system.<\/p>\n<p>The recording provides access to the invocation events that have been\nrecorded thus far, as well as the ability to flush them to disk.<\/p>\n        ",
            "memberOf": "record_replay.RecordingFileSystem",
            "isConstant": false,
            "href": "package-file_record_replay\/RecordingFileSystem\/recording.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LiveRecording get recording;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "stopwatch",
            "type": "dart:core.Stopwatch",
            "types": [],
            "desc": "<p>The stopwatch used to record timestamps on invocation events.<\/p>\n<p>Timestamps will be recorded before the delegate is invoked (not after\nthe delegate returns).<\/p>\n        ",
            "memberOf": "record_replay.RecordingFileSystem",
            "isConstant": false,
            "href": "package-file_record_replay\/RecordingFileSystem\/stopwatch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stopwatch get stopwatch;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-file_record_replay\/RecordingFileSystem-class.html",
    "desc": "<p>File system that records invocations for later playback in tests.<\/p>\n<p>This will record all invocations (methods, property getters, and property\nsetters) that occur on it, in an opaque format that can later be used in\n<a href=\"package-file_record_replay\/ReplayFileSystem-class.html\">ReplayFileSystem<\/a>. All activity in the <a href=\"package-file_file\/File-class.html\">File<\/a>, <a href=\"package-file_file\/Directory-class.html\">Directory<\/a>, <a href=\"package-file_file\/Link-class.html\">Link<\/a>,\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>, and <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> instances returned from this API will also\nbe recorded.<\/p>\n<p>This class is intended for use in tests, where you would otherwise have to\nset up complex mocks or fake file systems. With this class, the process is\nas follows:<\/p>\n<ul>\n<li>You record the file system activity during a real run of your program\nby injecting a <code>RecordingFileSystem<\/code> that delegates to your real file\nsystem.<\/li>\n<li>You serialize that recording to disk as your program finishes.<\/li>\n<li>You use that recording in tests to create a mock file system that knows\nhow to respond to the exact invocations your program makes. Any\ninvocations that aren't in the recording will throw, and you can make\nassertions in your tests about which methods were invoked and in what\norder.<\/li>\n<\/ul>\n<p><em>Implementation note<\/em>: this class uses <a href=\"dart-core\/Object\/noSuchMethod.html\">noSuchMethod<\/a> to dynamically handle\ninvocations. As a result, method references on objects herein will not pass\n<code>is<\/code> checks or checked-mode checks on type. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">typedef FileStat StatSync(String path);\nFileSystem fs = new RecordingFileSystem(delegate: delegate, destination: dir);\n\nStatSync method = fs.statSync;     \/\/ Will fail in checked-mode\nfs.statSync is StatSync            \/\/ Will return false\nfs.statSync is Function            \/\/ Will return false\n\ndynamic method2 = fs.statSync;     \/\/ OK\nFileStat stat = method2('\/path');  \/\/ OK\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul><li><a href=\"package-file_record_replay\/ReplayFileSystem-class.html\">ReplayFileSystem<\/a><\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RecordingFileSystem"
}