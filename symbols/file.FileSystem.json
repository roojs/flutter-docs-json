{
    "name": "file.FileSystem",
    "extends": [],
    "memberOf": "file",
    "events": [],
    "methods": [
        {
            "name": "FileSystem",
            "type": "",
            "desc": "<p>Creates a new <code>FileSystem<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-file_file\/FileSystem\/FileSystem.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FileSystem();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "directory",
            "type": "file.Directory",
            "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Directory-class.html\">Directory<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/directory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory directory(dynamic path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "file",
            "type": "file.File",
            "desc": "<p>Returns a reference to a <a href=\"package-file_file\/File-class.html\">File<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/file.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File file(dynamic path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getPath",
            "type": "dart:core.String",
            "desc": "<p>Gets the string path represented by the specified generic <code>path<\/code>.<\/p>\n<p><code>path<\/code> may be a <a href=\"dart-io\/FileSystemEntity-class.html\">io.FileSystemEntity<\/a>, a <a href=\"dart-core\/String-class.html\">String<\/a>, or a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/getPath.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getPath(dynamic path) {\n  if (path is io.FileSystemEntity) {\n    return path.path;\n  } else if (path is String) {\n    return path;\n  } else if (path is Uri) {\n    return this.path.fromUri(path);\n  } else {\n    throw new ArgumentError('Invalid type for \"path\": ${path?.runtimeType}');\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "identical",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Checks whether two paths refer to the same object in the\nfile system. Returns a <a href=\"dart-async\/Future-class.html\">Future&lt;bool&gt;<\/a> that completes with the result.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Completes the returned Future with an error if one of the paths points\nto an object that does not exist.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/identical.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; identical(String path1, String path2);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        },
        {
            "name": "identicalSync",
            "type": "dart:core.bool",
            "desc": "<p>Synchronously checks whether two paths refer to the same object in the\nfile system.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Throws an error if one of the paths points to an object that does not\nexist.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/identicalSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool identicalSync(String path1, String path2);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isDirectory",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/DIRECTORY-constant.html\">io.FileSystemEntityType.DIRECTORY<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/isDirectory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; isDirectory(String path) async =&gt;\n    await type(path) == io.FileSystemEntityType.directory;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        },
        {
            "name": "isDirectorySync",
            "type": "dart:core.bool",
            "desc": "<p>Synchronously checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/DIRECTORY-constant.html\">io.FileSystemEntityType.DIRECTORY<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/isDirectorySync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isDirectorySync(String path) =&gt;\n    typeSync(path) == io.FileSystemEntityType.directory;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isFile",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/FILE-constant.html\">io.FileSystemEntityType.FILE<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/isFile.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; isFile(String path) async =&gt;\n    await type(path) == io.FileSystemEntityType.file;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        },
        {
            "name": "isFileSync",
            "type": "dart:core.bool",
            "desc": "<p>Synchronously checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/FILE-constant.html\">io.FileSystemEntityType.FILE<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/isFileSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isFileSync(String path) =&gt;\n    typeSync(path) == io.FileSystemEntityType.file;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isLink",
            "type": "dart:async.Future<dart:core.bool>",
            "desc": "<p>Checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/isLink.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; isLink(String path) async =&gt;\n    await type(path) == io.FileSystemEntityType.link;<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:core.bool"
            ]
        },
        {
            "name": "isLinkSync",
            "type": "dart:core.bool",
            "desc": "<p>Synchronously checks if <a href=\"type\"><code>type(path)<\/code><\/a> returns\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/isLinkSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isLinkSync(String path) =&gt;\n    typeSync(path) == io.FileSystemEntityType.link;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "link",
            "type": "file.Link",
            "desc": "<p>Returns a reference to a <a href=\"package-file_file\/Link-class.html\">Link<\/a> at <code>path<\/code>.<\/p>\n<p><code>path<\/code> can be either a <code>`String`<\/code>, a <code>`Uri`<\/code>, or a <code>`FileSystemEntity`<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/link.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Link link(dynamic path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "stat",
            "type": "dart:async.Future<dart:io.FileStat>",
            "desc": "<p>Asynchronously calls the operating system's stat() function on <code>path<\/code>.\nReturns a Future which completes with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing\nthe data returned by stat().\nIf the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with\n.type set to FileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/stat.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;io.FileStat&gt; stat(String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.FileStat"
            ]
        },
        {
            "name": "statSync",
            "type": "dart:io.FileStat",
            "desc": "<p>Calls the operating system's stat() function on <code>path<\/code>.\nReturns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().\nIf the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.NOT_FOUND and the other fields invalid.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/statSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">io.FileStat statSync(String path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "type",
            "type": "dart:async.Future<dart:io.FileSystemEntityType>",
            "desc": "<p>Finds the type of file system object that a <code>path<\/code> points to. Returns\na Future<filesystementitytype> that completes with the result.<\/filesystementitytype><\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "followLinks",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/type.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;io.FileSystemEntityType&gt; type(String path, {bool followLinks: true});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.FileSystemEntityType"
            ]
        },
        {
            "name": "typeSync",
            "type": "dart:io.FileSystemEntityType",
            "desc": "<p>Syncronously finds the type of file system object that a <code>path<\/code> points\nto. Returns a <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a>.<\/p>\n<p><a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/LINK-constant.html\">io.FileSystemEntityType.LINK<\/a> will only be returned if <code>followLinks<\/code> is\n<code>false<\/code>, and <code>path<\/code> points to a link<\/p>\n<p>If the <code>path<\/code> does not point to a file system object or an error occurs\nthen <a class=\"deprecated\" href=\"dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html\">io.FileSystemEntityType.NOT_FOUND<\/a> is returned.<\/p>\n    ",
            "static": false,
            "memberOf": "file.FileSystem",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "followLinks",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_file\/FileSystem\/typeSync.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">io.FileSystemEntityType typeSync(String path, {bool followLinks: true});<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "currentDirectory",
            "type": "file.Directory",
            "types": [],
            "desc": "<p>Creates a directory object pointing to the current working directory.<\/p>\n        ",
            "memberOf": "file.FileSystem",
            "isConstant": false,
            "href": "package-file_file\/FileSystem\/currentDirectory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get currentDirectory;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isWatchSupported",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Tests if <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a> is supported on the current system.<\/p>\n        ",
            "memberOf": "file.FileSystem",
            "isConstant": false,
            "href": "package-file_file\/FileSystem\/isWatchSupported.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isWatchSupported;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "path",
            "type": "path.Context",
            "types": [],
            "desc": "<p>An object for manipulating paths in this file system.<\/p>\n        ",
            "memberOf": "file.FileSystem",
            "isConstant": false,
            "href": "package-file_file\/FileSystem\/path.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">p.Context get path;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "systemTempDirectory",
            "type": "file.Directory",
            "types": [],
            "desc": "<p>Gets the system temp directory.<\/p>\n<p>It is left to file system implementations to decide how to define the\n\"system temp directory\".<\/p>\n        ",
            "memberOf": "file.FileSystem",
            "isConstant": false,
            "href": "package-file_file\/FileSystem\/systemTempDirectory.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get systemTempDirectory;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "chroot.ChrootFileSystem",
        "file.ForwardingFileSystem",
        "local.LocalFileSystem",
        "record_replay.RecordingFileSystem",
        "record_replay.ReplayFileSystem"
    ],
    "realImplementors": [
        "chroot.ChrootFileSystem"
    ],
    "cn": [],
    "href": "package-file_file\/FileSystem-class.html",
    "desc": "<p>A generic representation of a file system.<\/p>\n<p>Note that this class uses <code>dart:io<\/code> only inasmuch as it deals in the types\nexposed by the <code>dart:io<\/code> library. Subclasses should document their level of\ndependence on the library (and the associated implications of using that\nimplementation in the browser).<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FileSystem"
}