{
    "desc": "<p>Scroll physics for environments that prevent the scroll offset from reaching\nbeyond the bounds of the content.<\/p>\n<p>This is the behavior typically seen on Android.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ScrollConfiguration-class.html\">ScrollConfiguration<\/a>, which uses this to provide the default\nscroll behavior on Android.<\/li>\n<li>\n<a href=\"widgets\/BouncingScrollPhysics-class.html\">BouncingScrollPhysics<\/a>, which is the analogous physics for iOS' bouncing\nbehavior.<\/li>\n<li>\n<a href=\"widgets\/GlowingOverscrollIndicator-class.html\">GlowingOverscrollIndicator<\/a>, which is used by <a href=\"widgets\/ScrollConfiguration-class.html\">ScrollConfiguration<\/a> to\nprovide the glowing effect that is usually found with this clamping effect\non Android. When using a <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>, the <a href=\"widgets\/GlowingOverscrollIndicator-class.html\">GlowingOverscrollIndicator<\/a>'s\nglow color is specified to use <a href=\"material\/ThemeData\/accentColor.html\">ThemeData.accentColor<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/ClampingScrollPhysics-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ClampingScrollPhysics",
    "shortname": "ClampingScrollPhysics",
    "extends": [
        "widgets.ScrollPhysics",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates scroll physics that prevent the scroll offset from exceeding the\nbounds of the content..<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ClampingScrollPhysics({ ScrollPhysics parent }) : super(parent: parent);<\/code><\/pre>\n    ",
            "href": "widgets\/ClampingScrollPhysics\/ClampingScrollPhysics.html",
            "isDeprecated": false,
            "type": "",
            "name": "ClampingScrollPhysics",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ClampingScrollPhysics",
            "params": [
                {
                    "name": "parent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Determines the overscroll by applying the boundary conditions.<\/p>\n<p>Called by <a href=\"widgets\/ClampingScrollPhysics\/applyBoundaryConditions.html\">ScrollPosition.applyBoundaryConditions<\/a>, which is called by\n<a href=\"widgets\/ScrollPosition\/setPixels.html\">ScrollPosition.setPixels<\/a> just before the <a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a> value\nis updated, to determine how much of the offset is to be clamped off and\nsent to <a href=\"widgets\/ScrollPosition\/didOverscrollBy.html\">ScrollPosition.didOverscrollBy<\/a>.<\/p>\n<p>The <code>value<\/code> argument is guaranteed to not equal the <a href=\"widgets\/ScrollMetrics\/pixels.html\">ScrollMetrics.pixels<\/a>\nof the <code>position<\/code> argument when this is called.<\/p>\n<p>It is possible for this method to be called when the <code>position<\/code> describes\nan already-out-of-bounds position. In that case, the boundary conditions\nshould usually only prevent a further increase in the extent to which the\nposition is out of bounds, allowing a decrease to be applied successfully,\nso that (for instance) an animation can smoothly snap an out of bounds\nposition to the bounds. See <a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a>.<\/p>\n<p>This method must not clamp parts of the offset that are entirely within\nthe bounds described by the given <code>position<\/code>.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n<h2 id=\"examples\">Examples<\/h2>\n<p><a href=\"widgets\/BouncingScrollPhysics-class.html\">BouncingScrollPhysics<\/a> returns zero. In other words, it allows scrolling\npast the boundary unhindered.<\/p>\n<p><a href=\"widgets\/ClampingScrollPhysics-class.html\">ClampingScrollPhysics<\/a> returns the amount by which the value is beyond\nthe position or the boundary, whichever is furthest from the content. In\nother words, it disallows scrolling past the boundary, but allows\nscrolling back from being overscrolled, if for some reason the position\nends up overscrolled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble applyBoundaryConditions(ScrollMetrics position, double value) {\n  assert(() {\n    if (value == position.pixels) {\n      throw FlutterError(\n        '$runtimeType.applyBoundaryConditions() was called redundantly.\\n'\n        'The proposed new position, $value, is exactly equal to the current position of the '\n        'given ${position.runtimeType}, ${position.pixels}.\\n'\n        'The applyBoundaryConditions method should only be called when the value is '\n        'going to actually change the pixels, otherwise it is redundant.\\n'\n        'The physics object in question was:\\n'\n        '  $this\\n'\n        'The position object in question was:\\n'\n        '  $position\\n'\n      );\n    }\n    return true;\n  }());\n  if (value &lt; position.pixels &amp;&amp; position.pixels &lt;= position.minScrollExtent) \/\/ underscroll\n    return value - position.pixels;\n  if (position.maxScrollExtent &lt;= position.pixels &amp;&amp; position.pixels &lt; value) \/\/ overscroll\n    return value - position.pixels;\n  if (value &lt; position.minScrollExtent &amp;&amp; position.minScrollExtent &lt; position.pixels) \/\/ hit top edge\n    return value - position.minScrollExtent;\n  if (position.pixels &lt; position.maxScrollExtent &amp;&amp; position.maxScrollExtent &lt; value) \/\/ hit bottom edge\n    return value - position.maxScrollExtent;\n  return 0.0;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ClampingScrollPhysics\/applyBoundaryConditions.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "applyBoundaryConditions",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ClampingScrollPhysics",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> where the <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> has been replaced with the <code>ancestor<\/code>.<\/p>\n<p>If this scroll physics object already has a parent, then this method\nis applied recursively and ancestor will appear at the end of the\nexisting chain of parents.<\/p>\n<p>The returned object will combine some of the behaviors from this\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> instance and some of the behaviors from <code>ancestor<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPhysics\/buildParent.html\">buildParent<\/a>, a utility method that's often used to define <a href=\"widgets\/ClampingScrollPhysics\/applyTo.html\">applyTo<\/a>\nmethods for ScrollPhysics subclasses.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nClampingScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return ClampingScrollPhysics(parent: buildParent(ancestor));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ClampingScrollPhysics\/applyTo.html",
            "isDeprecated": false,
            "type": "widgets.ClampingScrollPhysics",
            "name": "applyTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ClampingScrollPhysics",
            "params": [
                {
                    "name": "ancestor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Returns a simulation for ballistic scrolling starting from the given\nposition with the given velocity.<\/p>\n<p>This is used by <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> in the\n<a href=\"widgets\/ScrollPositionWithSingleContext\/goBallistic.html\">ScrollPositionWithSingleContext.goBallistic<\/a> method. If the result\nis non-null, <a href=\"widgets\/ScrollPositionWithSingleContext-class.html\">ScrollPositionWithSingleContext<\/a> will begin a\n<a href=\"widgets\/BallisticScrollActivity-class.html\">BallisticScrollActivity<\/a> with the returned value. Otherwise, it will\nbegin an idle activity instead.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSimulation createBallisticSimulation(ScrollMetrics position, double velocity) {\n  final Tolerance tolerance = this.tolerance;\n  if (position.outOfRange) {\n    double end;\n    if (position.pixels &gt; position.maxScrollExtent)\n      end = position.maxScrollExtent;\n    if (position.pixels &lt; position.minScrollExtent)\n      end = position.minScrollExtent;\n    assert(end != null);\n    return ScrollSpringSimulation(\n      spring,\n      position.pixels,\n      end,\n      math.min(0.0, velocity),\n      tolerance: tolerance,\n    );\n  }\n  if (velocity.abs() &lt; tolerance.velocity)\n    return null;\n  if (velocity &gt; 0.0 &amp;&amp; position.pixels &gt;= position.maxScrollExtent)\n    return null;\n  if (velocity &lt; 0.0 &amp;&amp; position.pixels &lt;= position.minScrollExtent)\n    return null;\n  return ClampingScrollSimulation(\n    position: position.pixels,\n    velocity: velocity,\n    tolerance: tolerance,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ClampingScrollPhysics\/createBallisticSimulation.html",
            "isDeprecated": false,
            "type": "physics.Simulation",
            "name": "createBallisticSimulation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ClampingScrollPhysics",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.ScrollMetrics"
                },
                {
                    "name": "velocity",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": []
}