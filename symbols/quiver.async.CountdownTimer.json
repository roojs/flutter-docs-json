{
    "desc": "<p>A simple countdown timer that fires events in regular increments until a\nduration has passed.<\/p>\n<p>CountdownTimer implements <a href=\"dart-async\/Stream-class.html\">Stream<\/a> and sends itself as the event. From the\ntimer you can get the <a href=\"quiver.async\/CountdownTimer\/remaining.html\">remaining<\/a> and <a href=\"quiver.async\/CountdownTimer\/elapsed.html\">elapsed<\/a> time, or <a href=\"quiver.async\/CountdownTimer\/cancel.html\">cancel<\/a> the\ntimer.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "quiver.async\/CountdownTimer-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "quiver.async",
    "name": "quiver.async.CountdownTimer",
    "shortname": "CountdownTimer",
    "extends": [
        "quiver.async.CountdownTimer",
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "quiver.async.CountdownTimer"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new <a href=\"quiver.async\/CountdownTimer-class.html\">CountdownTimer<\/a> that fires events in increments of\n<code>increment<\/code>, until the <code>duration<\/code> has passed.<\/p>\n<p><code>stopwatch<\/code> is for testing purposes. If you're using CountdownTimer and\nneed to control time in a test, pass a mock or a fake. See <a href=\"quiver.testing.async\/FakeAsync-class.html\">FakeAsync<\/a>\nand <a href=\"quiver.testing.time\/FakeStopwatch-class.html\">FakeStopwatch<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CountdownTimer(Duration duration, Duration increment, {Stopwatch stopwatch})\n    : _duration = duration,\n      increment = increment,\n      _stopwatch = stopwatch == null ? new Stopwatch() : stopwatch,\n      _controller =\n          new StreamController&lt;CountdownTimer&gt;.broadcast(sync: true) {\n  _timer = new Timer.periodic(increment, _tick);\n  _stopwatch.start();\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/CountdownTimer\/CountdownTimer.html",
            "isDeprecated": false,
            "type": "",
            "name": "CountdownTimer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": [
                {
                    "name": "duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "increment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "stopwatch",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Stopwatch"
                }
            ]
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">cancel() {\n  _stopwatch.stop();\n  _timer.cancel();\n  _controller.close();\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/CountdownTimer\/cancel.html",
            "isDeprecated": false,
            "type": "<dynamic>",
            "name": "cancel",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": []
        },
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;CountdownTimer&gt; listen(void onData(CountdownTimer event),\n        {Function onError, void onDone(), bool cancelOnError}) =&gt;\n    _controller.stream.listen(onData, onError: onError, onDone: onDone);<\/code><\/pre>\n    ",
            "href": "quiver.async\/CountdownTimer\/listen.html",
            "isDeprecated": false,
            "type": "dart:async.StreamSubscription<quiver.async.CountdownTimer>",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "quiver.async.CountdownTimer"
                },
                {
                    "name": "onDone",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get elapsed =&gt; _stopwatch.elapsed;<\/code><\/pre>\n        ",
            "href": "quiver.async\/CountdownTimer\/elapsed.html",
            "name": "elapsed",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": []
        },
        {
            "desc": "<p>The duration between timer events.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration increment\n\n<\/code><\/pre>\n        ",
            "href": "quiver.async\/CountdownTimer\/increment.html",
            "name": "increment",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": []
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRunning =&gt; _stopwatch.isRunning;<\/code><\/pre>\n        ",
            "href": "quiver.async\/CountdownTimer\/isRunning.html",
            "name": "isRunning",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": []
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get remaining =&gt; _duration - _stopwatch.elapsed;<\/code><\/pre>\n        ",
            "href": "quiver.async\/CountdownTimer\/remaining.html",
            "name": "remaining",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.CountdownTimer",
            "params": []
        }
    ]
}