{
    "name": "widgets.AlwaysScrollableScrollPhysics",
    "extends": [
        "widgets.ScrollPhysics",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "AlwaysScrollableScrollPhysics",
            "type": "",
            "desc": "<p>Creates scroll physics that always lets the user scroll.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AlwaysScrollableScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "parent",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/AlwaysScrollableScrollPhysics\/AlwaysScrollableScrollPhysics.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlwaysScrollableScrollPhysics({ ScrollPhysics parent }) : super(parent: parent);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "applyTo",
            "type": "widgets.AlwaysScrollableScrollPhysics",
            "desc": "<p>If <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> is null then return a <a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> where the <a href=\"widgets\/ScrollPhysics\/parent.html\">parent<\/a> has been replaced with the <code>ancestor<\/code>.<\/p>\n<p>If this scroll physics object already has a parent, then this method\nis applied recursively and ancestor will appear at the end of the\nexisting chain of parents.<\/p>\n<p>The returned object will combine some of the behaviors from this\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a> instance and some of the behaviors from <code>ancestor<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPhysics\/buildParent.html\">buildParent<\/a>, a utility method that's often used to define <a href=\"widgets\/AlwaysScrollableScrollPhysics\/applyTo.html\">applyTo<\/a>\nmethods for ScrollPhysics subclasses.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.AlwaysScrollableScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "ancestor",
                    "type": "widgets.ScrollPhysics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/AlwaysScrollableScrollPhysics\/applyTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlwaysScrollableScrollPhysics applyTo(ScrollPhysics ancestor) {\n  return AlwaysScrollableScrollPhysics(parent: buildParent(ancestor));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "shouldAcceptUserOffset",
            "type": "dart:core.bool",
            "desc": "<p>Whether the scrollable should let the user adjust the scroll offset, for\nexample by dragging.<\/p>\n<p>By default, the user can manipulate the scroll offset if, and only if,\nthere is actually content outside the viewport to reveal.<\/p>\n<p>The given <code>position<\/code> is only valid during this method call. Do not keep a\nreference to it to use later, as the values may update, may not update, or\nmay update to reflect an entirely unrelated scrollable.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.AlwaysScrollableScrollPhysics",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "widgets.ScrollMetrics",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/AlwaysScrollableScrollPhysics\/shouldAcceptUserOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool shouldAcceptUserOffset(ScrollMetrics position) =&gt; true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/AlwaysScrollableScrollPhysics-class.html",
    "desc": "<p>Scroll physics that always lets the user scroll.<\/p>\n<p>On Android, overscrolls will be clamped by default and result in an\noverscroll glow. On iOS, overscrolls will load a spring that will return\nthe scroll view to its normal range when released.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ScrollPhysics-class.html\">ScrollPhysics<\/a>, which can be used instead of this class when the default\nbehavior is desired instead.<\/li>\n<li>\n<a href=\"widgets\/BouncingScrollPhysics-class.html\">BouncingScrollPhysics<\/a>, which provides the bouncing overscroll behavior\nfound on iOS.<\/li>\n<li>\n<a href=\"widgets\/ClampingScrollPhysics-class.html\">ClampingScrollPhysics<\/a>, which provides the clamping overscroll behavior\nfound on Android.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AlwaysScrollableScrollPhysics"
}