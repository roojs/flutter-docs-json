{
    "desc": "<p>A delegate that controls the layout of multiple children.<\/p>\n<p>Delegates must be idempotent. Specifically, if two delegates are equal, then\nthey must produce the same layout. To change the layout, replace the\ndelegate with a different instance whose <a href=\"rendering\/MultiChildLayoutDelegate\/shouldRelayout.html\">shouldRelayout<\/a> returns true when\ngiven the previous instance.<\/p>\n<p>Override <a href=\"rendering\/MultiChildLayoutDelegate\/getSize.html\">getSize<\/a> to control the overall size of the layout. The size of\nthe layout cannot depend on layout properties of the children.<\/p>\n<p>Override <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> to size and position the children. An\nimplementation of <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> must call <a href=\"rendering\/MultiChildLayoutDelegate\/layoutChild.html\">layoutChild<\/a> exactly once for\neach child, but it may call <a href=\"rendering\/MultiChildLayoutDelegate\/layoutChild.html\">layoutChild<\/a> on children in an arbitrary order.\nTypically a delegate will use the size returned from <a href=\"rendering\/MultiChildLayoutDelegate\/layoutChild.html\">layoutChild<\/a> on one\nchild to determine the constraints for <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> on another child or\nto determine the offset for <a href=\"rendering\/MultiChildLayoutDelegate\/positionChild.html\">positionChild<\/a> for that child or another child.<\/p>\n<p>Override <a href=\"rendering\/MultiChildLayoutDelegate\/shouldRelayout.html\">shouldRelayout<\/a> to determine when the layout of the children needs\nto be recomputed when the delegate changes.<\/p>\n<p>Used with <a href=\"widgets\/CustomMultiChildLayout-class.html\">CustomMultiChildLayout<\/a>, the widget for the\n<a href=\"rendering\/RenderCustomMultiChildLayoutBox-class.html\">RenderCustomMultiChildLayoutBox<\/a> render object.<\/p>\n<p>Each child must be wrapped in a <a href=\"widgets\/LayoutId-class.html\">LayoutId<\/a> widget to assign the id that\nidentifies it to the delegate. The <a href=\"widgets\/LayoutId\/id.html\">LayoutId.id<\/a> needs to be unique among\nthe children that the <a href=\"widgets\/CustomMultiChildLayout-class.html\">CustomMultiChildLayout<\/a> manages.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nBelow is an example implementation of <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> that causes one widget\n(the follower) to be the same size as another (the leader):\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">\/\/ Define your own slot numbers, depending upon the id assigned by LayoutId.\n\/\/ Typical usage is to define an enum like the one below, and use those\n\/\/ values as the ids.\nenum _Slot {\n  leader,\n  follower,\n}\n\nclass FollowTheLeader extends MultiChildLayoutDelegate {\n  @override\n  void performLayout(Size size) {\n    Size leaderSize = Size.zero;\n\n    if (hasChild(_Slot.leader)) {\n      leaderSize = layoutChild(_Slot.leader, BoxConstraints.loose(size));\n      positionChild(_Slot.leader, Offset.zero);\n    }\n\n    if (hasChild(_Slot.follower)) {\n      layoutChild(_Slot.follower, BoxConstraints.tight(leaderSize));\n      positionChild(_Slot.follower, Offset(size.width - leaderSize.width,\n          size.height - leaderSize.height));\n    }\n  }\n\n  @override\n  bool shouldRelayout(MultiChildLayoutDelegate oldDelegate) =&gt; false;\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The delegate gives the leader widget loose constraints, which means the\nchild determines what size to be (subject to fitting within the given size).\nThe delegate then remembers the size of that child and places it in the\nupper left corner.<\/p>\n<p>The delegate then gives the follower widget tight constraints, forcing it to\nmatch the size of the leader widget. The delegate then places the follower\nwidget in the bottom right corner.<\/p>\n<p>The leader and follower widget will paint in the order they appear in the\nchild list, regardless of the order in which <a href=\"rendering\/MultiChildLayoutDelegate\/layoutChild.html\">layoutChild<\/a> is called on\nthem.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "rendering\/MultiChildLayoutDelegate-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.MultiChildLayoutDelegate",
    "shortname": "MultiChildLayoutDelegate",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": null,
            "href": "rendering\/MultiChildLayoutDelegate\/MultiChildLayoutDelegate.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": []
        },
        {
            "desc": "<p>Override this method to return the size of this object given the\nincoming constraints.<\/p>\n<p>The size cannot reflect the sizes of the children. If this layout has a\nfixed width or height the returned size can reflect that; the size will be\nconstrained to the given constraints.<\/p>\n<p>By default, attempts to size the box to the biggest size\npossible given the constraints.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size getSize(BoxConstraints constraints) =&gt; constraints.biggest;<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/getSize.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": [
                {
                    "name": "constraints",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.BoxConstraints"
                }
            ]
        },
        {
            "desc": "<p>True if a non-null LayoutChild was provided for the specified id.<\/p>\n<p>Call this from the <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> or <a href=\"rendering\/MultiChildLayoutDelegate\/getSize.html\">getSize<\/a> methods to\ndetermine which children are available, if the child list might\nvary.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasChild(Object childId) =&gt; _idToChild[childId] != null;<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/hasChild.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": [
                {
                    "name": "childId",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Ask the child to update its layout within the limits specified by\nthe constraints parameter. The child's size is returned.<\/p>\n<p>Call this from your <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> function to lay out each\nchild. Every child must be laid out using this function exactly\nonce each time the <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> function is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size layoutChild(Object childId, BoxConstraints constraints) {\n  final RenderBox child = _idToChild[childId];\n  assert(() {\n    if (child == null) {\n      throw FlutterError(\n        'The $this custom multichild layout delegate tried to lay out a non-existent child.\\n'\n        'There is no child with the id \"$childId\".'\n      );\n    }\n    if (!_debugChildrenNeedingLayout.remove(child)) {\n      throw FlutterError(\n        'The $this custom multichild layout delegate tried to lay out the child with id \"$childId\" more than once.\\n'\n        'Each child must be laid out exactly once.'\n      );\n    }\n    try {\n      assert(constraints.debugAssertIsValid(isAppliedConstraint: true));\n    } on AssertionError catch (exception) {\n      throw FlutterError(\n        'The $this custom multichild layout delegate provided invalid box constraints for the child with id \"$childId\".\\n'\n        '$exception\\n'\n        'The minimum width and height must be greater than or equal to zero.\\n'\n        'The maximum width must be greater than or equal to the minimum width.\\n'\n        'The maximum height must be greater than or equal to the minimum height.'\n      );\n    }\n    return true;\n  }());\n  child.layout(constraints, parentUsesSize: true);\n  return child.size;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/layoutChild.html",
            "isDeprecated": "0",
            "type": "dart:ui.Size",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": [
                {
                    "name": "childId",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "constraints",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.BoxConstraints"
                }
            ]
        },
        {
            "desc": "<p>Override this method to lay out and position all children given this\nwidget's size.<\/p>\n<p>This method must call <a href=\"rendering\/MultiChildLayoutDelegate\/layoutChild.html\">layoutChild<\/a> for each child. It should also specify\nthe final position of each child with <a href=\"rendering\/MultiChildLayoutDelegate\/positionChild.html\">positionChild<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void performLayout(Size size);<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/performLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": [
                {
                    "name": "size",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Specify the child's origin relative to this origin.<\/p>\n<p>Call this from your <a href=\"rendering\/MultiChildLayoutDelegate\/performLayout.html\">performLayout<\/a> function to position each\nchild. If you do not call this for a child, its position will\nremain unchanged. Children initially have their position set to\n(0,0), i.e. the top left of the <a href=\"rendering\/RenderCustomMultiChildLayoutBox-class.html\">RenderCustomMultiChildLayoutBox<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void positionChild(Object childId, Offset offset) {\n  final RenderBox child = _idToChild[childId];\n  assert(() {\n    if (child == null) {\n      throw FlutterError(\n        'The $this custom multichild layout delegate tried to position out a non-existent child:\\n'\n        'There is no child with the id \"$childId\".'\n      );\n    }\n    if (offset == null) {\n      throw FlutterError(\n        'The $this custom multichild layout delegate provided a null position for the child with id \"$childId\".'\n      );\n    }\n    return true;\n  }());\n  final MultiChildLayoutParentData childParentData = child.parentData;\n  childParentData.offset = offset;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/positionChild.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": [
                {
                    "name": "childId",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Override this method to return true when the children need to be\nlaid out.<\/p>\n<p>This should compare the fields of the current delegate and the given\n<code>oldDelegate<\/code> and return true if the fields are such that the layout would\nbe different.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool shouldRelayout(covariant MultiChildLayoutDelegate oldDelegate);<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/shouldRelayout.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": [
                {
                    "name": "oldDelegate",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.MultiChildLayoutDelegate"
                }
            ]
        },
        {
            "desc": "<p>Override this method to include additional information in the\ndebugging data printed by <a href=\"rendering\/debugDumpRenderTree.html\">debugDumpRenderTree<\/a> and friends.<\/p>\n<p>By default, returns the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> of the class.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "href": "rendering\/MultiChildLayoutDelegate\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.MultiChildLayoutDelegate",
            "params": []
        }
    ],
    "props": []
}