{
    "name": "dart:collection.LinkedList",
    "extends": [
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "memberOf": "dart:collection",
    "events": [],
    "methods": [
        {
            "name": "LinkedList",
            "type": "",
            "desc": "<p>Construct a new empty linked list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-collection\/LinkedList\/LinkedList.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">LinkedList();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "",
            "desc": "<p>Add <code>entry<\/code> to the end of the linked list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [
                {
                    "name": "entry",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/LinkedList\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E entry) {\n  _insertBefore(_first, entry, updateFirst: false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addAll",
            "type": "",
            "desc": "<p>Add <code>entries<\/code> to the end of the linked list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [
                {
                    "name": "entries",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/LinkedList\/addAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; entries) {\n  entries.forEach(add);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addFirst",
            "type": "",
            "desc": "<p>Add <code>entry<\/code> to the beginning of the linked list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [
                {
                    "name": "entry",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/LinkedList\/addFirst.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E entry) {\n  _insertBefore(_first, entry, updateFirst: true);\n  _first = entry;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "clear",
            "type": "",
            "desc": "<p>Remove all elements from this linked list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/LinkedList\/clear.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _modificationCount++;\n  if (isEmpty) return;\n\n  E next = _first;\n  do {\n    E entry = next;\n    next = entry._next;\n    entry._next = entry._previous = entry._list = null;\n  } while (!identical(next, _first));\n\n  _first = null;\n  _length = 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "forEach",
            "type": "",
            "desc": "<p>Call <code>action<\/code> with each entry in this linked list.<\/p>\n<p>It's an error if <code>action<\/code> modify the linked list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [
                {
                    "name": "entry",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "entry",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/LinkedList\/forEach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void action(E entry)) {\n  int modificationCount = _modificationCount;\n  if (isEmpty) return;\n\n  E current = _first;\n  do {\n    action(current);\n    if (modificationCount != _modificationCount) {\n      throw ConcurrentModificationError(this);\n    }\n    current = current._next;\n  } while (!identical(current, _first));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "remove",
            "type": "dart:core.bool",
            "desc": "<p>Remove <code>entry<\/code> from the linked list.<\/p>\n<p>Returns false and does nothing if <code>entry<\/code> is not in this linked list.<\/p>\n<p>This is equivalent to calling <code>entry.unlink()<\/code> if the entry is in this\nlist.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedList",
            "sig": "",
            "params": [
                {
                    "name": "entry",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/LinkedList\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(E entry) {\n  if (entry._list != this) return false;\n  _unlink(entry); \/\/ Unlink will decrement length.\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "first",
            "type": "",
            "types": [],
            "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedList",
            "isConstant": false,
            "href": "dart-collection\/LinkedList\/first.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  if (isEmpty) {\n    throw StateError('No such element');\n  }\n  return _first;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedList",
            "isConstant": false,
            "href": "dart-collection\/LinkedList\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _length == 0;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iterator",
            "type": "dart:core.Iterator",
            "types": [],
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedList",
            "isConstant": false,
            "href": "dart-collection\/LinkedList\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; _LinkedListIterator&lt;E&gt;(this);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "last",
            "type": "",
            "types": [],
            "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
            "memberOf": "dart:collection.LinkedList",
            "isConstant": false,
            "href": "dart-collection\/LinkedList\/last.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  if (isEmpty) {\n    throw StateError('No such element');\n  }\n  return _first._previous;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/LinkedList-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedList",
            "isConstant": false,
            "href": "dart-collection\/LinkedList\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "single",
            "type": "",
            "types": [],
            "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
            "memberOf": "dart:collection.LinkedList",
            "isConstant": false,
            "href": "dart-collection\/LinkedList\/single.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  if (isEmpty) {\n    throw StateError('No such element');\n  }\n  if (_length &gt; 1) {\n    throw StateError('Too many elements');\n  }\n  return _first;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-collection\/LinkedList-class.html",
    "desc": "<p>A specialized double-linked list of elements that extends <a href=\"dart-collection\/LinkedListEntry-class.html\">LinkedListEntry<\/a>.<\/p>\n<p>This is not a generic data structure. It only accepts elements that extend\nthe <a href=\"dart-collection\/LinkedListEntry-class.html\">LinkedListEntry<\/a> class. See the <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> implementations for generic\ncollections that allow constant time adding and removing at the ends.<\/p>\n<p>This is not a <a href=\"dart-core\/List-class.html\">List<\/a> implementation. Despite its name, this class does not\nimplement the <a href=\"dart-core\/List-class.html\">List<\/a> interface. It does not allow constant time lookup by\nindex.<\/p>\n<p>Because the elements themselves contain the links of this linked list,\neach element can be in only one list at a time. To add an element to another\nlist, it must first be removed from its current list (if any).<\/p>\n<p>In return, each element knows its own place in the linked list, as well as\nwhich list it is in. This allows constant time\n<a href=\"dart-collection\/LinkedListEntry\/insertAfter.html\">LinkedListEntry.insertAfter<\/a>, <a href=\"dart-collection\/LinkedListEntry\/insertBefore.html\">LinkedListEntry.insertBefore<\/a> and\n<a href=\"dart-collection\/LinkedListEntry\/unlink.html\">LinkedListEntry.unlink<\/a> operations when all you have is the element.<\/p>\n<p>A <code>LinkedList<\/code> also allows constant time adding and removing at either end,\nand a constant time length getter.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LinkedList"
}