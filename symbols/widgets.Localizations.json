{
    "desc": "<p>Defines the <a href=\"dart-ui\/Locale-class.html\">Locale<\/a> for its <code>child<\/code> and the localized resources that the\nchild depends on.<\/p>\n<p>Localized resources are loaded by the list of <a href=\"widgets\/LocalizationsDelegate-class.html\">LocalizationsDelegate<\/a>\n<code>delegates<\/code>. Each delegate is essentially a factory for a collection\nof localized resources. There are multiple delegates because there are\nmultiple sources for localizations within an app.<\/p>\n<p>Delegates are typically simple subclasses of <a href=\"widgets\/LocalizationsDelegate-class.html\">LocalizationsDelegate<\/a> that\noverride <a href=\"widgets\/LocalizationsDelegate\/load.html\">LocalizationsDelegate.load<\/a>. For example a delegate for the\n<code>MyLocalizations<\/code> class defined below would be:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class _MyDelegate extends LocalizationsDelegate&lt;MyLocalizations&gt; {\n  @override\n  Future&lt;MyLocalizations&gt; load(Locale locale) =&gt; MyLocalizations.load(locale);\n\n  @override\n  bool shouldReload(MyLocalizationsDelegate old) =&gt; false;\n}\n<\/code><\/pre>\n<p>Each delegate can be viewed as a factory for objects that encapsulate a\na set of localized resources. These objects are retrieved with\nby runtime type with <a href=\"widgets\/Localizations\/of.html\">Localizations.of<\/a>.<\/p>\n<p>The <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> class creates a <code>Localizations<\/code> widget so most apps\nwill not need to create one. The widget app's <code>Localizations<\/code> delegates can\nbe initialized with <a href=\"widgets\/WidgetsApp\/localizationsDelegates.html\">WidgetsApp.localizationsDelegates<\/a>. The <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>\nclass also provides a <code>localizationsDelegates<\/code> parameter that's just\npassed along to the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>.<\/p>\n<p>Apps should retrieve collections of localized resources with\n<code>Localizations.of&lt;MyLocalizations&gt;(context, MyLocalizations)<\/code>,\nwhere MyLocalizations is an app specific class defines one function per\nresource. This is conventionally done by a static <code>.of<\/code> method on the\nMyLocalizations class.<\/p>\n<p>For example, using the <code>MyLocalizations<\/code> class defined below, one would\nlookup a localized title string like this:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">MyLocalizations.of(context).title()\n<\/code><\/pre>\n<p>If <code>Localizations<\/code> were to be rebuilt with a new <code>locale<\/code> then\nthe widget subtree that corresponds to <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> <code>context<\/code> would\nbe rebuilt after the corresponding resources had been loaded.<\/p>\n<p>This class is effectively an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>. If it's rebuilt with\na new <code>locale<\/code> or a different list of delegates or any of its\ndelegates' <a href=\"widgets\/LocalizationsDelegate\/shouldReload.html\">LocalizationsDelegate.shouldReload()<\/a> methods returns true,\nthen widgets that have created a dependency by calling\n<code>Localizations.of(context)<\/code> will be rebuilt after the resources\nfor the new locale have been loaded.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis following class is defined in terms of the\n<a href=\"https:\/\/github.com\/dart-lang\/intl\">Dart <code>intl<\/code> package<\/a>. Using the <code>intl<\/code>\npackage isn't required.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyLocalizations {\n  MyLocalizations(this.locale);\n\n  final Locale locale;\n\n  static Future&lt;MyLocalizations&gt; load(Locale locale) {\n    return initializeMessages(locale.toString())\n      .then((void _) {\n        return MyLocalizations(locale);\n      });\n  }\n\n  static MyLocalizations of(BuildContext context) {\n    return Localizations.of&lt;MyLocalizations&gt;(context, MyLocalizations);\n  }\n\n  String title() =&gt; Intl.message('&lt;title&gt;', name: 'title', locale: locale.toString());\n  \/\/ ... more Intl.message() methods like title()\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\nA class based on the <code>intl<\/code> package imports a generated message catalog that provides\nthe <code>initializeMessages()<\/code> function and the per-locale backing store for <code>Intl.message()<\/code>.\nThe message catalog is produced by an <code>intl<\/code> tool that analyzes the source code for\nclasses that contain <code>Intl.message()<\/code> calls. In this case that would just be the\n<code>MyLocalizations<\/code> class.\n<p>One could choose another approach for loading localized resources and looking them up while\nstill conforming to the structure of this example.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Localizations-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.Localizations",
    "shortname": "Localizations",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a widget from which localizations (like translated strings) can be obtained.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Localizations({\n  Key key,\n  @required this.locale,\n  @required this.delegates,\n  this.child,\n}) : assert(locale != null),\n     assert(delegates != null),\n     assert(delegates.any((LocalizationsDelegate&lt;dynamic&gt; delegate) =&gt; delegate is LocalizationsDelegate&lt;WidgetsLocalizations&gt;)),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/Localizations\/Localizations.html",
            "isDeprecated": false,
            "type": "",
            "name": "Localizations",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Localizations",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "delegates",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.LocalizationsDelegate>"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "locale",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/Localizations\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_LocalizationsState createState() =&gt; _LocalizationsState();<\/code><\/pre>\n    ",
            "href": "widgets\/Localizations\/createState.html",
            "isDeprecated": false,
            "type": "<_LocalizationsState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Localizations",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/Localizations\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Locale&gt;('locale', locale));\n  properties.add(IterableProperty&lt;LocalizationsDelegate&lt;dynamic&gt;&gt;('delegates', delegates));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Localizations\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Localizations",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>The locale of the Localizations widget for the widget tree that\ncorresponds to <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> <code>context<\/code>.<\/p>\n<p>If no <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget is in scope then the <a href=\"widgets\/Localizations\/localeOf.html\">Localizations.localeOf<\/a>\nmethod will throw an exception, unless the <code>nullOk<\/code> argument is set to\ntrue, in which case it returns null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Locale localeOf(BuildContext context, { bool nullOk = false }) {\n  assert(context != null);\n  assert(nullOk != null);\n  final _LocalizationsScope scope = context.inheritFromWidgetOfExactType(_LocalizationsScope);\n  if (nullOk &amp;&amp; scope == null)\n    return null;\n  assert(scope != null, 'a Localizations ancestor was not found');\n  return scope.localizationsState.locale;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Localizations\/localeOf.html",
            "isDeprecated": false,
            "type": "dart:ui.Locale",
            "name": "localeOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Localizations",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "nullOk",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns the localized resources object of the given <code>type<\/code> for the widget\ntree that corresponds to the given <code>context<\/code>.<\/p>\n<p>Returns null if no resources object of the given <code>type<\/code> exists within\nthe given <code>context<\/code>.<\/p>\n<p>This method is typically used by a static factory method on the <code>type<\/code>\nclass. For example Flutter's MaterialLocalizations class looks up Material\nresources with a method defined like this:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">static MaterialLocalizations of(BuildContext context) {\n   return Localizations.of&lt;MaterialLocalizations&gt;(context, MaterialLocalizations);\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static T of&lt;T&gt;(BuildContext context, Type type) {\n  assert(context != null);\n  assert(type != null);\n  final _LocalizationsScope scope = context.inheritFromWidgetOfExactType(_LocalizationsScope);\n  return scope?.localizationsState?.resourcesFor&lt;T&gt;(type);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Localizations\/of.html",
            "isDeprecated": false,
            "type": "<T>",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Localizations",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "type",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Type"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Localizations\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Localizations",
            "params": []
        },
        {
            "desc": "<p>This list collectively defines the localized resources objects that can\nbe retrieved with <a href=\"widgets\/Localizations\/of.html\">Localizations.of<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;LocalizationsDelegate&lt;dynamic&gt;&gt; delegates\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Localizations\/delegates.html",
            "name": "delegates",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.LocalizationsDelegate>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Localizations",
            "params": []
        },
        {
            "desc": "<p>The resources returned by <a href=\"widgets\/Localizations\/of.html\">Localizations.of<\/a> will be specific to this locale.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Localizations\/locale.html",
            "name": "locale",
            "isDeprecated": false,
            "type": "dart:ui.Locale",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.Localizations",
            "params": []
        }
    ]
}