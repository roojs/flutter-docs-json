{
    "desc": "<p>A transformer that converts a broadcast stream into a single-subscription\nstream.<\/p>\n<p>This buffers the broadcast stream's events, which means that it starts\nlistening to a stream as soon as it's bound.<\/p>\n<p>This also casts the source stream's events to type <code>T<\/code>. If the cast fails,\nthe result stream will emit a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>. This behavior is deprecated, and\nshould not be relied upon.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/SingleSubscriptionTransformer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "async",
    "name": "async.SingleSubscriptionTransformer",
    "shortname": "SingleSubscriptionTransformer",
    "extends": [
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SingleSubscriptionTransformer();<\/code><\/pre>\n    ",
            "href": "package-async_async\/SingleSubscriptionTransformer\/SingleSubscriptionTransformer.html",
            "isDeprecated": false,
            "type": "",
            "name": "SingleSubscriptionTransformer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.SingleSubscriptionTransformer",
            "params": []
        },
        {
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; bind(Stream&lt;S&gt; stream) {\n  StreamSubscription&lt;S&gt; subscription;\n  var controller = new StreamController&lt;T&gt;(\n      sync: true, onCancel: () =&gt; subscription.cancel());\n  subscription = stream.listen((value) {\n    \/\/ TODO(nweiz): When we release a new major version, get rid of the second\n    \/\/ type parameter and avoid this conversion.\n    try {\n      controller.add(value as T);\n    } on CastError catch (error, stackTrace) {\n      controller.addError(error, stackTrace);\n    }\n  }, onError: controller.addError, onDone: controller.close);\n  return controller.stream;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/SingleSubscriptionTransformer\/bind.html",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "name": "bind",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.SingleSubscriptionTransformer",
            "params": [
                {
                    "name": "stream",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        }
    ],
    "props": []
}