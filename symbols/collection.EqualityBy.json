{
    "desc": "<p>Equality of objects based on derived values.<\/p>\n<p>For example, given the class:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">abstract class Employee {\n  int get employmentId;\n}\n<\/code><\/pre>\n<p>The following <a href=\"package-collection_collection\/Equality-class.html\">Equality<\/a> considers employees with the same IDs to be equal:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new EqualityBy((Employee e) =&gt; e.employmentId);\n<\/code><\/pre>\n<p>It's also possible to pass an additional equality instance that should be\nused to compare the value itself.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-collection_collection\/EqualityBy-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "collection",
    "name": "collection.EqualityBy",
    "shortname": "EqualityBy",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EqualityBy(F getKey(E object), [Equality&lt;F&gt; inner = const DefaultEquality()])\n    : _getKey = getKey,\n      _inner = inner;<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/EqualityBy\/EqualityBy.html",
            "isDeprecated": "0",
            "type": "",
            "name": "EqualityBy",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "collection.EqualityBy",
            "params": [
                {
                    "name": "inner",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "collection.Equality"
                },
                {
                    "name": "object",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(E e1, E e2) =&gt; _inner.equals(_getKey(e1), _getKey(e2));<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/EqualityBy\/equals.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "equals",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.EqualityBy",
            "params": [
                {
                    "name": "e1",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                },
                {
                    "name": "e2",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/EqualityBy\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(E e) =&gt; _inner.hash(_getKey(e));<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/EqualityBy\/hash.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "name": "hash",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.EqualityBy",
            "params": [
                {
                    "name": "e",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/EqualityBy\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/EqualityBy\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) {\n  if (o is E) {\n    final value = _getKey(o);\n    return value is F &amp;&amp; _inner.isValidKey(value);\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "package-collection_collection\/EqualityBy\/isValidKey.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "isValidKey",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "collection.EqualityBy",
            "params": [
                {
                    "name": "o",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": []
}