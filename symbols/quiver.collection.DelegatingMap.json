{
    "desc": "<p>An implementation of <a href=\"dart-core\/Map-class.html\">Map<\/a> that delegates all methods to another <a href=\"dart-core\/Map-class.html\">Map<\/a>.\nFor instance you can create a FruitMap like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitMap extends DelegatingMap&lt;String, Fruit&gt; {\n  final Map&lt;String, Fruit&gt; _fruits = {};\n\n  Map&lt;String, Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
    "dtype": "class",
    "example": "",
    "href": "quiver.collection\/DelegatingMap-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "quiver.collection",
    "name": "quiver.collection.DelegatingMap",
    "shortname": "DelegatingMap",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "quiver.collection\/DelegatingMap\/DelegatingMap.html",
            "isDeprecated": false,
            "type": "",
            "name": "DelegatingMap",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) =&gt; delegate.addAll(other);<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/addAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Map"
                }
            ]
        },
        {
            "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nvoid addEntries(Iterable&lt;Object&gt; entries) {\n  \/\/ Change Iterable&lt;Object&gt; to Iterable&lt;MapEntry&lt;K, V&gt;&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"addEntries\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/addEntries.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addEntries",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "entries",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.Object>"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; cast&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/cast.html",
            "isDeprecated": false,
            "type": "dart:core.Map",
            "name": "cast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; delegate.clear();<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/clear.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clear",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; delegate.containsKey(key);<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/containsKey.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "containsKey",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; delegate.containsValue(value);<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/containsValue.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "containsValue",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) =&gt; delegate.forEach(f);<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/forEach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "forEach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; map&lt;K2, V2&gt;(Object transform(K key, V value)) {\n  \/\/ Change Object to MapEntry&lt;K2, V2&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"map\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/map.html",
            "isDeprecated": false,
            "type": "dart:core.Map",
            "name": "map",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) =&gt; delegate.putIfAbsent(key, ifAbsent);<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/putIfAbsent.html",
            "isDeprecated": false,
            "type": "<V>",
            "name": "putIfAbsent",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "ifAbsent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<K>"
                }
            ]
        },
        {
            "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) =&gt; delegate.remove(key);<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/remove.html",
            "isDeprecated": false,
            "type": "<V>",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nvoid removeWhere(bool test(K key, V value)) {\n  throw new UnimplementedError(\"removeWhere\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/removeWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; retype&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/retype.html",
            "isDeprecated": false,
            "type": "dart:core.Map",
            "name": "retype",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nV update(K key, V update(V value), {V ifAbsent()}) {\n  throw new UnimplementedError(\"update\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/update.html",
            "isDeprecated": false,
            "type": "<V>",
            "name": "update",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "ifAbsent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nvoid updateAll(V update(K key, V value)) {\n  throw new UnimplementedError(\"updateAll\");\n}<\/code><\/pre>\n    ",
            "href": "quiver.collection\/DelegatingMap\/updateAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K, V&gt; get delegate;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/delegate.html",
            "name": "delegate",
            "isDeprecated": false,
            "type": "dart:core.Map",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>The map entries of <a href=\"quiver.collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_getter\nIterable&lt;Null&gt; get entries {\n  \/\/ Change Iterable&lt;Null&gt; to Iterable&lt;MapEntry&lt;K, V&gt;&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"entries\");\n}<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/entries.html",
            "name": "entries",
            "isDeprecated": false,
            "type": "dart:core.Iterable<dart:core.Null>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; delegate.isEmpty;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; delegate.isNotEmpty;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/isNotEmpty.html",
            "name": "isNotEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>The keys of <a href=\"quiver.collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"quiver.collection\/DelegatingMap\/length.html\">length<\/a> and <a href=\"quiver.collection\/DelegatingMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; delegate.keys;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/keys.html",
            "name": "keys",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; delegate.length;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        },
        {
            "desc": "<p>The values of <a href=\"quiver.collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"quiver.collection\/DelegatingMap\/keys.html\">keys<\/a> and <a href=\"quiver.collection\/DelegatingMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"quiver.collection\/DelegatingMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; delegate.values;<\/code><\/pre>\n        ",
            "href": "quiver.collection\/DelegatingMap\/values.html",
            "name": "values",
            "isDeprecated": false,
            "type": "dart:core.Iterable",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.collection.DelegatingMap",
            "params": []
        }
    ]
}