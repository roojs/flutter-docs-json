{
    "name": "async.AsyncMemoizer",
    "extends": [],
    "memberOf": "async",
    "events": [],
    "methods": [
        {
            "name": "AsyncMemoizer",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "async.AsyncMemoizer",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-async_async\/AsyncMemoizer\/AsyncMemoizer.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "runOnce",
            "type": "dart:async.Future",
            "desc": "<p>Runs the function, <code>computation<\/code>, if it hasn't been run before.<\/p>\n<p>If <a href=\"package-async_async\/AsyncMemoizer\/runOnce.html\">runOnce<\/a> has already been called, this returns the original result.<\/p>\n    ",
            "static": false,
            "memberOf": "async.AsyncMemoizer",
            "sig": "",
            "params": [
                {
                    "name": "computation",
                    "type": "dart:async.FutureOr",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/AsyncMemoizer\/runOnce.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; runOnce(FutureOr&lt;T&gt; computation()) {\n  if (!hasRun) _completer.complete(new Future.sync(computation));\n  return future;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "future",
            "type": "dart:async.Future",
            "types": [],
            "desc": "<p>The future containing the method's result.<\/p>\n<p>This can be accessed at any time, and will fire once <a href=\"package-async_async\/AsyncMemoizer\/runOnce.html\">runOnce<\/a> is called.<\/p>\n        ",
            "memberOf": "async.AsyncMemoizer",
            "isConstant": false,
            "href": "package-async_async\/AsyncMemoizer\/future.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; get future =&gt; _completer.future;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hasRun",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether <a href=\"package-async_async\/AsyncMemoizer\/runOnce.html\">runOnce<\/a> has been called yet.<\/p>\n        ",
            "memberOf": "async.AsyncMemoizer",
            "isConstant": false,
            "href": "package-async_async\/AsyncMemoizer\/hasRun.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasRun =&gt; _completer.isCompleted;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-async_async\/AsyncMemoizer-class.html",
    "desc": "<p>A class for running an asynchronous function exactly once and caching its\nresult.<\/p>\n<p>An <code>AsyncMemoizer<\/code> is used when some function may be run multiple times in\norder to get its result, but it only actually needs to be run once for its\neffect. To memoize the result of an async function, you can create a\nmemoizer outside the function (for example as an instance field if you want\nto memoize the result of a method), and then wrap the function's body in a\ncall to <a href=\"package-async_async\/AsyncMemoizer\/runOnce.html\">runOnce<\/a>.<\/p>\n<p>This is useful for methods like <code>close()<\/code> and getters that need to do\nasynchronous work. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class SomeResource {\n  final _closeMemo = new AsyncMemoizer();\n\n  Future close() =&gt; _closeMemo.runOnce(() {\n    \/\/ ...\n  });\n}\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "AsyncMemoizer"
}