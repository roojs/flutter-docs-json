{
    "name": "gestures.OneSequenceGestureRecognizer",
    "extends": [
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "memberOf": "gestures",
    "events": [],
    "methods": [
        {
            "name": "OneSequenceGestureRecognizer",
            "type": "",
            "desc": "<p>Initialize the object.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "debugOwner",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "kind",
                    "type": "dart:ui.PointerDeviceKind",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "gestures\/OneSequenceGestureRecognizer\/OneSequenceGestureRecognizer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OneSequenceGestureRecognizer({\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "acceptGesture",
            "type": "",
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/acceptGesture.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) { }<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didStopTrackingLastPointer",
            "type": "",
            "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/didStopTrackingLastPointer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didStopTrackingLastPointer(int pointer);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  resolve(GestureDisposition.rejected);\n  for (int pointer in _trackedPointers)\n    GestureBinding.instance.pointerRouter.removeRoute(pointer, handleEvent);\n  _trackedPointers.clear();\n  assert(_entries.isEmpty);\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handleEvent",
            "type": "",
            "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "event",
                    "type": "gestures.PointerEvent",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/handleEvent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handleEvent(PointerEvent event);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "handleNonAllowedPointer",
            "type": "",
            "desc": "<p>Handles a pointer being added that's not allowed by this recognizer.<\/p>\n<p>Subclasses can override this method and reject the gesture.<\/p>\n<p>See:<\/p>\n<ul><li>\n<a href=\"gestures\/OneSequenceGestureRecognizer\/handleNonAllowedPointer.html\">OneSequenceGestureRecognizer.handleNonAllowedPointer<\/a>.<\/li><\/ul>",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "event",
                    "type": "gestures.PointerDownEvent",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/handleNonAllowedPointer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleNonAllowedPointer(PointerDownEvent event) {\n  resolve(GestureDisposition.rejected);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "rejectGesture",
            "type": "",
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/rejectGesture.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) { }<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "resolve",
            "type": "",
            "desc": "<p>Resolves this recognizer's participation in each gesture arena with the\ngiven disposition.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "disposition",
                    "type": "gestures.GestureDisposition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/resolve.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid resolve(GestureDisposition disposition) {\n  final List&lt;GestureArenaEntry&gt; localEntries = List&lt;GestureArenaEntry&gt;.from(_entries.values);\n  _entries.clear();\n  for (GestureArenaEntry entry in localEntries)\n    entry.resolve(disposition);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "startTrackingPointer",
            "type": "",
            "desc": "<p>Causes events related to the given pointer ID to be routed to this recognizer.<\/p>\n<p>The pointer events are delivered to <a href=\"gestures\/OneSequenceGestureRecognizer\/handleEvent.html\">handleEvent<\/a>.<\/p>\n<p>Use <a href=\"gestures\/OneSequenceGestureRecognizer\/stopTrackingPointer.html\">stopTrackingPointer<\/a> to remove the route added by this function.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/startTrackingPointer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid startTrackingPointer(int pointer) {\n  GestureBinding.instance.pointerRouter.addRoute(pointer, handleEvent);\n  _trackedPointers.add(pointer);\n  assert(!_entries.containsValue(pointer));\n  _entries[pointer] = _addPointerToArena(pointer);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "stopTrackingIfPointerNoLongerDown",
            "type": "",
            "desc": "<p>Stops tracking the pointer associated with the given event if the event is\na <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> or a <a href=\"gestures\/PointerCancelEvent-class.html\">PointerCancelEvent<\/a> event.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "event",
                    "type": "gestures.PointerEvent",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/stopTrackingIfPointerNoLongerDown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid stopTrackingIfPointerNoLongerDown(PointerEvent event) {\n  if (event is PointerUpEvent || event is PointerCancelEvent)\n    stopTrackingPointer(event.pointer);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "stopTrackingPointer",
            "type": "",
            "desc": "<p>Stops events related to the given pointer ID from being routed to this recognizer.<\/p>\n<p>If this function reduces the number of tracked pointers to zero, it will\ncall <a href=\"gestures\/OneSequenceGestureRecognizer\/didStopTrackingLastPointer.html\">didStopTrackingLastPointer<\/a> synchronously.<\/p>\n<p>Use <a href=\"gestures\/OneSequenceGestureRecognizer\/startTrackingPointer.html\">startTrackingPointer<\/a> to add the routes in the first place.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/stopTrackingPointer.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid stopTrackingPointer(int pointer) {\n  if (_trackedPointers.contains(pointer)) {\n    GestureBinding.instance.pointerRouter.removeRoute(pointer, handleEvent);\n    _trackedPointers.remove(pointer);\n    if (_trackedPointers.isEmpty)\n      didStopTrackingLastPointer(pointer);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "team",
            "type": "gestures.GestureArenaTeam",
            "types": [],
            "desc": "<p>The team that this recognizer belongs to, if any.<\/p>\n<p>If <a href=\"gestures\/OneSequenceGestureRecognizer\/team.html\">team<\/a> is null, this recognizer competes directly in the\n<a href=\"gestures\/GestureArenaManager-class.html\">GestureArenaManager<\/a> to recognize a sequence of pointer events as a\ngesture. If <a href=\"gestures\/OneSequenceGestureRecognizer\/team.html\">team<\/a> is non-null, this recognizer competes in the arena in\na group with other recognizers on the same team.<\/p>\n<p>A recognizer can be assigned to a team only when it is not participating\nin the arena. For example, a common time to assign a recognizer to a team\nis shortly after creating the recognizer.<\/p>\n        ",
            "memberOf": "gestures.OneSequenceGestureRecognizer",
            "isConstant": false,
            "href": "gestures\/OneSequenceGestureRecognizer\/team.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureArenaTeam get team =&gt; _team;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "gestures.DragGestureRecognizer",
        "gestures.EagerGestureRecognizer",
        "gestures.ForcePressGestureRecognizer",
        "gestures.HorizontalDragGestureRecognizer",
        "gestures.LongPressGestureRecognizer",
        "gestures.PanGestureRecognizer",
        "gestures.PrimaryPointerGestureRecognizer",
        "gestures.ScaleGestureRecognizer",
        "gestures.TapGestureRecognizer",
        "gestures.VerticalDragGestureRecognizer"
    ],
    "realImplementors": [],
    "cn": [],
    "href": "gestures\/OneSequenceGestureRecognizer-class.html",
    "desc": "<p>Base class for gesture recognizers that can only recognize one\ngesture at a time. For example, a single <a href=\"gestures\/TapGestureRecognizer-class.html\">TapGestureRecognizer<\/a>\ncan never recognize two taps happening simultaneously, even if\nmultiple pointers are placed on the same widget.<\/p>\n<p>This is in contrast to, for instance, <a href=\"gestures\/MultiTapGestureRecognizer-class.html\">MultiTapGestureRecognizer<\/a>,\nwhich manages each pointer independently and can consider multiple\nsimultaneous touches to each result in a separate tap.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "OneSequenceGestureRecognizer"
}