{
    "name": "dart:convert.JsonUtf8Encoder",
    "extends": [
        "dart:core.int",
        "dart:core.List",
        "dart:core.Object",
        "dart:convert.Converter",
        "dart:core.int",
        "dart:core.List",
        "dart:core.Object",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "JsonUtf8Encoder",
            "type": "",
            "desc": "<p>Create converter.<\/p>\n<p>If <code>indent<\/code> is non-<code>null<\/code>, the converter attempts to \"pretty-print\" the\nJSON, and uses <code>indent<\/code> as the indentation. Otherwise the result has no\nwhitespace outside of string literals.\nIf <code>indent<\/code> contains characters that are not valid JSON whitespace\ncharacters, the result will not be valid JSON. JSON whitespace characters\nare space (U+0020), tab (U+0009), line feed (U+000a) and carriage return\n(U+000d) (<a href=\"http:\/\/www.ecma-international.org\/publications\/standards\/Ecma-404.htm\">ECMA\n404<\/a>).<\/p>\n<p>The <code>bufferSize<\/code> is the size of the internal buffers used to collect\nUTF-8 code units.\nIf using <a href=\"dart-convert\/JsonUtf8Encoder\/startChunkedConversion.html\">startChunkedConversion<\/a>, it will be the size of the chunks.<\/p>\n<p>The JSON encoder handles numbers, strings, booleans, null, lists and maps\ndirectly.<\/p>\n<p>Any other object is attempted converted by <code>toEncodable<\/code> to an object that\nis of one of the convertible types.<\/p>\n<p>If <code>toEncodable<\/code> is omitted, it defaults to calling <code>.toJson()<\/code> on the\nobject.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonUtf8Encoder",
            "sig": "",
            "params": [
                {
                    "name": "indent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "bufferSize",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/JsonUtf8Encoder\/JsonUtf8Encoder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">JsonUtf8Encoder(\n    [String indent, toEncodable(object), int bufferSize = _defaultBufferSize])\n    : _indent = _utf8Encode(indent),\n      _toEncodable = toEncodable,\n      _bufferSize = bufferSize;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bind",
            "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonUtf8Encoder",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonUtf8Encoder\/bind.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; bind(Stream&lt;Object&gt; stream) {\n  return super.bind(stream);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Stream",
                "dart:core.List",
                "dart:core.int"
            ]
        },
        {
            "name": "convert",
            "type": "dart:core.List<dart:core.int>",
            "desc": "<p>Convert <code>object<\/code> into UTF-8 encoded JSON.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonUtf8Encoder",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonUtf8Encoder\/convert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(Object object) {\n  var bytes = &lt;List&lt;int&gt;&gt;[];\n  \/\/ The `stringify` function always converts into chunks.\n  \/\/ Collect the chunks into the `bytes` list, then combine them afterwards.\n  void addChunk(Uint8List chunk, int start, int end) {\n    if (start &gt; 0 || end &lt; chunk.length) {\n      var length = end - start;\n      chunk =\n          Uint8List.view(chunk.buffer, chunk.offsetInBytes + start, length);\n    }\n    bytes.add(chunk);\n  }\n\n  _JsonUtf8Stringifier.stringify(\n      object, _indent, _toEncodable, _bufferSize, addChunk);\n  if (bytes.length == 1) return bytes[0];\n  var length = 0;\n  for (var i = 0; i &lt; bytes.length; i++) {\n    length += bytes[i].length;\n  }\n  var result = Uint8List(length);\n  for (var i = 0, offset = 0; i &lt; bytes.length; i++) {\n    var byteList = bytes[i];\n    int end = offset + byteList.length;\n    result.setRange(offset, end, byteList);\n    offset = end;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "dart:core.int"
            ]
        },
        {
            "name": "startChunkedConversion",
            "type": "dart:convert.ChunkedConversionSink<dart:core.Object>",
            "desc": "<p>Start a chunked conversion.<\/p>\n<p>Only one object can be passed into the returned sink.<\/p>\n<p>The argument <code>sink<\/code> will receive byte lists in sizes depending on the\n<code>bufferSize<\/code> passed to the constructor when creating this encoder.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.JsonUtf8Encoder",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<dart:core.List<dart:core.int>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/JsonUtf8Encoder\/startChunkedConversion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ChunkedConversionSink&lt;Object&gt; startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  ByteConversionSink byteSink;\n  if (sink is ByteConversionSink) {\n    byteSink = sink;\n  } else {\n    byteSink = ByteConversionSink.from(sink);\n  }\n  return _JsonUtf8EncoderSink(byteSink, _toEncodable, _indent, _bufferSize);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:convert.ChunkedConversionSink",
                "dart:core.Object"
            ]
        }
    ],
    "props": [
        {
            "type": "",
            "href": "dart-convert\/JsonUtf8Encoder\/DEFAULT_BUFFER_SIZE-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_BUFFER_SIZE = _defaultBufferSize\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "DEFAULT_BUFFER_SIZE",
            "memberOf": "dart:convert.JsonUtf8Encoder"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/JsonUtf8Encoder-class.html",
    "desc": "<p>Encoder that encodes a single object as a UTF-8 encoded JSON string.<\/p>\n<p>This encoder works equivalently to first converting the object to\na JSON string, and then UTF-8 encoding the string, but without\ncreating an intermediate string.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "JsonUtf8Encoder"
}