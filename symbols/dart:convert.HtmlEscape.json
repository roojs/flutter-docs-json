{
    "name": "dart:convert.HtmlEscape",
    "extends": [
        "dart:core.String",
        "dart:core.String",
        "dart:convert.Converter",
        "dart:core.String",
        "dart:core.String",
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "HtmlEscape",
            "type": "",
            "desc": "<p>Create converter that escapes HTML characters.<\/p>\n<p>If <code>mode<\/code> is provided as either <a href=\"dart-convert\/HtmlEscapeMode\/attribute-constant.html\">HtmlEscapeMode.attribute<\/a> or\n<a href=\"dart-convert\/HtmlEscapeMode\/element-constant.html\">HtmlEscapeMode.element<\/a>, only the corresponding subset of HTML\ncharacters are escaped.\nThe default is to escape all HTML characters.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.HtmlEscape",
            "sig": "",
            "params": [
                {
                    "name": "mode",
                    "type": "dart:convert.HtmlEscapeMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/HtmlEscape\/HtmlEscape.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HtmlEscape([this.mode = HtmlEscapeMode.unknown]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "convert",
            "type": "dart:core.String",
            "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.HtmlEscape",
            "sig": "",
            "params": [
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/HtmlEscape\/convert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String convert(String text) {\n  var val = _convert(text, 0, text.length);\n  return val == null ? text : val;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "startChunkedConversion",
            "type": "dart:convert.StringConversionSink",
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.HtmlEscape",
            "sig": "",
            "params": [
                {
                    "name": "sink",
                    "type": "dart:core.Sink<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Sink",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-convert\/HtmlEscape\/startChunkedConversion.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StringConversionSink startChunkedConversion(Sink&lt;String&gt; sink) {\n  return _HtmlEscapeSink(this,\n      sink is StringConversionSink ? sink : StringConversionSink.from(sink));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "mode",
            "type": "dart:convert.HtmlEscapeMode",
            "types": [],
            "desc": "<p>The <a href=\"dart-convert\/HtmlEscapeMode-class.html\">HtmlEscapeMode<\/a> used by the converter.<\/p>\n        ",
            "memberOf": "dart:convert.HtmlEscape",
            "isConstant": false,
            "href": "dart-convert\/HtmlEscape\/mode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final HtmlEscapeMode mode\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/HtmlEscape-class.html",
    "desc": "<p>Converter which escapes characters with special meaning in HTML.<\/p>\n<p>The converter finds characters that are significant in HTML source and\nreplaces them with corresponding HTML entities.<\/p>\n<p>The characters that need escaping in HTML are:<\/p>\n<ul>\n<li>\n<code>&amp;<\/code> (ampersand) always need to be escaped.<\/li>\n<li>\n<code>&lt;<\/code> (less than) and '&gt;' (greater than) when inside an element.<\/li>\n<li>\n<code>\"<\/code> (quote) when inside a double-quoted attribute value.<\/li>\n<li>\n<code>'<\/code> (apostrophe) when inside a single-quoted attribute value.\n    Apostrophe is escaped as <code>&amp;#39;<\/code> instead of <code>&amp;apos;<\/code> since\n    not all browsers understand <code>&amp;apos;<\/code>.<\/li>\n<li>\n<code>\/<\/code> (slash) is recommended to be escaped because it may be used\n    to terminate an element in some HTML dialects.<\/li>\n<\/ul>\n<p>Escaping <code>&gt;<\/code> (greater than) isn't necessary, but the result is often\nfound to be easier to read if greater-than is also escaped whenever\nless-than is.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "HtmlEscape"
}