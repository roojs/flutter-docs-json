{
    "desc": "<p>A combined byte and text output.<\/p>\n<p>An <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> combines a <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> of bytes with a <a href=\"dart-core\/StringSink-class.html\">StringSink<\/a>,\nand allows easy output of both bytes and text.<\/p>\n<p>Writing text (<a href=\"dart-io\/IOSink\/write.html\">write<\/a>) and adding bytes (<a href=\"dart-io\/IOSink\/add.html\">add<\/a>) may be interleaved freely.<\/p>\n<p>While a stream is being added using <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a>, any further attempts\nto add or write to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> will fail until the <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a> completes.<\/p>\n<p>It is an error to add data to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> after the sink is closed.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/IOSink-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.IOSink",
    "shortname": "IOSink",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> that outputs to a <code>target<\/code> <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a> of bytes.<\/p>\n<p>Text written to <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> methods is encoded to bytes using <code>encoding<\/code>\nbefore being output on <code>target<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory IOSink(StreamConsumer&lt;List&lt;int&gt;&gt; target, {Encoding encoding: utf8}) =&gt;\n    new _IOSinkImpl(target, encoding);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/IOSink.html",
            "isDeprecated": "0",
            "type": "",
            "name": "IOSink",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "target",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:async.StreamConsumer<dart:core.List<dart:core.int>>"
                }
            ]
        },
        {
            "desc": "<p>Adds byte <code>data<\/code> to the target consumer, ignoring <a href=\"dart-io\/IOSink\/encoding.html\">encoding<\/a>.<\/p>\n<p>The <a href=\"dart-io\/IOSink\/encoding.html\">encoding<\/a> does not apply to this method, and the <code>data<\/code> list is passed\ndirectly to the target consumer as a stream event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n<p>The data list should not be modified after it has been passed to <code>add<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; data);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                }
            ]
        },
        {
            "desc": "<p>Passes the error to the target consumer as an error event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addError(error, [StackTrace stackTrace]);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/addError.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "addError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "stackTrace",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.StackTrace"
                }
            ]
        },
        {
            "desc": "<p>Adds all elements of the given <code>stream<\/code> to <code>this<\/code>.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when\nall elements of the given <code>stream<\/code> are added to <code>this<\/code>.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;List&lt;int&gt;&gt; stream);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/addStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "addStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>"
                }
            ]
        },
        {
            "desc": "<p>Close the target consumer.<\/p>\n<p>NOTE: Writes to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> may be buffered, and may not be flushed by\na call to <code>close()<\/code>. To flush all buffered writes, call <code>flush()<\/code> before\ncalling <code>close()<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close();<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": []
        },
        {
            "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once all buffered data is accepted by the\nunderlying <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a>.<\/p>\n<p>This method must not be called while an <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a> is incomplete.<\/p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future flush();<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/flush.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "flush",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": []
        },
        {
            "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\n<a href=\"dart-io\/IOSink\/add.html\">add<\/a>s the encoding of the result to the target consumer.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void write(Object obj);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/write.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "write",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "obj",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Iterates over the given <code>objects<\/code> and <a href=\"dart-io\/IOSink\/write.html\">write<\/a>s them in sequence.<\/p>\n<p>If <code>separator<\/code> is provided, a <code>write<\/code> with the <code>separator<\/code> is performed\nbetween any two elements of objects`.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAll(Iterable objects, [String separator = \"\"]);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/writeAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "writeAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "objects",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "separator",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Writes the character of <code>charCode<\/code>.<\/p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))<\/code>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeCharCode(int charCode);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/writeCharCode.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "writeCharCode",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "charCode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\nwrites the result to <code>this<\/code>, followed by a newline.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeln([Object obj = \"\"]);<\/code><\/pre>\n    ",
            "href": "dart-io\/IOSink\/writeln.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "writeln",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.IOSink",
            "params": [
                {
                    "name": "obj",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a href=\"dart-io\/IOSink\/close.html\">close<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done;<\/code><\/pre>\n        ",
            "href": "dart-io\/IOSink\/done.html",
            "name": "done",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "memberOf": "dart:io.IOSink",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Encoding encoding\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/IOSink\/encoding.html",
            "name": "encoding",
            "isDeprecated": false,
            "type": "dart:convert.Encoding",
            "memberOf": "dart:io.IOSink",
            "params": []
        }
    ]
}