{
    "desc": "<p>Defines the default appearance of <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>s.<\/p>\n<p>This class is used to define the value of <a href=\"material\/ThemeData\/inputDecorationTheme.html\">ThemeData.inputDecorationTheme<\/a>.\nThe <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, <a href=\"material\/TextField-class.html\">TextField<\/a>, and <a href=\"material\/TextFormField-class.html\">TextFormField<\/a> widgets use\nthe current input decoration theme to initialize null <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a>\nproperties.<\/p>\n<p>The <a href=\"material\/InputDecoration\/applyDefaults.html\">InputDecoration.applyDefaults<\/a> method is used to combine a input\ndecoration theme with an <a href=\"material\/InputDecoration-class.html\">InputDecoration<\/a> object.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/InputDecorationTheme-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.InputDecorationTheme",
    "shortname": "InputDecorationTheme",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a value for <a href=\"material\/ThemeData\/inputDecorationTheme.html\">ThemeData.inputDecorationTheme<\/a> that\ndefines default values for <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>.<\/p>\n<p>The values of <code>isDense<\/code>, <code>isCollapsed<\/code>, <code>filled<\/code>, and <code>border<\/code> must\nnot be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const InputDecorationTheme({\n  this.labelStyle,\n  this.helperStyle,\n  this.hintStyle,\n  this.errorStyle,\n  this.errorMaxLines,\n  this.hasFloatingPlaceholder = true,\n  this.isDense = false,\n  this.contentPadding,\n  this.isCollapsed = false,\n  this.prefixStyle,\n  this.suffixStyle,\n  this.counterStyle,\n  this.filled = false,\n  this.fillColor,\n  this.errorBorder,\n  this.focusedBorder,\n  this.focusedErrorBorder,\n  this.disabledBorder,\n  this.enabledBorder,\n  this.border,\n  this.alignLabelWithHint = false,\n}) : assert(isDense != null),\n     assert(isCollapsed != null),\n     assert(filled != null),\n     assert(alignLabelWithHint != null);<\/code><\/pre>\n    ",
            "href": "material\/InputDecorationTheme\/InputDecorationTheme.html",
            "isDeprecated": false,
            "type": "",
            "name": "InputDecorationTheme",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.InputDecorationTheme",
            "params": [
                {
                    "name": "alignLabelWithHint",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "border",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "contentPadding",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "counterStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "disabledBorder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "enabledBorder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "errorBorder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "errorMaxLines",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "errorStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "fillColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "filled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "focusedBorder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "focusedErrorBorder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.InputBorder"
                },
                {
                    "name": "hasFloatingPlaceholder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "helperStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "hintStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "isCollapsed",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isDense",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "labelStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "prefixStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "suffixStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/InputDecorationTheme\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  const InputDecorationTheme defaultTheme = InputDecorationTheme();\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('labelStyle', labelStyle, defaultValue: defaultTheme.labelStyle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('helperStyle', helperStyle, defaultValue: defaultTheme.helperStyle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('hintStyle', hintStyle, defaultValue: defaultTheme.hintStyle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('errorStyle', errorStyle, defaultValue: defaultTheme.errorStyle));\n  properties.add(DiagnosticsProperty&lt;int&gt;('errorMaxLines', errorMaxLines, defaultValue: defaultTheme.errorMaxLines));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('hasFloatingPlaceholder', hasFloatingPlaceholder, defaultValue: defaultTheme.hasFloatingPlaceholder));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('isDense', isDense, defaultValue: defaultTheme.isDense));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('contentPadding', contentPadding, defaultValue: defaultTheme.contentPadding));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('isCollapsed', isCollapsed, defaultValue: defaultTheme.isCollapsed));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('prefixStyle', prefixStyle, defaultValue: defaultTheme.prefixStyle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('suffixStyle', suffixStyle, defaultValue: defaultTheme.suffixStyle));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('counterStyle', counterStyle, defaultValue: defaultTheme.counterStyle));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('filled', filled, defaultValue: defaultTheme.filled));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('fillColor', fillColor, defaultValue: defaultTheme.fillColor));\n  properties.add(DiagnosticsProperty&lt;InputBorder&gt;('errorBorder', errorBorder, defaultValue: defaultTheme.errorBorder));\n  properties.add(DiagnosticsProperty&lt;InputBorder&gt;('focusedBorder', focusedBorder, defaultValue: defaultTheme.focusedErrorBorder));\n  properties.add(DiagnosticsProperty&lt;InputBorder&gt;('focusedErrorBorder', focusedErrorBorder, defaultValue: defaultTheme.focusedErrorBorder));\n  properties.add(DiagnosticsProperty&lt;InputBorder&gt;('disabledBorder', disabledBorder, defaultValue: defaultTheme.disabledBorder));\n  properties.add(DiagnosticsProperty&lt;InputBorder&gt;('enabledBorder', enabledBorder, defaultValue: defaultTheme.enabledBorder));\n  properties.add(DiagnosticsProperty&lt;InputBorder&gt;('border', border, defaultValue: defaultTheme.border));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('alignLabelWithHint', alignLabelWithHint, defaultValue: defaultTheme.alignLabelWithHint));\n}<\/code><\/pre>\n    ",
            "href": "material\/InputDecorationTheme\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.InputDecorationTheme",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Typically set to true when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> contains a multi-line\n<a href=\"material\/TextField-class.html\">TextField<\/a> (<a href=\"material\/TextField\/maxLines.html\">TextField.maxLines<\/a> is null or &gt; 1) to override the default\nbehavior of aligning the label with the center of the <a href=\"material\/TextField-class.html\">TextField<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool alignLabelWithHint\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/alignLabelWithHint.html",
            "name": "alignLabelWithHint",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The shape of the border to draw around the decoration's container.<\/p>\n<p>The decoration's container is the area which is filled if <a href=\"material\/InputDecorationTheme\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>. It's the area adjacent to\n<a href=\"material\/InputDecoration\/icon.html\">InputDecoration.icon<\/a> and above the widgets that contain\n<a href=\"material\/InputDecoration\/helperText.html\">InputDecoration.helperText<\/a>, <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, and\n<a href=\"material\/InputDecoration\/counterText.html\">InputDecoration.counterText<\/a>.<\/p>\n<p>The border's bounds, i.e. the value of <code>border.getOuterPath()<\/code>, define\nthe area to be filled.<\/p>\n<p>This property is only used when the appropriate one of <a href=\"material\/InputDecorationTheme\/errorBorder.html\">errorBorder<\/a>,\n<a href=\"material\/InputDecorationTheme\/focusedBorder.html\">focusedBorder<\/a>, <a href=\"material\/InputDecorationTheme\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, <a href=\"material\/InputDecorationTheme\/disabledBorder.html\">disabledBorder<\/a>, or <a href=\"material\/InputDecorationTheme\/enabledBorder.html\">enabledBorder<\/a>\nis not specified. This border's <a href=\"material\/InputBorder\/borderSide.html\">InputBorder.borderSide<\/a> property is\nconfigured by the InputDecorator, depending on the values of\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a>,\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>Typically one of <a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a> or <a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>.\nIf null, InputDecorator's default is <code>const UnderlineInputBorder()<\/code>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, which draws a horizontal line at the\nbottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder border\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/border.html",
            "name": "border",
            "isDeprecated": false,
            "type": "material.InputBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The padding for the input decoration's container.<\/p>\n<p>The decoration's container is the area which is filled if\n<a href=\"material\/InputDecorationTheme\/filled.html\">InputDecoration.filled<\/a> is true and bordered per the <a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>.\nIt's the area adjacent to <a href=\"material\/InputDecoration\/icon.html\">InputDecoration.icon<\/a> and above the\n<a href=\"material\/InputDecoration\/icon.html\">InputDecoration.icon<\/a> and above the widgets that contain\n<a href=\"material\/InputDecoration\/helperText.html\">InputDecoration.helperText<\/a>, <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, and\n<a href=\"material\/InputDecoration\/counterText.html\">InputDecoration.counterText<\/a>.<\/p>\n<p>By default the <code>contentPadding<\/code> reflects <a href=\"material\/InputDecorationTheme\/isDense.html\">isDense<\/a> and the type of the\n<a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>. If <a href=\"material\/InputDecorationTheme\/isCollapsed.html\">isCollapsed<\/a> is true then <code>contentPadding<\/code> is\n<a href=\"painting\/EdgeInsets\/zero-constant.html\">EdgeInsets.zero<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry contentPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/contentPadding.html",
            "name": "contentPadding",
            "isDeprecated": false,
            "type": "painting.EdgeInsetsGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/counterText.html\">InputDecoration.counterText<\/a>.<\/p>\n<p>If null, defaults to the <a href=\"material\/InputDecorationTheme\/helperStyle.html\">helperStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle counterStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/counterStyle.html",
            "name": "counterStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is disabled and is not\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a>, which is false if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is disabled.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder disabledBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/disabledBorder.html",
            "name": "disabledBorder",
            "isDeprecated": false,
            "type": "material.InputBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is enabled and is not\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a>, which is false if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> is disabled.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder enabledBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/enabledBorder.html",
            "name": "enabledBorder",
            "isDeprecated": false,
            "type": "material.InputBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> does not have the focus and\nis showing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>, which is true if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s child\nhas the focus.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder errorBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/errorBorder.html",
            "name": "errorBorder",
            "isDeprecated": false,
            "type": "material.InputBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The maximum number of lines the <code>errorText<\/code> can occupy.<\/p>\n<p>Defaults to null, which means that the <code>errorText<\/code> will be limited\nto a single line with <a href=\"rendering\/TextOverflow-class.html\">TextOverflow.ellipsis<\/a>.<\/p>\n<p>This value is passed along to the <a href=\"widgets\/Text\/maxLines.html\">Text.maxLines<\/a> attribute\nof the <a href=\"widgets\/Text-class.html\">Text<\/a> widget used to display the error.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int errorMaxLines\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/errorMaxLines.html",
            "name": "errorMaxLines",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>.<\/p>\n<p>If null, defaults of a value derived from the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the\ninput field and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle errorStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/errorStyle.html",
            "name": "errorStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The color to fill the decoration's container with, if <a href=\"material\/InputDecorationTheme\/filled.html\">filled<\/a> is true.<\/p>\n<p>By default the fillColor is based on the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>The decoration's container is the area, defined by the border's\n<a href=\"painting\/ShapeBorder\/getOuterPath.html\">InputBorder.getOuterPath<\/a>, which is filled if <a href=\"material\/InputDecorationTheme\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color fillColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/fillColor.html",
            "name": "fillColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>If true the decoration's container is filled with <a href=\"material\/InputDecorationTheme\/fillColor.html\">fillColor<\/a>.<\/p>\n<p>Typically this field set to true if <a href=\"material\/InputDecorationTheme\/border.html\">border<\/a> is an\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>.<\/p>\n<p>The decoration's container is the area, defined by the border's\n<a href=\"painting\/ShapeBorder\/getOuterPath.html\">InputBorder.getOuterPath<\/a>, which is filled if <a href=\"material\/InputDecorationTheme\/filled.html\">filled<\/a> is\ntrue and bordered per the <a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>.<\/p>\n<p>This property is false by default.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool filled\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/filled.html",
            "name": "filled",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> has the focus and is not\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>, which is true if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s child\nhas the focus.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedErrorBorder.html\">focusedErrorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder focusedBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/focusedBorder.html",
            "name": "focusedBorder",
            "isDeprecated": false,
            "type": "material.InputBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The border to display when the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> has the focus and is\nshowing an error.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a>, which is true if the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>'s child\nhas the focus.<\/li>\n<li>\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, the error shown by the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a>, if non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/border.html\">border<\/a>, for a description of where the <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border appears.<\/li>\n<li>\n<a href=\"material\/UnderlineInputBorder-class.html\">UnderlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a horizontal\nline at the bottom of the input decorator's container.<\/li>\n<li>\n<a href=\"material\/OutlineInputBorder-class.html\">OutlineInputBorder<\/a>, an <a href=\"material\/InputDecorator-class.html\">InputDecorator<\/a> border which draws a\nrounded rectangle around the input decorator's container.<\/li>\n<li>\n<a href=\"material\/InputBorder\/none-constant.html\">InputBorder.none<\/a>, which doesn't draw a border.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/errorBorder.html\">errorBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is non-null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/focusedBorder.html\">focusedBorder<\/a>, displayed when <a href=\"material\/InputDecorator\/isFocused.html\">InputDecorator.isFocused<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/disabledBorder.html\">disabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is false\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<li>\n<a href=\"material\/InputDecorationTheme\/enabledBorder.html\">enabledBorder<\/a>, displayed when <a href=\"material\/InputDecoration\/enabled.html\">InputDecoration.enabled<\/a> is true\nand <a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a> is null.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InputBorder focusedErrorBorder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/focusedErrorBorder.html",
            "name": "focusedErrorBorder",
            "isDeprecated": false,
            "type": "material.InputBorder",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>Whether the placeholder text floats to become a label on focus.<\/p>\n<p>If this is false, the placeholder disappears when the input has focus or\ninputted text.\nIf this is true, the placeholder will rise to the top of the input when\nthe input has focus or inputted text.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool hasFloatingPlaceholder\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/hasFloatingPlaceholder.html",
            "name": "hasFloatingPlaceholder",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for <a href=\"material\/InputDecoration\/helperText.html\">InputDecoration.helperText<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle helperStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/helperStyle.html",
            "name": "helperStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/hintText.html\">InputDecoration.hintText<\/a>.<\/p>\n<p>Also used for the <code>labelText<\/code> when the <code>labelText<\/code> is displayed on\ntop of the input field (i.e., at the same location on the screen where\ntext may be entered in the input field).<\/p>\n<p>If null, defaults to a value derived from the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the\ninput field and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle hintStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/hintStyle.html",
            "name": "hintStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>Whether the decoration is the same size as the input field.<\/p>\n<p>A collapsed decoration cannot have <a href=\"material\/InputDecoration\/labelText.html\">InputDecoration.labelText<\/a>,\n<a href=\"material\/InputDecoration\/errorText.html\">InputDecoration.errorText<\/a>, or an <a href=\"material\/InputDecoration\/icon.html\">InputDecoration.icon<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isCollapsed\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/isCollapsed.html",
            "name": "isCollapsed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>Whether the input decorator's child is part of a dense form (i.e., uses\nless vertical space).<\/p>\n<p>Defaults to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDense\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/isDense.html",
            "name": "isDense",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for <a href=\"material\/InputDecoration\/labelText.html\">InputDecoration.labelText<\/a> when the label is\nabove (i.e., vertically adjacent to) the input field.<\/p>\n<p>When the <code>labelText<\/code> is on top of the input field, the text uses the\n<a href=\"material\/InputDecorationTheme\/hintStyle.html\">hintStyle<\/a> instead.<\/p>\n<p>If null, defaults to a value derived from the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the\ninput field and the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/labelStyle.html",
            "name": "labelStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/prefixText.html\">InputDecoration.prefixText<\/a>.<\/p>\n<p>If null, defaults to the <a href=\"material\/InputDecorationTheme\/hintStyle.html\">hintStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle prefixStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/prefixStyle.html",
            "name": "prefixStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        },
        {
            "desc": "<p>The style to use for the <a href=\"material\/InputDecoration\/suffixText.html\">InputDecoration.suffixText<\/a>.<\/p>\n<p>If null, defaults to the <a href=\"material\/InputDecorationTheme\/hintStyle.html\">hintStyle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle suffixStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/InputDecorationTheme\/suffixStyle.html",
            "name": "suffixStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.InputDecorationTheme",
            "params": []
        }
    ]
}