{
    "name": "dart:ui.Gradient",
    "extends": [
        "dart:ui.Shader",
        "dart:core.Object"
    ],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "Gradient.linear",
            "type": "",
            "desc": "<p>Creates a linear gradient from <code>from<\/code> to <code>to<\/code>.<\/p>\n<p>If <code>colorStops<\/code> is provided, <code>colorStops[i]<\/code> is a number from 0.0 to 1.0\nthat specifies where <code>color[i]<\/code> begins in the gradient. If <code>colorStops<\/code> is\nnot provided, then only two stops, at 0.0 and 1.0, are implied (and\n<code>color<\/code> must therefore only have two entries).<\/p>\n<p>The behavior before <code>from<\/code> and after <code>to<\/code> is described by the <code>tileMode<\/code>\nargument. For details, see the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> enum.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_linear.png\"><\/p>\n<p>If <code>from<\/code>, <code>to<\/code>, <code>colors<\/code>, or <code>tileMode<\/code> are null, or if <code>colors<\/code> or\n<code>colorStops<\/code> contain null values, this constructor will throw a\n<a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Gradient",
            "sig": "",
            "params": [
                {
                    "name": "from",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "to",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colors",
                    "type": "dart:core.List<dart:ui.Color>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Color"
                    ]
                },
                {
                    "name": "colorStops",
                    "type": "dart:core.List<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Gradient\/Gradient.linear.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient.linear(\n  Offset from,\n  Offset to,\n  List&lt;Color&gt; colors, [\n  List&lt;double&gt; colorStops,\n  TileMode tileMode = TileMode.clamp,\n]) : assert(_offsetIsValid(from)),\n     assert(_offsetIsValid(to)),\n     assert(colors != null),\n     assert(tileMode != null),\n     super._() {\n  _validateColorStops(colors, colorStops);\n  final Float32List endPointsBuffer = _encodeTwoPoints(from, to);\n  final Int32List colorsBuffer = _encodeColorList(colors);\n  final Float32List colorStopsBuffer = colorStops == null ? null : new Float32List.fromList(colorStops);\n  _constructor();\n  _initLinear(endPointsBuffer, colorsBuffer, colorStopsBuffer, tileMode.index);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Gradient.radial",
            "type": "",
            "desc": "<p>Creates a radial gradient centered at <code>center<\/code> that ends at <code>radius<\/code>\ndistance from the center.<\/p>\n<p>If <code>colorStops<\/code> is provided, <code>colorStops[i]<\/code> is a number from 0.0 to 1.0\nthat specifies where <code>color[i]<\/code> begins in the gradient. If <code>colorStops<\/code> is\nnot provided, then only two stops, at 0.0 and 1.0, are implied (and\n<code>color<\/code> must therefore only have two entries).<\/p>\n<p>The behavior before and after the radius is described by the <code>tileMode<\/code>\nargument. For details, see the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> enum.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_radial.png\"><\/p>\n<p>If <code>center<\/code>, <code>radius<\/code>, <code>colors<\/code>, or <code>tileMode<\/code> are null, or if <code>colors<\/code> or\n<code>colorStops<\/code> contain null values, this constructor will throw a\n<a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n<p>If <code>matrix4<\/code> is provided, the gradient fill will be transformed by the\nspecified 4x4 matrix relative to the local coordinate system. <code>matrix4<\/code> must\nbe a column-major matrix packed into a list of 16 values.<\/p>\n<p>If <code>focal<\/code> is provided and not equal to <code>center<\/code> and <code>focalRadius<\/code> is\nprovided and not equal to 0.0, the generated shader will be a two point\nconical radial gradient, with <code>focal<\/code> being the center of the focal\ncircle and <code>focalRadius<\/code> being the radius of that circle. If <code>focal<\/code> is\nprovided and not equal to <code>center<\/code>, at least one of the two offsets must\nnot be equal to <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Gradient",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colors",
                    "type": "dart:core.List<dart:ui.Color>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Color"
                    ]
                },
                {
                    "name": "colorStops",
                    "type": "dart:core.List<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matrix4",
                    "type": "dart:typed_data.Float64List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "focal",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "focalRadius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Gradient\/Gradient.radial.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient.radial(\n  Offset center,\n  double radius,\n  List&lt;Color&gt; colors, [\n  List&lt;double&gt; colorStops,\n  TileMode tileMode = TileMode.clamp,\n  Float64List matrix4,\n  Offset focal,\n  double focalRadius = 0.0\n]) : assert(_offsetIsValid(center)),\n     assert(colors != null),\n     assert(tileMode != null),\n     assert(matrix4 == null || _matrix4IsValid(matrix4)),\n     super._() {\n  focalRadius ??= 0.0;\n  _validateColorStops(colors, colorStops);\n  final Int32List colorsBuffer = _encodeColorList(colors);\n  final Float32List colorStopsBuffer = colorStops == null ? null : new Float32List.fromList(colorStops);\n\n  \/\/ If focal is null or focal radius is null, this should be treated as a regular radial gradient\n  \/\/ If focal == center and the focal radius is 0.0, it's still a regular radial gradient\n  if (focal == null || (focal == center &amp;&amp; focalRadius == 0.0)) {\n    _constructor();\n    _initRadial(center.dx, center.dy, radius, colorsBuffer, colorStopsBuffer, tileMode.index, matrix4);\n  } else {\n    assert(center != Offset.zero || focal != Offset.zero); \/\/ will result in exception(s) in Skia side\n    _constructor();\n    _initConical(focal.dx, focal.dy, focalRadius, center.dx, center.dy, radius, colorsBuffer, colorStopsBuffer, tileMode.index, matrix4);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Gradient.sweep",
            "type": "",
            "desc": "<p>Creates a sweep gradient centered at <code>center<\/code> that starts at <code>startAngle<\/code>\nand ends at <code>endAngle<\/code>.<\/p>\n<p><code>startAngle<\/code> and <code>endAngle<\/code> should be provided in radians, with zero\nradians being the horizontal line to the right of the <code>center<\/code> and with\npositive angles going clockwise around the <code>center<\/code>.<\/p>\n<p>If <code>colorStops<\/code> is provided, <code>colorStops[i]<\/code> is a number from 0.0 to 1.0\nthat specifies where <code>color[i]<\/code> begins in the gradient. If <code>colorStops<\/code> is\nnot provided, then only two stops, at 0.0 and 1.0, are implied (and\n<code>color<\/code> must therefore only have two entries).<\/p>\n<p>The behavior before <code>startAngle<\/code> and after <code>endAngle<\/code> is described by the\n<code>tileMode<\/code> argument. For details, see the <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a> enum.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_sweep.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_sweep.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_sweep.png\"><\/p>\n<p>If <code>center<\/code>, <code>colors<\/code>, <code>tileMode<\/code>, <code>startAngle<\/code>, or <code>endAngle<\/code> are null,\nor if <code>colors<\/code> or <code>colorStops<\/code> contain null values, this constructor will\nthrow a <a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n<p>If <code>matrix4<\/code> is provided, the gradient fill will be transformed by the\nspecified 4x4 matrix relative to the local coordinate system. <code>matrix4<\/code> must\nbe a column-major matrix packed into a list of 16 values.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Gradient",
            "sig": "",
            "params": [
                {
                    "name": "center",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colors",
                    "type": "dart:core.List<dart:ui.Color>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Color"
                    ]
                },
                {
                    "name": "colorStops",
                    "type": "dart:core.List<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "startAngle",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "endAngle",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "matrix4",
                    "type": "dart:typed_data.Float64List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Gradient\/Gradient.sweep.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient.sweep(\n  Offset center,\n  List&lt;Color&gt; colors, [\n  List&lt;double&gt; colorStops,\n  TileMode tileMode = TileMode.clamp,\n  double startAngle = 0.0,\n  double endAngle = math.pi * 2,\n  Float64List matrix4,\n]) : assert(_offsetIsValid(center)),\n     assert(colors != null),\n     assert(tileMode != null),\n     assert(startAngle != null),\n     assert(endAngle != null),\n     assert(startAngle &lt; endAngle),\n     assert(matrix4 == null || _matrix4IsValid(matrix4)),\n     super._() {\n  _validateColorStops(colors, colorStops);\n  final Int32List colorsBuffer = _encodeColorList(colors);\n  final Float32List colorStopsBuffer = colorStops == null ? null : new Float32List.fromList(colorStops);\n  _constructor();\n  _initSweep(center.dx, center.dy, colorsBuffer, colorStopsBuffer, tileMode.index, startAngle, endAngle, matrix4);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-ui\/Gradient-class.html",
    "desc": "<p>A shader (as used by <a href=\"dart-ui\/Paint\/shader.html\">Paint.shader<\/a>) that renders a color gradient.<\/p>\n<p>There are several types of gradients, represented by the various constructors\non this class.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/painting\/Gradient-class.html\">Gradient<\/a>, the class in the <a href=\"painting\/painting-library.html\">painting<\/a> library.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Gradient"
}