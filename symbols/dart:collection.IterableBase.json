{
    "desc": "<p>Base class for implementing <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>This class implements all methods of <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>, except <a href=\"dart-core\/Iterable\/iterator.html\">Iterable.iterator<\/a>,\nin terms of <code>iterator<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-collection\/IterableBase-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:collection",
    "name": "dart:collection.IterableBase",
    "shortname": "IterableBase",
    "extends": [
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "collection.CombinedIterableView",
        "collection.IterableZip",
        "dart:ui.PathMetrics",
        "foundation.CachingIterable",
        "path.PathSet",
        "quiver.collection.AvlTreeSet",
        "quiver.core.Optional",
        "quiver.iterables.EnumerateIterable",
        "quiver.iterables.GeneratingIterable"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IterableBase();<\/code><\/pre>\n    ",
            "href": "dart-collection\/IterableBase\/IterableBase.html",
            "isDeprecated": "0",
            "type": "",
            "name": "IterableBase",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.IterableBase",
            "params": []
        },
        {
            "desc": "<p>Converts an <code>Iterable<\/code> to a string.<\/p>\n<p>Converts each elements to a string, and separates the results by \", \".\nThen wraps the result in <code>leftDelimiter<\/code> and <code>rightDelimiter<\/code>.<\/p>\n<p>Unlike <a href=\"dart-collection\/IterableBase\/iterableToShortString.html\">iterableToShortString<\/a>, this conversion doesn't omit any\nelements or puts any limit on the size of the result.<\/p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <code>iterable<\/code> to a string again.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String iterableToFullString(Iterable iterable,\n    [String leftDelimiter = '(', String rightDelimiter = ')']) {\n  if (_isToStringVisiting(iterable)) {\n    return \"$leftDelimiter...$rightDelimiter\";\n  }\n  StringBuffer buffer = StringBuffer(leftDelimiter);\n  _toStringVisiting.add(iterable);\n  try {\n    buffer.writeAll(iterable, \", \");\n  } finally {\n    assert(identical(_toStringVisiting.last, iterable));\n    _toStringVisiting.removeLast();\n  }\n  buffer.write(rightDelimiter);\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/IterableBase\/iterableToFullString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "iterableToFullString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.IterableBase",
            "params": [
                {
                    "name": "iterable",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "leftDelimiter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "rightDelimiter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Convert an <code>Iterable<\/code> to a string like <a href=\"dart-core\/Iterable\/toString.html\">IterableBase.toString<\/a>.<\/p>\n<p>Allows using other delimiters than '(' and ')'.<\/p>\n<p>Handles circular references where converting one of the elements\nto a string ends up converting <code>iterable<\/code> to a string again.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String iterableToShortString(Iterable iterable,\n    [String leftDelimiter = '(', String rightDelimiter = ')']) {\n  if (_isToStringVisiting(iterable)) {\n    if (leftDelimiter == \"(\" &amp;&amp; rightDelimiter == \")\") {\n      \/\/ Avoid creating a new string in the \"common\" case.\n      return \"(...)\";\n    }\n    return \"$leftDelimiter...$rightDelimiter\";\n  }\n  List&lt;String&gt; parts = &lt;String&gt;[];\n  _toStringVisiting.add(iterable);\n  try {\n    _iterablePartsToStrings(iterable, parts);\n  } finally {\n    assert(identical(_toStringVisiting.last, iterable));\n    _toStringVisiting.removeLast();\n  }\n  return (StringBuffer(leftDelimiter)\n        ..writeAll(parts, \", \")\n        ..write(rightDelimiter))\n      .toString();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/IterableBase\/iterableToShortString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "iterableToShortString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.IterableBase",
            "params": [
                {
                    "name": "iterable",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                },
                {
                    "name": "leftDelimiter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "rightDelimiter",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": []
}