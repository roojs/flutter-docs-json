{
    "name": "material.PopupMenuDivider",
    "extends": [
        "dart:core.Null",
        "material.PopupMenuEntry",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "PopupMenuDivider",
            "type": "",
            "desc": "<p>Creates a horizontal divider for a popup menu.<\/p>\n<p>By default, the divider has a height of 16 logical pixels.<\/p>\n    ",
            "static": false,
            "memberOf": "material.PopupMenuDivider",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/PopupMenuDivider\/PopupMenuDivider.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const PopupMenuDivider({ Key key, this.height = _kMenuDividerHeight }) : super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/PopupMenuDivider\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.PopupMenuDivider",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/PopupMenuDivider\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_PopupMenuDividerState createState() =&gt; _PopupMenuDividerState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "represents",
            "type": "dart:core.bool",
            "desc": "<p>Whether this entry represents a particular value.<\/p>\n<p>This method is used by <a href=\"material\/showMenu.html\">showMenu<\/a>, when it is called, to align the entry\nrepresenting the <code>initialValue<\/code>, if any, to the given <code>position<\/code>, and then\nlater is called on each entry to determine if it should be highlighted (if\nthe method returns true, the entry will have its background color set to\nthe ambient <a href=\"material\/ThemeData\/highlightColor.html\">ThemeData.highlightColor<\/a>). If <code>initialValue<\/code> is null, then\nthis method is not called.<\/p>\n<p>If the <a href=\"material\/PopupMenuEntry-class.html\">PopupMenuEntry<\/a> represents a single value, this should return true\nif the argument matches that value. If it represents multiple values, it\nshould return true if the argument matches any of them.<\/p>\n    ",
            "static": false,
            "memberOf": "material.PopupMenuDivider",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "material\/PopupMenuDivider\/represents.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool represents(void value) =&gt; false;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "height",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The height of the divider entry.<\/p>\n<p>Defaults to 16 pixels.<\/p>\n        ",
            "memberOf": "material.PopupMenuDivider",
            "isConstant": false,
            "href": "material\/PopupMenuDivider\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/PopupMenuDivider-class.html",
    "desc": "<p>A horizontal divider in a material design popup menu.<\/p>\n<p>This widget adapts the <a href=\"material\/Divider-class.html\">Divider<\/a> for use in popup menus.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a>, for the kinds of items that this widget divides.<\/li>\n<li>\n<a href=\"material\/showMenu.html\">showMenu<\/a>, a method to dynamically show a popup menu at a given location.<\/li>\n<li>\n<a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a>, an <a href=\"material\/IconButton-class.html\">IconButton<\/a> that automatically shows a menu when\nit is tapped.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "PopupMenuDivider"
}