{
    "name": "material.RawChip",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [
        {
            "name": "onDeleted",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>Called when the user taps the <a href=\"material\/RawChip\/deleteIcon.html\">deleteIcon<\/a> to delete the chip.<\/p>\n<p>If null, the delete button will not appear on the chip.<\/p>\n<p>The chip will not automatically remove itself: this just tells the app\nthat the user tapped the delete button. In order to delete the chip, you\nhave to do something similar to the following sample:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis sample shows how to use <a href=\"material\/RawChip\/onDeleted.html\">onDeleted<\/a> to remove an entry when the\ndelete button is tapped.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">class Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  @override\n  State createState() =&gt; CastListState();\n}\n\nclass CastListState extends State&lt;CastList&gt; {\n  final List&lt;Actor&gt; _cast = &lt;Actor&gt;[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable&lt;Widget&gt; get actorWidgets sync* {\n    for (Actor actor in _cast) {\n      yield Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\n\/\/ ...\n\n@override\nWidget build(BuildContext context) {\n  return Center(child: CastList());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=chip.DeletableChipAttributes.onDeleted.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for chip.DeletableChipAttributes.onDeleted.1\n\n\/\/ This sample shows how to use [onDeleted] to remove an entry when the\n\/\/ delete button is tapped.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\nclass Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  @override\n  State createState() =&gt; CastListState();\n}\n\nclass CastListState extends State&lt;CastList&gt; {\n  final List&lt;Actor&gt; _cast = &lt;Actor&gt;[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable&lt;Widget&gt; get actorWidgets sync* {\n    for (Actor actor in _cast) {\n      yield Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Center(child: CastList());\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RawChip\/onDeleted.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDeleted\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onPressed",
            "type": "dart:ui.VoidCallback",
            "desc": "<p>Called when the user taps the chip.<\/p>\n<p>If <a href=\"material\/RawChip\/onPressed.html\">onPressed<\/a> is set, then this callback will be called when the user\ntaps on the label or avatar parts of the chip. If <a href=\"material\/RawChip\/onPressed.html\">onPressed<\/a> is null,\nthen the chip will be disabled.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Blacksmith extends StatelessWidget {\n  void startHammering() {\n    print('bang bang bang');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return InputChip(\n      label: const Text('Apply Hammer'),\n      onPressed: startHammering,\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RawChip\/onPressed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        },
        {
            "name": "onSelected",
            "type": "foundation.ValueChanged<dart:core.bool>",
            "desc": "<p>Called when the chip should change between selected and de-selected\nstates.<\/p>\n<p>When the chip is tapped, then the <a href=\"material\/RawChip\/onSelected.html\">onSelected<\/a> callback, if set, will be\napplied to <code>!selected<\/code> (see <a href=\"material\/RawChip\/selected.html\">selected<\/a>).<\/p>\n<p>The chip passes the new value to the callback but does not actually\nchange state until the parent widget rebuilds the chip with the new\nvalue.<\/p>\n<p>The callback provided to <a href=\"material\/RawChip\/onSelected.html\">onSelected<\/a> should update the state of the\nparent <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the\nparent gets rebuilt.<\/p>\n<p>The <a href=\"material\/RawChip\/onSelected.html\">onSelected<\/a> and <a href=\"material\/RawChip\/onPressed.html\">TappableChipAttributes.onPressed<\/a> callbacks must not\nboth be specified at the same time.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> that illustrates use of onSelected in an <a href=\"material\/InputChip-class.html\">InputChip<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Wood extends StatefulWidget {\n  @override\n  State&lt;StatefulWidget&gt; createState() =&gt; WoodState();\n}\n\nclass WoodState extends State&lt;Wood&gt; {\n  bool _useChisel = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return InputChip(\n      label: const Text('Use Chisel'),\n      selected: _useChisel,\n      onSelected: (bool newValue) {\n        setState(() {\n          _useChisel = newValue;\n        });\n      },\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RawChip\/onSelected.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onSelected\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false,
            "types": [
                "foundation.ValueChanged",
                "dart:core.bool"
            ]
        }
    ],
    "methods": [
        {
            "name": "RawChip",
            "type": "",
            "desc": "<p>Creates a RawChip<\/p>\n<p>The <code>onPressed<\/code> and <code>onSelected<\/code> callbacks must not both be specified at\nthe same time.<\/p>\n<p>The <code>label<\/code>, <code>isEnabled<\/code>, and <code>clipBehavior<\/code> arguments must not be null.\nThe <code>pressElevation<\/code> and <code>elevation<\/code> must be null or non-negative.\nTypically, <code>pressElevation<\/code> is greater than <code>elevation<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "material.RawChip",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "avatar",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "label",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelStyle",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "labelPadding",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "deleteIcon",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onDeleted",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "deleteIconColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "deleteButtonTooltipMessage",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onPressed",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onSelected",
                    "type": "foundation.ValueChanged<dart:core.bool>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "foundation.ValueChanged",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "pressElevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tapEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "selected",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showCheckmark",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isEnabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "disabledColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "selectedColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "tooltip",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "clipBehavior",
                    "type": "dart:ui.Clip",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "materialTapTargetSize",
                    "type": "material.MaterialTapTargetSize",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "elevation",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shadowColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "selectedShadowColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "avatarBorder",
                    "type": "painting.CircleBorder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/RawChip\/RawChip.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawChip({\n  Key key,\n  this.avatar,\n  @required this.label,\n  this.labelStyle,\n  this.padding,\n  this.labelPadding,\n  Widget deleteIcon,\n  this.onDeleted,\n  this.deleteIconColor,\n  this.deleteButtonTooltipMessage,\n  this.onPressed,\n  this.onSelected,\n  this.pressElevation,\n  this.tapEnabled = true,\n  this.selected,\n  this.showCheckmark = true,\n  this.isEnabled = true,\n  this.disabledColor,\n  this.selectedColor,\n  this.tooltip,\n  this.shape,\n  this.clipBehavior = Clip.none,\n  this.backgroundColor,\n  this.materialTapTargetSize,\n  this.elevation,\n  this.shadowColor,\n  this.selectedShadowColor,\n  this.avatarBorder = const CircleBorder(),\n}) : assert(label != null),\n     assert(isEnabled != null),\n     assert(clipBehavior != null),\n     assert(pressElevation == null || pressElevation &gt;= 0.0),\n     assert(elevation == null || elevation &gt;= 0.0),\n     deleteIcon = deleteIcon ?? _kDefaultDeleteIcon,\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/RawChip\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.RawChip",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/RawChip\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_RawChipState createState() =&gt; _RawChipState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "avatar",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>A widget to display prior to the chip's label.<\/p>\n<p>Typically a <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> widget.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/avatar.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget avatar\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "avatarBorder",
            "type": "painting.CircleBorder",
            "types": [],
            "desc": "<p>The shape of the translucent highlight painted over the avatar when the\n<a href=\"material\/RawChip\/selected.html\">selected<\/a> property is true.<\/p>\n<p>Only the outer path of the shape is used.<\/p>\n<p>Defaults to <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/avatarBorder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CircleBorder avatarBorder\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "backgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color to be used for the unselected, enabled chip's background.<\/p>\n<p>The default is light grey.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/backgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "clipBehavior",
            "type": "dart:ui.Clip",
            "types": [],
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/clipBehavior.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "deleteButtonTooltipMessage",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The message to be used for the chip's delete button tooltip.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/deleteButtonTooltipMessage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String deleteButtonTooltipMessage\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "deleteIcon",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The icon displayed when <a href=\"material\/RawChip\/onDeleted.html\">onDeleted<\/a> is set.<\/p>\n<p>Defaults to an <a href=\"widgets\/Icon-class.html\">Icon<\/a> widget set to use <a href=\"material\/Icons\/cancel-constant.html\">Icons.cancel<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/deleteIcon.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget deleteIcon\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "deleteIconColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The <a href=\"dart-ui\/Color-class.html\">Color<\/a> for the delete icon. The default is based on the ambient\n<code>IconTheme.color<\/code>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/deleteIconColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color deleteIconColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "disabledColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color to be used for the chip's background indicating that it is disabled.<\/p>\n<p>The chip is disabled when <a href=\"material\/RawChip\/isEnabled.html\">isEnabled<\/a> is false, or all three of\n<a href=\"material\/RawChip\/onSelected.html\">SelectableChipAttributes.onSelected<\/a>, <a href=\"material\/RawChip\/onPressed.html\">TappableChipAttributes.onPressed<\/a>,\nand <code>DeletableChipAttributes.onDelete<\/code> are null.<\/p>\n<p>It defaults to <a href=\"material\/Colors\/black38-constant.html\">Colors.black38<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/disabledColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "elevation",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Elevation to be applied on the chip relative to its parent.<\/p>\n<p>This controls the size of the shadow below the chip.<\/p>\n<p>Defaults to 0. The value is always non-negative.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/elevation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEnabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether or not this chip is enabled for input.<\/p>\n<p>If this is true, but all of the user action callbacks are null (i.e.\n<a href=\"material\/RawChip\/onSelected.html\">SelectableChipAttributes.onSelected<\/a>, <a href=\"material\/RawChip\/onPressed.html\">TappableChipAttributes.onPressed<\/a>,\nand <code>DeletableChipAttributes.onDelete<\/code>), then the\ncontrol will still be shown as disabled.<\/p>\n<p>This is typically used if you want the chip to be disabled, but also show\na delete button.<\/p>\n<p>For classes which don't have this as a constructor argument, <a href=\"material\/RawChip\/isEnabled.html\">isEnabled<\/a>\nreturns true if their user action callback is set.<\/p>\n<p>Defaults to true. Cannot be null.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/isEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isEnabled\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "label",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The primary content of the chip.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/label.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget label\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelPadding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The padding around the <a href=\"material\/RawChip\/label.html\">label<\/a> widget.<\/p>\n<p>By default, this is 4 logical pixels at the beginning and the end of the\nlabel, and zero on top and bottom.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/labelPadding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry labelPadding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "labelStyle",
            "type": "painting.TextStyle",
            "types": [],
            "desc": "<p>The style to be applied to the chip's label.<\/p>\n<p>This only has an effect on widgets that respect the <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>,\nsuch as <a href=\"widgets\/Text-class.html\">Text<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/labelStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle labelStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "materialTapTargetSize",
            "type": "material.MaterialTapTargetSize",
            "types": [],
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/RawChip\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/materialTapTargetSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "padding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>The padding between the contents of the chip and the outside <a href=\"material\/RawChip\/shape.html\">shape<\/a>.<\/p>\n<p>Defaults to 4 logical pixels on all sides.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/padding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pressElevation",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Elevation to be applied on the chip relative to its parent during the\npress motion.<\/p>\n<p>This controls the size of the shadow below the chip.<\/p>\n<p>Defaults to 8. The value is always non-negative.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/pressElevation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressElevation\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selected",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether or not this chip is selected.<\/p>\n<p>If <a href=\"material\/RawChip\/onSelected.html\">onSelected<\/a> is not null, this value will be used to determine if the\nselect check mark will be shown or not.<\/p>\n<p>Must not be null. Defaults to false.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/selected.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool selected\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selectedColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color to be used for the chip's background, indicating that it is\nselected.<\/p>\n<p>The chip is selected when <a href=\"material\/RawChip\/selected.html\">selected<\/a> is true.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/selectedColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selectedShadowColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0 and the\nchip is selected.<\/p>\n<p>The default is <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/selectedShadowColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedShadowColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shadowColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Color of the chip's shadow when the elevation is greater than 0.<\/p>\n<p>The default is <a href=\"material\/Colors\/black-constant.html\">Colors.black<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/shadowColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color shadowColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shape",
            "type": "painting.ShapeBorder",
            "types": [],
            "desc": "<p>The <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> to draw around the chip.<\/p>\n<p>Defaults to the shape in the ambient <a href=\"material\/ChipThemeData-class.html\">ChipThemeData<\/a>.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/shape.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "showCheckmark",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether or not to show a check mark when <a href=\"material\/RawChip\/selected.html\">selected<\/a> is true.<\/p>\n<p>For instance, the <a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a> sets this to false so that it can be\nbe selected without showing the check mark.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/showCheckmark.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showCheckmark\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tapEnabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>If set, this indicates that the chip should be disabled if all of the\ntap callbacks (<a href=\"material\/RawChip\/onSelected.html\">onSelected<\/a>, <a href=\"material\/RawChip\/onPressed.html\">onPressed<\/a>) are null.<\/p>\n<p>For example, the <a href=\"material\/Chip-class.html\">Chip<\/a> class sets this to false because it can't be\ndisabled, even if no callbacks are set on it, since it is used for\ndisplaying information only.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/tapEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool tapEnabled\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "tooltip",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Tooltip string to be used for the body area (where the label and avatar\nare) of the chip.<\/p>\n        ",
            "memberOf": "material.RawChip",
            "isConstant": false,
            "href": "material\/RawChip\/tooltip.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/RawChip-class.html",
    "desc": "<p>A raw material design chip.<\/p>\n<p>This serves as the basis for all of the chip widget types to aggregate.\nIt is typically not created directly, one of the other chip types\nthat are appropriate for the use case are used instead:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a> a simple chip that can only display information and be deleted.<\/li>\n<li>\n<a href=\"material\/InputChip-class.html\">InputChip<\/a> represents a complex piece of information, such as an entity\n(person, place, or thing) or conversational text, in a compact form.<\/li>\n<li>\n<a href=\"material\/ChoiceChip-class.html\">ChoiceChip<\/a> allows a single selection from a set of options.<\/li>\n<li>\n<a href=\"material\/FilterChip-class.html\">FilterChip<\/a> a chip that uses tags or descriptive words as a way to\nfilter content.<\/li>\n<li>\n<a href=\"material\/ActionChip-class.html\">ActionChip<\/a>s display a set of actions related to primary content.<\/li>\n<\/ul>\n<p>Raw chips are typically only used if you want to create your own custom chip\ntype.<\/p>\n<p>Raw chips can be selected by setting <a href=\"material\/RawChip\/onSelected.html\">onSelected<\/a>, deleted by setting\n<a href=\"material\/RawChip\/onDeleted.html\">onDeleted<\/a>, and pushed like a button with <a href=\"material\/RawChip\/onPressed.html\">onPressed<\/a>. They have a <a href=\"material\/RawChip\/label.html\">label<\/a>,\nand they can have a leading icon (see <a href=\"material\/RawChip\/avatar.html\">avatar<\/a>) and a trailing icon\n(<a href=\"material\/RawChip\/deleteIcon.html\">deleteIcon<\/a>). Colors and padding can be customized.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a>, which shows images or initials of people.<\/li>\n<li>\n<a href=\"widgets\/Wrap-class.html\">Wrap<\/a>, A widget that displays its children in multiple horizontal or\nvertical runs.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/chips.html\">material.io\/design\/components\/chips.html<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RawChip"
}