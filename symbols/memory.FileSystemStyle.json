{
    "name": "memory.FileSystemStyle",
    "extends": [],
    "memberOf": "memory",
    "events": [],
    "methods": [
        {
            "name": "contextFor",
            "type": "path.Context",
            "desc": "<p>Gets an object useful for manipulating paths in this style.<\/p>\n<p>Relative path manipulations will be relative to the specified <code>path<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "memory.FileSystemStyle",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-file_memory\/FileSystemStyle\/contextFor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">p.Context contextFor(String path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "drive",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The drive upon which the root directory is mounted.<\/p>\n<p>While real-world file systems that have the notion of drives will support\nmultiple drives per system, memory file system will only support one\nroot drive.<\/p>\n<p>This will be the empty string for styles that don't have the notion of\ndrives (e.g. <a href=\"package-file_memory\/FileSystemStyle\/posix-constant.html\">posix<\/a>).<\/p>\n        ",
            "memberOf": "memory.FileSystemStyle",
            "isConstant": false,
            "href": "package-file_memory\/FileSystemStyle\/drive.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get drive;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "package-file_memory\/FileSystemStyle\/posix-constant.html",
            "desc": "<p>Mimics the Unix file system style.<\/p>\n<ul>\n<li>This style does not have the notion of drives<\/li>\n<li>All file system paths are rooted at <code>\/<\/code>\n<\/li>\n<li>The path separator is <code>\/<\/code>\n<\/li>\n<\/ul>\n<p>An example path in this style is <code>\/path\/to\/file<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FileSystemStyle posix = const _Posix()\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "posix",
            "memberOf": "memory.FileSystemStyle"
        },
        {
            "name": "root",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The string that represents the root of the file system.<\/p>\n<p>Memory file system is always single-rooted.<\/p>\n        ",
            "memberOf": "memory.FileSystemStyle",
            "isConstant": false,
            "href": "package-file_memory\/FileSystemStyle\/root.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get root =&gt; '$drive$separator';<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "separator",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The String that represents the delineation between a directory and its\nchildren.<\/p>\n        ",
            "memberOf": "memory.FileSystemStyle",
            "isConstant": false,
            "href": "package-file_memory\/FileSystemStyle\/separator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get separator;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "package-file_memory\/FileSystemStyle\/windows-constant.html",
            "desc": "<p>Mimics the Windows file system style.<\/p>\n<ul>\n<li>This style mounts its root folder on a single root drive (<code>C:<\/code>)<\/li>\n<li>All file system paths are rooted at <code>C:\\<\/code>\n<\/li>\n<li>The path separator is <code>\\<\/code>\n<\/li>\n<\/ul>\n<p>An example path in this style is <code>C:\\path\\to\\file<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FileSystemStyle windows = const _Windows()\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "windows",
            "memberOf": "memory.FileSystemStyle"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-file_memory\/FileSystemStyle-class.html",
    "desc": "<p>Class that represents the path style that a memory file system should\nadopt.<\/p>\n<p>This is primarily useful if you want to test how your code will behave\nwhen faced with particular paths or particular path separator characters.\nFor instance, you may want to test that your code will work on Windows,\nwhile still using a memory file system in order to gain hermeticity in your\ntests.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FileSystemStyle"
}