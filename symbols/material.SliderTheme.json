{
    "desc": "<p>Applies a slider theme to descendant <a href=\"material\/Slider-class.html\">Slider<\/a> widgets.<\/p>\n<p>A slider theme describes the colors and shape choices of the slider\ncomponents.<\/p>\n<p>Descendant widgets obtain the current theme's <a href=\"material\/SliderThemeData-class.html\">SliderThemeData<\/a> object using\n<a href=\"material\/SliderTheme\/of.html\">SliderTheme.of<\/a>. When a widget uses <a href=\"material\/SliderTheme\/of.html\">SliderTheme.of<\/a>, it is automatically\nrebuilt if the theme later changes.<\/p>\n<p>The slider is as big as the largest of\nthe <a href=\"material\/SliderComponentShape\/getPreferredSize.html\">SliderComponentShape.getPreferredSize<\/a> of the thumb shape,\nthe <a href=\"material\/SliderComponentShape\/getPreferredSize.html\">SliderComponentShape.getPreferredSize<\/a> of the overlay shape,\nand the <a href=\"material\/SliderTickMarkShape\/getPreferredSize.html\">SliderTickMarkShape.getPreferredSize<\/a> of the tick mark shape<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/SliderThemeData-class.html\">SliderThemeData<\/a>, which describes the actual configuration of a slider\ntheme.<\/li>\n<li>\n<a href=\"material\/SliderComponentShape-class.html\">SliderComponentShape<\/a>, which can be used to create custom shapes for\nthe slider thumb, overlay, and value indicator.<\/li>\n<li>\n<a href=\"material\/SliderTrackShape-class.html\">SliderTrackShape<\/a>, which can be used to create custom shapes for the\nslider track.<\/li>\n<li>\n<a href=\"material\/SliderTickMarkShape-class.html\">SliderTickMarkShape<\/a>, which can be used to create custom shapes for the\nslider tick marks.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/SliderTheme-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.SliderTheme",
    "shortname": "SliderTheme",
    "extends": [
        "widgets.InheritedWidget",
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Applies the given theme <code>data<\/code> to <code>child<\/code>.<\/p>\n<p>The <code>data<\/code> and <code>child<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SliderTheme({\n  Key key,\n  @required this.data,\n  @required Widget child,\n}) : assert(child != null),\n     assert(data != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "href": "material\/SliderTheme\/SliderTheme.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.SliderTheme",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "data",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Returns the data from the closest <a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a> instance that encloses\nthe given context.<\/p>\n<p>Defaults to the ambient <a href=\"material\/ThemeData\/sliderTheme.html\">ThemeData.sliderTheme<\/a> if there is no\n<a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a> in the given build context.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Launch extends StatefulWidget {\n  @override\n  State createState() =&gt; LaunchState();\n}\n\nclass LaunchState extends State&lt;Launch&gt; {\n  double _rocketThrust;\n\n  @override\n  Widget build(BuildContext context) {\n    return SliderTheme(\n      data: SliderTheme.of(context).copyWith(activeTrackColor: const Color(0xff804040)),\n      child: Slider(\n        onChanged: (double value) { setState(() { _rocketThrust = value; }); },\n        value: _rocketThrust,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/SliderThemeData-class.html\">SliderThemeData<\/a>, which describes the actual configuration of a slider\ntheme.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static SliderThemeData of(BuildContext context) {\n  final SliderTheme inheritedTheme = context.inheritFromWidgetOfExactType(SliderTheme);\n  return inheritedTheme != null ? inheritedTheme.data : Theme.of(context).sliderTheme;\n}<\/code><\/pre>\n    ",
            "href": "material\/SliderTheme\/of.html",
            "isDeprecated": "0",
            "type": "material.SliderThemeData",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SliderTheme",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(SliderTheme oldWidget) =&gt; data != oldWidget.data;<\/code><\/pre>\n    ",
            "href": "material\/SliderTheme\/updateShouldNotify.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SliderTheme",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "material.SliderTheme"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Specifies the color and shape values for descendant slider widgets.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderThemeData data\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderTheme\/data.html",
            "isDeprecated": "0",
            "type": "material.SliderThemeData",
            "memberOf": "material.SliderTheme",
            "params": []
        }
    ]
}