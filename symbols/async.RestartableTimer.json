{
    "desc": "<p>A non-periodic timer that can be restarted any number of times.<\/p>\n<p>Once restarted (via <a href=\"package-async_async\/RestartableTimer\/reset.html\">reset<\/a>), the timer counts down from its original\nduration again.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/RestartableTimer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.RestartableTimer",
    "shortname": "RestartableTimer",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new timer.<\/p>\n<p>The <code>callback<\/code> function is invoked after the given <code>duration<\/code>. Unlike a\nnormal non-periodic <a href=\"dart-async\/Timer-class.html\">Timer<\/a>, <code>callback<\/code> may be called more than once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RestartableTimer(this._duration, this._callback) {\n  _timer = new Timer(_duration, _callback);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/RestartableTimer\/RestartableTimer.html",
            "isDeprecated": false,
            "type": "",
            "name": "RestartableTimer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.RestartableTimer",
            "params": [
                {
                    "name": "_callback",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:async.ZoneCallback"
                },
                {
                    "name": "_duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Cancels the timer.<\/p>\n<p>Once a <a href=\"dart-async\/Timer-class.html\">Timer<\/a> has been canceled, the callback function will not be called\nby the timer. Calling <a href=\"package-async_async\/RestartableTimer\/cancel.html\">cancel<\/a> more than once on a <a href=\"dart-async\/Timer-class.html\">Timer<\/a> is allowed, and\nwill have no further effect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void cancel() {\n  _timer.cancel();\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/RestartableTimer\/cancel.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "cancel",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.RestartableTimer",
            "params": []
        },
        {
            "desc": "<p>Restarts the timer so that it counts down from its original duration\nagain.<\/p>\n<p>This restarts the timer even if it has already fired or has been canceled.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset() {\n  _timer.cancel();\n  _timer = new Timer(_duration, _callback);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/RestartableTimer\/reset.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "reset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.RestartableTimer",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns whether the timer is still active.<\/p>\n<p>A non-periodic timer is active if the callback has not been executed,\nand the timer has not been canceled.<\/p>\n<p>A periodic timer is active if it has not been canceled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isActive =&gt; _timer.isActive;<\/code><\/pre>\n        ",
            "href": "package-async_async\/RestartableTimer\/isActive.html",
            "name": "isActive",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.RestartableTimer",
            "params": []
        },
        {
            "desc": "<p>The number of durations preceding the most recent timer event.<\/p>\n<p>The value starts at zero and is incremented each time a timer event\noccurs, so each callback will see a larger value than the previous one.<\/p>\n<p>If a periodic timer with a non-zero duration is delayed too much,\nso more than one tick should have happened,\nall but the last tick in the past are considered \"missed\",\nand no callback is invoked for them.\nThe <a href=\"package-async_async\/RestartableTimer\/tick.html\">tick<\/a> count reflects the number of durations that have passed and\nnot the number of callback invocations that have happened.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ See https:\/\/github.com\/dart-lang\/sdk\/issues\/31664\n\/\/ ignore: override_on_non_overriding_getter\nint get tick {\n  throw new UnimplementedError(\"tick\");\n}<\/code><\/pre>\n        ",
            "href": "package-async_async\/RestartableTimer\/tick.html",
            "name": "tick",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "async.RestartableTimer",
            "params": []
        }
    ]
}