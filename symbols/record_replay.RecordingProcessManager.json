{
    "desc": "<p>Records process invocation activity and serializes it to disk.<\/p>\n<p>A <code>RecordingProcessManager<\/code> decorates another <code>ProcessManager<\/code> instance by\nrecording all process invocation activity (including the stdout and stderr\nof the associated processes) before delegating to the underlying manager.<\/p>\n<p>This class enables \"record \/ replay\" tests, where you record the process\ninvocation activity during a real program run, serialize the activity to\ndisk, then fake all invocation activity during tests by replaying the\nserialized recording.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"package-process_record_replay\/ReplayProcessManager-class.html\">ReplayProcessManager<\/a>.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "package-process_record_replay\/RecordingProcessManager-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "record_replay",
    "name": "record_replay.RecordingProcessManager",
    "shortname": "RecordingProcessManager",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Constructs a new <code>RecordingProcessManager<\/code>.<\/p>\n<p>This manager will record all process invocations and serialize them to\nthe specified <code>destination<\/code>. The underlying <code>ProcessManager<\/code> functionality\nwill be delegated to <code>delegate<\/code>.<\/p>\n<p>If <code>destination<\/code> does not already exist, or if it exists and is not empty,\na <a href=\"dart-core\/StateError-class.html\">StateError<\/a> will be thrown.<\/p>\n<p><code>destination<\/code> should be treated as opaque. Its contents are intended to\nbe consumed only by <a href=\"package-process_record_replay\/ReplayProcessManager-class.html\">ReplayProcessManager<\/a> and are subject to change\nbetween versions of <code>package:process<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RecordingProcessManager(this.delegate, this.destination) {\n  if (!destination.existsSync() || destination.listSync().isNotEmpty) {\n    throw new StateError('Cannot record to ${destination.path}');\n  }\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/RecordingProcessManager.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "delegate",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "process.ProcessManager"
                },
                {
                    "name": "destination",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "file.Directory"
                }
            ]
        },
        {
            "desc": "<p>Returns <code>true<\/code> if the <code>executable<\/code> exists and if it can be executed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool canRun(dynamic executable, {String workingDirectory}) {\n  bool result =\n      delegate.canRun(executable, workingDirectory: workingDirectory);\n  _manifest.add(new CanRunManifestEntry(\n      executable: executable.toString(), result: result));\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/canRun.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "executable",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "workingDirectory",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Flushes pending data to <a href=\"package-process_record_replay\/RecordingProcessManager\/destination.html\">destination<\/a>.<\/p>\n<p>This manager may buffer invocation metadata in memory as it sees fit.\nCalling <code>flush<\/code> will force the manager to write any pending data to disk.\nThis returns a future that completes when all pending data has been\nwritten to disk.<\/p>\n<p>Failure to call this method before the current process exits will likely\ncause invocation data to be lost.<\/p>\n<p>If <code>finishRunningProcesses<\/code> is true, the returned future will only\ncomplete after all running processes have exited, thus guaranteeing that\nno new invocation data will be generated until new processes are invoked.\nAny processes that don't exit on their own within the specified <code>timeout<\/code>\nwill be marked as daemon processes in the serialized metadata and will be\nsignalled with <code>SIGTERM<\/code>. If such processes <em>still<\/em> don't exit within the\nspecified <code>timeout<\/code> after being signalled, they'll be marked as not\nresponding in the serialized metadata.<\/p>\n<p>If <code>finishRunningProcesses<\/code> is false (the default), then <code>timeout<\/code> is\nignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Null&gt; flush({\n  bool finishRunningProcesses: false,\n  Duration timeout: const Duration(milliseconds: 20),\n}) async {\n  if (finishRunningProcesses) {\n    await _waitForRunningProcessesToExit(timeout);\n  }\n  await _writeManifestToDisk();\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/flush.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:core.Null>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "finishRunningProcesses",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "timeout",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Kills the process with id <code>pid<\/code>.<\/p>\n<p>Where possible, sends the <code>signal<\/code> to the process with id\n<code>pid<\/code>. This includes Linux and OS X. The default signal is\n<a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a> which will normally terminate the\nprocess.<\/p>\n<p>On platforms without signal support, including Windows, the call\njust terminates the process with id <code>pid<\/code> in a platform specific\nway, and the <code>signal<\/code> parameter is ignored.<\/p>\n<p>Returns <code>true<\/code> if the signal is successfully delivered to the\nprocess. Otherwise the signal could not be sent, usually meaning\nthat the process is already dead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool killPid(int pid, [io.ProcessSignal signal = io.ProcessSignal.sigterm]) {\n  return delegate.killPid(pid, signal);\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/killPid.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "pid",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "signal",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.ProcessSignal"
                }
            ]
        },
        {
            "desc": "<p>Starts a process and runs it non-interactively to completion.<\/p>\n<p>The first element in <code>command<\/code> will be treated as the executable to run,\nwith subsequent elements being passed as arguments to the executable. It\nis left to implementations to decide what element types they support in\nthe <code>command<\/code> list.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is true, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>The encoding used for decoding <code>stdout<\/code> and <code>stderr<\/code> into text is\ncontrolled through <code>stdoutEncoding<\/code> and <code>stderrEncoding<\/code>. The\ndefault encoding is <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>. If <code>null<\/code> is used no\ndecoding will happen and the <a href=\"dart-io\/ProcessResult-class.html\">ProcessResult<\/a> will hold binary\ndata.<\/p>\n<p>Returns a <code>Future&lt;ProcessResult&gt;<\/code> that completes with the\nresult of running the process, i.e., exit code, standard out and\nstandard in.<\/p>\n<p>The following code uses <code>run<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>ProcessManager mgr = new LocalProcessManager();\nmgr.run('grep', ['-i', 'main', 'test.dart']).then((result) {\n  stdout.write(result.stdout);\n  stderr.write(result.stderr);\n});\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.ProcessResult&gt; run(\n  List&lt;dynamic&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  Encoding stdoutEncoding: io.systemEncoding,\n  Encoding stderrEncoding: io.systemEncoding,\n}) async {\n  io.ProcessResult result = await delegate.run(\n    command,\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    stdoutEncoding: stdoutEncoding,\n    stderrEncoding: stderrEncoding,\n  );\n\n  List&lt;String&gt; sanitizedCommand = sanitize(command);\n  String basename = _getBasename(result.pid, sanitizedCommand);\n  _manifest.add(new RunManifestEntry(\n    pid: result.pid,\n    basename: basename,\n    command: sanitizedCommand,\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    stdoutEncoding: stdoutEncoding,\n    stderrEncoding: stderrEncoding,\n    exitCode: result.exitCode,\n  ));\n\n  await _recordData(result.stdout, stdoutEncoding, '$basename.stdout');\n  await _recordData(result.stderr, stderrEncoding, '$basename.stderr');\n\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/run.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.ProcessResult>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "command",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List"
                },
                {
                    "name": "environment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>"
                },
                {
                    "name": "includeParentEnvironment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "runInShell",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "stderrEncoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "stdoutEncoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "workingDirectory",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Starts a process and runs it to completion. This is a synchronous\ncall and will block until the child process terminates.<\/p>\n<p>The arguments are the same as for <a href=\"package-process_record_replay\/RecordingProcessManager\/run.html\">run<\/a>`.<\/p>\n<p>Returns a <code>ProcessResult<\/code> with the result of running the process,\ni.e., exit code, standard out and standard in.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nio.ProcessResult runSync(\n  List&lt;dynamic&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  Encoding stdoutEncoding: io.systemEncoding,\n  Encoding stderrEncoding: io.systemEncoding,\n}) {\n  io.ProcessResult result = delegate.runSync(\n    command,\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    stdoutEncoding: stdoutEncoding,\n    stderrEncoding: stderrEncoding,\n  );\n\n  List&lt;String&gt; sanitizedCommand = sanitize(command);\n  String basename = _getBasename(result.pid, sanitizedCommand);\n  _manifest.add(new RunManifestEntry(\n    pid: result.pid,\n    basename: basename,\n    command: sanitizedCommand,\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    stdoutEncoding: stdoutEncoding,\n    stderrEncoding: stderrEncoding,\n    exitCode: result.exitCode,\n  ));\n\n  _recordDataSync(result.stdout, stdoutEncoding, '$basename.stdout');\n  _recordDataSync(result.stderr, stderrEncoding, '$basename.stderr');\n\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/runSync.html",
            "isDeprecated": "0",
            "type": "dart:io.ProcessResult",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "command",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List"
                },
                {
                    "name": "environment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>"
                },
                {
                    "name": "includeParentEnvironment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "runInShell",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "stderrEncoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "stdoutEncoding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "workingDirectory",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Starts a process by running the specified <code>command<\/code>.<\/p>\n<p>The first element in <code>command<\/code> will be treated as the executable to run,\nwith subsequent elements being passed as arguments to the executable. It\nis left to implementations to decide what element types they support in\nthe <code>command<\/code> list.<\/p>\n<p>Returns a <code>Future&lt;Process&gt;<\/code> that completes with a Process instance when\nthe process has been successfully started. That <a href=\"dart-io\/Process-class.html\">Process<\/a> object can be\nused to interact with the process. If the process cannot be started, the\nreturned <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with an exception.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset, the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is <code>true<\/code>, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>Users must read all data coming on the <code>stdout<\/code> and <code>stderr<\/code>\nstreams of processes started with <a href=\"package-process_record_replay\/RecordingProcessManager\/start.html\">start<\/a>. If the user\ndoes not read all data on the streams the underlying system\nresources will not be released since there is still pending data.<\/p>\n<p>The following code uses <code>start<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>ProcessManager mgr = new LocalProcessManager();\nmgr.start('grep', ['-i', 'main', 'test.dart']).then((process) {\n  stdout.addStream(process.stdout);\n  stderr.addStream(process.stderr);\n});\n<\/code><\/pre>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/normal-constant.html\">ProcessStartMode.normal<\/a> (the default) a child\nprocess will be started with <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nconnected.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detached-constant.html\">ProcessStartMode.detached<\/a> a detached process will\nbe created. A detached process has no connection to its parent,\nand can keep running on its own when the parent dies. The only\ninformation available from a detached process is its <code>pid<\/code>. There\nis no connection to its <code>stdin<\/code>, <code>stdout<\/code> or <code>stderr<\/code>, nor will\nthe process' exit code become available when it terminates.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detachedWithStdio-constant.html\">ProcessStartMode.detachedWithStdio<\/a> a detached\nprocess will be created where the <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nare connected. The creator can communicate with the child through\nthese. The detached process will keep running even if these\ncommunication channels are closed. The process' exit code will\nnot become available when it terminated.<\/p>\n<p>The default value for <code>mode<\/code> is <code>ProcessStartMode.NORMAL<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;io.Process&gt; start(\n  List&lt;dynamic&gt; command, {\n  String workingDirectory,\n  Map&lt;String, String&gt; environment,\n  bool includeParentEnvironment: true,\n  bool runInShell: false,\n  io.ProcessStartMode mode: io.ProcessStartMode.normal,\n}) async {\n  io.Process process = await delegate.start(\n    command,\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    mode: mode,\n  );\n\n  List&lt;String&gt; sanitizedCommand = sanitize(command);\n  String basename = _getBasename(process.pid, sanitizedCommand);\n  RunManifestEntry entry = new RunManifestEntry(\n    pid: process.pid,\n    basename: basename,\n    command: sanitizedCommand,\n    workingDirectory: workingDirectory,\n    environment: environment,\n    includeParentEnvironment: includeParentEnvironment,\n    runInShell: runInShell,\n    mode: mode,\n  );\n  _manifest.add(entry);\n\n  _RecordingProcess result = new _RecordingProcess(\n    manager: this,\n    basename: basename,\n    delegate: process,\n  );\n  await result.startRecording();\n  _runningProcesses[process.pid] = result.exitCode.then((int exitCode) {\n    _runningProcesses.remove(process.pid);\n    entry.exitCode = exitCode;\n    return exitCode;\n  });\n\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-process_record_replay\/RecordingProcessManager\/start.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.Process>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "record_replay.RecordingProcessManager",
            "params": [
                {
                    "name": "command",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List"
                },
                {
                    "name": "environment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>"
                },
                {
                    "name": "includeParentEnvironment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "mode",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.ProcessStartMode"
                },
                {
                    "name": "runInShell",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "workingDirectory",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The manager to which this manager delegates.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ProcessManager delegate\n\n<\/code><\/pre>\n        ",
            "href": "package-process_record_replay\/RecordingProcessManager\/delegate.html",
            "isDeprecated": "0",
            "type": "process.ProcessManager",
            "memberOf": "record_replay.RecordingProcessManager",
            "params": []
        },
        {
            "desc": "<p>The directory to which serialized invocation metadata will be written.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Directory destination\n\n<\/code><\/pre>\n        ",
            "href": "package-process_record_replay\/RecordingProcessManager\/destination.html",
            "isDeprecated": "0",
            "type": "file.Directory",
            "memberOf": "record_replay.RecordingProcessManager",
            "params": []
        },
        {
            "desc": "<p>The file system in which this manager will create recording files.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSystem get fs =&gt; destination.fileSystem;<\/code><\/pre>\n        ",
            "href": "package-process_record_replay\/RecordingProcessManager\/fs.html",
            "isDeprecated": "0",
            "type": "file.FileSystem",
            "memberOf": "record_replay.RecordingProcessManager",
            "params": []
        }
    ]
}