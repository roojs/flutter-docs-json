{
    "desc": "<p><a href=\"dart-async\/Stream-class.html\">Stream<\/a> wrapper that only exposes the <a href=\"dart-async\/Stream-class.html\">Stream<\/a> interface.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-async\/StreamView-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:async",
    "name": "dart:async.StreamView",
    "shortname": "StreamView",
    "extends": [
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "realImplementors": [
        "async.DelegatingStream"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StreamView(Stream&lt;T&gt; stream)\n    : _stream = stream,\n      super._internal();<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamView\/StreamView.html",
            "isDeprecated": "0",
            "type": "",
            "name": "StreamView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:async.StreamView",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Returns a multi-subscription stream that produces the same events as this.<\/p>\n<p>The returned stream will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.<\/p>\n<p>If <code>onListen<\/code> is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto <code>onListen<\/code>. It is not possible to change the event handlers, including\nusing <a href=\"dart-async\/StreamSubscription\/asFuture.html\">StreamSubscription.asFuture<\/a>.<\/p>\n<p>If <code>onCancel<\/code> is provided, it is called in a similar way to <code>onListen<\/code>\nwhen the returned stream stops having listener. If it later gets\na new listener, the <code>onListen<\/code> function is called again.<\/p>\n<p>Use the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; asBroadcastStream(\n        {void onListen(StreamSubscription&lt;T&gt; subscription),\n        void onCancel(StreamSubscription&lt;T&gt; subscription)}) =&gt;\n    _stream.asBroadcastStream(onListen: onListen, onCancel: onCancel);<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamView\/asBroadcastStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream",
            "name": "asBroadcastStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamView",
            "params": [
                {
                    "name": "subscription",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.StreamSubscription"
                }
            ]
        },
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;T&gt; listen(void onData(T value),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamView\/listen.html",
            "isDeprecated": "0",
            "type": "dart:async.StreamSubscription",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamView",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "onDone",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this stream is a broadcast stream.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isBroadcast =&gt; _stream.isBroadcast;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamView\/isBroadcast.html",
            "name": "isBroadcast",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:async.StreamView",
            "params": []
        }
    ]
}