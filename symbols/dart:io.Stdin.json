{
    "desc": "<p><a href=\"dart-io\/Stdin-class.html\">Stdin<\/a> allows both synchronous and asynchronous reads from the standard\ninput stream.<\/p>\n<p>Mixing synchronous and asynchronous reads is undefined.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-io\/Stdin-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.Stdin",
    "shortname": "Stdin",
    "extends": [
        "dart:core.int",
        "dart:core.List",
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;List&lt;int&gt;&gt; listen(void onData(List&lt;int&gt; event),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdin\/listen.html",
            "isDeprecated": "0",
            "type": "dart:async.StreamSubscription<dart:core.List<dart:core.int>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdin",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "event",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                },
                {
                    "name": "onDone",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        },
        {
            "desc": "<p>Synchronously read a byte from stdin. This call will block until a byte is\navailable.<\/p>\n<p>If at end of file, -1 is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external int readByteSync();<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdin\/readByteSync.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdin",
            "params": []
        },
        {
            "desc": "<p>Read a line from stdin.<\/p>\n<p>Blocks until a full line is available.<\/p>\n<p>Lines my be terminated by either <code>&lt;CR&gt;&lt;LF&gt;<\/code> or <code>&lt;LF&gt;<\/code>. On Windows in cases\nwhere the <a href=\"dart-io\/stdioType.html\">stdioType<\/a> of stdin is <code>StdioType.termimal<\/code> the terminator may\nalso be a single <code>&lt;CR&gt;<\/code>.<\/p>\n<p>Input bytes are converted to a string by <code>encoding<\/code>.\nIf <code>encoding<\/code> is omitted, it defaults to <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>.<\/p>\n<p>If <code>retainNewlines<\/code> is <code>false<\/code>, the returned String will not include the\nfinal line terminator. If <code>true<\/code>, the returned String will include the line\nterminator. Default is <code>false<\/code>.<\/p>\n<p>If end-of-file is reached after any bytes have been read from stdin,\nthat data is returned without a line terminator.\nReturns <code>null<\/code> if no bytes preceded the end of input.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String readLineSync(\n    {Encoding encoding: systemEncoding, bool retainNewlines: false}) {\n  const CR = 13;\n  const LF = 10;\n  final List&lt;int&gt; line = &lt;int&gt;[];\n  \/\/ On Windows, if lineMode is disabled, only CR is received.\n  bool crIsNewline = Platform.isWindows &amp;&amp;\n      (stdioType(stdin) == StdioType.terminal) &amp;&amp;\n      !lineMode;\n  if (retainNewlines) {\n    int byte;\n    do {\n      byte = readByteSync();\n      if (byte &lt; 0) {\n        break;\n      }\n      line.add(byte);\n    } while (byte != LF &amp;&amp; !(byte == CR &amp;&amp; crIsNewline));\n    if (line.isEmpty) {\n      return null;\n    }\n  } else if (crIsNewline) {\n    \/\/ CR and LF are both line terminators, neither is retained.\n    while (true) {\n      int byte = readByteSync();\n      if (byte &lt; 0) {\n        if (line.isEmpty) return null;\n        break;\n      }\n      if (byte == LF || byte == CR) break;\n      line.add(byte);\n    }\n  } else {\n    \/\/ Case having to handle CR LF as a single unretained line terminator.\n    outer:\n    while (true) {\n      int byte = readByteSync();\n      if (byte == LF) break;\n      if (byte == CR) {\n        do {\n          byte = readByteSync();\n          if (byte == LF) break outer;\n\n          line.add(CR);\n        } while (byte == CR);\n        \/\/ Fall through and handle non-CR character.\n      }\n      if (byte &lt; 0) {\n        if (line.isEmpty) return null;\n        break;\n      }\n      line.add(byte);\n    }\n  }\n  return encoding.decode(line);\n}<\/code><\/pre>\n    ",
            "href": "dart-io\/Stdin\/readLineSync.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.Stdin",
            "params": [
                {
                    "name": "encoding",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Encoding"
                },
                {
                    "name": "retainNewlines",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Check if echo mode is enabled on <a href=\"dart-io\/stdin.html\">stdin<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external bool get echoMode;<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdin\/echoMode.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.Stdin",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is a terminal attached to stdin.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasTerminal {\n  try {\n    return stdioType(this) == StdioType.terminal;\n  } on FileSystemException catch (_) {\n    \/\/ If stdioType throws a FileSystemException, then it is not hooked up to\n    \/\/ a terminal, probably because it is closed, but let other exception\n    \/\/ types bubble up.\n    return false;\n  }\n}<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdin\/hasTerminal.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.Stdin",
            "params": []
        },
        {
            "desc": "<p>Check if line mode is enabled on <a href=\"dart-io\/stdin.html\">stdin<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external bool get lineMode;<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdin\/lineMode.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.Stdin",
            "params": []
        },
        {
            "desc": "<p>Whether connected to a terminal that supports ANSI escape sequences.<\/p>\n<p>Not all terminals are recognized, and not all recognized terminals can\nreport whether they support ANSI escape sequences, so this value is a\nbest-effort attempt at detecting the support.<\/p>\n<p>The actual escape sequence support may differ between terminals,\nwith some terminals supporting more escape sequences than others,\nand some terminals even differing in behavior for the same escape\nsequence.<\/p>\n<p>The ANSI color selection is generally supported.<\/p>\n<p>Currently, a <code>TERM<\/code> environment variable containing the string <code>xterm<\/code>\nwill be taken as evidence that ANSI escape sequences are supported.\nOn Windows, only versions of Windows 10 after v.1511\n(\"TH2\", OS build 10586) will be detected as supporting the output of\nANSI escape sequences, and only versions after v.1607 (\"Anniversary\nUpdate\", OS build 14393) will be detected as supporting the input of\nANSI escape sequences.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external bool get supportsAnsiEscapes;<\/code><\/pre>\n        ",
            "href": "dart-io\/Stdin\/supportsAnsiEscapes.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:io.Stdin",
            "params": []
        }
    ]
}