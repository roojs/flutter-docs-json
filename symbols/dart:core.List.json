{
    "name": "dart:core.List",
    "extends": [],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "operator +",
            "type": "dart:core.List",
            "desc": "<p>Returns the concatenation of this list and <code>other<\/code>.<\/p>\n<p>Returns a new list containing the elements of this list followed by\nthe elements of <code>other<\/code>.<\/p>\n<p>The default behavior is to return a normal growable list.\nSome list types may choose to return a list of the same type as themselves\n(see <a href=\"dart-core\/List\/operator_plus.html\">Uint8List.+<\/a>);<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; operator +(List&lt;E&gt; other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "List",
            "type": "",
            "desc": "<p>Creates a list of the given length.<\/p>\n<p>The created list is fixed-length if <code>length<\/code> is provided.<\/p>\n<pre class=\"language-dart\"><code>List fixedLengthList = new List(3);\nfixedLengthList.length;     \/\/ 3\nfixedLengthList.length = 1; \/\/ Error\n<\/code><\/pre>\n<p>The list has length 0 and is growable if <code>length<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List growableList = new List();\ngrowableList.length; \/\/ 0;\ngrowableList.length = 3;\n<\/code><\/pre>\n<p>To create a growable list with a given length, just assign the length\nright after creation:<\/p>\n<pre class=\"language-dart\"><code>List growableList = new List()..length = 500;\n<\/code><\/pre>\n<p>The <code>length<\/code> must not be negative or null, if it is provided.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/List\/List.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory List([int length]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator []",
            "type": "",
            "desc": "<p>Returns the object at the given <code>index<\/code> in the list\nor throws a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>index<\/code> is out of bounds.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/operator_get.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E operator [](int index);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "operator []=",
            "type": "",
            "desc": "<p>Sets the value at the given <code>index<\/code> in the list to <code>value<\/code>\nor throws a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> if <code>index<\/code> is out of bounds.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/operator_put.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void operator []=(int index, E value);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "add",
            "type": "",
            "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addAll",
            "type": "",
            "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/addAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "asMap",
            "type": "dart:core.Map<dart:core.int>",
            "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/List\/asMap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Map",
                "dart:core.int"
            ]
        },
        {
            "name": "cast",
            "type": "dart:core.List",
            "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"dart-core\/List\/add.html\">add<\/a> or <a href=\"dart-core\/List\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/List\/cast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;R&gt; cast&lt;R&gt;();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "castFrom",
            "type": "dart:core.List",
            "desc": "<p>Adapts <code>source<\/code> to be a <code>List&lt;T&gt;<\/code>.<\/p>\n<p>Any time the list would produce an element that is not a <code>T<\/code>,\nthe element access will throw.<\/p>\n<p>Any time a <code>T<\/code> value is attempted stored into the adapted list,\nthe store will throw unless the value is also an instance of <code>S<\/code>.<\/p>\n<p>If all accessed elements of <code>source<\/code> are actually instances of <code>T<\/code>,\nand if all elements stored into the returned list are actually instance\nof <code>S<\/code>,\nthen the returned list can be used as a <code>List&lt;T&gt;<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "source",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/castFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;T&gt; castFrom&lt;S, T&gt;(List&lt;S&gt; source) =&gt; new CastList&lt;S, T&gt;(source);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "clear",
            "type": "",
            "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/List\/clear.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "copyRange",
            "type": "",
            "desc": "<p>Copy a range of one list into another list.<\/p>\n<p>This is a utility function that can be used to implement methods like\n<a href=\"dart-core\/List\/setRange.html\">setRange<\/a>.<\/p>\n<p>The range from <code>start<\/code> to <code>end<\/code> must be a valid range of <code>source<\/code>,\nand there must be room for <code>end - start<\/code> elements from position <code>at<\/code>.\nIf <code>start<\/code> is omitted, it defaults to zero.\nIf <code>end<\/code> is omitted, it defaults to <code>source.length<\/code>.<\/p>\n<p>If <code>source<\/code> and <code>target<\/code> is the same list, overlapping source and target\nranges are respected so that the target range ends up containing the\ninitial content of the source range.\nOtherwise the order of element copying is not guaranteed.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "at",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/copyRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void copyRange&lt;T&gt;(List&lt;T&gt; target, int at, List&lt;T&gt; source,\n    [int start, int end]) {\n  start ??= 0;\n  end = RangeError.checkValidRange(start, end, source.length);\n  int length = end - start;\n  if (target.length &lt; at + length) {\n    throw new ArgumentError.value(target, \"target\",\n        \"Not big enough to hold $length elements at position $at\");\n  }\n  if (!identical(source, target) || start &gt;= at) {\n    for (int i = 0; i &lt; length; i++) {\n      target[at + i] = source[start + i];\n    }\n  } else {\n    for (int i = length; --i &gt;= 0;) {\n      target[at + i] = source[start + i];\n    }\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "fillRange",
            "type": "",
            "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fillValue",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/fillRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fillValue]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "List.filled",
            "type": "",
            "desc": "<p>Creates a list of the given length with <code>fill<\/code> at each position.<\/p>\n<p>The <code>length<\/code> must be a non-negative integer.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">new List&lt;int&gt;.filled(3, 0, growable: true); \/\/ [0, 0, 0]\n<\/code><\/pre>\n<p>The created list is fixed-length if <code>growable<\/code> is false (the default)\nand growable if <code>growable<\/code> is true.\nIf the list is growable, changing its length will not initialize new\nentries with <code>fill<\/code>.\nAfter being created and filled, the list is no different from any other\ngrowable or fixed-length list created using <a href=\"dart-core\/List-class.html\">List<\/a>.<\/p>\n<p>All elements of the returned list share the same <code>fill<\/code> value.<\/p>\n<pre class=\"language-dart\"><code>var shared = new List.filled(3, []);\nshared[0].add(499);\nprint(shared);  \/\/ =&gt; [[499], [499], [499]]\n<\/code><\/pre>\n<p>You can use <a href=\"dart-core\/List\/List.generate.html\">List.generate<\/a> to create a list with a new object at\neach position.<\/p>\n<pre class=\"language-dart\"><code>var unique = new List.generate(3, (_) =&gt; []);\nunique[0].add(499);\nprint(unique); \/\/ =&gt; [[499], [], []]\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fill",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "growable",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/List\/List.filled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory List.filled(int length, E fill, {bool growable: false});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "List.from",
            "type": "",
            "desc": "<p>Creates a list containing all <code>elements<\/code>.<\/p>\n<p>The <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of <code>elements<\/code> provides the order of the elements.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>List<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">List&lt;SuperType&gt; superList = ...;\nList&lt;SubType&gt; subList =\n    new List&lt;SubType&gt;.from(superList.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n<p>This constructor creates a growable list when <code>growable<\/code> is true;\notherwise, it returns a fixed-length list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "growable",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/List\/List.from.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory List.from(Iterable elements, {bool growable: true});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "List.generate",
            "type": "",
            "desc": "<p>Generates a list of values.<\/p>\n<p>Creates a list with <code>length<\/code> positions and fills it with values created by\ncalling <code>generator<\/code> for each index in the range <code>0<\/code> .. <code>length - 1<\/code>\nin increasing order.<\/p>\n<pre class=\"language-dart\"><code>new List&lt;int&gt;.generate(3, (int index) =&gt; index * index); \/\/ [0, 1, 4]\n<\/code><\/pre>\n<p>The created list is fixed-length unless <code>growable<\/code> is true.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "growable",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/List\/List.generate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory List.generate(int length, E generator(int index),\n    {bool growable: true}) {\n  List&lt;E&gt; result;\n  if (growable) {\n    result = &lt;E&gt;[]..length = length;\n  } else {\n    result = new List&lt;E&gt;(length);\n  }\n  for (int i = 0; i &lt; length; i++) {\n    result[i] = generator(i);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getRange",
            "type": "dart:core.Iterable",
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/getRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "indexOf",
            "type": "dart:core.int",
            "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/indexOf.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(E element, [int start = 0]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "indexWhere",
            "type": "dart:core.int",
            "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/indexWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexWhere(bool test(E element), [int start = 0]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "insert",
            "type": "",
            "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/insert.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "insertAll",
            "type": "",
            "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/insertAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "lastIndexOf",
            "type": "dart:core.int",
            "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/lastIndexOf.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(E element, [int start]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lastIndexWhere",
            "type": "dart:core.int",
            "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/lastIndexWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexWhere(bool test(E element), [int start]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "List.of",
            "type": "",
            "desc": "<p>Creates a list from <code>elements<\/code>.<\/p>\n<p>The <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of <code>elements<\/code> provides the order of the elements.<\/p>\n<p>This constructor creates a growable list when <code>growable<\/code> is true;\notherwise, it returns a fixed-length list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "growable",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/List\/List.of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory List.of(Iterable&lt;E&gt; elements, {bool growable: true}) =&gt;\n    new List&lt;E&gt;.from(elements, growable: growable);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "remove",
            "type": "dart:core.bool",
            "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "removeAt",
            "type": "",
            "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/removeAt.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeLast",
            "type": "",
            "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/List\/removeLast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeRange",
            "type": "",
            "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/removeRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeWhere",
            "type": "",
            "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/removeWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element));<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "replaceRange",
            "type": "",
            "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"dart-core\/List\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "replacement",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/replaceRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; replacement);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retainWhere",
            "type": "",
            "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/retainWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element));<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setAll",
            "type": "",
            "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/setAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setRange",
            "type": "",
            "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "skipCount",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/setRange.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "shuffle",
            "type": "",
            "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "random",
                    "type": "dart:math.Random",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/shuffle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([Random random]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "sort",
            "type": "",
            "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "a",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "b",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/sort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "sublist",
            "type": "dart:core.List",
            "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"dart-core\/List\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "start",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/sublist.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "List.unmodifiable",
            "type": "",
            "desc": "<p>Creates an unmodifiable list containing all <code>elements<\/code>.<\/p>\n<p>The <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of <code>elements<\/code> provides the order of the elements.<\/p>\n<p>An unmodifiable list cannot have its length or elements changed.\nIf the elements are themselves immutable, then the resulting list\nis also immutable.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/List\/List.unmodifiable.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory List.unmodifiable(Iterable elements);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "writeIterable",
            "type": "",
            "desc": "<p>Write the elements of an iterable into a list.<\/p>\n<p>This is a utility function that can be used to implement methods like\n<a href=\"dart-core\/List\/setAll.html\">setAll<\/a>.<\/p>\n<p>The elements of <code>source<\/code> are written into <code>target<\/code> from position <code>at<\/code>.\nThe <code>source<\/code> must not contain more elements after writing the last\nposition of <code>target<\/code>.<\/p>\n<p>If the source is a list, the <a href=\"dart-core\/List\/copyRange.html\">copyRange<\/a> function is likely to be more\nefficient.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.List",
            "sig": "",
            "params": [
                {
                    "name": "target",
                    "type": "dart:core.List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "at",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/List\/writeIterable.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void writeIterable&lt;T&gt;(List&lt;T&gt; target, int at, Iterable&lt;T&gt; source) {\n  RangeError.checkValueInInterval(at, 0, target.length, \"at\");\n  int index = at;\n  int targetLength = target.length;\n  for (var element in source) {\n    if (index == targetLength) {\n      throw new IndexError(targetLength, target);\n    }\n    target[index] = element;\n    index++;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "first",
            "type": "",
            "types": [],
            "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
            "memberOf": "dart:core.List",
            "isConstant": false,
            "href": "dart-core\/List\/first.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  return it.current;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "last",
            "type": "",
            "types": [],
            "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
            "memberOf": "dart:core.List",
            "isConstant": false,
            "href": "dart-core\/List\/last.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  Iterator&lt;E&gt; it = iterator;\n  if (!it.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E result;\n  do {\n    result = it.current;\n  } while (it.moveNext());\n  return result;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
            "memberOf": "dart:core.List",
            "isConstant": false,
            "href": "dart-core\/List\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "reversed",
            "type": "dart:core.Iterable",
            "types": [],
            "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
            "memberOf": "dart:core.List",
            "isConstant": false,
            "href": "dart-core\/List\/reversed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "async.StreamZip",
        "collection.IterableZip",
        "convert.ByteAccumulatorSink",
        "convert.HexCodec",
        "convert.HexDecoder",
        "convert.HexEncoder",
        "convert.PercentCodec",
        "convert.PercentDecoder",
        "convert.PercentEncoder",
        "crypto.Hash",
        "crypto.Hmac",
        "crypto.MD5",
        "crypto.Sha1",
        "crypto.Sha256",
        "dart:convert.AsciiCodec",
        "dart:convert.AsciiDecoder",
        "dart:convert.AsciiEncoder",
        "dart:convert.Base64Codec",
        "dart:convert.Base64Decoder",
        "dart:convert.Base64Encoder",
        "dart:convert.ByteConversionSink",
        "dart:convert.ByteConversionSinkBase",
        "dart:convert.Encoding",
        "dart:convert.JsonUtf8Encoder",
        "dart:convert.Latin1Codec",
        "dart:convert.Latin1Decoder",
        "dart:convert.Latin1Encoder",
        "dart:convert.Utf8Codec",
        "dart:convert.Utf8Decoder",
        "dart:convert.Utf8Encoder",
        "dart:io.GZipCodec",
        "dart:io.Stdin",
        "dart:io.SystemEncoding",
        "dart:io.ZLibCodec",
        "dart:io.ZLibDecoder",
        "dart:io.ZLibEncoder"
    ],
    "realImplementors": [
        "async.StreamZip",
        "collection.IterableZip",
        "convert.ByteAccumulatorSink",
        "convert.HexCodec",
        "convert.HexDecoder",
        "convert.HexEncoder",
        "convert.PercentCodec",
        "convert.PercentDecoder",
        "convert.PercentEncoder"
    ],
    "cn": [],
    "href": "dart-core\/List-class.html",
    "desc": "<p>An indexable collection of objects with a length.<\/p>\n<p>Subclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:<\/p>\n<ul>\n<li>\n<p>Fixed-length list.\nAn error occurs when attempting to use operations\nthat can change the length of the list.<\/p>\n<\/li>\n<li>\n<p>Growable list. Full implementation of the API defined in this class.<\/p>\n<\/li>\n<\/ul>\n<p>The default growable list, as returned by <code>new List()<\/code> or <code>[]<\/code>, keeps\nan internal buffer, and grows that buffer when necessary. This guarantees\nthat a sequence of <a href=\"dart-core\/List\/add.html\">add<\/a> operations will each execute in amortized constant\ntime. Setting the length directly may take time proportional to the new\nlength, and may change the internal capacity so that a following add\noperation will need to immediately increase the buffer capacity.\nOther list implementations may have different performance behavior.<\/p>\n<p>The following code illustrates that some List implementations support\nonly a subset of the API.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; fixedLengthList = new List(5);\nfixedLengthList.length = 0;  \/\/ Error\nfixedLengthList.add(499);    \/\/ Error\nfixedLengthList[0] = 87;\nList&lt;int&gt; growableList = [1, 2];\ngrowableList.length = 0;\ngrowableList.add(499);\ngrowableList[0] = 87;\n<\/code><\/pre>\n<p>Lists are <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices\u2014that is, changing the list's length\u2014between iteration\nsteps causes a <a href=\"dart-core\/ConcurrentModificationError-class.html\">ConcurrentModificationError<\/a>. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.<\/p>\n<p>It is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to <a href=\"dart-core\/Iterable\/forEach.html\">forEach<\/a> or <a href=\"dart-core\/List\/sort.html\">sort<\/a>.\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that is backed by the list, will\nbreak the iteration.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "List"
}