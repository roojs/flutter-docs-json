{
    "desc": "<p>An animation that applies a curve to another animation.<\/p>\n<p><a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> is useful when you want to apply a non-linear <a href=\"animation\/Curve-class.html\">Curve<\/a> to\nan animation object, especially if you want different curves when the\nanimation is going forward vs when it is going backward.<\/p>\n<p>Depending on the given curve, the output of the <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> could have\na wider range than its input. For example, elastic curves such as\n<a href=\"animation\/Curves\/elasticIn-constant.html\">Curves.elasticIn<\/a> will significantly overshoot or undershoot the default\nrange of 0.0 to 1.0.<\/p>\n<p>If you want to apply a <a href=\"animation\/Curve-class.html\">Curve<\/a> to a <a href=\"animation\/Tween-class.html\">Tween<\/a>, consider using <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code snippet shows how you can apply a curve to a linear\nanimation produced by an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> <code>controller<\/code>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animation&lt;double&gt; animation = CurvedAnimation(\n  parent: controller,\n  curve: Curves.ease,\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis second code snippet shows how to apply a different curve in the forward\ndirection than in the reverse direction. This can't be done using a\n<a href=\"animation\/CurveTween-class.html\">CurveTween<\/a> (since <a href=\"animation\/Tween-class.html\">Tween<\/a>s are not aware of the animation direction when\nthey are applied).\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animation&lt;double&gt; animation = CurvedAnimation(\n  parent: controller,\n  curve: Curves.easeIn,\n  reverseCurve: Curves.easeOut,\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>By default, the <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">reverseCurve<\/a> matches the forward <a href=\"animation\/CurvedAnimation\/curve.html\">curve<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>, for an alternative way of expressing the first sample\nabove.<\/li>\n<li>\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, for examples of creating and disposing of an\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/li>\n<li>\n<a href=\"animation\/Curve\/flipped.html\">Curve.flipped<\/a> and <a href=\"animation\/FlippedCurve-class.html\">FlippedCurve<\/a>, which provide the reverse of a\n<a href=\"animation\/Curve-class.html\">Curve<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "animation\/CurvedAnimation-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "animation",
    "name": "animation.CurvedAnimation",
    "shortname": "CurvedAnimation",
    "extends": [
        "dart:core.double",
        "animation.Animation",
        "foundation.Listenable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a curved animation.<\/p>\n<p>The parent and curve arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CurvedAnimation({\n  @required this.parent,\n  @required this.curve,\n  this.reverseCurve,\n}) : assert(parent != null),\n     assert(curve != null) {\n  _updateCurveDirection(parent.status);\n  parent.addStatusListener(_updateCurveDirection);\n}<\/code><\/pre>\n    ",
            "href": "animation\/CurvedAnimation\/CurvedAnimation.html",
            "isDeprecated": false,
            "type": "",
            "name": "CurvedAnimation",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "animation.CurvedAnimation",
            "params": [
                {
                    "name": "curve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "parent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Animation<dart:core.double>"
                },
                {
                    "name": "reverseCurve",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (reverseCurve == null)\n    return '$parent\\u27A9$curve';\n  if (_useForwardCurve)\n    return '$parent\\u27A9$curve\\u2092\\u2099\/$reverseCurve';\n  return '$parent\\u27A9$curve\/$reverseCurve\\u2092\\u2099';\n}<\/code><\/pre>\n    ",
            "href": "animation\/CurvedAnimation\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.CurvedAnimation",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The curve to use in the forward direction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve curve\n\n<\/code><\/pre>\n        ",
            "href": "animation\/CurvedAnimation\/curve.html",
            "name": "curve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "memberOf": "animation.CurvedAnimation",
            "params": []
        },
        {
            "desc": "<p>The animation to which this animation applies a curve.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Animation&lt;double&gt; parent\n\n<\/code><\/pre>\n        ",
            "href": "animation\/CurvedAnimation\/parent.html",
            "name": "parent",
            "isDeprecated": false,
            "type": "animation.Animation<dart:core.double>",
            "memberOf": "animation.CurvedAnimation",
            "params": []
        },
        {
            "desc": "<p>The curve to use in the reverse direction.<\/p>\n<p>If the parent animation changes direction without first reaching the\n<a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> or <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> status, the\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a> stays on the same curve (albeit in the opposite\ndirection) to avoid visual discontinuities.<\/p>\n<p>If you use a non-null <a href=\"animation\/CurvedAnimation\/reverseCurve.html\">reverseCurve<\/a>, you might want to hold this object\nin a <a href=\"widgets\/State-class.html\">State<\/a> object rather than recreating it each time your widget builds\nin order to take advantage of the state in this object that avoids visual\ndiscontinuities.<\/p>\n<p>If this field is null, uses <a href=\"animation\/CurvedAnimation\/curve.html\">curve<\/a> in both directions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve reverseCurve\n\n<\/code><\/pre>\n        ",
            "href": "animation\/CurvedAnimation\/reverseCurve.html",
            "name": "reverseCurve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "memberOf": "animation.CurvedAnimation",
            "params": []
        },
        {
            "desc": "<p>The current value of the animation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble get value {\n  final Curve activeCurve = _useForwardCurve ? curve : reverseCurve;\n\n  final double t = parent.value;\n  if (activeCurve == null)\n    return t;\n  if (t == 0.0 || t == 1.0) {\n    assert(() {\n      final double transformedValue = activeCurve.transform(t);\n      final double roundedTransformedValue = transformedValue.round().toDouble();\n      if (roundedTransformedValue != t) {\n        throw FlutterError(\n          'Invalid curve endpoint at $t.\\n'\n          'Curves must map 0.0 to near zero and 1.0 to near one but '\n          '${activeCurve.runtimeType} mapped $t to $transformedValue, which '\n          'is near $roundedTransformedValue.'\n        );\n      }\n      return true;\n    }());\n    return t;\n  }\n  return activeCurve.transform(t);\n}<\/code><\/pre>\n        ",
            "href": "animation\/CurvedAnimation\/value.html",
            "name": "value",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "animation.CurvedAnimation",
            "params": []
        }
    ]
}