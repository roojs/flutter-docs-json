{
    "desc": "<p>A material design icon button.<\/p>\n<p>An icon button is a picture printed on a <a href=\"material\/Material-class.html\">Material<\/a> widget that reacts to\ntouches by filling with color (ink).<\/p>\n<p>Icon buttons are commonly used in the <a href=\"material\/AppBar\/actions.html\">AppBar.actions<\/a> field, but they can\nbe used in many other places as well.<\/p>\n<p>If the <a href=\"material\/IconButton\/onPressed.html\">onPressed<\/a> callback is null, then the button will be disabled and\nwill not react to touch.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>The hit region of an icon button will, if possible, be at least 48.0 pixels\nin size, regardless of the actual <a href=\"material\/IconButton\/iconSize.html\">iconSize<\/a>, to satisfy the <a href=\"https:\/\/material.io\/guidelines\/layout\/metrics-keylines.html#metrics-keylines-touch-target-size\">touch target\nsize<\/a>\nrequirements in the Material Design specification. The <a href=\"material\/IconButton\/alignment.html\">alignment<\/a> controls\nhow the icon itself is positioned within the hit region.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis sample shows an <code>IconButton<\/code> that uses the Material icon \"volume_up\" to\nincrease the volume.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double _volume = 0.0;\n\n\/\/ ...\n\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        children: &lt;Widget&gt;[\n          IconButton(\n            icon: Icon(Icons.volume_up),\n            tooltip: 'Increase volume by 10',\n            onPressed: () {\n              setState(() {\n                _volume += 10;\n              });\n            },\n          ),\n          Text('Volume : $_volume')\n        ],\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.IconButton.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.IconButton.1\n\n\/\/ This sample shows an `IconButton` that uses the Material icon \"volume_up\" to\n\/\/ increase the volume.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\ndouble _volume = 0.0;\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: &lt;Widget&gt;[\n            IconButton(\n              icon: Icon(Icons.volume_up),\n              tooltip: 'Increase volume by 10',\n              onPressed: () {\n                setState(() {\n                  _volume += 10;\n                });\n              },\n            ),\n            Text('Volume : $_volume')\n          ],\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"adding-a-filled-background\">Adding a filled background<\/h3>\n<p>Icon buttons don't support specifying a background color or other\nbackground decoration because typically the icon is just displayed\non top of the parent widget's background. Icon buttons that appear\nin <a href=\"material\/AppBar\/actions.html\">AppBar.actions<\/a> are an example of this.<\/p>\n<p>It's easy enough to create an icon button with a filled background\nusing the <a href=\"material\/Ink-class.html\">Ink<\/a> widget. The <a href=\"material\/Ink-class.html\">Ink<\/a> widget renders a decoration on\nthe underlying <a href=\"material\/Material-class.html\">Material<\/a> along with the splash and highlight\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a> contributed by descendant widgets.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet2 = \"shortSnippet2\";<\/script><button id=\"shortSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('shortSnippet2', visibleSnippet2);\" selected>Sample<\/button>\n  <button id=\"longSnippet2Button\" onclick=\"visibleSnippet2 = showSnippet('longSnippet2', visibleSnippet2);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet2\">\n    <div class=\"snippet-description\">\nIn this sample the icon button's background color is defined with an <a href=\"material\/Ink-class.html\">Ink<\/a>\nwidget whose child is an <a href=\"material\/IconButton-class.html\">IconButton<\/a>. The icon button's filled background\nis a light shade of blue, it's a filled circle, and it's as big as the\nbutton is.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Center(\n    child: Container(\n      child: Ink(\n        decoration: ShapeDecoration(\n          color: Colors.lightBlue,\n          shape: CircleBorder(),\n        ),\n        child: IconButton(\n          icon: Icon(Icons.android),\n          color: Colors.white,\n          onPressed: () {\n            print(\"filled background\");\n          },\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet2\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.IconButton.2 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet2);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.IconButton.2\n\n\/\/ In this sample the icon button's background color is defined with an [Ink]\n\/\/ widget whose child is an [IconButton]. The icon button's filled background\n\/\/ is a light shade of blue, it's a filled circle, and it's as big as the\n\/\/ button is.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatelessWidget(),\n      ),\n    );\n  }\n}\n\n\/\/\/ This is the stateless widget that the main application instantiates.\nclass MyStatelessWidget extends StatelessWidget {\n  MyStatelessWidget({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        child: Ink(\n          decoration: ShapeDecoration(\n            color: Colors.lightBlue,\n            shape: CircleBorder(),\n          ),\n          child: IconButton(\n            icon: Icon(Icons.android),\n            color: Colors.white,\n            onPressed: () {\n              print(\"filled background\");\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Icons-class.html\">Icons<\/a>, a library of predefined icons.<\/li>\n<li>\n<a href=\"material\/BackButton-class.html\">BackButton<\/a>, an icon button for a \"back\" affordance which adapts to the\ncurrent platform's conventions.<\/li>\n<li>\n<a href=\"material\/CloseButton-class.html\">CloseButton<\/a>, an icon button for closing pages.<\/li>\n<li>\n<a href=\"material\/AppBar-class.html\">AppBar<\/a>, to show a toolbar at the top of an application.<\/li>\n<li>\n<a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a> and <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>, for buttons with text in them.<\/li>\n<li>\n<a href=\"material\/InkResponse-class.html\">InkResponse<\/a> and <a href=\"material\/InkWell-class.html\">InkWell<\/a>, for the ink splash effect itself.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/IconButton-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.IconButton",
    "shortname": "IconButton",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>The callback that is called when the button is tapped or otherwise activated.<\/p>\n<p>If this is set to null, the button will be disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/onPressed.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "material.IconButton",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates an icon button.<\/p>\n<p>Icon buttons are commonly used in the <a href=\"material\/AppBar\/actions.html\">AppBar.actions<\/a> field, but they can\nbe used in many other places as well.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>The <code>iconSize<\/code>, <code>padding<\/code>, and <code>alignment<\/code> arguments must not be null (though\nthey each have default values).<\/p>\n<p>The <code>icon<\/code> argument must be specified, and is typically either an <a href=\"widgets\/Icon-class.html\">Icon<\/a>\nor an <a href=\"widgets\/ImageIcon-class.html\">ImageIcon<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const IconButton({\n  Key key,\n  this.iconSize = 24.0,\n  this.padding = const EdgeInsets.all(8.0),\n  this.alignment = Alignment.center,\n  @required this.icon,\n  this.color,\n  this.highlightColor,\n  this.splashColor,\n  this.disabledColor,\n  @required this.onPressed,\n  this.tooltip,\n}) : assert(iconSize != null),\n     assert(padding != null),\n     assert(alignment != null),\n     assert(icon != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/IconButton\/IconButton.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.IconButton",
            "params": [
                {
                    "name": "alignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "highlightColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "icon",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "iconSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onPressed",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "splashColor",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "tooltip",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/IconButton\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterial(context));\n  Color currentColor;\n  if (onPressed != null)\n    currentColor = color;\n  else\n    currentColor = disabledColor ?? Theme.of(context).disabledColor;\n\n  Widget result = Semantics(\n    button: true,\n    enabled: onPressed != null,\n    child: ConstrainedBox(\n      constraints: const BoxConstraints(minWidth: _kMinButtonSize, minHeight: _kMinButtonSize),\n      child: Padding(\n        padding: padding,\n        child: SizedBox(\n          height: iconSize,\n          width: iconSize,\n          child: Align(\n            alignment: alignment,\n            child: IconTheme.merge(\n              data: IconThemeData(\n                size: iconSize,\n                color: currentColor,\n              ),\n              child: icon,\n            ),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  if (tooltip != null) {\n    result = Tooltip(\n      message: tooltip,\n      child: result,\n    );\n  }\n  return InkResponse(\n    onTap: onPressed,\n    child: result,\n    highlightColor: highlightColor ?? Theme.of(context).highlightColor,\n    splashColor: splashColor ?? Theme.of(context).splashColor,\n    radius: math.max(\n      Material.defaultSplashRadius,\n      (iconSize + math.min(padding.horizontal, padding.vertical)) * 0.7,\n      \/\/ x 0.5 for diameter -&gt; radius and + 40% overflow derived from other Material apps.\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/IconButton\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.IconButton",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/IconButton\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Widget&gt;('icon', icon, showName: false));\n  properties.add(ObjectFlagProperty&lt;VoidCallback&gt;('onPressed', onPressed, ifNull: 'disabled'));\n  properties.add(StringProperty('tooltip', tooltip, defaultValue: null, quoted: false));\n}<\/code><\/pre>\n    ",
            "href": "material\/IconButton\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.IconButton",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Defines how the icon is positioned within the IconButton.<\/p>\n<p>This property must not be null. It defaults to <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/alignment.html",
            "isDeprecated": "0",
            "type": "painting.AlignmentGeometry",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The color to use for the icon inside the button, if the icon is enabled.\nDefaults to leaving this up to the <a href=\"material\/IconButton\/icon.html\">icon<\/a> widget.<\/p>\n<p>The icon is enabled if <a href=\"material\/IconButton\/onPressed.html\">onPressed<\/a> is not null.<\/p>\n<p>See also <a href=\"material\/IconButton\/disabledColor.html\">disabledColor<\/a>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">IconButton(\n  color: Colors.blue,\n  onPressed: _handleTap,\n  icon: Icons.widgets,\n)\n<\/code><\/pre>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/color.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The color to use for the icon inside the button, if the icon is disabled.\nDefaults to the <a href=\"material\/IconButton\/disabledColor.html\">ThemeData.disabledColor<\/a> of the current <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>The icon is disabled if <a href=\"material\/IconButton\/onPressed.html\">onPressed<\/a> is null.<\/p>\n<p>See also <a href=\"material\/IconButton\/color.html\">color<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/disabledColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The secondary color of the button when the button is in the down (pressed)\nstate. The highlight color is represented as a solid color that is overlaid over the\nbutton color (if any). If the highlight color has transparency, the button color\nwill show through. The highlight fades in quickly as the button is held down.<\/p>\n<p>Defaults to the Theme's highlight color, <a href=\"material\/IconButton\/highlightColor.html\">ThemeData.highlightColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color highlightColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/highlightColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The icon to display inside the button.<\/p>\n<p>The <a href=\"widgets\/Icon\/size.html\">Icon.size<\/a> and <a href=\"material\/IconButton\/color.html\">Icon.color<\/a> of the icon is configured automatically\nbased on the <a href=\"material\/IconButton\/iconSize.html\">iconSize<\/a> and <a href=\"material\/IconButton\/color.html\">color<\/a> properties of <em>this<\/em> widget using an\n<a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> and therefore should not be explicitly given in the icon\nwidget.<\/p>\n<p>This property must not be null.<\/p>\n<p>See <a href=\"widgets\/Icon-class.html\">Icon<\/a>, <a href=\"widgets\/ImageIcon-class.html\">ImageIcon<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget icon\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/icon.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The size of the icon inside the button.<\/p>\n<p>This property must not be null. It defaults to 24.0.<\/p>\n<p>The size given here is passed down to the widget in the <a href=\"material\/IconButton\/icon.html\">icon<\/a> property\nvia an <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a>. Setting the size here instead of in, for example, the\n<a href=\"widgets\/Icon\/size.html\">Icon.size<\/a> property allows the <a href=\"material\/IconButton-class.html\">IconButton<\/a> to size the splash area to\nfit the <a href=\"widgets\/Icon-class.html\">Icon<\/a>. If you were to set the size of the <a href=\"widgets\/Icon-class.html\">Icon<\/a> using\n<a href=\"widgets\/Icon\/size.html\">Icon.size<\/a> instead, then the <a href=\"material\/IconButton-class.html\">IconButton<\/a> would default to 24.0 and then\nthe <a href=\"widgets\/Icon-class.html\">Icon<\/a> itself would likely get clipped.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double iconSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/iconSize.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The padding around the button's icon. The entire padded icon will react\nto input gestures.<\/p>\n<p>This property must not be null. It defaults to 8.0 padding on all sides.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>The primary color of the button when the button is in the down (pressed) state.\nThe splash is represented as a circular overlay that appears above the\n<a href=\"material\/IconButton\/highlightColor.html\">highlightColor<\/a> overlay. The splash overlay has a center point that matches\nthe hit point of the user touch event. The splash overlay will expand to\nfill the button area if the touch is held for long enough time. If the splash\ncolor has transparency then the highlight and button color will show through.<\/p>\n<p>Defaults to the Theme's splash color, <a href=\"material\/IconButton\/splashColor.html\">ThemeData.splashColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color splashColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/splashColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.IconButton",
            "params": []
        },
        {
            "desc": "<p>Text that describes the action that will occur when the button is pressed.<\/p>\n<p>This text is displayed when the user long-presses on the button and is\nused for accessibility.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String tooltip\n\n<\/code><\/pre>\n        ",
            "href": "material\/IconButton\/tooltip.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.IconButton",
            "params": []
        }
    ]
}