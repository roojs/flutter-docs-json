{
    "desc": "<p>Inset a <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>, applying padding on each side.<\/p>\n<p>A <a href=\"rendering\/RenderSliverPadding-class.html\">RenderSliverPadding<\/a> object wraps the <a href=\"rendering\/SliverGeometry\/layoutExtent.html\">SliverGeometry.layoutExtent<\/a> of\nits child. Any incoming <a href=\"rendering\/SliverConstraints\/overlap.html\">SliverConstraints.overlap<\/a> is ignored and not\npassed on to the child.<\/p>\n<p>Applying padding to anything but the most mundane sliver is likely to have\nundesired effects. For example, wrapping a\n<a href=\"rendering\/RenderSliverPinnedPersistentHeader-class.html\">RenderSliverPinnedPersistentHeader<\/a> will cause the app bar to overlap\nearlier slivers (contrary to the normal behavior of pinned app bars), and\nwhile the app bar is pinned, the padding will scroll away.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverPadding-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverPadding",
    "shortname": "RenderSliverPadding",
    "extends": [
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a render object that insets its child in a viewport.<\/p>\n<p>The <code>padding<\/code> argument must not be null and must have non-negative insets.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverPadding({\n  @required EdgeInsetsGeometry padding,\n  TextDirection textDirection,\n  RenderSliver child,\n}) : assert(padding != null),\n     assert(padding.isNonNegative),\n     _padding = padding,\n     _textDirection = textDirection {\n  this.child = child;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/RenderSliverPadding.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.RenderSliver"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Applies the transform that would be applied when painting the given child\nto the given matrix.<\/p>\n<p>Used by coordinate conversion functions to translate coordinates local to\none render object into coordinates local to another render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid applyPaintTransform(RenderObject child, Matrix4 transform) {\n  assert(child != null);\n  assert(child == this.child);\n  final SliverPhysicalParentData childParentData = child.parentData;\n  childParentData.applyPaintTransform(transform);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/applyPaintTransform.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "transform",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance along the cross axis from the zero of the cross axis\nin this sliver's <a href=\"rendering\/RenderSliverPadding\/paint.html\">paint<\/a> coordinate space to the nearest side of the given\nchild.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the left\nof the sliver to the left of the child. Similarly, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a>\ndescribe this sliver as having an axis direction of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>,\nthen this is value is the same. If the axis direction is\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a> or <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>, then it is the distance\nfrom the top of the sliver to the top of the child.<\/p>\n<p>Calling this for a child that is not visible is not valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childCrossAxisPosition(RenderSliver child) {\n  assert(child != null);\n  assert(child == this.child);\n  assert(constraints != null);\n  assert(constraints.axisDirection != null);\n  assert(constraints.growthDirection != null);\n  assert(_resolvedPadding != null);\n  switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n    case AxisDirection.up:\n    case AxisDirection.down:\n      return _resolvedPadding.left;\n    case AxisDirection.left:\n    case AxisDirection.right:\n      return _resolvedPadding.top;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/childCrossAxisPosition.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the leading <em>visible<\/em> edge of the sliver to the\nside of the given child closest to that edge.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the top\nof the visible portion of the sliver to the top of the child. On the other\nhand, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then this is the distance from the bottom\nof the visible portion of the sliver to the bottom of the child. In both\ncases, this is the direction of increasing\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a> and\n<a href=\"rendering\/SliverLogicalParentData\/layoutOffset.html\">SliverLogicalParentData.layoutOffset<\/a>.<\/p>\n<p>For children that are <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s, the leading edge of the <em>child<\/em>\nwill be the leading <em>visible<\/em> edge of the child, not the part of the child\nthat would locally be a scroll offset 0.0. For children that are not\n<a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s, for example a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> child, it's the actual distance\nto the edge of the box, since those boxes do not know how to handle being\nscrolled.<\/p>\n<p>This method differs from <a href=\"rendering\/RenderSliverPadding\/childScrollOffset.html\">childScrollOffset<\/a> in that\n<a href=\"rendering\/RenderSliverPadding\/childMainAxisPosition.html\">childMainAxisPosition<\/a> gives the distance from the leading <em>visible<\/em> edge\nof the sliver whereas <a href=\"rendering\/RenderSliverPadding\/childScrollOffset.html\">childScrollOffset<\/a> gives the distance from the\nsliver's zero scroll offset.<\/p>\n<p>Calling this for a child that is not visible is not valid.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childMainAxisPosition(RenderSliver child) {\n  assert(child != null);\n  assert(child == this.child);\n  return calculatePaintOffset(constraints, from: 0.0, to: beforePadding);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/childMainAxisPosition.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderSliver"
                }
            ]
        },
        {
            "desc": "<p>Returns the scroll offset for the leading edge of the given child.<\/p>\n<p>The <code>child<\/code> must be a child of this sliver.<\/p>\n<p>This method differs from <a href=\"rendering\/RenderSliverPadding\/childMainAxisPosition.html\">childMainAxisPosition<\/a> in that\n<a href=\"rendering\/RenderSliverPadding\/childMainAxisPosition.html\">childMainAxisPosition<\/a> gives the distance from the leading <em>visible<\/em> edge\nof the sliver whereas <a href=\"rendering\/RenderSliverPadding\/childScrollOffset.html\">childScrollOffset<\/a> gives the distance from sliver's\nzero scroll offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childScrollOffset(RenderObject child) {\n  assert(child.parent == this);\n  return beforePadding;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/childScrollOffset.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderSliverPadding\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Override this method to paint debugging information.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugPaint(PaintingContext context, Offset offset) {\n  super.debugPaint(context, offset);\n  assert(() {\n    if (debugPaintSizeEnabled) {\n      final Size parentSize = getAbsoluteSizeRelativeToOrigin();\n      final Rect outerRect = offset &amp; parentSize;\n      Size childSize;\n      Rect innerRect;\n      if (child != null) {\n        childSize = child.getAbsoluteSizeRelativeToOrigin();\n        final SliverPhysicalParentData childParentData = child.parentData;\n        innerRect = (offset + childParentData.paintOffset) &amp; childSize;\n        assert(innerRect.top &gt;= outerRect.top);\n        assert(innerRect.left &gt;= outerRect.left);\n        assert(innerRect.right &lt;= outerRect.right);\n        assert(innerRect.bottom &lt;= outerRect.bottom);\n      }\n      debugPaintPadding(context.canvas, outerRect, innerRect);\n    }\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/debugPaint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>Used by <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n<p>For a discussion of the semantics of the arguments, see <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { @required double mainAxisPosition, @required double crossAxisPosition }) {\n  if (child != null &amp;&amp; child.geometry.hitTestExtent &gt; 0.0)\n    return child.hitTest(result, mainAxisPosition: mainAxisPosition - childMainAxisPosition(child), crossAxisPosition: crossAxisPosition - childCrossAxisPosition(child));\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/hitTestChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "crossAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "mainAxisPosition",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "result",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (child != null &amp;&amp; child.geometry.visible) {\n    final SliverPhysicalParentData childParentData = child.parentData;\n    context.paintChild(child, offset + childParentData.paintOffset);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderSliver\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  _resolve();\n  assert(_resolvedPadding != null);\n  final double beforePadding = this.beforePadding;\n  final double afterPadding = this.afterPadding;\n  final double mainAxisPadding = this.mainAxisPadding;\n  final double crossAxisPadding = this.crossAxisPadding;\n  if (child == null) {\n    geometry = SliverGeometry(\n      scrollExtent: mainAxisPadding,\n      paintExtent: math.min(mainAxisPadding, constraints.remainingPaintExtent),\n      maxPaintExtent: mainAxisPadding,\n    );\n    return;\n  }\n  child.layout(\n    constraints.copyWith(\n      scrollOffset: math.max(0.0, constraints.scrollOffset - beforePadding),\n      cacheOrigin: math.min(0.0, constraints.cacheOrigin + beforePadding),\n      overlap: 0.0,\n      remainingPaintExtent: constraints.remainingPaintExtent - calculatePaintOffset(constraints, from: 0.0, to: beforePadding),\n      remainingCacheExtent: constraints.remainingCacheExtent - calculateCacheOffset(constraints, from: 0.0, to: beforePadding),\n      crossAxisExtent: math.max(0.0, constraints.crossAxisExtent - crossAxisPadding),\n    ),\n    parentUsesSize: true,\n  );\n  final SliverGeometry childLayoutGeometry = child.geometry;\n  if (childLayoutGeometry.scrollOffsetCorrection != null) {\n    geometry = SliverGeometry(\n      scrollOffsetCorrection: childLayoutGeometry.scrollOffsetCorrection,\n    );\n    return;\n  }\n  final double beforePaddingPaintExtent = calculatePaintOffset(\n    constraints,\n    from: 0.0,\n    to: beforePadding,\n  );\n  final double afterPaddingPaintExtent = calculatePaintOffset(\n    constraints,\n    from: beforePadding + childLayoutGeometry.scrollExtent,\n    to: mainAxisPadding + childLayoutGeometry.scrollExtent,\n  );\n  final double mainAxisPaddingPaintExtent = beforePaddingPaintExtent + afterPaddingPaintExtent;\n  final double beforePaddingCacheExtent = calculateCacheOffset(\n    constraints,\n    from: 0.0,\n    to: beforePadding,\n  );\n  final double afterPaddingCacheExtent = calculateCacheOffset(\n    constraints,\n    from: beforePadding + childLayoutGeometry.scrollExtent,\n    to: mainAxisPadding + childLayoutGeometry.scrollExtent,\n  );\n  final double mainAxisPaddingCacheExtent = afterPaddingCacheExtent + beforePaddingCacheExtent;\n  final double paintExtent = math.min(\n    beforePaddingPaintExtent + math.max(childLayoutGeometry.paintExtent, childLayoutGeometry.layoutExtent + afterPaddingPaintExtent),\n    constraints.remainingPaintExtent,\n  );\n  geometry = SliverGeometry(\n    scrollExtent: mainAxisPadding + childLayoutGeometry.scrollExtent,\n    paintExtent: paintExtent,\n    layoutExtent: math.min(mainAxisPaddingPaintExtent + childLayoutGeometry.layoutExtent, paintExtent),\n    cacheExtent: math.min(mainAxisPaddingCacheExtent + childLayoutGeometry.cacheExtent, constraints.remainingCacheExtent),\n    maxPaintExtent: mainAxisPadding + childLayoutGeometry.maxPaintExtent,\n    hitTestExtent: math.max(\n      mainAxisPaddingPaintExtent + childLayoutGeometry.paintExtent,\n      beforePaddingPaintExtent + childLayoutGeometry.hitTestExtent,\n    ),\n    hasVisualOverflow: childLayoutGeometry.hasVisualOverflow,\n  );\n\n  final SliverPhysicalParentData childParentData = child.parentData;\n  assert(constraints.axisDirection != null);\n  assert(constraints.growthDirection != null);\n  switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n    case AxisDirection.up:\n      childParentData.paintOffset = Offset(_resolvedPadding.left, calculatePaintOffset(constraints, from: _resolvedPadding.bottom + childLayoutGeometry.scrollExtent, to: _resolvedPadding.bottom + childLayoutGeometry.scrollExtent + _resolvedPadding.top));\n      break;\n    case AxisDirection.right:\n      childParentData.paintOffset = Offset(calculatePaintOffset(constraints, from: 0.0, to: _resolvedPadding.left), _resolvedPadding.top);\n      break;\n    case AxisDirection.down:\n      childParentData.paintOffset = Offset(_resolvedPadding.left, calculatePaintOffset(constraints, from: 0.0, to: _resolvedPadding.top));\n      break;\n    case AxisDirection.left:\n      childParentData.paintOffset = Offset(calculatePaintOffset(constraints, from: _resolvedPadding.right + childLayoutGeometry.scrollExtent, to: _resolvedPadding.right + childLayoutGeometry.scrollExtent + _resolvedPadding.left), _resolvedPadding.top);\n      break;\n  }\n  assert(childParentData.paintOffset != null);\n  assert(beforePadding == this.beforePadding);\n  assert(afterPadding == this.afterPadding);\n  assert(mainAxisPadding == this.mainAxisPadding);\n  assert(crossAxisPadding == this.crossAxisPadding);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/performLayout.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        },
        {
            "desc": "<p>Override to setup parent data correctly for your children.<\/p>\n<p>You can call this function to set up the parent data for child before the\nchild is added to the parent's child list.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid setupParentData(RenderObject child) {\n  if (child.parentData is! SliverPhysicalParentData)\n    child.parentData = SliverPhysicalParentData();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPadding\/setupParentData.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPadding",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The padding in the scroll direction on the side furthest from the 0.0 scroll offset.<\/p>\n<p>Only valid after layout has started, since before layout the render object\ndoesn't know what direction it will be laid out in.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get afterPadding {\n  assert(constraints != null);\n  assert(constraints.axisDirection != null);\n  assert(constraints.growthDirection != null);\n  assert(_resolvedPadding != null);\n  switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n    case AxisDirection.up:\n      return _resolvedPadding.top;\n    case AxisDirection.right:\n      return _resolvedPadding.right;\n    case AxisDirection.down:\n      return _resolvedPadding.bottom;\n    case AxisDirection.left:\n      return _resolvedPadding.left;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPadding\/afterPadding.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        },
        {
            "desc": "<p>The padding in the scroll direction on the side nearest the 0.0 scroll direction.<\/p>\n<p>Only valid after layout has started, since before layout the render object\ndoesn't know what direction it will be laid out in.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get beforePadding {\n  assert(constraints != null);\n  assert(constraints.axisDirection != null);\n  assert(constraints.growthDirection != null);\n  assert(_resolvedPadding != null);\n  switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n    case AxisDirection.up:\n      return _resolvedPadding.bottom;\n    case AxisDirection.right:\n      return _resolvedPadding.left;\n    case AxisDirection.down:\n      return _resolvedPadding.top;\n    case AxisDirection.left:\n      return _resolvedPadding.right;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPadding\/beforePadding.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        },
        {
            "desc": "<p>The total padding in the cross-axis direction. (In other words, for a\nvertical downwards-growing list, the sum of the padding on the left and\nright.)<\/p>\n<p>Only valid after layout has started, since before layout the render object\ndoesn't know what direction it will be laid out in.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get crossAxisPadding {\n  assert(constraints != null);\n  assert(constraints.axis != null);\n  assert(_resolvedPadding != null);\n  switch (constraints.axis) {\n    case Axis.horizontal:\n      return _resolvedPadding.vertical;\n    case Axis.vertical:\n      return _resolvedPadding.horizontal;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPadding\/crossAxisPadding.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        },
        {
            "desc": "<p>The total padding in the <a href=\"rendering\/SliverConstraints\/axisDirection.html\">SliverConstraints.axisDirection<\/a>. (In other\nwords, for a vertical downwards-growing list, the sum of the padding on\nthe top and bottom.)<\/p>\n<p>Only valid after layout has started, since before layout the render object\ndoesn't know what direction it will be laid out in.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get mainAxisPadding {\n  assert(constraints != null);\n  assert(constraints.axis != null);\n  assert(_resolvedPadding != null);\n  return _resolvedPadding.along(constraints.axis);\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPadding\/mainAxisPadding.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        },
        {
            "desc": "<p>The amount to pad the child in each dimension.<\/p>\n<p>If this is set to an <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object, then <a href=\"rendering\/RenderSliverPadding\/textDirection.html\">textDirection<\/a>\nmust not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get padding =&gt; _padding;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPadding\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        },
        {
            "desc": "<p>The text direction with which to resolve <a href=\"rendering\/RenderSliverPadding\/padding.html\">padding<\/a>.<\/p>\n<p>This may be changed to null, but only after the <a href=\"rendering\/RenderSliverPadding\/padding.html\">padding<\/a> has been changed\nto a value that does not depend on the direction.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPadding\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "rendering.RenderSliverPadding",
            "params": []
        }
    ]
}