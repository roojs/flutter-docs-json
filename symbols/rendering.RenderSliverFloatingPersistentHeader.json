{
    "name": "rendering.RenderSliverFloatingPersistentHeader",
    "extends": [
        "rendering.RenderSliverPersistentHeader",
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "RenderSliverFloatingPersistentHeader",
            "type": "",
            "desc": "<p>Creates a sliver that shrinks when it hits the start of the viewport, then\nscrolls off, and comes back immediately when the user reverses the scroll\ndirection.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderBox",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "snapConfiguration",
                    "type": "rendering.FloatingHeaderSnapConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/RenderSliverFloatingPersistentHeader.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverFloatingPersistentHeader({\n  RenderBox child,\n  FloatingHeaderSnapConfiguration snapConfiguration,\n}) : _snapConfiguration = snapConfiguration,\n     super(child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "childMainAxisPosition",
            "type": "dart:core.double",
            "desc": "<p>Returns the distance from the leading <em>visible<\/em> edge of the sliver to the\nside of the child closest to that edge, in the scroll axis direction.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the top\nof the visible portion of the sliver to the top of the child. If the child\nis scrolled partially off the top of the viewport, then this will be\nnegative. On the other hand, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as\nhaving an axis direction of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then this is the distance\nfrom the bottom of the visible portion of the sliver to the bottom of the\nchild. In both cases, this is the direction of increasing\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a>.<\/p>\n<p>Calling this when the child is not visible is not valid.<\/p>\n<p>The argument must be the value of the <code>child<\/code> property.<\/p>\n<p>This must be implemented by <a href=\"rendering\/RenderSliverPersistentHeader-class.html\">RenderSliverPersistentHeader<\/a> subclasses.<\/p>\n<p>If there is no child, this should return 0.0.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderBox",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/childMainAxisPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childMainAxisPosition(RenderBox child) {\n  assert(child == this.child);\n  return _childPosition;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DoubleProperty('effective scroll offset', _effectiveScrollOffset));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "detach",
            "type": "",
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/detach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _controller?.dispose();\n  _controller = null; \/\/ lazily recreated if we're reattached.\n  super.detach();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "maybeStartSnapAnimation",
            "type": "",
            "desc": "<p>If the header isn't already fully exposed, then scroll it into view.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "rendering.ScrollDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/maybeStartSnapAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void maybeStartSnapAnimation(ScrollDirection direction) {\n  if (snapConfiguration == null)\n    return;\n  if (direction == ScrollDirection.forward &amp;&amp; _effectiveScrollOffset &lt;= 0.0)\n    return;\n  if (direction == ScrollDirection.reverse &amp;&amp; _effectiveScrollOffset &gt;= maxExtent)\n    return;\n\n  final TickerProvider vsync = snapConfiguration.vsync;\n  final Duration duration = snapConfiguration.duration;\n  _controller ??= AnimationController(vsync: vsync, duration: duration)\n    ..addListener(() {\n      if (_effectiveScrollOffset == _animation.value)\n        return;\n      _effectiveScrollOffset = _animation.value;\n      markNeedsLayout();\n    });\n\n  _animation = _controller.drive(\n    Tween&lt;double&gt;(\n      begin: _effectiveScrollOffset,\n      end: direction == ScrollDirection.forward ? 0.0 : maxExtent,\n    ).chain(CurveTween(\n      curve: snapConfiguration.curve,\n    )),\n  );\n\n  _controller.forward(from: 0.0);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "maybeStopSnapAnimation",
            "type": "",
            "desc": "<p>If a header snap animation is underway then stop it.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "rendering.ScrollDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/maybeStopSnapAnimation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void maybeStopSnapAnimation(ScrollDirection direction) {\n  _controller?.stop();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "performLayout",
            "type": "",
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderSliver\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/performLayout.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  final double maxExtent = this.maxExtent;\n  if (_lastActualScrollOffset != null &amp;&amp; \/\/ We've laid out at least once to get an initial position, and either\n      ((constraints.scrollOffset &lt; _lastActualScrollOffset) || \/\/ we are scrolling back, so should reveal, or\n       (_effectiveScrollOffset &lt; maxExtent))) { \/\/ some part of it is visible, so should shrink or reveal as appropriate.\n    double delta = _lastActualScrollOffset - constraints.scrollOffset;\n    final bool allowFloatingExpansion = constraints.userScrollDirection == ScrollDirection.forward;\n    if (allowFloatingExpansion) {\n      if (_effectiveScrollOffset &gt; maxExtent) \/\/ We're scrolled off-screen, but should reveal, so\n        _effectiveScrollOffset = maxExtent; \/\/ pretend we're just at the limit.\n    } else {\n      if (delta &gt; 0.0) \/\/ If we are trying to expand when allowFloatingExpansion is false,\n        delta = 0.0; \/\/ disallow the expansion. (But allow shrinking, i.e. delta &lt; 0.0 is fine.)\n    }\n    _effectiveScrollOffset = (_effectiveScrollOffset - delta).clamp(0.0, constraints.scrollOffset);\n  } else {\n    _effectiveScrollOffset = constraints.scrollOffset;\n  }\n  final bool overlapsContent = _effectiveScrollOffset &lt; constraints.scrollOffset;\n  excludeFromSemanticsScrolling = overlapsContent;\n  layoutChild(_effectiveScrollOffset, maxExtent, overlapsContent: overlapsContent);\n  _childPosition = updateGeometry();\n  _lastActualScrollOffset = constraints.scrollOffset;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "updateGeometry",
            "type": "dart:core.double",
            "desc": "<p>Updates <a href=\"rendering\/RenderSliver\/geometry.html\">geometry<\/a>, and returns the new value for <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/childMainAxisPosition.html\">childMainAxisPosition<\/a>.<\/p>\n<p>This is used by <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/performLayout.html\">performLayout<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/updateGeometry.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble updateGeometry() {\n  final double maxExtent = this.maxExtent;\n  final double paintExtent = maxExtent - _effectiveScrollOffset;\n  final double layoutExtent = maxExtent - constraints.scrollOffset;\n  geometry = SliverGeometry(\n    scrollExtent: maxExtent,\n    paintOrigin: math.min(constraints.overlap, 0.0),\n    paintExtent: paintExtent.clamp(0.0, constraints.remainingPaintExtent),\n    layoutExtent: layoutExtent.clamp(0.0, constraints.remainingPaintExtent),\n    maxPaintExtent: maxExtent,\n    maxScrollObstructionExtent: maxExtent,\n    hasVisualOverflow: true, \/\/ Conservatively say we do have overflow to avoid complexity.\n  );\n  return math.min(0.0, paintExtent - childExtent);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "snapConfiguration",
            "type": "rendering.FloatingHeaderSnapConfiguration",
            "types": [],
            "desc": "<p>Defines the parameters used to snap (animate) the floating header in and\nout of view.<\/p>\n<p>If <a href=\"rendering\/RenderSliverFloatingPersistentHeader\/snapConfiguration.html\">snapConfiguration<\/a> is null then the floating header does not snap.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"rendering\/RenderSliverFloatingPersistentHeader\/maybeStartSnapAnimation.html\">RenderSliverFloatingPersistentHeader.maybeStartSnapAnimation<\/a> and\n<a href=\"rendering\/RenderSliverFloatingPersistentHeader\/maybeStopSnapAnimation.html\">RenderSliverFloatingPersistentHeader.maybeStopSnapAnimation<\/a>, which\nstart or stop the floating header's animation.<\/li>\n<li>\n<a href=\"material\/SliverAppBar-class.html\">SliverAppBar<\/a>, which creates a header that can be pinned, floating,\nand snapped into view via the corresponding parameters.<\/li>\n<\/ul>",
            "memberOf": "rendering.RenderSliverFloatingPersistentHeader",
            "isConstant": false,
            "href": "rendering\/RenderSliverFloatingPersistentHeader\/snapConfiguration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FloatingHeaderSnapConfiguration get snapConfiguration =&gt; _snapConfiguration;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "rendering.RenderSliverFloatingPinnedPersistentHeader"
    ],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/RenderSliverFloatingPersistentHeader-class.html",
    "desc": "<p>A sliver with a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> child which shrinks and scrolls like a\n<a href=\"rendering\/RenderSliverScrollingPersistentHeader-class.html\">RenderSliverScrollingPersistentHeader<\/a>, but immediately comes back when the\nuser scrolls in the reverse direction.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderSliverFloatingPinnedPersistentHeader-class.html\">RenderSliverFloatingPinnedPersistentHeader<\/a>, which is similar but sticks\nto the start of the viewport rather than scrolling off.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RenderSliverFloatingPersistentHeader"
}