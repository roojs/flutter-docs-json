{
    "name": "rendering.TableColumnWidth",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "TableColumnWidth",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.TableColumnWidth",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/TableColumnWidth\/TableColumnWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TableColumnWidth();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "flex",
            "type": "dart:core.double",
            "desc": "<p>The flex factor to apply to the cell if there is any room left\nover when laying out the table. The remaining space is\ndistributed to any columns with flex in proportion to their flex\nvalue (higher values get more space).<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.TableColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "rendering\/TableColumnWidth\/flex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double flex(Iterable&lt;RenderBox&gt; cells) =&gt; null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "maxIntrinsicWidth",
            "type": "dart:core.double",
            "desc": "<p>The ideal width that the column should have. This must be equal\nto or greater than the <a href=\"rendering\/TableColumnWidth\/minIntrinsicWidth.html\">minIntrinsicWidth<\/a>. The column might be\nbigger than this width, e.g. if the column is flexible or if the\ntable's width ends up being forced to be bigger than the sum of\nall the maxIntrinsicWidth values.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.TableColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                },
                {
                    "name": "containerWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/TableColumnWidth\/maxIntrinsicWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double maxIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "minIntrinsicWidth",
            "type": "dart:core.double",
            "desc": "<p>The smallest width that the column can have.<\/p>\n<p>The <code>cells<\/code> argument is an iterable that provides all the cells\nin the table for this column. Walking the cells is by definition\nO(N), so algorithms that do that should be considered expensive.<\/p>\n<p>The <code>containerWidth<\/code> argument is the <code>maxWidth<\/code> of the incoming\nconstraints for the table, and might be infinite.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.TableColumnWidth",
            "sig": "",
            "params": [
                {
                    "name": "cells",
                    "type": "dart:core.Iterable<rendering.RenderBox>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "rendering.RenderBox"
                    ]
                },
                {
                    "name": "containerWidth",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/TableColumnWidth\/minIntrinsicWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double minIntrinsicWidth(Iterable&lt;RenderBox&gt; cells, double containerWidth);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.TableColumnWidth",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/TableColumnWidth\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "rendering.FixedColumnWidth",
        "rendering.FlexColumnWidth",
        "rendering.FractionColumnWidth",
        "rendering.IntrinsicColumnWidth",
        "rendering.MaxColumnWidth",
        "rendering.MinColumnWidth"
    ],
    "realImplementors": [
        "rendering.FixedColumnWidth",
        "rendering.FlexColumnWidth",
        "rendering.FractionColumnWidth",
        "rendering.IntrinsicColumnWidth",
        "rendering.MaxColumnWidth",
        "rendering.MinColumnWidth"
    ],
    "cn": [],
    "href": "rendering\/TableColumnWidth-class.html",
    "desc": "<p>Base class to describe how wide a column in a <a href=\"rendering\/RenderTable-class.html\">RenderTable<\/a> should be.<\/p>\n<p>To size a column to a specific number of pixels, use a <a href=\"rendering\/FixedColumnWidth-class.html\">FixedColumnWidth<\/a>.\nThis is the cheapest way to size a column.<\/p>\n<p>Other algorithms that are relatively cheap include <a href=\"rendering\/FlexColumnWidth-class.html\">FlexColumnWidth<\/a>, which\ndistributes the space equally among the flexible columns,\n<a href=\"rendering\/FractionColumnWidth-class.html\">FractionColumnWidth<\/a>, which sizes a column based on the size of the\ntable's container.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TableColumnWidth"
}