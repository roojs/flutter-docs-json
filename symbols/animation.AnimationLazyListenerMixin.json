{
    "name": "animation.AnimationLazyListenerMixin",
    "extends": [],
    "memberOf": "animation",
    "events": [],
    "methods": [
        {
            "name": "AnimationLazyListenerMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "animation.AnimationLazyListenerMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "animation\/AnimationLazyListenerMixin\/AnimationLazyListenerMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "didRegisterListener",
            "type": "",
            "desc": "<p>Calls <a href=\"animation\/AnimationLazyListenerMixin\/didStartListening.html\">didStartListening<\/a> every time a registration of a listener causes\nan empty list of listeners to become non-empty.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/AnimationLazyListenerMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>, which may cause the listener list to\nbecome empty again, and in turn cause this method to call\n<a href=\"animation\/AnimationLazyListenerMixin\/didStartListening.html\">didStartListening<\/a> again.<\/li><\/ul>",
            "static": false,
            "memberOf": "animation.AnimationLazyListenerMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLazyListenerMixin\/didRegisterListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didRegisterListener() {\n  assert(_listenerCounter &gt;= 0);\n  if (_listenerCounter == 0)\n    didStartListening();\n  _listenerCounter += 1;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didStartListening",
            "type": "",
            "desc": "<p>Called when the number of listeners changes from zero to one.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLazyListenerMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLazyListenerMixin\/didStartListening.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didStartListening();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didStopListening",
            "type": "",
            "desc": "<p>Called when the number of listeners changes from one to zero.<\/p>\n    ",
            "static": false,
            "memberOf": "animation.AnimationLazyListenerMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLazyListenerMixin\/didStopListening.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didStopListening();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "didUnregisterListener",
            "type": "",
            "desc": "<p>Calls <a href=\"animation\/AnimationLazyListenerMixin\/didStopListening.html\">didStopListening<\/a> when an only remaining listener is unregistered,\nthus making the list empty.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/AnimationLazyListenerMixin\/didRegisterListener.html\">didRegisterListener<\/a>, which causes the listener list to become non-empty.<\/li><\/ul>",
            "static": false,
            "memberOf": "animation.AnimationLazyListenerMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "animation\/AnimationLazyListenerMixin\/didUnregisterListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void didUnregisterListener() {\n  assert(_listenerCounter &gt;= 1);\n  _listenerCounter -= 1;\n  if (_listenerCounter == 0)\n    didStopListening();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "isListening",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether there are any listeners.<\/p>\n        ",
            "memberOf": "animation.AnimationLazyListenerMixin",
            "isConstant": false,
            "href": "animation\/AnimationLazyListenerMixin\/isListening.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isListening =&gt; _listenerCounter &gt; 0;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "animation\/AnimationLazyListenerMixin-mixin.html",
    "desc": "<p>A mixin that helps listen to another object only when this object has registered listeners.<\/p>\n<p>This mixin provides implementations of <a href=\"animation\/AnimationLazyListenerMixin\/didRegisterListener.html\">didRegisterListener<\/a> and <a href=\"animation\/AnimationLazyListenerMixin\/didUnregisterListener.html\">didUnregisterListener<\/a>,\nand therefore can be used in conjunction with mixins that require these methods,\n<a href=\"animation\/AnimationLocalListenersMixin-mixin.html\">AnimationLocalListenersMixin<\/a> and <a href=\"animation\/AnimationLocalStatusListenersMixin-mixin.html\">AnimationLocalStatusListenersMixin<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "AnimationLazyListenerMixin"
}