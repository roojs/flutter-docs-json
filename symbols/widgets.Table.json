{
    "desc": "<p>A widget that uses the table layout algorithm for its children.<\/p>\n<p>If you only have one row, the <a href=\"widgets\/Row-class.html\">Row<\/a> widget is more appropriate. If you only\nhave one column, the <a href=\"widgets\/SliverList-class.html\">SliverList<\/a> or <a href=\"widgets\/Column-class.html\">Column<\/a> widgets will be more\nappropriate.<\/p>\n<p>Rows size vertically based on their contents. To control the column widths,\nuse the <a href=\"widgets\/Table\/columnWidths.html\">columnWidths<\/a> property.<\/p>\n<p>For more details about the table layout algorithm, see <a href=\"rendering\/RenderTable-class.html\">RenderTable<\/a>.\nTo control the alignment of children, see <a href=\"widgets\/TableCell-class.html\">TableCell<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Table-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Table",
    "shortname": "Table",
    "extends": [
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "widgets.TableCell"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a table.<\/p>\n<p>The <code>children<\/code>, <code>defaultColumnWidth<\/code>, and <code>defaultVerticalAlignment<\/code>\narguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Table({\n  Key key,\n  this.children = const &lt;TableRow&gt;[],\n  this.columnWidths,\n  this.defaultColumnWidth = const FlexColumnWidth(1.0),\n  this.textDirection,\n  this.border,\n  this.defaultVerticalAlignment = TableCellVerticalAlignment.top,\n  this.textBaseline,\n}) : assert(children != null),\n     assert(defaultColumnWidth != null),\n     assert(defaultVerticalAlignment != null),\n     assert(() {\n       if (children.any((TableRow row) =&gt; row.children.any((Widget cell) =&gt; cell == null))) {\n         throw FlutterError(\n           'One of the children of one of the rows of the table was null.\\n'\n           'The children of a TableRow must not be null.'\n         );\n       }\n       return true;\n     }()),\n     assert(() {\n       if (children.any((TableRow row1) =&gt; row1.key != null &amp;&amp; children.any((TableRow row2) =&gt; row1 != row2 &amp;&amp; row1.key == row2.key))) {\n         throw FlutterError(\n           'Two or more TableRow children of this Table had the same key.\\n'\n           'All the keyed TableRow children of a Table must have different Keys.'\n         );\n       }\n       return true;\n     }()),\n     assert(() {\n       if (children.isNotEmpty) {\n         final int cellCount = children.first.children.length;\n         if (children.any((TableRow row) =&gt; row.children.length != cellCount)) {\n           throw FlutterError(\n             'Table contains irregular row lengths.\\n'\n             'Every TableRow in a Table must have the same number of children, so that every cell is filled. '\n             'Otherwise, the table will contain holes.'\n           );\n         }\n       }\n       return true;\n     }()),\n     _rowDecorations = children.any((TableRow row) =&gt; row.decoration != null)\n                            ? children.map&lt;Decoration&gt;((TableRow row) =&gt; row.decoration).toList(growable: false)\n                            : null,\n     super(key: key) {\n  assert(() {\n    final List&lt;Widget&gt; flatChildren = children.expand&lt;Widget&gt;((TableRow row) =&gt; row.children).toList(growable: false);\n    if (debugChildrenHaveDuplicateKeys(this, flatChildren)) {\n      throw FlutterError(\n        'Two or more cells in this Table contain widgets with the same key.\\n'\n        'Every widget child of every TableRow in a Table must have different keys. The cells of a Table are '\n        'flattened out for processing, so separate cells cannot have duplicate keys even if they are in '\n        'different rows.'\n      );\n    }\n    return true;\n  }());\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Table\/Table.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Table",
            "params": [
                {
                    "name": "border",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TableBorder"
                },
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<widgets.TableRow>"
                },
                {
                    "name": "columnWidths",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Map<dart:core.int<rendering.TableColumnWidth>>"
                },
                {
                    "name": "defaultColumnWidth",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TableColumnWidth"
                },
                {
                    "name": "defaultVerticalAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "rendering.TableCellVerticalAlignment"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "textBaseline",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextBaseline"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>RenderObjectWidgets always inflate to a <a href=\"widgets\/RenderObjectElement-class.html\">RenderObjectElement<\/a> subclass.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_TableElement createElement() =&gt; _TableElement(this);<\/code><\/pre>\n    ",
            "href": "widgets\/Table\/createElement.html",
            "isDeprecated": "0",
            "type": "<_TableElement>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>Creates an instance of the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> class that this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> represents, using the configuration described by this\n<a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a>.<\/p>\n<p>This method should not do anything with the children of the render object.\nThat should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/mount.html\">RenderObjectElement.mount<\/a> in the object rendered by this object's\n<a href=\"widgets\/Table\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/mount.html\">SingleChildRenderObjectElement.mount<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRenderTable createRenderObject(BuildContext context) {\n  assert(debugCheckHasDirectionality(context));\n  return RenderTable(\n    columns: children.isNotEmpty ? children[0].children.length : 0,\n    rows: children.length,\n    columnWidths: columnWidths,\n    defaultColumnWidth: defaultColumnWidth,\n    textDirection: textDirection ?? Directionality.of(context),\n    border: border,\n    rowDecorations: _rowDecorations,\n    configuration: createLocalImageConfiguration(context),\n    defaultVerticalAlignment: defaultVerticalAlignment,\n    textBaseline: textBaseline,\n  );\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Table\/createRenderObject.html",
            "isDeprecated": "0",
            "type": "rendering.RenderTable",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Table",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Copies the configuration described by this <a href=\"widgets\/RenderObjectWidget-class.html\">RenderObjectWidget<\/a> to the\ngiven <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, which will be of the same type as returned by this\nobject's <a href=\"widgets\/Table\/createRenderObject.html\">createRenderObject<\/a>.<\/p>\n<p>This method should not do anything to update the children of the render\nobject. That should instead be handled by the method that overrides\n<a href=\"widgets\/RenderObjectElement\/update.html\">RenderObjectElement.update<\/a> in the object rendered by this object's\n<a href=\"widgets\/Table\/createElement.html\">createElement<\/a> method. See, for example,\n<a href=\"widgets\/SingleChildRenderObjectElement\/update.html\">SingleChildRenderObjectElement.update<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateRenderObject(BuildContext context, RenderTable renderObject) {\n  assert(debugCheckHasDirectionality(context));\n  assert(renderObject.columns == (children.isNotEmpty ? children[0].children.length : 0));\n  assert(renderObject.rows == children.length);\n  renderObject\n    ..columnWidths = columnWidths\n    ..defaultColumnWidth = defaultColumnWidth\n    ..textDirection = textDirection ?? Directionality.of(context)\n    ..border = border\n    ..rowDecorations = _rowDecorations\n    ..configuration = createLocalImageConfiguration(context)\n    ..defaultVerticalAlignment = defaultVerticalAlignment\n    ..textBaseline = textBaseline;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/Table\/updateRenderObject.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.Table",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "renderObject",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "rendering.RenderTable"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The style to use when painting the boundary and interior divisions of the table.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TableBorder border\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/border.html",
            "isDeprecated": "0",
            "type": "rendering.TableBorder",
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>The rows of the table.<\/p>\n<p>Every row in a table must have the same number of children, and all the\nchildren must be non-null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;TableRow&gt; children\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/children.html",
            "isDeprecated": "0",
            "type": "dart:core.List<widgets.TableRow>",
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>How the horizontal extents of the columns of this table should be determined.<\/p>\n<p>If the <a href=\"dart-core\/Map-class.html\">Map<\/a> has a null entry for a given column, the table uses the\n<a href=\"widgets\/Table\/defaultColumnWidth.html\">defaultColumnWidth<\/a> instead. By default, that uses flex sizing to\ndistribute free space equally among the columns.<\/p>\n<p>The <a href=\"rendering\/FixedColumnWidth-class.html\">FixedColumnWidth<\/a> class can be used to specify a specific width in\npixels. That is the cheapest way to size a table's columns.<\/p>\n<p>The layout performance of the table depends critically on which column\nsizing algorithms are used here. In particular, <a href=\"rendering\/IntrinsicColumnWidth-class.html\">IntrinsicColumnWidth<\/a> is\nquite expensive because it needs to measure each cell in the column to\ndetermine the intrinsic size of the column.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;int, TableColumnWidth&gt; columnWidths\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/columnWidths.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<dart:core.int<rendering.TableColumnWidth>>",
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>How to determine with widths of columns that don't have an explicit sizing algorithm.<\/p>\n<p>Specifically, the <a href=\"widgets\/Table\/defaultColumnWidth.html\">defaultColumnWidth<\/a> is used for column <code>i<\/code> if\n<code>columnWidths[i]<\/code> is null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TableColumnWidth defaultColumnWidth\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/defaultColumnWidth.html",
            "isDeprecated": "0",
            "type": "rendering.TableColumnWidth",
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>How cells that do not explicitly specify a vertical alignment are aligned vertically.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TableCellVerticalAlignment defaultVerticalAlignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/defaultVerticalAlignment.html",
            "isDeprecated": "0",
            "type": "rendering.TableCellVerticalAlignment",
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>The text baseline to use when aligning rows using <a href=\"rendering\/TableCellVerticalAlignment-class.html\">TableCellVerticalAlignment.baseline<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextBaseline textBaseline\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/textBaseline.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextBaseline",
            "memberOf": "widgets.Table",
            "params": []
        },
        {
            "desc": "<p>The direction in which the columns are ordered.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/Table\/textDirection.html",
            "isDeprecated": "0",
            "type": "dart:ui.TextDirection",
            "memberOf": "widgets.Table",
            "params": []
        }
    ]
}