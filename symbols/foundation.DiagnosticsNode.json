{
    "desc": "<p>Defines diagnostics data for a <a href=\"foundation\/DiagnosticsNode\/value.html\">value<\/a>.<\/p>\n<p><a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> provides a high quality multi-line string dump via\n<a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">toStringDeep<\/a>. The core members are the <a href=\"foundation\/DiagnosticsNode\/name.html\">name<\/a>, <a href=\"foundation\/DiagnosticsNode\/toDescription.html\">toDescription<\/a>,\n<a href=\"foundation\/DiagnosticsNode\/getProperties.html\">getProperties<\/a>, <a href=\"foundation\/DiagnosticsNode\/value.html\">value<\/a>, and <a href=\"foundation\/DiagnosticsNode\/getChildren.html\">getChildren<\/a>. All other members exist\ntypically to provide hints for how <a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">toStringDeep<\/a> and debugging tools should\nformat output.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "foundation\/DiagnosticsNode-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "foundation",
    "name": "foundation.DiagnosticsNode",
    "shortname": "DiagnosticsNode",
    "extends": [],
    "realImplementors": [
        "foundation.DiagnosticableNode",
        "foundation.DiagnosticsProperty",
        "foundation.DoubleProperty",
        "foundation.EnumProperty",
        "foundation.FlagProperty",
        "foundation.IntProperty",
        "foundation.IterableProperty",
        "foundation.MessageProperty",
        "foundation.ObjectFlagProperty",
        "foundation.PercentProperty",
        "foundation.StringProperty",
        "painting.TransformProperty"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initializes the object.<\/p>\n<p>The <code>style<\/code>, <code>showName<\/code>, and <code>showSeparator<\/code> arguments must not\nbe null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsNode({\n  @required this.name,\n  this.style,\n  this.showName = true,\n  this.showSeparator = true,\n}) : assert(showName != null),\n     assert(showSeparator != null),\n     \/\/ A name ending with ':' indicates that the user forgot that the ':' will\n     \/\/ be automatically added for them when generating descriptions of the\n     \/\/ property.\n     assert(name == null || !name.endsWith(':'), 'Names of diagnostic nodes must not end with colons.');<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/DiagnosticsNode.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": [
                {
                    "name": "name",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "showName",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "showSeparator",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "style",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.DiagnosticsTreeStyle"
                }
            ]
        },
        {
            "desc": "<p>Children of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/DiagnosticsNode\/getProperties.html\">getProperties<\/a><\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;DiagnosticsNode&gt; getChildren();<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/getChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Properties of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>Properties and children are kept distinct even though they are both\n<a href=\"dart-core\/List-class.html\">List&lt;DiagnosticsNode&gt;<\/a> because they should be grouped differently.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;DiagnosticsNode&gt; getProperties();<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/getProperties.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Whether the diagnostic should be filtered due to its <a href=\"foundation\/DiagnosticsNode\/level.html\">level<\/a> being lower\nthan <code>minLevel<\/code>.<\/p>\n<p>If <code>minLevel<\/code> is <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a> no diagnostics will be filtered.\nIf <code>minLevel<\/code> is <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.off<\/a> all diagnostics will be filtered.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isFiltered(DiagnosticLevel minLevel) =&gt; level.index &lt; minLevel.index;<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/isFiltered.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": [
                {
                    "name": "minLevel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticLevel"
                }
            ]
        },
        {
            "desc": "<p>Returns a description with a short summary of the node itself not\nincluding children or properties.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent does not line break between properties, the\ndescription of a property should also be a single line if possible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toDescription({ TextTreeConfiguration parentConfiguration });<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/toDescription.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": [
                {
                    "name": "parentConfiguration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.TextTreeConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; data = &lt;String, Object&gt;{\n    'name': name,\n    'showSeparator': showSeparator,\n    'description': toDescription(),\n    'level': describeEnum(level),\n    'showName': showName,\n    'emptyBodyDescription': emptyBodyDescription,\n    'style': describeEnum(style),\n    'valueToString': value.toString(),\n    'type': runtimeType.toString(),\n    'hasChildren': getChildren().isNotEmpty,\n  };\n  return data;\n}<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/toJsonMap.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this diagnostic that is compatible with\nthe style of the parent if the node is not the root.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the\n<a href=\"foundation\/DiagnosticsNode\/toString.html\">toString<\/a> for each property should avoid line breaks if possible.<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString({\n  TextTreeConfiguration parentConfiguration,\n  DiagnosticLevel minLevel = DiagnosticLevel.info,\n}) {\n  assert(style != null);\n  assert(minLevel != null);\n  if (style == DiagnosticsTreeStyle.singleLine)\n    return toStringDeep(parentConfiguration: parentConfiguration, minLevel: minLevel);\n\n  final String description = toDescription(parentConfiguration: parentConfiguration);\n\n  if (name == null || name.isEmpty || !showName)\n    return description;\n\n  return description.contains('\\n') ? '$name$_separator\\n$description'\n                                    : '$name$_separator $description';\n}<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": [
                {
                    "name": "minLevel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticLevel"
                },
                {
                    "name": "parentConfiguration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.TextTreeConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this node and its descendants.<\/p>\n<p><code>prefixLineOne<\/code> will be added to the front of the first line of the\noutput. <code>prefixOtherLines<\/code> will be added to the front of each other line.\nIf <code>prefixOtherLines<\/code> is null, the <code>prefixLineOne<\/code> is used for every line.\nBy default, there is no prefix.<\/p>\n<p><code>minLevel<\/code> specifies the minimum <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel<\/a> for properties included\nin the output.<\/p>\n<p>The <a href=\"foundation\/DiagnosticsNode\/toStringDeep.html\">toStringDeep<\/a> method takes other arguments, but those are intended\nfor internal use when recursing to the descendants, and so can be ignored.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticsNode\/toString.html\">toString<\/a>, for a brief description of the <a href=\"foundation\/DiagnosticsNode\/value.html\">value<\/a> but not its\nchildren.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringDeep({\n  String prefixLineOne = '',\n  String prefixOtherLines,\n  TextTreeConfiguration parentConfiguration,\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n}) {\n  assert(minLevel != null);\n  prefixOtherLines ??= prefixLineOne;\n\n  final List&lt;DiagnosticsNode&gt; children = getChildren();\n  final TextTreeConfiguration config = textTreeConfiguration;\n  if (prefixOtherLines.isEmpty)\n    prefixOtherLines += config.prefixOtherLinesRootNode;\n\n  final _PrefixedStringBuilder builder = _PrefixedStringBuilder(\n    prefixLineOne,\n    prefixOtherLines,\n  );\n\n  final String description = toDescription(parentConfiguration: parentConfiguration);\n  if (description == null || description.isEmpty) {\n    if (showName &amp;&amp; name != null)\n      builder.write(name);\n  } else {\n    if (name != null &amp;&amp; name.isNotEmpty &amp;&amp; showName) {\n      builder.write(name);\n      if (showSeparator)\n        builder.write(config.afterName);\n\n      builder.write(\n          config.isNameOnOwnLine || description.contains('\\n') ? '\\n' : ' ');\n      if (description.contains('\\n') &amp;&amp; style == DiagnosticsTreeStyle.singleLine)\n        builder.prefixOtherLines += '  ';\n    }\n    builder.prefixOtherLines += children.isEmpty ?\n        config.propertyPrefixNoChildren : config.propertyPrefixIfChildren;\n    builder.write(description);\n  }\n\n  final List&lt;DiagnosticsNode&gt; properties = getProperties().where(\n    (DiagnosticsNode n) =&gt; !n.isFiltered(minLevel)\n  ).toList();\n\n  if (properties.isNotEmpty || children.isNotEmpty || emptyBodyDescription != null)\n    builder.write(config.afterDescriptionIfBody);\n\n  if (config.lineBreakProperties)\n    builder.write(config.lineBreak);\n\n  if (properties.isNotEmpty)\n    builder.write(config.beforeProperties);\n\n  builder.prefixOtherLines += config.bodyIndent;\n\n  if (emptyBodyDescription != null &amp;&amp;\n      properties.isEmpty &amp;&amp;\n      children.isEmpty &amp;&amp;\n      prefixLineOne.isNotEmpty) {\n    builder.write(emptyBodyDescription);\n    if (config.lineBreakProperties)\n      builder.write(config.lineBreak);\n  }\n\n  for (int i = 0; i &lt; properties.length; ++i) {\n    final DiagnosticsNode property = properties[i];\n    if (i &gt; 0)\n      builder.write(config.propertySeparator);\n\n    const int kWrapWidth = 65;\n    if (property.style != DiagnosticsTreeStyle.singleLine) {\n      final TextTreeConfiguration propertyStyle = property.textTreeConfiguration;\n      builder.writeRaw(property.toStringDeep(\n        prefixLineOne: '${builder.prefixOtherLines}${propertyStyle.prefixLineOne}',\n        prefixOtherLines: '${builder.prefixOtherLines}${propertyStyle.linkCharacter}${propertyStyle.prefixOtherLines}',\n        parentConfiguration: config,\n        minLevel: minLevel,\n      ));\n      continue;\n    }\n    assert(property.style == DiagnosticsTreeStyle.singleLine);\n    final String message = property.toString(parentConfiguration: config, minLevel: minLevel);\n    if (!config.lineBreakProperties || message.length &lt; kWrapWidth) {\n      builder.write(message);\n    } else {\n      \/\/ debugWordWrap doesn't handle line breaks within the text being\n      \/\/ wrapped so we must call it on each line.\n      final List&lt;String&gt; lines = message.split('\\n');\n      for (int j = 0; j &lt; lines.length; ++j) {\n        final String line = lines[j];\n        if (j &gt; 0)\n          builder.write(config.lineBreak);\n        builder.write(debugWordWrap(line, kWrapWidth, wrapIndent: '  ').join('\\n'));\n      }\n    }\n    if (config.lineBreakProperties)\n      builder.write(config.lineBreak);\n  }\n  if (properties.isNotEmpty)\n    builder.write(config.afterProperties);\n\n  if (!config.lineBreakProperties)\n    builder.write(config.lineBreak);\n\n  final String prefixChildren = '$prefixOtherLines${config.bodyIndent}';\n\n  if (children.isEmpty &amp;&amp;\n      config.addBlankLineIfNoChildren &amp;&amp;\n      builder.hasMultipleLines) {\n    final String prefix = prefixChildren.trimRight();\n    if (prefix.isNotEmpty)\n      builder.writeRaw('$prefix${config.lineBreak}');\n  }\n\n  if (children.isNotEmpty &amp;&amp; config.showChildren) {\n    if (config.isBlankLineBetweenPropertiesAndChildren &amp;&amp;\n        properties.isNotEmpty &amp;&amp;\n        children.first.textTreeConfiguration.isBlankLineBetweenPropertiesAndChildren) {\n      builder.write(config.lineBreak);\n    }\n\n    for (int i = 0; i &lt; children.length; i++) {\n      final DiagnosticsNode child = children[i];\n      assert(child != null);\n      final TextTreeConfiguration childConfig = _childTextConfiguration(child, config);\n      if (i == children.length - 1) {\n        final String lastChildPrefixLineOne = '$prefixChildren${childConfig.prefixLastChildLineOne}';\n        builder.writeRawLine(child.toStringDeep(\n          prefixLineOne: lastChildPrefixLineOne,\n          prefixOtherLines: '$prefixChildren${childConfig.childLinkSpace}${childConfig.prefixOtherLines}',\n          parentConfiguration: config,\n          minLevel: minLevel,\n        ));\n        if (childConfig.footer.isNotEmpty)\n          builder.writeRaw('$prefixChildren${childConfig.childLinkSpace}${childConfig.footer}');\n      } else {\n        final TextTreeConfiguration nextChildStyle = _childTextConfiguration(children[i + 1], config);\n        final String childPrefixLineOne = '$prefixChildren${childConfig.prefixLineOne}';\n        final String childPrefixOtherLines ='$prefixChildren${nextChildStyle.linkCharacter}${childConfig.prefixOtherLines}';\n        builder.writeRawLine(child.toStringDeep(\n          prefixLineOne: childPrefixLineOne,\n          prefixOtherLines: childPrefixOtherLines,\n          parentConfiguration: config,\n          minLevel: minLevel,\n        ));\n        if (childConfig.footer.isNotEmpty)\n          builder.writeRaw('$prefixChildren${nextChildStyle.linkCharacter}${childConfig.footer}');\n      }\n    }\n  }\n  return builder.toString();\n}<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticsNode\/toStringDeep.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticsNode",
            "params": [
                {
                    "name": "minLevel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticLevel"
                },
                {
                    "name": "parentConfiguration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.TextTreeConfiguration"
                },
                {
                    "name": "prefixLineOne",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "prefixOtherLines",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Description to show if the node has no displayed properties or children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get emptyBodyDescription =&gt; null;<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/emptyBodyDescription.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>Typically this only makes sense to set to a different value than\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.info<\/a> for diagnostics representing properties. Some\nsubclasses have a <code>level<\/code> argument to their constructor which influences\nthe value returned here but other factors also influence it. For example,\nwhether an exception is thrown computing a property value\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> is returned.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticLevel get level =&gt; DiagnosticLevel.info;<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/level.html",
            "isDeprecated": "0",
            "type": "foundation.DiagnosticLevel",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Label describing the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>, typically shown before a separator\n(see <a href=\"foundation\/DiagnosticsNode\/showSeparator.html\">showSeparator<\/a>).<\/p>\n<p>The name will be omitted if the <a href=\"foundation\/DiagnosticsNode\/showName.html\">showName<\/a> property is false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/name.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Whether the name of the property should be shown when showing the default\nview of the tree.<\/p>\n<p>This could be set to false (hiding the name) if the value's description\nwill make the name self-evident.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showName\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/showName.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Whether to show a separator between <a href=\"foundation\/DiagnosticsNode\/name.html\">name<\/a> and description.<\/p>\n<p>If false, name and description should be shown with no separation.\n<code>:<\/code> is typically used as a separator when displaying as text.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showSeparator\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/showSeparator.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Hint for how the node should be displayed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DiagnosticsTreeStyle style\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/style.html",
            "isDeprecated": "0",
            "type": "foundation.DiagnosticsTreeStyle",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>Returns a configuration specifying how this object should be rendered\nas text art.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nTextTreeConfiguration get textTreeConfiguration {\n  assert(style != null);\n  switch (style) {\n    case DiagnosticsTreeStyle.dense:\n      return denseTextConfiguration;\n    case DiagnosticsTreeStyle.sparse:\n      return sparseTextConfiguration;\n    case DiagnosticsTreeStyle.offstage:\n      return dashedTextConfiguration;\n    case DiagnosticsTreeStyle.whitespace:\n      return whitespaceTextConfiguration;\n    case DiagnosticsTreeStyle.transition:\n      return transitionTextConfiguration;\n    case DiagnosticsTreeStyle.singleLine:\n      return singleLineTextConfiguration;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/textTreeConfiguration.html",
            "isDeprecated": "0",
            "type": "foundation.TextTreeConfiguration",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        },
        {
            "desc": "<p>The actual object this is diagnostics data for.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Object get value;<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticsNode\/value.html",
            "isDeprecated": "0",
            "type": "dart:core.Object",
            "memberOf": "foundation.DiagnosticsNode",
            "params": []
        }
    ]
}