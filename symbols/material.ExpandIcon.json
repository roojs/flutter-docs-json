{
    "desc": "<p>A widget representing a rotating expand\/collapse button. The icon rotates\n180 degrees when pressed, then reverts the animation on a second press.\nThe underlying icon is <a href=\"material\/Icons\/expand_more-constant.html\">Icons.expand_more<\/a>.<\/p>\n<p>The expand icon does not include a semantic label for accessibility. In\norder to be accessible it should be combined with a label using\n<a href=\"widgets\/MergeSemantics-class.html\">MergeSemantics<\/a>. This is done automatically by the <a href=\"material\/ExpansionPanel-class.html\">ExpansionPanel<\/a> widget.<\/p>\n<p>See <a href=\"material\/IconButton-class.html\">IconButton<\/a> for a more general implementation of a pressable button\nwith an icon.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "material\/ExpandIcon-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.ExpandIcon",
    "shortname": "ExpandIcon",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>The callback triggered when the icon is pressed and the state changes\nbetween expanded and collapsed. The value passed to the current state.<\/p>\n<p>If this is set to null, the button will be disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onPressed\n\n<\/code><\/pre>\n        ",
            "href": "material\/ExpandIcon\/onPressed.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.bool>",
            "memberOf": "material.ExpandIcon",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates an <a href=\"material\/ExpandIcon-class.html\">ExpandIcon<\/a> with the given padding, and a callback that is\ntriggered when the icon is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ExpandIcon({\n  Key key,\n  this.isExpanded = false,\n  this.size = 24.0,\n  @required this.onPressed,\n  this.padding = const EdgeInsets.all(8.0),\n}) : assert(isExpanded != null),\n     assert(size != null),\n     assert(padding != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/ExpandIcon\/ExpandIcon.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ExpandIcon",
            "params": [
                {
                    "name": "isExpanded",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "onPressed",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.bool>"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "size",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/ExpandIcon\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ExpandIconState createState() =&gt; _ExpandIconState();<\/code><\/pre>\n    ",
            "href": "material\/ExpandIcon\/createState.html",
            "isDeprecated": "0",
            "type": "<_ExpandIconState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ExpandIcon",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the icon is in an expanded state.<\/p>\n<p>Rebuilding the widget with a different <a href=\"material\/ExpandIcon\/isExpanded.html\">isExpanded<\/a> value will trigger\nthe animation, but will not trigger the <a href=\"material\/ExpandIcon\/onPressed.html\">onPressed<\/a> callback.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isExpanded\n\n<\/code><\/pre>\n        ",
            "href": "material\/ExpandIcon\/isExpanded.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.ExpandIcon",
            "params": []
        },
        {
            "desc": "<p>The padding around the icon. The entire padded icon will react to input\ngestures.<\/p>\n<p>This property must not be null. It defaults to 8.0 padding on all sides.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "material\/ExpandIcon\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.ExpandIcon",
            "params": []
        },
        {
            "desc": "<p>The size of the icon.<\/p>\n<p>This property must not be null. It defaults to 24.0.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double size\n\n<\/code><\/pre>\n        ",
            "href": "material\/ExpandIcon\/size.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.ExpandIcon",
            "params": []
        }
    ]
}