{
    "desc": "<p>A span of time, such as 27 days, 4 hours, 12 minutes, and 3 seconds.<\/p>\n<p>A <code>Duration<\/code> represents a difference from one point in time to another. The\nduration may be \"negative\" if the difference is from a later time to an\nearlier.<\/p>\n<p>Durations are context independent. For example, a duration of 2 days is\nalways 48 hours, even when it is added to a <code>DateTime<\/code> just when the\ntime zone is about to do a daylight-savings switch. (See <a href=\"dart-core\/DateTime\/add.html\">DateTime.add<\/a>).<\/p>\n<p>Despite the same name, a <code>Duration<\/code> object does not implement \"Durations\"\nas specified by ISO 8601. In particular, a duration object does not keep\ntrack of the individually provided members (such as \"days\" or \"hours\"), but\nonly uses these arguments to compute the length of the corresponding time\ninterval.<\/p>\n<p>To create a new Duration object, use this class's single constructor\ngiving the appropriate arguments:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Duration fastestMarathon = new Duration(hours:2, minutes:3, seconds:2);\n<\/code><\/pre>\n<p>The <a href=\"dart-core\/Duration-class.html\">Duration<\/a> is the sum of all individual parts.\nThis means that individual parts can be larger than the next-bigger unit.\nFor example, <a href=\"dart-core\/Duration\/inMinutes.html\">inMinutes<\/a> can be greater than 59.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(fastestMarathon.inMinutes == 123);\n<\/code><\/pre>\n<p>All individual parts are allowed to be negative.<\/p>\n<p>Use one of the properties, such as <a href=\"dart-core\/Duration\/inDays.html\">inDays<\/a>,\nto retrieve the integer value of the Duration in the specified time unit.\nNote that the returned value is rounded down.\nFor example,<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Duration aLongWeekend = new Duration(hours:88);\nassert(aLongWeekend.inDays == 3);\n<\/code><\/pre>\n<p>This class provides a collection of arithmetic\nand comparison operators,\nplus a set of constants useful for converting time units.<\/p>\n<p>See <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> to represent a point in time.\nSee <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> to measure time-spans.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "dart-core\/Duration-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Duration",
    "shortname": "Duration",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a new Duration object whose value\nis the sum of all individual parts.<\/p>\n<p>Individual parts can be larger than the next-bigger unit.\nFor example, <code>hours<\/code> can be greater than 23.<\/p>\n<p>All individual parts are allowed to be negative.\nAll arguments are 0 by default.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Duration(\n    {int days: 0,\n    int hours: 0,\n    int minutes: 0,\n    int seconds: 0,\n    int milliseconds: 0,\n    int microseconds: 0})\n    : this._microseconds(microsecondsPerDay * days +\n          microsecondsPerHour * hours +\n          microsecondsPerMinute * minutes +\n          microsecondsPerSecond * seconds +\n          microsecondsPerMillisecond * milliseconds +\n          microseconds);<\/code><\/pre>\n    ",
            "href": "dart-core\/Duration\/Duration.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Duration",
            "params": [
                {
                    "name": "days",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "hours",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "microseconds",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "milliseconds",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "minutes",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "seconds",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <code>Duration<\/code> representing the absolute value of this\n<code>Duration<\/code>.<\/p>\n<p>The returned <code>Duration<\/code> has the same length as this one, but is always\npositive.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Duration abs() =&gt; new Duration._microseconds(_duration.abs());<\/code><\/pre>\n    ",
            "href": "dart-core\/Duration\/abs.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Compares this <a href=\"dart-core\/Duration-class.html\">Duration<\/a> to <code>other<\/code>, returning zero if the values are equal.<\/p>\n<p>Returns a negative integer if this <code>Duration<\/code> is shorter than\n<code>other<\/code>, or a positive integer if it is longer.<\/p>\n<p>A negative <code>Duration<\/code> is always considered shorter than a positive one.<\/p>\n<p>It is always the case that <code>duration1.compareTo(duration2) &lt; 0<\/code> iff\n<code>(someDate + duration1).compareTo(someDate + duration2) &lt; 0<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(Duration other) =&gt; _duration.compareTo(other._duration);<\/code><\/pre>\n    ",
            "href": "dart-core\/Duration\/compareTo.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Duration",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this <code>Duration<\/code>.<\/p>\n<p>Returns a string with hours, minutes, seconds, and microseconds, in the\nfollowing format: <code>HH:MM:SS.mmmmmm<\/code>. For example,<\/p>\n<pre class=\"language-dart\"><code>var d = new Duration(days:1, hours:1, minutes:33, microseconds: 500);\nd.toString();  \/\/ \"25:33:00.000500\"\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String sixDigits(int n) {\n    if (n &gt;= 100000) return \"$n\";\n    if (n &gt;= 10000) return \"0$n\";\n    if (n &gt;= 1000) return \"00$n\";\n    if (n &gt;= 100) return \"000$n\";\n    if (n &gt;= 10) return \"0000$n\";\n    return \"00000$n\";\n  }\n\n  String twoDigits(int n) {\n    if (n &gt;= 10) return \"$n\";\n    return \"0$n\";\n  }\n\n  if (inMicroseconds &lt; 0) {\n    return \"-${-this}\";\n  }\n  String twoDigitMinutes = twoDigits(inMinutes.remainder(minutesPerHour));\n  String twoDigitSeconds = twoDigits(inSeconds.remainder(secondsPerMinute));\n  String sixDigitUs =\n      sixDigits(inMicroseconds.remainder(microsecondsPerSecond));\n  return \"$inHours:$twoDigitMinutes:$twoDigitSeconds.$sixDigitUs\";\n}<\/code><\/pre>\n    ",
            "href": "dart-core\/Duration\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Duration",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/Duration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; _duration.hashCode;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns the number of whole days spanned by this Duration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inDays =&gt; _duration ~\/ Duration.microsecondsPerDay;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/inDays.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns the number of whole hours spanned by this Duration.<\/p>\n<p>The returned value can be greater than 23.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inHours =&gt; _duration ~\/ Duration.microsecondsPerHour;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/inHours.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns number of whole microseconds spanned by this Duration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inMicroseconds =&gt; _duration;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/inMicroseconds.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns number of whole milliseconds spanned by this Duration.<\/p>\n<p>The returned value can be greater than 999.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inMilliseconds =&gt; _duration ~\/ Duration.microsecondsPerMillisecond;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/inMilliseconds.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns the number of whole minutes spanned by this Duration.<\/p>\n<p>The returned value can be greater than 59.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inMinutes =&gt; _duration ~\/ Duration.microsecondsPerMinute;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/inMinutes.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns the number of whole seconds spanned by this Duration.<\/p>\n<p>The returned value can be greater than 59.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inSeconds =&gt; _duration ~\/ Duration.microsecondsPerSecond;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/inSeconds.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Duration",
            "params": []
        },
        {
            "desc": "<p>Returns whether this <code>Duration<\/code> is negative.<\/p>\n<p>A negative <code>Duration<\/code> represents the difference from a later time to an\nearlier time.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNegative =&gt; _duration &lt; 0;<\/code><\/pre>\n        ",
            "href": "dart-core\/Duration\/isNegative.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.Duration",
            "params": []
        }
    ]
}