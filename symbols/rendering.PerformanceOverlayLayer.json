{
    "desc": "<p>A layer that indicates to the compositor that it should display\ncertain performance statistics within it.<\/p>\n<p>Performance overlay layers are always leaves in the layer tree.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/PerformanceOverlayLayer-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.PerformanceOverlayLayer",
    "shortname": "PerformanceOverlayLayer",
    "extends": [
        "rendering.Layer",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a layer that displays a performance overlay.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PerformanceOverlayLayer({\n  @required Rect overlayRect,\n  @required this.optionsMask,\n  @required this.rasterizerThreshold,\n  @required this.checkerboardRasterCacheImages,\n  @required this.checkerboardOffscreenLayers,\n}) : _overlayRect = overlayRect;<\/code><\/pre>\n    ",
            "href": "rendering\/PerformanceOverlayLayer\/PerformanceOverlayLayer.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": [
                {
                    "name": "checkerboardOffscreenLayers",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "checkerboardRasterCacheImages",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "optionsMask",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "overlayRect",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "rasterizerThreshold",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Override this method to upload this layer to the engine.<\/p>\n<p>Return the engine layer for retained rendering. When there's no\ncorresponding engine layer, null is returned.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nui.EngineLayer addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]) {\n  assert(optionsMask != null);\n  builder.addPerformanceOverlay(optionsMask, overlayRect.shift(layerOffset));\n  builder.setRasterizerTracingThreshold(rasterizerThreshold);\n  builder.setCheckerboardRasterCacheImages(checkerboardRasterCacheImages);\n  builder.setCheckerboardOffscreenLayers(checkerboardOffscreenLayers);\n  return null; \/\/ this does not return an engine layer yet.\n}<\/code><\/pre>\n    ",
            "href": "rendering\/PerformanceOverlayLayer\/addToScene.html",
            "isDeprecated": "0",
            "type": "dart:ui.EngineLayer",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": [
                {
                    "name": "builder",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.SceneBuilder"
                },
                {
                    "name": "layerOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the value of <code>S<\/code> that corresponds to the point described by\n<code>regionOffset<\/code>.<\/p>\n<p>Returns null if no matching region is found.<\/p>\n<p>The main way for a value to be assigned here is by pushing an\n<a href=\"rendering\/AnnotatedRegionLayer-class.html\">AnnotatedRegionLayer<\/a> into the layer tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/AnnotatedRegionLayer-class.html\">AnnotatedRegionLayer<\/a>, for placing values in the layer tree.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nS find&lt;S&gt;(Offset regionOffset) =&gt; null;<\/code><\/pre>\n    ",
            "href": "rendering\/PerformanceOverlayLayer\/find.html",
            "isDeprecated": "0",
            "type": "<S>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": [
                {
                    "name": "regionOffset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether the compositor should checkerboard layers that are rendered to offscreen\nbitmaps. This can be useful for debugging rendering performance.<\/p>\n<p>Render target switches are caused by using opacity layers (via a <a href=\"widgets\/FadeTransition-class.html\">FadeTransition<\/a> or\n<a href=\"widgets\/Opacity-class.html\">Opacity<\/a> widget), clips, shader mask layers, etc. Selecting a new render target\nand merging it with the rest of the scene has a performance cost. This can sometimes\nbe avoided by using equivalent widgets that do not require these layers (for example,\nreplacing an <a href=\"widgets\/Opacity-class.html\">Opacity<\/a> widget with an <a href=\"widgets\/Image-class.html\">widgets.Image<\/a> using a <a href=\"dart-ui\/BlendMode-class.html\">BlendMode<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardOffscreenLayers\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PerformanceOverlayLayer\/checkerboardOffscreenLayers.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": []
        },
        {
            "desc": "<p>Whether the raster cache should checkerboard cached entries.<\/p>\n<p>The compositor can sometimes decide to cache certain portions of the\nwidget hierarchy. Such portions typically don't change often from frame to\nframe and are expensive to render. This can speed up overall rendering. However,\nthere is certain upfront cost to constructing these cache entries. And, if\nthe cache entries are not used very often, this cost may not be worth the\nspeedup in rendering of subsequent frames. If the developer wants to be certain\nthat populating the raster cache is not causing stutters, this option can be\nset. Depending on the observations made, hints can be provided to the compositor\nthat aid it in making better decisions about caching.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardRasterCacheImages\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PerformanceOverlayLayer\/checkerboardRasterCacheImages.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": []
        },
        {
            "desc": "<p>The mask is created by shifting 1 by the index of the specific\n<a href=\"rendering\/PerformanceOverlayOption-class.html\">PerformanceOverlayOption<\/a> to enable.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int optionsMask\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PerformanceOverlayLayer\/optionsMask.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": []
        },
        {
            "desc": "<p>The rectangle in this layer's coordinate system that the overlay should occupy.<\/p>\n<p>The scene must be explicitly recomposited after this property is changed\n(as described at <a href=\"rendering\/Layer-class.html\">Layer<\/a>).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get overlayRect =&gt; _overlayRect;<\/code><\/pre>\n        ",
            "href": "rendering\/PerformanceOverlayLayer\/overlayRect.html",
            "isDeprecated": "0",
            "type": "dart:ui.Rect",
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": []
        },
        {
            "desc": "<p>The rasterizer threshold is an integer specifying the number of frame\nintervals that the rasterizer must miss before it decides that the frame\nis suitable for capturing an SkPicture trace for further analysis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int rasterizerThreshold\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/PerformanceOverlayLayer\/rasterizerThreshold.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "rendering.PerformanceOverlayLayer",
            "params": []
        }
    ]
}