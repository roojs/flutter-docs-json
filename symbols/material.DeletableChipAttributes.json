{
    "desc": "<p>An interface for material design chips that can be deleted.<\/p>\n<p>The defaults mentioned in the documentation for each attribute are what\nthe implementing classes typically use for defaults (but this class doesn't\nprovide or enforce them).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Chip-class.html\">Chip<\/a>, a chip that displays information and can be deleted.<\/li>\n<li>\n<a href=\"material\/InputChip-class.html\">InputChip<\/a>, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/chips.html\">material.io\/design\/components\/chips.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/DeletableChipAttributes-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.DeletableChipAttributes",
    "shortname": "DeletableChipAttributes",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the user taps the <a href=\"material\/DeletableChipAttributes\/deleteIcon.html\">deleteIcon<\/a> to delete the chip.<\/p>\n<p>If null, the delete button will not appear on the chip.<\/p>\n<p>The chip will not automatically remove itself: this just tells the app\nthat the user tapped the delete button. In order to delete the chip, you\nhave to do something similar to the following sample:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis sample shows how to use <a href=\"material\/DeletableChipAttributes\/onDeleted.html\">onDeleted<\/a> to remove an entry when the\ndelete button is tapped.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">class Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  @override\n  State createState() =&gt; CastListState();\n}\n\nclass CastListState extends State&lt;CastList&gt; {\n  final List&lt;Actor&gt; _cast = &lt;Actor&gt;[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable&lt;Widget&gt; get actorWidgets sync* {\n    for (Actor actor in _cast) {\n      yield Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\n\/\/ ...\n\n@override\nWidget build(BuildContext context) {\n  return Center(child: CastList());\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=material.DeletableChipAttributes.onDeleted.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for material.DeletableChipAttributes.onDeleted.1\n\n\/\/ This sample shows how to use [onDeleted] to remove an entry when the\n\/\/ delete button is tapped.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(_title)),\n        body: MyStatefulWidget(),\n      ),\n    );\n  }\n}\n\nclass Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  @override\n  State createState() =&gt; CastListState();\n}\n\nclass CastListState extends State&lt;CastList&gt; {\n  final List&lt;Actor&gt; _cast = &lt;Actor&gt;[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable&lt;Widget&gt; get actorWidgets sync* {\n    for (Actor actor in _cast) {\n      yield Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  @override\n  Widget build(BuildContext context) {\n    return Center(child: CastList());\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDeleted;<\/code><\/pre>\n        ",
            "href": "material\/DeletableChipAttributes\/onDeleted.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "material.DeletableChipAttributes",
            "params": []
        }
    ],
    "methods": [],
    "props": [
        {
            "desc": "<p>The message to be used for the chip's delete button tooltip.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get deleteButtonTooltipMessage;<\/code><\/pre>\n        ",
            "href": "material\/DeletableChipAttributes\/deleteButtonTooltipMessage.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "material.DeletableChipAttributes",
            "params": []
        },
        {
            "desc": "<p>The icon displayed when <a href=\"material\/DeletableChipAttributes\/onDeleted.html\">onDeleted<\/a> is set.<\/p>\n<p>Defaults to an <a href=\"widgets\/Icon-class.html\">Icon<\/a> widget set to use <a href=\"material\/Icons\/cancel-constant.html\">Icons.cancel<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Widget get deleteIcon;<\/code><\/pre>\n        ",
            "href": "material\/DeletableChipAttributes\/deleteIcon.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.DeletableChipAttributes",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"dart-ui\/Color-class.html\">Color<\/a> for the delete icon. The default is based on the ambient\n<code>IconTheme.color<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get deleteIconColor;<\/code><\/pre>\n        ",
            "href": "material\/DeletableChipAttributes\/deleteIconColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.DeletableChipAttributes",
            "params": []
        }
    ]
}