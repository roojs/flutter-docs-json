{
    "desc": "<p>Bidi stands for Bi-directional text.  According to\n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Bi-directional_text\">Wikipedia<\/a>:\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to\nboustrophedon, which is changing text directionality in each row.<\/p>\n<p>Utility class for formatting display text in a potentially\nopposite-directionality context without garbling layout issues.  Mostly a\nvery \"slimmed-down\" and dart-ified port of the Closure Birectional\nformatting libary. If there is a utility in the Closure library (or ICU, or\nelsewhere) that you would like this formatter to make available, please\ncontact the Dart team.<\/p>\n<p>Provides the following functionality:<\/p>\n<ol>\n<li>\n<p><em>BiDi Wrapping<\/em>\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a \"wrapper\" that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a 'span dir=rtl' tag) or - only in contexts where mark-up\ncan not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.<\/p>\n<\/li>\n<li>\n<p><em>Directionality estimation<\/em>\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.<\/p>\n<\/li>\n<li>\n<p><em>Escaping<\/em>\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent\nXSS attacks and other nasty business. This of course is always true, but the\nescaping cannot be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.<\/p>\n<\/li>\n<\/ol>\n<p>Thus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "intl\/BidiFormatter-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "intl",
    "name": "intl.BidiFormatter",
    "shortname": "BidiFormatter",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Estimates the directionality of <code>text<\/code> using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n<code>isHtml<\/code> is true if <code>text<\/code> HTML or HTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection estimateDirection(String text, {bool isHtml: false}) {\n  return Bidi.estimateDirectionOfText(text, isHtml: isHtml); \/\/TODO~!!!\n}<\/code><\/pre>\n    ",
            "href": "intl\/BidiFormatter\/estimateDirection.html",
            "isDeprecated": "0",
            "type": "intl.TextDirection",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.BidiFormatter",
            "params": [
                {
                    "name": "isHtml",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Formats a string of a given (or estimated, if not provided) <code>direction<\/code>\nfor use in HTML output of the context directionality, so an\nopposite-directionality string is neither garbled nor garbles what follows\nit.<\/p>\n<p>If the input string's directionality doesn't match the context\ndirectionality, we wrap it with a <code>span<\/code> tag and add a <code>dir<\/code> attribute\n(either \"dir=rtl\" or \"dir=ltr\").  If alwaysSpan was true when constructing\nthe formatter, the input is always wrapped with <code>span<\/code> tag, skipping the\ndir attribute when it's not needed.<\/p>\n<p>If <code>resetDir<\/code> is true and the overall directionality or the exit\ndirectionality of <code>text<\/code> is opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM). If <code>isHtml<\/code> is false, we HTML-escape the <code>text<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String wrapWithSpan(String text,\n    {bool isHtml: false, bool resetDir: true, TextDirection direction}) {\n  if (direction == null) direction = estimateDirection(text, isHtml: isHtml);\n  var result;\n  if (!isHtml) text = const HtmlEscape().convert(text);\n  var directionChange = contextDirection.isDirectionChange(direction);\n  if (_alwaysSpan || directionChange) {\n    var spanDirection = '';\n    if (directionChange) {\n      spanDirection = ' dir=${direction.spanText}';\n    }\n    result = '&lt;span$spanDirection&gt;$text&lt;\/span&gt;';\n  } else {\n    result = text;\n  }\n  return result + (resetDir ? _resetDir(text, direction, isHtml) : '');\n}<\/code><\/pre>\n    ",
            "href": "intl\/BidiFormatter\/wrapWithSpan.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.BidiFormatter",
            "params": [
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "intl.TextDirection"
                },
                {
                    "name": "isHtml",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "resetDir",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Format <code>text<\/code> of a known (if specified) or estimated <code>direction<\/code> for use\nin <em>plain-text<\/em> output of the context directionality, so an\nopposite-directionality text is neither garbled nor garbles what follows\nit. Unlike wrapWithSpan, this makes use of unicode BiDi formatting\ncharacters instead of spans for wrapping. The returned string would be\nRLE+text+PDF for RTL text, or LRE+text+PDF for LTR text.<\/p>\n<p>If <code>resetDir<\/code> is true, and if the overall directionality or the exit\ndirectionality of text are opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM).<\/p>\n<p>In HTML, the <em>only<\/em> valid use of this function is inside of elements that\ndo not allow markup, e.g. an 'option' tag.\nThis function does <em>not<\/em> do HTML-escaping regardless of the value of\n<code>isHtml<\/code>. <code>isHtml<\/code> is used to designate if the text contains HTML (escaped\nor unescaped).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String wrapWithUnicode(String text,\n    {bool isHtml: false, bool resetDir: true, TextDirection direction}) {\n  if (direction == null) direction = estimateDirection(text, isHtml: isHtml);\n  var result = text;\n  if (contextDirection.isDirectionChange(direction)) {\n    var marker = direction == TextDirection.RTL ? Bidi.RLE : Bidi.LRE;\n    result = \"${marker}$text${Bidi.PDF}\";\n  }\n  return result + (resetDir ? _resetDir(text, direction, isHtml) : '');\n}<\/code><\/pre>\n    ",
            "href": "intl\/BidiFormatter\/wrapWithUnicode.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.BidiFormatter",
            "params": [
                {
                    "name": "direction",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "intl.TextDirection"
                },
                {
                    "name": "isHtml",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "resetDir",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The direction of the surrounding text (the context).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection contextDirection\n\n<\/code><\/pre>\n        ",
            "href": "intl\/BidiFormatter\/contextDirection.html",
            "isDeprecated": "0",
            "type": "intl.TextDirection",
            "memberOf": "intl.BidiFormatter",
            "params": []
        },
        {
            "desc": "<p>Is true if the known context direction for this formatter is RTL.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRTL =&gt; contextDirection == TextDirection.RTL;<\/code><\/pre>\n        ",
            "href": "intl\/BidiFormatter\/isRTL.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "intl.BidiFormatter",
            "params": []
        }
    ]
}