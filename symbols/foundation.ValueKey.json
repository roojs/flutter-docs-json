{
    "desc": "<p>A key that uses a value of a particular type to identify itself.<\/p>\n<p>A <a href=\"foundation\/ValueKey-class.html\">ValueKey&lt;T&gt;<\/a> is equal to another <a href=\"foundation\/ValueKey-class.html\">ValueKey&lt;T&gt;<\/a> if, and only if, their\nvalues are <a href=\"foundation\/ValueKey\/operator_equals.html\">operator==<\/a>.<\/p>\n<p>This class can be subclassed to create value keys that will not be equal to\nother value keys that happen to use the same value. If the subclass is\nprivate, this results in a value key type that cannot collide with keys from\nother sources, which could be useful, for example, if the keys are being\nused as fallbacks in the same scope as keys supplied from another widget.<\/p>\n<p>See also the discussion at <a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "foundation\/ValueKey-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "foundation",
    "name": "foundation.ValueKey",
    "shortname": "ValueKey",
    "extends": [
        "foundation.LocalKey",
        "foundation.Key",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a key that delegates its <a href=\"foundation\/ValueKey\/operator_equals.html\">operator==<\/a> to the given value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ValueKey(this.value);<\/code><\/pre>\n    ",
            "href": "foundation\/ValueKey\/ValueKey.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.ValueKey",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String valueString = T == String ? '&lt;\\'$value\\'&gt;' : '&lt;$value&gt;';\n  \/\/ The crazy on the next line is a workaround for\n  \/\/ https:\/\/github.com\/dart-lang\/sdk\/issues\/33297\n  if (runtimeType == _TypeLiteral&lt;ValueKey&lt;T&gt;&gt;().type)\n    return '[$valueString]';\n  return '[$T $valueString]';\n}<\/code><\/pre>\n    ",
            "href": "foundation\/ValueKey\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.ValueKey",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"foundation\/ValueKey\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"foundation\/ValueKey\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(runtimeType, value);<\/code><\/pre>\n        ",
            "href": "foundation\/ValueKey\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "foundation.ValueKey",
            "params": []
        }
    ]
}