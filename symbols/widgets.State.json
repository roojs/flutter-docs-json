{
    "desc": "<p>The logic and internal state for a <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>.<\/p>\n<p>State is information that (1) can be read synchronously when the widget is\nbuilt and (2) might change during the lifetime of the widget. It is the\nresponsibility of the widget implementer to ensure that the <a href=\"widgets\/State-class.html\">State<\/a> is\npromptly notified when such state changes, using <a href=\"widgets\/State\/setState.html\">State.setState<\/a>.<\/p>\n<p><a href=\"widgets\/State-class.html\">State<\/a> objects are created by the framework by calling the\n<a href=\"widgets\/StatefulWidget\/createState.html\">StatefulWidget.createState<\/a> method when inflating a <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> to\ninsert it into the tree. Because a given <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instance can be\ninflated multiple times (e.g., the widget is incorporated into the tree in\nmultiple places at once), there might be more than one <a href=\"widgets\/State-class.html\">State<\/a> object\nassociated with a given <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instance. Similarly, if a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> is removed from the tree and later inserted in to the tree\nagain, the framework will call <a href=\"widgets\/StatefulWidget\/createState.html\">StatefulWidget.createState<\/a> again to create\na fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of <a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n<p><a href=\"widgets\/State-class.html\">State<\/a> objects have the following lifecycle:<\/p>\n<ul>\n<li>The framework creates a <a href=\"widgets\/State-class.html\">State<\/a> object by calling\n<a href=\"widgets\/StatefulWidget\/createState.html\">StatefulWidget.createState<\/a>.<\/li>\n<li>The newly created <a href=\"widgets\/State-class.html\">State<\/a> object is associated with a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.\nThis association is permanent: the <a href=\"widgets\/State-class.html\">State<\/a> object will never change its\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>. However, the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> itself can be moved around\nthe tree along with its subtree. At this point, the <a href=\"widgets\/State-class.html\">State<\/a> object is\nconsidered <a href=\"widgets\/State\/mounted.html\">mounted<\/a>.<\/li>\n<li>The framework calls <a href=\"widgets\/State\/initState.html\">initState<\/a>. Subclasses of <a href=\"widgets\/State-class.html\">State<\/a> should override\n<a href=\"widgets\/State\/initState.html\">initState<\/a> to perform one-time initialization that depends on the\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> or the widget, which are available as the <a href=\"widgets\/State\/context.html\">context<\/a> and\n<a href=\"widgets\/State\/widget.html\">widget<\/a> properties, respectively, when the <a href=\"widgets\/State\/initState.html\">initState<\/a> method is\ncalled.<\/li>\n<li>The framework calls <a href=\"widgets\/State\/didChangeDependencies.html\">didChangeDependencies<\/a>. Subclasses of <a href=\"widgets\/State-class.html\">State<\/a> should\noverride <a href=\"widgets\/State\/didChangeDependencies.html\">didChangeDependencies<\/a> to perform initialization involving\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>s. If <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> is\ncalled, the <a href=\"widgets\/State\/didChangeDependencies.html\">didChangeDependencies<\/a> method will be called again if the\ninherited widgets subsequently change or if the widget moves in the tree.<\/li>\n<li>At this point, the <a href=\"widgets\/State-class.html\">State<\/a> object is fully initialized and the framework\nmight call its <a href=\"widgets\/State\/build.html\">build<\/a> method any number of times to obtain a\ndescription of the user interface for this subtree. <a href=\"widgets\/State-class.html\">State<\/a> objects can\nspontaneously request to rebuild their subtree by callings their\n<a href=\"widgets\/State\/setState.html\">setState<\/a> method, which indicates that some of their internal state\nhas changed in a way that might impact the user interface in this\nsubtree.<\/li>\n<li>During this time, a parent widget might rebuild and request that this\nlocation in the tree update to display a new widget with the same\n<a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and <a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>. When this happens, the framework will\nupdate the <a href=\"widgets\/State\/widget.html\">widget<\/a> property to refer to the new widget and then call the\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> method with the previous widget as an argument. <a href=\"widgets\/State-class.html\">State<\/a>\nobjects should override <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> to respond to changes in their\nassociated widget (e.g., to start implicit animations). The framework\nalways calls <a href=\"widgets\/State\/build.html\">build<\/a> after calling <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, which means any\ncalls to <a href=\"widgets\/State\/setState.html\">setState<\/a> in <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> are redundant.<\/li>\n<li>During development, if a hot reload occurs (whether initiated from the\ncommand line <code>flutter<\/code> tool by pressing <code>r<\/code>, or from an IDE), the\n<a href=\"widgets\/State\/reassemble.html\">reassemble<\/a> method is called. This provides an opportunity to\nreinitialize any data that was prepared in the <a href=\"widgets\/State\/initState.html\">initState<\/a> method.<\/li>\n<li>If the subtree containing the <a href=\"widgets\/State-class.html\">State<\/a> object is removed from the tree\n(e.g., because the parent built a widget with a different <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a>\nor <a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>), the framework calls the <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a> method. Subclasses\nshould override this method to clean up any links between this object\nand other elements in the tree (e.g. if you have provided an ancestor\nwith a pointer to a descendant's <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>).<\/li>\n<li>At this point, the framework might reinsert this subtree into another\npart of the tree. If that happens, the framework will ensure that it\ncalls <a href=\"widgets\/State\/build.html\">build<\/a> to give the <a href=\"widgets\/State-class.html\">State<\/a> object a chance to adapt to its new\nlocation in the tree. If the framework does reinsert this subtree, it\nwill do so before the end of the animation frame in which the subtree was\nremoved from the tree. For this reason, <a href=\"widgets\/State-class.html\">State<\/a> objects can defer\nreleasing most resources until the framework calls their <a href=\"widgets\/State\/dispose.html\">dispose<\/a>\nmethod.<\/li>\n<li>If the framework does not reinsert this subtree by the end of the current\nanimation frame, the framework will call <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, which indicates that\nthis <a href=\"widgets\/State-class.html\">State<\/a> object will never build again. Subclasses should override\nthis method to release any resources retained by this object (e.g.,\nstop any active animations).<\/li>\n<li>After the framework calls <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, the <a href=\"widgets\/State-class.html\">State<\/a> object is considered\nunmounted and the <a href=\"widgets\/State\/mounted.html\">mounted<\/a> property is false. It is an error to call\n<a href=\"widgets\/State\/setState.html\">setState<\/a> at this point. This stage of the lifecycle is terminal: there\nis no way to remount a <a href=\"widgets\/State-class.html\">State<\/a> object that has been disposed.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, where the current configuration of a <a href=\"widgets\/State-class.html\">State<\/a> is hosted,\nand whose documentation has sample code for <a href=\"widgets\/State-class.html\">State<\/a>.<\/li>\n<li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, for widgets that always build the same way given a\nparticular configuration and ambient state.<\/li>\n<li>\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a>, for widgets that introduce ambient state that can\nbe read by descendant widgets.<\/li>\n<li>\n<a href=\"widgets\/Widget-class.html\">Widget<\/a>, for an overview of widgets in general.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/State-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.State",
    "shortname": "State",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "material.DrawerControllerState",
        "material.PaginatedDataTableState",
        "material.PopupMenuItemState",
        "material.RefreshIndicatorState",
        "material.ScaffoldState",
        "widgets.AnimatedListState",
        "widgets.EditableTextState",
        "widgets.FormFieldState",
        "widgets.FormState",
        "widgets.NavigatorState",
        "widgets.OverlayState",
        "widgets.RawGestureDetectorState",
        "widgets.ScrollableState"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "widgets\/State\/State.html",
            "isDeprecated": false,
            "type": "",
            "name": "State",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method in a number of different situations:<\/p>\n<ul>\n<li>After calling <a href=\"widgets\/State\/initState.html\">initState<\/a>.<\/li>\n<li>After calling <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>.<\/li>\n<li>After receiving a call to <a href=\"widgets\/State\/setState.html\">setState<\/a>.<\/li>\n<li>After a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes (e.g., an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by the previous <a href=\"widgets\/State\/build.html\">build<\/a> changes).<\/li>\n<li>After calling <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a> and then reinserting the <a href=\"widgets\/State-class.html\">State<\/a> object into\nthe tree at another location.<\/li>\n<\/ul>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor, the\ngiven <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, and the internal state of this <a href=\"widgets\/State-class.html\">State<\/a> object.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. The\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is always the same as the <code>context<\/code> property of\nthis <a href=\"widgets\/State-class.html\">State<\/a> object and will remain the same for the lifetime of this\nobject. The <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> argument is provided redundantly here so that\nthis method matches the signature for a <a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<h3 id=\"why-is-the-build-method-on-state-and-not-statefulwidget\">Why is the <a href=\"widgets\/State\/build.html\">build<\/a> method on <a href=\"widgets\/State-class.html\">State<\/a>, and not <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>?<\/h3>\n<p>Putting a <code>Widget build(BuildContext context)<\/code> method on <a href=\"widgets\/State-class.html\">State<\/a> rather\nputting a <code>Widget build(BuildContext context, State state)<\/code> method on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> gives developers more flexibility when subclassing\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>.<\/p>\n<p>For example, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> is a subclass of <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> that\nintroduces an abstract <code>Widget build(BuildContext context)<\/code> method for its\nsubclasses to implement. If <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> already had a <a href=\"widgets\/State\/build.html\">build<\/a> method\nthat took a <a href=\"widgets\/State-class.html\">State<\/a> argument, <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a> would be forced to provide\nits <a href=\"widgets\/State-class.html\">State<\/a> object to subclasses even though its <a href=\"widgets\/State-class.html\">State<\/a> object is an\ninternal implementation detail of <a href=\"widgets\/AnimatedWidget-class.html\">AnimatedWidget<\/a>.<\/p>\n<p>Conceptually, <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> could also be implemented as a subclass of\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> in a similar manner. If the <a href=\"widgets\/State\/build.html\">build<\/a> method were on\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> rather than <a href=\"widgets\/State-class.html\">State<\/a>, that would not be possible anymore.<\/p>\n<p>Putting the <a href=\"widgets\/State\/build.html\">build<\/a> function on <a href=\"widgets\/State-class.html\">State<\/a> rather than <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> also\nhelps avoid a category of bugs related to closures implicitly capturing\n<code>this<\/code>. If you defined a closure in a <a href=\"widgets\/State\/build.html\">build<\/a> function on a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, that closure would implicitly capture <code>this<\/code>, which is\nthe current widget instance, and would have the (immutable) fields of that\ninstance in scope:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButton extends StatefulWidget {\n  ...\n  final Color color;\n\n  @override\n  Widget build(BuildContext context, MyButtonState state) {\n    ... () { print(\"color: $color\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>For example, suppose the parent builds <code>MyButton<\/code> with <code>color<\/code> being blue,\nthe <code>$color<\/code> in the print function refers to blue, as expected. Now,\nsuppose the parent rebuilds <code>MyButton<\/code> with green. The closure created by\nthe first build still implicitly refers to the original widget and the\n<code>$color<\/code> still prints blue even through the widget has been updated to\ngreen.<\/p>\n<p>In contrast, with the <a href=\"widgets\/State\/build.html\">build<\/a> function on the <a href=\"widgets\/State-class.html\">State<\/a> object, closures\ncreated during <a href=\"widgets\/State\/build.html\">build<\/a> implicitly capture the <a href=\"widgets\/State-class.html\">State<\/a> instance instead of\nthe widget instance:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">class MyButtonState extends State&lt;MyButton&gt; {\n  ...\n  @override\n  Widget build(BuildContext context) {\n    ... () { print(\"color: ${widget.color}\"); } ...\n  }\n}\n<\/code><\/pre>\n<p>Now when the parent rebuilds <code>MyButton<\/code> with green, the closure created by\nthe first build still refers to <a href=\"widgets\/State-class.html\">State<\/a> object, which is preserved across\nrebuilds, but the framework has updated that <a href=\"widgets\/State-class.html\">State<\/a> object's <a href=\"widgets\/State\/widget.html\">widget<\/a>\nproperty to refer to the new <code>MyButton<\/code> instance and <code>${widget.color}<\/code>\nprints green, as expected.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nWidget build(BuildContext context);<\/code><\/pre>\n    ",
            "href": "widgets\/State\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is removed from the tree.<\/p>\n<p>The framework calls this method whenever it removes this <a href=\"widgets\/State-class.html\">State<\/a> object\nfrom the tree. In some cases, the framework will reinsert the <a href=\"widgets\/State-class.html\">State<\/a>\nobject into another part of the tree (e.g., if the subtree containing this\n<a href=\"widgets\/State-class.html\">State<\/a> object is grafted from one location in the tree to another). If\nthat happens, the framework will ensure that it calls <a href=\"widgets\/State\/build.html\">build<\/a> to give the\n<a href=\"widgets\/State-class.html\">State<\/a> object a chance to adapt to its new location in the tree. If\nthe framework does reinsert this subtree, it will do so before the end of\nthe animation frame in which the subtree was removed from the tree. For\nthis reason, <a href=\"widgets\/State-class.html\">State<\/a> objects can defer releasing most resources until the\nframework calls their <a href=\"widgets\/State\/dispose.html\">dispose<\/a> method.<\/p>\n<p>Subclasses should override this method to clean up any links between\nthis object and other elements in the tree (e.g. if you have provided an\nancestor with a pointer to a descendant's <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>).<\/p>\n<p>If you override this, make sure to end your method with a call to\nsuper.deactivate().<\/p>\n<p>See also <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, which is called after <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a> if the widget is\nremoved from the tree permanently.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid deactivate() { }<\/code><\/pre>\n    ",
            "href": "widgets\/State\/deactivate.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "deactivate",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/State\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  assert(() {\n    properties.add(EnumProperty&lt;_StateLifecycle&gt;('lifecycle state', _debugLifecycleState, defaultValue: _StateLifecycle.ready));\n    return true;\n  }());\n  properties.add(ObjectFlagProperty&lt;T&gt;('_widget', _widget, ifNull: 'no widget'));\n  properties.add(ObjectFlagProperty&lt;StatefulElement&gt;('_element', _element, ifNull: 'not mounted'));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/State\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Called when a dependency of this <a href=\"widgets\/State-class.html\">State<\/a> object changes.<\/p>\n<p>For example, if the previous call to <a href=\"widgets\/State\/build.html\">build<\/a> referenced an\n<a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> that later changed, the framework would call this\nmethod to notify this object about the change.<\/p>\n<p>This method is also called immediately after <a href=\"widgets\/State\/initState.html\">initState<\/a>. It is safe to\ncall <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this method.<\/p>\n<p>Subclasses rarely override this method because the framework always\ncalls <a href=\"widgets\/State\/build.html\">build<\/a> after a dependency changes. Some subclasses do override\nthis method because they need to do some expensive work (e.g., network\nfetches) when their dependencies change, and that work would be too\nexpensive to do for every build.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid didChangeDependencies() { }<\/code><\/pre>\n    ",
            "href": "widgets\/State\/didChangeDependencies.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didChangeDependencies",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Called whenever the widget configuration changes.<\/p>\n<p>If the parent widget rebuilds and request that this location in the tree\nupdate to display a new widget with the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and\n<a href=\"widgets\/Widget\/key.html\">Widget.key<\/a>, the framework will update the <a href=\"widgets\/State\/widget.html\">widget<\/a> property of this\n<a href=\"widgets\/State-class.html\">State<\/a> object to refer to the new widget and then call this method\nwith the previous widget as an argument.<\/p>\n<p>Override this method to respond when the <a href=\"widgets\/State\/widget.html\">widget<\/a> changes (e.g., to start\nimplicit animations).<\/p>\n<p>The framework always calls <a href=\"widgets\/State\/build.html\">build<\/a> after calling <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, which\nmeans any calls to <a href=\"widgets\/State\/setState.html\">setState<\/a> in <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> are redundant.<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/State\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/State\/initState.html\">initState<\/a>,\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/State\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/State\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.didUpdateWidget(oldWidget).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\n@protected\nvoid didUpdateWidget(covariant T oldWidget) { }<\/code><\/pre>\n    ",
            "href": "widgets\/State\/didUpdateWidget.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "didUpdateWidget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Called when this object is removed from the tree permanently.<\/p>\n<p>The framework calls this method when this <a href=\"widgets\/State-class.html\">State<\/a> object will never\nbuild again. After the framework calls <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, the <a href=\"widgets\/State-class.html\">State<\/a> object is\nconsidered unmounted and the <a href=\"widgets\/State\/mounted.html\">mounted<\/a> property is false. It is an error\nto call <a href=\"widgets\/State\/setState.html\">setState<\/a> at this point. This stage of the lifecycle is terminal:\nthere is no way to remount a <a href=\"widgets\/State-class.html\">State<\/a> object that has been disposed.<\/p>\n<p>Subclasses should override this method to release any resources retained\nby this object (e.g., stop any active animations).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/State\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/State\/initState.html\">initState<\/a>,\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/State\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/State\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, unsubscribe from the object.<\/li>\n<\/ul>\n<p>If you override this, make sure to end your method with a call to\nsuper.dispose().<\/p>\n<p>See also <a href=\"widgets\/State\/deactivate.html\">deactivate<\/a>, which is called prior to <a href=\"widgets\/State\/dispose.html\">dispose<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid dispose() {\n  assert(_debugLifecycleState == _StateLifecycle.ready);\n  assert(() { _debugLifecycleState = _StateLifecycle.defunct; return true; }());\n}<\/code><\/pre>\n    ",
            "href": "widgets\/State\/dispose.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "dispose",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Called when this object is inserted into the tree.<\/p>\n<p>The framework will call this method exactly once for each <a href=\"widgets\/State-class.html\">State<\/a> object\nit creates.<\/p>\n<p>Override this method to perform initialization that depends on the\nlocation at which this object was inserted into the tree (i.e., <a href=\"widgets\/State\/context.html\">context<\/a>)\nor on the widget used to configure this object (i.e., <a href=\"widgets\/State\/widget.html\">widget<\/a>).<\/p>\n<p>If a <a href=\"widgets\/State-class.html\">State<\/a>'s <a href=\"widgets\/State\/build.html\">build<\/a> method depends on an object that can itself\nchange state, for example a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> or <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, or some\nother object to which one can subscribe to receive notifications, then\nbe sure to subscribe and unsubscribe properly in <a href=\"widgets\/State\/initState.html\">initState<\/a>,\n<a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a>, and <a href=\"widgets\/State\/dispose.html\">dispose<\/a>:<\/p>\n<ul>\n<li>In <a href=\"widgets\/State\/initState.html\">initState<\/a>, subscribe to the object.<\/li>\n<li>In <a href=\"widgets\/State\/didUpdateWidget.html\">didUpdateWidget<\/a> unsubscribe from the old object and subscribe\nto the new one if the updated widget configuration requires\nreplacing the object.<\/li>\n<li>In <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, unsubscribe from the object.\nYou cannot use <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> from this\nmethod. However, <a href=\"widgets\/State\/didChangeDependencies.html\">didChangeDependencies<\/a> will be called immediately\nfollowing this method, and <a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a> can\nbe used there.<\/li>\n<\/ul>\n<p>If you override this, make sure your method starts with a call to\nsuper.initState().<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid initState() {\n  assert(_debugLifecycleState == _StateLifecycle.created);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/State\/initState.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "initState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Called whenever the application is reassembled during debugging, for\nexample during hot reload.<\/p>\n<p>This method should rerun any initialization logic that depends on global\nstate, for example, image loading from asset bundles (since the asset\nbundle may have changed).<\/p>\n<p>This function will only be called during development. In release builds,\nthe <code>ext.flutter.reassemble<\/code> hook is not available, and so this code will\nnever execute.<\/p>\n<p>In addition to this method being invoked, it is guaranteed that the\n<a href=\"widgets\/State\/build.html\">build<\/a> method will be invoked when a reassemble is signaled. Most\nwidgets therefore do not need to do anything in the <a href=\"widgets\/State\/reassemble.html\">reassemble<\/a> method.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"widgets\/State\/reassemble.html\">Element.reassemble<\/a><\/li>\n<li><a href=\"foundation\/BindingBase\/reassembleApplication.html\">BindingBase.reassembleApplication<\/a><\/li>\n<li>\n<a href=\"widgets\/Image-class.html\">Image<\/a>, which uses this to reload images.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@mustCallSuper\nvoid reassemble() { }<\/code><\/pre>\n    ",
            "href": "widgets\/State\/reassemble.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "reassemble",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Notify the framework that the internal state of this object has changed.<\/p>\n<p>Whenever you change the internal state of a <a href=\"widgets\/State-class.html\">State<\/a> object, make the\nchange in a function that you pass to <a href=\"widgets\/State\/setState.html\">setState<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">setState(() { _myState = newValue });\n<\/code><\/pre>\n<p>The provided callback is immediately called synchronously. It must not\nreturn a future (the callback cannot be <code>async<\/code>), since then it would be\nunclear when the state was actually being set.<\/p>\n<p>Calling <a href=\"widgets\/State\/setState.html\">setState<\/a> notifies the framework that the internal state of this\nobject has changed in a way that might impact the user interface in this\nsubtree, which causes the framework to schedule a <a href=\"widgets\/State\/build.html\">build<\/a> for this <a href=\"widgets\/State-class.html\">State<\/a>\nobject.<\/p>\n<p>If you just change the state directly without calling <a href=\"widgets\/State\/setState.html\">setState<\/a>, the\nframework might not schedule a <a href=\"widgets\/State\/build.html\">build<\/a> and the user interface for this\nsubtree might not be updated to reflect the new state.<\/p>\n<p>Generally it is recommended that the <code>setState<\/code> method only be used to\nwrap the actual changes to the state, not any computation that might be\nassociated with the change. For example, here a value used by the <a href=\"widgets\/State\/build.html\">build<\/a>\nfunction is incremented, and then the change is written to disk, but only\nthe increment is wrapped in the <code>setState<\/code>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; _incrementCounter() async {\n  setState(() {\n    _counter++;\n  });\n  Directory directory = await getApplicationDocumentsDirectory();\n  final String dirName = directory.path;\n  await File('$dir\/counter.txt').writeAsString('$_counter');\n}\n<\/code><\/pre>\n<p>It is an error to call this method after the framework calls <a href=\"widgets\/State\/dispose.html\">dispose<\/a>.\nYou can determine whether it is legal to call this method by checking\nwhether the <a href=\"widgets\/State\/mounted.html\">mounted<\/a> property is true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid setState(VoidCallback fn) {\n  assert(fn != null);\n  assert(() {\n    if (_debugLifecycleState == _StateLifecycle.defunct) {\n      throw FlutterError(\n        'setState() called after dispose(): $this\\n'\n        'This error happens if you call setState() on a State object for a widget that '\n        'no longer appears in the widget tree (e.g., whose parent widget no longer '\n        'includes the widget in its build). This error can occur when code calls '\n        'setState() from a timer or an animation callback. The preferred solution is '\n        'to cancel the timer or stop listening to the animation in the dispose() '\n        'callback. Another solution is to check the \"mounted\" property of this '\n        'object before calling setState() to ensure the object is still in the '\n        'tree.\\n'\n        'This error might indicate a memory leak if setState() is being called '\n        'because another object is retaining a reference to this State object '\n        'after it has been removed from the tree. To avoid memory leaks, '\n        'consider breaking the reference to this object during dispose().'\n      );\n    }\n    if (_debugLifecycleState == _StateLifecycle.created &amp;&amp; !mounted) {\n      throw FlutterError(\n        'setState() called in constructor: $this\\n'\n        'This happens when you call setState() on a State object for a widget that '\n        'hasn\\'t been inserted into the widget tree yet. It is not necessary to call '\n        'setState() in the constructor, since the state is already assumed to be dirty '\n        'when it is initially created.'\n      );\n    }\n    return true;\n  }());\n  final dynamic result = fn() as dynamic;\n  assert(() {\n    if (result is Future) {\n      throw FlutterError(\n        'setState() callback argument returned a Future.\\n'\n        'The setState() method on $this was called with a closure or method that '\n        'returned a Future. Maybe it is marked as \"async\".\\n'\n        'Instead of performing asynchronous work inside a call to setState(), first '\n        'execute the work (without updating the widget state), and then synchronously '\n        'update the state inside a call to setState().'\n      );\n    }\n    \/\/ We ignore other types of return values so that you can do things like:\n    \/\/   setState(() =&gt; x = 3);\n    return true;\n  }());\n  _element.markNeedsBuild();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/State\/setState.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "setState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.State",
            "params": [
                {
                    "name": "fn",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The location in the tree where this widget builds.<\/p>\n<p>The framework associates <a href=\"widgets\/State-class.html\">State<\/a> objects with a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> after\ncreating them with <a href=\"widgets\/StatefulWidget\/createState.html\">StatefulWidget.createState<\/a> and before calling\n<a href=\"widgets\/State\/initState.html\">initState<\/a>. The association is permanent: the <a href=\"widgets\/State-class.html\">State<\/a> object will never\nchange its <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>. However, the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> itself can be moved\naround the tree.<\/p>\n<p>After calling <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, the framework severs the <a href=\"widgets\/State-class.html\">State<\/a> object's\nconnection with the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BuildContext get context =&gt; _element;<\/code><\/pre>\n        ",
            "href": "widgets\/State\/context.html",
            "name": "context",
            "isDeprecated": false,
            "type": "widgets.BuildContext",
            "memberOf": "widgets.State",
            "params": []
        },
        {
            "desc": "<p>Whether this <a href=\"widgets\/State-class.html\">State<\/a> object is currently in a tree.<\/p>\n<p>After creating a <a href=\"widgets\/State-class.html\">State<\/a> object and before calling <a href=\"widgets\/State\/initState.html\">initState<\/a>, the\nframework \"mounts\" the <a href=\"widgets\/State-class.html\">State<\/a> object by associating it with a\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>. The <a href=\"widgets\/State-class.html\">State<\/a> object remains mounted until the framework\ncalls <a href=\"widgets\/State\/dispose.html\">dispose<\/a>, after which time the framework will never ask the <a href=\"widgets\/State-class.html\">State<\/a>\nobject to <a href=\"widgets\/State\/build.html\">build<\/a> again.<\/p>\n<p>It is an error to call <a href=\"widgets\/State\/setState.html\">setState<\/a> unless <a href=\"widgets\/State\/mounted.html\">mounted<\/a> is true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get mounted =&gt; _element != null;<\/code><\/pre>\n        ",
            "href": "widgets\/State\/mounted.html",
            "name": "mounted",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.State",
            "params": []
        }
    ]
}