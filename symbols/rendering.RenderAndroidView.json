{
    "desc": "<p>A render object for an Android view.<\/p>\n<p>Requires Android API level 20 or greater.<\/p>\n<p><a href=\"rendering\/RenderAndroidView-class.html\">RenderAndroidView<\/a> is responsible for sizing, displaying and passing touch events to an\nAndroid <a href=\"https:\/\/developer.android.com\/reference\/android\/view\/View\">View<\/a>.<\/p>\n<p>The render object's layout behavior is to fill all available space, the parent of this object must\nprovide bounded layout constraints.\nThe render object participates in Flutter's <code>GestureArena<\/code>s, and dispatches touch events to the\nplatform view iff it won the arena. Specific gestures that should be dispatched to the platform\nview can be specified with factories in the <code>gestureRecognizers<\/code> constructor parameter or\nby calling <code>updateGestureRecognizers<\/code>. If the set of gesture recognizers is empty, the gesture\nwill be dispatched to the platform view iff it was not claimed by any other gesture recognizer.\nSee also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a> which is a widget that is used to show an Android view.<\/li>\n<li>\n<a href=\"services\/PlatformViewsService-class.html\">PlatformViewsService<\/a> which is a service for controlling platform views.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderAndroidView-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "rendering",
    "name": "rendering.RenderAndroidView",
    "shortname": "RenderAndroidView",
    "extends": [
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a render object for an Android view.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderAndroidView({\n  @required AndroidViewController viewController,\n  @required this.hitTestBehavior,\n  @required Set&lt;Factory&lt;OneSequenceGestureRecognizer&gt;&gt; gestureRecognizers,\n}) : assert(viewController != null),\n     assert(hitTestBehavior != null),\n     assert(gestureRecognizers != null),\n     _viewController = viewController {\n  _motionEventsDispatcher = _MotionEventsDispatcher(globalToLocal, viewController);\n  updateGestureRecognizers(gestureRecognizers);\n  _viewController.addOnPlatformViewCreatedListener(_onPlatformViewCreated);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/RenderAndroidView.html",
            "isDeprecated": "0",
            "type": "",
            "name": "RenderAndroidView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "gestureRecognizers",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Set<foundation.Factory<gestures.OneSequenceGestureRecognizer>>"
                },
                {
                    "name": "hitTestBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.PlatformViewHitTestBehavior"
                },
                {
                    "name": "viewController",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "services.AndroidViewController"
                }
            ]
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"rendering\/RenderAndroidView\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration (SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n\n  config.isSemanticBoundary = true;\n\n  if (_viewController.isCreated) {\n    config.platformViewId = _viewController.id;\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/describeSemanticsConfiguration.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "describeSemanticsConfiguration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "config",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderAndroidView\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderAndroidView\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderAndroidView\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _gestureRecognizer.reset();\n  super.detach();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/detach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        },
        {
            "desc": "<p>Override this method to handle pointer events that hit this render object.<\/p>\n<p>For <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> objects, the <code>entry<\/code> argument is a <a href=\"rendering\/BoxHitTestEntry-class.html\">BoxHitTestEntry<\/a>. From this\nobject you can determine the <a href=\"gestures\/PointerDownEvent-class.html\">PointerDownEvent<\/a>'s position in local coordinates.\n(This is useful because <a href=\"gestures\/PointerEvent\/position.html\">PointerEvent.position<\/a> is in global coordinates.)<\/p>\n<p>If you override this, consider calling <a href=\"rendering\/RenderBox\/debugHandleEvent.html\">debugHandleEvent<\/a> as follows, so\nthat you can support <a href=\"rendering\/debugPaintPointersEnabled.html\">debugPaintPointersEnabled<\/a>:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, HitTestEntry entry) {\n  assert(debugHandleEvent(event, entry));\n  \/\/ ... handle the event ...\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event, HitTestEntry entry) {\n  if (event is PointerDownEvent) {\n    _gestureRecognizer.addPointer(event);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/handleEvent.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "handleEvent",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "entry",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestEntry"
                },
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Determines the set of render objects located at the given position.<\/p>\n<p>Returns true, and adds any render objects that contain the point to the\ngiven hit test result, if this render object or one of its descendants\nabsorbs the hit (preventing objects below this one from being hit).\nReturns false if the hit can continue to other objects below this one.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Hit testing requires layout to be up-to-date but does not require painting\nto be up-to-date. That means a render object can rely upon <a href=\"rendering\/RenderBox\/performLayout.html\">performLayout<\/a>\nhaving been called in <a href=\"rendering\/RenderAndroidView\/hitTest.html\">hitTest<\/a> but cannot rely upon <a href=\"rendering\/RenderAndroidView\/paint.html\">paint<\/a> having been\ncalled. For example, a render object might be a child of a <a href=\"rendering\/RenderOpacity-class.html\">RenderOpacity<\/a>\nobject, which calls <a href=\"rendering\/RenderAndroidView\/hitTest.html\">hitTest<\/a> on its children when its opacity is zero\neven through it does not <a href=\"rendering\/RenderAndroidView\/paint.html\">paint<\/a> its children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (hitTestBehavior == PlatformViewHitTestBehavior.transparent || !size.contains(position))\n    return false;\n  result.add(BoxHitTestEntry(this, position));\n  return hitTestBehavior == PlatformViewHitTestBehavior.opaque;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/hitTest.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "hitTest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                },
                {
                    "name": "result",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Override this method if this render object can be hit even if its\nchildren were not hit.<\/p>\n<p>The caller is responsible for transforming <code>position<\/code> from global\ncoordinates to its location relative to the origin of this <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>.\nThis <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> is responsible for checking whether the given position is\nwithin its bounds.<\/p>\n<p>Used by <a href=\"rendering\/RenderAndroidView\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderAndroidView\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestSelf(Offset position) =&gt; hitTestBehavior != PlatformViewHitTestBehavior.transparent;<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/hitTestSelf.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "hitTestSelf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "position",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (_viewController.textureId == null)\n    return;\n\n  \/\/ Clip the texture if it's going to paint out of the bounds of the renter box\n  \/\/ (see comment in _paintTexture for an explanation of when this happens).\n  if (size.width &lt; _currentAndroidViewSize.width || size.height &lt; _currentAndroidViewSize.height) {\n    context.pushClipRect(true, offset, offset &amp; size, _paintTexture);\n    return;\n  }\n\n  _paintTexture(context, offset);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/paint.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Updates the render objects size using only the constraints.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>Subclasses that set <a href=\"rendering\/RenderAndroidView\/sizedByParent.html\">sizedByParent<\/a> to true should override this method\nto compute their size.<\/p>\n<p>This function is called only if <a href=\"rendering\/RenderAndroidView\/sizedByParent.html\">sizedByParent<\/a> is true.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performResize() {\n  size = constraints.biggest;\n  _sizePlatformView();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/performResize.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "performResize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        },
        {
            "desc": "<p>Updates which gestures should be forwarded to the platform view.<\/p>\n<p>Gesture recognizers created by factories in this set participate in the gesture arena for each\npointer that was put down on the render box. If any of the recognizers on this list wins the\ngesture arena, the entire pointer event sequence starting from the pointer down event\nwill be dispatched to the Android view.<\/p>\n<p>The <code>gestureRecognizers<\/code> property must not contain more than one factory with the same <a href=\"foundation\/Factory\/type.html\">Factory.type<\/a>.<\/p>\n<p>Setting a new set of gesture recognizer factories with the same <a href=\"foundation\/Factory\/type.html\">Factory.type<\/a>s as the current\nset has no effect, because the factories' constructors would have already been called with the previous set.\nAny active gesture arena the Android view participates in is rejected when the\nset of gesture recognizers is changed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateGestureRecognizers(Set&lt;Factory&lt;OneSequenceGestureRecognizer&gt;&gt; gestureRecognizers) {\n  assert(gestureRecognizers != null);\n  assert(\n  _factoriesTypeSet(gestureRecognizers).length == gestureRecognizers.length,\n  'There were multiple gesture recognizer factories for the same type, there must only be a single '\n      'gesture recognizer factory for each gesture recognizer type.',);\n  if (_factoryTypesSetEquals(gestureRecognizers, _gestureRecognizer?.gestureRecognizerFactories)) {\n    return;\n  }\n  _gestureRecognizer?.dispose();\n  _gestureRecognizer = _AndroidViewGestureRecognizer(_motionEventsDispatcher, gestureRecognizers);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAndroidView\/updateGestureRecognizers.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "updateGestureRecognizers",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAndroidView",
            "params": [
                {
                    "name": "gestureRecognizers",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Set<foundation.Factory<gestures.OneSequenceGestureRecognizer>>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this render object always needs compositing.<\/p>\n<p>Override this in subclasses to indicate that your paint function always\ncreates at least one composited layer. For example, videos should return\ntrue if they use hardware decoders.<\/p>\n<p>You must call <a href=\"rendering\/RenderObject\/markNeedsCompositingBitsUpdate.html\">markNeedsCompositingBitsUpdate<\/a> if the value of this getter\nchanges. (This is implied when <a href=\"rendering\/RenderObject\/adoptChild.html\">adoptChild<\/a> or <a href=\"rendering\/RenderObject\/dropChild.html\">dropChild<\/a> are called.)<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get alwaysNeedsCompositing =&gt; true;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAndroidView\/alwaysNeedsCompositing.html",
            "name": "alwaysNeedsCompositing",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        },
        {
            "desc": "<p>How to behave during hit testing.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PlatformViewHitTestBehavior hitTestBehavior\n\n<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAndroidView\/hitTestBehavior.html",
            "name": "hitTestBehavior",
            "isDeprecated": false,
            "type": "rendering.PlatformViewHitTestBehavior",
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        },
        {
            "desc": "<p>Whether this render object repaints separately from its parent.<\/p>\n<p>Override this in subclasses to indicate that instances of your class ought\nto repaint independently. For example, render objects that repaint\nfrequently might want to repaint themselves without requiring their parent\nto repaint.<\/p>\n<p>If this getter returns true, the <a href=\"rendering\/RenderBox\/paintBounds.html\">paintBounds<\/a> are applied to this object\nand all descendants.<\/p>\n<p>Warning: This getter must not change value over the lifetime of this object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isRepaintBoundary =&gt; true;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAndroidView\/isRepaintBoundary.html",
            "name": "isRepaintBoundary",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        },
        {
            "desc": "<p>Whether the constraints are the only input to the sizing algorithm (in\nparticular, child nodes have no impact).<\/p>\n<p>Returning false is always correct, but returning true can be more\nefficient when computing the size of this render object because we don't\nneed to recompute the size if the constraints don't change.<\/p>\n<p>Typically, subclasses will always return the same value. If the value can\nchange, then, when it does change, the subclass should make sure to call\n<a href=\"rendering\/RenderObject\/markNeedsLayoutForSizedByParentChange.html\">markNeedsLayoutForSizedByParentChange<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get sizedByParent =&gt; true;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAndroidView\/sizedByParent.html",
            "name": "sizedByParent",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        },
        {
            "desc": "<p>The Android view controller for the Android view associated with this render object.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AndroidViewController get viewcontroller =&gt; _viewController;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAndroidView\/viewcontroller.html",
            "name": "viewcontroller",
            "isDeprecated": false,
            "type": "services.AndroidViewController",
            "memberOf": "rendering.RenderAndroidView",
            "params": []
        }
    ]
}