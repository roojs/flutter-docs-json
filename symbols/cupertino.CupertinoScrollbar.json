{
    "desc": "<p>An iOS style scrollbar.<\/p>\n<p>A scrollbar indicates which portion of a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget is actually\nvisible.<\/p>\n<p>To add a scrollbar to a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a>, simply wrap the scroll view widget in\na <a href=\"cupertino\/CupertinoScrollbar-class.html\">CupertinoScrollbar<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which display a linear, scrollable list of children.<\/li>\n<li>\n<a href=\"widgets\/GridView-class.html\">GridView<\/a>, which display a 2 dimensional, scrollable array of children.<\/li>\n<li>\n<a href=\"material\/Scrollbar-class.html\">Scrollbar<\/a>, a Material Design scrollbar that dynamically adapts to the\nplatform showing either an Android style or iOS style scrollbar.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "cupertino\/CupertinoScrollbar-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "cupertino",
    "name": "cupertino.CupertinoScrollbar",
    "shortname": "CupertinoScrollbar",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an iOS style scrollbar that wraps the given <code>child<\/code>.<\/p>\n<p>The <code>child<\/code> should be a source of <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications,\ntypically a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoScrollbar({\n  Key key,\n  @required this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoScrollbar\/CupertinoScrollbar.html",
            "isDeprecated": false,
            "type": "",
            "name": "CupertinoScrollbar",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "cupertino.CupertinoScrollbar",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoScrollbar\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoScrollbarState createState() =&gt; _CupertinoScrollbarState();<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoScrollbar\/createState.html",
            "isDeprecated": false,
            "type": "<_CupertinoScrollbarState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoScrollbar",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The subtree to place inside the <a href=\"cupertino\/CupertinoScrollbar-class.html\">CupertinoScrollbar<\/a>.<\/p>\n<p>This should include a source of <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications,\ntypically a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoScrollbar\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "cupertino.CupertinoScrollbar",
            "params": []
        }
    ]
}