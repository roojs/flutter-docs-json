{
    "desc": "<p>A widget that displays its children in a horizontal array.<\/p>\n<p>To cause a child to expand to fill the available horizontal space, wrap the\nchild in an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> widget.<\/p>\n<p>The <a href=\"widgets\/Row-class.html\">Row<\/a> widget does not scroll (and in general it is considered an error\nto have more children in a <a href=\"widgets\/Row-class.html\">Row<\/a> than will fit in the available room). If\nyou have a line of widgets and want them to be able to scroll if there is\ninsufficient room, consider using a <a href=\"widgets\/ListView-class.html\">ListView<\/a>.<\/p>\n<p>For a vertical variant, see <a href=\"widgets\/Column-class.html\">Column<\/a>.<\/p>\n<p>If you only have one child, then consider using <a href=\"widgets\/Align-class.html\">Align<\/a> or <a href=\"widgets\/Center-class.html\">Center<\/a> to\nposition the child.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example divides the available space into three (horizontally), and\nplaces text centered in the first two cells and the Flutter logo centered in\nthe third:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Row(\n  children: &lt;Widget&gt;[\n    Expanded(\n      child: Text('Deliver features faster', textAlign: TextAlign.center),\n    ),\n    Expanded(\n      child: Text('Craft beautiful UIs', textAlign: TextAlign.center),\n    ),\n    Expanded(\n      child: FittedBox(\n        fit: BoxFit.contain, \/\/ otherwise the logo will be tiny\n        child: const FlutterLogo(),\n      ),\n    ),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h2 id=\"troubleshooting\">Troubleshooting<\/h2>\n<h3 id=\"why-does-my-row-have-a-yellow-and-black-warning-stripe\">Why does my row have a yellow and black warning stripe?<\/h3>\n<p>If the non-flexible contents of the row (those that are not wrapped in\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or <a href=\"widgets\/Flexible-class.html\">Flexible<\/a> widgets) are together wider than the row itself,\nthen the row is said to have overflowed. When a row overflows, the row does\nnot have any remaining space to share between its <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> and <a href=\"widgets\/Flexible-class.html\">Flexible<\/a>\nchildren. The row reports this by drawing a yellow and black striped\nwarning box on the edge that is overflowing. If there is room on the outside\nof the row, the amount of overflow is printed in red lettering.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\n<h4 id=\"story-time\">Story time<\/h4>\n<p>Suppose, for instance, that you had this code:\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Row(\n  children: &lt;Widget&gt;[\n    const FlutterLogo(),\n    const Text('Flutter\\'s hot reload helps you quickly and easily experiment, build UIs, add features, and fix bug faster. Experience sub-second reload times, without losing state, on emulators, simulators, and hardware for iOS and Android.'),\n    const Icon(Icons.sentiment_very_satisfied),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The row first asks its first child, the <a href=\"material\/FlutterLogo-class.html\">FlutterLogo<\/a>, to lay out, at\nwhatever size the logo would like. The logo is friendly and happily decides\nto be 24 pixels to a side. This leaves lots of room for the next child. The\nrow then asks that next child, the text, to lay out, at whatever size it\nthinks is best.<\/p>\n<p>At this point, the text, not knowing how wide is too wide, says \"Ok, I will\nbe thiiiiiiiiiiiiiiiiiiiis wide.\", and goes well beyond the space that the\nrow has available, not wrapping. The row responds, \"That's not fair, now I\nhave no more room available for my other children!\", and gets angry and\nsprouts a yellow and black strip.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe fix is to wrap the second child in an <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> widget, which tells the\nrow that the child should be given the remaining room:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Row(\n  children: &lt;Widget&gt;[\n    const FlutterLogo(),\n    const Expanded(\n      child: Text('Flutter\\'s hot reload helps you quickly and easily experiment, build UIs, add features, and fix bug faster. Experience sub-second reload times, without losing state, on emulators, simulators, and hardware for iOS and Android.'),\n    ),\n    const Icon(Icons.sentiment_very_satisfied),\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Now, the row first asks the logo to lay out, and then asks the <em>icon<\/em> to lay\nout. The <a href=\"widgets\/Icon-class.html\">Icon<\/a>, like the logo, is happy to take on a reasonable size (also\n24 pixels, not coincidentally, since both <a href=\"material\/FlutterLogo-class.html\">FlutterLogo<\/a> and <a href=\"widgets\/Icon-class.html\">Icon<\/a> honor the\nambient <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a>). This leaves some room left over, and now the row tells\nthe text exactly how wide to be: the exact width of the remaining space. The\ntext, now happy to comply to a reasonable request, wraps the text within\nthat width, and you end up with a paragraph split over several lines.<\/p>\n<h2 id=\"layout-algorithm\">Layout algorithm<\/h2>\n<p><em>This section describes how a <a href=\"widgets\/Row-class.html\">Row<\/a> is rendered by the framework.<\/em>\n<em>See <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> for an introduction to box layout models.<\/em><\/p>\n<p>Layout for a <a href=\"widgets\/Row-class.html\">Row<\/a> proceeds in six steps:<\/p>\n<ol>\n<li>Layout each child a null or zero flex factor (e.g., those that are not\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a>) with unbounded horizontal constraints and the incoming\nvertical constraints. If the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a> is\n<a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.stretch<\/a>, instead use tight vertical constraints that\nmatch the incoming max height.<\/li>\n<li>Divide the remaining horizontal space among the children with non-zero\nflex factors (e.g., those that are <a href=\"widgets\/Expanded-class.html\">Expanded<\/a>) according to their flex\nfactor. For example, a child with a flex factor of 2.0 will receive twice\nthe amount of horizontal space as a child with a flex factor of 1.0.<\/li>\n<li>Layout each of the remaining children with the same vertical constraints\nas in step 1, but instead of using unbounded horizontal constraints, use\nhorizontal constraints based on the amount of space allocated in step 2.\nChildren with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are <a href=\"rendering\/FlexFit-class.html\">FlexFit.tight<\/a> are\ngiven tight constraints (i.e., forced to fill the allocated space), and\nchildren with <a href=\"widgets\/Flexible\/fit.html\">Flexible.fit<\/a> properties that are <a href=\"rendering\/FlexFit-class.html\">FlexFit.loose<\/a> are\ngiven loose constraints (i.e., not forced to fill the allocated space).<\/li>\n<li>The height of the <a href=\"widgets\/Row-class.html\">Row<\/a> is the maximum height of the children (which will\nalways satisfy the incoming vertical constraints).<\/li>\n<li>The width of the <a href=\"widgets\/Row-class.html\">Row<\/a> is determined by the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property. If\nthe <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a> property is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.max<\/a>, then the width of the\n<a href=\"widgets\/Row-class.html\">Row<\/a> is the max width of the incoming constraints. If the <a href=\"widgets\/Flex\/mainAxisSize.html\">mainAxisSize<\/a>\nproperty is <a href=\"rendering\/MainAxisSize-class.html\">MainAxisSize.min<\/a>, then the width of the <a href=\"widgets\/Row-class.html\">Row<\/a> is the sum\nof widths of the children (subject to the incoming constraints).<\/li>\n<li>Determine the position for each child according to the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> and the <a href=\"widgets\/Flex\/crossAxisAlignment.html\">crossAxisAlignment<\/a>. For example, if the\n<a href=\"widgets\/Flex\/mainAxisAlignment.html\">mainAxisAlignment<\/a> is <a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.spaceBetween<\/a>, any horizontal\nspace that has not been allocated to children is divided evenly and\nplaced between the children.<\/li>\n<\/ol>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Column-class.html\">Column<\/a>, for a vertical equivalent.<\/li>\n<li>\n<a href=\"widgets\/Flex-class.html\">Flex<\/a>, if you don't know in advance if you want a horizontal or vertical\narrangement.<\/li>\n<li>\n<a href=\"widgets\/Expanded-class.html\">Expanded<\/a>, to indicate children that should take all the remaining room.<\/li>\n<li>\n<a href=\"widgets\/Flexible-class.html\">Flexible<\/a>, to indicate children that should share the remaining room but\nthat may by sized smaller (leaving some remaining room unused).<\/li>\n<li>\n<a href=\"widgets\/Spacer-class.html\">Spacer<\/a>, a widget that takes up space proportional to it's flex value.<\/li>\n<li>The <a href=\"https:\/\/flutter.io\/widgets\/layout\/\">catalog of layout widgets<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/Row-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.Row",
    "shortname": "Row",
    "extends": [
        "widgets.Flex",
        "widgets.MultiChildRenderObjectWidget",
        "widgets.RenderObjectWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a horizontal array of children.<\/p>\n<p>The <a href=\"widgets\/Flex\/direction.html\">direction<\/a>, <code>mainAxisAlignment<\/code>, <code>mainAxisSize<\/code>,\n<code>crossAxisAlignment<\/code>, and <code>verticalDirection<\/code> arguments must not be null.\nIf <code>crossAxisAlignment<\/code> is <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.baseline<\/a>, then\n<code>textBaseline<\/code> must not be null.<\/p>\n<p>The <code>textDirection<\/code> argument defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, if\nany. If there is no ambient directionality, and a text direction is going\nto be necessary to determine the layout order (which is always the case\nunless the row has no children or only one child) or to disambiguate\n<code>start<\/code> or <code>end<\/code> values for the <code>mainAxisAlignment<\/code>, the <code>textDirection<\/code>\nmust not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Row({\n  Key key,\n  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,\n  MainAxisSize mainAxisSize = MainAxisSize.max,\n  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,\n  TextDirection textDirection,\n  VerticalDirection verticalDirection = VerticalDirection.down,\n  TextBaseline textBaseline,\n  List&lt;Widget&gt; children = const &lt;Widget&gt;[],\n}) : super(\n  children: children,\n  key: key,\n  direction: Axis.horizontal,\n  mainAxisAlignment: mainAxisAlignment,\n  mainAxisSize: mainAxisSize,\n  crossAxisAlignment: crossAxisAlignment,\n  textDirection: textDirection,\n  verticalDirection: verticalDirection,\n  textBaseline: textBaseline,\n);<\/code><\/pre>\n    ",
            "href": "widgets\/Row\/Row.html",
            "isDeprecated": "0",
            "type": "",
            "name": "Row",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.Row",
            "params": [
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "crossAxisAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.CrossAxisAlignment"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "mainAxisAlignment",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.MainAxisAlignment"
                },
                {
                    "name": "mainAxisSize",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.MainAxisSize"
                },
                {
                    "name": "textBaseline",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextBaseline"
                },
                {
                    "name": "textDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "verticalDirection",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.VerticalDirection"
                }
            ]
        }
    ],
    "props": []
}