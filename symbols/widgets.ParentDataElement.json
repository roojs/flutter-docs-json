{
    "desc": "<p>An <a href=\"widgets\/Element-class.html\">Element<\/a> that uses a <a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a> as its configuration.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "widgets\/ParentDataElement-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.ParentDataElement",
    "shortname": "ParentDataElement",
    "extends": [
        "widgets.ProxyElement",
        "widgets.ComponentElement",
        "widgets.Element",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an element that uses the given widget as its configuration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ParentDataElement(ParentDataWidget&lt;T&gt; widget) : super(widget);<\/code><\/pre>\n    ",
            "href": "widgets\/ParentDataElement\/ParentDataElement.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.ParentDataElement",
            "params": [
                {
                    "name": "widget",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.ParentDataWidget"
                }
            ]
        },
        {
            "desc": "<p>Calls <a href=\"widgets\/ParentDataWidget\/applyParentData.html\">ParentDataWidget.applyParentData<\/a> on the given widget, passing it\nthe <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> whose parent data this element is ultimately\nresponsible for.<\/p>\n<p>This allows a render object's <a href=\"rendering\/RenderObject\/parentData.html\">RenderObject.parentData<\/a> to be modified\nwithout triggering a build. This is generally ill-advised, but makes sense\nin situations such as the following:<\/p>\n<ul>\n<li>\n<p>Build and layout are currently under way, but the <a href=\"rendering\/ParentData-class.html\">ParentData<\/a> in question\ndoes not affect layout, and the value to be applied could not be\ndetermined before build and layout (e.g. it depends on the layout of a\ndescendant).<\/p>\n<\/li>\n<li>\n<p>Paint is currently under way, but the <a href=\"rendering\/ParentData-class.html\">ParentData<\/a> in question does not\naffect layout or paint, and the value to be applied could not be\ndetermined before paint (e.g. it depends on the compositing phase).<\/p>\n<\/li>\n<\/ul>\n<p>In either case, the next build is expected to cause this element to be\nconfigured with the given new widget (or a widget with equivalent data).<\/p>\n<p>Only <a href=\"widgets\/ParentDataWidget-class.html\">ParentDataWidget<\/a>s that return true for\n<a href=\"widgets\/ParentDataWidget\/debugCanApplyOutOfTurn.html\">ParentDataWidget.debugCanApplyOutOfTurn<\/a> can be applied this way.<\/p>\n<p>The new widget must have the same child as the current widget.<\/p>\n<p>An example of when this is used is the <a href=\"widgets\/AutomaticKeepAlive-class.html\">AutomaticKeepAlive<\/a> widget. If it\nreceives a notification during the build of one of its descendants saying\nthat its child must be kept alive, it will apply a <a href=\"widgets\/KeepAlive-class.html\">KeepAlive<\/a> widget out\nof turn. This is safe, because by definition the child is already alive,\nand therefore this will not change the behavior of the parent this frame.\nIt is more efficient than requesting an additional frame just for the\npurpose of updating the <a href=\"widgets\/KeepAlive-class.html\">KeepAlive<\/a> widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void applyWidgetOutOfTurn(ParentDataWidget&lt;T&gt; newWidget) {\n  assert(newWidget != null);\n  assert(newWidget.debugCanApplyOutOfTurn());\n  assert(newWidget.child == widget.child);\n  _applyParentData(newWidget);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ParentDataElement\/applyWidgetOutOfTurn.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ParentDataElement",
            "params": [
                {
                    "name": "newWidget",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ParentDataWidget"
                }
            ]
        },
        {
            "desc": "<p>Add this element to the tree in the given slot of the given parent.<\/p>\n<p>The framework calls this function when a newly created element is added to\nthe tree for the first time. Use this method to initialize state that\ndepends on having a parent. State that is independent of the parent can\nmore easily be initialized in the constructor.<\/p>\n<p>This method transitions the element from the \"initial\" lifecycle state to\nthe \"active\" lifecycle state.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid mount(Element parent, dynamic newSlot) {\n  assert(() {\n    final List&lt;Widget&gt; badAncestors = &lt;Widget&gt;[];\n    Element ancestor = parent;\n    while (ancestor != null) {\n      if (ancestor is ParentDataElement&lt;RenderObjectWidget&gt;) {\n        badAncestors.add(ancestor.widget);\n      } else if (ancestor is RenderObjectElement) {\n        if (widget.debugIsValidAncestor(ancestor.widget))\n          break;\n        badAncestors.add(ancestor.widget);\n      }\n      ancestor = ancestor._parent;\n    }\n    if (ancestor != null &amp;&amp; badAncestors.isEmpty)\n      return true;\n    throw FlutterError(\n      'Incorrect use of ParentDataWidget.\\n' +\n      widget.debugDescribeInvalidAncestorChain(\n        description: '$this',\n        ownershipChain: parent.debugGetCreatorChain(10),\n        foundValidAncestor: ancestor != null,\n        badAncestors: badAncestors,\n      )\n    );\n  }());\n  super.mount(parent, newSlot);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ParentDataElement\/mount.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ParentDataElement",
            "params": [
                {
                    "name": "newSlot",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "parent",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.Element"
                }
            ]
        },
        {
            "desc": "<p>Notify other objects that the widget associated with this element has\nchanged.<\/p>\n<p>Called during <a href=\"widgets\/ProxyElement\/update.html\">update<\/a> (via <a href=\"widgets\/ProxyElement\/updated.html\">updated<\/a>) after changing the widget\nassociated with this element but before rebuilding this element.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid notifyClients(ParentDataWidget&lt;T&gt; oldWidget) {\n  _applyParentData(widget);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/ParentDataElement\/notifyClients.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.ParentDataElement",
            "params": [
                {
                    "name": "oldWidget",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.ParentDataWidget"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The configuration for this element.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nParentDataWidget&lt;T&gt; get widget =&gt; super.widget;<\/code><\/pre>\n        ",
            "href": "widgets\/ParentDataElement\/widget.html",
            "isDeprecated": "0",
            "type": "widgets.ParentDataWidget",
            "memberOf": "widgets.ParentDataElement",
            "params": []
        }
    ]
}