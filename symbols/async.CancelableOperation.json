{
    "desc": "<p>An asynchronous operation that can be cancelled.<\/p>\n<p>The value of this operation is exposed as <a href=\"package-async_async\/CancelableOperation\/value.html\">value<\/a>. When this operation is\ncancelled, <a href=\"package-async_async\/CancelableOperation\/value.html\">value<\/a> won't complete either successfully or with an error. If\n<a href=\"package-async_async\/CancelableOperation\/value.html\">value<\/a> has already completed, cancelling the operation does nothing.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/CancelableOperation-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.CancelableOperation",
    "shortname": "CancelableOperation",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> containing the result of this operation.<\/p>\n<p>This is like <code>value.asStream()<\/code>, but if a subscription to the stream is\ncanceled, this is as well.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; asStream() {\n  var controller =\n      new StreamController&lt;T&gt;(sync: true, onCancel: _completer._cancel);\n\n  value.then((value) {\n    controller.add(value);\n    controller.close();\n  }, onError: (error, stackTrace) {\n    controller.addError(error, stackTrace);\n    controller.close();\n  });\n  return controller.stream;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/CancelableOperation\/asStream.html",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "name": "asStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.CancelableOperation",
            "params": []
        },
        {
            "desc": "<p>Cancels this operation.<\/p>\n<p>This returns the <a href=\"dart-async\/Future-class.html\">Future<\/a> returned by the <a href=\"package-async_async\/CancelableCompleter-class.html\">CancelableCompleter<\/a>'s\n<code>onCancel<\/code> callback. Unlike <a href=\"package-async_async\/CancelableOperation\/cancel.html\">Stream.cancel<\/a>, it never returns <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future cancel() =&gt; _completer._cancel();<\/code><\/pre>\n    ",
            "href": "package-async_async\/CancelableOperation\/cancel.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "cancel",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.CancelableOperation",
            "params": []
        },
        {
            "desc": "<p>Creates a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when this operation completes <em>or<\/em> when\nit's cancelled.<\/p>\n<p>If this operation completes, this completes to the same result as <a href=\"package-async_async\/CancelableOperation\/value.html\">value<\/a>.\nIf this operation is cancelled, the returned future waits for the future\nreturned by <a href=\"package-async_async\/CancelableOperation\/cancel.html\">cancel<\/a>, then completes to <code>cancellationValue<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future valueOrCancellation([T cancellationValue]) {\n  var completer = new Completer&lt;T&gt;.sync();\n  value.then((result) =&gt; completer.complete(result),\n      onError: completer.completeError);\n\n  _completer._cancelMemo.future.then((_) {\n    completer.complete(cancellationValue);\n  }, onError: completer.completeError);\n\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/CancelableOperation\/valueOrCancellation.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "valueOrCancellation",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.CancelableOperation",
            "params": [
                {
                    "name": "cancellationValue",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The value returned by the operation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; get value =&gt; _completer._inner.future;<\/code><\/pre>\n        ",
            "href": "package-async_async\/CancelableOperation\/value.html",
            "name": "value",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "memberOf": "async.CancelableOperation",
            "params": []
        }
    ]
}