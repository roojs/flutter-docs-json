{
    "name": "widgets.SliverChildListDelegate",
    "extends": [
        "widgets.SliverChildDelegate",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "SliverChildListDelegate",
            "type": "",
            "desc": "<p>Creates a delegate that supplies children for slivers using the given\nlist.<\/p>\n<p>The <code>children<\/code>, <code>addAutomaticKeepAlives<\/code>, <code>addRepaintBoundaries<\/code>,\n<code>addSemanticIndexes<\/code>, and <code>semanticIndexCallback<\/code> arguments must not be\nnull.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.SliverChildListDelegate",
            "sig": "",
            "params": [
                {
                    "name": "children",
                    "type": "dart:core.List<widgets.Widget>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "widgets.Widget"
                    ]
                },
                {
                    "name": "addAutomaticKeepAlives",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addRepaintBoundaries",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addSemanticIndexes",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticIndexCallback",
                    "type": "widgets.SemanticIndexCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticIndexOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/SliverChildListDelegate\/SliverChildListDelegate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SliverChildListDelegate(\n  this.children, {\n  this.addAutomaticKeepAlives = true,\n  this.addRepaintBoundaries = true,\n  this.addSemanticIndexes = true,\n  this.semanticIndexCallback = _kDefaultSemanticIndexCallback,\n  this.semanticIndexOffset = 0,\n}) : assert(children != null),\n     assert(addAutomaticKeepAlives != null),\n     assert(addRepaintBoundaries != null),\n     assert(addSemanticIndexes != null),\n     assert(semanticIndexCallback != null);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "build",
            "type": "widgets.Widget",
            "desc": "<p>Returns the child with the given index.<\/p>\n<p>Should return null if asked to build a widget with a greater index than\nexists. If this returns null, <a href=\"widgets\/SliverChildListDelegate\/estimatedChildCount.html\">estimatedChildCount<\/a> must subsequently\nreturn a precise non-null value.<\/p>\n<p>Subclasses typically override this function and wrap their children in\n<a href=\"widgets\/AutomaticKeepAlive-class.html\">AutomaticKeepAlive<\/a> and <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> widgets.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.SliverChildListDelegate",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/SliverChildListDelegate\/build.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context, int index) {\n  assert(children != null);\n  if (index &lt; 0 || index &gt;= children.length)\n    return null;\n  Widget child = children[index];\n  assert(child != null);\n  if (addRepaintBoundaries)\n    child = RepaintBoundary.wrap(child, index);\n  if (addSemanticIndexes) {\n    final int semanticIndex = semanticIndexCallback(child, index);\n    if (semanticIndex != null)\n      child = IndexedSemantics(index: semanticIndex + semanticIndexOffset, child: child);\n  }\n  if (addAutomaticKeepAlives)\n    child = AutomaticKeepAlive(child: child);\n  return child;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "shouldRebuild",
            "type": "dart:core.bool",
            "desc": "<p>Called whenever a new instance of the child delegate class is\nprovided to the sliver.<\/p>\n<p>If the new instance represents different information than the old\ninstance, then the method should return true, otherwise it should return\nfalse.<\/p>\n<p>If the method returns false, then the <a href=\"widgets\/SliverChildListDelegate\/build.html\">build<\/a> call might be optimized\naway.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.SliverChildListDelegate",
            "sig": "",
            "params": [
                {
                    "name": "oldDelegate",
                    "type": "widgets.SliverChildListDelegate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/SliverChildListDelegate\/shouldRebuild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool shouldRebuild(covariant SliverChildListDelegate oldDelegate) {\n  return children != oldDelegate.children;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "addAutomaticKeepAlives",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to wrap each child in an <a href=\"widgets\/AutomaticKeepAlive-class.html\">AutomaticKeepAlive<\/a>.<\/p>\n<p>Typically, children in lazy list are wrapped in <a href=\"widgets\/AutomaticKeepAlive-class.html\">AutomaticKeepAlive<\/a>\nwidgets so that children can use <a href=\"widgets\/KeepAliveNotification-class.html\">KeepAliveNotification<\/a>s to preserve\ntheir state when they would otherwise be garbage collected off-screen.<\/p>\n<p>This feature (and <a href=\"widgets\/SliverChildListDelegate\/addRepaintBoundaries.html\">addRepaintBoundaries<\/a>) must be disabled if the children\nare going to manually maintain their <a href=\"widgets\/KeepAlive-class.html\">KeepAlive<\/a> state. It may also be\nmore efficient to disable this feature if it is known ahead of time that\nnone of the children will ever try to keep themselves alive.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/addAutomaticKeepAlives.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool addAutomaticKeepAlives\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "addRepaintBoundaries",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to wrap each child in a <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a>.<\/p>\n<p>Typically, children in a scrolling container are wrapped in repaint\nboundaries so that they do not need to be repainted as the list scrolls.\nIf the children are easy to repaint (e.g., solid color blocks or a short\nsnippet of text), it might be more efficient to not add a repaint boundary\nand simply repaint the children during scrolling.<\/p>\n<p>Defaults to true.<\/p>\n        ",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/addRepaintBoundaries.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool addRepaintBoundaries\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "addSemanticIndexes",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to wrap each child in an <a href=\"widgets\/IndexedSemantics-class.html\">IndexedSemantics<\/a>.<\/p>\n<p>Typically, children in a scrolling container must be annotated with a\nsemantic index in order to generate the correct accessibility\nannouncements. This should only be set to false if the indexes have\nalready been provided by an <code>IndexedChildSemantics<\/code> widget.<\/p>\n<p>Defaults to true.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>IndexedChildSemantics<\/code>, for an explanation of how to manually\nprovide semantic indexes.<\/li><\/ul>",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/addSemanticIndexes.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool addSemanticIndexes\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "children",
            "type": "dart:core.List<widgets.Widget>",
            "types": [
                "dart:core.List",
                "widgets.Widget"
            ],
            "desc": "<p>The widgets to display.<\/p>\n        ",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/children.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; children\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "estimatedChildCount",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns an estimate of the number of children this delegate will build.<\/p>\n<p>Used to estimate the maximum scroll offset if <a href=\"widgets\/SliverChildDelegate\/estimateMaxScrollOffset.html\">estimateMaxScrollOffset<\/a>\nreturns null.<\/p>\n<p>Return null if there are an unbounded number of children or if it would\nbe too difficult to estimate the number of children.<\/p>\n<p>This must return a precise number once <a href=\"widgets\/SliverChildListDelegate\/build.html\">build<\/a> has returned null.<\/p>\n        ",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/estimatedChildCount.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get estimatedChildCount =&gt; children.length;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticIndexCallback",
            "type": "widgets.SemanticIndexCallback",
            "types": [],
            "desc": "<p>A <a href=\"widgets\/SemanticIndexCallback.html\">SemanticIndexCallback<\/a> which is used when <a href=\"widgets\/SliverChildListDelegate\/addSemanticIndexes.html\">addSemanticIndexes<\/a> is true.<\/p>\n<p>Defaults to providing an index for each widget.<\/p>\n        ",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/semanticIndexCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticIndexCallback semanticIndexCallback\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "semanticIndexOffset",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>An initial offset to add to the semantic indexes generated by this widget.<\/p>\n<p>Defaults to zero.<\/p>\n        ",
            "memberOf": "widgets.SliverChildListDelegate",
            "isConstant": false,
            "href": "widgets\/SliverChildListDelegate\/semanticIndexOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int semanticIndexOffset\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/SliverChildListDelegate-class.html",
    "desc": "<p>A delegate that supplies children for slivers using an explicit list.<\/p>\n<p>Many slivers lazily construct their box children to avoid creating more\nchildren than are visible through the <a href=\"widgets\/Viewport-class.html\">Viewport<\/a>. This delegate provides\nchildren using an explicit list, which is convenient but reduces the benefit\nof building children lazily.<\/p>\n<p>In general building all the widgets in advance is not efficient. It is\nbetter to create a delegate that builds them on demand using\n<a href=\"widgets\/SliverChildBuilderDelegate-class.html\">SliverChildBuilderDelegate<\/a> or by subclassing <a href=\"widgets\/SliverChildDelegate-class.html\">SliverChildDelegate<\/a>\ndirectly.<\/p>\n<p>This class is provided for the cases where either the list of children is\nknown well in advance (ideally the children are themselves compile-time\nconstants, for example), and therefore will not be built each time the\ndelegate itself is created, or the list is small, such that it's likely\nalways visible (and thus there is nothing to be gained by building it on\ndemand). For example, the body of a dialog box might fit both of these\nconditions.<\/p>\n<p>The widgets in the given <a href=\"widgets\/SliverChildListDelegate\/children.html\">children<\/a> list are automatically wrapped in\n<a href=\"widgets\/AutomaticKeepAlive-class.html\">AutomaticKeepAlive<\/a> widgets if <a href=\"widgets\/SliverChildListDelegate\/addAutomaticKeepAlives.html\">addAutomaticKeepAlives<\/a> is true (the\ndefault) and in <a href=\"widgets\/RepaintBoundary-class.html\">RepaintBoundary<\/a> widgets if <a href=\"widgets\/SliverChildListDelegate\/addRepaintBoundaries.html\">addRepaintBoundaries<\/a> is true\n(also the default).<\/p>\n<h2 id=\"accessibility\">Accessibility<\/h2>\n<p>The <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a> requires that its semantic children are annotated\nusing <a href=\"widgets\/IndexedSemantics-class.html\">IndexedSemantics<\/a>. This is done by default in the delegate with\nthe <code>addSemanticIndexes<\/code> parameter set to true.<\/p>\n<p>If multiple delegates are used in a single scroll view, then the indexes\nwill not be correct by default. The <code>semanticIndexOffset<\/code> can be used to\noffset the semantic indexes of each delegate so that the indexes are\nmonotonically increasing. For example, if a scroll view contains two\ndelegates where the first has 10 children contributing semantics, then the\nsecond delegate should offset its children by 10.<\/p>\n<p>In certain cases, only a subset of child widgets should be annotated\nwith a semantic index. For example, in <a href=\"widgets\/ListView\/ListView.separated.html\">new ListView.separated()<\/a> the\nseparators do not have an index associated with them. This is done by\nproviding a <code>semanticIndexCallback<\/code> which returns null for separators\nindexes and rounds the non-separator indexes down by half.<\/p>\n<p>See <a href=\"widgets\/SliverChildBuilderDelegate-class.html\">SliverChildBuilderDelegate<\/a> for sample code using\n<code>semanticIndexOffset<\/code> and <code>semanticIndexCallback<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/SliverChildBuilderDelegate-class.html\">SliverChildBuilderDelegate<\/a>, which is a delegate that uses a builder\ncallback to construct the children.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SliverChildListDelegate"
}