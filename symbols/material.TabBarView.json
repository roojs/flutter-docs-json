{
    "desc": "<p>A page view that displays the widget which corresponds to the currently\nselected tab. Typically used in conjunction with a <a href=\"material\/TabBar-class.html\">TabBar<\/a>.<\/p>\n<p>If a <a href=\"material\/TabController-class.html\">TabController<\/a> is not provided, then there must be a <a href=\"material\/DefaultTabController-class.html\">DefaultTabController<\/a>\nancestor.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/TabBarView-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.TabBarView",
    "shortname": "TabBarView",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a page view with one child per tab.<\/p>\n<p>The length of <code>children<\/code> must be the same as the <code>controller<\/code>'s length.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TabBarView({\n  Key key,\n  @required this.children,\n  this.controller,\n  this.physics,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(children != null),\n     assert(dragStartBehavior != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/TabBarView\/TabBarView.html",
            "isDeprecated": "0",
            "type": "",
            "name": "TabBarView",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.TabBarView",
            "params": [
                {
                    "name": "children",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<widgets.Widget>"
                },
                {
                    "name": "controller",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TabController"
                },
                {
                    "name": "dragStartBehavior",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.DragStartBehavior"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "physics",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.ScrollPhysics"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/TabBarView\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_TabBarViewState createState() =&gt; _TabBarViewState();<\/code><\/pre>\n    ",
            "href": "material\/TabBarView\/createState.html",
            "isDeprecated": "0",
            "type": "<_TabBarViewState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.TabBarView",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>One widget per tab.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; children\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabBarView\/children.html",
            "name": "children",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.Widget>",
            "memberOf": "material.TabBarView",
            "params": []
        },
        {
            "desc": "<p>This widget's selection and animation state.<\/p>\n<p>If <a href=\"material\/TabController-class.html\">TabController<\/a> is not provided, then the value of <a href=\"material\/DefaultTabController\/of.html\">DefaultTabController.of<\/a>\nwill be used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TabController controller\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabBarView\/controller.html",
            "name": "controller",
            "isDeprecated": false,
            "type": "material.TabController",
            "memberOf": "material.TabBarView",
            "params": []
        },
        {
            "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/TabBarView\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabBarView\/dragStartBehavior.html",
            "name": "dragStartBehavior",
            "isDeprecated": false,
            "type": "gestures.DragStartBehavior",
            "memberOf": "material.TabBarView",
            "params": []
        },
        {
            "desc": "<p>How the page view should respond to user input.<\/p>\n<p>For example, determines how the page view continues to animate after the\nuser stops dragging the page view.<\/p>\n<p>The physics are modified to snap to page boundaries using\n<a href=\"widgets\/PageScrollPhysics-class.html\">PageScrollPhysics<\/a> prior to being used.<\/p>\n<p>Defaults to matching platform conventions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollPhysics physics\n\n<\/code><\/pre>\n        ",
            "href": "material\/TabBarView\/physics.html",
            "name": "physics",
            "isDeprecated": false,
            "type": "widgets.ScrollPhysics",
            "memberOf": "material.TabBarView",
            "params": []
        }
    ]
}