{
    "desc": "<p>A <a href=\"dart-convert\/Converter-class.html\">Converter<\/a> converts data from one representation into another.<\/p>\n<p>It is recommended that implementations of <code>Converter<\/code> extend this class,\nto inherit any further methods that may be added to the class.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-convert\/Converter-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:convert",
    "name": "dart:convert.Converter",
    "shortname": "Converter",
    "extends": [
        "dart:async.StreamTransformerBase",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Converter();<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/Converter.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": []
        },
        {
            "desc": "<p>Transforms the provided <code>stream<\/code>.<\/p>\n<p>Returns a new stream with events that are computed from events of the\nprovided <code>stream<\/code>.<\/p>\n<p>The <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> interface is completely generic,\nso it cannot say what subclasses do.\nEach <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a> should document clearly how it transforms the\nstream (on the class or variable used to access the transformer),\nas well as any differences from the following typical behavior:<\/p>\n<ul>\n<li>When the returned stream is listened to, it starts listening to the\ninput <code>stream<\/code>.<\/li>\n<li>Subscriptions of the returned stream forward (in a reasonable time)\na <a href=\"dart-async\/StreamSubscription\/pause.html\">StreamSubscription.pause<\/a> call to the subscription of the input\n<code>stream<\/code>.<\/li>\n<li>Similarly, canceling a subscription of the returned stream eventually\n(in reasonable time) cancels the subscription of the input <code>stream<\/code>.<\/li>\n<\/ul>\n<p>\"Reasonable time\" depends on the transformer and stream. Some transformers,\nlike a \"timeout\" transformer, might make these operations depend on a\nduration. Others might not delay them at all, or just by a microtask.<\/p>\n<p>Transformers are free to handle errors in any way.\nA transformer implementation may choose to propagate errors,\nor convert them to other events, or ignore them completely,\nbut if errors are ignored, it should be documented explicitly.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; bind(Stream&lt;S&gt; stream) {\n  return Stream&lt;T&gt;.eventTransformed(\n      stream, (EventSink sink) =&gt; _ConverterStreamEventSink(this, sink));\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/bind.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Provides a <code>Converter&lt;RS, RT&gt;<\/code> view of this stream transformer.<\/p>\n<p>The resulting transformer will check at run-time that all conversion\ninputs are actually instances of <code>S<\/code>,\nand it will check that all conversion output produced by this converter\nare actually instances of <code>RT<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;RS, RT&gt; cast&lt;RS, RT&gt;() =&gt; Converter.castFrom&lt;S, T, RS, RT&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/cast.html",
            "isDeprecated": "0",
            "type": "dart:convert.Converter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": []
        },
        {
            "desc": "<p>Adapts <code>source<\/code> to be a <code>Converter&lt;TS, TT&gt;<\/code>.<\/p>\n<p>This allows <code>source<\/code> to be used at the new type, but at run-time it\nmust satisfy the requirements of both the new type and its original type.<\/p>\n<p>Conversion input must be both <code>SS<\/code> and <code>TS<\/code> and the output created by\n<code>source<\/code> for those input must be both <code>ST<\/code> and <code>TT<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Converter&lt;TS, TT&gt; castFrom&lt;SS, ST, TS, TT&gt;(Converter&lt;SS, ST&gt; source) =&gt;\n    CastConverter&lt;SS, ST, TS, TT&gt;(source);<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/castFrom.html",
            "isDeprecated": "0",
            "type": "dart:convert.Converter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": [
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Converter"
                }
            ]
        },
        {
            "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T convert(S input);<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/convert.html",
            "isDeprecated": "0",
            "type": "<T>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": [
                {
                    "name": "input",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<S>"
                }
            ]
        },
        {
            "desc": "<p>Fuses <code>this<\/code> with <code>other<\/code>.<\/p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this<\/code> before converting with <code>other<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;S, TT&gt; fuse&lt;TT&gt;(Converter&lt;T, TT&gt; other) {\n  return _FusedConverter&lt;S, T, TT&gt;(this, other);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/fuse.html",
            "isDeprecated": "0",
            "type": "dart:convert.Converter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:convert.Converter"
                }
            ]
        },
        {
            "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Sink&lt;S&gt; startChunkedConversion(Sink&lt;T&gt; sink) {\n  throw UnsupportedError(\n      \"This converter does not support chunked conversions: $this\");\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/Converter\/startChunkedConversion.html",
            "isDeprecated": "0",
            "type": "dart:core.Sink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.Converter",
            "params": [
                {
                    "name": "sink",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Sink"
                }
            ]
        }
    ],
    "props": []
}