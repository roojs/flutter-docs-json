{
    "desc": "<p>A point within a rectangle.<\/p>\n<p><code>Alignment(0.0, 0.0)<\/code> represents the center of the rectangle. The distance\nfrom -1.0 to +1.0 is the distance from one side of the rectangle to the\nother side of the rectangle. Therefore, 2.0 units horizontally (or\nvertically) is equivalent to the width (or height) of the rectangle.<\/p>\n<p><code>Alignment(-1.0, -1.0)<\/code> represents the top left of the rectangle.<\/p>\n<p><code>Alignment(1.0, 1.0)<\/code> represents the bottom right of the rectangle.<\/p>\n<p><code>Alignment(0.0, 3.0)<\/code> represents a point that is horizontally centered with\nrespect to the rectangle and vertically below the bottom of the rectangle by\nthe height of the rectangle.<\/p>\n<p><code>Alignment(0.0, -0.5)<\/code> represents a point that is horizontally centered with\nrespect to the rectangle and vertically half way between the top edge and\nthe center.<\/p>\n<p><code>Alignment(x, y)<\/code> in a rectangle with height h and width w describes\nthe point (x * w\/2 + w\/2, y * h\/2 + h\/2) in the coordinate system of the\nrectangle.<\/p>\n<p><a href=\"painting\/Alignment-class.html\">Alignment<\/a> uses visual coordinates, which means increasing <a href=\"painting\/Alignment\/x.html\">x<\/a> moves the\npoint from left to right. To support layouts with a right-to-left\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, consider using <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, in which the\ndirection the point moves when increasing the horizontal value depends on\nthe <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>A variety of widgets use <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in their configuration, most\nnotably:<\/p>\n<ul><li>\n<a href=\"widgets\/Align-class.html\">Align<\/a> positions a child according to an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>.<\/li><\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which has a horizontal coordinate orientation\nthat depends on the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>, which is an abstract type that is agnostic as to\nwhether the horizontal direction depends on the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/Alignment-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.Alignment",
    "shortname": "Alignment",
    "extends": [
        "painting.AlignmentGeometry",
        "dart:core.Object"
    ],
    "realImplementors": [
        "painting.FractionalOffset",
        "rendering.AlignmentTween"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an alignment.<\/p>\n<p>The <code>x<\/code> and <code>y<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Alignment(this.x, this.y)\n  : assert(x != null),\n    assert(y != null);<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/Alignment.html",
            "isDeprecated": false,
            "type": "",
            "name": "Alignment",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "x",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "y",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/Alignment-class.html\">Alignment<\/a> or two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/Alignment\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/Alignment\/resolve.html\">resolve<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentGeometry add(AlignmentGeometry other) {\n  if (other is Alignment)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/add.html",
            "isDeprecated": false,
            "type": "painting.AlignmentGeometry",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.AlignmentGeometry"
                }
            ]
        },
        {
            "desc": "<p>Returns the offset that is this fraction in the direction of the given offset.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset alongOffset(Offset other) {\n  final double centerX = other.dx \/ 2.0;\n  final double centerY = other.dy \/ 2.0;\n  return Offset(centerX + x * centerX, centerY + y * centerY);\n}<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/alongOffset.html",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "name": "alongOffset",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Returns the offset that is this fraction within the given size.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset alongSize(Size other) {\n  final double centerX = other.width \/ 2.0;\n  final double centerY = other.height \/ 2.0;\n  return Offset(centerX + x * centerX, centerY + y * centerY);\n}<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/alongSize.html",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "name": "alongSize",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Returns a rect of the given size, aligned within given rect as specified\nby this alignment.<\/p>\n<p>For example, a 100\u00d7100 size inscribed on a 200\u00d7200 rect using\n<a href=\"painting\/Alignment\/topLeft-constant.html\">Alignment.topLeft<\/a> would be the 100\u00d7100 rect at the top left of\nthe 200\u00d7200 rect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect inscribe(Size size, Rect rect) {\n  final double halfWidthDelta = (rect.width - size.width) \/ 2.0;\n  final double halfHeightDelta = (rect.height - size.height) \/ 2.0;\n  return Rect.fromLTWH(\n    rect.left + halfWidthDelta + x * halfWidthDelta,\n    rect.top + halfHeightDelta + y * halfHeightDelta,\n    size.width,\n    size.height,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/inscribe.html",
            "isDeprecated": false,
            "type": "dart:ui.Rect",
            "name": "inscribe",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "rect",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                },
                {
                    "name": "size",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Size"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"painting\/Alignment-class.html\">Alignment<\/a>s.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Alignment lerp(Alignment a, Alignment b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return Alignment(ui.lerpDouble(0.0, b.x, t), ui.lerpDouble(0.0, b.y, t));\n  if (b == null)\n    return Alignment(ui.lerpDouble(a.x, 0.0, t), ui.lerpDouble(a.y, 0.0, t));\n  return Alignment(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));\n}<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/lerp.html",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Alignment"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.Alignment"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Convert this instance into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses literal\ncoordinates (the <code>x<\/code> coordinate being explicitly a distance from the\nleft).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment resolve(TextDirection direction) =&gt; this;<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/resolve.html",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "name": "resolve",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "direction",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextDirection"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; _stringify(x, y);<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>Returns the point that is this fraction within the given rect.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset withinRect(Rect rect) {\n  final double halfWidth = rect.width \/ 2.0;\n  final double halfHeight = rect.height \/ 2.0;\n  return Offset(\n    rect.left + halfWidth + x * halfWidth,\n    rect.top + halfHeight + y * halfHeight,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/withinRect.html",
            "isDeprecated": false,
            "type": "dart:ui.Offset",
            "name": "withinRect",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.Alignment",
            "params": [
                {
                    "name": "rect",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Rect"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The center point along the bottom edge.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment bottomCenter = Alignment(0.0, 1.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/bottomCenter-constant.html",
            "name": "bottomCenter",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The bottom left corner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment bottomLeft = Alignment(-1.0, 1.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/bottomLeft-constant.html",
            "name": "bottomLeft",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The bottom right corner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment bottomRight = Alignment(1.0, 1.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/bottomRight-constant.html",
            "name": "bottomRight",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The center point, both horizontally and vertically.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment center = Alignment(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/center-constant.html",
            "name": "center",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The center point along the left edge.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment centerLeft = Alignment(-1.0, 0.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/centerLeft-constant.html",
            "name": "centerLeft",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The center point along the right edge.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment centerRight = Alignment(1.0, 0.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/centerRight-constant.html",
            "name": "centerRight",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The center point along the top edge.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment topCenter = Alignment(0.0, -1.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/topCenter-constant.html",
            "name": "topCenter",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The top left corner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment topLeft = Alignment(-1.0, -1.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/topLeft-constant.html",
            "name": "topLeft",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The top right corner.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment topRight = Alignment(1.0, -1.0)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/Alignment\/topRight-constant.html",
            "name": "topRight",
            "isDeprecated": false,
            "type": "painting.Alignment",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The distance fraction in the horizontal direction.<\/p>\n<p>A value of -1.0 corresponds to the leftmost edge. A value of 1.0\ncorresponds to the rightmost edge. Values are not limited to that range;\nvalues less than -1.0 represent positions to the left of the left edge,\nand values greater than 1.0 represent positions to the right of the right\nedge.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double x\n\n<\/code><\/pre>\n        ",
            "href": "painting\/Alignment\/x.html",
            "name": "x",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.Alignment",
            "params": []
        },
        {
            "desc": "<p>The distance fraction in the vertical direction.<\/p>\n<p>A value of -1.0 corresponds to the topmost edge. A value of 1.0\ncorresponds to the bottommost edge. Values are not limited to that range;\nvalues less than -1.0 represent positions above the top, and values\ngreater than 1.0 represent positions below the bottom.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
            "href": "painting\/Alignment\/y.html",
            "name": "y",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.Alignment",
            "params": []
        }
    ]
}