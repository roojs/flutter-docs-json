{
    "name": "services.TextInputFormatter",
    "extends": [],
    "memberOf": "services",
    "events": [],
    "methods": [
        {
            "name": "TextInputFormatter",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "services.TextInputFormatter",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "services\/TextInputFormatter\/TextInputFormatter.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "formatEditUpdate",
            "type": "services.TextEditingValue",
            "desc": "<p>Called when text is being typed or cut\/copy\/pasted in the <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>.<\/p>\n<p>You can override the resulting text based on the previous text value and\nthe incoming new text value.<\/p>\n<p>When formatters are chained, <code>oldValue<\/code> reflects the initial value of\n<a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> at the beginning of the chain.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextInputFormatter",
            "sig": "",
            "params": [
                {
                    "name": "oldValue",
                    "type": "services.TextEditingValue",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "newValue",
                    "type": "services.TextEditingValue",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/TextInputFormatter\/formatEditUpdate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextEditingValue formatEditUpdate(\n  TextEditingValue oldValue,\n  TextEditingValue newValue,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "withFunction",
            "type": "services.TextInputFormatter",
            "desc": "<p>A shorthand to creating a custom <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> which formats\nincoming text input changes with the given function.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextInputFormatter",
            "sig": "",
            "params": [
                {
                    "name": "formatFunction",
                    "type": "services.TextInputFormatFunction",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/TextInputFormatter\/withFunction.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextInputFormatter withFunction(\n  TextInputFormatFunction formatFunction,\n) {\n  return _SimpleTextInputFormatter(formatFunction);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "services.BlacklistingTextInputFormatter",
        "services.LengthLimitingTextInputFormatter",
        "services.WhitelistingTextInputFormatter"
    ],
    "realImplementors": [
        "services.BlacklistingTextInputFormatter",
        "services.LengthLimitingTextInputFormatter",
        "services.WhitelistingTextInputFormatter"
    ],
    "cn": [],
    "href": "services\/TextInputFormatter-class.html",
    "desc": "<p>A <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> can be optionally injected into an <a href=\"widgets\/EditableText-class.html\">EditableText<\/a>\nto provide as-you-type validation and formatting of the text being edited.<\/p>\n<p>Text modification should only be applied when text is being committed by the\nIME and not on text under composition (i.e., only when\n<a href=\"services\/TextEditingValue\/composing.html\">TextEditingValue.composing<\/a> is collapsed).<\/p>\n<p>Concrete implementations <a href=\"services\/BlacklistingTextInputFormatter-class.html\">BlacklistingTextInputFormatter<\/a>, which removes\nblacklisted characters upon edit commit, and\n<a href=\"services\/WhitelistingTextInputFormatter-class.html\">WhitelistingTextInputFormatter<\/a>, which only allows entries of whitelisted\ncharacters, are provided.<\/p>\n<p>To create custom formatters, extend the <a href=\"services\/TextInputFormatter-class.html\">TextInputFormatter<\/a> class and\nimplement the <a href=\"services\/TextInputFormatter\/formatEditUpdate.html\">formatEditUpdate<\/a> method.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/EditableText-class.html\">EditableText<\/a> on which the formatting apply.<\/li>\n<li>\n<a href=\"services\/BlacklistingTextInputFormatter-class.html\">BlacklistingTextInputFormatter<\/a>, a provided formatter for blacklisting\ncharacters.<\/li>\n<li>\n<a href=\"services\/WhitelistingTextInputFormatter-class.html\">WhitelistingTextInputFormatter<\/a>, a provided formatter for whitelisting\ncharacters.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextInputFormatter"
}