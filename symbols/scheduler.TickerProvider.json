{
    "desc": "<p>An interface implemented by classes that can vend <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a> objects.<\/p>\n<p>Tickers can be used by any object that wants to be notified whenever a frame\ntriggers, but are most commonly used indirectly via an\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>. <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>s need a <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> to\nobtain their <a href=\"scheduler\/Ticker-class.html\">Ticker<\/a>. If you are creating an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> from a\n<a href=\"widgets\/State-class.html\">State<\/a>, then you can use the <a href=\"widgets\/TickerProviderStateMixin-mixin.html\">TickerProviderStateMixin<\/a> and\n<a href=\"widgets\/SingleTickerProviderStateMixin-mixin.html\">SingleTickerProviderStateMixin<\/a> classes to obtain a suitable\n<a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a>. The widget test framework <a href=\"flutter_test\/WidgetTester-class.html\">WidgetTester<\/a> object can be\nused as a ticker provider in the context of tests. In other contexts, you\nwill have to either pass a <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> from a higher level (e.g.\nindirectly from a <a href=\"widgets\/State-class.html\">State<\/a> that mixes in <a href=\"widgets\/TickerProviderStateMixin-mixin.html\">TickerProviderStateMixin<\/a>), or\ncreate a custom <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> subclass.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "scheduler\/TickerProvider-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "scheduler",
    "name": "scheduler.TickerProvider",
    "shortname": "TickerProvider",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TickerProvider();<\/code><\/pre>\n    ",
            "href": "scheduler\/TickerProvider\/TickerProvider.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "scheduler.TickerProvider",
            "params": []
        },
        {
            "desc": "<p>Creates a ticker with the given callback.<\/p>\n<p>The kind of ticker provided depends on the kind of ticker provider.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Ticker createTicker(TickerCallback onTick);<\/code><\/pre>\n    ",
            "href": "scheduler\/TickerProvider\/createTicker.html",
            "isDeprecated": "0",
            "type": "scheduler.Ticker",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "scheduler.TickerProvider",
            "params": [
                {
                    "name": "onTick",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "scheduler.TickerCallback"
                }
            ]
        }
    ],
    "props": []
}