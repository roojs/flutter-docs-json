{
    "name": "async.StreamGroup",
    "extends": [],
    "memberOf": "async",
    "events": [],
    "methods": [
        {
            "name": "StreamGroup",
            "type": "",
            "desc": "<p>Creates a new stream group where <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> is single-subscriber.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamGroup",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-async_async\/StreamGroup\/StreamGroup.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamGroup() {\n  _controller = new StreamController&lt;T&gt;(\n      onListen: _onListen,\n      onPause: _onPause,\n      onResume: _onResume,\n      onCancel: _onCancel,\n      sync: true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "dart:async.Future",
            "desc": "<p>Adds <code>stream<\/code> as a member of this group.<\/p>\n<p>Any events from <code>stream<\/code> will be emitted through <a href=\"package-async_async\/StreamGroup\/stream.html\">this.stream<\/a>. If this\ngroup has a listener, <code>stream<\/code> will be listened to immediately; otherwise\nit will only be listened to once this group gets a listener.<\/p>\n<p>If this is a single-subscription group and its subscription has been\ncanceled, <code>stream<\/code> will be canceled as soon as its added. If this returns\na <a href=\"dart-async\/Future-class.html\">Future<\/a>, it will be returned from <a href=\"package-async_async\/StreamGroup\/add.html\">add<\/a>. Otherwise, <a href=\"package-async_async\/StreamGroup\/add.html\">add<\/a> returns\n<code>null<\/code>.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if this group is closed.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamGroup",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/StreamGroup\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future add(Stream&lt;T&gt; stream) {\n  if (_closed) {\n    throw new StateError(\"Can't add a Stream to a closed StreamGroup.\");\n  }\n\n  if (_state == _StreamGroupState.dormant) {\n    _subscriptions.putIfAbsent(stream, () =&gt; null);\n  } else if (_state == _StreamGroupState.canceled) {\n    \/\/ Listen to the stream and cancel it immediately so that no one else can\n    \/\/ listen, for consistency. If the stream has an onCancel listener this\n    \/\/ will also fire that, which may help it clean up resources.\n    return stream.listen(null).cancel();\n  } else {\n    _subscriptions.putIfAbsent(stream, () =&gt; _listenToStream(stream));\n  }\n\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StreamGroup.broadcast",
            "type": "",
            "desc": "<p>Creates a new stream group where <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> is a broadcast stream.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamGroup",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-async_async\/StreamGroup\/StreamGroup.broadcast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamGroup.broadcast() {\n  _controller = new StreamController&lt;T&gt;.broadcast(\n      onListen: _onListen, onCancel: _onCancelBroadcast, sync: true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "close",
            "type": "dart:async.Future",
            "desc": "<p>Closes the group, indicating that no more streams will be added.<\/p>\n<p>If there are no streams in the group, <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> is closed immediately.\nOtherwise, <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> will close once all streams in the group close.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> has actually been closed.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamGroup",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-async_async\/StreamGroup\/close.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() {\n  if (_closed) return _controller.done;\n\n  _closed = true;\n  if (_subscriptions.isEmpty) _controller.close();\n\n  return _controller.done;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "merge",
            "type": "dart:async.Stream",
            "desc": "<p>Merges the events from <code>streams<\/code> into a single (single-subscriber) stream.<\/p>\n<p>This is equivalent to adding <code>streams<\/code> to a group, closing that group, and\nreturning its stream.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamGroup",
            "sig": "",
            "params": [
                {
                    "name": "streams",
                    "type": "dart:core.Iterable<dart:async.Stream>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:async.Stream"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/StreamGroup\/merge.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Stream&lt;T&gt; merge&lt;T&gt;(Iterable&lt;Stream&lt;T&gt;&gt; streams) {\n  var group = new StreamGroup&lt;T&gt;();\n  streams.forEach(group.add);\n  group.close();\n  return group.stream;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "remove",
            "type": "dart:async.Future",
            "desc": "<p>Removes <code>stream<\/code> as a member of this group.<\/p>\n<p>No further events from <code>stream<\/code> will be emitted through this group. If\n<code>stream<\/code> has been listened to, its subscription will be canceled.<\/p>\n<p>If <code>stream<\/code> has been listened to, this <em>synchronously<\/em> cancels its\nsubscription. This means that any events from <code>stream<\/code> that haven't yet\nbeen emitted through this group will not be.<\/p>\n<p>If <code>stream<\/code>'s subscription is canceled, this returns\n<a href=\"dart-async\/StreamSubscription\/cancel.html\">StreamSubscription.cancel<\/a>'s return value. Otherwise, it returns <code>null<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "async.StreamGroup",
            "sig": "",
            "params": [
                {
                    "name": "stream",
                    "type": "dart:async.Stream",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-async_async\/StreamGroup\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future remove(Stream&lt;T&gt; stream) {\n  var subscription = _subscriptions.remove(stream);\n  var future = subscription == null ? null : subscription.cancel();\n  if (_closed &amp;&amp; _subscriptions.isEmpty) _controller.close();\n  return future;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "stream",
            "type": "dart:async.Stream",
            "types": [],
            "desc": "<p>The stream through which all events from streams in the group are emitted.<\/p>\n        ",
            "memberOf": "async.StreamGroup",
            "isConstant": false,
            "href": "package-async_async\/StreamGroup\/stream.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream =&gt; _controller.stream;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-async_async\/StreamGroup-class.html",
    "desc": "<p>A collection of streams whose events are unified and sent through a central\nstream.<\/p>\n<p>Both errors and data events are forwarded through <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a>. The streams in\nthe group won't be listened to until <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> has a listener. <strong>Note that\nthis means that events emitted by broadcast streams will be dropped until\n<a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> has a listener.<\/strong><\/p>\n<p>If the <code>StreamGroup<\/code> is constructed using <a href=\"package-async_async\/StreamGroup\/StreamGroup.html\">new StreamGroup<\/a>, <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> will\nbe single-subscription. In this case, if <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> is paused or canceled, all\nstreams in the group will likewise be paused or canceled, respectively.<\/p>\n<p>If the <code>StreamGroup<\/code> is constructed using <a href=\"package-async_async\/StreamGroup\/StreamGroup.broadcast.html\">new StreamGroup.broadcast<\/a>,\n<a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> will be a broadcast stream. In this case, the streams in the group\nwill never be paused and single-subscription streams in the group will never\nbe canceled. <strong>Note that single-subscription streams in a broadcast group\nmay drop events if a listener is added and later removed.<\/strong> Broadcast\nstreams in the group will be canceled once <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> has no listeners, and\nwill be listened to again once <a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> has listeners.<\/p>\n<p><a href=\"package-async_async\/StreamGroup\/stream.html\">stream<\/a> won't close until <a href=\"package-async_async\/StreamGroup\/close.html\">close<\/a> is called on the group <em>and<\/em> every stream\nin the group closes.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StreamGroup"
}