{
    "desc": "<p>The color and geometry <code>TextThemes<\/code> for Material apps.<\/p>\n<p>The text themes provided by the overall <a href=\"material\/Theme-class.html\">Theme<\/a>, like\n<a href=\"material\/ThemeData\/textTheme.html\">ThemeData.textTheme<\/a>, are based on the current locale's\n<a href=\"material\/MaterialLocalizations\/scriptCategory.html\">MaterialLocalizations.scriptCategory<\/a> and are created\nby merging a color text theme, <a href=\"material\/Typography\/black.html\">black<\/a> or <a href=\"material\/Typography\/white.html\">white<\/a>\nand a geometry text theme, one of <a href=\"material\/Typography\/englishLike.html\">englishLike<\/a>, <a href=\"material\/Typography\/dense.html\">dense<\/a>,\nor <a href=\"material\/Typography\/tall.html\">tall<\/a>, depending on the locale.<\/p>\n<p>To lookup a localized text theme use\n<code>Theme.of(context).textTheme<\/code> or\n<code>Theme.of(context).primaryTextTheme<\/code> or\n<code>Theme.of(context).accentTextTheme<\/code>.<\/p>\n<p>The color text themes are <a href=\"material\/Typography\/blackMountainView-constant.html\">blackMountainView<\/a>,\n<a href=\"material\/Typography\/whiteMountainView-constant.html\">whiteMountainView<\/a>, and <a href=\"material\/Typography\/blackCupertino-constant.html\">blackCupertino<\/a> and <a href=\"material\/Typography\/whiteCupertino-constant.html\">whiteCupertino<\/a>. The\nMountain View theme <code>TextStyles<\/code> are based on the Roboto fonts and the\nCupertino themes are based on the San Francisco fonts.<\/p>\n<p>Two sets of geometry themes are provided: 2014 and 2018. The 2014 themes\ncorrespond to the original version of the Material Design spec and are\nthe defaults. The 2018 themes correspond the second iteration of the\nspecification and feature different font sizes, font weights, and\nletter spacing values.<\/p>\n<p>By default, <a href=\"material\/ThemeData\/typography.html\">ThemeData.typography<\/a> is\n<code>Typography(platform: platform)<\/code> which uses <a href=\"material\/Typography\/englishLike2014-constant.html\">englishLike2014<\/a>,\n<a href=\"material\/Typography\/dense2014-constant.html\">dense2014<\/a> and <a href=\"material\/Typography\/tall2014-constant.html\">tall2014<\/a>. To use the 2018 text theme\ngeometries, specify a typography value:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Typography(\n  platorm: platform,\n  englishLike: Typography.englishLike2018,\n  dense: Typography.dense2018,\n  tall: Typography.tall2018,\n)\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ThemeData\/typography.html\">ThemeData.typography<\/a>, which can be used to configure the\ntext themes used to create <a href=\"material\/ThemeData\/textTheme.html\">ThemeData.textTheme<\/a>,\n<a href=\"material\/ThemeData\/primaryTextTheme.html\">ThemeData.primaryTextTheme<\/a>, <a href=\"material\/ThemeData\/accentTextTheme.html\">ThemeData.accentTextTheme<\/a>.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/typography\/\">material.io\/design\/typography\/<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/Typography-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Typography",
    "shortname": "Typography",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a typography instance.<\/p>\n<p>If <code>platform<\/code> is <a href=\"foundation\/TargetPlatform-class.html\">TargetPlatform.iOS<\/a>, the default values for <code>black<\/code> and\n<code>white<\/code> are <a href=\"material\/Typography\/blackCupertino-constant.html\">blackCupertino<\/a> and <a href=\"material\/Typography\/whiteCupertino-constant.html\">whiteCupertino<\/a> respectively. Otherwise\nthey are <a href=\"material\/Typography\/blackMountainView-constant.html\">blackMountainView<\/a> and <code>whiteMoutainView<\/code>. If <code>platform<\/code> is\nnull then both <code>black<\/code> and <code>white<\/code> must be specified.<\/p>\n<p>The default values for <code>englishLike<\/code>, <code>dense<\/code>, and <code>tall<\/code> are\n<a href=\"material\/Typography\/englishLike2014-constant.html\">englishLike2014<\/a>, <a href=\"material\/Typography\/dense2014-constant.html\">dense2014<\/a>, and <a href=\"material\/Typography\/tall2014-constant.html\">tall2014<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Typography({\n  TargetPlatform platform = TargetPlatform.android,\n  TextTheme black,\n  TextTheme white,\n  TextTheme englishLike,\n  TextTheme dense,\n  TextTheme tall,\n}) {\n  assert(platform != null || (black != null &amp;&amp; white != null));\n  switch (platform) {\n    case TargetPlatform.iOS:\n      black ??= blackCupertino;\n      white ??= whiteCupertino;\n      break;\n    case TargetPlatform.android:\n    case TargetPlatform.fuchsia:\n      black ??= blackMountainView;\n      white ??= whiteMountainView;\n  }\n  englishLike ??= englishLike2014;\n  dense ??= dense2014;\n  tall ??= tall2014;\n  return Typography._(black, white, englishLike, dense, tall);\n}<\/code><\/pre>\n    ",
            "href": "material\/Typography\/Typography.html",
            "isDeprecated": false,
            "type": "",
            "name": "Typography",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.Typography",
            "params": [
                {
                    "name": "black",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "dense",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "englishLike",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "platform",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.TargetPlatform"
                },
                {
                    "name": "tall",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                },
                {
                    "name": "white",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.TextTheme"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this <a href=\"material\/Typography-class.html\">Typography<\/a> with the given fields\nreplaced by the non-null parameter values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Typography copyWith({\n  TextTheme black,\n  TextTheme white,\n  TextTheme englishLike,\n  TextTheme dense,\n  TextTheme tall,\n}) {\n  return Typography(\n    black: black ?? this.black,\n    white: white ?? this.white,\n    englishLike: englishLike ?? this.englishLike,\n    dense: dense ?? this.dense,\n    tall: tall ?? this.tall,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Typography\/copyWith.html",
            "isDeprecated": false,
            "type": "material.Typography",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Typography",
            "params": [
                {
                    "name": "black",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "dense",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "englishLike",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "tall",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                },
                {
                    "name": "white",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.TextTheme"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/Typography\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final Typography defaultTypography = Typography();\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('black', black, defaultValue: defaultTypography.black));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('white', white, defaultValue: defaultTypography.white));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('englishLike', englishLike, defaultValue: defaultTypography.englishLike));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('dense', dense, defaultValue: defaultTypography.dense));\n  properties.add(DiagnosticsProperty&lt;TextTheme&gt;('tall', tall, defaultValue: defaultTypography.tall));\n}<\/code><\/pre>\n    ",
            "href": "material\/Typography\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Typography",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Returns one of <a href=\"material\/Typography\/englishLike.html\">englishLike<\/a>, <a href=\"material\/Typography\/dense.html\">dense<\/a>, or <a href=\"material\/Typography\/tall.html\">tall<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextTheme geometryThemeFor(ScriptCategory category) {\n  assert(category != null);\n  switch (category) {\n    case ScriptCategory.englishLike:\n      return englishLike;\n    case ScriptCategory.dense:\n      return dense;\n    case ScriptCategory.tall:\n      return tall;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "material\/Typography\/geometryThemeFor.html",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "name": "geometryThemeFor",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Typography",
            "params": [
                {
                    "name": "category",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ScriptCategory"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two <a href=\"material\/Typography-class.html\">Typography<\/a> objects.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Typography lerp(Typography a, Typography b, double t) {\n  return Typography(\n    black: TextTheme.lerp(a.black, b.black, t),\n    white: TextTheme.lerp(a.white, b.white, t),\n    englishLike: TextTheme.lerp(a.englishLike, b.englishLike, t),\n    dense: TextTheme.lerp(a.dense, b.dense, t),\n    tall: TextTheme.lerp(a.tall, b.tall, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/Typography\/lerp.html",
            "isDeprecated": false,
            "type": "material.Typography",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Typography",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.Typography"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.Typography"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>A material design text theme with dark glyphs.<\/p>\n<p>This <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> should provide color but not geometry (font size,\nweight, etc). A text theme's geometry depends on the locale. To look\nup a localized <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>, use the overall <a href=\"material\/Theme-class.html\">Theme<\/a>, for example:\n<code>Theme.of(context).textTheme<\/code>.<\/p>\n<p>The <a href=\"material\/Typography\/englishLike.html\">englishLike<\/a>, <a href=\"material\/Typography\/dense.html\">dense<\/a>, and <a href=\"material\/Typography\/tall.html\">tall<\/a> text theme's provide locale-specific\ngeometry.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme black\n\n<\/code><\/pre>\n        ",
            "href": "material\/Typography\/black.html",
            "name": "black",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Typography",
            "params": []
        },
        {
            "desc": "<p>Defines text geometry for dense scripts, such as Chinese, Japanese\nand Korean.<\/p>\n<p>This text theme is merged with either <a href=\"material\/Typography\/black.html\">black<\/a> or <a href=\"material\/Typography\/white.html\">white<\/a>, depending\non the overall <a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a>, when the current locale's\n<a href=\"material\/MaterialLocalizations\/scriptCategory.html\">MaterialLocalizations.scriptCategory<\/a> is <a href=\"material\/Typography\/dense.html\">ScriptCategory.dense<\/a>.<\/p>\n<p>To look up a localized <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>, use the the overall <a href=\"material\/Theme-class.html\">Theme<\/a>, for\nexample: <code>Theme.of(context).textTheme<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme dense\n\n<\/code><\/pre>\n        ",
            "href": "material\/Typography\/dense.html",
            "name": "dense",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Typography",
            "params": []
        },
        {
            "desc": "<p>Defines text geometry for <a href=\"material\/Typography\/englishLike.html\">ScriptCategory.englishLike<\/a> scripts, such as\nEnglish, French, Russian, etc.<\/p>\n<p>This text theme is merged with either <a href=\"material\/Typography\/black.html\">black<\/a> or <a href=\"material\/Typography\/white.html\">white<\/a>, depending\non the overall <a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a>, when the current locale's\n<a href=\"material\/MaterialLocalizations\/scriptCategory.html\">MaterialLocalizations.scriptCategory<\/a> is <a href=\"material\/Typography\/englishLike.html\">ScriptCategory.englishLike<\/a>.<\/p>\n<p>To look up a localized <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>, use the the overall <a href=\"material\/Theme-class.html\">Theme<\/a>, for\nexample: <code>Theme.of(context).textTheme<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme englishLike\n\n<\/code><\/pre>\n        ",
            "href": "material\/Typography\/englishLike.html",
            "name": "englishLike",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Typography",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/Typography\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/Typography\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/Typography\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/Typography\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/Typography\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/Typography\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    black,\n    white,\n    englishLike,\n    dense,\n    tall,\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/Typography\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Typography",
            "params": []
        },
        {
            "desc": "<p>Defines text geometry for tall scripts, such as Farsi, Hindi, and Thai.<\/p>\n<p>This text theme is merged with either <a href=\"material\/Typography\/black.html\">black<\/a> or <a href=\"material\/Typography\/white.html\">white<\/a>, depending\non the overall <a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a>, when the current locale's\n<a href=\"material\/MaterialLocalizations\/scriptCategory.html\">MaterialLocalizations.scriptCategory<\/a> is <a href=\"material\/Typography\/tall.html\">ScriptCategory.tall<\/a>.<\/p>\n<p>To look up a localized <a href=\"material\/TextTheme-class.html\">TextTheme<\/a>, use the the overall <a href=\"material\/Theme-class.html\">Theme<\/a>, for\nexample: <code>Theme.of(context).textTheme<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme tall\n\n<\/code><\/pre>\n        ",
            "href": "material\/Typography\/tall.html",
            "name": "tall",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Typography",
            "params": []
        },
        {
            "desc": "<p>A material design text theme with light glyphs.<\/p>\n<p>This <a href=\"material\/TextTheme-class.html\">TextTheme<\/a> provides color but not geometry (font size, weight, etc).\nA text theme's geometry depends on the locale. To look up a localized\n<a href=\"material\/TextTheme-class.html\">TextTheme<\/a>, use the overall <a href=\"material\/Theme-class.html\">Theme<\/a>, for example:\n<code>Theme.of(context).textTheme<\/code>.<\/p>\n<p>The <a href=\"material\/Typography\/englishLike.html\">englishLike<\/a>, <a href=\"material\/Typography\/dense.html\">dense<\/a>, and <a href=\"material\/Typography\/tall.html\">tall<\/a> text theme's provide locale-specific\ngeometry.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextTheme white\n\n<\/code><\/pre>\n        ",
            "href": "material\/Typography\/white.html",
            "name": "white",
            "isDeprecated": false,
            "type": "material.TextTheme",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.Typography",
            "params": []
        }
    ]
}