{
    "desc": "<p>A side of a border of a box.<\/p>\n<p>A <a href=\"painting\/Border-class.html\">Border<\/a> consists of four <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects: <a href=\"painting\/Border\/top.html\">Border.top<\/a>,\n<a href=\"painting\/Border\/left.html\">Border.left<\/a>, <a href=\"painting\/Border\/right.html\">Border.right<\/a>, and <a href=\"painting\/Border\/bottom.html\">Border.bottom<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample shows how <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects can be used in a <a href=\"widgets\/Container-class.html\">Container<\/a>, via\na <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> and a <a href=\"painting\/Border-class.html\">Border<\/a>, to decorate some <a href=\"widgets\/Text-class.html\">Text<\/a>. In this example,\nthe text has a thick bar above it that is light blue, and a thick bar below\nit that is a darker shade of blue.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  padding: EdgeInsets.all(8.0),\n  decoration: BoxDecoration(\n    border: Border(\n      top: BorderSide(width: 16.0, color: Colors.lightBlue.shade50),\n      bottom: BorderSide(width: 16.0, color: Colors.lightBlue.shade900),\n    ),\n  ),\n  child: Text('Flutter in the sky', textAlign: TextAlign.center),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which uses <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects to represent its sides.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which optionally takes a <a href=\"painting\/Border-class.html\">Border<\/a> object.<\/li>\n<li>\n<a href=\"rendering\/TableBorder-class.html\">TableBorder<\/a>, which is similar to <a href=\"painting\/Border-class.html\">Border<\/a> but has two more sides\n(<a href=\"rendering\/TableBorder\/horizontalInside.html\">TableBorder.horizontalInside<\/a> and <a href=\"rendering\/TableBorder\/verticalInside.html\">TableBorder.verticalInside<\/a>), both\nof which are also <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/BorderSide-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "painting",
    "name": "painting.BorderSide",
    "shortname": "BorderSide",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates the side of a border.<\/p>\n<p>By default, the border is 1.0 logical pixels wide and solid black.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderSide({\n  this.color = const Color(0xFF000000),\n  this.width = 1.0,\n  this.style = BorderStyle.solid,\n}) : assert(color != null),\n     assert(width != null),\n     assert(width &gt;= 0.0),\n     assert(style != null);<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/BorderSide.html",
            "isDeprecated": false,
            "type": "",
            "name": "BorderSide",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": [
                {
                    "name": "color",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "style",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BorderStyle"
                },
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Whether the two given <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>s can be merged using <a href=\"painting\/BorderSide\/merge.html\">new\nBorderSide.merge<\/a>.<\/p>\n<p>Two sides can be merged if one or both are zero-width with\n<a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>, or if they both have the same color and style.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool canMerge(BorderSide a, BorderSide b) {\n  assert(a != null);\n  assert(b != null);\n  if ((a.style == BorderStyle.none &amp;&amp; a.width == 0.0) ||\n      (b.style == BorderStyle.none &amp;&amp; b.width == 0.0))\n    return true;\n  return a.style == b.style\n      &amp;&amp; a.color == b.color;\n}<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/canMerge.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "canMerge",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderSide"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this border but with the given fields replaced with the new values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide copyWith({\n  Color color,\n  double width,\n  BorderStyle style,\n}) {\n  assert(width == null || width &gt;= 0.0);\n  return BorderSide(\n    color: color ?? this.color,\n    width: width ?? this.width,\n    style: style ?? this.style,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/copyWith.html",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": [
                {
                    "name": "color",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "style",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderStyle"
                },
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two border sides.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderSide lerp(BorderSide a, BorderSide b, double t) {\n  assert(a != null);\n  assert(b != null);\n  assert(t != null);\n  if (t == 0.0)\n    return a;\n  if (t == 1.0)\n    return b;\n  final double width = ui.lerpDouble(a.width, b.width, t);\n  if (width &lt; 0.0)\n    return BorderSide.none;\n  if (a.style == b.style) {\n    return BorderSide(\n      color: Color.lerp(a.color, b.color, t),\n      width: width,\n      style: a.style, \/\/ == b.style\n    );\n  }\n  Color colorA, colorB;\n  switch (a.style) {\n    case BorderStyle.solid:\n      colorA = a.color;\n      break;\n    case BorderStyle.none:\n      colorA = a.color.withAlpha(0x00);\n      break;\n  }\n  switch (b.style) {\n    case BorderStyle.solid:\n      colorB = b.color;\n      break;\n    case BorderStyle.none:\n      colorB = b.color.withAlpha(0x00);\n      break;\n  }\n  return BorderSide(\n    color: Color.lerp(colorA, colorB, t),\n    width: width,\n    style: BorderStyle.solid,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/lerp.html",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> that represents the addition of the two given\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>s.<\/p>\n<p>It is only valid to call this if <a href=\"painting\/BorderSide\/canMerge.html\">canMerge<\/a> returns true for the two\nsides.<\/p>\n<p>If one of the sides is zero-width with <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>, then the other\nside is return as-is. If both of the sides are zero-width with\n<a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>, then <code>BorderSide.zero<\/code> is returned.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderSide merge(BorderSide a, BorderSide b) {\n  assert(a != null);\n  assert(b != null);\n  assert(canMerge(a, b));\n  final bool aIsNone = a.style == BorderStyle.none &amp;&amp; a.width == 0.0;\n  final bool bIsNone = b.style == BorderStyle.none &amp;&amp; b.width == 0.0;\n  if (aIsNone &amp;&amp; bIsNone)\n    return BorderSide.none;\n  if (aIsNone)\n    return b;\n  if (bIsNone)\n    return a;\n  assert(a.color == b.color);\n  assert(a.style == b.style);\n  return BorderSide(\n    color: a.color, \/\/ == b.color\n    width: a.width + b.width,\n    style: a.style, \/\/ == b.style\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/merge.html",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "name": "merge",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderSide"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.BorderSide"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this border side description but with the width scaled\nby the factor <code>t<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are treated like zero.<\/p>\n<p>Since a zero width is normally painted as a hairline width rather than no\nborder at all, the zero factor is special-cased to instead change the\nstyle no <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide scale(double t) {\n  assert(t != null);\n  return BorderSide(\n    color: color,\n    width: math.max(0.0, width * t),\n    style: t &lt;= 0.0 ? BorderStyle.none : style,\n  );\n}<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/scale.html",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "name": "scale",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": [
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Create a <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object that, if used to stroke a line, will draw the line\nin this border's style.<\/p>\n<p>Not all borders use this method to paint their border sides. For example,\nnon-uniform rectangular <a href=\"painting\/Border-class.html\">Border<\/a>s have beveled edges and so paint their\nborder sides as filled shapes rather than using a stroke.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Paint toPaint() {\n  switch (style) {\n    case BorderStyle.solid:\n      return Paint()\n        ..color = color\n        ..strokeWidth = width\n        ..style = PaintingStyle.stroke;\n    case BorderStyle.none:\n      return Paint()\n        ..color = const Color(0x00000000)\n        ..strokeWidth = 0.0\n        ..style = PaintingStyle.stroke;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/toPaint.html",
            "isDeprecated": false,
            "type": "dart:ui.Paint",
            "name": "toPaint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($color, ${width.toStringAsFixed(1)}, $style)';<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.BorderSide",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The color of this side of the border.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "painting\/BorderSide\/color.html",
            "name": "color",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.BorderSide",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BorderSide\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(color, width, style);<\/code><\/pre>\n        ",
            "href": "painting\/BorderSide\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.BorderSide",
            "params": []
        },
        {
            "desc": "<p>A hairline black border that is not rendered.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BorderSide none = BorderSide(width: 0.0, style: BorderStyle.none)\n\n<\/code><\/pre>\n    ",
            "href": "painting\/BorderSide\/none-constant.html",
            "name": "none",
            "isDeprecated": false,
            "type": "painting.BorderSide",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "painting.BorderSide",
            "params": []
        },
        {
            "desc": "<p>The style of this side of the border.<\/p>\n<p>To omit a side, set <a href=\"painting\/BorderSide\/style.html\">style<\/a> to <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>. This skips\npainting the border, but the border still has a <a href=\"painting\/BorderSide\/width.html\">width<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderStyle style\n\n<\/code><\/pre>\n        ",
            "href": "painting\/BorderSide\/style.html",
            "name": "style",
            "isDeprecated": false,
            "type": "painting.BorderStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.BorderSide",
            "params": []
        },
        {
            "desc": "<p>The width of this side of the border, in logical pixels. A\nzero-width border is a hairline border. To omit the border\nentirely, set the <a href=\"painting\/BorderSide\/style.html\">style<\/a> to <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
            "href": "painting\/BorderSide\/width.html",
            "name": "width",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.BorderSide",
            "params": []
        }
    ]
}