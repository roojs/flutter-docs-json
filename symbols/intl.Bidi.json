{
    "desc": "<p>This provides utility methods for working with bidirectional text. All\nof the methods are static, and are organized into a class primarily to\ngroup them together for documentation and discoverability.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "intl\/Bidi-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "intl",
    "name": "intl.Bidi",
    "shortname": "Bidi",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "intl\/Bidi\/Bidi.html",
            "isDeprecated": false,
            "type": "",
            "name": "Bidi",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": []
        },
        {
            "desc": "<p>Check the estimated directionality of <code>str<\/code>, return true if the piece of\ntext should be laid out in RTL direction. If <code>isHtml<\/code> is true, the string\nis HTML or HTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool detectRtlDirectionality(String str, {bool isHtml: false}) =&gt;\n    estimateDirectionOfText(str, isHtml: isHtml) == TextDirection.RTL;<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/detectRtlDirectionality.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "detectRtlDirectionality",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "str",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Determines if the exit directionality (ie, the last strongly-directional\ncharacter in <code>text<\/code> is LTR. If <code>isHtml<\/code> is true, the text is HTML or\nHTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool endsWithLtr(String text, [isHtml = false]) {\n  return new RegExp('[$_LTR_CHARS][^$_RTL_CHARS]*\\$')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/endsWithLtr.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "endsWithLtr",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Determines if the exit directionality (ie, the last strongly-directional\ncharacter in <code>text<\/code> is RTL. If <code>isHtml<\/code> is true, the text is HTML or\nHTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool endsWithRtl(String text, [isHtml = false]) {\n  return new RegExp('[$_RTL_CHARS][^$_LTR_CHARS]*\\$')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/endsWithRtl.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "endsWithRtl",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Enforce the <code>html<\/code> snippet in LTR directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must\nenclose the whole piece. If the tag already has a direction specified,\nthis new one will override existing one in behavior (tested on FF and IE).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceLtrInHtml(String html) =&gt;\n    _enforceInHtmlHelper(html, 'ltr');<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/enforceLtrInHtml.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "enforceLtrInHtml",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "html",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Enforce LTR on both end of the given <code>text<\/code> using unicode BiDi formatting\ncharacters LRE and PDF.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceLtrInText(String text) =&gt; '$LRE$text$PDF';<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/enforceLtrInText.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "enforceLtrInText",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Enforce the <code>html<\/code> snippet in RTL directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must\nenclose the whole piece. If the tag already has a direction specified,\nthis new one will override existing one in behavior (should work on\nChrome, FF, and IE since this was ported directly from the Closure\nversion).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceRtlInHtml(String html) =&gt;\n    _enforceInHtmlHelper(html, 'rtl');<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/enforceRtlInHtml.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "enforceRtlInHtml",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "html",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Enforce RTL on both end of the given <code>text<\/code> using unicode BiDi formatting\ncharacters RLE and PDF.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String enforceRtlInText(String text) =&gt; '$RLE$text$PDF';<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/enforceRtlInText.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "enforceRtlInText",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Estimates the directionality of <code>text<\/code> using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n<code>isHtml<\/code> is true if <code>text<\/code> HTML or HTML-escaped.<\/p>\n<p>If the number of RTL words is above a certain percentage of the total\nnumber of strongly directional words, returns RTL.\nOtherwise, if any words are strongly or weakly LTR, returns LTR.\nOtherwise, returns UNKNOWN, which is used to mean <code>neutral<\/code>.\nNumbers and URLs are counted as weakly LTR.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextDirection estimateDirectionOfText(String text,\n    {bool isHtml: false}) {\n  text = isHtml ? stripHtmlIfNeeded(text) : text;\n  var rtlCount = 0;\n  var total = 0;\n  var hasWeaklyLtr = false;\n  \/\/ Split a string into 'words' for directionality estimation based on\n  \/\/ relative word counts.\n  for (String token in text.split(new RegExp(r'\\s+'))) {\n    if (startsWithRtl(token)) {\n      rtlCount++;\n      total++;\n    } else if (new RegExp(r'^http:\/\/').hasMatch(token)) {\n      \/\/ Checked if token looks like something that must always be LTR even in\n      \/\/ RTL text, such as a URL.\n      hasWeaklyLtr = true;\n    } else if (hasAnyLtr(token)) {\n      total++;\n    } else if (new RegExp(r'\\d').hasMatch(token)) {\n      \/\/ Checked if token contains any numerals.\n      hasWeaklyLtr = true;\n    }\n  }\n\n  if (total == 0) {\n    return hasWeaklyLtr ? TextDirection.LTR : TextDirection.UNKNOWN;\n  } else if (rtlCount &gt; _RTL_DETECTION_THRESHOLD * total) {\n    return TextDirection.RTL;\n  } else {\n    return TextDirection.LTR;\n  }\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/estimateDirectionOfText.html",
            "isDeprecated": false,
            "type": "intl.TextDirection",
            "name": "estimateDirectionOfText",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Apply bracket guard to <code>str<\/code> using html span tag. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nIf <code>isRtlContext<\/code> is true, then we explicitly want to wrap in a span of\nRTL directionality, regardless of the estimated directionality.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String guardBracketInHtml(String str, [bool isRtlContext]) {\n  var useRtl = isRtlContext == null ? hasAnyRtl(str) : isRtlContext;\n  RegExp matchingBrackets =\n      new RegExp(r'(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(&amp;lt;.*?(&amp;gt;)+)');\n  return _guardBracketHelper(str, matchingBrackets,\n      '&lt;span dir=${useRtl? \"rtl\" : \"ltr\"}&gt;', '&lt;\/span&gt;');\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/guardBracketInHtml.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "guardBracketInHtml",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isRtlContext",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "str",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Apply bracket guard to <code>str<\/code> using LRM and RLM. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nThis version works for both plain text and html, but in some cases is not\nas good as guardBracketInHtml. If <code>isRtlContext<\/code> is true, then we\nexplicitly want to wrap in a span of RTL directionality, regardless of the\nestimated directionality.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String guardBracketInText(String str, [bool isRtlContext]) {\n  var useRtl = isRtlContext == null ? hasAnyRtl(str) : isRtlContext;\n  var mark = useRtl ? RLM : LRM;\n  return _guardBracketHelper(str,\n      new RegExp(r'(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(&lt;.*?&gt;+)'), mark, mark);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/guardBracketInText.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "guardBracketInText",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isRtlContext",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "str",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Determines if the given <code>text<\/code> has any LTR characters in it.\nIf <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool hasAnyLtr(String text, [isHtml = false]) {\n  return new RegExp(r'[' '$_LTR_CHARS' r']')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/hasAnyLtr.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hasAnyLtr",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Determines if the given <code>text<\/code> has any RTL characters in it.\nIf <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool hasAnyRtl(String text, [isHtml = false]) {\n  return new RegExp(r'[' '$_RTL_CHARS' r']')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/hasAnyRtl.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hasAnyRtl",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Check if a BCP 47 \/ III <code>languageString<\/code> indicates an RTL language.<\/p>\n<p>i.e. either:<\/p>\n<ul>\n<li>a language code explicitly specifying one of the right-to-left scripts,\ne.g. \"az-Arab\", or<\/li>\n<li>a language code specifying one of the languages normally written in a\nright-to-left script, e.g. \"fa\" (Farsi), except ones explicitly\nspecifying Latin or Cyrillic script (which are the usual LTR\nalternatives).<\/li>\n<\/ul>\n<p>The list of right-to-left scripts appears in the 100-199 range in\n<a href=\"http:\/\/www.unicode.org\/iso15924\/iso15924-num.html\">http:\/\/www.unicode.org\/iso15924\/iso15924-num.html<\/a>, of which Arabic and\nHebrew are by far the most widely used. We also recognize Thaana, N'Ko,\nand Tifinagh, which also have significant modern usage. The rest (Syriac,\nSamaritan, Mandaic, etc.) seem to have extremely limited or no modern\nusage and are not recognized.  The languages usually written in a\nright-to-left script are taken as those with Suppress-Script:\nHebr|Arab|Thaa|Nkoo|Tfng in\n<a href=\"http:\/\/www.iana.org\/assignments\/language-subtag-registry\">http:\/\/www.iana.org\/assignments\/language-subtag-registry<\/a>, as well as\nSindhi (sd) and Uyghur (ug).  The presence of other subtags of the\nlanguage code, e.g. regions like EG (Egypt), is ignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isRtlLanguage([String languageString]) {\n  var language = languageString ?? Intl.getCurrentLocale();\n  if (_lastLocaleCheckedForRtl != language) {\n    _lastLocaleCheckedForRtl = language;\n    _lastRtlCheck = _rtlLocaleRegex.hasMatch(language);\n  }\n  return _lastRtlCheck;\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/isRtlLanguage.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isRtlLanguage",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "languageString",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Replace the double and single quote directly after a Hebrew character in\n<code>str<\/code> with GERESH and GERSHAYIM. This is most likely the user's intention.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String normalizeHebrewQuote(String str) {\n  StringBuffer buf = new StringBuffer();\n  if (str.length &gt; 0) {\n    buf.write(str.substring(0, 1));\n  }\n  \/\/ Start at 1 because we're looking for the patterns [\\u0591-\\u05f2])\" or\n  \/\/ [\\u0591-\\u05f2]'.\n  for (int i = 1; i &lt; str.length; i++) {\n    if (str.substring(i, i + 1) == '\"' &amp;&amp;\n        new RegExp('[\\u0591-\\u05f2]').hasMatch(str.substring(i - 1, i))) {\n      buf.write('\\u05f4');\n    } else if (str.substring(i, i + 1) == \"'\" &amp;&amp;\n        new RegExp('[\\u0591-\\u05f2]').hasMatch(str.substring(i - 1, i))) {\n      buf.write('\\u05f3');\n    } else {\n      buf.write(str.substring(i, i + 1));\n    }\n  }\n  return buf.toString();\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/normalizeHebrewQuote.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "normalizeHebrewQuote",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "str",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Determines if the first character in <code>text<\/code> with strong directionality is\nLTR. If <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool startsWithLtr(String text, [isHtml = false]) {\n  return new RegExp('^[^$_RTL_CHARS]*[$_LTR_CHARS]')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/startsWithLtr.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "startsWithLtr",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Determines if the first character in <code>text<\/code> with strong directionality is\nRTL. If <code>isHtml<\/code> is true, the text is HTML or HTML-escaped.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool startsWithRtl(String text, [isHtml = false]) {\n  return new RegExp('^[^$_LTR_CHARS]*[$_RTL_CHARS]')\n      .hasMatch(isHtml ? stripHtmlIfNeeded(text) : text);\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/startsWithRtl.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "startsWithRtl",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "isHtml",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns the input <code>text<\/code> with spaces instead of HTML tags or HTML escapes,\nwhich is helpful for text directionality estimation.\nNote: This function should not be used in other contexts.\nIt does not deal well with many things: comments, script,\nelements, style elements, dir attribute,<code>&gt;<\/code> in quoted attribute values,\netc. But it does handle well enough the most common use cases.\nSince the worst that can happen as a result of these shortcomings is that\nthe wrong directionality will be estimated, we have not invested in\nimproving this.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String stripHtmlIfNeeded(String text) {\n  \/\/ The regular expression is simplified for an HTML tag (opening or\n  \/\/ closing) or an HTML escape. We might want to skip over such expressions\n  \/\/ when estimating the text directionality.\n  return text.replaceAll(new RegExp(r'&lt;[^&gt;]*&gt;|&amp;[^;]+;'), ' ');\n}<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/stripHtmlIfNeeded.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "stripHtmlIfNeeded",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "intl.Bidi",
            "params": [
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Unicode \"Left-To-Right Embedding\" (LRE) character.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LRE = '\\u202A'\n\n<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/LRE-constant.html",
            "name": "LRE",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "intl.Bidi",
            "params": []
        },
        {
            "desc": "<p>Unicode \"Left-To-Right Mark\" (LRM) character.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LRM = '\\u200E'\n\n<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/LRM-constant.html",
            "name": "LRM",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "intl.Bidi",
            "params": []
        },
        {
            "desc": "<p>Unicode \"Pop Directional Formatting\" (PDF) character.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PDF = '\\u202C'\n\n<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/PDF-constant.html",
            "name": "PDF",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "intl.Bidi",
            "params": []
        },
        {
            "desc": "<p>Unicode \"Right-To-Left Embedding\" (RLE) character.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RLE = '\\u202B'\n\n<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/RLE-constant.html",
            "name": "RLE",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "intl.Bidi",
            "params": []
        },
        {
            "desc": "<p>Unicode \"Right-To-Left Mark\" (RLM) character.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RLM = '\\u200F'\n\n<\/code><\/pre>\n    ",
            "href": "intl\/Bidi\/RLM-constant.html",
            "name": "RLM",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "intl.Bidi",
            "params": []
        }
    ]
}