{
    "desc": "<p>Establishes a scope in which widgets can receive focus.<\/p>\n<p>The focus tree keeps track of which widget is the user's current focus. The\nfocused widget often listens for keyboard events.<\/p>\n<p>A focus scope does not itself receive focus but instead helps remember\nprevious focus states. A scope is currently active when its <a href=\"widgets\/FocusScope\/node.html\">node<\/a> is the\nfirst focus of its parent scope. To activate a <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, either use the\n<a href=\"widgets\/FocusScope\/autofocus.html\">autofocus<\/a> property or explicitly make the <a href=\"widgets\/FocusScope\/node.html\">node<\/a> the first focus in the\nparent scope:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">FocusScope.of(context).setFirstFocus(node);\n<\/code><\/pre>\n<p>If a <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a> is removed from the widget tree, then the previously\nfocused node will be focused, but only if the <a href=\"widgets\/FocusScope\/node.html\">node<\/a> is the same <a href=\"widgets\/FocusScope\/node.html\">node<\/a>\nobject as in the previous frame. To assure this, you can use a GlobalKey to\nkeep the <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a> widget from being rebuilt from one frame to the next,\nor pass in the <a href=\"widgets\/FocusScope\/node.html\">node<\/a> from a parent that is not rebuilt. If there is no next\nsibling, then the parent scope node will be focused.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a>, which is the associated node in the focus tree.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, which is a leaf node in the focus tree that can receive\nfocus.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/FocusScope-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.FocusScope",
    "shortname": "FocusScope",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a scope in which widgets can receive focus.<\/p>\n<p>The <code>node<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FocusScope({\n  Key key,\n  @required this.node,\n  this.autofocus = false,\n  this.child,\n}) : assert(node != null),\n     assert(autofocus != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScope\/FocusScope.html",
            "isDeprecated": false,
            "type": "",
            "name": "FocusScope",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FocusScope",
            "params": [
                {
                    "name": "autofocus",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "node",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.FocusScopeNode"
                }
            ]
        },
        {
            "desc": "<p>A list of the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a>s for each <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a> ancestor of\nthe given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>. The first element of the list is the\nnearest ancestor's <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a>.<\/p>\n<p>The returned list does not include the <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>'s <code>rootScope<\/code>.\nOnly the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a>s that belong to <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a> widgets are\nreturned.<\/p>\n<p>The <code>context<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;FocusScopeNode&gt; ancestorsOf(BuildContext context) {\n  assert(context != null);\n  final List&lt;FocusScopeNode&gt; ancestors = &lt;FocusScopeNode&gt;[];\n  while (true) {\n    context = context.ancestorInheritedElementForWidgetOfExactType(_FocusScopeMarker);\n    if (context == null)\n      return ancestors;\n    final _FocusScopeMarker scope = context.widget;\n    ancestors.add(scope.node);\n    context.visitAncestorElements((Element parent) {\n      context = parent;\n      return false;\n    });\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScope\/ancestorsOf.html",
            "isDeprecated": false,
            "type": "dart:core.List<widgets.FocusScopeNode>",
            "name": "ancestorsOf",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScope",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/FocusScope\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_FocusScopeState createState() =&gt; _FocusScopeState();<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScope\/createState.html",
            "isDeprecated": false,
            "type": "<_FocusScopeState>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScope",
            "params": []
        },
        {
            "desc": "<p>Returns the <a href=\"widgets\/FocusScope\/node.html\">node<\/a> of the <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a> that most tightly encloses the\ngiven <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The <code>context<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FocusScopeNode of(BuildContext context) {\n  assert(context != null);\n  final _FocusScopeMarker scope = context.inheritFromWidgetOfExactType(_FocusScopeMarker);\n  return scope?.node ?? context.owner.focusManager.rootScope;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScope\/of.html",
            "isDeprecated": false,
            "type": "widgets.FocusScopeNode",
            "name": "of",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScope",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this scope should attempt to become active when first added to\nthe tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autofocus\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FocusScope\/autofocus.html",
            "name": "autofocus",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FocusScope",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FocusScope\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FocusScope",
            "params": []
        },
        {
            "desc": "<p>Controls whether this scope is currently active.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FocusScopeNode node\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FocusScope\/node.html",
            "name": "node",
            "isDeprecated": false,
            "type": "widgets.FocusScopeNode",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FocusScope",
            "params": []
        }
    ]
}