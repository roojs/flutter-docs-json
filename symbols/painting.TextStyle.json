{
    "name": "painting.TextStyle",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TextStyle typedOther = other;\n  return inherit == typedOther.inherit &amp;&amp;\n         color == typedOther.color &amp;&amp;\n         backgroundColor == typedOther.backgroundColor &amp;&amp;\n         fontFamily == typedOther.fontFamily &amp;&amp;\n         fontSize == typedOther.fontSize &amp;&amp;\n         fontWeight == typedOther.fontWeight &amp;&amp;\n         fontStyle == typedOther.fontStyle &amp;&amp;\n         letterSpacing == typedOther.letterSpacing &amp;&amp;\n         wordSpacing == typedOther.wordSpacing &amp;&amp;\n         textBaseline == typedOther.textBaseline &amp;&amp;\n         height == typedOther.height &amp;&amp;\n         locale == typedOther.locale &amp;&amp;\n         foreground == typedOther.foreground &amp;&amp;\n         background == typedOther.background &amp;&amp;\n         decoration == typedOther.decoration &amp;&amp;\n         decorationColor == typedOther.decorationColor &amp;&amp;\n         decorationStyle == typedOther.decorationStyle &amp;&amp;\n         decorationThickness == typedOther.decorationThickness &amp;&amp;\n         listEquals(shadows, typedOther.shadows) &amp;&amp;\n         listEquals(fontFamilyFallback, typedOther.fontFamilyFallback);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextStyle",
            "type": "",
            "desc": "<p>Creates a text style.<\/p>\n<p>The <code>package<\/code> argument must be non-null if the font family is defined in a\npackage. It is combined with the <code>fontFamily<\/code> argument to set the\n<code>fontFamily<\/code> property.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "inherit",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "letterSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wordSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textBaseline",
                    "type": "dart:ui.TextBaseline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "foreground",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "background",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shadows",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ]
                },
                {
                    "name": "decoration",
                    "type": "dart:ui.TextDecoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationStyle",
                    "type": "dart:ui.TextDecorationStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationThickness",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "package",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "painting\/TextStyle\/TextStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextStyle({\n  this.inherit = true,\n  this.color,\n  this.backgroundColor,\n  this.fontSize,\n  this.fontWeight,\n  this.fontStyle,\n  this.letterSpacing,\n  this.wordSpacing,\n  this.textBaseline,\n  this.height,\n  this.locale,\n  this.foreground,\n  this.background,\n  this.shadows,\n  this.decoration,\n  this.decorationColor,\n  this.decorationStyle,\n  this.decorationThickness,\n  this.debugLabel,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  String package,\n}) : fontFamily = package == null ? fontFamily : 'packages\/$package\/$fontFamily',\n     _fontFamilyFallback = fontFamilyFallback,\n     _package = package,\n     assert(inherit != null),\n     assert(color == null || foreground == null, _kColorForegroundWarning),\n     assert(backgroundColor == null || background == null, _kColorBackgroundWarning);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "apply",
            "type": "painting.TextStyle",
            "desc": "<p>Creates a copy of this text style replacing or altering the specified\nproperties.<\/p>\n<p>The non-numeric properties <code>color<\/code>, <code>fontFamily<\/code>, <code>decoration<\/code>,\n<code>decorationColor<\/code> and <code>decorationStyle<\/code> are replaced with the new values.<\/p>\n<p><a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> will be given preference over <code>color<\/code> if it is not null and\n<a href=\"painting\/TextStyle\/background.html\">background<\/a> will be given preference over <code>backgroundColor<\/code> if it is not\nnull.<\/p>\n<p>The numeric properties are multiplied by the given factors and then\nincremented by the given deltas.<\/p>\n<p>For example, <code>style.apply(fontSizeFactor: 2.0, fontSizeDelta: 1.0)<\/code> would\nreturn a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> whose <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a> is <code>style.fontSize * 2.0 + 1.0<\/code>.<\/p>\n<p>For the <a href=\"painting\/TextStyle\/fontWeight.html\">fontWeight<\/a>, the delta is applied to the <a href=\"dart-ui\/FontWeight-class.html\">FontWeight<\/a> enum index\nvalues, so that for instance <code>style.apply(fontWeightDelta: -2)<\/code> when\napplied to a <code>style<\/code> whose <a href=\"painting\/TextStyle\/fontWeight.html\">fontWeight<\/a> is <a href=\"dart-ui\/FontWeight\/w500-constant.html\">FontWeight.w500<\/a> will return a\n<a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> with a <a href=\"dart-ui\/FontWeight\/w300-constant.html\">FontWeight.w300<\/a>.<\/p>\n<p>The numeric arguments must not be null.<\/p>\n<p>If the underlying values are null, then the corresponding factors and\/or\ndeltas must not be specified.<\/p>\n<p>If <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is specified on this object, then applying <code>color<\/code> here\nwill have no effect and if <a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified on this object, then\napplying <code>backgroundColor<\/code> here will have no effect either.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decoration",
                    "type": "dart:ui.TextDecoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationStyle",
                    "type": "dart:ui.TextDecorationStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationThicknessFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationThicknessDelta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "fontSizeFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontSizeDelta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeightDelta",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "letterSpacingFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "letterSpacingDelta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wordSpacingFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wordSpacingDelta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "heightFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "heightDelta",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/apply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle apply({\n  Color color,\n  Color backgroundColor,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n  double decorationThicknessFactor = 1.0,\n  double decorationThicknessDelta = 0.0,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSizeFactor = 1.0,\n  double fontSizeDelta = 0.0,\n  int fontWeightDelta = 0,\n  double letterSpacingFactor = 1.0,\n  double letterSpacingDelta = 0.0,\n  double wordSpacingFactor = 1.0,\n  double wordSpacingDelta = 0.0,\n  double heightFactor = 1.0,\n  double heightDelta = 0.0,\n}) {\n  assert(fontSizeFactor != null);\n  assert(fontSizeDelta != null);\n  assert(fontSize != null || (fontSizeFactor == 1.0 &amp;&amp; fontSizeDelta == 0.0));\n  assert(fontWeightDelta != null);\n  assert(fontWeight != null || fontWeightDelta == 0.0);\n  assert(letterSpacingFactor != null);\n  assert(letterSpacingDelta != null);\n  assert(letterSpacing != null || (letterSpacingFactor == 1.0 &amp;&amp; letterSpacingDelta == 0.0));\n  assert(wordSpacingFactor != null);\n  assert(wordSpacingDelta != null);\n  assert(wordSpacing != null || (wordSpacingFactor == 1.0 &amp;&amp; wordSpacingDelta == 0.0));\n  assert(heightFactor != null);\n  assert(heightDelta != null);\n  assert(heightFactor != null || (heightFactor == 1.0 &amp;&amp; heightDelta == 0.0));\n  assert(decorationThicknessFactor != null);\n  assert(decorationThicknessDelta != null);\n  assert(decorationThickness != null || (decorationThicknessFactor == 1.0 &amp;&amp; decorationThicknessDelta == 0.0));\n\n  String modifiedDebugLabel;\n  assert(() {\n    if (debugLabel != null)\n      modifiedDebugLabel = '($debugLabel).apply';\n    return true;\n  }());\n\n  return TextStyle(\n    inherit: inherit,\n    color: foreground == null ? color ?? this.color : null,\n    backgroundColor: background == null ? backgroundColor ?? this.backgroundColor : null,\n    fontFamily: fontFamily ?? this.fontFamily,\n    fontFamilyFallback: fontFamilyFallback ?? this.fontFamilyFallback,\n    fontSize: fontSize == null ? null : fontSize * fontSizeFactor + fontSizeDelta,\n    fontWeight: fontWeight == null ? null : FontWeight.values[(fontWeight.index + fontWeightDelta).clamp(0, FontWeight.values.length - 1)],\n    fontStyle: fontStyle,\n    letterSpacing: letterSpacing == null ? null : letterSpacing * letterSpacingFactor + letterSpacingDelta,\n    wordSpacing: wordSpacing == null ? null : wordSpacing * wordSpacingFactor + wordSpacingDelta,\n    textBaseline: textBaseline,\n    height: height == null ? null : height * heightFactor + heightDelta,\n    locale: locale,\n    foreground: foreground,\n    background: background,\n    shadows: shadows,\n    decoration: decoration ?? this.decoration,\n    decorationColor: decorationColor ?? this.decorationColor,\n    decorationStyle: decorationStyle ?? this.decorationStyle,\n    decorationThickness: decorationThickness == null ? null : decorationThickness * decorationThicknessFactor + decorationThicknessDelta,\n    debugLabel: modifiedDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "compareTo",
            "type": "painting.RenderComparison",
            "desc": "<p>Describe the difference between this style and another, in terms of how\nmuch damage it will make to the rendering.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/TextStyle\/compareTo.html\">TextSpan.compareTo<\/a>, which does the same thing for entire <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/compareTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderComparison compareTo(TextStyle other) {\n  if (identical(this, other))\n    return RenderComparison.identical;\n  if (inherit != other.inherit ||\n      fontFamily != other.fontFamily ||\n      fontSize != other.fontSize ||\n      fontWeight != other.fontWeight ||\n      fontStyle != other.fontStyle ||\n      letterSpacing != other.letterSpacing ||\n      wordSpacing != other.wordSpacing ||\n      textBaseline != other.textBaseline ||\n      height != other.height ||\n      locale != other.locale ||\n      foreground != other.foreground ||\n      background != other.background ||\n      !listEquals(shadows, other.shadows) ||\n      !listEquals(fontFamilyFallback, other.fontFamilyFallback))\n    return RenderComparison.layout;\n  if (color != other.color ||\n      backgroundColor != other.backgroundColor ||\n      decoration != other.decoration ||\n      decorationColor != other.decorationColor ||\n      decorationStyle != other.decorationStyle ||\n      decorationThickness != other.decorationThickness)\n    return RenderComparison.paint;\n  return RenderComparison.identical;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyWith",
            "type": "painting.TextStyle",
            "desc": "<p>Creates a copy of this text style but with the given fields replaced with\nthe new values.<\/p>\n<p>One of <code>color<\/code> or <code>foreground<\/code> must be null, and if this has <code>foreground<\/code>\nspecified it will be given preference over any color parameter.<\/p>\n<p>One of <code>backgroundColor<\/code> or <code>background<\/code> must be null, and if this has\n<code>background<\/code> specified it will be given preference over any\nbackgroundColor parameter.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "inherit",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "letterSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "wordSpacing",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textBaseline",
                    "type": "dart:ui.TextBaseline",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "foreground",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "background",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "shadows",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ]
                },
                {
                    "name": "decoration",
                    "type": "dart:ui.TextDecoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationStyle",
                    "type": "dart:ui.TextDecorationStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "decorationThickness",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/copyWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle copyWith({\n  bool inherit,\n  Color color,\n  Color backgroundColor,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  double letterSpacing,\n  double wordSpacing,\n  TextBaseline textBaseline,\n  double height,\n  Locale locale,\n  Paint foreground,\n  Paint background,\n  List&lt;ui.Shadow&gt; shadows,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n  double decorationThickness,\n  String debugLabel,\n}) {\n  assert(color == null || foreground == null, _kColorForegroundWarning);\n  assert(backgroundColor == null || background == null, _kColorBackgroundWarning);\n  String newDebugLabel;\n  assert(() {\n    if (this.debugLabel != null)\n      newDebugLabel = debugLabel ?? '(${this.debugLabel}).copyWith';\n    return true;\n  }());\n  return TextStyle(\n    inherit: inherit ?? this.inherit,\n    color: this.foreground == null &amp;&amp; foreground == null ? color ?? this.color : null,\n    backgroundColor: this.background == null &amp;&amp; background == null ? backgroundColor ?? this.backgroundColor : null,\n    fontFamily: fontFamily ?? this.fontFamily,\n    fontFamilyFallback: fontFamilyFallback ?? this.fontFamilyFallback,\n    fontSize: fontSize ?? this.fontSize,\n    fontWeight: fontWeight ?? this.fontWeight,\n    fontStyle: fontStyle ?? this.fontStyle,\n    letterSpacing: letterSpacing ?? this.letterSpacing,\n    wordSpacing: wordSpacing ?? this.wordSpacing,\n    textBaseline: textBaseline ?? this.textBaseline,\n    height: height ?? this.height,\n    locale: locale ?? this.locale,\n    foreground: foreground ?? this.foreground,\n    background: background ?? this.background,\n    shadows: shadows ?? this.shadows,\n    decoration: decoration ?? this.decoration,\n    decorationColor: decorationColor ?? this.decorationColor,\n    decorationStyle: decorationStyle ?? this.decorationStyle,\n    decorationThickness: decorationThickness ?? this.decorationThickness,\n    debugLabel: newDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Adds all properties prefixing property names with the optional <code>prefix<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "prefix",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties, { String prefix = '' }) {\n  super.debugFillProperties(properties);\n  if (debugLabel != null)\n    properties.add(MessageProperty('${prefix}debugLabel', debugLabel));\n  final List&lt;DiagnosticsNode&gt; styles = &lt;DiagnosticsNode&gt;[];\n  styles.add(DiagnosticsProperty&lt;Color&gt;('${prefix}color', color, defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Color&gt;('${prefix}backgroundColor', backgroundColor, defaultValue: null));\n  styles.add(StringProperty('${prefix}family', fontFamily, defaultValue: null, quoted: false));\n  styles.add(IterableProperty&lt;String&gt;('${prefix}familyFallback', fontFamilyFallback, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}size', fontSize, defaultValue: null));\n  String weightDescription;\n  if (fontWeight != null) {\n    weightDescription = '${fontWeight.index + 1}00';\n  }\n  \/\/ TODO(jacobr): switch this to use enumProperty which will either cause the\n  \/\/ weight description to change to w600 from 600 or require existing\n  \/\/ enumProperty to handle this special case.\n  styles.add(DiagnosticsProperty&lt;FontWeight&gt;(\n    '${prefix}weight',\n    fontWeight,\n    description: weightDescription,\n    defaultValue: null,\n  ));\n  styles.add(EnumProperty&lt;FontStyle&gt;('${prefix}style', fontStyle, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}letterSpacing', letterSpacing, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}wordSpacing', wordSpacing, defaultValue: null));\n  styles.add(EnumProperty&lt;TextBaseline&gt;('${prefix}baseline', textBaseline, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}height', height, unit: 'x', defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Locale&gt;('${prefix}locale', locale, defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Paint&gt;('${prefix}foreground', foreground, defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Paint&gt;('${prefix}background', background, defaultValue: null));\n  if (decoration != null || decorationColor != null || decorationStyle != null || decorationThickness != null) {\n    final List&lt;String&gt; decorationDescription = &lt;String&gt;[];\n    if (decorationStyle != null)\n      decorationDescription.add(describeEnum(decorationStyle));\n\n    \/\/ Hide decorationColor from the default text view as it is shown in the\n    \/\/ terse decoration summary as well.\n    styles.add(DiagnosticsProperty&lt;Color&gt;('${prefix}decorationColor', decorationColor, defaultValue: null, level: DiagnosticLevel.fine));\n\n    if (decorationColor != null)\n      decorationDescription.add('$decorationColor');\n\n    \/\/ Intentionally collide with the property 'decoration' added below.\n    \/\/ Tools that show hidden properties could choose the first property\n    \/\/ matching the name to disambiguate.\n    styles.add(DiagnosticsProperty&lt;TextDecoration&gt;('${prefix}decoration', decoration, defaultValue: null, level: DiagnosticLevel.hidden));\n    if (decoration != null)\n      decorationDescription.add('$decoration');\n    assert(decorationDescription.isNotEmpty);\n    styles.add(MessageProperty('${prefix}decoration', decorationDescription.join(' ')));\n    styles.add(DoubleProperty('${prefix}decorationThickness', decorationThickness, unit: 'x', defaultValue: null));\n  }\n\n  final bool styleSpecified = styles.any((DiagnosticsNode n) =&gt; !n.isFiltered(DiagnosticLevel.info));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('${prefix}inherit', inherit, level: (!styleSpecified &amp;&amp; inherit) ? DiagnosticLevel.fine : DiagnosticLevel.info));\n  styles.forEach(properties.add);\n\n  if (!styleSpecified)\n    properties.add(FlagProperty('inherit', value: inherit, ifTrue: '$prefix&lt;all styles inherited&gt;', ifFalse: '$prefix&lt;no style specified&gt;'));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "getParagraphStyle",
            "type": "dart:ui.ParagraphStyle",
            "desc": "<p>The style information for paragraphs, encoded for use by <code>dart:ui<\/code>.<\/p>\n<p>The <code>textScaleFactor<\/code> argument must not be null. If omitted, it defaults\nto 1.0. The other arguments may be null. The <code>maxLines<\/code> argument, if\nspecified and non-null, must be greater than zero.<\/p>\n<p>If the font size on this style isn't set, it will default to 14 logical\npixels.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "textAlign",
                    "type": "dart:ui.TextAlign",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textScaleFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ellipsis",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxLines",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "strutStyle",
                    "type": "painting.StrutStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/getParagraphStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ui.ParagraphStyle getParagraphStyle({\n  TextAlign textAlign,\n  TextDirection textDirection,\n  double textScaleFactor = 1.0,\n  String ellipsis,\n  int maxLines,\n  Locale locale,\n  String fontFamily,\n  double fontSize,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  double height,\n  StrutStyle strutStyle,\n}) {\n  assert(textScaleFactor != null);\n  assert(maxLines == null || maxLines &gt; 0);\n  return ui.ParagraphStyle(\n    textAlign: textAlign,\n    textDirection: textDirection,\n    \/\/ Here, we stablish the contents of this TextStyle as the paragraph's default font\n    \/\/ unless an override is passed in.\n    fontWeight: fontWeight ?? this.fontWeight,\n    fontStyle: fontStyle ?? this.fontStyle,\n    fontFamily: fontFamily ?? this.fontFamily,\n    fontSize: (fontSize ?? this.fontSize ?? _defaultFontSize) * textScaleFactor,\n    height: height ?? this.height,\n    strutStyle: strutStyle == null ? null : ui.StrutStyle(\n      fontFamily: strutStyle.fontFamily,\n      fontFamilyFallback: strutStyle.fontFamilyFallback,\n      fontSize: strutStyle.fontSize,\n      height: strutStyle.height,\n      leading: strutStyle.leading,\n      fontWeight: strutStyle.fontWeight,\n      fontStyle: strutStyle.fontStyle,\n      forceStrutHeight: strutStyle.forceStrutHeight,\n    ),\n    maxLines: maxLines,\n    ellipsis: ellipsis,\n    locale: locale,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getTextStyle",
            "type": "dart:ui.TextStyle",
            "desc": "<p>The style information for text runs, encoded for use by <code>dart:ui<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "textScaleFactor",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/getTextStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ui.TextStyle getTextStyle({ double textScaleFactor = 1.0 }) {\n  return ui.TextStyle(\n    color: color,\n    decoration: decoration,\n    decorationColor: decorationColor,\n    decorationStyle: decorationStyle,\n    decorationThickness: decorationThickness,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle,\n    textBaseline: textBaseline,\n    fontFamily: fontFamily,\n    fontFamilyFallback: fontFamilyFallback,\n    fontSize: fontSize == null ? null : fontSize * textScaleFactor,\n    letterSpacing: letterSpacing,\n    wordSpacing: wordSpacing,\n    height: height,\n    locale: locale,\n    foreground: foreground,\n    background: background ?? (backgroundColor != null\n      ? (Paint()..color = backgroundColor)\n      : null\n    ),\n    shadows: shadows,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.TextStyle",
            "desc": "<p>Interpolate between two text styles.<\/p>\n<p>This will not work well if the styles don't set the same fields.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>If <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is specified on either of <code>a<\/code> or <code>b<\/code>, both will be treated\nas if they have a <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> paint (creating a new <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> if necessary\nbased on the <a href=\"painting\/TextStyle\/color.html\">color<\/a> property).<\/p>\n<p>If <a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified on either of <code>a<\/code> or <code>b<\/code>, both will be treated\nas if they have a <a href=\"painting\/TextStyle\/background.html\">background<\/a> paint (creating a new <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> if necessary\nbased on the <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> property).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextStyle lerp(TextStyle a, TextStyle b, double t) {\n  assert(t != null);\n  assert(a == null || b == null || a.inherit == b.inherit);\n  if (a == null &amp;&amp; b == null) {\n    return null;\n  }\n\n  String lerpDebugLabel;\n  assert(() {\n    lerpDebugLabel = 'lerp(${a?.debugLabel ?? _kDefaultDebugLabel} \u23af${t.toStringAsFixed(1)}\u2192 ${b?.debugLabel ?? _kDefaultDebugLabel})';\n    return true;\n  }());\n\n  if (a == null) {\n    return TextStyle(\n      inherit: b.inherit,\n      color: Color.lerp(null, b.color, t),\n      backgroundColor: Color.lerp(null, b.backgroundColor, t),\n      fontFamily: t &lt; 0.5 ? null : b.fontFamily,\n      fontFamilyFallback: t &lt; 0.5 ? null : b.fontFamilyFallback,\n      fontSize: t &lt; 0.5 ? null : b.fontSize,\n      fontWeight: FontWeight.lerp(null, b.fontWeight, t),\n      fontStyle: t &lt; 0.5 ? null : b.fontStyle,\n      letterSpacing: t &lt; 0.5 ? null : b.letterSpacing,\n      wordSpacing: t &lt; 0.5 ? null : b.wordSpacing,\n      textBaseline: t &lt; 0.5 ? null : b.textBaseline,\n      height: t &lt; 0.5 ? null : b.height,\n      locale: t &lt; 0.5 ? null : b.locale,\n      foreground: t &lt; 0.5 ? null : b.foreground,\n      background: t &lt; 0.5 ? null : b.background,\n      decoration: t &lt; 0.5 ? null : b.decoration,\n      shadows: t &lt; 0.5 ? null : b.shadows,\n      decorationColor: Color.lerp(null, b.decorationColor, t),\n      decorationStyle: t &lt; 0.5 ? null : b.decorationStyle,\n      decorationThickness: t &lt; 0.5 ? null : b.decorationThickness,\n      debugLabel: lerpDebugLabel,\n    );\n  }\n\n  if (b == null) {\n    return TextStyle(\n      inherit: a.inherit,\n      color: Color.lerp(a.color, null, t),\n      backgroundColor: Color.lerp(null, a.backgroundColor, t),\n      fontFamily: t &lt; 0.5 ? a.fontFamily : null,\n      fontFamilyFallback: t &lt; 0.5 ? a.fontFamilyFallback : null,\n      fontSize: t &lt; 0.5 ? a.fontSize : null,\n      fontWeight: FontWeight.lerp(a.fontWeight, null, t),\n      fontStyle: t &lt; 0.5 ? a.fontStyle : null,\n      letterSpacing: t &lt; 0.5 ? a.letterSpacing : null,\n      wordSpacing: t &lt; 0.5 ? a.wordSpacing : null,\n      textBaseline: t &lt; 0.5 ? a.textBaseline : null,\n      height: t &lt; 0.5 ? a.height : null,\n      locale: t &lt; 0.5 ? a.locale : null,\n      foreground: t &lt; 0.5 ? a.foreground : null,\n      background: t &lt; 0.5 ? a.background : null,\n      shadows: t &lt; 0.5 ? a.shadows : null,\n      decoration: t &lt; 0.5 ? a.decoration : null,\n      decorationColor: Color.lerp(a.decorationColor, null, t),\n      decorationStyle: t &lt; 0.5 ? a.decorationStyle : null,\n      decorationThickness: t &lt; 0.5 ? a.decorationThickness : null,\n      debugLabel: lerpDebugLabel,\n    );\n  }\n\n  return TextStyle(\n    inherit: b.inherit,\n    color: a.foreground == null &amp;&amp; b.foreground == null ? Color.lerp(a.color, b.color, t) : null,\n    backgroundColor: a.background == null &amp;&amp; b.background == null ? Color.lerp(a.backgroundColor, b.backgroundColor, t) : null,\n    fontFamily: t &lt; 0.5 ? a.fontFamily : b.fontFamily,\n    fontFamilyFallback: t &lt; 0.5 ? a.fontFamilyFallback : b.fontFamilyFallback,\n    fontSize: ui.lerpDouble(a.fontSize ?? b.fontSize, b.fontSize ?? a.fontSize, t),\n    fontWeight: FontWeight.lerp(a.fontWeight, b.fontWeight, t),\n    fontStyle: t &lt; 0.5 ? a.fontStyle : b.fontStyle,\n    letterSpacing: ui.lerpDouble(a.letterSpacing ?? b.letterSpacing, b.letterSpacing ?? a.letterSpacing, t),\n    wordSpacing: ui.lerpDouble(a.wordSpacing ?? b.wordSpacing, b.wordSpacing ?? a.wordSpacing, t),\n    textBaseline: t &lt; 0.5 ? a.textBaseline : b.textBaseline,\n    height: ui.lerpDouble(a.height ?? b.height, b.height ?? a.height, t),\n    locale: t &lt; 0.5 ? a.locale : b.locale,\n    foreground: (a.foreground != null || b.foreground != null)\n      ? t &lt; 0.5\n        ? a.foreground ?? (Paint()..color = a.color)\n        : b.foreground ?? (Paint()..color = b.color)\n      : null,\n    background: (a.background != null || b.background != null)\n      ? t &lt; 0.5\n        ? a.background ?? (Paint()..color = a.backgroundColor)\n        : b.background ?? (Paint()..color = b.backgroundColor)\n      : null,\n    shadows: t &lt; 0.5 ? a.shadows : b.shadows,\n    decoration: t &lt; 0.5 ? a.decoration : b.decoration,\n    decorationColor: Color.lerp(a.decorationColor, b.decorationColor, t),\n    decorationStyle: t &lt; 0.5 ? a.decorationStyle : b.decorationStyle,\n    decorationThickness: ui.lerpDouble(a.decorationThickness ?? b.decorationThickness, b.decorationThickness ?? a.decorationThickness, t),\n    debugLabel: lerpDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "merge",
            "type": "painting.TextStyle",
            "desc": "<p>Returns a new text style that is a combination of this style and the given\n<code>other<\/code> style.<\/p>\n<p>If the given <code>other<\/code> text style has its <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> set to true,\nits null properties are replaced with the non-null properties of this text\nstyle. The <code>other<\/code> style <em>inherits<\/em> the properties of this style. Another\nway to think of it is that the \"missing\" properties of the <code>other<\/code> style\nare <em>filled<\/em> by the properties of this style.<\/p>\n<p>If the given <code>other<\/code> text style has its <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> set to false,\nreturns the given <code>other<\/code> style unchanged. The <code>other<\/code> style does not\ninherit properties of this style.<\/p>\n<p>If the given text style is null, returns this text style.<\/p>\n<p>One of <a href=\"painting\/TextStyle\/color.html\">color<\/a> or <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> must be null, and if this or <code>other<\/code> has\n<a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> specified it will be given preference over any color parameter.<\/p>\n<p>Similarly, One of <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> or <a href=\"painting\/TextStyle\/background.html\">background<\/a> must be null, and if\nthis or <code>other<\/code> has <a href=\"painting\/TextStyle\/background.html\">background<\/a> specified it will be given preference\nover any backgroundColor parameter.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "painting.TextStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/TextStyle\/merge.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle merge(TextStyle other) {\n  if (other == null)\n    return this;\n  if (!other.inherit)\n    return other;\n\n  String mergedDebugLabel;\n  assert(() {\n    if (other.debugLabel != null || debugLabel != null)\n      mergedDebugLabel = '(${debugLabel ?? _kDefaultDebugLabel}).merge(${other.debugLabel ?? _kDefaultDebugLabel})';\n    return true;\n  }());\n\n  return copyWith(\n    color: other.color,\n    backgroundColor: other.backgroundColor,\n    fontFamily: other.fontFamily,\n    fontFamilyFallback: other.fontFamilyFallback,\n    fontSize: other.fontSize,\n    fontWeight: other.fontWeight,\n    fontStyle: other.fontStyle,\n    letterSpacing: other.letterSpacing,\n    wordSpacing: other.wordSpacing,\n    textBaseline: other.textBaseline,\n    height: other.height,\n    locale: other.locale,\n    foreground: other.foreground,\n    background: other.background,\n    shadows: other.shadows,\n    decoration: other.decoration,\n    decorationColor: other.decorationColor,\n    decorationStyle: other.decorationStyle,\n    decorationThickness: other.decorationThickness,\n    debugLabel: mergedDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toStringShort",
            "type": "dart:core.String",
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.TextStyle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/TextStyle\/toStringShort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "background",
            "type": "dart:ui.Paint",
            "types": [],
            "desc": "<p>The paint drawn as a background for the text.<\/p>\n<p>The value should ideally be cached and reused each time if multiple text\nstyles are created with the same paint settings. Otherwise, each time it\nwill appear like the style changed, which will result in unnecessary\nupdates all the way through the framework.<\/p>\n<p>If <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> is specified, this value must be null. The\n<a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> property is shorthand for\n<code>background: Paint()..color = backgroundColor<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> and\n<a href=\"painting\/TextStyle\/background.html\">background<\/a> specification are resolved in <a href=\"painting\/TextStyle\/background.html\">background<\/a>'s favor - i.e. if\n<a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified in one place, it will dominate <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a>\nin another.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/background.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Paint background\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "backgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color to use as the background for the text.<\/p>\n<p>If <a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified, this value must be null. The\n<a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> property is shorthand for\n<code>background: Paint()..color = backgroundColor<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> and <a href=\"painting\/TextStyle\/background.html\">background<\/a>\nspecification are resolved in <a href=\"painting\/TextStyle\/background.html\">background<\/a>'s favor - i.e. if <a href=\"painting\/TextStyle\/background.html\">background<\/a> is\nspecified in one place, it will dominate <a href=\"painting\/TextStyle\/color.html\">color<\/a> in another.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/backgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "color",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color to use when painting the text.<\/p>\n<p>If <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is specified, this value must be null. The <a href=\"painting\/TextStyle\/color.html\">color<\/a> property\nis shorthand for <code>Paint()..color = color<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/color.html\">color<\/a> and <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>\nspecification are resolved in <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>'s favor - i.e. if <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is\nspecified in one place, it will dominate <a href=\"painting\/TextStyle\/color.html\">color<\/a> in another.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/color.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "debugLabel",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>A human-readable description of this text style.<\/p>\n<p>This property is maintained only in debug builds.<\/p>\n<p>When merging (<a href=\"painting\/TextStyle\/merge.html\">merge<\/a>), copying (<a href=\"painting\/TextStyle\/copyWith.html\">copyWith<\/a>), modifying using <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, or\ninterpolating (<a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>), the label of the resulting style is marked with\nthe debug labels of the original styles. This helps figuring out where a\nparticular text style came from.<\/p>\n<p>This property is not considered when comparing text styles using <code>==<\/code> or\n<a href=\"painting\/TextStyle\/compareTo.html\">compareTo<\/a>, and it does not affect <a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/debugLabel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugLabel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decoration",
            "type": "dart:ui.TextDecoration",
            "types": [],
            "desc": "<p>The decorations to paint near the text (e.g., an underline).<\/p>\n<p>Multiple decorations can be applied using <a href=\"dart-ui\/TextDecoration\/TextDecoration.combine.html\">TextDecoration.combine<\/a>.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/decoration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDecoration decoration\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decorationColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color in which to paint the text decorations.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/decorationColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color decorationColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decorationStyle",
            "type": "dart:ui.TextDecorationStyle",
            "types": [],
            "desc": "<p>The style in which to paint the text decorations (e.g., dashed).<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/decorationStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDecorationStyle decorationStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "decorationThickness",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The thickness of the decoration stroke as a muliplier of the thickness\ndefined by the font.<\/p>\n<p>The font provides a base stroke width for <a href=\"painting\/TextStyle\/decoration.html\">decoration<\/a>s which scales off\nof the <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a>. This property may be used to achieve a thinner or\nthicker decoration stroke, without changing the <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a>. For example,\na <a href=\"painting\/TextStyle\/decorationThickness.html\">decorationThickness<\/a> of 2.0 will draw a decoration twice as thick as\nthe font defined decoration thickness.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTo achieve a bolded strike-through, we can apply a thicker stroke for the\ndecoration.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'This has a very BOLD strike through!',\n  style: TextStyle(\n    decoration: TextDecoration.lineThrough,\n    decorationThickness: 2.85,\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nWe can apply a very thin and subtle wavy underline (perhaps, when words\nare misspelled) by using a <a href=\"painting\/TextStyle\/decorationThickness.html\">decorationThickness<\/a> &lt; 1.0.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'oopsIforgottousespaces!',\n  style: TextStyle(\n    decoration: TextDecoration.underline,\n    decorationStyle: TextDecorationStyle.wavy,\n    decorationColor: Colors.red,\n    decorationThickness: 0.5,\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The default <a href=\"painting\/TextStyle\/decorationThickness.html\">decorationThickness<\/a> is 1.0, which will use the font's base\nstroke thickness\/width.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/decorationThickness.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double decorationThickness\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontFamily",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The name of the font to use when painting the text (e.g., Roboto). If the\nfont is defined in a package, this will be prefixed with\n'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto'). The\nprefixing is done by the constructor when the <code>package<\/code> argument is\nprovided.<\/p>\n<p>The value provided in <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that glyphs are looked for in, followed in order by the font families\nin <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. When <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> is null or not provided, the\nfirst value in <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> acts as the preferred\/first font\nfamily. When neither is provided, then the default platform font will\nbe used.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/fontFamily.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String fontFamily\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontFamilyFallback",
            "type": "dart:core.List<dart:core.String>",
            "types": [
                "dart:core.List",
                "dart:core.String"
            ],
            "desc": "<p>The ordered list of font families to fall back on when a glyph cannot be\nfound in a higher priority font family.<\/p>\n<p>The value provided in <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that glyphs are looked for in, followed in order by the font families\nin <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. If all font families are exhausted and no match\nwas found, the default platform font family will be used instead.<\/p>\n<p>When <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> is null or not provided, the first value in <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>\nacts as the preferred\/first font family. When neither is provided, then\nthe default platform font will be used. Providing and empty list or null\nfor this property is the same as omitting it.<\/p>\n<p>For example, if a glyph is not found in <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a>, then each font family\nin <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> will be searched in order until it is found. If it\nis not found, then a box will be drawn in its place.<\/p>\n<p>If the font is defined in a package, each font family in the list will be\nprefixed with 'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto').\nThe package name should be provided by the <code>package<\/code> argument in the\nconstructor.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/fontFamilyFallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; get fontFamilyFallback =&gt; _package != null &amp;&amp; _fontFamilyFallback != null ? _fontFamilyFallback.map((String str) =&gt; 'packages\/$_package\/$str').toList() : _fontFamilyFallback;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontSize",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The size of glyphs (in logical pixels) to use when painting the text.<\/p>\n<p>During painting, the <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a> is multiplied by the current\n<code>textScaleFactor<\/code> to let users make it easier to read text by increasing\nits size.<\/p>\n<p><a href=\"painting\/TextStyle\/getParagraphStyle.html\">getParagraphStyle<\/a> will default to 14 logical pixels if the font size\nisn't specified here.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/fontSize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double fontSize\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontStyle",
            "type": "dart:ui.FontStyle",
            "types": [],
            "desc": "<p>The typeface variant to use when drawing the letters (e.g., italics).<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/fontStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontStyle fontStyle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "fontWeight",
            "type": "dart:ui.FontWeight",
            "types": [],
            "desc": "<p>The typeface thickness to use when painting the text (e.g., bold).<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/fontWeight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontWeight fontWeight\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "foreground",
            "type": "dart:ui.Paint",
            "types": [],
            "desc": "<p>The paint drawn as a foreground for the text.<\/p>\n<p>The value should ideally be cached and reused each time if multiple text\nstyles are created with the same paint settings. Otherwise, each time it\nwill appear like the style changed, which will result in unnecessary\nupdates all the way through the framework.<\/p>\n<p>If <a href=\"painting\/TextStyle\/color.html\">color<\/a> is specified, this value must be null. The <a href=\"painting\/TextStyle\/color.html\">color<\/a> property\nis shorthand for <code>Paint()..color = color<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/color.html\">color<\/a> and <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>\nspecification are resolved in <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>'s favor - i.e. if <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is\nspecified in one place, it will dominate <a href=\"painting\/TextStyle\/color.html\">color<\/a> in another.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/foreground.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Paint foreground\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    inherit,\n    color,\n    backgroundColor,\n    fontFamily,\n    fontFamilyFallback,\n    fontSize,\n    fontWeight,\n    fontStyle,\n    letterSpacing,\n    wordSpacing,\n    textBaseline,\n    height,\n    locale,\n    foreground,\n    background,\n    decoration,\n    decorationColor,\n    decorationStyle,\n    shadows,\n  );\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "height",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The height of this text span, as a multiple of the font size.<\/p>\n<p>If applied to the root <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, this value sets the line height, which\nis the minimum distance between subsequent text baselines, as multiple of\nthe font size.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "inherit",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether null values are replaced with their value in an ancestor text\nstyle (e.g., in a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree).<\/p>\n<p>If this is false, properties that don't have explicit values will revert\nto the defaults: white in color, a font size of 10 pixels, in a sans-serif\nfont face.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/inherit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool inherit\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "letterSpacing",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The amount of space (in logical pixels) to add between each letter.\nA negative value can be used to bring the letters closer.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/letterSpacing.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double letterSpacing\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "locale",
            "type": "dart:ui.Locale",
            "types": [],
            "desc": "<p>The locale used to select region-specific glyphs.<\/p>\n<p>This property is rarely set. Typically the locale used to select\nregion-specific glyphs is defined by the text widget's <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\nusing <code>Localizations.localeOf(context)<\/code>. For example <a href=\"widgets\/RichText-class.html\">RichText<\/a> defines\nits locale this way. However, a rich text widget's <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s could\nspecify text styles with different explicit locales in order to select\ndifferent region-specific glyphs for each text span.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/locale.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shadows",
            "type": "dart:core.List<dart:ui.Shadow>",
            "types": [
                "dart:core.List",
                "dart:ui.Shadow"
            ],
            "desc": "<p>A list of <a href=\"dart-ui\/Shadow-class.html\">Shadow<\/a>s that will be painted underneath the text.<\/p>\n<p>Multiple shadows are supported to replicate lighting from multiple light\nsources.<\/p>\n<p>Shadows must be in the same order for <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> to be considered as\nequivalent as order produces differing transparency.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/shadows.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;ui.Shadow&gt; shadows\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textBaseline",
            "type": "dart:ui.TextBaseline",
            "types": [],
            "desc": "<p>The common baseline that should be aligned between this text span and its\nparent text span, or, for the root text spans, with the line box.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/textBaseline.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextBaseline textBaseline\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "wordSpacing",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The amount of space (in logical pixels) to add at each sequence of\nwhite-space (i.e. between each word). A negative value can be used to\nbring the words closer.<\/p>\n        ",
            "memberOf": "painting.TextStyle",
            "isConstant": false,
            "href": "painting\/TextStyle\/wordSpacing.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double wordSpacing\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "widgets.TextStyleTween"
    ],
    "realImplementors": [
        "widgets.TextStyleTween"
    ],
    "cn": [],
    "href": "painting\/TextStyle-class.html",
    "desc": "<p>An immutable style in which paint text.<\/p>\n<h3 id=\"bold\">Bold<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, a single line of text in a <a href=\"widgets\/Text-class.html\">Text<\/a> widget is given a specific style\noverride. The style is mixed with the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> by the\n<a href=\"widgets\/Text-class.html\">Text<\/a> widget.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'No, we need bold strokes. We need this plan.',\n  style: TextStyle(fontWeight: FontWeight.bold),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"italics\">Italics<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nAs in the previous example, the <a href=\"widgets\/Text-class.html\">Text<\/a> widget is given a specific style\noverride which is implicitly mixed with the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'Welcome to the present, we\\'re running a real nation.',\n  style: TextStyle(fontStyle: FontStyle.italic),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"opacity-and-color\">Opacity and Color<\/h3>\n<p>Each line here is progressively more opaque. The base color is\n<a href=\"material\/Colors\/black-constant.html\">material.Colors.black<\/a>, and <a href=\"dart-ui\/Color\/withOpacity.html\">Color.withOpacity<\/a> is used to create a\nderivative color with the desired opacity. The root <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> for this\n<a href=\"widgets\/RichText-class.html\">RichText<\/a> widget is explicitly given the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, since\n<a href=\"widgets\/RichText-class.html\">RichText<\/a> does not do that automatically. The inner <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> objects are\nimplicitly mixed with the parent <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>'s <a href=\"painting\/TextSpan\/style.html\">TextSpan.style<\/a>.<\/p>\n<p>If <a href=\"painting\/TextStyle\/color.html\">color<\/a> is specified, <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> must be null and vice versa. <a href=\"painting\/TextStyle\/color.html\">color<\/a> is\ntreated as a shorthand for <code>Paint()..color = color<\/code>.<\/p>\n<p>If <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> is specified, <a href=\"painting\/TextStyle\/background.html\">background<\/a> must be null and vice versa.\nThe <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> is treated as a shorthand for\n<code>background: Paint()..color = backgroundColor<\/code>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">RichText(\n  text: TextSpan(\n    style: DefaultTextStyle.of(context).style,\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'You don\\'t have the votes.\\n',\n        style: TextStyle(color: Colors.black.withOpacity(0.6)),\n      ),\n      TextSpan(\n        text: 'You don\\'t have the votes!\\n',\n        style: TextStyle(color: Colors.black.withOpacity(0.8)),\n      ),\n      TextSpan(\n        text: 'You\\'re gonna need congressional approval and you don\\'t have the votes!\\n',\n        style: TextStyle(color: Colors.black.withOpacity(1.0)),\n      ),\n    ],\n  ),\n)\n<\/code><\/pre>\n<h3 id=\"size\">Size<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn this example, the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> is explicitly manipulated to\nobtain a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> that doubles the default font size.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'These are wise words, enterprising men quote \\'em.',\n  style: DefaultTextStyle.of(context).style.apply(fontSizeFactor: 2.0),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"line-height\">Line height<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe <a href=\"painting\/TextStyle\/height.html\">height<\/a> property can be used to change the line height. Here, the line\nheight is set to 5 times the font size, so that the text is very spaced out.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'Don\\'t act surprised, you guys, cuz I wrote \\'em!',\n  style: TextStyle(height: 5.0),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"wavy-red-underline-with-black-text\">Wavy red underline with black text<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nStyles can be combined. In this example, the misspelt word is drawn in black\ntext and underlined with a wavy red line to indicate a spelling error. (The\nremainder is styled according to the Flutter default text styles, not the\nambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, since no explicit style is given and <a href=\"widgets\/RichText-class.html\">RichText<\/a>\ndoes not automatically use the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.)\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">RichText(\n  text: TextSpan(\n    text: 'Don\\'t tax the South ',\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'cuz',\n        style: TextStyle(\n          color: Colors.black,\n          decoration: TextDecoration.underline,\n          decorationColor: Colors.red,\n          decorationStyle: TextDecorationStyle.wavy,\n        ),\n      ),\n      TextSpan(\n        text: ' we got it made in the shade',\n      ),\n    ],\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"custom-fonts\">Custom Fonts<\/h3>\n<p>Custom fonts can be declared in the <code>pubspec.yaml<\/code> file as shown below:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: fonts\/Raleway-Regular.ttf\n        - asset: fonts\/Raleway-Medium.ttf\n          weight: 500\n        - asset: assets\/fonts\/Raleway-SemiBold.ttf\n          weight: 600\n     - family: Schyler\n       fonts:\n         - asset: fonts\/Schyler-Regular.ttf\n         - asset: fonts\/Schyler-Italic.ttf\n           style: italic\n<\/code><\/pre>\n<p>The <code>family<\/code> property determines the name of the font, which you can use in\nthe <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> argument. The <code>asset<\/code> property is a path to the font file,\nrelative to the <code>pubspec.yaml<\/code> file. The <code>weight<\/code> property specifies the\nweight of the glyph outlines in the file as an integer multiple of 100\nbetween 100 and 900. This corresponds to the <a href=\"dart-ui\/FontWeight-class.html\">FontWeight<\/a> class and can be\nused in the <a href=\"painting\/TextStyle\/fontWeight.html\">fontWeight<\/a> argument. The <code>style<\/code> property specifies whether the\noutlines in the file are <code>italic<\/code> or <code>normal<\/code>. These values correspond to\nthe <a href=\"dart-ui\/FontStyle-class.html\">FontStyle<\/a> class and can be used in the <a href=\"painting\/TextStyle\/fontStyle.html\">fontStyle<\/a> argument.<\/p>\n<p>To select a custom font, create <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> using the <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a>\nargument as shown in the example below:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const TextStyle(fontFamily: 'Raleway')<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>To use a font family defined in a package, the <code>package<\/code> argument must be\nprovided. For instance, suppose the font declaration above is in the\n<code>pubspec.yaml<\/code> of a package named <code>my_package<\/code> which the app depends on.\nThen creating the TextStyle is done as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const TextStyle(fontFamily: 'Raleway', package: 'my_package')\n<\/code><\/pre>\n<p>If the package internally uses the font it defines, it should still specify\nthe <code>package<\/code> argument when creating the text style as in the example above.<\/p>\n<p>A package can also provide font files without declaring a font in its\n<code>pubspec.yaml<\/code>. These files should then be in the <code>lib\/<\/code> folder of the\npackage. The font files will not automatically be bundled in the app, instead\nthe app can use these selectively when declaring a font. Suppose a package\nnamed <code>my_package<\/code> has:<\/p>\n<pre class=\"language-dart\"><code>lib\/fonts\/Raleway-Medium.ttf\n<\/code><\/pre>\n<p>Then the app can declare a font like in the example below:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: assets\/fonts\/Raleway-Regular.ttf\n        - asset: packages\/my_package\/fonts\/Raleway-Medium.ttf\n          weight: 500\n<\/code><\/pre>\n<p>The <code>lib\/<\/code> is implied, so it should not be included in the asset path.<\/p>\n<p>In this case, since the app locally defines the font, the TextStyle is\ncreated without the <code>package<\/code> argument:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const TextStyle(fontFamily: 'Raleway')<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"custom-font-fallback\">Custom Font Fallback<\/h3>\n<p>A custom <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> list can be provided. The list should be an\nordered list of strings of font family names in the order they will be attempted.<\/p>\n<p>The fonts in <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> will be used only if the requested glyph is\nnot present in the <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a>.<\/p>\n<p>The fallback order is:<\/p>\n<ul>\n<li><a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a><\/li>\n<li>\n<a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> in order of first to last.<\/li>\n<\/ul>\n<p>The glyph used will always be the first matching version in fallback order.<\/p>\n<p>The <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> property is commonly used to specify different font\nfamilies for multilingual text spans as well as separate fonts for glyphs such\nas emojis.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn the following example, any glyphs not present in the font <code>Raleway<\/code> will be attempted\nto be resolved with <code>Noto Sans CJK SC<\/code>, and then with <code>Noto Color Emoji<\/code>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const TextStyle(\n  fontFamily: 'Raleway',\n  fontFamilyFallback: &lt;String&gt;[\n    'Noto Sans CJK SC',\n    'Noto Color Emoji',\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>If all custom fallback font families are exhausted and no match was found\nor no custom fallback was provided, the platform font fallback will be used.<\/p>\n<h3 id=\"inconsistent-platform-fonts\">Inconsistent platform fonts<\/h3>\n<p>Since Flutter's font discovery for default fonts depends on the fonts present\non the device, it is not safe to assume all default fonts will be available or\nconsistent across devices.<\/p>\n<p>A known example of this is that Samsung devices ship with a CJK font that has\nsmaller line spacing than the Android default. This results in Samsung devices\ndisplaying more tightly spaced text than on other Android devices when no\ncustom font is specified.<\/p>\n<p>To avoid this, a custom font should be specified if absolute font consistency\nis required for your application.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Text-class.html\">Text<\/a>, the widget for showing text in a single style.<\/li>\n<li>\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, the widget that specifies the default text styles for\n<a href=\"widgets\/Text-class.html\">Text<\/a> widgets, configured using a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/li>\n<li>\n<a href=\"widgets\/RichText-class.html\">RichText<\/a>, the widget for showing a paragraph of mix-style text.<\/li>\n<li>\n<a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, the class that wraps a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the purposes of\npassing it to a <a href=\"widgets\/RichText-class.html\">RichText<\/a>.<\/li>\n<li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/dart-ui\/TextStyle-class.html\">TextStyle<\/a>, the class in the <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> library.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextStyle"
}