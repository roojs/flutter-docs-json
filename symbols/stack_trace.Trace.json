{
    "desc": "<p>A stack trace, comprised of a list of stack frames.<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "package-stack_trace_stack_trace\/Trace-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "stack_trace",
    "name": "stack_trace.Trace",
    "shortname": "Trace",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Returns a new <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">Trace<\/a> comprised of <code>frames<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Trace(Iterable&lt;Frame&gt; frames, {String original})\n    : frames = new List&lt;Frame&gt;.unmodifiable(frames),\n      original = new StackTrace.fromString(original);<\/code><\/pre>\n    ",
            "href": "package-stack_trace_stack_trace\/Trace\/Trace.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "stack_trace.Trace",
            "params": [
                {
                    "name": "frames",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Iterable<stack_trace.Frame>"
                },
                {
                    "name": "original",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a new <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">Trace<\/a> based on <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">this<\/a> where multiple stack frames matching\n<code>predicate<\/code> are folded together.<\/p>\n<p>This means that whenever there are multiple frames in a row that match\n<code>predicate<\/code>, only the last one is kept. This is useful for limiting the\namount of library code that appears in a stack trace by only showing user\ncode and code that's called by user code.<\/p>\n<p>If <code>terse<\/code> is true, this will also fold together frames from the core\nlibrary or from this package, simplify core library frames, and\npotentially remove the outermost frame as in <a href=\"package-stack_trace_stack_trace\/Trace\/terse.html\">Trace.terse<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Trace foldFrames(bool predicate(Frame frame), {bool terse: false}) {\n  if (terse) {\n    var oldPredicate = predicate;\n    predicate = (frame) {\n      if (oldPredicate(frame)) return true;\n\n      if (frame.isCore) return true;\n      if (frame.package == 'stack_trace') return true;\n\n      \/\/ Ignore async stack frames without any line or column information.\n      \/\/ These come from the VM's async\/await implementation and represent\n      \/\/ internal frames. They only ever show up in stack chains and are\n      \/\/ always surrounded by other traces that are actually useful, so we can\n      \/\/ just get rid of them.\n      \/\/ TODO(nweiz): Get rid of this logic some time after issue 22009 is\n      \/\/ fixed.\n      if (!frame.member.contains('&lt;async&gt;')) return false;\n      return frame.line == null;\n    };\n  }\n\n  var newFrames = &lt;Frame&gt;[];\n  for (var frame in frames.reversed) {\n    if (frame is UnparsedFrame || !predicate(frame)) {\n      newFrames.add(frame);\n    } else if (newFrames.isEmpty || !predicate(newFrames.last)) {\n      newFrames\n          .add(new Frame(frame.uri, frame.line, frame.column, frame.member));\n    }\n  }\n\n  if (terse) {\n    newFrames = newFrames.map((frame) {\n      if (frame is UnparsedFrame || !predicate(frame)) return frame;\n      var library = frame.library.replaceAll(_terseRegExp, '');\n      return new Frame(Uri.parse(library), null, null, frame.member);\n    }).toList();\n\n    if (newFrames.length &gt; 1 &amp;&amp; predicate(newFrames.first)) {\n      newFrames.removeAt(0);\n    }\n  }\n\n  return new Trace(newFrames.reversed, original: this.original.toString());\n}<\/code><\/pre>\n    ",
            "href": "package-stack_trace_stack_trace\/Trace\/foldFrames.html",
            "isDeprecated": "0",
            "type": "stack_trace.Trace",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "stack_trace.Trace",
            "params": [
                {
                    "name": "frame",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "stack_trace.Frame"
                },
                {
                    "name": "terse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns a human-readable representation of <code>stackTrace<\/code>. If <code>terse<\/code> is\nset, this folds together multiple stack frames from the Dart core\nlibraries, so that only the core library method directly called from user\ncode is visible (see <a href=\"package-stack_trace_stack_trace\/Trace\/terse.html\">Trace.terse<\/a>).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String format(StackTrace stackTrace, {bool terse: true}) {\n  var trace = new Trace.from(stackTrace);\n  if (terse) trace = trace.terse;\n  return trace.toString();\n}<\/code><\/pre>\n    ",
            "href": "package-stack_trace_stack_trace\/Trace\/format.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "stack_trace.Trace",
            "params": [
                {
                    "name": "stackTrace",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.StackTrace"
                },
                {
                    "name": "terse",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns a human-readable string representation of <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">this<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  \/\/ Figure out the longest path so we know how much to pad.\n  var longest =\n      frames.map((frame) =&gt; frame.location.length).fold(0, math.max);\n\n  \/\/ Print out the stack trace nicely formatted.\n  return frames.map((frame) {\n    if (frame is UnparsedFrame) return \"$frame\\n\";\n    return '${frame.location.padRight(longest)}  ${frame.member}\\n';\n  }).join();\n}<\/code><\/pre>\n    ",
            "href": "package-stack_trace_stack_trace\/Trace\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "stack_trace.Trace",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The stack frames that comprise this stack trace.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Frame&gt; frames\n\n<\/code><\/pre>\n        ",
            "href": "package-stack_trace_stack_trace\/Trace\/frames.html",
            "isDeprecated": "0",
            "type": "dart:core.List<stack_trace.Frame>",
            "memberOf": "stack_trace.Trace",
            "params": []
        },
        {
            "desc": "<p>The original stack trace from which this trace was parsed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackTrace original\n\n<\/code><\/pre>\n        ",
            "href": "package-stack_trace_stack_trace\/Trace\/original.html",
            "isDeprecated": "0",
            "type": "dart:core.StackTrace",
            "memberOf": "stack_trace.Trace",
            "params": []
        },
        {
            "desc": "<p>Returns a terser version of <a href=\"package-stack_trace_stack_trace\/Trace-class.html\">this<\/a>.<\/p>\n<p>This is accomplished by folding together multiple stack frames from the\ncore library or from this package, as in <a href=\"package-stack_trace_stack_trace\/Trace\/foldFrames.html\">foldFrames<\/a>. Remaining core\nlibrary frames have their libraries, \"-patch\" suffixes, and line numbers\nremoved. If the outermost frame of the stack trace is a core library\nframe, it's removed entirely.<\/p>\n<p>This won't do anything with a raw JavaScript trace, since there's no way\nto determine which frames come from which Dart libraries. However, the\n<a href=\"https:\/\/pub.dartlang.org\/packages\/source_map_stack_trace\"><code>source_map_stack_trace<\/code><\/a> package can be used to\nconvert JavaScript traces into Dart-style traces.<\/p>\n<p>For custom folding, see <a href=\"package-stack_trace_stack_trace\/Trace\/foldFrames.html\">foldFrames<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Trace get terse =&gt; foldFrames((_) =&gt; false, terse: true);<\/code><\/pre>\n        ",
            "href": "package-stack_trace_stack_trace\/Trace\/terse.html",
            "isDeprecated": "0",
            "type": "stack_trace.Trace",
            "memberOf": "stack_trace.Trace",
            "params": []
        },
        {
            "desc": "<p>Returns a VM-style <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a> object.<\/p>\n<p>The return value's <a href=\"package-stack_trace_stack_trace\/Trace\/toString.html\">toString<\/a> method will always return a string\nrepresentation in the Dart VM's stack trace format, regardless of what\nplatform is being used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StackTrace get vmTrace =&gt; new VMTrace(frames);<\/code><\/pre>\n        ",
            "href": "package-stack_trace_stack_trace\/Trace\/vmTrace.html",
            "isDeprecated": "0",
            "type": "dart:core.StackTrace",
            "memberOf": "stack_trace.Trace",
            "params": []
        }
    ]
}