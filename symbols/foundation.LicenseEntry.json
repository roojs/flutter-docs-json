{
    "name": "foundation.LicenseEntry",
    "extends": [],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "LicenseEntry",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.LicenseEntry",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "foundation\/LicenseEntry\/LicenseEntry.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LicenseEntry();<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "packages",
            "type": "dart:core.Iterable<dart:core.String>",
            "types": [
                "dart:core.Iterable",
                "dart:core.String"
            ],
            "desc": "<p>The names of the packages that this license entry applies to.<\/p>\n        ",
            "memberOf": "foundation.LicenseEntry",
            "isConstant": false,
            "href": "foundation\/LicenseEntry\/packages.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;String&gt; get packages;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "paragraphs",
            "type": "dart:core.Iterable<foundation.LicenseParagraph>",
            "types": [
                "dart:core.Iterable",
                "foundation.LicenseParagraph"
            ],
            "desc": "<p>The paragraphs of the license, each as a <a href=\"foundation\/LicenseParagraph-class.html\">LicenseParagraph<\/a> consisting of\na string and some formatting information. Paragraphs can include newline\ncharacters, but this is discouraged as it results in ugliness.<\/p>\n        ",
            "memberOf": "foundation.LicenseEntry",
            "isConstant": false,
            "href": "foundation\/LicenseEntry\/paragraphs.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;LicenseParagraph&gt; get paragraphs;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "foundation.LicenseEntryWithLineBreaks"
    ],
    "realImplementors": [
        "foundation.LicenseEntryWithLineBreaks"
    ],
    "cn": [],
    "href": "foundation\/LicenseEntry-class.html",
    "desc": "<p>A license that covers part of the application's software or assets, to show\nin an interface such as the <a href=\"material\/LicensePage-class.html\">LicensePage<\/a>.<\/p>\n<p>For optimal performance, <a href=\"foundation\/LicenseEntry-class.html\">LicenseEntry<\/a> objects should only be created on\ndemand in <a href=\"foundation\/LicenseEntryCollector.html\">LicenseEntryCollector<\/a> callbacks passed to\n<a href=\"foundation\/LicenseRegistry\/addLicense.html\">LicenseRegistry.addLicense<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LicenseEntry"
}