{
    "name": "source_span.SourceSpanMixin",
    "extends": [],
    "memberOf": "source_span",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"package-source_span_source_span\/SourceSpanMixin\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(other) =&gt;\n    other is SourceSpan &amp;&amp; start == other.start &amp;&amp; end == other.end;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "SourceSpanMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "package-source_span_source_span\/SourceSpanMixin\/SourceSpanMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "compareTo",
            "type": "dart:core.int",
            "desc": "<p>Compares two spans.<\/p>\n<p><code>other<\/code> must have the same source URL as <a href=\"package-source_span_source_span\/SourceSpanMixin-class.html\">this<\/a>. This orders spans by\n<a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> then <a href=\"package-source_span_source_span\/SourceSpanMixin\/length.html\">length<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "source_span.SourceSpan",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/compareTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(SourceSpan other) {\n  var result = start.compareTo(other.start);\n  return result == 0 ? end.compareTo(other.end) : result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "highlight",
            "type": "dart:core.String",
            "desc": "<p>Prints the text associated with this span in a user-friendly way.<\/p>\n<p>This is identical to <a href=\"package-source_span_source_span\/SourceSpanMixin\/message.html\">message<\/a>, except that it doesn't print the file\nname, line number, column number, or message. If <a href=\"package-source_span_source_span\/SourceSpanMixin\/length.html\">length<\/a> is 0 and this\nisn't a <a href=\"package-source_span_source_span\/SourceSpanWithContext-class.html\">SourceSpanWithContext<\/a>, returns an empty string.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an <a href=\"https:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code#Colors\">ANSI terminal color\nescape<\/a> that should\nbe used to highlight the span's text (for example, <code>\"\\u001b[31m\"<\/code> will\ncolor red). If it's <code>true<\/code>, it indicates that the text should be\nhighlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>, it\nindicates that the text shouldn't be highlighted.<\/p>\n<p>This uses the full range of Unicode characters to highlight the source\nspan if <a href=\"package-term_glyph_term_glyph\/ascii.html\">glyph.ascii<\/a> is <code>false<\/code> (the default), but only uses ASCII\ncharacters if it's <code>true<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [
                {
                    "name": "color",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/highlight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String highlight({color}) {\n  if (this is! SourceSpanWithContext &amp;&amp; this.length == 0) return \"\";\n  return new Highlighter(this, color: color).highlight();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "message",
            "type": "dart:core.String",
            "desc": "<p>Formats <code>message<\/code> in a human-friendly way associated with this span.<\/p>\n<p><code>color<\/code> may either be a <a href=\"dart-core\/String-class.html\">String<\/a>, a <a href=\"dart-core\/bool-class.html\">bool<\/a>, or <code>null<\/code>. If it's a string,\nit indicates an <a href=\"https:\/\/en.wikipedia.org\/wiki\/ANSI_escape_code#Colors\">ANSI terminal color\nescape<\/a> that should\nbe used to highlight the span's text (for example, <code>\"\\u001b[31m\"<\/code> will\ncolor red). If it's <code>true<\/code>, it indicates that the text should be\nhighlighted using the default color. If it's <code>false<\/code> or <code>null<\/code>, it\nindicates that the text shouldn't be highlighted.<\/p>\n<p>This uses the full range of Unicode characters to highlight the source\nspan if <a href=\"package-term_glyph_term_glyph\/ascii.html\">glyph.ascii<\/a> is <code>false<\/code> (the default), but only uses ASCII\ncharacters if it's <code>true<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/message.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String message(String message, {color}) {\n  var buffer = new StringBuffer();\n  buffer.write('line ${start.line + 1}, column ${start.column + 1}');\n  if (sourceUrl != null) buffer.write(' of ${p.prettyUri(sourceUrl)}');\n  buffer.write(': $message');\n\n  var highlight = this.highlight(color: color);\n  if (!highlight.isEmpty) {\n    buffer.writeln();\n    buffer.write(highlight);\n  }\n\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; '&lt;$runtimeType: from $start to $end \"$text\"&gt;';<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "union",
            "type": "source_span.SourceSpan",
            "desc": "<p>Creates a new span that's the union of <a href=\"package-source_span_source_span\/SourceSpanMixin-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<p>The two spans must have the same source URL and may not be disjoint.\n<a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a> is computed by combining <a href=\"package-source_span_source_span\/SourceSpan\/text.html\">this.text<\/a> and <code>other.text<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "source_span.SourceSpanMixin",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "source_span.SourceSpan",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/union.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SourceSpan union(SourceSpan other) {\n  if (sourceUrl != other.sourceUrl) {\n    throw new ArgumentError(\"Source URLs \\\"${sourceUrl}\\\" and \"\n        \" \\\"${other.sourceUrl}\\\" don't match.\");\n  }\n\n  var start = min(this.start, other.start);\n  var end = max(this.end, other.end);\n  var beginSpan = start == this.start ? this : other;\n  var endSpan = end == this.end ? this : other;\n\n  if (beginSpan.end.compareTo(endSpan.start) &lt; 0) {\n    throw new ArgumentError(\"Spans $this and $other are disjoint.\");\n  }\n\n  var text = beginSpan.text +\n      endSpan.text.substring(beginSpan.end.distance(endSpan.start));\n  return new SourceSpan(start, end, text);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-source_span_source_span\/SourceSpanMixin\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-source_span_source_span\/SourceSpanMixin\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "source_span.SourceSpanMixin",
            "isConstant": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; start.hashCode + (31 * end.hashCode);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The length of this span, in characters.<\/p>\n        ",
            "memberOf": "source_span.SourceSpanMixin",
            "isConstant": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; end.offset - start.offset;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "sourceUrl",
            "type": "dart:core.Uri",
            "types": [],
            "desc": "<p>The URL of the source (typically a file) of this span.<\/p>\n<p>This may be null, indicating that the source URL is unknown or\nunavailable.<\/p>\n        ",
            "memberOf": "source_span.SourceSpanMixin",
            "isConstant": false,
            "href": "package-source_span_source_span\/SourceSpanMixin\/sourceUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get sourceUrl =&gt; start.sourceUrl;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "source_span.SourceSpanBase",
        "source_span.SourceSpanWithContext"
    ],
    "realImplementors": [
        "source_span.SourceSpanBase",
        "source_span.SourceSpanWithContext"
    ],
    "cn": [],
    "href": "package-source_span_source_span\/SourceSpanMixin-class.html",
    "desc": "<p>A mixin for easily implementing <a href=\"package-source_span_source_span\/SourceSpan-class.html\">SourceSpan<\/a>.<\/p>\n<p>This implements the <a href=\"package-source_span_source_span\/SourceSpan-class.html\">SourceSpan<\/a> methods in terms of <a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a>, <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a>, and\n<a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a>. This assumes that <a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> and <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a> have the same source URL, that\n<a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> comes before <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a>, and that <a href=\"package-source_span_source_span\/SourceSpan\/text.html\">text<\/a> has a number of characters equal\nto the distance between <a href=\"package-source_span_source_span\/SourceSpan\/start.html\">start<\/a> and <a href=\"package-source_span_source_span\/SourceSpan\/end.html\">end<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SourceSpanMixin"
}