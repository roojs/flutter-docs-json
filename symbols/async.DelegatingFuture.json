{
    "desc": "<p>A wrapper that forwards calls to a <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/DelegatingFuture-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "async",
    "name": "async.DelegatingFuture",
    "shortname": "DelegatingFuture",
    "extends": [],
    "realImplementors": [
        "async.ResultFuture"
    ],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DelegatingFuture(this._future);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/DelegatingFuture.html",
            "isDeprecated": "0",
            "type": "",
            "name": "DelegatingFuture",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": [
                {
                    "name": "_future",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Creates a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> containing the result of this future.<\/p>\n<p>The stream will produce single data or error event containing the\ncompletion result of this future, and then it will close with a\ndone event.<\/p>\n<p>If the future never completes, the stream will not produce any events.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; asStream() =&gt; _future.asStream();<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/asStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Stream",
            "name": "asStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": []
        },
        {
            "desc": "<p>Handles errors emitted by this <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n<p>This is the asynchronous equivalent of a \"catch\" block.<\/p>\n<p>Returns a new <a href=\"dart-async\/Future-class.html\">Future<\/a> that will be completed with either the result of\nthis future or the result of calling the <code>onError<\/code> callback.<\/p>\n<p>If this future completes with a value,\nthe returned future completes with the same value.<\/p>\n<p>If this future completes with an error,\nthen <code>test<\/code> is first called with the error value.<\/p>\n<p>If <code>test<\/code> returns false, the exception is not handled by this <code>catchError<\/code>,\nand the returned future completes with the same error and stack trace\nas this future.<\/p>\n<p>If <code>test<\/code> returns <code>true<\/code>,\n<code>onError<\/code> is called with the error and possibly stack trace,\nand the returned future is completed with the result of this call\nin exactly the same way as for <a href=\"package-async_async\/DelegatingFuture\/then.html\">then<\/a>'s <code>onError<\/code>.<\/p>\n<p>If <code>test<\/code> is omitted, it defaults to a function that always returns true.\nThe <code>test<\/code> function should not throw, but if it does, it is handled as\nif the <code>onError<\/code> function had thrown.<\/p>\n<p>Note that futures don't delay reporting of errors until listeners are\nadded. If the first <code>catchError<\/code> (or <code>then<\/code>) call happens after this future\nhas completed with an error then the error is reported as unhandled error.\nSee the description on <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; catchError(Function onError, {bool test(Object error)}) =&gt;\n    _future.catchError(onError, test: test);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/catchError.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "catchError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": [
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        },
        {
            "desc": "<p>Register callbacks to be called when this future completes.<\/p>\n<p>When this future completes with a value,\nthe <code>onValue<\/code> callback will be called with that value.\nIf this future is already completed, the callback will not be called\nimmediately, but will be scheduled in a later microtask.<\/p>\n<p>If <code>onError<\/code> is provided, and this future completes with an error,\nthe <code>onError<\/code> callback is called with that error and its stack trace.\nThe <code>onError<\/code> callback must accept either one argument or two arguments\nwhere the latter is a <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a>.\nIf <code>onError<\/code> accepts two arguments,\nit is called with both the error and the stack trace,\notherwise it is called with just the error object.\nThe <code>onError<\/code> callback must return a value or future that can be used\nto complete the returned future, so it must be something assignable to\n<code>FutureOr&lt;R&gt;<\/code>.<\/p>\n<p>Returns a new <a href=\"dart-async\/Future-class.html\">Future<\/a>\nwhich is completed with the result of the call to <code>onValue<\/code>\n(if this future completes with a value)\nor to <code>onError<\/code> (if this future completes with an error).<\/p>\n<p>If the invoked callback throws,\nthe returned future is completed with the thrown error\nand a stack trace for the error.\nIn the case of <code>onError<\/code>,\nif the exception thrown is <code>identical<\/code> to the error argument to <code>onError<\/code>,\nthe throw is considered a rethrow,\nand the original stack trace is used instead.<\/p>\n<p>If the callback returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>,\nthe future returned by <code>then<\/code> will be completed with\nthe same result as the future returned by the callback.<\/p>\n<p>If <code>onError<\/code> is not given, and this future completes with an error,\nthe error is forwarded directly to the returned future.<\/p>\n<p>In most cases, it is more readable to use <a href=\"package-async_async\/DelegatingFuture\/catchError.html\">catchError<\/a> separately, possibly\nwith a <code>test<\/code> parameter, instead of handling both value and error in a\nsingle <a href=\"package-async_async\/DelegatingFuture\/then.html\">then<\/a> call.<\/p>\n<p>Note that futures don't delay reporting of errors until listeners are\nadded. If the first <code>then<\/code> or <code>catchError<\/code> call happens after this future\nhas completed with an error then the error is reported as unhandled error.\nSee the description on <a href=\"dart-async\/Future-class.html\">Future<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;S&gt; then&lt;S&gt;(FutureOr&lt;S&gt; onValue(T value), {Function onError}) =&gt;\n    _future.then(onValue, onError: onError);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/then.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "then",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": [
                {
                    "name": "onError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Time-out the future computation after <code>timeLimit<\/code> has passed.<\/p>\n<p>Returns a new future that completes with the same value as this future,\nif this future completes in time.<\/p>\n<p>If this future does not complete before <code>timeLimit<\/code> has passed,\nthe <code>onTimeout<\/code> action is executed instead, and its result (whether it\nreturns or throws) is used as the result of the returned future.\nThe <code>onTimeout<\/code> function must return a <code>T<\/code> or a <code>Future&lt;T&gt;<\/code>.<\/p>\n<p>If <code>onTimeout<\/code> is omitted, a timeout will cause the returned future to\ncomplete with a <a href=\"dart-async\/TimeoutException-class.html\">TimeoutException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; timeout(Duration timeLimit, {onTimeout()}) =&gt;\n    _future.timeout(timeLimit, onTimeout: onTimeout);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/timeout.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "timeout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": [
                {
                    "name": "onTimeout",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "timeLimit",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Duration"
                }
            ]
        },
        {
            "desc": "<p>Creates a wrapper which throws if <code>future<\/code>'s value isn't an instance of\n<code>T<\/code>.<\/p>\n<p>This soundly converts a <a href=\"dart-async\/Future-class.html\">Future<\/a> to a <code>Future&lt;T&gt;<\/code>, regardless of its\noriginal generic type, by asserting that its value is an instance of <code>T<\/code>\nwhenever it's provided. If it's not, the future throws a <a href=\"dart-core\/CastError-class.html\">CastError<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use future.then((v) =&gt; v as T) instead.')\nstatic Future&lt;T&gt; typed&lt;T&gt;(Future future) =&gt;\n    future is Future&lt;T&gt; ? future : future.then((v) =&gt; v as T);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/typed.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "typed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": [
                {
                    "name": "future",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Future"
                }
            ]
        },
        {
            "desc": "<p>Registers a function to be called when this future completes.<\/p>\n<p>The <code>action<\/code> function is called when this future completes, whether it\ndoes so with a value or with an error.<\/p>\n<p>This is the asynchronous equivalent of a \"finally\" block.<\/p>\n<p>The future returned by this call, <code>f<\/code>, will complete the same way\nas this future unless an error occurs in the <code>action<\/code> call, or in\na <a href=\"dart-async\/Future-class.html\">Future<\/a> returned by the <code>action<\/code> call. If the call to <code>action<\/code>\ndoes not return a future, its return value is ignored.<\/p>\n<p>If the call to <code>action<\/code> throws, then <code>f<\/code> is completed with the\nthrown error.<\/p>\n<p>If the call to <code>action<\/code> returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>, <code>f2<\/code>, then completion of\n<code>f<\/code> is delayed until <code>f2<\/code> completes. If <code>f2<\/code> completes with\nan error, that will be the result of <code>f<\/code> too. The value of <code>f2<\/code> is always\nignored.<\/p>\n<p>This method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>Future&lt;T&gt; whenComplete(action()) {\n  return this.then((v) {\n    var f2 = action();\n    if (f2 is Future) return f2.then((_) =&gt; v);\n    return v\n  }, onError: (e) {\n    var f2 = action();\n    if (f2 is Future) return f2.then((_) { throw e; });\n    throw e;\n  });\n}\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;T&gt; whenComplete(action()) =&gt; _future.whenComplete(action);<\/code><\/pre>\n    ",
            "href": "package-async_async\/DelegatingFuture\/whenComplete.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "whenComplete",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.DelegatingFuture",
            "params": [
                {
                    "name": "action",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        }
    ],
    "props": []
}