{
    "desc": "<p>An item with a checkmark in a material design popup menu.<\/p>\n<p>To show a popup menu, use the <a href=\"material\/showMenu.html\">showMenu<\/a> function. To create a button that\nshows a popup menu, consider using <a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a>.<\/p>\n<p>A <a href=\"material\/CheckedPopupMenuItem-class.html\">CheckedPopupMenuItem<\/a> is 48 pixels high, which matches the default height\nof a <a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a>. The horizontal layout uses a <a href=\"material\/ListTile-class.html\">ListTile<\/a>; the checkmark\nis an <a href=\"material\/Icons\/done-constant.html\">Icons.done<\/a> icon, shown in the <a href=\"material\/ListTile\/leading.html\">ListTile.leading<\/a> position.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nSuppose a <code>Commands<\/code> enum exists that lists the possible commands from a\nparticular popup menu, including <code>Commands.heroAndScholar<\/code> and\n<code>Commands.hurricaneCame<\/code>, and further suppose that there is a\n<code>_heroAndScholar<\/code> member field which is a boolean. The example below shows a\nmenu with one menu item with a checkmark that can toggle the boolean, and\none menu item without a checkmark for selecting the second option. (It also\nshows a divider placed between the two menu items.)\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">PopupMenuButton&lt;Commands&gt;(\n  onSelected: (Commands result) {\n    switch (result) {\n      case Commands.heroAndScholar:\n        setState(() { _heroAndScholar = !_heroAndScholar; });\n        break;\n      case Commands.hurricaneCame:\n        \/\/ ...handle hurricane option\n        break;\n      \/\/ ...other items handled here\n    }\n  },\n  itemBuilder: (BuildContext context) =&gt; &lt;PopupMenuEntry&lt;Commands&gt;&gt;[\n    CheckedPopupMenuItem&lt;Commands&gt;(\n      checked: _heroAndScholar,\n      value: Commands.heroAndScholar,\n      child: const Text('Hero and scholar'),\n    ),\n    const PopupMenuDivider(),\n    const PopupMenuItem&lt;Commands&gt;(\n      value: Commands.hurricaneCame,\n      child: ListTile(leading: Icon(null), title: Text('Bring hurricane')),\n    ),\n    \/\/ ...other items listed here\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>In particular, observe how the second menu item uses a <a href=\"material\/ListTile-class.html\">ListTile<\/a> with a\nblank <a href=\"widgets\/Icon-class.html\">Icon<\/a> in the <a href=\"material\/ListTile\/leading.html\">ListTile.leading<\/a> position to get the same alignment as\nthe item with the checkmark.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/PopupMenuItem-class.html\">PopupMenuItem<\/a>, a popup menu entry for picking a command (as opposed to\ntoggling a value).<\/li>\n<li>\n<a href=\"material\/PopupMenuDivider-class.html\">PopupMenuDivider<\/a>, a popup menu entry that is just a horizontal line.<\/li>\n<li>\n<a href=\"material\/showMenu.html\">showMenu<\/a>, a method to dynamically show a popup menu at a given location.<\/li>\n<li>\n<a href=\"material\/PopupMenuButton-class.html\">PopupMenuButton<\/a>, an <a href=\"material\/IconButton-class.html\">IconButton<\/a> that automatically shows a menu when\nit is tapped.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/CheckedPopupMenuItem-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.CheckedPopupMenuItem",
    "shortname": "CheckedPopupMenuItem",
    "extends": [
        "material.PopupMenuItem",
        "material.PopupMenuEntry",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a popup menu item with a checkmark.<\/p>\n<p>By default, the menu item is <code>enabled<\/code> but unchecked. To mark the item as\nchecked, set <code>checked<\/code> to true.<\/p>\n<p>The <code>checked<\/code> and <code>enabled<\/code> arguments must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CheckedPopupMenuItem({\n  Key key,\n  T value,\n  this.checked = false,\n  bool enabled = true,\n  Widget child,\n}) : assert(checked != null),\n     super(\n  key: key,\n  value: value,\n  enabled: enabled,\n  child: child,\n);<\/code><\/pre>\n    ",
            "href": "material\/CheckedPopupMenuItem\/CheckedPopupMenuItem.html",
            "isDeprecated": false,
            "type": "",
            "name": "CheckedPopupMenuItem",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.CheckedPopupMenuItem",
            "params": [
                {
                    "name": "checked",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "enabled",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/CheckedPopupMenuItem\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CheckedPopupMenuItemState&lt;T&gt; createState() =&gt; _CheckedPopupMenuItemState&lt;T&gt;();<\/code><\/pre>\n    ",
            "href": "material\/CheckedPopupMenuItem\/createState.html",
            "isDeprecated": false,
            "type": "<_CheckedPopupMenuItemState<T>>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.CheckedPopupMenuItem",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether to display a checkmark next to the menu item.<\/p>\n<p>Defaults to false.<\/p>\n<p>When true, an <a href=\"material\/Icons\/done-constant.html\">Icons.done<\/a> checkmark is displayed.<\/p>\n<p>When this popup menu item is selected, the checkmark will fade in or out\nas appropriate to represent the implied new state.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checked\n\n<\/code><\/pre>\n        ",
            "href": "material\/CheckedPopupMenuItem\/checked.html",
            "name": "checked",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CheckedPopupMenuItem",
            "params": []
        },
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a>. An appropriate <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> is put in scope for\nthe child. The text should be short enough that it won't wrap.<\/p>\n<p>This widget is placed in the <a href=\"material\/ListTile\/title.html\">ListTile.title<\/a> slot of a <a href=\"material\/ListTile-class.html\">ListTile<\/a> whose\n<a href=\"material\/ListTile\/leading.html\">ListTile.leading<\/a> slot is an <a href=\"material\/Icons\/done-constant.html\">Icons.done<\/a> icon.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget get child =&gt; super.child;<\/code><\/pre>\n        ",
            "href": "material\/CheckedPopupMenuItem\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.CheckedPopupMenuItem",
            "params": []
        }
    ]
}