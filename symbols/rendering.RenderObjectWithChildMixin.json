{
    "name": "rendering.RenderObjectWithChildMixin",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "RenderObjectWithChildMixin",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "rendering\/RenderObjectWithChildMixin\/RenderObjectWithChildMixin.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "attach",
            "type": "",
            "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderObjectWithChildMixin\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderObjectWithChildMixin\/attach.html\">attach<\/a> method, and then <a href=\"rendering\/RenderObjectWithChildMixin\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [
                {
                    "name": "owner",
                    "type": "rendering.PipelineOwner",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderObjectWithChildMixin\/attach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(PipelineOwner owner) {\n  super.attach(owner);\n  if (_child != null)\n    _child.attach(owner);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "debugDescribeChildren",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"rendering\/RenderObject\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"rendering\/RenderObjectWithChildMixin\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RenderObjectWithChildMixin\/debugDescribeChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  return child != null ? &lt;DiagnosticsNode&gt;[child.toDiagnosticsNode(name: 'child')] : &lt;DiagnosticsNode&gt;[];\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "foundation.DiagnosticsNode"
            ]
        },
        {
            "name": "debugValidateChild",
            "type": "dart:core.bool",
            "desc": "<p>Checks whether the given render object has the correct <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> to be\na child of this render object.<\/p>\n<p>Does nothing if assertions are disabled.<\/p>\n<p>Always returns true.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [
                {
                    "name": "child",
                    "type": "rendering.RenderObject",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderObjectWithChildMixin\/debugValidateChild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugValidateChild(RenderObject child) {\n  assert(() {\n    if (child is! ChildType) {\n      throw FlutterError(\n        'A $runtimeType expected a child of type $ChildType but received a '\n        'child of type ${child.runtimeType}.\\n'\n        'RenderObjects expect specific types of children because they '\n        'coordinate with their children during layout and paint. For '\n        'example, a RenderSliver cannot be the child of a RenderBox because '\n        'a RenderSliver does not understand the RenderBox layout protocol.\\n'\n        '\\n'\n        'The $runtimeType that expected a $ChildType child was created by:\\n'\n        '  $debugCreator\\n'\n        '\\n'\n        'The ${child.runtimeType} that did not match the expected child type '\n        'was created by:\\n'\n        '  ${child.debugCreator}\\n'\n      );\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "detach",
            "type": "",
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderObjectWithChildMixin\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderObjectWithChildMixin\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderObjectWithChildMixin\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RenderObjectWithChildMixin\/detach.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  super.detach();\n  if (_child != null)\n    _child.detach();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "redepthChildren",
            "type": "",
            "desc": "<p>Adjust the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of this node's children, if any.<\/p>\n<p>Override this method in subclasses with child nodes to call <a href=\"foundation\/AbstractNode\/redepthChild.html\">redepthChild<\/a>\nfor each child. Do not call this method directly.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/RenderObjectWithChildMixin\/redepthChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid redepthChildren() {\n  if (_child != null)\n    redepthChild(_child);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "visitChildren",
            "type": "",
            "desc": "<p>Calls visitor for each immediate child of this render object.<\/p>\n<p>Override in subclasses with children and call the visitor for each child.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "sig": "",
            "params": [
                {
                    "name": "visitor",
                    "type": "rendering.RenderObjectVisitor",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "rendering\/RenderObjectWithChildMixin\/visitChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid visitChildren(RenderObjectVisitor visitor) {\n  if (_child != null)\n    visitor(_child);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "child",
            "type": "",
            "types": [],
            "desc": "<p>The render object's unique child<\/p>\n        ",
            "memberOf": "rendering.RenderObjectWithChildMixin",
            "isConstant": false,
            "href": "rendering\/RenderObjectWithChildMixin\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ChildType get child =&gt; _child;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/RenderObjectWithChildMixin-mixin.html",
    "desc": "<p>Generic mixin for render objects with one child.<\/p>\n<p>Provides a child model for a render object subclass that has a unique child.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "RenderObjectWithChildMixin"
}