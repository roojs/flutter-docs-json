{
    "desc": "<p>Holds the color, shape, and typography values for a material design slider\ntheme.<\/p>\n<p>Use this class to configure a <a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a> widget, or to set the\n<a href=\"material\/ThemeData\/sliderTheme.html\">ThemeData.sliderTheme<\/a> for a <a href=\"material\/Theme-class.html\">Theme<\/a> widget.<\/p>\n<p>To obtain the current ambient slider theme, use <a href=\"material\/SliderTheme\/of.html\">SliderTheme.of<\/a>.<\/p>\n<p>The parts of a slider are:<\/p>\n<ul>\n<li>The \"thumb\", which is a shape that slides horizontally when the user\ndrags it.<\/li>\n<li>The \"track\", which is the line that the slider thumb slides along.<\/li>\n<li>The \"tick marks\", which are regularly spaced marks that are drawn when\nusing discrete divisions.<\/li>\n<li>The \"value indicator\", which appears when the user is dragging the thumb\nto indicate the value being selected.<\/li>\n<li>The \"overlay\", which appears around the thumb, and is shown when the\nthumb is pressed, focused, or hovered. It is painted underneath the\nthumb, so it must extend beyond the bounds of the thumb itself to\nactually be visible.<\/li>\n<li>The \"active\" side of the slider is the side between the thumb and the\nminimum value.<\/li>\n<li>The \"inactive\" side of the slider is the side between the thumb and the\nmaximum value.<\/li>\n<li>The <a href=\"material\/Slider-class.html\">Slider<\/a> is disabled when it is not accepting user input. See\n<a href=\"material\/Slider-class.html\">Slider<\/a> for details on when this happens.<\/li>\n<\/ul>\n<p>The thumb, track, tick marks, value indicator, and overlay can be customized\nby creating subclasses of <a href=\"material\/SliderTrackShape-class.html\">SliderTrackShape<\/a>,\n<a href=\"material\/SliderComponentShape-class.html\">SliderComponentShape<\/a>, and\/or <a href=\"material\/SliderTickMarkShape-class.html\">SliderTickMarkShape<\/a>. See\n<a href=\"material\/RoundSliderThumbShape-class.html\">RoundSliderThumbShape<\/a>, <a href=\"material\/RectangularSliderTrackShape-class.html\">RectangularSliderTrackShape<\/a>,\n<a href=\"material\/RoundSliderTickMarkShape-class.html\">RoundSliderTickMarkShape<\/a>, <a href=\"material\/PaddleSliderValueIndicatorShape-class.html\">PaddleSliderValueIndicatorShape<\/a>, and\n<a href=\"material\/RoundSliderOverlayShape-class.html\">RoundSliderOverlayShape<\/a> for examples.<\/p>\n<p>The track painting can be skipped by specifying 0 for <a href=\"material\/SliderThemeData\/trackHeight.html\">trackHeight<\/a>.\nThe thumb painting can be skipped by specifying\n<a href=\"material\/SliderComponentShape\/noThumb.html\">SliderComponentShape.noThumb<\/a> for <a href=\"material\/SliderThemeData\/thumbShape.html\">SliderThemeData.thumbShape<\/a>.\nThe overlay painting can be skipped by specifying\n<a href=\"material\/SliderComponentShape\/noOverlay.html\">SliderComponentShape.noOverlay<\/a> for <a href=\"material\/SliderThemeData\/overlayShape.html\">SliderThemeData.overlayShape<\/a>.\nThe tick mark painting can be skipped by specifying\n<a href=\"material\/SliderTickMarkShape\/noTickMark.html\">SliderTickMarkShape.noTickMark<\/a> for <a href=\"material\/SliderThemeData\/tickMarkShape.html\">SliderThemeData.tickMarkShape<\/a>.\nThe value indicator painting can be skipped by specifying the\nappropriate <a href=\"material\/ShowValueIndicator-class.html\">ShowValueIndicator<\/a> for <a href=\"material\/SliderThemeData\/showValueIndicator.html\">SliderThemeData.showValueIndicator<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a> widget, which can override the slider theme of its\nchildren.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a> widget, which performs a similar function to <a href=\"material\/SliderTheme-class.html\">SliderTheme<\/a>,\nbut for overall themes.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, which has a default <a href=\"material\/SliderThemeData-class.html\">SliderThemeData<\/a>.<\/li>\n<li>\n<a href=\"material\/SliderTrackShape-class.html\">SliderTrackShape<\/a>, to define custom slider track shapes.<\/li>\n<li>\n<a href=\"material\/SliderComponentShape-class.html\">SliderComponentShape<\/a>, to define custom slider component shapes.<\/li>\n<li>\n<a href=\"material\/SliderTickMarkShape-class.html\">SliderTickMarkShape<\/a>, to define custom slider tick mark shapes.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/SliderThemeData-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "material",
    "name": "material.SliderThemeData",
    "shortname": "SliderThemeData",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a <a href=\"material\/SliderThemeData-class.html\">SliderThemeData<\/a> given a set of exact values. All the values\nmust be specified.<\/p>\n<p>This will rarely be used directly. It is used by <a href=\"material\/SliderThemeData\/lerp.html\">lerp<\/a> to\ncreate intermediate themes based on two themes.<\/p>\n<p>The simplest way to create a SliderThemeData is to use\n<a href=\"material\/SliderThemeData\/copyWith.html\">copyWith<\/a> on the one you get from <a href=\"material\/SliderTheme\/of.html\">SliderTheme.of<\/a>, or create an\nentirely new one with <a href=\"material\/SliderThemeData\/SliderThemeData.fromPrimaryColors.html\">SliderThemeData.fromPrimaryColors<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class Blissful extends StatefulWidget {\n  @override\n  State createState() =&gt; BlissfulState();\n}\n\nclass BlissfulState extends State&lt;Blissful&gt; {\n  double _bliss;\n\n  @override\n  Widget build(BuildContext context) {\n    return SliderTheme(\n      data: SliderTheme.of(context).copyWith(activeTrackColor: const Color(0xff404080)),\n      child: Slider(\n        onChanged: (double value) { setState(() { _bliss = value; }); },\n        value: _bliss,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SliderThemeData({\n  @required this.trackHeight,\n  @required this.activeTrackColor,\n  @required this.inactiveTrackColor,\n  @required this.disabledActiveTrackColor,\n  @required this.disabledInactiveTrackColor,\n  @required this.activeTickMarkColor,\n  @required this.inactiveTickMarkColor,\n  @required this.disabledActiveTickMarkColor,\n  @required this.disabledInactiveTickMarkColor,\n  @required this.thumbColor,\n  @required this.disabledThumbColor,\n  @required this.overlayColor,\n  @required this.valueIndicatorColor,\n  @required this.trackShape,\n  @required this.tickMarkShape,\n  @required this.thumbShape,\n  @required this.overlayShape,\n  @required this.valueIndicatorShape,\n  @required this.showValueIndicator,\n  @required this.valueIndicatorTextStyle,\n}) : assert(trackHeight != null),\n     assert(activeTrackColor != null),\n     assert(inactiveTrackColor != null),\n     assert(disabledActiveTrackColor != null),\n     assert(disabledInactiveTrackColor != null),\n     assert(activeTickMarkColor != null),\n     assert(inactiveTickMarkColor != null),\n     assert(disabledActiveTickMarkColor != null),\n     assert(disabledInactiveTickMarkColor != null),\n     assert(thumbColor != null),\n     assert(disabledThumbColor != null),\n     assert(overlayColor != null),\n     assert(valueIndicatorColor != null),\n     assert(trackShape != null),\n     assert(tickMarkShape != null),\n     assert(thumbShape != null),\n     assert(overlayShape != null),\n     assert(valueIndicatorShape != null),\n     assert(valueIndicatorTextStyle != null),\n     assert(showValueIndicator != null);<\/code><\/pre>\n    ",
            "href": "material\/SliderThemeData\/SliderThemeData.html",
            "isDeprecated": false,
            "type": "",
            "name": "SliderThemeData",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.SliderThemeData",
            "params": [
                {
                    "name": "activeTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "activeTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledActiveTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledActiveTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledInactiveTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledInactiveTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledThumbColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inactiveTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inactiveTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "overlayColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "overlayShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SliderComponentShape"
                },
                {
                    "name": "showValueIndicator",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.ShowValueIndicator"
                },
                {
                    "name": "thumbColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "thumbShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SliderComponentShape"
                },
                {
                    "name": "tickMarkShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SliderTickMarkShape"
                },
                {
                    "name": "trackHeight",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "trackShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SliderTrackShape"
                },
                {
                    "name": "valueIndicatorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "valueIndicatorShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "material.SliderComponentShape"
                },
                {
                    "name": "valueIndicatorTextStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                }
            ]
        },
        {
            "desc": "<p>Creates a copy of this object but with the given fields replaced with the\nnew values.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SliderThemeData copyWith({\n  double trackHeight,\n  Color activeTrackColor,\n  Color inactiveTrackColor,\n  Color disabledActiveTrackColor,\n  Color disabledInactiveTrackColor,\n  Color activeTickMarkColor,\n  Color inactiveTickMarkColor,\n  Color disabledActiveTickMarkColor,\n  Color disabledInactiveTickMarkColor,\n  Color thumbColor,\n  Color disabledThumbColor,\n  Color overlayColor,\n  Color valueIndicatorColor,\n  SliderTrackShape trackShape,\n  SliderTickMarkShape tickMarkShape,\n  SliderComponentShape thumbShape,\n  SliderComponentShape overlayShape,\n  SliderComponentShape valueIndicatorShape,\n  ShowValueIndicator showValueIndicator,\n  TextStyle valueIndicatorTextStyle,\n}) {\n  return SliderThemeData(\n    trackHeight: trackHeight ?? this.trackHeight,\n    activeTrackColor: activeTrackColor ?? this.activeTrackColor,\n    inactiveTrackColor: inactiveTrackColor ?? this.inactiveTrackColor,\n    disabledActiveTrackColor: disabledActiveTrackColor ?? this.disabledActiveTrackColor,\n    disabledInactiveTrackColor: disabledInactiveTrackColor ?? this.disabledInactiveTrackColor,\n    activeTickMarkColor: activeTickMarkColor ?? this.activeTickMarkColor,\n    inactiveTickMarkColor: inactiveTickMarkColor ?? this.inactiveTickMarkColor,\n    disabledActiveTickMarkColor: disabledActiveTickMarkColor ?? this.disabledActiveTickMarkColor,\n    disabledInactiveTickMarkColor: disabledInactiveTickMarkColor ?? this.disabledInactiveTickMarkColor,\n    thumbColor: thumbColor ?? this.thumbColor,\n    disabledThumbColor: disabledThumbColor ?? this.disabledThumbColor,\n    overlayColor: overlayColor ?? this.overlayColor,\n    valueIndicatorColor: valueIndicatorColor ?? this.valueIndicatorColor,\n    trackShape: trackShape ?? this.trackShape,\n    tickMarkShape: tickMarkShape ?? this.tickMarkShape,\n    thumbShape: thumbShape ?? this.thumbShape,\n    overlayShape: overlayShape ?? this.overlayShape,\n    valueIndicatorShape: valueIndicatorShape ?? this.valueIndicatorShape,\n    showValueIndicator: showValueIndicator ?? this.showValueIndicator,\n    valueIndicatorTextStyle: valueIndicatorTextStyle ?? this.valueIndicatorTextStyle,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/SliderThemeData\/copyWith.html",
            "isDeprecated": false,
            "type": "material.SliderThemeData",
            "name": "copyWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SliderThemeData",
            "params": [
                {
                    "name": "activeTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "activeTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledActiveTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledActiveTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledInactiveTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledInactiveTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledThumbColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inactiveTickMarkColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "inactiveTrackColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "overlayColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "overlayShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderComponentShape"
                },
                {
                    "name": "showValueIndicator",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.ShowValueIndicator"
                },
                {
                    "name": "thumbColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "thumbShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderComponentShape"
                },
                {
                    "name": "tickMarkShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderTickMarkShape"
                },
                {
                    "name": "trackHeight",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "trackShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderTrackShape"
                },
                {
                    "name": "valueIndicatorColor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "valueIndicatorShape",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderComponentShape"
                },
                {
                    "name": "valueIndicatorTextStyle",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.TextStyle"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/SliderThemeData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  final ThemeData defaultTheme = ThemeData.fallback();\n  final SliderThemeData defaultData = SliderThemeData.fromPrimaryColors(\n    primaryColor: defaultTheme.primaryColor,\n    primaryColorDark: defaultTheme.primaryColorDark,\n    primaryColorLight: defaultTheme.primaryColorLight,\n    valueIndicatorTextStyle: defaultTheme.accentTextTheme.body2,\n  );\n  properties.add(DiagnosticsProperty&lt;Color&gt;('activeTrackColor', activeTrackColor, defaultValue: defaultData.activeTrackColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('activeTrackColor', activeTrackColor, defaultValue: defaultData.activeTrackColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('inactiveTrackColor', inactiveTrackColor, defaultValue: defaultData.inactiveTrackColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledActiveTrackColor', disabledActiveTrackColor, defaultValue: defaultData.disabledActiveTrackColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledInactiveTrackColor', disabledInactiveTrackColor, defaultValue: defaultData.disabledInactiveTrackColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('activeTickMarkColor', activeTickMarkColor, defaultValue: defaultData.activeTickMarkColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('inactiveTickMarkColor', inactiveTickMarkColor, defaultValue: defaultData.inactiveTickMarkColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledActiveTickMarkColor', disabledActiveTickMarkColor, defaultValue: defaultData.disabledActiveTickMarkColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledInactiveTickMarkColor', disabledInactiveTickMarkColor, defaultValue: defaultData.disabledInactiveTickMarkColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('thumbColor', thumbColor, defaultValue: defaultData.thumbColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('disabledThumbColor', disabledThumbColor, defaultValue: defaultData.disabledThumbColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('overlayColor', overlayColor, defaultValue: defaultData.overlayColor, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('valueIndicatorColor', valueIndicatorColor, defaultValue: defaultData.valueIndicatorColor));\n  properties.add(DiagnosticsProperty&lt;SliderTrackShape&gt;('trackShape', trackShape, defaultValue: defaultData.trackShape, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;SliderTickMarkShape&gt;('tickMarkShape', tickMarkShape, defaultValue: defaultData.tickMarkShape, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;SliderComponentShape&gt;('thumbShape', thumbShape, defaultValue: defaultData.thumbShape, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;SliderComponentShape&gt;('overlayShape', overlayShape, defaultValue: defaultData.overlayShape, level: DiagnosticLevel.debug));\n  properties.add(DiagnosticsProperty&lt;SliderComponentShape&gt;('valueIndicatorShape', valueIndicatorShape, defaultValue: defaultData.valueIndicatorShape, level: DiagnosticLevel.debug));\n  properties.add(EnumProperty&lt;ShowValueIndicator&gt;('showValueIndicator', showValueIndicator, defaultValue: defaultData.showValueIndicator));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('valueIndicatorTextStyle', valueIndicatorTextStyle, defaultValue: defaultData.valueIndicatorTextStyle));\n}<\/code><\/pre>\n    ",
            "href": "material\/SliderThemeData\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SliderThemeData",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Linearly interpolate between two slider themes.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static SliderThemeData lerp(SliderThemeData a, SliderThemeData b, double t) {\n  assert(a != null);\n  assert(b != null);\n  assert(t != null);\n  return SliderThemeData(\n    trackHeight: lerpDouble(a.trackHeight, b.trackHeight, t),\n    activeTrackColor: Color.lerp(a.activeTrackColor, b.activeTrackColor, t),\n    inactiveTrackColor: Color.lerp(a.inactiveTrackColor, b.inactiveTrackColor, t),\n    disabledActiveTrackColor: Color.lerp(a.disabledActiveTrackColor, b.disabledActiveTrackColor, t),\n    disabledInactiveTrackColor: Color.lerp(a.disabledInactiveTrackColor, b.disabledInactiveTrackColor, t),\n    activeTickMarkColor: Color.lerp(a.activeTickMarkColor, b.activeTickMarkColor, t),\n    inactiveTickMarkColor: Color.lerp(a.inactiveTickMarkColor, b.inactiveTickMarkColor, t),\n    disabledActiveTickMarkColor: Color.lerp(a.disabledActiveTickMarkColor, b.disabledActiveTickMarkColor, t),\n    disabledInactiveTickMarkColor: Color.lerp(a.disabledInactiveTickMarkColor, b.disabledInactiveTickMarkColor, t),\n    thumbColor: Color.lerp(a.thumbColor, b.thumbColor, t),\n    disabledThumbColor: Color.lerp(a.disabledThumbColor, b.disabledThumbColor, t),\n    overlayColor: Color.lerp(a.overlayColor, b.overlayColor, t),\n    valueIndicatorColor: Color.lerp(a.valueIndicatorColor, b.valueIndicatorColor, t),\n    trackShape: t &lt; 0.5 ? a.trackShape : b.trackShape,\n    tickMarkShape: t &lt; 0.5 ? a.tickMarkShape : b.tickMarkShape,\n    thumbShape: t &lt; 0.5 ? a.thumbShape : b.thumbShape,\n    overlayShape: t &lt; 0.5 ? a.overlayShape : b.overlayShape,\n    valueIndicatorShape: t &lt; 0.5 ? a.valueIndicatorShape : b.valueIndicatorShape,\n    showValueIndicator: t &lt; 0.5 ? a.showValueIndicator : b.showValueIndicator,\n    valueIndicatorTextStyle: TextStyle.lerp(a.valueIndicatorTextStyle, b.valueIndicatorTextStyle, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/SliderThemeData\/lerp.html",
            "isDeprecated": false,
            "type": "material.SliderThemeData",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.SliderThemeData",
            "params": [
                {
                    "name": "a",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "b",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "material.SliderThemeData"
                },
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The color of the track's tick marks that are drawn between the <a href=\"material\/Slider\/min.html\">Slider.min<\/a>\nposition and the current thumb position.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeTickMarkColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/activeTickMarkColor.html",
            "name": "activeTickMarkColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the <a href=\"material\/Slider-class.html\">Slider<\/a> track between the <a href=\"material\/Slider\/min.html\">Slider.min<\/a> position and the\ncurrent thumb position.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeTrackColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/activeTrackColor.html",
            "name": "activeTrackColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the track's tick marks that are drawn between the <a href=\"material\/Slider\/min.html\">Slider.min<\/a>\nposition and the current thumb position when the <a href=\"material\/Slider-class.html\">Slider<\/a> is disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledActiveTickMarkColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/disabledActiveTickMarkColor.html",
            "name": "disabledActiveTickMarkColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the <a href=\"material\/Slider-class.html\">Slider<\/a> track between the <a href=\"material\/Slider\/min.html\">Slider.min<\/a> position and the\ncurrent thumb position when the <a href=\"material\/Slider-class.html\">Slider<\/a> is disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledActiveTrackColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/disabledActiveTrackColor.html",
            "name": "disabledActiveTrackColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the track's tick marks that are drawn between the current\nthumb position and the <a href=\"material\/Slider\/max.html\">Slider.max<\/a> position when the <a href=\"material\/Slider-class.html\">Slider<\/a> is\ndisabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledInactiveTickMarkColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/disabledInactiveTickMarkColor.html",
            "name": "disabledInactiveTickMarkColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the <a href=\"material\/Slider-class.html\">Slider<\/a> track between the current thumb position and the\n<a href=\"material\/Slider\/max.html\">Slider.max<\/a> position when the <a href=\"material\/Slider-class.html\">Slider<\/a> is disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledInactiveTrackColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/disabledInactiveTrackColor.html",
            "name": "disabledInactiveTrackColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color given to the <a href=\"material\/SliderThemeData\/thumbShape.html\">thumbShape<\/a> to draw itself with when the\n<a href=\"material\/Slider-class.html\">Slider<\/a> is disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledThumbColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/disabledThumbColor.html",
            "name": "disabledThumbColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"material\/SliderThemeData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"material\/SliderThemeData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"material\/SliderThemeData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"material\/SliderThemeData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"material\/SliderThemeData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"material\/SliderThemeData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    trackHeight,\n    activeTrackColor,\n    inactiveTrackColor,\n    disabledActiveTrackColor,\n    disabledInactiveTrackColor,\n    activeTickMarkColor,\n    inactiveTickMarkColor,\n    disabledActiveTickMarkColor,\n    disabledInactiveTickMarkColor,\n    thumbColor,\n    disabledThumbColor,\n    overlayColor,\n    valueIndicatorColor,\n    trackShape,\n    tickMarkShape,\n    thumbShape,\n    overlayShape,\n    valueIndicatorShape,\n    showValueIndicator,\n    valueIndicatorTextStyle,\n  );\n}<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the track's tick marks that are drawn between the current\nthumb position and the <a href=\"material\/Slider\/max.html\">Slider.max<\/a> position.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color inactiveTickMarkColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/inactiveTickMarkColor.html",
            "name": "inactiveTickMarkColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the <a href=\"material\/Slider-class.html\">Slider<\/a> track between the current thumb position and the\n<a href=\"material\/Slider\/max.html\">Slider.max<\/a> position.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color inactiveTrackColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/inactiveTrackColor.html",
            "name": "inactiveTrackColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color of the overlay drawn around the slider thumb when it is pressed.<\/p>\n<p>This is typically a semi-transparent color.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color overlayColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/overlayColor.html",
            "name": "overlayColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The shape that will be used to draw the <a href=\"material\/Slider-class.html\">Slider<\/a>'s overlay.<\/p>\n<p>Both the <a href=\"material\/SliderThemeData\/overlayColor.html\">overlayColor<\/a> and a non default <a href=\"material\/SliderThemeData\/overlayShape.html\">overlayShape<\/a> may be specified.\nIn this case, the <a href=\"material\/SliderThemeData\/overlayColor.html\">overlayColor<\/a> is only used if the <a href=\"material\/SliderThemeData\/overlayShape.html\">overlayShape<\/a>\nexplicitly does so.<\/p>\n<p>The default value is <a href=\"material\/RoundSliderOverlayShape-class.html\">RoundSliderOverlayShape<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderComponentShape overlayShape\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/overlayShape.html",
            "name": "overlayShape",
            "isDeprecated": false,
            "type": "material.SliderComponentShape",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>Whether the value indicator should be shown for different types of\nsliders.<\/p>\n<p>By default, <a href=\"material\/SliderThemeData\/showValueIndicator.html\">showValueIndicator<\/a> is set to\n<a href=\"material\/ShowValueIndicator-class.html\">ShowValueIndicator.onlyForDiscrete<\/a>. The value indicator is only shown\nwhen the thumb is being touched.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShowValueIndicator showValueIndicator\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/showValueIndicator.html",
            "name": "showValueIndicator",
            "isDeprecated": false,
            "type": "material.ShowValueIndicator",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color given to the <a href=\"material\/SliderThemeData\/thumbShape.html\">thumbShape<\/a> to draw itself with.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color thumbColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/thumbColor.html",
            "name": "thumbColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The shape that will be used to draw the <a href=\"material\/Slider-class.html\">Slider<\/a>'s thumb.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderComponentShape thumbShape\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/thumbShape.html",
            "name": "thumbShape",
            "isDeprecated": false,
            "type": "material.SliderComponentShape",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The shape that will be used to draw the <a href=\"material\/Slider-class.html\">Slider<\/a>'s tick marks.<\/p>\n<p>The <a href=\"material\/SliderTickMarkShape\/getPreferredSize.html\">SliderTickMarkShape.getPreferredSize<\/a> is used to help determine the\nlocation of each tick mark on the track. The slider's minimum size will\nbe at least this big.<\/p>\n<p>The default value is <a href=\"material\/RoundSliderTickMarkShape-class.html\">RoundSliderTickMarkShape<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderTickMarkShape tickMarkShape\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/tickMarkShape.html",
            "name": "tickMarkShape",
            "isDeprecated": false,
            "type": "material.SliderTickMarkShape",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The height of the <a href=\"material\/Slider-class.html\">Slider<\/a> track.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double trackHeight\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/trackHeight.html",
            "name": "trackHeight",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The shape that will be used to draw the <a href=\"material\/Slider-class.html\">Slider<\/a>'s track.<\/p>\n<p>The <a href=\"material\/SliderTrackShape\/getPreferredRect.html\">SliderTrackShape.getPreferredRect<\/a> method is used to map\nslider-relative gesture coordinates to the correct thumb position on the\ntrack. It is also used to horizontally position tick marks, when he slider\nis discrete.<\/p>\n<p>The default value is <a href=\"material\/RectangularSliderTrackShape-class.html\">RectangularSliderTrackShape<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderTrackShape trackShape\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/trackShape.html",
            "name": "trackShape",
            "isDeprecated": false,
            "type": "material.SliderTrackShape",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The color given to the <a href=\"material\/SliderThemeData\/valueIndicatorShape.html\">valueIndicatorShape<\/a> to draw itself with.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color valueIndicatorColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/valueIndicatorColor.html",
            "name": "valueIndicatorColor",
            "isDeprecated": false,
            "type": "dart:ui.Color",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The shape that will be used to draw the <a href=\"material\/Slider-class.html\">Slider<\/a>'s value\nindicator.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SliderComponentShape valueIndicatorShape\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/valueIndicatorShape.html",
            "name": "valueIndicatorShape",
            "isDeprecated": false,
            "type": "material.SliderComponentShape",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        },
        {
            "desc": "<p>The text style for the text on the value indicator.<\/p>\n<p>By default this is the <code>ThemeData.accentTextTheme.body2<\/code> text theme.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle valueIndicatorTextStyle\n\n<\/code><\/pre>\n        ",
            "href": "material\/SliderThemeData\/valueIndicatorTextStyle.html",
            "name": "valueIndicatorTextStyle",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "material.SliderThemeData",
            "params": []
        }
    ]
}