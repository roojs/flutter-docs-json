{
    "desc": "<p>A utility class for building Material buttons that depend on the\nambient <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a> and <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n<p>The button's size will expand to fit the child widget, if necessary.<\/p>\n<p>MaterialButtons whose <a href=\"material\/MaterialButton\/onPressed.html\">onPressed<\/a> handler is null will be disabled. To have\nan enabled button, make sure to pass a non-null value for onPressed.<\/p>\n<p>Rather than using this class directly, consider using <a href=\"material\/FlatButton-class.html\">FlatButton<\/a>,\n<a href=\"material\/OutlineButton-class.html\">OutlineButton<\/a>, or <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>, which configure this class with\nappropriate defaults that match the material design specification.<\/p>\n<p>To create a button directly, without inheriting theme defaults, use\n<a href=\"material\/RawMaterialButton-class.html\">RawMaterialButton<\/a>.<\/p>\n<p>If you want an ink-splash effect for taps, but don't want to use a button,\nconsider using <a href=\"material\/InkWell-class.html\">InkWell<\/a> directly.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/IconButton-class.html\">IconButton<\/a>, to create buttons that contain icons rather than text.<\/li><\/ul>",
    "dtype": "class",
    "example": null,
    "href": "material\/MaterialButton-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.MaterialButton",
    "shortname": "MaterialButton",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Called by the underlying <a href=\"material\/InkWell-class.html\">InkWell<\/a> widget's <a href=\"material\/MaterialButton\/onHighlightChanged.html\">InkWell.onHighlightChanged<\/a>\ncallback.<\/p>\n<p>If <a href=\"material\/MaterialButton\/onPressed.html\">onPressed<\/a> changes from null to non-null while a gesture is ongoing,\nthis can fire during the build phase (in which case calling\n<a href=\"widgets\/State\/setState.html\">State.setState<\/a> is not allowed).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onHighlightChanged\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/onHighlightChanged.html",
            "isDeprecated": "0",
            "type": "foundation.ValueChanged<dart:core.bool>",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The callback that is called when the button is tapped or otherwise activated.<\/p>\n<p>If this is set to null, the button will be disabled.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/onPressed.html",
            "isDeprecated": "0",
            "type": "dart:ui.VoidCallback",
            "memberOf": "material.MaterialButton",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a material button.<\/p>\n<p>Rather than creating a material button directly, consider using\n<a href=\"material\/FlatButton-class.html\">FlatButton<\/a> or <a href=\"material\/RaisedButton-class.html\">RaisedButton<\/a>. To create a custom Material button\nconsider using <a href=\"material\/RawMaterialButton-class.html\">RawMaterialButton<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MaterialButton({\n  Key key,\n  @required this.onPressed,\n  this.onHighlightChanged,\n  this.textTheme,\n  this.textColor,\n  this.disabledTextColor,\n  this.color,\n  this.disabledColor,\n  this.highlightColor,\n  this.splashColor,\n  this.colorBrightness,\n  this.elevation,\n  this.highlightElevation,\n  this.disabledElevation,\n  this.padding,\n  this.shape,\n  this.clipBehavior = Clip.none,\n  this.materialTapTargetSize,\n  this.animationDuration,\n  this.minWidth,\n  this.height,\n  this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/MaterialButton\/MaterialButton.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.MaterialButton",
            "params": [
                {
                    "name": "animationDuration",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "child",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "clipBehavior",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Clip"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "colorBrightness",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Brightness"
                },
                {
                    "name": "disabledColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "disabledElevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "disabledTextColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "elevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "height",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "highlightColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "highlightElevation",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "materialTapTargetSize",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.MaterialTapTargetSize"
                },
                {
                    "name": "minWidth",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "onHighlightChanged",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.ValueChanged<dart:core.bool>"
                },
                {
                    "name": "onPressed",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                },
                {
                    "name": "padding",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "shape",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.ShapeBorder"
                },
                {
                    "name": "splashColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textColor",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "textTheme",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "material.ButtonTextTheme"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/MaterialButton\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final ThemeData theme = Theme.of(context);\n  final ButtonThemeData buttonTheme = ButtonTheme.of(context);\n\n  return RawMaterialButton(\n    onPressed: onPressed,\n    onHighlightChanged: onHighlightChanged,\n    fillColor: color,\n    textStyle: theme.textTheme.button.copyWith(color: buttonTheme.getTextColor(this)),\n    highlightColor: highlightColor ?? theme.highlightColor,\n    splashColor: splashColor ?? theme.splashColor,\n    elevation: buttonTheme.getElevation(this),\n    highlightElevation: buttonTheme.getHighlightElevation(this),\n    padding: buttonTheme.getPadding(this),\n    constraints: buttonTheme.getConstraints(this).copyWith(\n      minWidth: minWidth,\n      minHeight: height,\n    ),\n    shape: buttonTheme.getShape(this),\n    clipBehavior: clipBehavior ?? Clip.none,\n    animationDuration: buttonTheme.getAnimationDuration(this),\n    child: child,\n    materialTapTargetSize: materialTapTargetSize ?? theme.materialTapTargetSize,\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/MaterialButton\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.MaterialButton",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"material\/MaterialButton\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('enabled', value: enabled, ifFalse: 'disabled'));\n}<\/code><\/pre>\n    ",
            "href": "material\/MaterialButton\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.MaterialButton",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Defines the duration of animated changes for <a href=\"material\/MaterialButton\/shape.html\">shape<\/a> and <a href=\"material\/MaterialButton\/elevation.html\">elevation<\/a>.<\/p>\n<p>The default value is <a href=\"material\/kThemeChangeDuration-constant.html\">kThemeChangeDuration<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration animationDuration\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/animationDuration.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The button's label.<\/p>\n<p>Often a <a href=\"widgets\/Text-class.html\">Text<\/a> widget in all caps.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/child.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The content will be clipped (or not) according to this option.<\/p>\n<p>See the enum <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> for details of all possible options and their common\nuse cases.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Clip clipBehavior\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/clipBehavior.html",
            "isDeprecated": "0",
            "type": "dart:ui.Clip",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The button's fill color, displayed by its <a href=\"material\/Material-class.html\">Material<\/a>, while it\nis in its default (unpressed, <a href=\"material\/MaterialButton\/enabled.html\">enabled<\/a>) state.<\/p>\n<p>The default fill color is the theme's button color, <a href=\"material\/ThemeData\/buttonColor.html\">ThemeData.buttonColor<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialButton\/disabledColor.html\">disabledColor<\/a> - the fill color of the button when the button is disabled.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/color.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The theme brightness to use for this button.<\/p>\n<p>Defaults to the theme's brightness, <a href=\"material\/ThemeData\/brightness.html\">ThemeData.brightness<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness colorBrightness\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/colorBrightness.html",
            "isDeprecated": "0",
            "type": "dart:ui.Brightness",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The fill color of the button when the button is disabled.<\/p>\n<p>The default value of this color is the theme's disabled color,\n<a href=\"material\/MaterialButton\/disabledColor.html\">ThemeData.disabledColor<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialButton\/color.html\">color<\/a> - the fill color of the button when the button is <a href=\"material\/MaterialButton\/enabled.html\">enabled<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/disabledColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The elevation for the button's <a href=\"material\/Material-class.html\">Material<\/a> relative to its parent when the\nbutton is not <a href=\"material\/MaterialButton\/enabled.html\">enabled<\/a>.<\/p>\n<p>Defaults to 0.0. The value is always non-negative.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/MaterialButton\/elevation.html\">elevation<\/a>, the default elevation.<\/li>\n<li>\n<a href=\"material\/MaterialButton\/highlightElevation.html\">highlightElevation<\/a>, the elevation when the button is pressed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double disabledElevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/disabledElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The color to use for this button's text when the button is disabled.<\/p>\n<p>The button's <a href=\"material\/Material\/textStyle.html\">Material.textStyle<\/a> will be the current theme's button\ntext style, <code>ThemeData.textTheme.button<\/code>, configured with this color.<\/p>\n<p>The default value is the theme's disabled color,\n<a href=\"material\/MaterialButton\/disabledColor.html\">ThemeData.disabledColor<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialButton\/textColor.html\">textColor<\/a> - The color to use for this button's text when the button is <a href=\"material\/MaterialButton\/enabled.html\">enabled<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledTextColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/disabledTextColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The z-coordinate at which to place this button relative to its parent.<\/p>\n<p>This controls the size of the shadow below the raised button.<\/p>\n<p>Defaults to 2, the appropriate elevation for raised buttons. The value\nis always non-negative.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/FlatButton-class.html\">FlatButton<\/a>, a button with no elevation or fill color.<\/li>\n<li>\n<a href=\"material\/MaterialButton\/disabledElevation.html\">disabledElevation<\/a>, the elevation when the button is disabled.<\/li>\n<li>\n<a href=\"material\/MaterialButton\/highlightElevation.html\">highlightElevation<\/a>, the elevation when the button is pressed.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/elevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>Whether the button is enabled or disabled.<\/p>\n<p>Buttons are disabled by default. To enable a button, set its <a href=\"material\/MaterialButton\/onPressed.html\">onPressed<\/a>\nproperty to a non-null value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get enabled =&gt; onPressed != null;<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/enabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The vertical extent of the button.<\/p>\n<p>Defaults to the value from the current <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/height.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The highlight color of the button's <a href=\"material\/InkWell-class.html\">InkWell<\/a>.<\/p>\n<p>The highlight indicates that the button is actively being pressed. It\nappears on top of the button's child and quickly spreads to fill\nthe button, and then fades out.<\/p>\n<p>If <a href=\"material\/MaterialButton\/textTheme.html\">textTheme<\/a> is <a href=\"material\/ButtonTextTheme-class.html\">ButtonTextTheme.primary<\/a>, the default highlight color is\ntransparent (in other words the highlight doesn't appear). Otherwise it's\nthe current theme's highlight color, <a href=\"material\/MaterialButton\/highlightColor.html\">ThemeData.highlightColor<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color highlightColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/highlightColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The elevation for the button's <a href=\"material\/Material-class.html\">Material<\/a> relative to its parent when the\nbutton is <a href=\"material\/MaterialButton\/enabled.html\">enabled<\/a> and pressed.<\/p>\n<p>This controls the size of the shadow below the button. When a tap\ndown gesture occurs within the button, its <a href=\"material\/InkWell-class.html\">InkWell<\/a> displays a\n<a href=\"material\/MaterialButton\/highlightColor.html\">highlightColor<\/a> \"highlight\".<\/p>\n<p>Defaults to 8.0. The value is always non-negative.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/MaterialButton\/elevation.html\">elevation<\/a>, the default elevation.<\/li>\n<li>\n<a href=\"material\/MaterialButton\/disabledElevation.html\">disabledElevation<\/a>, the elevation when the button is disabled.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double highlightElevation\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/highlightElevation.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>Configures the minimum size of the tap target.<\/p>\n<p>Defaults to <a href=\"material\/MaterialButton\/materialTapTargetSize.html\">ThemeData.materialTapTargetSize<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialTapTargetSize-class.html\">MaterialTapTargetSize<\/a>, for a description of how this affects tap targets.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MaterialTapTargetSize materialTapTargetSize\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/materialTapTargetSize.html",
            "isDeprecated": "0",
            "type": "material.MaterialTapTargetSize",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The smallest horizontal extent that the button will occupy.<\/p>\n<p>Defaults to the value from the current <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minWidth\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/minWidth.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The internal padding for the button's <a href=\"material\/MaterialButton\/child.html\">child<\/a>.<\/p>\n<p>Defaults to the value from the current <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>,\n<a href=\"material\/MaterialButton\/padding.html\">ButtonThemeData.padding<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/padding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The shape of the button's <a href=\"material\/Material-class.html\">Material<\/a>.<\/p>\n<p>The button's highlight and splash are clipped to this shape. If the\nbutton has an elevation, then its drop shadow is defined by this\nshape as well.<\/p>\n<p>Defaults to the value from the current <a href=\"material\/ButtonTheme-class.html\">ButtonTheme<\/a>,\n<a href=\"material\/MaterialButton\/shape.html\">ButtonThemeData.shape<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/shape.html",
            "isDeprecated": "0",
            "type": "painting.ShapeBorder",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The splash color of the button's <a href=\"material\/InkWell-class.html\">InkWell<\/a>.<\/p>\n<p>The ink splash indicates that the button has been touched. It\nappears on top of the button's child and spreads in an expanding\ncircle beginning where the touch occurred.<\/p>\n<p>The default splash color is the current theme's splash color,\n<a href=\"material\/MaterialButton\/splashColor.html\">ThemeData.splashColor<\/a>.<\/p>\n<p>The appearance of the splash can be configured with the theme's splash\nfactory, <a href=\"material\/ThemeData\/splashFactory.html\">ThemeData.splashFactory<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color splashColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/splashColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>The color to use for this button's text.<\/p>\n<p>The button's <a href=\"material\/Material\/textStyle.html\">Material.textStyle<\/a> will be the current theme's button\ntext style, <code>ThemeData.textTheme.button<\/code>, configured with this color.<\/p>\n<p>The default text color depends on the button theme's text theme,\n<a href=\"material\/MaterialButton\/textTheme.html\">ButtonThemeData.textTheme<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/MaterialButton\/disabledTextColor.html\">disabledTextColor<\/a>, the text color to use when the button has been\ndisabled.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color textColor\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/textColor.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "material.MaterialButton",
            "params": []
        },
        {
            "desc": "<p>Defines the button's base colors, and the defaults for the button's minimum\nsize, internal padding, and shape.<\/p>\n<p>Defaults to <code>ButtonTheme.of(context).textTheme<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ButtonTextTheme textTheme\n\n<\/code><\/pre>\n        ",
            "href": "material\/MaterialButton\/textTheme.html",
            "isDeprecated": "0",
            "type": "material.ButtonTextTheme",
            "memberOf": "material.MaterialButton",
            "params": []
        }
    ]
}