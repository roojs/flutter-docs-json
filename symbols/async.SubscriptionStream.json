{
    "desc": "<p>A <a href=\"dart-async\/Stream-class.html\">Stream<\/a> adapter for a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a>.<\/p>\n<p>This class allows a <code>StreamSubscription<\/code> to be treated as a <code>Stream<\/code>.<\/p>\n<p>The subscription is paused until the stream is listened to,\nthen it is resumed and the events are passed on to the\nstream's new subscription.<\/p>\n<p>This class assumes that is has control over the original subscription.\nIf other code is accessing the subscription, results may be unpredictable.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-async_async\/SubscriptionStream-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "async",
    "name": "async.SubscriptionStream",
    "shortname": "SubscriptionStream",
    "extends": [
        "dart:async.Stream",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a single-subscription <code>Stream<\/code> from <code>subscription<\/code>.<\/p>\n<p>The <code>subscription<\/code> should not be paused. This class will not resume prior\npauses, so being paused is indistinguishable from not providing any\nevents.<\/p>\n<p>If the <code>subscription<\/code> doesn't send any <code>done<\/code> events, neither will this\nstream. That may be an issue if <code>subscription<\/code> was made to cancel on\nan error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SubscriptionStream(StreamSubscription&lt;T&gt; subscription)\n    : _source = subscription {\n  _source.pause();\n  \/\/ Clear callbacks to avoid keeping them alive unnecessarily.\n  _source.onData(null);\n  _source.onError(null);\n  _source.onDone(null);\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/SubscriptionStream\/SubscriptionStream.html",
            "isDeprecated": false,
            "type": "",
            "name": "SubscriptionStream",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "async.SubscriptionStream",
            "params": [
                {
                    "name": "subscription",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:async.StreamSubscription"
                }
            ]
        },
        {
            "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;T&gt; listen(void onData(T event),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  if (_source == null) {\n    throw new StateError(\"Stream has already been listened to.\");\n  }\n  cancelOnError = (true == cancelOnError);\n  var subscription = _source;\n  _source = null;\n\n  var result = cancelOnError\n      ? new _CancelOnErrorSubscriptionWrapper&lt;T&gt;(subscription)\n      : subscription;\n  result.onData(onData);\n  result.onError(onError);\n  result.onDone(onDone);\n  subscription.resume();\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "package-async_async\/SubscriptionStream\/listen.html",
            "isDeprecated": false,
            "type": "dart:async.StreamSubscription",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "async.SubscriptionStream",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "event",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                },
                {
                    "name": "onDone",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<void>"
                },
                {
                    "name": "onError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                }
            ]
        }
    ],
    "props": []
}