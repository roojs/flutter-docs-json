{
    "desc": "<p>Describes the semantic information associated with the owning\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>The information provided in the configuration is used to generate the\nsemantics tree.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "semantics\/SemanticsConfiguration-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "semantics",
    "name": "semantics.SemanticsConfiguration",
    "shortname": "SemanticsConfiguration",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/copy.html\">SemanticsAction.copy<\/a>.<\/p>\n<p>This is a request to copy the current selection to the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onCopy =&gt; _onCopy;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onCopy.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onCopy",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/cut-constant.html\">SemanticsAction.cut<\/a>.<\/p>\n<p>This is a request to cut the current selection and place it in the\nclipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onCut =&gt; _onCut;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onCut.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onCut",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/p>\n<p>This is a request to decrease the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsConfiguration\/onDecrease.html\">onDecrease<\/a> must ensure that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume down button.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDecrease =&gt; _onDecrease;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onDecrease.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onDecrease",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didGainAccessibilityFocus-constant.html\">SemanticsAction.didGainAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler gains\nthe accessibility focus. The accessibility focus is the\ngreen (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/onDidLoseAccessibilityFocus.html\">onDidLoseAccessibilityFocus<\/a>, which is invoked when the accessibility\nfocus is removed from the node.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDidGainAccessibilityFocus =&gt; _onDidGainAccessibilityFocus;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onDidGainAccessibilityFocus.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onDidGainAccessibilityFocus",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didLoseAccessibilityFocus-constant.html\">SemanticsAction.didLoseAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler\nloses the accessibility focus. The accessibility focus is\nthe green (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/onDidGainAccessibilityFocus.html\">onDidGainAccessibilityFocus<\/a>, which is invoked when the node gains\naccessibility focus.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDidLoseAccessibilityFocus =&gt; _onDidLoseAccessibilityFocus;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onDidLoseAccessibilityFocus.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onDidLoseAccessibilityFocus",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/dismiss-constant.html\">SemanticsAction.dismiss<\/a>.<\/p>\n<p>This is a request to dismiss the currently focused node.<\/p>\n<p>TalkBack users on Android can trigger this action in the local context\nmenu, and VoiceOver users on iOS can trigger this action with a standard\ngesture or menu option.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDismiss =&gt; _onDismiss;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onDismiss.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onDismiss",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/p>\n<p>This is a request to increase the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsConfiguration\/onIncrease.html\">onIncrease<\/a> must ensure that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume up button.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onIncrease =&gt; _onIncrease;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onIncrease.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onIncrease",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/longPress-constant.html\">SemanticsAction.longPress<\/a>.<\/p>\n<p>This is the semantic equivalent of a user pressing and holding the screen\nwith the finger for a few seconds without moving it.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen without lifting the finger after the\nsecond tap.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onLongPress =&gt; _onLongPress;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onLongPress.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onLongPress",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorBackwardByCharacter.html\">SemanticsAction.onMoveCursorBackwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorBackwardByCharacter =&gt; _onMoveCursorBackwardByCharacter;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onMoveCursorBackwardByCharacter.html",
            "isDeprecated": false,
            "type": "semantics.MoveCursorHandler",
            "name": "onMoveCursorBackwardByCharacter",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorBackwardByWord.html\">SemanticsAction.onMoveCursorBackwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorBackwardByWord =&gt; _onMoveCursorBackwardByWord;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onMoveCursorBackwardByWord.html",
            "isDeprecated": false,
            "type": "semantics.MoveCursorHandler",
            "name": "onMoveCursorBackwardByWord",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorForwardByCharacter.html\">SemanticsAction.onMoveCursorForwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field forward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume up key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorForwardByCharacter =&gt; _onMoveCursorForwardByCharacter;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onMoveCursorForwardByCharacter.html",
            "isDeprecated": false,
            "type": "semantics.MoveCursorHandler",
            "name": "onMoveCursorForwardByCharacter",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorForwardByWord.html\">SemanticsAction.onMoveCursorForwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorForwardByWord =&gt; _onMoveCursorForwardByWord;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onMoveCursorForwardByWord.html",
            "isDeprecated": false,
            "type": "semantics.MoveCursorHandler",
            "name": "onMoveCursorForwardByWord",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/paste-constant.html\">SemanticsAction.paste<\/a>.<\/p>\n<p>This is a request to paste the current content of the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onPaste =&gt; _onPaste;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onPaste.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onPaste",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollDown-constant.html\">SemanticsAction.scrollDown<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from top to bottom. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollDown =&gt; _onScrollDown;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onScrollDown.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onScrollDown",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollLeft-constant.html\">SemanticsAction.scrollLeft<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from right to left. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping left with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollLeft =&gt; _onScrollLeft;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onScrollLeft.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onScrollLeft",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollRight-constant.html\">SemanticsAction.scrollRight<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from left to right. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping right with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollRight =&gt; _onScrollRight;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onScrollRight.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onScrollRight",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollUp-constant.html\">SemanticsAction.scrollUp<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from bottom to top. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollUp =&gt; _onScrollUp;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onScrollUp.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onScrollUp",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/setSelection-constant.html\">SemanticsAction.setSelection<\/a>.<\/p>\n<p>This handler is invoked when the user either wants to change the currently\nselected text in a text field or change the position of the cursor.<\/p>\n<p>TalkBack users can trigger this handler by selecting \"Move cursor to\nbeginning\/end\" or \"Select all\" from the local context menu.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SetSelectionHandler get onSetSelection =&gt; _onSetSelection;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onSetSelection.html",
            "isDeprecated": false,
            "type": "semantics.SetSelectionHandler",
            "name": "onSetSelection",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/showOnScreen-constant.html\">SemanticsAction.showOnScreen<\/a>.<\/p>\n<p>A request to fully show the semantics node on screen. For example, this\naction might be send to a node in a scrollable list that is partially off\nscreen to bring it on screen.<\/p>\n<p>For elements in a scrollable list the framework provides a default\nimplementation for this action and it is not advised to provide a\ncustom one via this setter.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onShowOnScreen =&gt; _onShowOnScreen;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onShowOnScreen.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onShowOnScreen",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/tap-constant.html\">SemanticsAction.tap<\/a>.<\/p>\n<p>This is the semantic equivalent of a user briefly tapping the screen with\nthe finger without moving it. For example, a button should implement this\naction.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen while an element is focused.<\/p>\n<p>On Android prior to Android Oreo a double-tap on the screen while an\nelement with an <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handler is focused will not call the registered\nhandler. Instead, Android will simulate a pointer down and up event at the\ncenter of the focused element. Those pointer events will get dispatched\njust like a regular tap with TalkBack disabled would: The events will get\nprocessed by any <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> listening for gestures in the center of\nthe focused element. Therefore, to ensure that <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handlers work\nproperly on Android versions prior to Oreo, a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> with an\nonTap handler should always be wrapping an element that defines a\nsemantic <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handler. By default a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> will register its\nown semantic <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handler that follows this principle.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onTap =&gt; _onTap;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/onTap.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onTap",
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "semantics\/SemanticsConfiguration\/SemanticsConfiguration.html",
            "isDeprecated": false,
            "type": "",
            "name": "SemanticsConfiguration",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Absorb the semantic information from <code>child<\/code> into this configuration.<\/p>\n<p>This adds the semantic information of both configurations and saves the\nresult in this configuration.<\/p>\n<p>The <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> owning the <code>child<\/code> configuration must be a descendant\nof the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> that owns this configuration.<\/p>\n<p>Only configurations that have <a href=\"semantics\/SemanticsConfiguration\/explicitChildNodes.html\">explicitChildNodes<\/a> set to false can\nabsorb other configurations and it is recommended to only absorb compatible\nconfigurations as determined by <a href=\"semantics\/SemanticsConfiguration\/isCompatibleWith.html\">isCompatibleWith<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void absorb(SemanticsConfiguration child) {\n  assert(!explicitChildNodes);\n\n  if (!child.hasBeenAnnotated)\n    return;\n\n  _actions.addAll(child._actions);\n  _customSemanticsActions.addAll(child._customSemanticsActions);\n  _actionsAsBits |= child._actionsAsBits;\n  _flags |= child._flags;\n  _textSelection ??= child._textSelection;\n  _scrollPosition ??= child._scrollPosition;\n  _scrollExtentMax ??= child._scrollExtentMax;\n  _scrollExtentMin ??= child._scrollExtentMin;\n  _hintOverrides ??= child._hintOverrides;\n  _indexInParent ??= child.indexInParent;\n  _scrollIndex ??= child._scrollIndex;\n  _scrollChildCount ??= child._scrollChildCount;\n  _platformViewId ??= child._platformViewId;\n\n  textDirection ??= child.textDirection;\n  _sortKey ??= child._sortKey;\n  _label = _concatStrings(\n    thisString: _label,\n    thisTextDirection: textDirection,\n    otherString: child._label,\n    otherTextDirection: child.textDirection,\n  );\n  if (_decreasedValue == '' || _decreasedValue == null)\n    _decreasedValue = child._decreasedValue;\n  if (_value == '' || _value == null)\n    _value = child._value;\n  if (_increasedValue == '' || _increasedValue == null)\n    _increasedValue = child._increasedValue;\n  _hint = _concatStrings(\n    thisString: _hint,\n    thisTextDirection: textDirection,\n    otherString: child._hint,\n    otherTextDirection: child.textDirection,\n  );\n\n  _thickness = math.max(_thickness, child._thickness + child._elevation);\n\n  _hasBeenAnnotated = _hasBeenAnnotated || child._hasBeenAnnotated;\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsConfiguration\/absorb.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "absorb",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Specifies a <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a> that this configuration wants to apply to all\nchild <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>The tag is added to all <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> that pass through the\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> owning this configuration while looking to be attached to a\nparent <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>Tags are used to communicate to a parent <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> that a child\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> was passed through a particular <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>. The parent\ncan use this information to determine the shape of the semantics tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>RenderSemanticsGestureHandler.excludeFromScrolling<\/code> for an example of\nhow tags are used.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTagForChildren(SemanticsTag tag) {\n  _tagsForChildren ??= &lt;SemanticsTag&gt;{};\n  _tagsForChildren.add(tag);\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsConfiguration\/addTagForChildren.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addTagForChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": [
                {
                    "name": "tag",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsTag"
                }
            ]
        },
        {
            "desc": "<p>Returns an exact copy of this configuration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsConfiguration copy() {\n  return SemanticsConfiguration()\n    .._isSemanticBoundary = _isSemanticBoundary\n    ..explicitChildNodes = explicitChildNodes\n    ..isBlockingSemanticsOfPreviouslyPaintedNodes = isBlockingSemanticsOfPreviouslyPaintedNodes\n    .._hasBeenAnnotated = _hasBeenAnnotated\n    .._isMergingSemanticsOfDescendants = _isMergingSemanticsOfDescendants\n    .._textDirection = _textDirection\n    .._sortKey = _sortKey\n    .._label = _label\n    .._increasedValue = _increasedValue\n    .._value = _value\n    .._decreasedValue = _decreasedValue\n    .._hint = _hint\n    .._hintOverrides = _hintOverrides\n    .._elevation = _elevation\n    .._thickness = _thickness\n    .._flags = _flags\n    .._tagsForChildren = _tagsForChildren\n    .._textSelection = _textSelection\n    .._scrollPosition = _scrollPosition\n    .._scrollExtentMax = _scrollExtentMax\n    .._scrollExtentMin = _scrollExtentMin\n    .._actionsAsBits = _actionsAsBits\n    .._indexInParent = indexInParent\n    .._scrollIndex = _scrollIndex\n    .._scrollChildCount = _scrollChildCount\n    .._platformViewId = _platformViewId\n    .._actions.addAll(_actions)\n    .._customSemanticsActions.addAll(_customSemanticsActions);\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsConfiguration\/copy.html",
            "isDeprecated": false,
            "type": "semantics.SemanticsConfiguration",
            "name": "copy",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Returns the action handler registered for <code>action<\/code> or null if none was\nregistered.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>addAction<\/code> to add an action.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">_SemanticsActionHandler getActionHandler(SemanticsAction action) =&gt; _actions[action];<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsConfiguration\/getActionHandler.html",
            "isDeprecated": false,
            "type": "<_SemanticsActionHandler>",
            "name": "getActionHandler",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": [
                {
                    "name": "action",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.SemanticsAction"
                }
            ]
        },
        {
            "desc": "<p>Whether this configuration is compatible with the provided <code>other<\/code>\nconfiguration.<\/p>\n<p>Two configurations are said to be compatible if they can be added to the\nsame <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> without losing any semantics information.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isCompatibleWith(SemanticsConfiguration other) {\n  if (other == null || !other.hasBeenAnnotated || !hasBeenAnnotated)\n    return true;\n  if (_actionsAsBits &amp; other._actionsAsBits != 0)\n    return false;\n  if ((_flags &amp; other._flags) != 0)\n    return false;\n  if (_platformViewId != null &amp;&amp; other._platformViewId != null) {\n    return false;\n  }\n  if (_value != null &amp;&amp; _value.isNotEmpty &amp;&amp; other._value != null &amp;&amp; other._value.isNotEmpty)\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "semantics\/SemanticsConfiguration\/isCompatibleWith.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isCompatibleWith",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The handlers for each supported <a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>.<\/p>\n<p>Whenever a custom accessibility action is added to a node, the action\n<code>SemanticAction.customAction<\/code> is automatically added. A handler is\ncreated which uses the passed argument to lookup the custom action\nhandler from this map and invoke it, if present.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;CustomSemanticsAction, VoidCallback&gt; get customSemanticsActions =&gt; _customSemanticsActions;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/customSemanticsActions.html",
            "name": "customSemanticsActions",
            "isDeprecated": false,
            "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The value that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will have after performing a\n<a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action.<\/p>\n<p>This must be set if a handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> is provided\nand <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get decreasedValue =&gt; _decreasedValue;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/decreasedValue.html",
            "name": "decreasedValue",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The elevation in z-direction at which the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is\nlocated relative to its parent.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get elevation =&gt; _elevation;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/elevation.html",
            "name": "elevation",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the configuration forces all children of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nthat want to contribute semantic information to the semantics tree to do\nso in the form of explicit <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>When set to false children of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> are allowed to\nannotate <code>SemanticNode<\/code>s of their parent with the semantic information\nthey want to contribute to the semantic tree.\nWhen set to true the only way for children of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nto contribute semantic information to the semantic tree is to introduce\nnew explicit <code>SemanticNode<\/code>s to the tree.<\/p>\n<p>This setting is often used in combination with <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a> to\ncreate semantic boundaries that are either writable or not for children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool explicitChildNodes = false\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/explicitChildNodes.html",
            "name": "explicitChildNodes",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether this configuration is empty.<\/p>\n<p>An empty configuration doesn't contain any semantic information that it\nwants to contribute to the semantics tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasBeenAnnotated =&gt; _hasBeenAnnotated;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/hasBeenAnnotated.html",
            "name": "hasBeenAnnotated",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the platform can scroll the semantics node when the user attempts\nto move focus to an offscreen child.<\/p>\n<p>For example, a <a href=\"widgets\/ListView-class.html\">ListView<\/a> widget has implicit scrolling so that users can\neasily move to the next visible set of children. A <a href=\"material\/TabBar-class.html\">TabBar<\/a> widget does\nnot have implicit scrolling, so that users can navigate into the tab\nbody when reaching the end of the tab bar.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasImplicitScrolling =&gt; _hasFlag(SemanticsFlag.hasImplicitScrolling);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/hasImplicitScrolling.html",
            "name": "hasImplicitScrolling",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>A brief description of the result of performing an action on this node.<\/p>\n<p>On iOS this is used for the <code>accessibilityHint<\/code> property defined in the\n<code>UIAccessibility<\/code> Protocol. On Android it is concatenated together with\n<a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a> and <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> in the following order: <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>.\nThe concatenated value is then used as the <code>Text<\/code> description.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get hint =&gt; _hint;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/hint.html",
            "name": "hint",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Provides hint values which override the default hints on supported\nplatforms.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsHintOverrides get hintOverrides =&gt; _hintOverrides;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/hintOverrides.html",
            "name": "hintOverrides",
            "isDeprecated": false,
            "type": "semantics.SemanticsHintOverrides",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The value that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will have after performing a\n<a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> action.<\/p>\n<p>This must be set if a handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> is provided\nand <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get increasedValue =&gt; _increasedValue;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/increasedValue.html",
            "name": "increasedValue",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The index of this node within the parent's list of semantic children.<\/p>\n<p>This includes all semantic nodes, not just those currently in the\nchild list. For example, if a scrollable has five children but the first\ntwo are not visible (and thus not included in the list of children), then\nthe index of the last node will still be 4.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get indexInParent =&gt; _indexInParent;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/indexInParent.html",
            "name": "indexInParent",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> makes other <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s previously\npainted within the same semantic boundary unreachable for accessibility\npurposes.<\/p>\n<p>If set to true, the semantic information for all siblings and cousins of\nthis node, that are earlier in a depth-first pre-order traversal, are\ndropped from the semantics tree up until a semantic boundary (as defined\nby <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a>) is reached.<\/p>\n<p>If <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a> and <a href=\"semantics\/SemanticsConfiguration\/isBlockingSemanticsOfPreviouslyPaintedNodes.html\">isBlockingSemanticsOfPreviouslyPaintedNodes<\/a>\nis set on the same node, all previously painted siblings and cousins up\nuntil the next ancestor that is a semantic boundary are dropped.<\/p>\n<p>Paint order as established by <a href=\"rendering\/RenderObject\/visitChildrenForSemantics.html\">RenderObject.visitChildrenForSemantics<\/a> is\nused to determine if a node is previous to this one.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool isBlockingSemanticsOfPreviouslyPaintedNodes = false\n\n<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isBlockingSemanticsOfPreviouslyPaintedNodes.html",
            "name": "isBlockingSemanticsOfPreviouslyPaintedNodes",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is a button (true) or not (false).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isButton =&gt; _hasFlag(SemanticsFlag.isButton);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isButton.html",
            "name": "isButton",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>If this node has Boolean state that can be controlled by the user, whether\nthat state is checked or unchecked, corresponding to true and false,\nrespectively.<\/p>\n<p>Do not call the setter for this field if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> doesn't\nhave checked\/unchecked state that can be controlled by the user.<\/p>\n<p>The getter returns null if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> does not have\nchecked\/unchecked state.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isChecked =&gt; _hasFlag(SemanticsFlag.hasCheckedState) ? _hasFlag(SemanticsFlag.isChecked) : null;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isChecked.html",
            "name": "isChecked",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is currently enabled.<\/p>\n<p>A disabled object does not respond to user interactions. Only objects that\nusually respond to user interactions, but which currently do not (like a\ndisabled button) should be marked as disabled.<\/p>\n<p>The setter should not be called for objects (like static text) that never\nrespond to user interactions.<\/p>\n<p>The getter will return null if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> doesn't support\nthe concept of being enabled\/disabled.<\/p>\n<p>This property does not control whether semantics are enabled. If you wish to\ndisable semantics for a particular widget, you should use an <a href=\"widgets\/ExcludeSemantics-class.html\">ExcludeSemantics<\/a>\nwidget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEnabled =&gt; _hasFlag(SemanticsFlag.hasEnabledState) ? _hasFlag(SemanticsFlag.isEnabled) : null;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isEnabled.html",
            "name": "isEnabled",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> currently holds the user's focus.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFocused =&gt; _hasFlag(SemanticsFlag.isFocused);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isFocused.html",
            "name": "isFocused",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is a header (true) or not (false).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isHeader =&gt; _hasFlag(SemanticsFlag.isHeader);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isHeader.html",
            "name": "isHeader",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is considered hidden.<\/p>\n<p>Hidden elements are currently not visible on screen. They may be covered\nby other elements or positioned outside of the visible area of a viewport.<\/p>\n<p>Hidden elements cannot gain accessibility focus though regular touch. The\nonly way they can be focused is by moving the focus to them via linear\nnavigation.<\/p>\n<p>Platforms are free to completely ignore hidden elements and new platforms\nare encouraged to do so.<\/p>\n<p>Instead of marking an element as hidden it should usually be excluded from\nthe semantics tree altogether. Hidden elements are only included in the\nsemantics tree to work around platform limitations and they are mainly\nused to implement accessibility scrolling on iOS.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isHidden =&gt; _hasFlag(SemanticsFlag.isHidden);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isHidden.html",
            "name": "isHidden",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the semantics node represents an image.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isImage =&gt; _hasFlag(SemanticsFlag.isImage);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isImage.html",
            "name": "isImage",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning RenderObject corresponds to UI that allows the user to\npick one of several mutually exclusive options.<\/p>\n<p>For example, a <a href=\"material\/Radio-class.html\">Radio<\/a> button is in a mutually exclusive group because\nonly one radio button in that group can be marked as <a href=\"semantics\/SemanticsConfiguration\/isChecked.html\">isChecked<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInMutuallyExclusiveGroup =&gt; _hasFlag(SemanticsFlag.isInMutuallyExclusiveGroup);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isInMutuallyExclusiveGroup.html",
            "name": "isInMutuallyExclusiveGroup",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the semantic information provided by the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> and\nall of its descendants should be treated as one logical entity.<\/p>\n<p>If set to true, the descendants of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>'s\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> will merge their semantic information into the\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> representing the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>Setting this to true requires that <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a> is also true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMergingSemanticsOfDescendants =&gt; _isMergingSemanticsOfDescendants;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isMergingSemanticsOfDescendants.html",
            "name": "isMergingSemanticsOfDescendants",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> should be obscured.<\/p>\n<p>This option is usually set in combination with <code>textField<\/code> to indicate\nthat the text field contains a password (or other sensitive information).\nDoing so instructs screen readers to not read out the <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isObscured =&gt; _hasFlag(SemanticsFlag.isObscured);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isObscured.html",
            "name": "isObscured",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is selected (true) or not (false).<\/p>\n<p>This is different from having accessibility focus. The element that is\naccessibility focused may or may not be selected; e.g. a <a href=\"material\/ListTile-class.html\">ListTile<\/a> can have\naccessibility focus but have its <a href=\"material\/ListTile\/selected.html\">ListTile.selected<\/a> property set to false,\nin which case it will not be flagged as selected.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isSelected =&gt; _hasFlag(SemanticsFlag.isSelected);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isSelected.html",
            "name": "isSelected",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> owner of this configuration wants to own its\nown <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>When set to true semantic information associated with the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nowner of this configuration or any of its descendants will not leak into\nparents. The <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> generated out of this configuration will\nact as a boundary.<\/p>\n<p>Whether descendants of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> can add their semantic\ninformation to the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> introduced by this configuration\nis controlled by <a href=\"semantics\/SemanticsConfiguration\/explicitChildNodes.html\">explicitChildNodes<\/a>.<\/p>\n<p>This has to be true if <code>isMergingDescendantsIntoOneNode<\/code> is also true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isSemanticBoundary =&gt; _isSemanticBoundary;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isSemanticBoundary.html",
            "name": "isSemanticBoundary",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isTextField =&gt; _hasFlag(SemanticsFlag.isTextField);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isTextField.html",
            "name": "isTextField",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>If this node has Boolean state that can be controlled by the user, whether\nthat state is on or off, corresponding to true and false, respectively.<\/p>\n<p>Do not call the setter for this field if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> doesn't\nhave on\/off state that can be controlled by the user.<\/p>\n<p>The getter returns null if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> does not have\non\/off state.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isToggled =&gt; _hasFlag(SemanticsFlag.hasToggledState) ? _hasFlag(SemanticsFlag.isToggled) : null;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/isToggled.html",
            "name": "isToggled",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>A textual description of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>On iOS this is used for the <code>accessibilityLabel<\/code> property defined in the\n<code>UIAccessibility<\/code> Protocol. On Android it is concatenated together with\n<a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> and <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a> in the following order: <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>.\nThe concatenated value is then used as the <code>Text<\/code> description.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get label =&gt; _label;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/label.html",
            "name": "label",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the semantics node is a live region.<\/p>\n<p>On Android, when a live region semantics node is first created TalkBack\nwill make a polite announcement of the current label. This announcement\noccurs even if the node is not focused. Subsequent polite announcements\ncan be made by sending a <a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a> semantics event. The\nannouncement will only be made if the node's label has changed since the\nlast update.<\/p>\n<p>An example of a live region is the <code>Snackbar<\/code> widget. When it appears\non the screen it may be difficult to focus to read the label. A live\nregion causes an initial polite announcement to be generated\nautomatically.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/SemanticsFlag\/isLiveRegion-constant.html\">SemanticsFlag.isLiveRegion<\/a>, the semantics flag that this setting controls.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get liveRegion =&gt; _hasFlag(SemanticsFlag.isLiveRegion);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/liveRegion.html",
            "name": "liveRegion",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the semantics node contains the label of a route.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/namesRoute.html\">SemanticsFlag.namesRoute<\/a>, for a full description of route naming.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get namesRoute =&gt; _hasFlag(SemanticsFlag.namesRoute);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/namesRoute.html",
            "name": "namesRoute",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The id of the platform view, whose semantics nodes will be added as\nchildren to this node.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get platformViewId =&gt; _platformViewId;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/platformViewId.html",
            "name": "platformViewId",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Whether the semantics node is the root of a subtree for which values\nshould be announced.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/scopesRoute.html\">SemanticsFlag.scopesRoute<\/a>, for a full description of route scoping.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get scopesRoute =&gt; _hasFlag(SemanticsFlag.scopesRoute);<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/scopesRoute.html",
            "name": "scopesRoute",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The total number of scrollable children that contribute to semantics.<\/p>\n<p>If the number of children are unknown or unbounded, this value will be\nnull.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get scrollChildCount =&gt; _scrollChildCount;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/scrollChildCount.html",
            "name": "scrollChildCount",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Indicates the maximum in-range value for <a href=\"semantics\/SemanticsConfiguration\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/maxScrollExtent.html\">ScrollPosition.maxScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollExtentMax =&gt; _scrollExtentMax;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/scrollExtentMax.html",
            "name": "scrollExtentMax",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Indicates the minimum in-range value for <a href=\"semantics\/SemanticsConfiguration\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/minScrollExtent.html\">ScrollPosition.minScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollExtentMin =&gt; _scrollExtentMin;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/scrollExtentMin.html",
            "name": "scrollExtentMin",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The index of the first visible scrollable child that contributes to\nsemantics.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get scrollIndex =&gt; _scrollIndex;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/scrollIndex.html",
            "name": "scrollIndex",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Indicates the current scrolling position in logical pixels if the node is\nscrollable.<\/p>\n<p>The properties <a href=\"semantics\/SemanticsConfiguration\/scrollExtentMin.html\">scrollExtentMin<\/a> and <a href=\"semantics\/SemanticsConfiguration\/scrollExtentMax.html\">scrollExtentMax<\/a> indicate the valid\nin-range values for this property. The value for <a href=\"semantics\/SemanticsConfiguration\/scrollPosition.html\">scrollPosition<\/a> may\n(temporarily) be outside that range, e.g. during an overscroll.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a>, from where this value is usually taken.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollPosition =&gt; _scrollPosition;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/scrollPosition.html",
            "name": "scrollPosition",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>Determines the position of this node among its siblings in the traversal\nsort order.<\/p>\n<p>This is used to describe the order in which the semantic node should be\ntraversed by the accessibility services on the platform (e.g. VoiceOver\non iOS and TalkBack on Android).<\/p>\n<p>Whether this sort key has an effect on the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> sort order is\nsubject to how this configuration is used. For example, the <a href=\"semantics\/SemanticsConfiguration\/absorb.html\">absorb<\/a>\nmethod may decide to not use this key when it combines multiple\n<a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> objects.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsSortKey get sortKey =&gt; _sortKey;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/sortKey.html",
            "name": "sortKey",
            "isDeprecated": false,
            "type": "semantics.SemanticsSortKey",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The set of tags that this configuration wants to add to all child\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/addTagForChildren.html\">addTagForChildren<\/a> to add a tag and for more information about their\nusage.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;SemanticsTag&gt; get tagsForChildren =&gt; _tagsForChildren;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/tagsForChildren.html",
            "name": "tagsForChildren",
            "isDeprecated": false,
            "type": "dart:core.Iterable<semantics.SemanticsTag>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The reading direction for the text in <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>,\n<a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a>, and <a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/textDirection.html",
            "name": "textDirection",
            "isDeprecated": false,
            "type": "dart:ui.TextDirection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The currently selected text (or the position of the cursor) within <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>\nif this node represents a text field.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection get textSelection =&gt; _textSelection;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/textSelection.html",
            "name": "textSelection",
            "isDeprecated": false,
            "type": "services.TextSelection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>The extend that the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> occupies in z-direction starting\nat <a href=\"semantics\/SemanticsConfiguration\/elevation.html\">elevation<\/a>.<\/p>\n<p>It's extremely rare to set this value directly. Instead, it is calculated\nimplicitly when other <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a>s are merged into this one\nvia <a href=\"semantics\/SemanticsConfiguration\/absorb.html\">absorb<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get thickness =&gt; _thickness;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/thickness.html",
            "name": "thickness",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        },
        {
            "desc": "<p>A textual description for the current value of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>On iOS this is used for the <code>accessibilityValue<\/code> property defined in the\n<code>UIAccessibility<\/code> Protocol. On Android it is concatenated together with\n<a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a> and <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a> in the following order: <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>.\nThe concatenated value is then used as the <code>Text<\/code> description.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a>, describes what <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be after performing\n<a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/li>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a>, describes what <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be after performing\n<a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get value =&gt; _value;<\/code><\/pre>\n        ",
            "href": "semantics\/SemanticsConfiguration\/value.html",
            "name": "value",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "semantics.SemanticsConfiguration",
            "params": []
        }
    ]
}