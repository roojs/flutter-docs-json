{
    "name": "material.LinearProgressIndicator",
    "extends": [
        "material.ProgressIndicator",
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "material",
    "events": [],
    "methods": [
        {
            "name": "LinearProgressIndicator",
            "type": "",
            "desc": "<p>Creates a linear progress indicator.<\/p>\n<p>The <code>value<\/code> argument can either be null for an indeterminate\nprogress indicator, or non-null for a determinate progress\nindicator.<\/p>\n<h2 id=\"accessibility\">Accessibility<\/h2>\n<p>The <code>semanticsLabel<\/code> can be used to identify the purpose of this progress\nbar for screen reading software. The <code>semanticsValue<\/code> property may be used\nfor determinate progress indicators to indicate how much progress has been made.<\/p>\n    ",
            "static": false,
            "memberOf": "material.LinearProgressIndicator",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "valueColor",
                    "type": "animation.Animation<dart:ui.Color>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:ui.Color"
                    ]
                },
                {
                    "name": "semanticsLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "semanticsValue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "material\/LinearProgressIndicator\/LinearProgressIndicator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LinearProgressIndicator({\n  Key key,\n  double value,\n  Color backgroundColor,\n  Animation&lt;Color&gt; valueColor,\n  String semanticsLabel,\n  String semanticsValue,\n}) : super(\n       key: key,\n       value: value,\n       backgroundColor: backgroundColor,\n       valueColor: valueColor,\n       semanticsLabel: semanticsLabel,\n       semanticsValue: semanticsValue,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"material\/LinearProgressIndicator\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "material.LinearProgressIndicator",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "material\/LinearProgressIndicator\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_LinearProgressIndicatorState createState() =&gt; _LinearProgressIndicatorState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "material\/LinearProgressIndicator-class.html",
    "desc": "<p>A material design linear progress indicator, also known as a progress bar.<\/p>\n<p>A widget that shows progress along a line. There are two kinds of linear\nprogress indicators:<\/p>\n<ul>\n<li>\n<em>Determinate<\/em>. Determinate progress indicators have a specific value at\neach point in time, and the value should increase monotonically from 0.0\nto 1.0, at which time the indicator is complete. To create a determinate\nprogress indicator, use a non-null <a href=\"material\/ProgressIndicator\/value.html\">value<\/a> between 0.0 and 1.0.<\/li>\n<li>\n<em>Indeterminate<\/em>. Indeterminate progress indicators do not have a specific\nvalue at each point in time and instead indicate that progress is being\nmade without indicating how much progress remains. To create an\nindeterminate progress indicator, use a null <a href=\"material\/ProgressIndicator\/value.html\">value<\/a>.<\/li>\n<\/ul>\n<p>The indicator line is displayed with <a href=\"material\/ProgressIndicator\/valueColor.html\">valueColor<\/a>, an animated value. To\nspecify a constant color value use: <code>AlwaysStoppedAnimation&lt;Color&gt;(color)<\/code>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/CircularProgressIndicator-class.html\">CircularProgressIndicator<\/a>, which shows progress along a circular arc.<\/li>\n<li>\n<a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a>, which automatically displays a <a href=\"material\/CircularProgressIndicator-class.html\">CircularProgressIndicator<\/a>\nwhen the underlying vertical scrollable is overscrolled.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/progress-indicators.html#linear-progress-indicators\">material.io\/design\/components\/progress-indicators.html#linear-progress-indicators<\/a><\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LinearProgressIndicator"
}