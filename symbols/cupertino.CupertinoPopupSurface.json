{
    "desc": "<p>Rounded rectangle surface that looks like an iOS popup surface, e.g., alert dialog\nand action sheet.<\/p>\n<p>A <a href=\"cupertino\/CupertinoPopupSurface-class.html\">CupertinoPopupSurface<\/a> can be configured to paint or not paint a white\ncolor on top of its blurred area. Typical usage should paint white on top\nof the blur. However, the white paint can be disabled for the purpose of\nrendering divider gaps for a more complicated layout, e.g., <a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>.\nAdditionally, the white paint can be disabled to render a blurred rounded\nrectangle without any color (similar to iOS's volume control popup).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>, which is a dialog with a title, content, and\nactions.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/\">developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "cupertino\/CupertinoPopupSurface-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "cupertino",
    "name": "cupertino.CupertinoPopupSurface",
    "shortname": "CupertinoPopupSurface",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an iOS-style rounded rectangle popup surface.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoPopupSurface({\n  Key key,\n  this.isSurfacePainted = true,\n  this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPopupSurface\/CupertinoPopupSurface.html",
            "isDeprecated": false,
            "type": "",
            "name": "CupertinoPopupSurface",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "cupertino.CupertinoPopupSurface",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "isSurfacePainted",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoPopupSurface\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return ClipRRect(\n    borderRadius: BorderRadius.circular(_kDialogCornerRadius),\n    child: BackdropFilter(\n      filter: ImageFilter.blur(sigmaX: _kBlurAmount, sigmaY: _kBlurAmount),\n      child: Container(\n        decoration: _kCupertinoDialogBlurOverlayDecoration,\n        child: Container(\n          color: isSurfacePainted ? _kDialogColor : null,\n          child: child,\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "cupertino\/CupertinoPopupSurface\/build.html",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "cupertino.CupertinoPopupSurface",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The widget below this widget in the tree.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPopupSurface\/child.html",
            "name": "child",
            "isDeprecated": false,
            "type": "widgets.Widget",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "cupertino.CupertinoPopupSurface",
            "params": []
        },
        {
            "desc": "<p>Whether or not to paint a translucent white on top of this surface's\nblurred background. <a href=\"cupertino\/CupertinoPopupSurface\/isSurfacePainted.html\">isSurfacePainted<\/a> should be true for a typical popup\nthat contains content without any dividers. A popup that requires dividers\nshould set <a href=\"cupertino\/CupertinoPopupSurface\/isSurfacePainted.html\">isSurfacePainted<\/a> to false and then paint its own surface area.<\/p>\n<p>Some popups, like iOS's volume control popup, choose to render a blurred\narea without any white paint covering it. To achieve this effect,\n<a href=\"cupertino\/CupertinoPopupSurface\/isSurfacePainted.html\">isSurfacePainted<\/a> should be set to false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isSurfacePainted\n\n<\/code><\/pre>\n        ",
            "href": "cupertino\/CupertinoPopupSurface\/isSurfacePainted.html",
            "name": "isSurfacePainted",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "cupertino.CupertinoPopupSurface",
            "params": []
        }
    ]
}