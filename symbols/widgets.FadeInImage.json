{
    "desc": "<p>An image that shows a <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> image while the target <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> is\nloading, then fades in the new image when it loads.<\/p>\n<p>Use this class to display long-loading images, such as <a href=\"painting\/NetworkImage\/NetworkImage.html\">new NetworkImage<\/a>,\nso that the image appears on screen with a graceful animation rather than\nabruptly pops onto the screen.<\/p>\n<p>If the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> emits an <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> synchronously, such as when the image\nhas been loaded and cached, the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> is displayed immediately and the\n<a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> is never displayed.<\/p>\n<p><a href=\"widgets\/FadeInImage\/fadeOutDuration.html\">fadeOutDuration<\/a> and <a href=\"widgets\/FadeInImage\/fadeOutCurve.html\">fadeOutCurve<\/a> control the fade-out animation of the\nplaceholder.<\/p>\n<p><a href=\"widgets\/FadeInImage\/fadeInDuration.html\">fadeInDuration<\/a> and <a href=\"widgets\/FadeInImage\/fadeInCurve.html\">fadeInCurve<\/a> control the fade-in animation of the\ntarget <a href=\"widgets\/FadeInImage\/image.html\">image<\/a>.<\/p>\n<p>Prefer a <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> that's already cached so that it is displayed in one\nframe. This prevents it from popping onto the screen.<\/p>\n<p>When <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> changes it is resolved to a new <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>. If the new\n<a href=\"widgets\/Widget\/key.html\">ImageStream.key<\/a> is different this widget subscribes to the new stream and\nreplaces the displayed image with images emitted by the new stream.<\/p>\n<p>When <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> changes and the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> has not yet emitted an\n<a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a>, then <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> is resolved to a new <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>. If the\nnew <a href=\"widgets\/Widget\/key.html\">ImageStream.key<\/a> is different this widget subscribes to the new stream\nand replaces the displayed image to images emitted by the new stream.<\/p>\n<p>When either <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> or <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> changes, this widget continues showing\nthe previously loaded image (if any) until the new image provider provides a\ndifferent image. This is known as \"gapless playback\" (see also\n<a href=\"widgets\/Image\/gaplessPlayback.html\">Image.gaplessPlayback<\/a>).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">FadeInImage(\n  \/\/ here `bytes` is a Uint8List containing the bytes for the in-memory image\n  placeholder: MemoryImage(bytes),\n  image: NetworkImage('https:\/\/backend.example.com\/image.png'),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "dtype": "class",
    "example": "",
    "href": "widgets\/FadeInImage-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.FadeInImage",
    "shortname": "FadeInImage",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a widget that displays a <code>placeholder<\/code> while an <code>image<\/code> is loading\nthen cross-fades to display the <code>image<\/code>.<\/p>\n<p>The <code>placeholder<\/code>, <code>image<\/code>, <code>fadeOutDuration<\/code>, <code>fadeOutCurve<\/code>,\n<code>fadeInDuration<\/code>, <code>fadeInCurve<\/code>, <code>alignment<\/code>, <code>repeat<\/code>, and\n<code>matchTextDirection<\/code> arguments must not be null.<\/p>\n<p>There are two different semantic label for the class.\n<code>placeholderSemanticLabel<\/code> is used for defining a semantics label for\n<code>placeholder<\/code>. <code>imageSemanticLabel<\/code> is used for defining a semantics label\nfor <code>image<\/code><\/p>\n<p>If <code>excludeFromSemantics<\/code> is true, then <code>placeholderSemanticLabel<\/code> and\n<code>imageSemanticLabel<\/code> will be ignored.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FadeInImage({\n  Key key,\n  @required this.placeholder,\n  @required this.image,\n  this.excludeFromSemantics = false,\n  this.imageSemanticLabel,\n  this.placeholderSemanticLabel,\n  this.fadeOutDuration = const Duration(milliseconds: 300),\n  this.fadeOutCurve = Curves.easeOut,\n  this.fadeInDuration = const Duration(milliseconds: 700),\n  this.fadeInCurve = Curves.easeIn,\n  this.width,\n  this.height,\n  this.fit,\n  this.alignment = Alignment.center,\n  this.repeat = ImageRepeat.noRepeat,\n  this.matchTextDirection = false,\n}) : assert(placeholder != null),\n     assert(image != null),\n     assert(fadeOutDuration != null),\n     assert(fadeOutCurve != null),\n     assert(fadeInDuration != null),\n     assert(fadeInCurve != null),\n     assert(alignment != null),\n     assert(repeat != null),\n     assert(matchTextDirection != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/FadeInImage\/FadeInImage.html",
            "isDeprecated": false,
            "type": "",
            "name": "FadeInImage",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FadeInImage",
            "params": [
                {
                    "name": "alignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "excludeFromSemantics",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "fadeInCurve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "fadeInDuration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "fadeOutCurve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "fadeOutDuration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "fit",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.BoxFit"
                },
                {
                    "name": "height",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "image",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ImageProvider"
                },
                {
                    "name": "imageSemanticLabel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "matchTextDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "placeholder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ImageProvider"
                },
                {
                    "name": "placeholderSemanticLabel",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "repeat",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.ImageRepeat"
                },
                {
                    "name": "width",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/FadeInImage\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;StatefulWidget&gt; createState() =&gt; _FadeInImageState();<\/code><\/pre>\n    ",
            "href": "widgets\/FadeInImage\/createState.html",
            "isDeprecated": false,
            "type": "widgets.State<widgets.StatefulWidget>",
            "name": "createState",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>How to align the image within its bounds.<\/p>\n<p>The alignment aligns the given position in the image to the given position\nin the layout bounds. For example, an <a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (-1.0,\n-1.0) aligns the image to the top-left corner of its layout bounds, while an\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (1.0, 1.0) aligns the bottom right of the\nimage with the bottom right corner of its layout bounds. Similarly, an\nalignment of (0.0, 1.0) aligns the bottom middle of the image with the\nmiddle of the bottom edge of its layout bounds.<\/p>\n<p>If the <a href=\"widgets\/FadeInImage\/alignment.html\">alignment<\/a> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>-dependent (i.e. if it is a\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), then an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> widget\nmust be in scope.<\/p>\n<p>Defaults to <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/alignment.html",
            "name": "alignment",
            "isDeprecated": false,
            "type": "painting.AlignmentGeometry",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>Whether to exclude this image from semantics.<\/p>\n<p>Useful for images which do not contribute meaningful information to an\napplication.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool excludeFromSemantics\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/excludeFromSemantics.html",
            "name": "excludeFromSemantics",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>The curve of the fade-in animation for the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve fadeInCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/fadeInCurve.html",
            "name": "fadeInCurve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>The duration of the fade-in animation for the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration fadeInDuration\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/fadeInDuration.html",
            "name": "fadeInDuration",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>The curve of the fade-out animation for the <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Curve fadeOutCurve\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/fadeOutCurve.html",
            "name": "fadeOutCurve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>The duration of the fade-out animation for the <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration fadeOutDuration\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/fadeOutDuration.html",
            "name": "fadeOutDuration",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>How to inscribe the image into the space allocated during layout.<\/p>\n<p>The default varies based on the other fields. See the discussion at\n<a href=\"painting\/paintImage.html\">paintImage<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxFit fit\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/fit.html",
            "name": "fit",
            "isDeprecated": false,
            "type": "painting.BoxFit",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>If non-null, require the image to have this height.<\/p>\n<p>If null, the image will pick a size that best preserves its intrinsic\naspect ratio. This may result in a sudden change if the size of the\nplaceholder image does not match that of the target image. The size is\nalso affected by the scale factor.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/height.html",
            "name": "height",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>The target image that is displayed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider image\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/image.html",
            "name": "image",
            "isDeprecated": false,
            "type": "painting.ImageProvider",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>A Semantic description of the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a>.<\/p>\n<p>Used to provide a description of the <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> to TalkBack on Android, and\nVoiceOver on iOS.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String imageSemanticLabel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/imageSemanticLabel.html",
            "name": "imageSemanticLabel",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>Whether to paint the image in the direction of the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>If this is true, then in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> contexts, the image will be\ndrawn with its origin in the top left (the \"normal\" painting direction for\nimages); and in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> contexts, the image will be drawn with\na scaling factor of -1 in the horizontal direction so that the origin is\nin the top right.<\/p>\n<p>This is occasionally used with images in right-to-left environments, for\nimages that were designed for left-to-right locales. Be careful, when\nusing this, to not flip images with integral shadows, text, or other\neffects that will look incorrect when flipped.<\/p>\n<p>If this is true, there must be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> widget in\nscope.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool matchTextDirection\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/matchTextDirection.html",
            "name": "matchTextDirection",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>Image displayed while the target <a href=\"widgets\/FadeInImage\/image.html\">image<\/a> is loading.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider placeholder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/placeholder.html",
            "name": "placeholder",
            "isDeprecated": false,
            "type": "painting.ImageProvider",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>A Semantic description of the <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a>.<\/p>\n<p>Used to provide a description of the <a href=\"widgets\/FadeInImage\/placeholder.html\">placeholder<\/a> to TalkBack on Android, and\nVoiceOver on iOS.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String placeholderSemanticLabel\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/placeholderSemanticLabel.html",
            "name": "placeholderSemanticLabel",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>How to paint any portions of the layout bounds not covered by the image.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageRepeat repeat\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/repeat.html",
            "name": "repeat",
            "isDeprecated": false,
            "type": "painting.ImageRepeat",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        },
        {
            "desc": "<p>If non-null, require the image to have this width.<\/p>\n<p>If null, the image will pick a size that best preserves its intrinsic\naspect ratio. This may result in a sudden change if the size of the\nplaceholder image does not match that of the target image. The size is\nalso affected by the scale factor.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FadeInImage\/width.html",
            "name": "width",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.FadeInImage",
            "params": []
        }
    ]
}