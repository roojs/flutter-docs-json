{
    "name": "widgets.WillPopScope",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [
        {
            "name": "onWillPop",
            "type": "widgets.WillPopCallback",
            "desc": "<p>Called to veto attempts by the user to dismiss the enclosing <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a>.<\/p>\n<p>If the callback returns a Future that resolves to false, the enclosing\nroute will not be popped.<\/p>\n        ",
            "static": false,
            "memberOf": "",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/WillPopScope\/onWillPop.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WillPopCallback onWillPop\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false,
            "isConstant": false
        }
    ],
    "methods": [
        {
            "name": "WillPopScope",
            "type": "",
            "desc": "<p>Creates a widget that registers a callback to veto attempts by the user to\ndismiss the enclosing <a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a>.<\/p>\n<p>The <code>child<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WillPopScope",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "onWillPop",
                    "type": "widgets.WillPopCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/WillPopScope\/WillPopScope.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const WillPopScope({\n  Key key,\n  @required this.child,\n  @required this.onWillPop,\n}) : assert(child != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createState",
            "type": "",
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/WillPopScope\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WillPopScope",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/WillPopScope\/createState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_WillPopScopeState createState() =&gt; _WillPopScopeState();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "child",
            "type": "widgets.Widget",
            "types": [],
            "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>This widget can only have one child. To lay out multiple children, let this\nwidget's child be a widget such as <a href=\"widgets\/Row-class.html\">Row<\/a>, <a href=\"widgets\/Column-class.html\">Column<\/a>, or <a href=\"widgets\/Stack-class.html\">Stack<\/a>, which have a\n<code>children<\/code> property, and then provide the children to that widget.<\/p>\n        ",
            "memberOf": "widgets.WillPopScope",
            "isConstant": false,
            "href": "widgets\/WillPopScope\/child.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/WillPopScope-class.html",
    "desc": "<p>Registers a callback to veto attempts by the user to dismiss the enclosing\n<a href=\"widgets\/ModalRoute-class.html\">ModalRoute<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ModalRoute\/addScopedWillPopCallback.html\">ModalRoute.addScopedWillPopCallback<\/a> and <a href=\"widgets\/ModalRoute\/removeScopedWillPopCallback.html\">ModalRoute.removeScopedWillPopCallback<\/a>,\nwhich this widget uses to register and unregister <a href=\"widgets\/WillPopScope\/onWillPop.html\">onWillPop<\/a>.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "WillPopScope"
}