{
    "desc": "<p>An immutable span of text.<\/p>\n<p>A <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object can be styled using its <a href=\"painting\/TextSpan\/style.html\">style<\/a> property.\nThe style will be applied to the <a href=\"painting\/TextSpan\/text.html\">text<\/a> and the <a href=\"painting\/TextSpan\/children.html\">children<\/a>.<\/p>\n<p>A <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object can just have plain text, or it can have\nchildren <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects with their own styles that (possibly\nonly partially) override the <a href=\"painting\/TextSpan\/style.html\">style<\/a> of this object. If a\n<a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> has both <a href=\"painting\/TextSpan\/text.html\">text<\/a> and <a href=\"painting\/TextSpan\/children.html\">children<\/a>, then the <a href=\"painting\/TextSpan\/text.html\">text<\/a> is\ntreated as if it was an unstyled <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> at the start of the\n<a href=\"painting\/TextSpan\/children.html\">children<\/a> list.<\/p>\n<p>To paint a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>. To display a text\nspan in a widget, use a <a href=\"widgets\/RichText-class.html\">RichText<\/a>. For text with a single style, consider\nusing the <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe text \"Hello world!\", in black:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">TextSpan(\n  text: 'Hello world!',\n  style: TextStyle(color: Colors.black),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p><em>There is some more detailed sample code in the documentation for the\n<a href=\"painting\/TextSpan\/recognizer.html\">recognizer<\/a> property.<\/em><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Text-class.html\">Text<\/a>, a widget for showing uniformly-styled text.<\/li>\n<li>\n<a href=\"widgets\/RichText-class.html\">RichText<\/a>, a widget for finer control of text rendering.<\/li>\n<li>\n<a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>, a class for painting <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "painting\/TextSpan-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "painting",
    "name": "painting.TextSpan",
    "shortname": "TextSpan",
    "extends": [
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> with the given values.<\/p>\n<p>For the object to be useful, at least one of <code>text<\/code> or\n<code>children<\/code> should be set.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSpan({\n  this.style,\n  this.text,\n  this.children,\n  this.recognizer,\n});<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/TextSpan.html",
            "isDeprecated": false,
            "type": "",
            "name": "TextSpan",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "children",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.List<painting.TextSpan>"
                },
                {
                    "name": "recognizer",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "gestures.GestureRecognizer"
                },
                {
                    "name": "style",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Apply the <a href=\"painting\/TextSpan\/style.html\">style<\/a>, <a href=\"painting\/TextSpan\/text.html\">text<\/a>, and <a href=\"painting\/TextSpan\/children.html\">children<\/a> of this object to the\ngiven <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a>, from which a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> can be obtained.\n<a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> objects can be drawn on <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> objects.<\/p>\n<p>Rather than using this directly, it's simpler to use the\n<a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> class to paint <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects onto <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>\nobjects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void build(ui.ParagraphBuilder builder, { double textScaleFactor = 1.0 }) {\n  assert(debugAssertIsValid());\n  final bool hasStyle = style != null;\n  if (hasStyle)\n    builder.pushStyle(style.getTextStyle(textScaleFactor: textScaleFactor));\n  if (text != null)\n    builder.addText(text);\n  if (children != null) {\n    for (TextSpan child in children) {\n      assert(child != null);\n      child.build(builder, textScaleFactor: textScaleFactor);\n    }\n  }\n  if (hasStyle)\n    builder.pop();\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/build.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "build",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "builder",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.ParagraphBuilder"
                },
                {
                    "name": "textScaleFactor",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns the UTF-16 code unit at the given index in the flattened string.<\/p>\n<p>Returns null if the index is out of bounds.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int codeUnitAt(int index) {\n  if (index &lt; 0)\n    return null;\n  int offset = 0;\n  int result;\n  visitTextSpan((TextSpan span) {\n    if (index - offset &lt; span.text.length) {\n      result = span.text.codeUnitAt(index - offset);\n      return false;\n    }\n    offset += span.text.length;\n    return true;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/codeUnitAt.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "codeUnitAt",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "index",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Describe the difference between this text span and another, in terms of\nhow much damage it will make to the rendering. The comparison is deep.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/TextSpan\/compareTo.html\">TextStyle.compareTo<\/a>, which does the same thing for <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderComparison compareTo(TextSpan other) {\n  if (identical(this, other))\n    return RenderComparison.identical;\n  if (other.text != text ||\n      children?.length != other.children?.length ||\n      (style == null) != (other.style == null))\n    return RenderComparison.layout;\n  RenderComparison result = recognizer == other.recognizer ? RenderComparison.identical : RenderComparison.metadata;\n  if (style != null) {\n    final RenderComparison candidate = style.compareTo(other.style);\n    if (candidate.index &gt; result.index)\n      result = candidate;\n    if (result == RenderComparison.layout)\n      return result;\n  }\n  if (children != null) {\n    for (int index = 0; index &lt; children.length; index += 1) {\n      final RenderComparison candidate = children[index].compareTo(other.children[index]);\n      if (candidate.index &gt; result.index)\n        result = candidate;\n      if (result == RenderComparison.layout)\n        return result;\n    }\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/compareTo.html",
            "isDeprecated": false,
            "type": "painting.RenderComparison",
            "name": "compareTo",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "other",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.TextSpan"
                }
            ]
        },
        {
            "desc": "<p>In checked mode, throws an exception if the object is not in a\nvalid configuration. Otherwise, returns true.<\/p>\n<p>This is intended to be used as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(myTextSpan.debugAssertIsValid());\n<\/code><\/pre>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertIsValid() {\n  assert(() {\n    if (!visitTextSpan((TextSpan span) {\n      if (span.children != null) {\n        for (TextSpan child in span.children) {\n          if (child == null)\n            return false;\n        }\n      }\n      return true;\n    })) {\n      throw FlutterError(\n        'TextSpan contains a null child.\\n'\n        'A TextSpan object with a non-null child list should not have any nulls in its child list.\\n'\n        'The full text in question was:\\n'\n        '${toStringDeep(prefixLineOne: '  ')}'\n      );\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/debugAssertIsValid.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "debugAssertIsValid",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTree\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/TextSpan\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  if (children == null)\n    return const &lt;DiagnosticsNode&gt;[];\n  return children.map&lt;DiagnosticsNode&gt;((TextSpan child) {\n    if (child != null) {\n      return child.toDiagnosticsNode();\n    } else {\n      return DiagnosticsNode.message('&lt;null child&gt;');\n    }\n  }).toList();\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/debugDescribeChildren.html",
            "isDeprecated": false,
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "name": "debugDescribeChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/TextSpan\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.whitespace;\n  \/\/ Properties on style are added as if they were properties directly on\n  \/\/ this TextSpan.\n  if (style != null)\n    style.debugFillProperties(properties);\n\n  properties.add(DiagnosticsProperty&lt;GestureRecognizer&gt;(\n    'recognizer', recognizer,\n    description: recognizer?.runtimeType?.toString(),\n    defaultValue: null,\n  ));\n\n  properties.add(StringProperty('text', text, showName: false, defaultValue: null));\n  if (style == null &amp;&amp; text == null &amp;&amp; children == null)\n    properties.add(DiagnosticsNode.message('(empty)'));\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Returns the text span that contains the given position in the text.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSpan getSpanForPosition(TextPosition position) {\n  assert(debugAssertIsValid());\n  final TextAffinity affinity = position.affinity;\n  final int targetOffset = position.offset;\n  int offset = 0;\n  TextSpan result;\n  visitTextSpan((TextSpan span) {\n    assert(result == null);\n    final int endOffset = offset + span.text.length;\n    if (targetOffset == offset &amp;&amp; affinity == TextAffinity.downstream ||\n        targetOffset &gt; offset &amp;&amp; targetOffset &lt; endOffset ||\n        targetOffset == endOffset &amp;&amp; affinity == TextAffinity.upstream) {\n      result = span;\n      return false;\n    }\n    offset = endOffset;\n    return true;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/getSpanForPosition.html",
            "isDeprecated": false,
            "type": "painting.TextSpan",
            "name": "getSpanForPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "position",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.TextPosition"
                }
            ]
        },
        {
            "desc": "<p>Flattens the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree into a single string.<\/p>\n<p>Styles are not honored in this process.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toPlainText() {\n  assert(debugAssertIsValid());\n  final StringBuffer buffer = StringBuffer();\n  visitTextSpan((TextSpan span) {\n    buffer.write(span.text);\n    return true;\n  });\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/toPlainText.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toPlainText",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"painting\/TextSpan\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/toStringShort.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringShort",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>Walks this text span and its descendants in pre-order and calls <code>visitor<\/code>\nfor each span that has text.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool visitTextSpan(bool visitor(TextSpan span)) {\n  if (text != null) {\n    if (!visitor(this))\n      return false;\n  }\n  if (children != null) {\n    for (TextSpan child in children) {\n      if (!child.visitTextSpan(visitor))\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "painting\/TextSpan\/visitTextSpan.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "visitTextSpan",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "painting.TextSpan",
            "params": [
                {
                    "name": "span",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "painting.TextSpan"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Additional spans to include as children.<\/p>\n<p>If both <a href=\"painting\/TextSpan\/text.html\">text<\/a> and <a href=\"painting\/TextSpan\/children.html\">children<\/a> are non-null, the text will precede the\nchildren.<\/p>\n<p>Modifying the list after the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> has been created is not\nsupported and may have unexpected results.<\/p>\n<p>The list must not contain any nulls.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;TextSpan&gt; children\n\n<\/code><\/pre>\n        ",
            "href": "painting\/TextSpan\/children.html",
            "name": "children",
            "isDeprecated": false,
            "type": "dart:core.List<painting.TextSpan>",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/TextSpan\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(style, text, recognizer, hashList(children));<\/code><\/pre>\n        ",
            "href": "painting\/TextSpan\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>A gesture recognizer that will receive events that hit this text span.<\/p>\n<p><a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> itself does not implement hit testing or event dispatch. The\nobject that manages the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> painting is also responsible for\ndispatching events. In the rendering library, that is the\n<a href=\"rendering\/RenderParagraph-class.html\">RenderParagraph<\/a> object, which corresponds to the <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget in\nthe widgets layer; these objects do not bubble events in <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s, so a\n<a href=\"painting\/TextSpan\/recognizer.html\">recognizer<\/a> is only effective for events that directly hit the <a href=\"painting\/TextSpan\/text.html\">text<\/a> of\nthat <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, not any of its <a href=\"painting\/TextSpan\/children.html\">children<\/a>.<\/p>\n<p><a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> also does not manage the lifetime of the gesture recognizer.\nThe code that owns the <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> object must call\n<a href=\"gestures\/GestureRecognizer\/dispose.html\">GestureRecognizer.dispose<\/a> when the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object is no longer used.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how to manage the lifetime of a gesture recognizer\nprovided to a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object. It defines a <code>BuzzingText<\/code> widget which\nuses the <a href=\"services\/HapticFeedback-class.html\">HapticFeedback<\/a> class to vibrate the device when the user\nlong-presses the \"find the\" span, which is underlined in wavy green. The\nhit-testing is handled by the <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class BuzzingText extends StatefulWidget {\n  @override\n  _BuzzingTextState createState() =&gt; _BuzzingTextState();\n}\n\nclass _BuzzingTextState extends State&lt;BuzzingText&gt; {\n  LongPressGestureRecognizer _longPressRecognizer;\n\n  @override\n  void initState() {\n    super.initState();\n    _longPressRecognizer = LongPressGestureRecognizer()\n      ..onLongPress = _handlePress;\n  }\n\n  @override\n  void dispose() {\n    _longPressRecognizer.dispose();\n    super.dispose();\n  }\n\n  void _handlePress() {\n    HapticFeedback.vibrate();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return RichText(\n      text: TextSpan(\n        text: 'Can you ',\n        style: TextStyle(color: Colors.black),\n        children: &lt;TextSpan&gt;[\n          TextSpan(\n            text: 'find the',\n            style: TextStyle(\n              color: Colors.green,\n              decoration: TextDecoration.underline,\n              decorationStyle: TextDecorationStyle.wavy,\n            ),\n            recognizer: _longPressRecognizer,\n          ),\n          TextSpan(\n            text: ' secret?',\n          ),\n        ],\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureRecognizer recognizer\n\n<\/code><\/pre>\n        ",
            "href": "painting\/TextSpan\/recognizer.html",
            "name": "recognizer",
            "isDeprecated": false,
            "type": "gestures.GestureRecognizer",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>The style to apply to the <a href=\"painting\/TextSpan\/text.html\">text<\/a> and the <a href=\"painting\/TextSpan\/children.html\">children<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle style\n\n<\/code><\/pre>\n        ",
            "href": "painting\/TextSpan\/style.html",
            "name": "style",
            "isDeprecated": false,
            "type": "painting.TextStyle",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextSpan",
            "params": []
        },
        {
            "desc": "<p>The text contained in the span.<\/p>\n<p>If both <a href=\"painting\/TextSpan\/text.html\">text<\/a> and <a href=\"painting\/TextSpan\/children.html\">children<\/a> are non-null, the text will precede the\nchildren.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
            "href": "painting\/TextSpan\/text.html",
            "name": "text",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "painting.TextSpan",
            "params": []
        }
    ]
}