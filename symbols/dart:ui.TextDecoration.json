{
    "name": "dart:ui.TextDecoration",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/TextDecoration\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.TextDecoration",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/TextDecoration\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! TextDecoration)\n    return false;\n  final TextDecoration typedOther = other;\n  return _mask == typedOther._mask;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextDecoration.combine",
            "type": "",
            "desc": "<p>Creates a decoration that paints the union of all the given decorations.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.TextDecoration",
            "sig": "",
            "params": [
                {
                    "name": "decorations",
                    "type": "dart:core.List<dart:ui.TextDecoration>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.TextDecoration"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/TextDecoration\/TextDecoration.combine.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory TextDecoration.combine(List&lt;TextDecoration&gt; decorations) {\n  int mask = 0;\n  for (TextDecoration decoration in decorations)\n    mask |= decoration._mask;\n  return new TextDecoration._(mask);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "contains",
            "type": "dart:core.bool",
            "desc": "<p>Whether this decoration will paint at least as much decoration as the given decoration.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.TextDecoration",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.TextDecoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/TextDecoration\/contains.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(TextDecoration other) {\n  return (_mask | other._mask) == _mask;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.TextDecoration",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/TextDecoration\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_mask == 0)\n    return 'TextDecoration.none';\n  final List&lt;String&gt; values = &lt;String&gt;[];\n  if (_mask &amp; underline._mask != 0)\n    values.add('underline');\n  if (_mask &amp; overline._mask != 0)\n    values.add('overline');\n  if (_mask &amp; lineThrough._mask != 0)\n    values.add('lineThrough');\n  if (values.length == 1)\n    return 'TextDecoration.${values[0]}';\n  return 'TextDecoration.combine([${values.join(\", \")}])';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/TextDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/TextDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.TextDecoration",
            "isConstant": false,
            "href": "dart-ui\/TextDecoration\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; _mask.hashCode;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-ui\/TextDecoration\/lineThrough-constant.html",
            "desc": "<p>Draw a line through each line of text<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration lineThrough = const TextDecoration._(0x4)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "lineThrough",
            "memberOf": "dart:ui.TextDecoration"
        },
        {
            "type": "",
            "href": "dart-ui\/TextDecoration\/none-constant.html",
            "desc": "<p>Do not draw a decoration<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration none = const TextDecoration._(0x0)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "none",
            "memberOf": "dart:ui.TextDecoration"
        },
        {
            "type": "",
            "href": "dart-ui\/TextDecoration\/overline-constant.html",
            "desc": "<p>Draw a line above each line of text<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration overline = const TextDecoration._(0x2)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "overline",
            "memberOf": "dart:ui.TextDecoration"
        },
        {
            "type": "",
            "href": "dart-ui\/TextDecoration\/underline-constant.html",
            "desc": "<p>Draw a line underneath each line of text<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TextDecoration underline = const TextDecoration._(0x1)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "underline",
            "memberOf": "dart:ui.TextDecoration"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-ui\/TextDecoration-class.html",
    "desc": "<p>A linear decoration to draw near the text.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextDecoration"
}