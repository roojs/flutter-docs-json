{
    "name": "painting.Decoration",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "painting",
    "events": [],
    "methods": [
        {
            "name": "Decoration",
            "type": "",
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "painting\/Decoration\/Decoration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Decoration();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "createBoxPainter",
            "type": "painting.BoxPainter",
            "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [
                {
                    "name": "onChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Decoration\/createBoxPainter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxPainter createBoxPainter([ VoidCallback onChanged ]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugAssertIsValid",
            "type": "dart:core.bool",
            "desc": "<p>In checked mode, throws an exception if the object is not in a\nvalid configuration. Otherwise, returns true.<\/p>\n<p>This is intended to be used as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(myDecoration.debugAssertIsValid());\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/Decoration\/debugAssertIsValid.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertIsValid() =&gt; true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "hitTest",
            "type": "dart:core.bool",
            "desc": "<p>Tests whether the given point, on a rectangle of a given size,\nwould be considered to hit the decoration or not. For example,\nif the decoration only draws a circle, this function might\nreturn true if the point was inside the circle and false\notherwise.<\/p>\n<p>The decoration may be sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\n<code>textDirection<\/code> argument should therefore be provided. If it is known that\nthe decoration is not affected by the text direction, then the argument\nmay be omitted or set to null.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <code>textDirection<\/code> parameter will be populated\nbased on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> (by way of the <a href=\"rendering\/RenderDecoratedBox-class.html\">RenderDecoratedBox<\/a>\nrenderer).<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "position",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Decoration\/hitTest.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hitTest(Size size, Offset position, { TextDirection textDirection }) =&gt; true;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "painting.Decoration",
            "desc": "<p>Linearly interpolates between two <a href=\"painting\/Decoration-class.html\">Decoration<\/a>s.<\/p>\n<p>This attempts to use <a href=\"painting\/Decoration\/lerpFrom.html\">lerpFrom<\/a> and <a href=\"painting\/Decoration\/lerpTo.html\">lerpTo<\/a> on <code>b<\/code> and <code>a<\/code>\nrespectively to find a solution. If the two values can't directly be\ninterpolated, then the interpolation is done via null (at <code>t == 0.5<\/code>).<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Decoration\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Decoration lerp(Decoration a, Decoration b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.lerpFrom(null, t) ?? b;\n  if (b == null)\n    return a.lerpTo(null, t) ?? a;\n  if (t == 0.0)\n    return a;\n  if (t == 1.0)\n    return b;\n  return b.lerpFrom(a, t)\n      ?? a.lerpTo(b, t)\n      ?? (t &lt; 0.5 ? (a.lerpTo(null, t * 2.0) ?? a) : (b.lerpFrom(null, (t - 0.5) * 2.0) ?? b));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpFrom",
            "type": "painting.Decoration",
            "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Decoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/Decoration\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Decoration\/lerpFrom.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDecoration lerpFrom(Decoration a, double t) =&gt; null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerpTo",
            "type": "painting.Decoration",
            "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/Decoration\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Decoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [
                {
                    "name": "b",
                    "type": "painting.Decoration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/Decoration\/lerpTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDecoration lerpTo(Decoration b, double t) =&gt; null;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toStringShort",
            "type": "dart:core.String",
            "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting.Decoration",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "painting\/Decoration\/toStringShort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "isComplex",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this decoration is complex enough to benefit from caching its painting.<\/p>\n        ",
            "memberOf": "painting.Decoration",
            "isConstant": false,
            "href": "painting\/Decoration\/isComplex.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isComplex =&gt; false;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "padding",
            "type": "painting.EdgeInsetsGeometry",
            "types": [],
            "desc": "<p>Returns the insets to apply when using this decoration on a box\nthat has contents, so that the contents do not overlap the edges\nof the decoration. For example, if the decoration draws a frame\naround its edge, the padding would return the distance by which\nto inset the children so as to not overlap the frame.<\/p>\n<p>This only works for decorations that have absolute sizes. If the padding\nneeded would change based on the size at which the decoration is drawn,\nthen this will return incorrect padding values.<\/p>\n<p>For example, when a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> has <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, the padding\ndoes not take into account that the circle is drawn in the center of the\nbox regardless of the ratio of the box; it does not provide the extra\npadding that is implied by changing the ratio.<\/p>\n<p>The value returned by this getter must be resolved (using\n<a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">EdgeInsetsGeometry.resolve<\/a> to obtain an absolute <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>. (For\nexample, <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> will return an <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> for\nits <a href=\"painting\/Decoration\/padding.html\">padding<\/a>.)<\/p>\n        ",
            "memberOf": "painting.Decoration",
            "isConstant": false,
            "href": "painting\/Decoration\/padding.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get padding =&gt; EdgeInsets.zero;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "material.UnderlineTabIndicator",
        "painting.BoxDecoration",
        "painting.FlutterLogoDecoration",
        "painting.ShapeDecoration",
        "widgets.DecorationTween"
    ],
    "realImplementors": [
        "material.UnderlineTabIndicator",
        "painting.BoxDecoration",
        "painting.FlutterLogoDecoration",
        "painting.ShapeDecoration",
        "widgets.DecorationTween"
    ],
    "cn": [],
    "href": "painting\/Decoration-class.html",
    "desc": "<p>A description of a box decoration (a decoration applied to a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>).<\/p>\n<p>This class presents the abstract interface for all decorations.\nSee <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> for a concrete example.<\/p>\n<p>To actually paint a <a href=\"painting\/Decoration-class.html\">Decoration<\/a>, use the <a href=\"painting\/Decoration\/createBoxPainter.html\">createBoxPainter<\/a>\nmethod to obtain a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a>. <a href=\"painting\/Decoration-class.html\">Decoration<\/a> objects can be\nshared between boxes; <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> objects can cache resources to\nmake painting on a particular surface faster.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Decoration"
}