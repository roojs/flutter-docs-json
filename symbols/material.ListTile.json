{
    "desc": "<p>A single fixed-height row that typically contains some text as well as\na leading or trailing icon.<\/p>\n<p>A list tile contains one to three lines of text optionally flanked by icons or\nother widgets, such as check boxes. The icons (or other widgets) for the\ntile are defined with the <a href=\"material\/ListTile\/leading.html\">leading<\/a> and <a href=\"material\/ListTile\/trailing.html\">trailing<\/a> parameters. The first\nline of text is not optional and is specified with <a href=\"material\/ListTile\/title.html\">title<\/a>. The value of\n<a href=\"material\/ListTile\/subtitle.html\">subtitle<\/a>, which <em>is<\/em> optional, will occupy the space allocated for an\nadditional line of text, or two lines if <a href=\"material\/ListTile\/isThreeLine.html\">isThreeLine<\/a> is true. If <a href=\"material\/ListTile\/dense.html\">dense<\/a>\nis true then the overall height of this tile and the size of the\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>s that wrap the <a href=\"material\/ListTile\/title.html\">title<\/a> and <a href=\"material\/ListTile\/subtitle.html\">subtitle<\/a> widget are reduced.<\/p>\n<p>It is the responsibility of the caller to ensure that <a href=\"material\/ListTile\/title.html\">title<\/a> does not wrap,\nand to ensure that <a href=\"material\/ListTile\/subtitle.html\">subtitle<\/a> doesn't wrap (if <a href=\"material\/ListTile\/isThreeLine.html\">isThreeLine<\/a> is false) or\nwraps to two lines (if it is true).<\/p>\n<p>List tiles are typically used in <a href=\"widgets\/ListView-class.html\">ListView<\/a>s, or arranged in <a href=\"widgets\/Column-class.html\">Column<\/a>s in\n<a href=\"material\/Drawer-class.html\">Drawer<\/a>s and <a href=\"material\/Card-class.html\">Card<\/a>s.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere is a simple tile with an icon and some text.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">ListTile(\n  leading: const Icon(Icons.event_seat),\n  title: const Text('The seat for the narrator'),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTiles can be much more elaborate. Here is a tile which can be tapped, but\nwhich is disabled when the <code>_act<\/code> variable is not 2. When the tile is\ntapped, the whole row has an ink splash effect (see <a href=\"material\/InkWell-class.html\">InkWell<\/a>).\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">int _act = 1;\n\/\/ ...\nListTile(\n  leading: const Icon(Icons.flight_land),\n  title: const Text('Trix\\'s airplane'),\n  subtitle: _act != 2 ? const Text('The airplane is only in Act II.') : null,\n  enabled: _act == 2,\n  onTap: () { \/* react to the tile being tapped *\/ }\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/ListTileTheme-class.html\">ListTileTheme<\/a>, which defines visual properties for <a href=\"material\/ListTile-class.html\">ListTile<\/a>s.<\/li>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which can display an arbitrary number of <a href=\"material\/ListTile-class.html\">ListTile<\/a>s\nin a scrolling list.<\/li>\n<li>\n<a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a>, which shows an icon representing a person and is often\nused as the <a href=\"material\/ListTile\/leading.html\">leading<\/a> element of a ListTile.<\/li>\n<li>\n<a href=\"material\/Card-class.html\">Card<\/a>, which can be used with <a href=\"widgets\/Column-class.html\">Column<\/a> to show a few <a href=\"material\/ListTile-class.html\">ListTile<\/a>s.<\/li>\n<li>\n<a href=\"material\/Divider-class.html\">Divider<\/a>, which can be used to separate <a href=\"material\/ListTile-class.html\">ListTile<\/a>s.<\/li>\n<li>\n<a href=\"material\/ListTile\/divideTiles.html\">ListTile.divideTiles<\/a>, a utility for inserting <a href=\"material\/Divider-class.html\">Divider<\/a>s in between <a href=\"material\/ListTile-class.html\">ListTile<\/a>s.<\/li>\n<li>\n<a href=\"material\/CheckboxListTile-class.html\">CheckboxListTile<\/a>, <a href=\"material\/RadioListTile-class.html\">RadioListTile<\/a>, and <a href=\"material\/SwitchListTile-class.html\">SwitchListTile<\/a>, widgets\nthat combine <a href=\"material\/ListTile-class.html\">ListTile<\/a> with other controls.<\/li>\n<li><a href=\"https:\/\/material.io\/design\/components\/lists.html\">material.io\/design\/components\/lists.html<\/a><\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "material\/ListTile-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.ListTile",
    "shortname": "ListTile",
    "extends": [
        "widgets.StatelessWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>Called when the user long-presses on this list tile.<\/p>\n<p>Inoperative if <a href=\"material\/ListTile\/enabled.html\">enabled<\/a> is false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureLongPressCallback onLongPress\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/onLongPress.html",
            "isDeprecated": "0",
            "type": "gestures.GestureLongPressCallback",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>Called when the user taps this list tile.<\/p>\n<p>Inoperative if <a href=\"material\/ListTile\/enabled.html\">enabled<\/a> is false.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureTapCallback onTap\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/onTap.html",
            "isDeprecated": "0",
            "type": "gestures.GestureTapCallback",
            "memberOf": "material.ListTile",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a list tile.<\/p>\n<p>If <code>isThreeLine<\/code> is true, then <code>subtitle<\/code> must not be null.<\/p>\n<p>Requires one of its ancestors to be a <a href=\"material\/Material-class.html\">Material<\/a> widget.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ListTile({\n  Key key,\n  this.leading,\n  this.title,\n  this.subtitle,\n  this.trailing,\n  this.isThreeLine = false,\n  this.dense,\n  this.contentPadding,\n  this.enabled = true,\n  this.onTap,\n  this.onLongPress,\n  this.selected = false,\n}) : assert(isThreeLine != null),\n     assert(enabled != null),\n     assert(selected != null),\n     assert(!isThreeLine || subtitle != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "material\/ListTile\/ListTile.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "material.ListTile",
            "params": [
                {
                    "name": "contentPadding",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.EdgeInsetsGeometry"
                },
                {
                    "name": "dense",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "enabled",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "isThreeLine",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "leading",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "onLongPress",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "gestures.GestureLongPressCallback"
                },
                {
                    "name": "onTap",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "gestures.GestureTapCallback"
                },
                {
                    "name": "selected",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "subtitle",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "title",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "trailing",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                }
            ]
        },
        {
            "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"material\/ListTile\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasMaterial(context));\n  final ThemeData theme = Theme.of(context);\n  final ListTileTheme tileTheme = ListTileTheme.of(context);\n\n  IconThemeData iconThemeData;\n  if (leading != null || trailing != null)\n    iconThemeData = IconThemeData(color: _iconColor(theme, tileTheme));\n\n  Widget leadingIcon;\n  if (leading != null) {\n    leadingIcon = IconTheme.merge(\n      data: iconThemeData,\n      child: leading,\n    );\n  }\n\n  final TextStyle titleStyle = _titleTextStyle(theme, tileTheme);\n  final Widget titleText = AnimatedDefaultTextStyle(\n    style: titleStyle,\n    duration: kThemeChangeDuration,\n    child: title ?? const SizedBox(),\n  );\n\n  Widget subtitleText;\n  TextStyle subtitleStyle;\n  if (subtitle != null) {\n    subtitleStyle = _subtitleTextStyle(theme, tileTheme);\n    subtitleText = AnimatedDefaultTextStyle(\n      style: subtitleStyle,\n      duration: kThemeChangeDuration,\n      child: subtitle,\n    );\n  }\n\n  Widget trailingIcon;\n  if (trailing != null) {\n    trailingIcon = IconTheme.merge(\n      data: iconThemeData,\n      child: trailing,\n    );\n  }\n\n  const EdgeInsets _defaultContentPadding = EdgeInsets.symmetric(horizontal: 16.0);\n  final TextDirection textDirection = Directionality.of(context);\n  final EdgeInsets resolvedContentPadding = contentPadding?.resolve(textDirection)\n    ?? tileTheme?.contentPadding?.resolve(textDirection)\n    ?? _defaultContentPadding;\n\n  return InkWell(\n    onTap: enabled ? onTap : null,\n    onLongPress: enabled ? onLongPress : null,\n    child: Semantics(\n      selected: selected,\n      enabled: enabled,\n      child: SafeArea(\n        top: false,\n        bottom: false,\n        minimum: resolvedContentPadding,\n        child: _ListTile(\n          leading: leadingIcon,\n          title: titleText,\n          subtitle: subtitleText,\n          trailing: trailingIcon,\n          isDense: _isDenseLayout(tileTheme),\n          isThreeLine: isThreeLine,\n          textDirection: textDirection,\n          titleBaselineType: titleStyle.textBaseline,\n          subtitleBaselineType: subtitleStyle?.textBaseline,\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
            "href": "material\/ListTile\/build.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ListTile",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Add a one pixel border in between each tile. If color isn't specified the\n<a href=\"material\/ThemeData\/dividerColor.html\">ThemeData.dividerColor<\/a> of the context's <a href=\"material\/Theme-class.html\">Theme<\/a> is used.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Divider-class.html\">Divider<\/a>, which you can use to obtain this effect manually.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;Widget&gt; divideTiles({ BuildContext context, @required Iterable&lt;Widget&gt; tiles, Color color }) sync* {\n  assert(tiles != null);\n  assert(color != null || context != null);\n\n  final Iterator&lt;Widget&gt; iterator = tiles.iterator;\n  final bool isNotEmpty = iterator.moveNext();\n\n  final Decoration decoration = BoxDecoration(\n    border: Border(\n      bottom: Divider.createBorderSide(context, color: color),\n    ),\n  );\n\n  Widget tile = iterator.current;\n  while (iterator.moveNext()) {\n    yield DecoratedBox(\n      position: DecorationPosition.foreground,\n      decoration: decoration,\n      child: tile,\n    );\n    tile = iterator.current;\n  }\n  if (isNotEmpty)\n    yield tile;\n}<\/code><\/pre>\n    ",
            "href": "material\/ListTile\/divideTiles.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<widgets.Widget>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.ListTile",
            "params": [
                {
                    "name": "color",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                },
                {
                    "name": "tiles",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<widgets.Widget>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The tile's internal padding.<\/p>\n<p>Insets a <a href=\"material\/ListTile-class.html\">ListTile<\/a>'s contents: its <a href=\"material\/ListTile\/leading.html\">leading<\/a>, <a href=\"material\/ListTile\/title.html\">title<\/a>, <a href=\"material\/ListTile\/subtitle.html\">subtitle<\/a>,\nand <a href=\"material\/ListTile\/trailing.html\">trailing<\/a> widgets.<\/p>\n<p>If null, <code>EdgeInsets.symmetric(horizontal: 16.0)<\/code> is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry contentPadding\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/contentPadding.html",
            "isDeprecated": "0",
            "type": "painting.EdgeInsetsGeometry",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>Whether this list tile is part of a vertically dense list.<\/p>\n<p>If this property is null then its value is based on <a href=\"material\/ListTile\/dense.html\">ListTileTheme.dense<\/a>.<\/p>\n<p>Dense list tiles default to a smaller height.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool dense\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/dense.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>Whether this list tile is interactive.<\/p>\n<p>If false, this list tile is styled with the disabled color from the\ncurrent <a href=\"material\/Theme-class.html\">Theme<\/a> and the <a href=\"material\/ListTile\/onTap.html\">onTap<\/a> and <a href=\"material\/ListTile\/onLongPress.html\">onLongPress<\/a> callbacks are\ninoperative.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/enabled.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>Whether this list tile is intended to display three lines of text.<\/p>\n<p>If true, then <a href=\"material\/ListTile\/subtitle.html\">subtitle<\/a> must be non-null (since it is expected to give\nthe second and third lines of text).<\/p>\n<p>If false, the list tile is treated as having one line if the subtitle is\nnull and treated as having two lines if the subtitle is non-null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isThreeLine\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/isThreeLine.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>A widget to display before the title.<\/p>\n<p>Typically an <a href=\"widgets\/Icon-class.html\">Icon<\/a> or a <a href=\"material\/CircleAvatar-class.html\">CircleAvatar<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget leading\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/leading.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>If this tile is also <a href=\"material\/ListTile\/enabled.html\">enabled<\/a> then icons and text are rendered with the same color.<\/p>\n<p>By default the selected color is the theme's primary color. The selected color\ncan be overridden with a <a href=\"material\/ListTileTheme-class.html\">ListTileTheme<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool selected\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/selected.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>Additional content displayed below the title.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n<p>If <a href=\"material\/ListTile\/isThreeLine.html\">isThreeLine<\/a> is false, this should not wrap.<\/p>\n<p>If <a href=\"material\/ListTile\/isThreeLine.html\">isThreeLine<\/a> is true, this should be configured to take a maximum of\ntwo lines.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget subtitle\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/subtitle.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>The primary content of the list tile.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n<p>This should not wrap.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/title.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.ListTile",
            "params": []
        },
        {
            "desc": "<p>A widget to display after the title.<\/p>\n<p>Typically an <a href=\"widgets\/Icon-class.html\">Icon<\/a> widget.<\/p>\n<p>To show right-aligned metadata (assuming left-to-right reading order;\nleft-aligned for right-to-left reading order), consider using a <a href=\"widgets\/Row-class.html\">Row<\/a> with\n<code>MainAxisAlign.baseline<\/code> alignment whose first item is <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> and\nwhose second child is the metadata text, instead of using the <a href=\"material\/ListTile\/trailing.html\">trailing<\/a>\nproperty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget trailing\n\n<\/code><\/pre>\n        ",
            "href": "material\/ListTile\/trailing.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "material.ListTile",
            "params": []
        }
    ]
}