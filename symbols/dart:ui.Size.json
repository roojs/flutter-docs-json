{
    "name": "dart:ui.Size",
    "extends": [
        "dart:ui.OffsetBase",
        "dart:core.Object"
    ],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator %",
            "type": "dart:ui.Size",
            "desc": "<p>Modulo (remainder) operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the remainder of dividing the\nleft-hand-side operand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_modulo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator %(double operand) =&gt; new Size(width % operand, height % operand);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator *",
            "type": "dart:ui.Size",
            "desc": "<p>Multiplication operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the dimensions of the left-hand-side\noperand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) multiplied by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator *(double operand) =&gt; new Size(width * operand, height * operand);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator +",
            "type": "dart:ui.Size",
            "desc": "<p>Binary addition operator for adding an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> to a <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> is the sum of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> of the\nleft-hand-side operand, a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, and the <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> dimension of the\nright-hand-side operand, an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, and whose <a href=\"dart-ui\/Size\/height.html\">height<\/a> is the sum of the\n<a href=\"dart-ui\/Size\/height.html\">height<\/a> of the left-hand-side operand and the <a href=\"dart-ui\/Offset\/dy.html\">Offset.dy<\/a> dimension of\nthe right-hand-side operand.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator +(Offset other) =&gt; new Size(width + other.dx, height + other.dy);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator -",
            "type": "dart:ui.OffsetBase",
            "desc": "<p>Binary subtraction operator for <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>Subtracting a <a href=\"dart-ui\/Size-class.html\">Size<\/a> from a <a href=\"dart-ui\/Size-class.html\">Size<\/a> returns the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> that describes how\nmuch bigger the left-hand-side operand is than the right-hand-side\noperand. Adding that resulting <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> to the <a href=\"dart-ui\/Size-class.html\">Size<\/a> that was the\nright-hand-side operand would return a <a href=\"dart-ui\/Size-class.html\">Size<\/a> equal to the <a href=\"dart-ui\/Size-class.html\">Size<\/a> that was\nthe left-hand-side operand. (i.e. if <code>sizeA - sizeB -&gt; offsetA<\/code>, then\n<code>offsetA + sizeB -&gt; sizeA<\/code>)<\/p>\n<p>Subtracting an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from a <a href=\"dart-ui\/Size-class.html\">Size<\/a> returns the <a href=\"dart-ui\/Size-class.html\">Size<\/a> that is smaller than\nthe <a href=\"dart-ui\/Size-class.html\">Size<\/a> operand by the difference given by the <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> operand. In other\nwords, the returned <a href=\"dart-ui\/Size-class.html\">Size<\/a> has a <a href=\"dart-ui\/Size\/width.html\">width<\/a> consisting of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> of the\nleft-hand-side operand minus the <a href=\"dart-ui\/Offset\/dx.html\">Offset.dx<\/a> dimension of the\nright-hand-side operand, and a <a href=\"dart-ui\/Size\/height.html\">height<\/a> consisting of the <a href=\"dart-ui\/Size\/height.html\">height<\/a> of the\nleft-hand-side operand minus the <a href=\"dart-ui\/Offset\/dy.html\">Offset.dy<\/a> dimension of the\nright-hand-side operand.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.OffsetBase",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OffsetBase operator -(OffsetBase other) {\n  if (other is Size)\n    return new Offset(width - other.width, height - other.height);\n  if (other is Offset)\n    return new Size(width - other.dx, height - other.dy);\n  throw new ArgumentError(other);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator \/",
            "type": "dart:ui.Size",
            "desc": "<p>Division operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the dimensions of the left-hand-side\noperand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) divided by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator \/(double operand) =&gt; new Size(width \/ operand, height \/ operand);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>Compares two Sizes for equality.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ We don't compare the runtimeType because of _DebugSize in the framework.\n@override\nbool operator ==(dynamic other) {\n  if (other is! Size)\n    return false;\n  final Size typedOther = other;\n  return _dx == typedOther._dx &amp;&amp;\n         _dy == typedOther._dy;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Size",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the given <code>width<\/code> and <code>height<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Size\/Size.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size(double width, double height) : super(width, height);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bottomCenter",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the center of the bottom edge of the rectangle described by\nthe given offset (which is interpreted as the top-left corner) and this\nsize.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/bottomLeft.html\">Rect.bottomLeft<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/bottomCenter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset bottomCenter(Offset origin) =&gt; new Offset(origin.dx + width \/ 2.0, origin.dy + height);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bottomLeft",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the intersection of the bottom and left edges of the\nrectangle described by the given offset (which is interpreted as the\ntop-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/bottomLeft.html\">Rect.bottomLeft<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/bottomLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset bottomLeft(Offset origin) =&gt; new Offset(origin.dx, origin.dy + height);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bottomRight",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the intersection of the bottom and right edges of the\nrectangle described by the given offset (which is interpreted as the\ntop-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/bottomRight.html\">Rect.bottomRight<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/bottomRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset bottomRight(Offset origin) =&gt; new Offset(origin.dx + width, origin.dy + height);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "center",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the point halfway between the left and right and the top and\nbottom edges of the rectangle described by the given offset (which is\ninterpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/center.html\">Rect.center<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/center.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset center(Offset origin) =&gt; new Offset(origin.dx + width \/ 2.0, origin.dy + height \/ 2.0);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "centerLeft",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the center of the left edge of the rectangle described by the\ngiven offset (which is interpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/centerLeft.html\">Rect.centerLeft<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/centerLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset centerLeft(Offset origin) =&gt; new Offset(origin.dx, origin.dy + height \/ 2.0);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "centerRight",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the center of the right edge of the rectangle described by the\ngiven offset (which is interpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/centerLeft.html\">Rect.centerLeft<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/centerRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset centerRight(Offset origin) =&gt; new Offset(origin.dx + width, origin.dy + height \/ 2.0);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "contains",
            "type": "dart:core.bool",
            "desc": "<p>Whether the point specified by the given offset (which is assumed to be\nrelative to the top left of the size) lies between the left and right and\nthe top and bottom edges of a rectangle of this size.<\/p>\n<p>Rectangles include their top and left edges but exclude their bottom and\nright edges.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/contains.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Offset offset) {\n  return offset.dx &gt;= 0.0 &amp;&amp; offset.dx &lt; width &amp;&amp; offset.dy &gt;= 0.0 &amp;&amp; offset.dy &lt; height;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Size.copy",
            "type": "",
            "desc": "<p>Creates an instance of <a href=\"dart-ui\/Size-class.html\">Size<\/a> that has the same values as another.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "source",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Size\/Size.copy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Used by the rendering library's _DebugSize hack.\nSize.copy(Size source) : super(source.width, source.height);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Size.fromHeight",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the given <code>height<\/code> and an infinite <a href=\"dart-ui\/Size\/width.html\">width<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Size\/Size.fromHeight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.fromHeight(double height) : super(double.infinity, height);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Size.fromRadius",
            "type": "",
            "desc": "<p>Creates a square <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> are twice the given\ndimension.<\/p>\n<p>This is a square that contains a circle with the given radius.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Size\/Size.square.html\">new Size.square<\/a>, which creates a square with the given dimension.<\/li><\/ul>",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Size\/Size.fromRadius.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.fromRadius(double radius) : super(radius * 2.0, radius * 2.0);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Size.fromWidth",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the given <code>width<\/code> and an infinite <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Size\/Size.fromWidth.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.fromWidth(double width) : super(width, double.infinity);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "dart:ui.Size",
            "desc": "<p>Linearly interpolate between two sizes<\/p>\n<p>If either size is null, this function interpolates from <a href=\"dart-ui\/Size\/zero-constant.html\">Size.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Size lerp(Size a, Size b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return new Size(lerpDouble(a.width, b.width, t), lerpDouble(a.height, b.height, t));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Size.square",
            "type": "",
            "desc": "<p>Creates a square <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> are the given dimension.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/Size\/Size.fromRadius.html\">new Size.fromRadius<\/a>, which is more convenient when the available size\nis the radius of a circle.<\/li><\/ul>",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "dimension",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Size\/Size.square.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Size.square(double dimension) : super(dimension, dimension);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/Size\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'Size(${width?.toStringAsFixed(1)}, ${height?.toStringAsFixed(1)})';<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "topCenter",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the center of the top edge of the rectangle described by the\ngiven offset (which is interpreted as the top-left corner) and this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/topCenter.html\">Rect.topCenter<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/topCenter.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset topCenter(Offset origin) =&gt; new Offset(origin.dx + width \/ 2.0, origin.dy);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "topLeft",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the intersection of the top and left edges of the rectangle\ndescribed by the given <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> (which is interpreted as the top-left corner)\nand this <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/topLeft.html\">Rect.topLeft<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/topLeft.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset topLeft(Offset origin) =&gt; origin;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "topRight",
            "type": "dart:ui.Offset",
            "desc": "<p>The offset to the intersection of the top and right edges of the rectangle\ndescribed by the given offset (which is interpreted as the top-left corner)\nand this size.<\/p>\n<p>See also <a href=\"dart-ui\/Size\/topRight.html\">Rect.topRight<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "origin",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/topRight.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset topRight(Offset origin) =&gt; new Offset(origin.dx + width, origin.dy);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~\/",
            "type": "dart:ui.Size",
            "desc": "<p>Integer (truncating) division operator.<\/p>\n<p>Returns a <a href=\"dart-ui\/Size-class.html\">Size<\/a> whose dimensions are the dimensions of the left-hand-side\noperand (a <a href=\"dart-ui\/Size-class.html\">Size<\/a>) divided by the scalar right-hand-side operand (a\n<a href=\"dart-core\/double-class.html\">double<\/a>), rounded towards zero.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Size",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Size\/operator_truncate_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size operator ~\/(double operand) =&gt; new Size((width ~\/ operand).toDouble(), (height ~\/ operand).toDouble());<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "aspectRatio",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The aspect ratio of this size.<\/p>\n<p>This returns the <a href=\"dart-ui\/Size\/width.html\">width<\/a> divided by the <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n<p>If the <a href=\"dart-ui\/Size\/width.html\">width<\/a> is zero, the result will be zero. If the <a href=\"dart-ui\/Size\/height.html\">height<\/a> is zero\n(and the <a href=\"dart-ui\/Size\/width.html\">width<\/a> is not), the result will be <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a> or\n<a href=\"dart-core\/double\/negativeInfinity-constant.html\">double.negativeInfinity<\/a> as determined by the sign of <a href=\"dart-ui\/Size\/width.html\">width<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AspectRatio-class.html\">AspectRatio<\/a>, a widget for giving a child widget a specific aspect\nratio.<\/li>\n<li>\n<a href=\"widgets\/FittedBox-class.html\">FittedBox<\/a>, a widget that (in most modes) attempts to maintain a\nchild widget's aspect ratio while changing its size.<\/li>\n<\/ul>",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/aspectRatio.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get aspectRatio {\n  if (height != 0.0)\n    return width \/ height;\n  if (width &gt; 0.0)\n    return double.infinity;\n  if (width &lt; 0.0)\n    return double.negativeInfinity;\n  return 0.0;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "flipped",
            "type": "dart:ui.Size",
            "types": [],
            "desc": "<p>A <a href=\"dart-ui\/Size-class.html\">Size<\/a> with the <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> swapped.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/flipped.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get flipped =&gt; new Size(height, width);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Size\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Size\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_dx, _dy);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "height",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The vertical extent of this size.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/height.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height =&gt; _dy;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-ui\/Size\/infinite-constant.html",
            "desc": "<p>A size whose <a href=\"dart-ui\/Size\/width.html\">width<\/a> and <a href=\"dart-ui\/Size\/height.html\">height<\/a> are infinite.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/OffsetBase\/isInfinite.html\">isInfinite<\/a>, which checks whether either dimension is infinite.<\/li>\n<li>\n<a href=\"dart-ui\/OffsetBase\/isFinite.html\">isFinite<\/a>, which checks whether both dimensions are finite.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Size infinite = const Size(double.infinity, double.infinity)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "infinite",
            "memberOf": "dart:ui.Size"
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this size encloses a non-zero area.<\/p>\n<p>Negative areas are considered empty.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; width &lt;= 0.0 || height &lt;= 0.0;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "longestSide",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The greater of the magnitudes of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> and the <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/longestSide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get longestSide =&gt; math.max(width.abs(), height.abs());<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "shortestSide",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The lesser of the magnitudes of the <a href=\"dart-ui\/Size\/width.html\">width<\/a> and the <a href=\"dart-ui\/Size\/height.html\">height<\/a>.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/shortestSide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get shortestSide =&gt; math.min(width.abs(), height.abs());<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "width",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The horizontal extent of this size.<\/p>\n        ",
            "memberOf": "dart:ui.Size",
            "isConstant": false,
            "href": "dart-ui\/Size\/width.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width =&gt; _dx;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-ui\/Size\/zero-constant.html",
            "desc": "<p>An empty size, one with a zero width and a zero height.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Size zero = const Size(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "zero",
            "memberOf": "dart:ui.Size"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "animation.SizeTween"
    ],
    "realImplementors": [
        "animation.SizeTween"
    ],
    "cn": [],
    "href": "dart-ui\/Size-class.html",
    "desc": "<p>Holds a 2D floating-point size.<\/p>\n<p>You can think of this as an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> from the origin.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Size"
}