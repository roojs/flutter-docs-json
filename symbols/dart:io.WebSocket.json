{
    "desc": "<p>A two-way HTTP communication object for client or server applications.<\/p>\n<p>The stream exposes the messages received. A text message will be of type\n<code>String<\/code> and a binary message will be of type <code>List&lt;int&gt;<\/code>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-io\/WebSocket-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:io",
    "name": "dart:io.WebSocket",
    "shortname": "WebSocket",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('This constructor will be removed in Dart 2.0. Use `implements`'\n    ' instead of `extends` if implementing this abstract class.')\nWebSocket();<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocket\/WebSocket.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>Sends data on the WebSocket connection. The data in <code>data<\/code> must\nbe either a <code>String<\/code>, or a <code>List&lt;int&gt;<\/code> holding bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(\/*String|List&lt;int&gt;*\/ data);<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocket\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocket",
            "params": [
                {
                    "name": "data",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Sends data from a stream on WebSocket connection. Each data event from\n<code>stream<\/code> will be send as a single WebSocket frame. The data from <code>stream<\/code>\nmust be either <code>String<\/code>s, or <code>List&lt;int&gt;<\/code>s holding bytes.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream stream);<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocket\/addStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocket",
            "params": [
                {
                    "name": "stream",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Sends a text message with the text represented by <code>bytes<\/code>.<\/p>\n<p>The <code>bytes<\/code> should be valid UTF-8 encoded Unicode characters. If they are\nnot, the receiving end will close the connection.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addUtf8Text(List&lt;int&gt; bytes);<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocket\/addUtf8Text.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocket",
            "params": [
                {
                    "name": "bytes",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.List<dart:core.int>"
                }
            ]
        },
        {
            "desc": "<p>Closes the WebSocket connection. Set the optional <code>code<\/code> and <code>reason<\/code>\narguments to send close information to the remote peer. If they are\nomitted, the peer will see <a class=\"deprecated\" href=\"dart-io\/WebSocketStatus\/NO_STATUS_RECEIVED-constant.html\">WebSocketStatus.NO_STATUS_RECEIVED<\/a> code\nwith no reason.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close([int code, String reason]);<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocket\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocket",
            "params": [
                {
                    "name": "code",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "reason",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Create a new WebSocket connection. The URL supplied in <code>url<\/code>\nmust use the scheme <code>ws<\/code> or <code>wss<\/code>.<\/p>\n<p>The <code>protocols<\/code> argument is specifying the subprotocols the\nclient is willing to speak.<\/p>\n<p>The <code>headers<\/code> argument is specifying additional HTTP headers for\nsetting up the connection. This would typically be the <code>Origin<\/code>\nheader and potentially cookies. The keys of the map are the header\nfields and the values are either String or List<string>.<\/string><\/p>\n<p>If <code>headers<\/code> is provided, there are a number of headers\nwhich are controlled by the WebSocket connection process. These\nheaders are:<\/p>\n<ul>\n<li><code>connection<\/code><\/li>\n<li><code>sec-websocket-key<\/code><\/li>\n<li><code>sec-websocket-protocol<\/code><\/li>\n<li><code>sec-websocket-version<\/code><\/li>\n<li><code>upgrade<\/code><\/li>\n<\/ul>\n<p>If any of these are passed in the <code>headers<\/code> map they will be ignored.<\/p>\n<p>If the <code>url<\/code> contains user information this will be passed as basic\nauthentication when setting up the connection.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;WebSocket&gt; connect(String url,\n        {Iterable&lt;String&gt; protocols,\n        Map&lt;String, dynamic&gt; headers,\n        CompressionOptions compression:\n            CompressionOptions.compressionDefault}) =&gt;\n    _WebSocketImpl.connect(url, protocols, headers, compression: compression);<\/code><\/pre>\n    ",
            "href": "dart-io\/WebSocket\/connect.html",
            "isDeprecated": "0",
            "type": "dart:async.Future<dart:io.WebSocket>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:io.WebSocket",
            "params": [
                {
                    "name": "compression",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:io.CompressionOptions"
                },
                {
                    "name": "headers",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map<dart:core.String>"
                },
                {
                    "name": "protocols",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.String>"
                },
                {
                    "name": "url",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The close code set when the WebSocket connection is closed. If\nthere is no close code available this property will be <code>null<\/code><\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get closeCode;<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/closeCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>The close reason set when the WebSocket connection is closed. If\nthere is no close reason available this property will be <code>null<\/code><\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get closeReason;<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/closeReason.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>The extensions property is initially the empty string. After the\nWebSocket connection is established this string reflects the\nextensions used by the server.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get extensions;<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/extensions.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>Set and get the interval for sending ping signals. If a ping message is not\nanswered by a pong message from the peer, the <code>WebSocket<\/code> is assumed\ndisconnected and the connection is closed with a\n<a class=\"deprecated\" href=\"dart-io\/WebSocketStatus\/GOING_AWAY-constant.html\">WebSocketStatus.GOING_AWAY<\/a> close code. When a ping signal is sent, the\npong message must be received within <a href=\"dart-io\/WebSocket\/pingInterval.html\">pingInterval<\/a>.<\/p>\n<p>There are never two outstanding pings at any given time, and the next ping\ntimer starts when the pong is received.<\/p>\n<p>Set the <a href=\"dart-io\/WebSocket\/pingInterval.html\">pingInterval<\/a> to <code>null<\/code> to disable sending ping messages.<\/p>\n<p>The default value is <code>null<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration pingInterval\n\n<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/pingInterval.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>The protocol property is initially the empty string. After the\nWebSocket connection is established the value is the subprotocol\nselected by the server. If no subprotocol is negotiated the\nvalue will remain <code>null<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get protocol;<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/protocol.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>Returns the current state of the connection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get readyState;<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/readyState.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:io.WebSocket",
            "params": []
        },
        {
            "desc": "<p>Gets the user agent used for WebSocket connections.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get userAgent =&gt; _WebSocketImpl.userAgent;<\/code><\/pre>\n        ",
            "href": "dart-io\/WebSocket\/userAgent.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "dart:io.WebSocket",
            "params": []
        }
    ]
}