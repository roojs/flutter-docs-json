{
    "desc": "<p>A controller with the stream it controls.<\/p>\n<p>This controller allows sending data, error and done events on\nits <a href=\"dart-async\/StreamController\/stream.html\">stream<\/a>.\nThis class can be used to create a simple stream that others\ncan listen on, and to push events to that stream.<\/p>\n<p>It's possible to check whether the stream is paused or not, and whether\nit has subscribers or not, as well as getting a callback when either of\nthese change.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-async\/StreamController-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:async",
    "name": "dart:async.StreamController",
    "shortname": "StreamController",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>The callback which is called when the stream is canceled.<\/p>\n<p>May be set to <code>null<\/code>, in which case no callback will happen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ControllerCancelCallback get onCancel;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/onCancel.html",
            "isDeprecated": false,
            "type": "dart:async.ControllerCancelCallback",
            "name": "onCancel",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>The callback which is called when the stream is listened to.<\/p>\n<p>May be set to <code>null<\/code>, in which case no callback will happen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ControllerCallback get onListen;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/onListen.html",
            "isDeprecated": false,
            "type": "dart:async.ControllerCallback",
            "name": "onListen",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>The callback which is called when the stream is paused.<\/p>\n<p>May be set to <code>null<\/code>, in which case no callback will happen.<\/p>\n<p>Pause related callbacks are not supported on broadcast stream controllers.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ControllerCallback get onPause;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/onPause.html",
            "isDeprecated": false,
            "type": "dart:async.ControllerCallback",
            "name": "onPause",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>The callback which is called when the stream is resumed.<\/p>\n<p>May be set to <code>null<\/code>, in which case no callback will happen.<\/p>\n<p>Pause related callbacks are not supported on broadcast stream controllers.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ControllerCallback get onResume;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/onResume.html",
            "isDeprecated": false,
            "type": "dart:async.ControllerCallback",
            "name": "onResume",
            "memberOf": "dart:async.StreamController",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>A controller with a <a href=\"dart-async\/StreamController\/stream.html\">stream<\/a> that supports only one single subscriber.<\/p>\n<p>If <code>sync<\/code> is true, the returned stream controller is a\n<a href=\"dart-async\/SynchronousStreamController-class.html\">SynchronousStreamController<\/a>, and must be used with the care\nand attention necessary to not break the <a href=\"dart-async\/Stream-class.html\">Stream<\/a> contract. If in doubt,\nuse the non-sync version.<\/p>\n<p>Using an asynchronous controller will never give the wrong\nbehavior, but using a synchronous controller incorrectly can cause\notherwise correct programs to break.<\/p>\n<p>A synchronous controller is only intended for optimizing event\npropagation when one asynchronous event immediately triggers another.\nIt should not be used unless the calls to <a href=\"dart-async\/StreamController\/add.html\">add<\/a> or <a href=\"dart-async\/StreamController\/addError.html\">addError<\/a>\nare guaranteed to occur in places where it won't break <code>Stream<\/code> invariants.<\/p>\n<p>Use synchronous controllers only to forward (potentially transformed)\nevents from another stream or a future.<\/p>\n<p>A Stream should be inert until a subscriber starts listening on it (using\nthe <code>onListen<\/code> callback to start producing events). Streams should not\nleak resources (like websockets) when no user ever listens on the stream.<\/p>\n<p>The controller buffers all incoming events until a subscriber is\nregistered, but this feature should only be used in rare circumstances.<\/p>\n<p>The <code>onPause<\/code> function is called when the stream becomes\npaused. <code>onResume<\/code> is called when the stream resumed.<\/p>\n<p>The <code>onListen<\/code> callback is called when the stream\nreceives its listener and <code>onCancel<\/code> when the listener ends\nits subscription. If <code>onCancel<\/code> needs to perform an asynchronous operation,\n<code>onCancel<\/code> should return a future that completes when the cancel operation\nis done.<\/p>\n<p>If the stream is canceled before the controller needs new data the\n<code>onResume<\/code> call might not be executed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory StreamController(\n    {void onListen(),\n    void onPause(),\n    void onResume(),\n    onCancel(),\n    bool sync: false}) {\n  return sync\n      ? new _SyncStreamController&lt;T&gt;(onListen, onPause, onResume, onCancel)\n      : new _AsyncStreamController&lt;T&gt;(onListen, onPause, onResume, onCancel);\n}<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamController\/StreamController.html",
            "isDeprecated": "0",
            "type": "",
            "name": "StreamController",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:async.StreamController",
            "params": [
                {
                    "name": "onCancel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<dynamic>"
                },
                {
                    "name": "onListen",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<void>"
                },
                {
                    "name": "onPause",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<void>"
                },
                {
                    "name": "onResume",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<void>"
                },
                {
                    "name": "sync",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Sends a data <code>event<\/code>.<\/p>\n<p>Listeners receive this event in a later microtask.<\/p>\n<p>Note that a synchronous controller (created by passing true to the <code>sync<\/code>\nparameter of the <code>StreamController<\/code> constructor) delivers events\nimmediately. Since this behavior violates the contract mentioned here,\nsynchronous controllers should only be used as described in the\ndocumentation to ensure that the delivered events always <em>appear<\/em> as if\nthey were delivered in a separate microtask.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(T event);<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamController\/add.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamController",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Sends or enqueues an error event.<\/p>\n<p>If <code>error<\/code> is <code>null<\/code>, it is replaced by a <a href=\"dart-core\/NullThrownError-class.html\">NullThrownError<\/a>.<\/p>\n<p>Listeners receive this event at a later microtask. This behavior can be\noverridden by using <code>sync<\/code> controllers. Note, however, that sync\ncontrollers have to satisfy the preconditions mentioned in the\ndocumentation of the constructors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addError(Object error, [StackTrace stackTrace]);<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamController\/addError.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "addError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamController",
            "params": [
                {
                    "name": "error",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                },
                {
                    "name": "stackTrace",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.StackTrace"
                }
            ]
        },
        {
            "desc": "<p>Receives events from <code>source<\/code> and puts them into this controller's stream.<\/p>\n<p>Returns a future which completes when the source stream is done.<\/p>\n<p>Events must not be added directly to this controller using <a href=\"dart-async\/StreamController\/add.html\">add<\/a>,\n<a href=\"dart-async\/StreamController\/addError.html\">addError<\/a>, <a href=\"dart-async\/StreamController\/close.html\">close<\/a> or <a href=\"dart-async\/StreamController\/addStream.html\">addStream<\/a>, until the returned future\nis complete.<\/p>\n<p>Data and error events are forwarded to this controller's stream. A done\nevent on the source will end the <code>addStream<\/code> operation and complete the\nreturned future.<\/p>\n<p>If <code>cancelOnError<\/code> is true, only the first error on <code>source<\/code> is\nforwarded to the controller's stream, and the <code>addStream<\/code> ends\nafter this. If <code>cancelOnError<\/code> is false, all errors are forwarded\nand only a done event will end the <code>addStream<\/code>.\nIf <code>cancelOnError<\/code> is omitted, it defaults to false.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;T&gt; source, {bool cancelOnError});<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamController\/addStream.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "addStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamController",
            "params": [
                {
                    "name": "cancelOnError",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream"
                }
            ]
        },
        {
            "desc": "<p>Closes the stream.<\/p>\n<p>Listeners receive the done event at a later microtask. This behavior can be\noverridden by using <code>sync<\/code> controllers. Note, however, that sync\ncontrollers have to satisfy the preconditions mentioned in the\ndocumentation of the constructors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close();<\/code><\/pre>\n    ",
            "href": "dart-async\/StreamController\/close.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:async.StreamController",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether there is a subscriber on the <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasListener;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/hasListener.html",
            "name": "hasListener",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>Whether the stream controller is closed for adding more events.<\/p>\n<p>The controller becomes closed by calling the <a href=\"dart-async\/StreamController\/close.html\">close<\/a> method.\nNew events cannot be added, by calling <a href=\"dart-async\/StreamController\/add.html\">add<\/a> or <a href=\"dart-async\/StreamController\/addError.html\">addError<\/a>,\nto a closed controller.<\/p>\n<p>If the controller is closed,\nthe \"done\" event might not have been delivered yet,\nbut it has been scheduled, and it is too late to add more events.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/isClosed.html",
            "name": "isClosed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>Whether the subscription would need to buffer events.<\/p>\n<p>This is the case if the controller's stream has a listener and it is\npaused, or if it has not received a listener yet. In that case, the\ncontroller is considered paused as well.<\/p>\n<p>A broadcast stream controller is never considered paused. It always\nforwards its events to all uncanceled subscriptions, if any,\nand let the subscriptions handle their own pausing and buffering.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isPaused;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/isPaused.html",
            "name": "isPaused",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>Returns a view of this object that only exposes the <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> interface.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StreamSink&lt;T&gt; get sink;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/sink.html",
            "name": "sink",
            "isDeprecated": false,
            "type": "dart:async.StreamSink",
            "memberOf": "dart:async.StreamController",
            "params": []
        },
        {
            "desc": "<p>The stream that this controller is controlling.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;T&gt; get stream;<\/code><\/pre>\n        ",
            "href": "dart-async\/StreamController\/stream.html",
            "name": "stream",
            "isDeprecated": false,
            "type": "dart:async.Stream",
            "memberOf": "dart:async.StreamController",
            "params": []
        }
    ]
}