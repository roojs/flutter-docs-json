{
    "desc": "<p>A convenience class that wraps a number of widgets that are commonly\nrequired for an application.<\/p>\n<p>One of the primary roles that <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> provides is binding the system\nback button to popping the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> or quitting the application.<\/p>\n<p>See also: <a href=\"widgets\/CheckedModeBanner-class.html\">CheckedModeBanner<\/a>, <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>,\n<a href=\"widgets\/Localizations-class.html\">Localizations<\/a>, <a href=\"widgets\/Title-class.html\">Title<\/a>, <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, <a href=\"widgets\/Overlay-class.html\">Overlay<\/a>, <a href=\"widgets\/SemanticsDebugger-class.html\">SemanticsDebugger<\/a> (the\nwidgets wrapped by this one).<\/p>\n    ",
    "dtype": "class",
    "example": null,
    "href": "widgets\/WidgetsApp-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.WidgetsApp",
    "shortname": "WidgetsApp",
    "extends": [
        "widgets.StatefulWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "events": [
        {
            "desc": "<p>A builder for inserting widgets above the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> but below the other\nwidgets created by the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> widget, or for replacing the\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> entirely.<\/p>\n<p>For example, from the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> passed to this method, the\n<a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, <a href=\"widgets\/Localizations-class.html\">Localizations<\/a>, <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>, etc,\nare all available. They can also be overridden in a way that impacts all\nthe routes in the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>This is rarely useful, but can be used in applications that wish to\noverride those defaults, e.g. to force the application into right-to-left\nmode despite being in English, or to override the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> metrics\n(e.g. to leave a gap for advertisements shown by a plugin from OEM code).<\/p>\n<p>For specifically overriding the <a href=\"widgets\/WidgetsApp\/title.html\">title<\/a> with a value based on the\n<a href=\"widgets\/Localizations-class.html\">Localizations<\/a>, consider <a href=\"widgets\/WidgetsApp\/onGenerateTitle.html\">onGenerateTitle<\/a> instead.<\/p>\n<p>The <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> callback is passed two arguments, the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> (as\n<code>context<\/code>) and a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> widget (as <code>child<\/code>).<\/p>\n<p>If no routes are provided using <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>, <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or\n<a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>, the <code>child<\/code> will be null, and it is the responsibility\nof the <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> to provide the application's routing machinery.<\/p>\n<p>If routes <em>are<\/em> provided using one or more of those properties, then\n<code>child<\/code> is not null, and the returned value should include the <code>child<\/code> in\nthe widget subtree; if it does not, then the application will have no\nnavigator and the <a href=\"widgets\/WidgetsApp\/navigatorKey.html\">navigatorKey<\/a>, <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>, <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>,\n<a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>, <a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a>, and <a href=\"widgets\/WidgetsApp\/navigatorObservers.html\">navigatorObservers<\/a> properties will\nhave no effect.<\/p>\n<p>If <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> is null, it is as if a builder was specified that returned\nthe <code>child<\/code> directly. If it is null, routes must be provided using one of\nthe other properties listed above.<\/p>\n<p>Unless a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is provided, either implicitly from <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> being\nnull, or by a <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> including its <code>child<\/code> argument, or by a <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a>\nexplicitly providing a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> of its own, widgets and APIs such as\n<a href=\"widgets\/Hero-class.html\">Hero<\/a>, <a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a> and <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>, will not function.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TransitionBuilder builder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/builder.html",
            "isDeprecated": "0",
            "type": "widgets.TransitionBuilder",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Builds the widget the <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a> uses to switch between view and\ninspect modes.<\/p>\n<p>This lets <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> to use a material button to toggle the inspector\nselect mode without requiring <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a> to depend on the\nmaterial package.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InspectorSelectButtonBuilder inspectorSelectButtonBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/inspectorSelectButtonBuilder.html",
            "isDeprecated": "0",
            "type": "widgets.InspectorSelectButtonBuilder",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>This callback is responsible for choosing the app's locale\nwhen the app is started, and when the user changes the\ndevice's locale.<\/p>\n<p>When a <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> is provided, Flutter will first attempt to\nresolve the locale with the provided <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a>. If the\ncallback or result is null, it will fallback to trying the <a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a>.\nIf both <a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> and <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> are left null\nor fail to resolve (return null), the <code>WidgetsApp.basicLocaleListResolution<\/code>\nfallback algorithm will be used.<\/p>\n<p>The priority of each available fallback is:<\/p>\n<ol>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> is attempted first.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> is attempted second.<\/li>\n<li>Flutter's <code>WidgetsApp.basicLocaleListResolution<\/code> algorithm is attempted last.<\/li>\n<\/ol>\n<p>Properly localized projects should provide a more advanced algorithm than\n<code>basicLocaleListResolution<\/code> as it does not implement a complete algorithm\n(such as the one defined in <a href=\"https:\/\/unicode.org\/reports\/tr35\/#LanguageMatching\">Unicode TR35<\/a>)\nand is optimized for speed at the detriment of some uncommon edge-cases.\nThis callback considers the entire list of preferred locales.<\/p>\n<p>This algorithm should be able to handle a null or empty list of preferred locales,\nwhich indicates Flutter has not yet received locale information from the platform.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">MaterialApp.localeListResolutionCallback<\/a>, which sets the callback of the\n<a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> it creates.<\/li>\n<li>\n<code>basicLocaleListResolution<\/code>, a static method that implements the locale resolution\nalgorithm that is used when no custom locale resolution algorithm is provided.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final LocaleListResolutionCallback localeListResolutionCallback\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/localeListResolutionCallback.html",
            "isDeprecated": "0",
            "type": "widgets.LocaleListResolutionCallback",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>This callback is responsible for choosing the app's locale\nwhen the app is started, and when the user changes the\ndevice's locale.<\/p>\n<p>When a <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> is provided, Flutter will first attempt to\nresolve the locale with the provided <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a>. If the\ncallback or result is null, it will fallback to trying the <a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a>.\nIf both <a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> and <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> are left null\nor fail to resolve (return null), the <code>WidgetsApp.basicLocaleListResolution<\/code>\nfallback algorithm will be used.<\/p>\n<p>The priority of each available fallback is:<\/p>\n<ol>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> is attempted first.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> is attempted second.<\/li>\n<li>Flutter's <code>WidgetsApp.basicLocaleListResolution<\/code> algorithm is attempted last.<\/li>\n<\/ol>\n<p>Properly localized projects should provide a more advanced algorithm than\n<code>basicLocaleListResolution<\/code> as it does not implement a complete algorithm\n(such as the one defined in <a href=\"https:\/\/unicode.org\/reports\/tr35\/#LanguageMatching\">Unicode TR35<\/a>)\nand is optimized for speed at the detriment of some uncommon edge-cases.<\/p>\n<p>This callback considers only the default locale, which is the first locale\nin the preferred locales list. It is preferred to set <a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a>\nover <a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> as it provides the full preferred locales list.<\/p>\n<p>This algorithm should be able to handle a null locale, which indicates\nFlutter has not yet received locale information from the platform.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">MaterialApp.localeResolutionCallback<\/a>, which sets the callback of the\n<a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> it creates.<\/li>\n<li>\n<code>basicLocaleListResolution<\/code>, a static method that implements the locale resolution\nalgorithm that is used when no custom locale resolution algorithm is provided.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final LocaleResolutionCallback localeResolutionCallback\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/localeResolutionCallback.html",
            "isDeprecated": "0",
            "type": "widgets.LocaleResolutionCallback",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The route generator callback used when the app is navigated to a\nnamed route.<\/p>\n<p>If this returns null when building the routes to handle the specified\n<a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a>, then all the routes are discarded and\n<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> is used instead (<code>\/<\/code>). See <a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a>.<\/p>\n<p>During normal app operation, the <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a> callback will only be\napplied to route names pushed by the application, and so should never\nreturn null.<\/p>\n<p>This is used if <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a> does not contain the requested route.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>,\n<a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> must not be null.\nIf this property is not set, either the <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a> or <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> properties must\nbe set, and the <a href=\"widgets\/WidgetsApp\/pageRouteBuilder.html\">pageRouteBuilder<\/a> must also be set so that the\ndefault handler will know what routes and <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>s to build.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteFactory onGenerateRoute\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/onGenerateRoute.html",
            "isDeprecated": "0",
            "type": "widgets.RouteFactory",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>If non-null this callback function is called to produce the app's\ntitle string, otherwise <a href=\"widgets\/WidgetsApp\/title.html\">title<\/a> is used.<\/p>\n<p>The <a href=\"widgets\/WidgetsApp\/onGenerateTitle.html\">onGenerateTitle<\/a> <code>context<\/code> parameter includes the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>'s\n<a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget so that this callback can be used to produce a\nlocalized title.<\/p>\n<p>This callback function must not return null.<\/p>\n<p>The <a href=\"widgets\/WidgetsApp\/onGenerateTitle.html\">onGenerateTitle<\/a> callback is called each time the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>\nrebuilds.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GenerateAppTitle onGenerateTitle\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/onGenerateTitle.html",
            "isDeprecated": "0",
            "type": "widgets.GenerateAppTitle",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Called when <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a> fails to generate a route, except for the\n<a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a>.<\/p>\n<p>This callback is typically used for error handling. For example, this\ncallback might always generate a \"not found\" page that describes the route\nthat wasn't found.<\/p>\n<p>Unknown routes can arise either from errors in the app or from external\nrequests to push routes, such as from Android intents.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>,\n<a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteFactory onUnknownRoute\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/onUnknownRoute.html",
            "isDeprecated": "0",
            "type": "widgets.RouteFactory",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> generator callback used when the app is navigated to a\nnamed route.<\/p>\n<p>This callback can be used, for example, to specify that a <a href=\"material\/MaterialPageRoute-class.html\">MaterialPageRoute<\/a>\nor a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> should be used for building page transitions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final PageRouteFactory pageRouteBuilder\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/pageRouteBuilder.html",
            "isDeprecated": "0",
            "type": "widgets.PageRouteFactory",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a widget that wraps a number of widgets that are commonly\nrequired for an application.<\/p>\n<p>The boolean arguments, <code>color<\/code>, and <code>navigatorObservers<\/code> must not be null.<\/p>\n<p>Most callers will want to use the <code>home<\/code> or <code>routes<\/code> parameters, or both.\nThe <code>home<\/code> parameter is a convenience for the following <code>routes<\/code> map:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">&lt;String, WidgetBuilder&gt;{ '\/': (BuildContext context) =&gt; myWidget }\n<\/code><\/pre>\n<p>It is possible to specify both <code>home<\/code> and <code>routes<\/code>, but only if <code>routes<\/code> does\n <em>not<\/em> contain an entry for <code>'\/'<\/code>.  Conversely, if <code>home<\/code> is omitted, <code>routes<\/code>\n<em>must<\/em> contain an entry for <code>'\/'<\/code>.<\/p>\n<p>If <code>home<\/code> or <code>routes<\/code> are not null, the routing implementation needs to know how\nappropriately build <code>PageRoutes<\/code>. This can be achieved by supplying the\n<code>pageRouteBuilder<\/code> parameter.  The <code>pageRouteBuilder<\/code> is used by <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a>\nand <a href=\"cupertino\/CupertinoApp-class.html\">CupertinoApp<\/a> to create <a href=\"material\/MaterialPageRoute-class.html\">MaterialPageRoute<\/a>s and <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>,\nrespectively.<\/p>\n<p>The <code>builder<\/code> parameter is designed to provide the ability to wrap the visible\ncontent of the app in some other widget. It is recommended that you use <code>home<\/code>\nrather than <code>builder<\/code> if you intend to only display a single route in your app.<\/p>\n<p><a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> is also possible to provide a custom implementation of routing via the\n<code>onGeneratedRoute<\/code> and <code>onUnknownRoute<\/code> parameters. These parameters correspond\nto <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">Navigator.onGenerateRoute<\/a> and <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">Navigator.onUnknownRoute<\/a>. If <code>home<\/code>, <code>routes<\/code>,\nand <code>builder<\/code> are null, or if they fail to create a requested route,\n<code>onGeneratedRoute<\/code> will be invoked.  If that fails, <code>onUnknownRoute<\/code> will be invoked.<\/p>\n<p>The <code>pageRouteBuilder<\/code> will create a <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> that wraps newly built routes.\nIf the <code>builder<\/code> is non-null and the <code>onGenerateRoute<\/code> argument is null, then the\n<code>builder<\/code> will not be provided only with the context and the child widget, whereas\nthe <code>pageRouteBuilder<\/code> will be provided with <a href=\"widgets\/RouteSettings-class.html\">RouteSettings<\/a>. If <code>onGenerateRoute<\/code>\nis not provided, <code>navigatorKey<\/code>, <code>onUnknownRoute<\/code>, <code>navigatorObservers<\/code>, and\n<code>initialRoute<\/code> must have their default values, as they will have no effect.<\/p>\n<p>The <code>supportedLocales<\/code> argument must be a list of one or more elements.\nBy default supportedLocales is <code>[const Locale('en', 'US')]<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">WidgetsApp({ \/\/ can't be const because the asserts use methods on Iterable :-(\n  Key key,\n  this.navigatorKey,\n  this.onGenerateRoute,\n  this.onUnknownRoute,\n  this.navigatorObservers = const &lt;NavigatorObserver&gt;[],\n  this.initialRoute,\n  this.pageRouteBuilder,\n  this.home,\n  this.routes = const &lt;String, WidgetBuilder&gt;{},\n  this.builder,\n  this.title = '',\n  this.onGenerateTitle,\n  this.textStyle,\n  @required this.color,\n  this.locale,\n  this.localizationsDelegates,\n  this.localeListResolutionCallback,\n  this.localeResolutionCallback,\n  this.supportedLocales = const &lt;Locale&gt;[Locale('en', 'US')],\n  this.showPerformanceOverlay = false,\n  this.checkerboardRasterCacheImages = false,\n  this.checkerboardOffscreenLayers = false,\n  this.showSemanticsDebugger = false,\n  this.debugShowWidgetInspector = false,\n  this.debugShowCheckedModeBanner = true,\n  this.inspectorSelectButtonBuilder,\n}) : assert(navigatorObservers != null),\n     assert(routes != null),\n     assert(\n       home == null ||\n       !routes.containsKey(Navigator.defaultRouteName),\n       'If the home property is specified, the routes table '\n       'cannot include an entry for \"\/\", since it would be redundant.'\n     ),\n     assert(\n       builder != null ||\n       home != null ||\n       routes.containsKey(Navigator.defaultRouteName) ||\n       onGenerateRoute != null ||\n       onUnknownRoute != null,\n       'Either the home property must be specified, '\n       'or the routes table must include an entry for \"\/\", '\n       'or there must be on onGenerateRoute callback specified, '\n       'or there must be an onUnknownRoute callback specified, '\n       'or the builder property must be specified, '\n       'because otherwise there is nothing to fall back on if the '\n       'app is started with an intent that specifies an unknown route.'\n     ),\n     assert(\n       (home != null ||\n        routes.isNotEmpty ||\n        onGenerateRoute != null ||\n        onUnknownRoute != null)\n       ||\n       (builder != null &amp;&amp;\n        navigatorKey == null &amp;&amp;\n        initialRoute == null &amp;&amp;\n        navigatorObservers.isEmpty),\n       'If no route is provided using '\n       'home, routes, onGenerateRoute, or onUnknownRoute, '\n       'a non-null callback for the builder property must be provided, '\n       'and the other navigator-related properties, '\n       'navigatorKey, initialRoute, and navigatorObservers, '\n       'must have their initial values '\n       '(null, null, and the empty list, respectively).'\n     ),\n     assert(\n       builder != null ||\n       onGenerateRoute != null ||\n       pageRouteBuilder != null,\n       'If neither builder nor onGenerateRoute are provided, the '\n       'pageRouteBuilder must be specified so that the default handler '\n       'will know what kind of PageRoute transition to build.'\n     ),\n     assert(title != null),\n     assert(color != null),\n     assert(supportedLocales != null &amp;&amp; supportedLocales.isNotEmpty),\n     assert(showPerformanceOverlay != null),\n     assert(checkerboardRasterCacheImages != null),\n     assert(checkerboardOffscreenLayers != null),\n     assert(showSemanticsDebugger != null),\n     assert(debugShowCheckedModeBanner != null),\n     assert(debugShowWidgetInspector != null),\n     super(key: key);<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsApp\/WidgetsApp.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.WidgetsApp",
            "params": [
                {
                    "name": "builder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.TransitionBuilder"
                },
                {
                    "name": "checkerboardOffscreenLayers",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "checkerboardRasterCacheImages",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "color",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Color"
                },
                {
                    "name": "debugShowCheckedModeBanner",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "debugShowWidgetInspector",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "home",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.Widget"
                },
                {
                    "name": "initialRoute",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "inspectorSelectButtonBuilder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.InspectorSelectButtonBuilder"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.Key"
                },
                {
                    "name": "locale",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.Locale"
                },
                {
                    "name": "localeListResolutionCallback",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.LocaleListResolutionCallback"
                },
                {
                    "name": "localeResolutionCallback",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.LocaleResolutionCallback"
                },
                {
                    "name": "localizationsDelegates",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Iterable<widgets.LocalizationsDelegate>"
                },
                {
                    "name": "navigatorKey",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.GlobalKey<widgets.NavigatorState>"
                },
                {
                    "name": "navigatorObservers",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.List<widgets.NavigatorObserver>"
                },
                {
                    "name": "onGenerateRoute",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.RouteFactory"
                },
                {
                    "name": "onGenerateTitle",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.GenerateAppTitle"
                },
                {
                    "name": "onUnknownRoute",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.RouteFactory"
                },
                {
                    "name": "pageRouteBuilder",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "widgets.PageRouteFactory"
                },
                {
                    "name": "routes",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Map<dart:core.String<widgets.WidgetBuilder>>"
                },
                {
                    "name": "showPerformanceOverlay",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "showSemanticsDebugger",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "supportedLocales",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Iterable<dart:ui.Locale>"
                },
                {
                    "name": "textStyle",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "painting.TextStyle"
                },
                {
                    "name": "title",
                    "desc": null,
                    "example": null,
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"widgets\/WidgetsApp\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_WidgetsAppState createState() =&gt; _WidgetsAppState();<\/code><\/pre>\n    ",
            "href": "widgets\/WidgetsApp\/createState.html",
            "isDeprecated": "0",
            "type": "<_WidgetsAppState>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.WidgetsApp",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Checkerboards layers rendered to offscreen bitmaps.<\/p>\n<p>See <a href=\"widgets\/WidgetsApp\/checkerboardOffscreenLayers.html\">PerformanceOverlay.checkerboardOffscreenLayers<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardOffscreenLayers\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/checkerboardOffscreenLayers.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Checkerboards raster cache images.<\/p>\n<p>See <a href=\"widgets\/WidgetsApp\/checkerboardRasterCacheImages.html\">PerformanceOverlay.checkerboardRasterCacheImages<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardRasterCacheImages\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/checkerboardRasterCacheImages.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The primary color to use for the application in the operating system\ninterface.<\/p>\n<p>For example, on Android this is the color used for the application in the\napplication switcher.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/color.html",
            "isDeprecated": "0",
            "type": "dart:ui.Color",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>If false, prevents the debug banner from being visible.<\/p>\n<p>Used by the <code>debugAllowBanner<\/code> observatory extension.<\/p>\n<p>This is how <code>flutter run<\/code> turns off the banner when you take a screen shot\nwith \"s\".<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static bool debugAllowBannerOverride = true\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/debugAllowBannerOverride.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Turns on a little \"DEBUG\" banner in checked mode to indicate\nthat the app is in checked mode. This is on by default (in\nchecked mode), to turn it off, set the constructor argument to\nfalse. In release mode this has no effect.<\/p>\n<p>To get this banner in your application if you're not using\nWidgetsApp, include a <a href=\"widgets\/CheckedModeBanner-class.html\">CheckedModeBanner<\/a> widget in your app.<\/p>\n<p>This banner is intended to deter people from complaining that your\napp is slow when it's in checked mode. In checked mode, Flutter\nenables a large number of expensive diagnostics to aid in\ndevelopment, and so performance in checked mode is not\nrepresentative of what will happen in release mode.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool debugShowCheckedModeBanner\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/debugShowCheckedModeBanner.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Turns on an overlay that enables inspecting the widget tree.<\/p>\n<p>The inspector is only available in checked mode as it depends on\n<a href=\"foundation\/DiagnosticableTree\/debugDescribeChildren.html\">RenderObject.debugDescribeChildren<\/a> which should not be called outside of\nchecked mode.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool debugShowWidgetInspector\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/debugShowWidgetInspector.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>If true, forces the widget inspector to be visible.<\/p>\n<p>Used by the <code>debugShowWidgetInspector<\/code> debugging extension.<\/p>\n<p>The inspector allows you to select a location on your device or emulator\nand view what widgets and render objects associated with it. An outline of\nthe selected widget and some summary information is shown on device and\nmore detailed information is shown in the IDE or Observatory.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static bool debugShowWidgetInspectorOverride = false\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/debugShowWidgetInspectorOverride.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The widget for the default route of the app (<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a>,\nwhich is <code>\/<\/code>).<\/p>\n<p>This is the route that is displayed first when the application is started\nnormally, unless <a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a> is specified. It's also the route that's\ndisplayed if the <a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a> can't be displayed.<\/p>\n<p>To be able to directly call <a href=\"material\/Theme\/of.html\">Theme.of<\/a>, <a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, etc, in the code\nthat sets the <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> argument in the constructor, you can use a <a href=\"widgets\/Builder-class.html\">Builder<\/a>\nwidget to get a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>If <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> is specified, then <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a> must not include an entry for <code>\/<\/code>,\nas <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> takes its place.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>,\n<a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> must not be null.<\/p>\n<p>The difference between using <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> and using <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> is that the <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>\nsubtree is inserted into the application below a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> (and thus\nbelow an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a>, which <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> uses). With <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>, therefore,\ndialog boxes will work automatically, the <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a> table will be used, and\nAPIs such as <a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a> and <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a> will work as expected.\nIn contrast, the widget returned from <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> is inserted <em>above<\/em> the\napp's <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> (if any).\nIf this property is set, the <a href=\"widgets\/WidgetsApp\/pageRouteBuilder.html\">pageRouteBuilder<\/a> property must also be set\nso that the default route handler will know what kind of <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>s to\nbuild.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget home\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/home.html",
            "isDeprecated": "0",
            "type": "widgets.Widget",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The name of the first route to show, if a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is built.<\/p>\n<p>Defaults to <a href=\"dart-ui\/Window\/defaultRouteName.html\">Window.defaultRouteName<\/a>, which may be overridden by the code\nthat launched the application.<\/p>\n<p>If the route contains slashes, then it is treated as a \"deep link\", and\nbefore this route is pushed, the routes leading to this one are pushed\nalso. For example, if the route was <code>\/a\/b\/c<\/code>, then the app would start\nwith the three routes <code>\/a<\/code>, <code>\/a\/b<\/code>, and <code>\/a\/b\/c<\/code> loaded, in that order.<\/p>\n<p>If any part of this process fails to generate routes, then the\n<a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a> is ignored and <a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> is used instead\n(<code>\/<\/code>). This can happen if the app is started with an intent that specifies\na non-existent route.\nThe <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>,\n<a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"widgets\/WidgetsApp\/initialRoute.html\">initialRoute<\/a> must be null and <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> must not be null.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsApp\/initialRoute.html\">Navigator.initialRoute<\/a>, which is used to implement this property.<\/li>\n<li>\n<a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a>, for pushing additional routes.<\/li>\n<li>\n<a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>, for removing a route from the stack.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String initialRoute\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/initialRoute.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The initial locale for this app's <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget is based\non this value.<\/p>\n<p>If the 'locale' is null then the system's locale value is used.<\/p>\n<p>The value of <a href=\"widgets\/WidgetsApp\/locale.html\">Localizations.locale<\/a> will equal this locale if\nit matches one of the <a href=\"widgets\/WidgetsApp\/supportedLocales.html\">supportedLocales<\/a>. Otherwise it will be\nthe first <code>supportedLocale<\/code>.\nSee also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a>, which can override the default\n<a href=\"widgets\/WidgetsApp\/supportedLocales.html\">supportedLocales<\/a> matching algorithm.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp\/localizationsDelegates.html\">localizationsDelegates<\/a>, which collectively define all of the localized\nresources used by this app.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/locale.html",
            "isDeprecated": "0",
            "type": "dart:ui.Locale",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The delegates for this app's <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget.<\/p>\n<p>The delegates collectively define all of the localized resources\nfor this application's <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Iterable&lt;LocalizationsDelegate&lt;dynamic&gt;&gt; localizationsDelegates\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/localizationsDelegates.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<widgets.LocalizationsDelegate>",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>A key to use when building the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>If a <a href=\"widgets\/WidgetsApp\/navigatorKey.html\">navigatorKey<\/a> is specified, the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> can be directly\nmanipulated without first obtaining it from a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> via\n<a href=\"widgets\/Navigator\/of.html\">Navigator.of<\/a>: from the <a href=\"widgets\/WidgetsApp\/navigatorKey.html\">navigatorKey<\/a>, use the <a href=\"widgets\/GlobalKey\/currentState.html\">GlobalKey.currentState<\/a>\ngetter.<\/p>\n<p>If this is changed, a new <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> will be created, losing all the\napplication state in the process; in that case, the <a href=\"widgets\/WidgetsApp\/navigatorObservers.html\">navigatorObservers<\/a>\nmust also be changed, since the previous observers will be attached to the\nprevious navigator.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a> is not null; if it is\nnull, <a href=\"widgets\/WidgetsApp\/navigatorKey.html\">navigatorKey<\/a> must also be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GlobalKey&lt;NavigatorState&gt; navigatorKey\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/navigatorKey.html",
            "isDeprecated": "0",
            "type": "widgets.GlobalKey<widgets.NavigatorState>",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The list of observers for the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> created for this app.<\/p>\n<p>This list must be replaced by a list of newly-created observers if the\n<a href=\"widgets\/WidgetsApp\/navigatorKey.html\">navigatorKey<\/a> is changed.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>,\n<a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"widgets\/WidgetsApp\/navigatorObservers.html\">navigatorObservers<\/a> must be the empty list and <a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> must not be null.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;NavigatorObserver&gt; navigatorObservers\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/navigatorObservers.html",
            "isDeprecated": "0",
            "type": "dart:core.List<widgets.NavigatorObserver>",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The application's top-level routing table.<\/p>\n<p>When a named route is pushed with <a href=\"widgets\/Navigator\/pushNamed.html\">Navigator.pushNamed<\/a>, the route name is\nlooked up in this map. If the name is present, the associated\n<a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a> is used to construct a <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> specified by\n<a href=\"widgets\/WidgetsApp\/pageRouteBuilder.html\">pageRouteBuilder<\/a> to perform an appropriate transition, including <a href=\"widgets\/Hero-class.html\">Hero<\/a>\nanimations, to the new route.<\/p>\n<p>If the app only has one page, then you can specify it using <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> instead.<\/p>\n<p>If <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a> is specified, then it implies an entry in this table for the\n<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> route (<code>\/<\/code>), and it is an error to\nredundantly provide such a route in the <a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a> table.<\/p>\n<p>If a route is requested that is not specified in this table (or by\n<a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>), then the <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a> callback is called to build the page\ninstead.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"widgets\/WidgetsApp\/home.html\">home<\/a>,\n<a href=\"widgets\/WidgetsApp\/routes.html\">routes<\/a>, <a href=\"widgets\/WidgetsApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"widgets\/WidgetsApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"widgets\/WidgetsApp\/builder.html\">builder<\/a> must not be null.\nIf the routes map is not empty, the <a href=\"widgets\/WidgetsApp\/pageRouteBuilder.html\">pageRouteBuilder<\/a> property must be set\nso that the default route handler will know what kind of <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>s to\nbuild.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;String, WidgetBuilder&gt; routes\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/routes.html",
            "isDeprecated": "0",
            "type": "dart:core.Map<dart:core.String<widgets.WidgetBuilder>>",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Turns on a performance overlay.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/flutter.io\/debugging\/#performanceoverlay\">flutter.io\/debugging\/#performanceoverlay<\/a><\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showPerformanceOverlay\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/showPerformanceOverlay.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>If true, forces the performance overlay to be visible in all instances.<\/p>\n<p>Used by the <code>showPerformanceOverlay<\/code> observatory extension.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static bool showPerformanceOverlayOverride = false\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/showPerformanceOverlayOverride.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>Turns on an overlay that shows the accessibility information\nreported by the framework.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showSemanticsDebugger\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/showSemanticsDebugger.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The list of locales that this app has been localized for.<\/p>\n<p>By default only the American English locale is supported. Apps should\nconfigure this list to match the locales they support.<\/p>\n<p>This list must not null. Its default value is just\n<code>[const Locale('en', 'US')]<\/code>.<\/p>\n<p>The order of the list matters. The default locale resolution algorithm,\n<code>basicLocaleListResolution<\/code>, attempts to match by the following priority:<\/p>\n<ol>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a>, <a href=\"dart-ui\/Locale\/scriptCode.html\">Locale.scriptCode<\/a>, and <a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a>\n<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a> and <a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> only<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a> and <a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> only<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a> only<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> only when all <code>preferredLocales<\/code> fail to match<\/li>\n<li>returns <code>supportedLocales.first<\/code> as a fallback<\/li>\n<\/ol>\n<p>When more than one supported locale matches one of these criteria, only the first\nmatching locale is returned. See <code>basicLocaleListResolution<\/code> for a complete\ndescription of the algorithm.<\/p>\n<p>The default locale resolution algorithm can be overridden by providing a value for\n<a href=\"widgets\/WidgetsApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a>. The provided <code>basicLocaleListResolution<\/code> is optimized\nfor speed and does not implement a full algorithm (such as the one defined in\n<a href=\"https:\/\/unicode.org\/reports\/tr35\/#LanguageMatching\">Unicode TR35<\/a>) that takes\ndistances between languages into account.<\/p>\n<p>When supporting languages with more than one script, it is recommended\nto specify the <a href=\"dart-ui\/Locale\/scriptCode.html\">Locale.scriptCode<\/a> explicitly. Locales may also be defined without\n<a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> to specify a generic fallback for a particular script.<\/p>\n<p>A fully supported language with multiple scripts should define a generic language-only\nlocale (e.g. 'zh'), language+script only locales (e.g. 'zh_Hans' and 'zh_Hant'),\nand any language+script+country locales (e.g. 'zh_Hans_CN'). Fully defining all of\nthese locales as supported is not strictly required but allows for proper locale resolution in\nthe most number of cases. These locales can be specified with the <a href=\"dart-ui\/Locale\/Locale.fromSubtags.html\">Locale.fromSubtags<\/a>\nconstructor:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Full Chinese support for CN, TW, and HK\nsupportedLocales: [\n  const Locale.fromSubtags(languageCode: 'zh'), \/\/ generic Chinese 'zh'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hans'), \/\/ generic simplified Chinese 'zh_Hans'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant'), \/\/ generic traditional Chinese 'zh_Hant'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hans', countryCode: 'CN'), \/\/ 'zh_Hans_CN'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant', countryCode: 'TW'), \/\/ 'zh_Hant_TW'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant', countryCode: 'HK'), \/\/ 'zh_Hant_HK'\n],\n<\/code><\/pre>\n<p>Omitting some these fallbacks may result in improperly resolved\nedge-cases, for example, a simplified Chinese user in Taiwan ('zh_Hans_TW')\nmay resolve to traditional Chinese if 'zh_Hans' and 'zh_Hans_CN' are\nomitted.\nSee also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/WidgetsApp\/supportedLocales.html\">MaterialApp.supportedLocales<\/a>, which sets the <code>supportedLocales<\/code>\nof the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> it creates.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a>, an app callback that resolves the app's locale\nwhen the device's locale changes.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp\/localizationsDelegates.html\">localizationsDelegates<\/a>, which collectively define all of the localized\nresources used by this app.<\/li>\n<li>\n<code>basicLocaleListResolution<\/code>, a static method that implements the locale resolution\nalgorithm that is used when no custom locale resolution algorithm is provided.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Iterable&lt;Locale&gt; supportedLocales\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/supportedLocales.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<dart:ui.Locale>",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>The default text style for <a href=\"widgets\/Text-class.html\">Text<\/a> in the application.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle textStyle\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/textStyle.html",
            "isDeprecated": "0",
            "type": "painting.TextStyle",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        },
        {
            "desc": "<p>A one-line description used by the device to identify the app for the user.<\/p>\n<p>On Android the titles appear above the task manager's app snapshots which are\ndisplayed when the user presses the \"recent apps\" button. On iOS this\nvalue cannot be used. <code>CFBundleDisplayName<\/code> from the app's <code>Info.plist<\/code> is\nreferred to instead whenever present, <code>CFBundleName<\/code> otherwise.<\/p>\n<p>To provide a localized title instead, use <a href=\"widgets\/WidgetsApp\/onGenerateTitle.html\">onGenerateTitle<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String title\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/WidgetsApp\/title.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "widgets.WidgetsApp",
            "params": []
        }
    ]
}