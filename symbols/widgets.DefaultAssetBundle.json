{
    "name": "widgets.DefaultAssetBundle",
    "extends": [
        "widgets.InheritedWidget",
        "widgets.ProxyWidget",
        "widgets.Widget",
        "foundation.DiagnosticableTree",
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "DefaultAssetBundle",
            "type": "",
            "desc": "<p>Creates a widget that determines the default asset bundle for its descendants.<\/p>\n<p>The <code>bundle<\/code> and <code>child<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.DefaultAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "key",
                    "type": "foundation.Key",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bundle",
                    "type": "services.AssetBundle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/DefaultAssetBundle\/DefaultAssetBundle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DefaultAssetBundle({\n  Key key,\n  @required this.bundle,\n  @required Widget child,\n}) : assert(bundle != null),\n     assert(child != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "of",
            "type": "services.AssetBundle",
            "desc": "<p>The bundle from the closest instance of this class that encloses\nthe given context.<\/p>\n<p>If there is no <a href=\"widgets\/DefaultAssetBundle-class.html\">DefaultAssetBundle<\/a> ancestor widget in the tree\nat the given context, then this will return the <a href=\"services\/rootBundle.html\">rootBundle<\/a>.<\/p>\n<p>Typical usage is as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetBundle bundle = DefaultAssetBundle.of(context);\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "widgets.DefaultAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/DefaultAssetBundle\/of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AssetBundle of(BuildContext context) {\n  final DefaultAssetBundle result = context.inheritFromWidgetOfExactType(DefaultAssetBundle);\n  return result?.bundle ?? rootBundle;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "updateShouldNotify",
            "type": "dart:core.bool",
            "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.DefaultAssetBundle",
            "sig": "",
            "params": [
                {
                    "name": "oldWidget",
                    "type": "widgets.DefaultAssetBundle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/DefaultAssetBundle\/updateShouldNotify.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(DefaultAssetBundle oldWidget) =&gt; bundle != oldWidget.bundle;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "bundle",
            "type": "services.AssetBundle",
            "types": [],
            "desc": "<p>The bundle to use as a default.<\/p>\n        ",
            "memberOf": "widgets.DefaultAssetBundle",
            "isConstant": false,
            "href": "widgets\/DefaultAssetBundle\/bundle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AssetBundle bundle\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/DefaultAssetBundle-class.html",
    "desc": "<p>A widget that determines the default asset bundle for its descendants.<\/p>\n<p>For example, used by <a href=\"widgets\/Image-class.html\">Image<\/a> to determine which bundle to use for\n<a href=\"painting\/AssetImage-class.html\">AssetImage<\/a>s if no bundle is specified explicitly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis can be used in tests to override what the current asset bundle is, thus\nallowing specific resources to be injected into the widget under test.\n<p>For example, a test could create a test asset bundle like this:\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class TestAssetBundle extends CachingAssetBundle {\n  @override\n  Future&lt;ByteData&gt; load(String key) async {\n    if (key == 'resources\/test')\n      return ByteData.view(Uint8List.fromList(utf8.encode('Hello World!')).buffer);\n    return null;\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\n...then wrap the widget under test with a <a href=\"widgets\/DefaultAssetBundle-class.html\">DefaultAssetBundle<\/a> using this\nbundle implementation:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">await tester.pumpWidget(\n  MaterialApp(\n    home: DefaultAssetBundle(\n      bundle: TestAssetBundle(),\n      child: TestWidget(),\n    ),\n  ),\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Assuming that <code>TestWidget<\/code> uses <a href=\"widgets\/DefaultAssetBundle\/of.html\">DefaultAssetBundle.of<\/a> to obtain its\n<a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>, it will now see the <code>TestAssetBundle<\/code>'s \"Hello World!\" data\nwhen requesting the \"resources\/test\" asset.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>, the interface for asset bundles.<\/li>\n<li>\n<a href=\"services\/rootBundle.html\">rootBundle<\/a>, the default default asset bundle.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DefaultAssetBundle"
}