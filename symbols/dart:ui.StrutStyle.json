{
    "name": "dart:ui.StrutStyle",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/StrutStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/StrutStyle\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final StrutStyle typedOther = other;\n  if (_fontFamily != typedOther._fontFamily)\n   return false;\n  final Int8List encodedList = _encoded.buffer.asInt8List();\n  final Int8List otherEncodedList = typedOther._encoded.buffer.asInt8List();\n  for (int index = 0; index &lt; _encoded.lengthInBytes; index += 1) {\n    if (encodedList[index] != otherEncodedList[index])\n      return false;\n  }\n  if (!_listEquals&lt;String&gt;(_fontFamilyFallback, typedOther._fontFamilyFallback))\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "StrutStyle",
            "type": "",
            "desc": "<p>Creates a new StrutStyle object.<\/p>\n<ul>\n<li>\n<p><code>fontFamily<\/code>: The name of the font to use when painting the text (e.g.,\nRoboto).<\/p>\n<\/li>\n<li>\n<p><code>fontFamilyFallback<\/code>: An ordered list of font family names that will be searched for when\n the font in <code>fontFamily<\/code> cannot be found.<\/p>\n<\/li>\n<li>\n<p><code>fontSize<\/code>: The size of glyphs (in logical pixels) to use when painting\nthe text.<\/p>\n<\/li>\n<li>\n<p><code>height<\/code>: The minimum height of the line boxes, as a multiplier of the\nfont size. The lines of the paragraph will be at least `(height + leading)<\/p>\n<ul><li>fontSize` tall when fontSize is not null. When fontSize is null, there\nis no minimum line height. Tall glyphs due to baseline alignment or large\n<a href=\"painting\/TextStyle\/fontSize.html\">TextStyle.fontSize<\/a> may cause the actual line height after layout to be\ntaller than specified here. <code>fontSize<\/code> must be provided for this property\nto take effect.<\/li><\/ul>\n<\/li>\n<li>\n<p><code>leading<\/code>: The minimum amount of leading between lines as a multiple of\nthe font size. <code>fontSize<\/code> must be provided for this property to take effect.<\/p>\n<\/li>\n<li>\n<p><code>fontWeight<\/code>: The typeface thickness to use when painting the text\n(e.g., bold).<\/p>\n<\/li>\n<li>\n<p><code>fontStyle<\/code>: The typeface variant to use when drawing the letters (e.g.,\nitalics).<\/p>\n<\/li>\n<li>\n<p><code>forceStrutHeight<\/code>: When true, the paragraph will force all lines to be exactly\n<code>(height + leading) * fontSize<\/code> tall from baseline to baseline.\n<a href=\"dart-ui\/TextStyle-class.html\">TextStyle<\/a> is no longer able to influence the line height, and any tall\nglyphs may overlap with lines above. If a <code>fontFamily<\/code> is specified, the\ntotal ascent of the first line will be the min of the <code>Ascent + half-leading<\/code>\nof the <code>fontFamily<\/code> and <code>(height + leading) * fontSize<\/code>. Otherwise, it\nwill be determined by the Ascent + half-leading of the first text.<\/p>\n<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "dart:ui.StrutStyle",
            "sig": "",
            "params": [
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "leading",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "forceStrutHeight",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/StrutStyle\/StrutStyle.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle({\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  double height,\n  double leading,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  bool forceStrutHeight,\n}) : _encoded = _encodeStrut(\n       fontFamily,\n       fontFamilyFallback,\n       fontSize,\n       height,\n       leading,\n       fontWeight,\n       fontStyle,\n       forceStrutHeight,\n     ),\n     _fontFamily = fontFamily,\n     _fontFamilyFallback = fontFamilyFallback;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/StrutStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/StrutStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.StrutStyle",
            "isConstant": false,
            "href": "dart-ui\/StrutStyle\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(hashList(_encoded.buffer.asInt8List()), _fontFamily);<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-ui\/StrutStyle-class.html",
    "desc": "<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/painting\/StrutStyle-class.html\">StrutStyle<\/a>, the class in the <a href=\"painting\/painting-library.html\">painting<\/a> library.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "StrutStyle"
}