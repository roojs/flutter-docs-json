{
    "name": "cupertino.CupertinoThemeData",
    "extends": [
        "foundation.Diagnosticable",
        "dart:core.Object"
    ],
    "memberOf": "cupertino",
    "events": [],
    "methods": [
        {
            "name": "CupertinoThemeData",
            "type": "",
            "desc": "<p>Create a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> styling specification.<\/p>\n<p>Unspecified parameters default to a reasonable iOS default style.<\/p>\n    ",
            "static": false,
            "memberOf": "cupertino.CupertinoThemeData",
            "sig": "",
            "params": [
                {
                    "name": "brightness",
                    "type": "dart:ui.Brightness",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primaryColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primaryContrastingColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textTheme",
                    "type": "cupertino.CupertinoTextThemeData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "barBackgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scaffoldBackgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "cupertino\/CupertinoThemeData\/CupertinoThemeData.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoThemeData({\n  Brightness brightness,\n  Color primaryColor,\n  Color primaryContrastingColor,\n  CupertinoTextThemeData textTheme,\n  Color barBackgroundColor,\n  Color scaffoldBackgroundColor,\n}) : this.raw(\n      brightness,\n      primaryColor,\n      primaryContrastingColor,\n      textTheme,\n      barBackgroundColor,\n      scaffoldBackgroundColor,\n    );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyWith",
            "type": "cupertino.CupertinoThemeData",
            "desc": "<p>Create a copy of <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> with specified attributes overridden.<\/p>\n<p>Only the current instance's specified attributes are copied instead of\nderived values. For instance, if the current <code>primaryColor<\/code> is implied\nto be <a href=\"cupertino\/CupertinoColors\/activeOrange-constant.html\">CupertinoColors.activeOrange<\/a> due to the current <code>brightness<\/code>,\ncopying with a different <code>brightness<\/code> will also change the copy's\nimplied <code>primaryColor<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "cupertino.CupertinoThemeData",
            "sig": "",
            "params": [
                {
                    "name": "brightness",
                    "type": "dart:ui.Brightness",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primaryColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "primaryContrastingColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textTheme",
                    "type": "cupertino.CupertinoTextThemeData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "barBackgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scaffoldBackgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "cupertino\/CupertinoThemeData\/copyWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoThemeData copyWith({\n  Brightness brightness,\n  Color primaryColor,\n  Color primaryContrastingColor,\n  CupertinoTextThemeData textTheme,\n  Color barBackgroundColor,\n  Color scaffoldBackgroundColor,\n}) {\n  return CupertinoThemeData(\n    brightness: brightness ?? _brightness,\n    primaryColor: primaryColor ?? _primaryColor,\n    primaryContrastingColor: primaryContrastingColor ?? _primaryContrastingColor,\n    textTheme: textTheme ?? _textTheme,\n    barBackgroundColor: barBackgroundColor ?? _barBackgroundColor,\n    scaffoldBackgroundColor: scaffoldBackgroundColor ?? _scaffoldBackgroundColor,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugFillProperties",
            "type": "",
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoThemeData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "cupertino.CupertinoThemeData",
            "sig": "",
            "params": [
                {
                    "name": "properties",
                    "type": "foundation.DiagnosticPropertiesBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "cupertino\/CupertinoThemeData\/debugFillProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  const CupertinoThemeData defaultData = CupertinoThemeData();\n  properties.add(EnumProperty&lt;Brightness&gt;('brightness', brightness, defaultValue: defaultData.brightness));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primaryColor', primaryColor, defaultValue: defaultData.primaryColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primaryContrastingColor', primaryContrastingColor, defaultValue: defaultData.primaryContrastingColor));\n  properties.add(DiagnosticsProperty&lt;CupertinoTextThemeData&gt;('textTheme', textTheme, defaultValue: defaultData.textTheme));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('barBackgroundColor', barBackgroundColor, defaultValue: defaultData.barBackgroundColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('scaffoldBackgroundColor', scaffoldBackgroundColor, defaultValue: defaultData.scaffoldBackgroundColor));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "noDefault",
            "type": "cupertino.CupertinoThemeData",
            "desc": "<p>Return an instance of the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> whose property getters\nonly return the construction time specifications with no derived values.<\/p>\n<p>Used in Material themes to let unspecified properties fallback to Material\ntheme properties instead of iOS defaults.<\/p>\n    ",
            "static": false,
            "memberOf": "cupertino.CupertinoThemeData",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "cupertino\/CupertinoThemeData\/noDefault.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoThemeData noDefault() {\n  return _NoDefaultCupertinoThemeData(\n    _brightness,\n    _primaryColor,\n    _primaryContrastingColor,\n    _textTheme,\n    _barBackgroundColor,\n    _scaffoldBackgroundColor,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "CupertinoThemeData.raw",
            "type": "",
            "desc": "<p>Same as the default constructor but with positional arguments to avoid\nforgetting any and to specify all arguments.<\/p>\n<p>Used by subclasses to get the superclass's defaulting behaviors.<\/p>\n    ",
            "static": false,
            "memberOf": "cupertino.CupertinoThemeData",
            "sig": "",
            "params": [
                {
                    "name": "_brightness",
                    "type": "dart:ui.Brightness",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "_primaryColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "_primaryContrastingColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "_textTheme",
                    "type": "cupertino.CupertinoTextThemeData",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "_barBackgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "_scaffoldBackgroundColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "cupertino\/CupertinoThemeData\/CupertinoThemeData.raw.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nconst CupertinoThemeData.raw(\n  this._brightness,\n  this._primaryColor,\n  this._primaryContrastingColor,\n  this._textTheme,\n  this._barBackgroundColor,\n  this._scaffoldBackgroundColor,\n);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "barBackgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Background color of the top nav bar and bottom tab bar.<\/p>\n<p>Defaults to a light gray or a dark gray translucent color depending\non the <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a>.<\/p>\n        ",
            "memberOf": "cupertino.CupertinoThemeData",
            "isConstant": false,
            "href": "cupertino\/CupertinoThemeData\/barBackgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get barBackgroundColor {\n  return _barBackgroundColor ??\n      (_isLight ? _kDefaultBarLightBackgroundColor : _kDefaultBarDarkBackgroundColor);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "brightness",
            "type": "dart:ui.Brightness",
            "types": [],
            "desc": "<p>The general brightness theme of the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a>.<\/p>\n<p>Affects all other theme properties when unspecified. Defaults to\n<a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n<p>If coming from a Material <a href=\"material\/Theme-class.html\">Theme<\/a> and unspecified, <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> will be\nderived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>brightness<\/code>.<\/p>\n        ",
            "memberOf": "cupertino.CupertinoThemeData",
            "isConstant": false,
            "href": "cupertino\/CupertinoThemeData\/brightness.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Brightness get brightness =&gt; _brightness ?? Brightness.light;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "primaryColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>A color used on interactive elements of the theme.<\/p>\n<p>This color is generally used on text and icons in buttons and tappable\nelements. Defaults to <a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a> or\n<a href=\"cupertino\/CupertinoColors\/activeOrange-constant.html\">CupertinoColors.activeOrange<\/a> when <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> is light or dark.<\/p>\n<p>If coming from a Material <a href=\"material\/Theme-class.html\">Theme<\/a> and unspecified, <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> will be\nderived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>colorScheme.primary<\/code>. However, in\niOS styling, the <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> is more sparsely used than in Material\nDesign where the <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> can appear on non-interactive surfaces like\nthe <a href=\"material\/AppBar-class.html\">AppBar<\/a> background, <a href=\"material\/TextField-class.html\">TextField<\/a> borders etc.<\/p>\n        ",
            "memberOf": "cupertino.CupertinoThemeData",
            "isConstant": false,
            "href": "cupertino\/CupertinoThemeData\/primaryColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get primaryColor {\n  return _primaryColor ??\n      (_isLight ? CupertinoColors.activeBlue : CupertinoColors.activeOrange);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "primaryContrastingColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>A color used for content that must contrast against a <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> background.<\/p>\n<p>For example, this color is used for a <a href=\"cupertino\/CupertinoButton-class.html\">CupertinoButton<\/a>'s text and icons\nwhen the button's background is <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a>.<\/p>\n<p>If coming from a Material <a href=\"material\/Theme-class.html\">Theme<\/a> and unspecified, <a href=\"cupertino\/CupertinoThemeData\/primaryContrastingColor.html\">primaryContrastingColor<\/a>\nwill be derived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>colorScheme.onPrimary<\/code>.<\/p>\n        ",
            "memberOf": "cupertino.CupertinoThemeData",
            "isConstant": false,
            "href": "cupertino\/CupertinoThemeData\/primaryContrastingColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get primaryContrastingColor {\n  return _primaryContrastingColor ??\n      (_isLight ? CupertinoColors.white : CupertinoColors.black);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "scaffoldBackgroundColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>Background color of the scaffold.<\/p>\n<p>Defaults to white or black depending on the <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a>.<\/p>\n        ",
            "memberOf": "cupertino.CupertinoThemeData",
            "isConstant": false,
            "href": "cupertino\/CupertinoThemeData\/scaffoldBackgroundColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get scaffoldBackgroundColor {\n  return _scaffoldBackgroundColor ??\n      (_isLight ? CupertinoColors.white : CupertinoColors.black);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "textTheme",
            "type": "cupertino.CupertinoTextThemeData",
            "types": [],
            "desc": "<p>Text styles used by Cupertino widgets.<\/p>\n<p>Derived from <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> and <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> if unspecified, including\n<a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> and <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> of a Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a> if coming\nfrom a Material <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
            "memberOf": "cupertino.CupertinoThemeData",
            "isConstant": false,
            "href": "cupertino\/CupertinoThemeData\/textTheme.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoTextThemeData get textTheme {\n  return _textTheme ?? CupertinoTextThemeData(\n    brightness: brightness,\n    primaryColor: primaryColor,\n  );\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "material.MaterialBasedCupertinoThemeData"
    ],
    "realImplementors": [
        "material.MaterialBasedCupertinoThemeData"
    ],
    "cn": [],
    "href": "cupertino\/CupertinoThemeData-class.html",
    "desc": "<p>Styling specifications for a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>.<\/p>\n<p>All constructor parameters can be null, in which case a\n<a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a> based default iOS theme styling is used.<\/p>\n<p>Parameters can also be partially specified, in which case some parameters\nwill cascade down to other dependent parameters to create a cohesive\nvisual effect. For instance, if a <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> is specified, it would\ncascade down to affect some fonts in <a href=\"cupertino\/CupertinoThemeData\/textTheme.html\">textTheme<\/a> if <a href=\"cupertino\/CupertinoThemeData\/textTheme.html\">textTheme<\/a> is not\nspecified.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>, in which this <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> is inserted.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, a Material equivalent that also configures Cupertino\nstyling via a <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> subclass <a href=\"material\/MaterialBasedCupertinoThemeData-class.html\">MaterialBasedCupertinoThemeData<\/a>.<\/li>\n<\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "CupertinoThemeData"
}