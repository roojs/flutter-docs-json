{
    "name": "dart:convert.HtmlEscapeMode",
    "extends": [],
    "memberOf": "dart:convert",
    "events": [],
    "methods": [
        {
            "name": "HtmlEscapeMode",
            "type": "",
            "desc": "<p>Create a custom escaping mode.<\/p>\n<p>All modes escape <code>&amp;<\/code>.\nThe mode can further be set to escape <code>&lt;<\/code> and <code>&gt;<\/code> (<code>escapeLtGt<\/code>),\n<code>\"<\/code> (<code>escapeQuot<\/code>), <code>'<\/code> (<code>escapeApos<\/code>), and\/or <code>\/<\/code> (<code>escapeSlash<\/code>).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.HtmlEscapeMode",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "escapeLtGt",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "escapeQuot",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "escapeApos",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "escapeSlash",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-convert\/HtmlEscapeMode\/HtmlEscapeMode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HtmlEscapeMode(\n    {String name = \"custom\",\n    this.escapeLtGt = false,\n    this.escapeQuot = false,\n    this.escapeApos = false,\n    this.escapeSlash = false})\n    : _name = name;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:convert.HtmlEscapeMode",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-convert\/HtmlEscapeMode\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _name;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "type": "",
            "href": "dart-convert\/HtmlEscapeMode\/attribute-constant.html",
            "desc": "<p>Escaping mode for text going into double-quoted HTML attribute values.<\/p>\n<p>The result should not be used as the content of an unquoted\nor single-quoted attribute value.<\/p>\n<p>Escapes double quotes (<code>\"<\/code>) but not single quotes (<code>'<\/code>),\nand escapes <code>&lt;<\/code> and <code>&gt;<\/code> characters because they are not allowed\nin strict XHTML attributes<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode attribute =\n    HtmlEscapeMode._('attribute', true, true, false, false)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "attribute",
            "memberOf": "dart:convert.HtmlEscapeMode"
        },
        {
            "type": "",
            "href": "dart-convert\/HtmlEscapeMode\/element-constant.html",
            "desc": "<p>Escaping mode for text going into HTML element content.<\/p>\n<p>The escaping only works for elements with normal HTML content,\nand not for, for example, script or style element content,\nwhich require escapes matching their particular content syntax.<\/p>\n<p>Escapes <code>&lt;<\/code> and <code>&gt;<\/code> characters.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode element =\n    HtmlEscapeMode._('element', true, false, false, false)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "element",
            "memberOf": "dart:convert.HtmlEscapeMode"
        },
        {
            "name": "escapeApos",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to escape \"'\" (apostrophe).<\/p>\n        ",
            "memberOf": "dart:convert.HtmlEscapeMode",
            "isConstant": false,
            "href": "dart-convert\/HtmlEscapeMode\/escapeApos.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeApos\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "escapeLtGt",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to escape '&lt;' and '&gt;'.<\/p>\n        ",
            "memberOf": "dart:convert.HtmlEscapeMode",
            "isConstant": false,
            "href": "dart-convert\/HtmlEscapeMode\/escapeLtGt.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeLtGt\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "escapeQuot",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to escape '\"' (quote).<\/p>\n        ",
            "memberOf": "dart:convert.HtmlEscapeMode",
            "isConstant": false,
            "href": "dart-convert\/HtmlEscapeMode\/escapeQuot.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeQuot\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "escapeSlash",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether to escape \"\/\" (forward slash, solidus).<\/p>\n<p>Escaping a slash is recommended to avoid cross-site scripting attacks by\n<a href=\"https:\/\/www.owasp.org\/index.php\/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content\">the Open Web Application Security Project<\/a><\/p>\n        ",
            "memberOf": "dart:convert.HtmlEscapeMode",
            "isConstant": false,
            "href": "dart-convert\/HtmlEscapeMode\/escapeSlash.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool escapeSlash\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-convert\/HtmlEscapeMode\/sqAttribute-constant.html",
            "desc": "<p>Escaping mode for text going into single-quoted HTML attribute values.<\/p>\n<p>The result should not be used as the content of an unquoted\nor double-quoted attribute value.<\/p>\n<p>Escapes single quotes (<code>'<\/code>) but not double quotes (<code>\"<\/code>),\nand escapes <code>&lt;<\/code> and <code>&gt;<\/code> characters because they are not allowed\nin strict XHTML attributes<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode sqAttribute =\n    HtmlEscapeMode._('attribute', true, false, true, false)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "sqAttribute",
            "memberOf": "dart:convert.HtmlEscapeMode"
        },
        {
            "type": "",
            "href": "dart-convert\/HtmlEscapeMode\/unknown-constant.html",
            "desc": "<p>Default escaping mode which escape all characters.<\/p>\n<p>The result of such an escaping is usable both in element content and\nin any attribute value.<\/p>\n<p>The escaping only works for elements with normal HTML content,\nand not for, for example, script or style element content,\nwhich require escapes matching their particular content syntax.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HtmlEscapeMode unknown =\n    HtmlEscapeMode._('unknown', true, true, true, true)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "unknown",
            "memberOf": "dart:convert.HtmlEscapeMode"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-convert\/HtmlEscapeMode-class.html",
    "desc": "<p>HTML escape modes.<\/p>\n<p>Allows specifying a mode for HTML escaping that depend on the context\nwhere the escaped result is going to be used.\nThe relevant contexts are:<\/p>\n<ul>\n<li>as text content of an HTML element.<\/li>\n<li>as value of a (single- or double-) quoted attribute value.<\/li>\n<\/ul>\n<p>All modes require escaping of <code>&amp;<\/code> (ampersand) characters, and may\nenable escaping of more characters.<\/p>\n<p>Custom escape modes can be created using the <a href=\"dart-convert\/HtmlEscapeMode\/HtmlEscapeMode.html\">HtmlEscapeMode.HtmlEscapeMode<\/a>\nconstructor.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "HtmlEscapeMode"
}