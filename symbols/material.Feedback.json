{
    "desc": "<p>Provides platform-specific acoustic and\/or haptic feedback for certain\nactions.<\/p>\n<p>For example, to play the Android-typically click sound when a button is\ntapped, call <a href=\"material\/Feedback\/forTap.html\">forTap<\/a>. For the Android-specific vibration when long pressing\nan element, call <a href=\"material\/Feedback\/forLongPress.html\">forLongPress<\/a>. Alternatively, you can also wrap your\n<a href=\"widgets\/GestureDetector\/onTap.html\">GestureDetector.onTap<\/a> or <a href=\"widgets\/GestureDetector\/onLongPress.html\">GestureDetector.onLongPress<\/a> callback in\n<a href=\"material\/Feedback\/wrapForTap.html\">wrapForTap<\/a> or <a href=\"material\/Feedback\/wrapForLongPress.html\">wrapForLongPress<\/a> to achieve the same (see example code\nbelow).<\/p>\n<p>Calling any of these methods is a no-op on iOS as actions on that platform\ntypically don't provide haptic or acoustic feedback.<\/p>\n<p>All methods in this class are usually called from within a\n<a href=\"widgets\/StatelessWidget\/build.html\">StatelessWidget.build<\/a> method or from a <a href=\"widgets\/State-class.html\">State<\/a>'s methods as you have to\nprovide a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTo trigger platform-specific feedback before executing the actual callback:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class WidgetWithWrappedHandler extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: Feedback.wrapForTap(_onTapHandler, context),\n      onLongPress: Feedback.wrapForLongPress(_onLongPressHandler, context),\n      child: const Text('X'),\n    );\n  }\n\n  void _onTapHandler() {\n    \/\/ Respond to tap.\n  }\n\n  void _onLongPressHandler() {\n    \/\/ Respond to long press.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nAlternatively, you can also call <a href=\"material\/Feedback\/forTap.html\">forTap<\/a> or <a href=\"material\/Feedback\/forLongPress.html\">forLongPress<\/a> directly within\nyour tap or long press handler:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class WidgetWithExplicitCall extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: () {\n        \/\/ Do some work (e.g. check if the tap is valid)\n        Feedback.forTap(context);\n        \/\/ Do more work (e.g. respond to the tap)\n      },\n      onLongPress: () {\n        \/\/ Do some work (e.g. check if the long press is valid)\n        Feedback.forLongPress(context);\n        \/\/ Do more work (e.g. respond to the long press)\n      },\n      child: const Text('X'),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
    "dtype": "class",
    "example": "",
    "href": "material\/Feedback-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "material",
    "name": "material.Feedback",
    "shortname": "Feedback",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Provides platform-specific feedback for a long press.<\/p>\n<p>On Android the platform-typical vibration is triggered. On iOS this is a\nno-op as that platform usually doesn't provide feedback for long presses.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Feedback\/wrapForLongPress.html\">wrapForLongPress<\/a> to trigger platform-specific feedback before\nexecuting a <a href=\"gestures\/GestureLongPressCallback.html\">GestureLongPressCallback<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; forLongPress(BuildContext context) {\n  context.findRenderObject().sendSemanticsEvent(const LongPressSemanticsEvent());\n  switch (_platform(context)) {\n    case TargetPlatform.android:\n    case TargetPlatform.fuchsia:\n      return HapticFeedback.vibrate();\n    default:\n      return Future&lt;void&gt;.value();\n  }\n}<\/code><\/pre>\n    ",
            "href": "material\/Feedback\/forLongPress.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Feedback",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Provides platform-specific feedback for a tap.<\/p>\n<p>On Android the click system sound is played. On iOS this is a no-op.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Feedback\/wrapForTap.html\">wrapForTap<\/a> to trigger platform-specific feedback before executing a\n<a href=\"gestures\/GestureTapCallback.html\">GestureTapCallback<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; forTap(BuildContext context) async {\n  context.findRenderObject().sendSemanticsEvent(const TapSemanticEvent());\n  switch (_platform(context)) {\n    case TargetPlatform.android:\n    case TargetPlatform.fuchsia:\n      return SystemSound.play(SystemSoundType.click);\n    default:\n      return Future&lt;void&gt;.value();\n  }\n}<\/code><\/pre>\n    ",
            "href": "material\/Feedback\/forTap.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Feedback",
            "params": [
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Wraps a <a href=\"gestures\/GestureLongPressCallback.html\">GestureLongPressCallback<\/a> to provide platform specific feedback\nfor a long press before the provided callback is executed.<\/p>\n<p>On Android the platform-typical vibration is triggered. On iOS this\nis a no-op as that platform usually doesn't provide feedback for a long\npress.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Feedback\/forLongPress.html\">forLongPress<\/a> to just trigger the platform-specific feedback without\nwrapping a <a href=\"gestures\/GestureLongPressCallback.html\">GestureLongPressCallback<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static GestureLongPressCallback wrapForLongPress(GestureLongPressCallback callback, BuildContext context) {\n  if (callback == null)\n    return null;\n  return () {\n    Feedback.forLongPress(context);\n    callback();\n  };\n}<\/code><\/pre>\n    ",
            "href": "material\/Feedback\/wrapForLongPress.html",
            "isDeprecated": "0",
            "type": "gestures.GestureLongPressCallback",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Feedback",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.GestureLongPressCallback"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        },
        {
            "desc": "<p>Wraps a <a href=\"gestures\/GestureTapCallback.html\">GestureTapCallback<\/a> to provide platform specific feedback for a\ntap before the provided callback is executed.<\/p>\n<p>On Android the platform-typical click system sound is played. On iOS this\nis a no-op as that platform usually doesn't provide feedback for a tap.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/Feedback\/forTap.html\">forTap<\/a> to just trigger the platform-specific feedback without wrapping\na <a href=\"gestures\/GestureTapCallback.html\">GestureTapCallback<\/a>.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static GestureTapCallback wrapForTap(GestureTapCallback callback, BuildContext context) {\n  if (callback == null)\n    return null;\n  return () {\n    Feedback.forTap(context);\n    callback();\n  };\n}<\/code><\/pre>\n    ",
            "href": "material\/Feedback\/wrapForTap.html",
            "isDeprecated": "0",
            "type": "gestures.GestureTapCallback",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "material.Feedback",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.GestureTapCallback"
                },
                {
                    "name": "context",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "widgets.BuildContext"
                }
            ]
        }
    ],
    "props": []
}