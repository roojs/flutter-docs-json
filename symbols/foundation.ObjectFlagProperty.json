{
    "desc": "<p>A property where the important diagnostic information is primarily whether\nthe <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is present (non-null) or absent (null), rather than the actual\nvalue of the property itself.<\/p>\n<p>The <a href=\"foundation\/ObjectFlagProperty\/ifPresent.html\">ifPresent<\/a> and <a href=\"foundation\/DiagnosticsProperty\/ifNull.html\">ifNull<\/a> strings describe the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> when it\nis non-null and null respectively. If one of <a href=\"foundation\/ObjectFlagProperty\/ifPresent.html\">ifPresent<\/a> or <a href=\"foundation\/DiagnosticsProperty\/ifNull.html\">ifNull<\/a> is\nomitted, that is taken to mean that <a href=\"foundation\/ObjectFlagProperty\/level.html\">level<\/a> should be\n<a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a> when <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is non-null or null respectively.<\/p>\n<p>This kind of diagnostics property is typically used for values mostly opaque\nvalues, like closures, where presenting the actual object is of dubious\nvalue but where reporting the presence or absence of the value is much more\nuseful.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which provides similar functionality describing whether\na <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is true or false.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "foundation\/ObjectFlagProperty-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "foundation",
    "name": "foundation.ObjectFlagProperty",
    "shortname": "ObjectFlagProperty",
    "extends": [
        "foundation.DiagnosticsProperty",
        "foundation.DiagnosticsNode",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a diagnostics property for values that can be present (non-null) or\nabsent (null), but for which the exact value's <a href=\"foundation\/DiagnosticsNode\/toString.html\">Object.toString<\/a>\nrepresentation is not very transparent (e.g. a callback).<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null. Additionally, at\nleast one of <code>ifPresent<\/code> and <code>ifNull<\/code> must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ObjectFlagProperty(\n  String name,\n  T value, {\n  this.ifPresent,\n  String ifNull,\n  bool showName = false,\n  DiagnosticLevel level  = DiagnosticLevel.info,\n}) : assert(ifPresent != null || ifNull != null),\n     assert(showName != null),\n     assert(level != null),\n     super(\n  name,\n  value,\n  showName: showName,\n  ifNull: ifNull,\n  level: level,\n);<\/code><\/pre>\n    ",
            "href": "foundation\/ObjectFlagProperty\/ObjectFlagProperty.html",
            "isDeprecated": false,
            "type": "",
            "name": "ObjectFlagProperty",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.ObjectFlagProperty",
            "params": [
                {
                    "name": "ifNull",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "ifPresent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "level",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "foundation.DiagnosticLevel"
                },
                {
                    "name": "name",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "showName",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                },
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (ifPresent != null)\n    json['ifPresent'] = ifPresent;\n  return json;\n}<\/code><\/pre>\n    ",
            "href": "foundation\/ObjectFlagProperty\/toJsonMap.html",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
            "name": "toJsonMap",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.ObjectFlagProperty",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/ObjectFlagProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value != null) {\n    if (ifPresent != null)\n      return ifPresent;\n  } else {\n    if (ifNull != null)\n      return ifNull;\n  }\n  return super.valueToString(parentConfiguration: parentConfiguration);\n}<\/code><\/pre>\n    ",
            "href": "foundation\/ObjectFlagProperty\/valueToString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "valueToString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.ObjectFlagProperty",
            "params": [
                {
                    "name": "parentConfiguration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.TextTreeConfiguration"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Description to use if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is not null.<\/p>\n<p>If the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is not null and <a href=\"foundation\/ObjectFlagProperty\/ifPresent.html\">ifPresent<\/a> is null, the\n<a href=\"foundation\/ObjectFlagProperty\/level.html\">level<\/a> for the property is <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a> and the description\nfrom superclass is used.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifPresent\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/ObjectFlagProperty\/ifPresent.html",
            "name": "ifPresent",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.ObjectFlagProperty",
            "params": []
        },
        {
            "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>The property level defaults to the value specified by the <code>level<\/code>\nconstructor argument. The level is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> if\nan <a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> was thrown getting the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>. The level is\nraised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null and\nthe property is not allowed to be null due to <a href=\"foundation\/DiagnosticsProperty\/missingIfNull.html\">missingIfNull<\/a>. The\npriority level is lowered to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> if the property\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (value != null) {\n    if (ifPresent == null)\n      return DiagnosticLevel.hidden;\n  } else {\n    if (ifNull == null)\n      return DiagnosticLevel.hidden;\n  }\n\n  return super.level;\n}<\/code><\/pre>\n        ",
            "href": "foundation\/ObjectFlagProperty\/level.html",
            "name": "level",
            "isDeprecated": false,
            "type": "foundation.DiagnosticLevel",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.ObjectFlagProperty",
            "params": []
        },
        {
            "desc": "<p>Whether the name of the property should be shown when showing the default\nview of the tree.<\/p>\n<p>This could be set to false (hiding the name) if the value's description\nwill make the name self-evident.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get showName {\n  if ((value != null &amp;&amp; ifPresent == null) || (value == null &amp;&amp; ifNull == null)) {\n    \/\/ We are missing a description for the flag value so we need to show the\n    \/\/ flag name. The property will have DiagnosticLevel.hidden for this case\n    \/\/ so users will not see this the property in this case unless they are\n    \/\/ displaying hidden properties.\n    return true;\n  }\n  return super.showName;\n}<\/code><\/pre>\n        ",
            "href": "foundation\/ObjectFlagProperty\/showName.html",
            "name": "showName",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.ObjectFlagProperty",
            "params": []
        }
    ]
}