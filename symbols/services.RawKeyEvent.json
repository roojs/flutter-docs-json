{
    "desc": "<p>Defines the interface for raw key events.<\/p>\n<p>Raw key events pass through as much information as possible from the\nunderlying platform's key events, which allows them to provide a high level\nof fidelity but a low level of portability.<\/p>\n<p>The event also provides an abstraction for the <a href=\"services\/RawKeyEvent\/physicalKey.html\">physicalKey<\/a> and the\n<a href=\"services\/RawKeyEvent\/logicalKey.html\">logicalKey<\/a>, describing the physical location of the key, and the logical\nmeaning of the key, respectively. These are more portable representations of\nthe key events, and should produce the same results regardless of platform.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"services\/LogicalKeyboardKey-class.html\">LogicalKeyboardKey<\/a>, an object that describes the logical meaning of a\nkey.<\/li>\n<li>\n<a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>, an object that describes the physical location of\na key.<\/li>\n<li>\n<a href=\"services\/RawKeyDownEvent-class.html\">RawKeyDownEvent<\/a>, a specialization for events representing the user\npressing a key.<\/li>\n<li>\n<a href=\"services\/RawKeyUpEvent-class.html\">RawKeyUpEvent<\/a>, a specialization for events representing the user\nreleasing a key.<\/li>\n<li>\n<a href=\"services\/RawKeyboard-class.html\">RawKeyboard<\/a>, which uses this interface to expose key data.<\/li>\n<li>\n<a href=\"widgets\/RawKeyboardListener-class.html\">RawKeyboardListener<\/a>, a widget that listens for raw key events.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "services\/RawKeyEvent-class.html",
    "isAbstract": true,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "services",
    "name": "services.RawKeyEvent",
    "shortname": "RawKeyEvent",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "services.RawKeyDownEvent",
        "services.RawKeyUpEvent"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initializes fields for subclasses, and provides a const constructor for\nconst subclasses.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawKeyEvent({\n  @required this.data,\n  this.character,\n});<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEvent\/RawKeyEvent.html",
            "isDeprecated": false,
            "type": "",
            "name": "RawKeyEvent",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.RawKeyEvent",
            "params": [
                {
                    "name": "character",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "data",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "services.RawKeyEventData"
                }
            ]
        },
        {
            "desc": "<p>Returns true if the given <code>KeyboardKey<\/code> is pressed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isKeyPressed(LogicalKeyboardKey key) =&gt; RawKeyboard.instance.keysPressed.contains(key);<\/code><\/pre>\n    ",
            "href": "services\/RawKeyEvent\/isKeyPressed.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "isKeyPressed",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.RawKeyEvent",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.LogicalKeyboardKey"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns the Unicode character (grapheme cluster) completed by this\nkeystroke, if any.<\/p>\n<p>This will only return a character if this keystroke, combined with any\npreceding keystroke(s), generated a character, and only on a \"key down\"\nevent. It will return null if no character has been generated by the\nkeystroke (e.g. a \"dead\" or \"combining\" key), or if the corresponding key\nis a key without a visual representation, such as a modifier key or a\ncontrol key.<\/p>\n<p>This can return multiple Unicode code points, since some characters (more\naccurately referred to as grapheme clusters) are made up of more than one\ncode point.<\/p>\n<p>The <code>character<\/code> doesn't take into account edits by an input method editor\n(IME), or manage the visibility of the soft keyboard on touch devices. For\ncomposing text, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or <a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since\nthose automatically handle many of the complexities of managing keyboard\ninput.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String character\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/character.html",
            "name": "character",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Platform-specific information about the key event.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RawKeyEventData data\n\n<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/data.html",
            "name": "data",
            "isDeprecated": false,
            "type": "services.RawKeyEventData",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Returns true if a ALT modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Note that the ALTGR key that appears on some keyboards is considered to be\nthe same as <a href=\"services\/LogicalKeyboardKey\/altRight-constant.html\">LogicalKeyboardKey.altRight<\/a> on some platforms (notably\nAndroid). On platforms that can distinguish between <code>altRight<\/code> and\n<code>altGr<\/code>, a press of <code>altGr<\/code> will not return true here, and will need to be\ntested for separately.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which alt key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAltPressed {\n  return isKeyPressed(LogicalKeyboardKey.altLeft) || isKeyPressed(LogicalKeyboardKey.altRight);\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/isAltPressed.html",
            "name": "isAltPressed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Returns true if a CTRL modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which control key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isControlPressed {\n  return isKeyPressed(LogicalKeyboardKey.controlLeft) || isKeyPressed(LogicalKeyboardKey.controlRight);\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/isControlPressed.html",
            "name": "isControlPressed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Returns true if a META modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which meta key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMetaPressed {\n  return isKeyPressed(LogicalKeyboardKey.metaLeft) || isKeyPressed(LogicalKeyboardKey.metaRight);\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/isMetaPressed.html",
            "name": "isMetaPressed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Returns true if a SHIFT modifier key is pressed, regardless of which side\nof the keyboard it is on.<\/p>\n<p>Use <a href=\"services\/RawKeyEvent\/isKeyPressed.html\">isKeyPressed<\/a> if you need to know which shift key was pressed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isShiftPressed {\n  return isKeyPressed(LogicalKeyboardKey.shiftLeft) || isKeyPressed(LogicalKeyboardKey.shiftRight);\n}<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/isShiftPressed.html",
            "name": "isShiftPressed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the logical key that was pressed.<\/p>\n<p>This method takes into account the key map and modifier keys (like SHIFT)\nto determine which logical key to return.<\/p>\n<p>If you are looking for the character produced by a key event, use\n<a href=\"services\/RawKeyEvent\/character.html\">RawKeyEvent.character<\/a> instead.<\/p>\n<p>If you are collecting text strings, use the <a href=\"material\/TextField-class.html\">TextField<\/a> or\n<a href=\"cupertino\/CupertinoTextField-class.html\">CupertinoTextField<\/a> widgets, since those automatically handle many of the\ncomplexities of managing keyboard input, like showing a soft keyboard or\ninteracting with an input method editor (IME).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">LogicalKeyboardKey get logicalKey =&gt; data.logicalKey;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/logicalKey.html",
            "name": "logicalKey",
            "isDeprecated": false,
            "type": "services.LogicalKeyboardKey",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        },
        {
            "desc": "<p>Returns an object representing the physical location of this key.<\/p>\n<p>The <a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a> ignores the key map, modifier keys (like SHIFT),\nand the label on the key. It describes the location of the key as if it\nwere on a QWERTY keyboard regardless of the keyboard mapping in effect.<\/p>\n<p><a href=\"services\/PhysicalKeyboardKey-class.html\">PhysicalKeyboardKey<\/a>s are used to describe and test for keys in a\nparticular location.<\/p>\n<p>For instance, if you wanted to make a game where the key to the right of\nthe CAPS LOCK key made the player move left, you would be comparing the\nresult of this <code>physicalKey<\/code> with <a href=\"services\/PhysicalKeyboardKey\/keyA-constant.html\">PhysicalKeyboardKey.keyA<\/a>, since that\nis the key next to the CAPS LOCK key on a QWERTY keyboard. This would\nreturn the same thing even on a French keyboard where the key next to the\nCAPS LOCK produces a \"Q\" when pressed.<\/p>\n<p>If you want to make your app respond to a key with a particular character\non it regardless of location of the key, use <a href=\"services\/RawKeyEvent\/logicalKey.html\">RawKeyEvent.logicalKey<\/a> instead.\nSee also:<\/p>\n<ul>\n<li>\n<a href=\"services\/RawKeyEvent\/logicalKey.html\">logicalKey<\/a> for the non-location specific key generated by this event.<\/li>\n<li>\n<a href=\"services\/RawKeyEvent\/character.html\">character<\/a> for the character generated by this keypress (if any).<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">PhysicalKeyboardKey get physicalKey =&gt; data.physicalKey;<\/code><\/pre>\n        ",
            "href": "services\/RawKeyEvent\/physicalKey.html",
            "name": "physicalKey",
            "isDeprecated": false,
            "type": "services.PhysicalKeyboardKey",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "services.RawKeyEvent",
            "params": []
        }
    ]
}