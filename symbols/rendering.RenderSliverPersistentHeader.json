{
    "desc": "<p>A base class for slivers that have a <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a> child which scrolls\nnormally, except that when it hits the leading edge (typically the top) of\nthe viewport, it shrinks to a minimum size (<a href=\"rendering\/RenderSliverPersistentHeader\/minExtent.html\">minExtent<\/a>).<\/p>\n<p>This class primarily provides helpers for managing the child, in particular:<\/p>\n<ul>\n<li>\n<p><a href=\"rendering\/RenderSliverPersistentHeader\/layoutChild.html\">layoutChild<\/a>, which applies min and max extents and a scroll offset to\nlay out the child. This is normally called from <a href=\"rendering\/RenderObject\/performLayout.html\">performLayout<\/a>.<\/p>\n<\/li>\n<li>\n<p><a href=\"rendering\/RenderSliverPersistentHeader\/childExtent.html\">childExtent<\/a>, to convert the child's box layout dimensions to the sliver\ngeometry model.<\/p>\n<\/li>\n<li>\n<p>hit testing, painting, and other details of the sliver protocol.<\/p>\n<\/li>\n<\/ul>\n<p>Subclasses must implement <a href=\"rendering\/RenderObject\/performLayout.html\">performLayout<\/a>, <a href=\"rendering\/RenderSliverPersistentHeader\/minExtent.html\">minExtent<\/a>, and <a href=\"rendering\/RenderSliverPersistentHeader\/maxExtent.html\">maxExtent<\/a>, and\ntypically also will implement <a href=\"rendering\/RenderSliverPersistentHeader\/updateChild.html\">updateChild<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderSliverPersistentHeader-class.html",
    "isAbstract": true,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.RenderSliverPersistentHeader",
    "shortname": "RenderSliverPersistentHeader",
    "extends": [
        "rendering.RenderSliver",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a sliver that changes its size when scrolled to the start of the\nviewport.<\/p>\n<p>This is an abstract class; this constructor only initializes the <code>child<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderSliverPersistentHeader({ RenderBox child }) {\n  this.child = child;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/RenderSliverPersistentHeader.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderSliverPersistentHeader",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                }
            ]
        },
        {
            "desc": "<p>Applies the transform that would be applied when painting the given child\nto the given matrix.<\/p>\n<p>Used by coordinate conversion functions to translate coordinates local to\none render object into coordinates local to another render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid applyPaintTransform(RenderObject child, Matrix4 transform) {\n  assert(child != null);\n  assert(child == this.child);\n  applyPaintTransformForBoxChild(child, transform);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/applyPaintTransform.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "applyPaintTransform",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                },
                {
                    "name": "transform",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "vector_math_64.Matrix4"
                }
            ]
        },
        {
            "desc": "<p>Returns the distance from the leading <em>visible<\/em> edge of the sliver to the\nside of the child closest to that edge, in the scroll axis direction.<\/p>\n<p>For example, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as having an axis\ndirection of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a>, then this is the distance from the top\nof the visible portion of the sliver to the top of the child. If the child\nis scrolled partially off the top of the viewport, then this will be\nnegative. On the other hand, if the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a> describe this sliver as\nhaving an axis direction of <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a>, then this is the distance\nfrom the bottom of the visible portion of the sliver to the bottom of the\nchild. In both cases, this is the direction of increasing\n<a href=\"rendering\/SliverConstraints\/scrollOffset.html\">SliverConstraints.scrollOffset<\/a>.<\/p>\n<p>Calling this when the child is not visible is not valid.<\/p>\n<p>The argument must be the value of the <code>child<\/code> property.<\/p>\n<p>This must be implemented by <a href=\"rendering\/RenderSliverPersistentHeader-class.html\">RenderSliverPersistentHeader<\/a> subclasses.<\/p>\n<p>If there is no child, this should return 0.0.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\ndouble childMainAxisPosition(covariant RenderObject child) =&gt; super.childMainAxisPosition(child);<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/childMainAxisPosition.html",
            "isDeprecated": false,
            "type": "dart:core.double",
            "name": "childMainAxisPosition",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.RenderObject"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"rendering\/RenderSliverPersistentHeader\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"rendering\/RenderObject\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DoubleProperty.lazy('maxExtent', () =&gt; maxExtent));\n  properties.add(DoubleProperty.lazy('child position', () =&gt; childMainAxisPosition(child)));\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/debugFillProperties.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "properties",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Report the semantics of this node, for example for accessibility purposes.<\/p>\n<p>This method should be overridden by subclasses that have interesting\nsemantic information.<\/p>\n<p>The given <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object is mutable and should be\nannotated in a manner that describes the current state. No reference\nshould be kept to that object; mutating it outside of the context of the\n<a href=\"rendering\/RenderSliverPersistentHeader\/describeSemanticsConfiguration.html\">describeSemanticsConfiguration<\/a> call (for example as a result of\nasynchronous computation) will at best have no useful effect and at worse\nwill cause crashes as the data will be in an inconsistent state.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following snippet will describe the node as a button that responds to\ntap actions.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">abstract class SemanticButtonRenderObject extends RenderObject {\n  @override\n  void describeSemanticsConfiguration(SemanticsConfiguration config) {\n    super.describeSemanticsConfiguration(config);\n    config\n      ..onTap = _handleTap\n      ..label = 'I am a button'\n      ..isButton = true;\n  }\n\n  void _handleTap() {\n    \/\/ Do something.\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid describeSemanticsConfiguration(SemanticsConfiguration config) {\n  super.describeSemanticsConfiguration(config);\n\n  if (_excludeFromSemanticsScrolling)\n    config.addTagForChildren(RenderViewport.excludeFromScrolling);\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/describeSemanticsConfiguration.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "describeSemanticsConfiguration",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "config",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "semantics.SemanticsConfiguration"
                }
            ]
        },
        {
            "desc": "<p>Override this method to check whether any children are located at the\ngiven position.<\/p>\n<p>Typically children should be hit-tested in reverse paint order so that\nhit tests at locations where children overlap hit the child that is\nvisually \"on top\" (i.e., paints later).<\/p>\n<p>Used by <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>. If you override <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a> and do not call this\nfunction, then you don't need to implement this function.<\/p>\n<p>For a discussion of the semantics of the arguments, see <a href=\"rendering\/RenderSliver\/hitTest.html\">hitTest<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTestChildren(HitTestResult result, { @required double mainAxisPosition, @required double crossAxisPosition }) {\n  assert(geometry.hitTestExtent &gt; 0.0);\n  if (child != null)\n    return hitTestBoxChild(result, child, mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition);\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/hitTestChildren.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "hitTestChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "crossAxisPosition",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "mainAxisPosition",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "result",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "gestures.HitTestResult"
                }
            ]
        },
        {
            "desc": "<p>Lays out the <a href=\"rendering\/RenderObjectWithChildMixin\/child.html\">child<\/a>.<\/p>\n<p>This is called by <a href=\"rendering\/RenderObject\/performLayout.html\">performLayout<\/a>. It applies the given <code>scrollOffset<\/code>\n(which need not match the offset given by the <a href=\"rendering\/RenderSliver\/constraints.html\">constraints<\/a>) and the\n<code>maxExtent<\/code> (which need not match the value returned by the <code>maxExtent<\/code>\ngetter).<\/p>\n<p>The <code>overlapsContent<\/code> argument is passed to <a href=\"rendering\/RenderSliverPersistentHeader\/updateChild.html\">updateChild<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid layoutChild(double scrollOffset, double maxExtent, { bool overlapsContent = false }) {\n  assert(maxExtent != null);\n  final double shrinkOffset = math.min(scrollOffset, maxExtent);\n  if (_needsUpdateChild || _lastShrinkOffset != shrinkOffset || _lastOverlapsContent != overlapsContent) {\n    invokeLayoutCallback&lt;SliverConstraints&gt;((SliverConstraints constraints) {\n      assert(constraints == this.constraints);\n      updateChild(shrinkOffset, overlapsContent);\n    });\n    _lastShrinkOffset = shrinkOffset;\n    _lastOverlapsContent = overlapsContent;\n    _needsUpdateChild = false;\n  }\n  assert(minExtent != null);\n  assert(() {\n    if (minExtent &lt;= maxExtent)\n      return true;\n    throw FlutterError(\n      'The maxExtent for this $runtimeType is less than its minExtent.\\n'\n      'The specified maxExtent was: ${maxExtent.toStringAsFixed(1)}\\n'\n      'The specified minExtent was: ${minExtent.toStringAsFixed(1)}\\n'\n    );\n  }());\n  child?.layout(\n    constraints.asBoxConstraints(maxExtent: math.max(minExtent, maxExtent - shrinkOffset)),\n    parentUsesSize: true,\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/layoutChild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "layoutChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "maxExtent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                },
                {
                    "name": "overlapsContent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "scrollOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Mark this render object's layout information as dirty, and either register\nthis object with its <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a>, or defer to the parent, depending on\nwhether this object is a relayout boundary or not respectively.<\/p>\n<h2 id=\"background\">Background<\/h2>\n<p>Rather than eagerly updating layout information in response to writes into\na render object, we instead mark the layout information as dirty, which\nschedules a visual update. As part of the visual update, the rendering\npipeline updates the render object's layout information.<\/p>\n<p>This mechanism batches the layout work so that multiple sequential writes\nare coalesced, removing redundant computation.<\/p>\n<p>If a render object's parent indicates that it uses the size of one of its\nrender object children when computing its layout information, this\nfunction, when called for the child, will also mark the parent as needing\nlayout. In that case, since both the parent and the child need to have\ntheir layout recomputed, the pipeline owner is only notified about the\nparent; when the parent is laid out, it will call the child's <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a>\nmethod and thus the child will be laid out as well.<\/p>\n<p>Once <a href=\"rendering\/RenderSliverPersistentHeader\/markNeedsLayout.html\">markNeedsLayout<\/a> has been called on a render object,\n<a href=\"rendering\/RenderObject\/debugNeedsLayout.html\">debugNeedsLayout<\/a> returns true for that render object until just after\nthe pipeline owner has called <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on the render object.<\/p>\n<h2 id=\"special-cases\">Special cases<\/h2>\n<p>Some subclasses of <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>, notably <a href=\"rendering\/RenderBox-class.html\">RenderBox<\/a>, have other\nsituations in which the parent needs to be notified if the child is\ndirtied. Such subclasses override markNeedsLayout and either call\n<code>super.markNeedsLayout()<\/code>, in the normal case, or call\n<a href=\"rendering\/RenderObject\/markParentNeedsLayout.html\">markParentNeedsLayout<\/a>, in the case where the parent needs to be laid out\nas well as the child.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> has changed, calls\n<a href=\"rendering\/RenderObject\/markNeedsLayoutForSizedByParentChange.html\">markNeedsLayoutForSizedByParentChange<\/a> instead of <a href=\"rendering\/RenderSliverPersistentHeader\/markNeedsLayout.html\">markNeedsLayout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid markNeedsLayout() {\n  \/\/ This is automatically called whenever the child's intrinsic dimensions\n  \/\/ change, at which point we should remeasure them during the next layout.\n  _needsUpdateChild = true;\n  super.markNeedsLayout();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/markNeedsLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "markNeedsLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": []
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (child != null &amp;&amp; geometry.visible) {\n    assert(constraints.axisDirection != null);\n    switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {\n      case AxisDirection.up:\n        offset += Offset(0.0, geometry.paintExtent - childMainAxisPosition(child) - childExtent);\n        break;\n      case AxisDirection.down:\n        offset += Offset(0.0, childMainAxisPosition(child));\n        break;\n      case AxisDirection.left:\n        offset += Offset(geometry.paintExtent - childMainAxisPosition(child) - childExtent, 0.0);\n        break;\n      case AxisDirection.right:\n        offset += Offset(childMainAxisPosition(child), 0.0);\n        break;\n    }\n    context.paintChild(child, offset);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Update the child render object if necessary.<\/p>\n<p>Called before the first layout, any time <a href=\"rendering\/RenderSliverPersistentHeader\/markNeedsLayout.html\">markNeedsLayout<\/a> is called, and\nany time the scroll offset changes. The <code>shrinkOffset<\/code> is the difference\nbetween the <a href=\"rendering\/RenderSliverPersistentHeader\/maxExtent.html\">maxExtent<\/a> and the current size. Zero means the header is\nfully expanded, any greater number up to <a href=\"rendering\/RenderSliverPersistentHeader\/maxExtent.html\">maxExtent<\/a> means that the header\nhas been scrolled by that much. The <code>overlapsContent<\/code> argument is true if\nthe sliver's leading edge is beyond its normal place in the viewport\ncontents, and false otherwise. It may still paint beyond its normal place\nif the <a href=\"rendering\/RenderSliverPersistentHeader\/minExtent.html\">minExtent<\/a> after this call is greater than the amount of space that\nwould normally be left.<\/p>\n<p>The render object will size itself to the larger of (a) the <a href=\"rendering\/RenderSliverPersistentHeader\/maxExtent.html\">maxExtent<\/a>\nminus the child's intrinsic height and (b) the <a href=\"rendering\/RenderSliverPersistentHeader\/maxExtent.html\">maxExtent<\/a> minus the\nshrink offset.<\/p>\n<p>When this method is called by <a href=\"rendering\/RenderSliverPersistentHeader\/layoutChild.html\">layoutChild<\/a>, the <a href=\"rendering\/RenderObjectWithChildMixin\/child.html\">child<\/a> can be set,\nmutated, or replaced. (It should not be called outside <a href=\"rendering\/RenderSliverPersistentHeader\/layoutChild.html\">layoutChild<\/a>.)<\/p>\n<p>Any time this method would mutate the child, call <a href=\"rendering\/RenderSliverPersistentHeader\/markNeedsLayout.html\">markNeedsLayout<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid updateChild(double shrinkOffset, bool overlapsContent) { }<\/code><\/pre>\n    ",
            "href": "rendering\/RenderSliverPersistentHeader\/updateChild.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateChild",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": [
                {
                    "name": "overlapsContent",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "shrinkOffset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The dimension of the child in the main axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\ndouble get childExtent {\n  if (child == null)\n    return 0.0;\n  assert(child.hasSize);\n  assert(constraints.axis != null);\n  switch (constraints.axis) {\n    case Axis.vertical:\n      return child.size.height;\n    case Axis.horizontal:\n      return child.size.width;\n  }\n  return null;\n}<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPersistentHeader\/childExtent.html",
            "name": "childExtent",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": []
        },
        {
            "desc": "<p>Whether the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s associated with this <a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a> should\nbe excluded from the semantic scrolling area.<\/p>\n<p><a href=\"rendering\/RenderSliver-class.html\">RenderSliver<\/a>s that stay on the screen even though the user has scrolled\npast them (e.g. a pinned app bar) should set this to true.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get excludeFromSemanticsScrolling =&gt; _excludeFromSemanticsScrolling;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPersistentHeader\/excludeFromSemanticsScrolling.html",
            "name": "excludeFromSemanticsScrolling",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": []
        },
        {
            "desc": "<p>The biggest that this render object can become, in the main axis direction.<\/p>\n<p>This value should not be based on the child. If it changes, call\n<a href=\"rendering\/RenderSliverPersistentHeader\/markNeedsLayout.html\">markNeedsLayout<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get maxExtent;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPersistentHeader\/maxExtent.html",
            "name": "maxExtent",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": []
        },
        {
            "desc": "<p>The smallest that this render object can become, in the main axis direction.<\/p>\n<p>If this is based on the intrinsic dimensions of the child, the child\nshould be measured during <a href=\"rendering\/RenderSliverPersistentHeader\/updateChild.html\">updateChild<\/a> and the value cached and returned\nhere. The <a href=\"rendering\/RenderSliverPersistentHeader\/updateChild.html\">updateChild<\/a> method will automatically be invoked any time the\nchild changes its intrinsic dimensions.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minExtent;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderSliverPersistentHeader\/minExtent.html",
            "name": "minExtent",
            "isDeprecated": false,
            "type": "dart:core.double",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderSliverPersistentHeader",
            "params": []
        }
    ]
}