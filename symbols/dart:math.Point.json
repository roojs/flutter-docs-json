{
    "name": "dart:math.Point",
    "extends": [],
    "memberOf": "dart:math",
    "events": [],
    "methods": [
        {
            "name": "operator *",
            "type": "dart:math.Point",
            "desc": "<p>Scale this point by <code>factor<\/code> as if it were a vector.<\/p>\n<p><em>Important<\/em> <em>Note<\/em>: This function accepts a <code>num<\/code> as its argument only so\nthat you can scale Point<double> objects by an <code>int<\/code> factor. Because the\nstar operator always returns the same type of Point that originally called\nit, passing in a double <code>factor<\/code> on a <code>Point&lt;int&gt;<\/code> <em>causes<\/em> <em>a<\/em>\n<em>runtime<\/em> <em>error<\/em> in checked mode.<\/double><\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "factor",
                    "type": "dart:core.num",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Point\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; operator *(num \/*T|int*\/ factor) {\n  return Point&lt;T&gt;((x * factor), (y * factor));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator +",
            "type": "dart:math.Point",
            "desc": "<p>Add <code>other<\/code> to <code>this<\/code>, as if both points were vectors.<\/p>\n<p>Returns the resulting \"vector\" as a Point.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Point",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Point\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; operator +(Point&lt;T&gt; other) {\n  return Point&lt;T&gt;(x + other.x, y + other.y);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator -",
            "type": "dart:math.Point",
            "desc": "<p>Subtract <code>other<\/code> from <code>this<\/code>, as if both points were vectors.<\/p>\n<p>Returns the resulting \"vector\" as a Point.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Point",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Point\/operator_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Point&lt;T&gt; operator -(Point&lt;T&gt; other) {\n  return Point&lt;T&gt;(x - other.x, y - other.y);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>A <code>Point<\/code> is only equal to another <code>Point<\/code> with the same coordinates.<\/p>\n<p>This point is equal to <code>other<\/code> if, and only if,\n<code>other<\/code> is a <code>Point<\/code> with\n<a href=\"dart-math\/Point\/x.html\">x<\/a> equal to <code>other.x<\/code> and <a href=\"dart-math\/Point\/y.html\">y<\/a> equal to <code>other.y<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Point\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool operator ==(dynamic other) =&gt;\n    \/\/ Cannot change parameter type to `Object` in case some class\n    \/\/ inherits the type and uses their argument dynamically.\n    other is Point &amp;&amp; x == other.x &amp;&amp; y == other.y;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Point",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "y",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-math\/Point\/Point.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Point(T x, T y)\n    : this.x = x,\n      this.y = y;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "distanceTo",
            "type": "dart:core.double",
            "desc": "<p>Returns the distance between <code>this<\/code> and <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Point",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Point\/distanceTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double distanceTo(Point&lt;T&gt; other) {\n  var dx = x - other.x;\n  var dy = y - other.y;\n  return sqrt(dx * dx + dy * dy);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "squaredDistanceTo",
            "type": "",
            "desc": "<p>Returns the squared distance between <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>Squared distances can be used for comparisons when the actual value is not\nrequired.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:math.Point",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-math\/Point\/squaredDistanceTo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T squaredDistanceTo(Point&lt;T&gt; other) {\n  var dx = x - other.x;\n  var dy = y - other.y;\n  return dx * dx + dy * dy;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:math.Point",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-math\/Point\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; 'Point($x, $y)';<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-math\/Point\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-math\/Point\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:math.Point",
            "isConstant": false,
            "href": "dart-math\/Point\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; _JenkinsSmiHash.hash2(x.hashCode, y.hashCode);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "magnitude",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>Get the straight line (Euclidean) distance between the origin (0, 0) and\nthis point.<\/p>\n        ",
            "memberOf": "dart:math.Point",
            "isConstant": false,
            "href": "dart-math\/Point\/magnitude.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get magnitude =&gt; sqrt(x * x + y * y);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "x",
            "type": "",
            "types": [],
            "desc": "",
            "memberOf": "dart:math.Point",
            "isConstant": false,
            "href": "dart-math\/Point\/x.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T x\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "y",
            "type": "",
            "types": [],
            "desc": "",
            "memberOf": "dart:math.Point",
            "isConstant": false,
            "href": "dart-math\/Point\/y.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final T y\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-math\/Point-class.html",
    "desc": "<p>A utility class for representing two-dimensional positions.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Point"
}