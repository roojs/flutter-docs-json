{
    "name": "widgets.PageRouteBuilder",
    "extends": [
        "widgets.PageRoute",
        "widgets.ModalRoute",
        "widgets.TransitionRoute",
        "widgets.OverlayRoute",
        "widgets.Route",
        "dart:core.Object"
    ],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "PageRouteBuilder",
            "type": "",
            "desc": "<p>Creates a route that delegates to builder callbacks.<\/p>\n<p>The <code>pageBuilder<\/code>, <code>transitionsBuilder<\/code>, <code>opaque<\/code>, <code>barrierDismissible<\/code>,\nand <code>maintainState<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageRouteBuilder",
            "sig": "",
            "params": [
                {
                    "name": "settings",
                    "type": "widgets.RouteSettings",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "pageBuilder",
                    "type": "widgets.RoutePageBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transitionsBuilder",
                    "type": "widgets.RouteTransitionsBuilder",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transitionDuration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "opaque",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "barrierDismissible",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "barrierColor",
                    "type": "dart:ui.Color",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "barrierLabel",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maintainState",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "widgets\/PageRouteBuilder\/PageRouteBuilder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PageRouteBuilder({\n  RouteSettings settings,\n  @required this.pageBuilder,\n  this.transitionsBuilder = _defaultTransitionsBuilder,\n  this.transitionDuration = const Duration(milliseconds: 300),\n  this.opaque = true,\n  this.barrierDismissible = false,\n  this.barrierColor,\n  this.barrierLabel,\n  this.maintainState = true,\n}) : assert(pageBuilder != null),\n     assert(transitionsBuilder != null),\n     assert(barrierDismissible != null),\n     assert(maintainState != null),\n     assert(opaque != null),\n     super(settings: settings);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "buildPage",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to build the primary content of this route.<\/p>\n<p>The arguments have the following meanings:<\/p>\n<ul>\n<li>\n<code>context<\/code>: The context in which the route is being built.<\/li>\n<li>\n<code>animation<\/code>: The animation for this route's transition. When entering,\nthe animation runs forward from 0.0 to 1.0. When exiting, this animation\nruns backwards from 1.0 to 0.0.<\/li>\n<li>\n<code>secondaryAnimation<\/code>: The animation for the route being pushed on top of\nthis route. This animation lets this route coordinate with the entrance\nand exit transition of routes pushed on top of this route.<\/li>\n<\/ul>\n<p>This method is only called when the route is first built, and rarely\nthereafter. In particular, it is not automatically called again when the\nroute's state changes unless it uses <a href=\"widgets\/ModalRoute\/of.html\">ModalRoute.of<\/a>. For a builder that\nis called every time the route's state changes, consider\n<a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a>. For widgets that change their behavior when the\nroute's state changes, consider <a href=\"widgets\/ModalRoute\/of.html\">ModalRoute.of<\/a> to obtain a reference to\nthe route; this will cause the widget to be rebuilt each time the route\nchanges state.<\/p>\n<p>In general, <a href=\"widgets\/PageRouteBuilder\/buildPage.html\">buildPage<\/a> should be used to build the page contents, and\n<a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a> for the widgets that change as the page is brought in\nand out of view. Avoid using <a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a> for content that never\nchanges; building such content once from <a href=\"widgets\/PageRouteBuilder\/buildPage.html\">buildPage<\/a> is more efficient.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.PageRouteBuilder",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "animation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "secondaryAnimation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageRouteBuilder\/buildPage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildPage(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation) {\n  return pageBuilder(context, animation, secondaryAnimation);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "buildTransitions",
            "type": "widgets.Widget",
            "desc": "<p>Override this method to wrap the <code>child<\/code> with one or more transition\nwidgets that define how the route arrives on and leaves the screen.<\/p>\n<p>By default, the child (which contains the widget returned by <a href=\"widgets\/PageRouteBuilder\/buildPage.html\">buildPage<\/a>)\nis not wrapped in any transition widgets.<\/p>\n<p>The <a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a> method, in contrast to <a href=\"widgets\/PageRouteBuilder\/buildPage.html\">buildPage<\/a>, is called each\ntime the <a href=\"widgets\/Route-class.html\">Route<\/a>'s state changes (e.g. the value of <a href=\"widgets\/ModalRoute\/canPop.html\">canPop<\/a>).<\/p>\n<p>The <a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a> method is typically used to define transitions\nthat animate the new topmost route's comings and goings. When the\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack, the new route's\nprimary <code>animation<\/code> runs from 0.0 to 1.0. When the Navigator pops the\ntopmost route, e.g. because the use pressed the back button, the\nprimary animation runs from 1.0 to 0.0.<\/p>\n<p>The following example uses the primary animation to drive a\n<a href=\"widgets\/SlideTransition-class.html\">SlideTransition<\/a> that translates the top of the new route vertically\nfrom the bottom of the screen when it is pushed on the Navigator's\nstack. When the route is popped the SlideTransition translates the\nroute from the top of the screen back to the bottom.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">PageRouteBuilder(\n  pageBuilder: (BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n  ) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Hello')),\n      body: Center(\n        child: Text('Hello World'),\n      ),\n    );\n  },\n  transitionsBuilder: (\n      BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n   ) {\n    return SlideTransition(\n      position: Tween&lt;Offset&gt;(\n        begin: const Offset(0.0, 1.0),\n        end: Offset.zero,\n      ).animate(animation),\n      child: child, \/\/ child is the value returned by pageBuilder\n    );\n  },\n);\n<\/code><\/pre>\n<p>We've used <a href=\"widgets\/PageRouteBuilder-class.html\">PageRouteBuilder<\/a> to demonstrate the <a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a> method\nhere. The body of an override of the <a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">buildTransitions<\/a> method would be\ndefined in the same way.<\/p>\n<p>When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack, the\n<code>secondaryAnimation<\/code> can be used to define how the route that was on\nthe top of the stack leaves the screen. Similarly when the topmost route\nis popped, the secondaryAnimation can be used to define how the route\nbelow it reappears on the screen. When the Navigator pushes a new route\non the top of its stack, the old topmost route's secondaryAnimation\nruns from 0.0 to 1.0. When the Navigator pops the topmost route, the\nsecondaryAnimation for the route below it runs from 1.0 to 0.0.<\/p>\n<p>The example below adds a transition that's driven by the\n<code>secondaryAnimation<\/code>. When this route disappears because a new route has\nbeen pushed on top of it, it translates in the opposite direction of\nthe new route. Likewise when the route is exposed because the topmost\nroute has been popped off.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">  transitionsBuilder: (\n      BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n  ) {\n    return SlideTransition(\n      position: AlignmentTween(\n        begin: const Offset(0.0, 1.0),\n        end: Offset.zero,\n      ).animate(animation),\n      child: SlideTransition(\n        position: TweenOffset(\n          begin: Offset.zero,\n          end: const Offset(0.0, 1.0),\n        ).animate(secondaryAnimation),\n        child: child,\n      ),\n    );\n  }\n<\/code><\/pre>\n<p>In practice the <code>secondaryAnimation<\/code> is used pretty rarely.<\/p>\n<p>The arguments to this method are as follows:<\/p>\n<ul>\n<li>\n<code>context<\/code>: The context in which the route is being built.<\/li>\n<li>\n<code>animation<\/code>: When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack,\nthe new route's primary <code>animation<\/code> runs from 0.0 to 1.0. When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>\npops the topmost route this animation runs from 1.0 to 0.0.<\/li>\n<li>\n<code>secondaryAnimation<\/code>: When the Navigator pushes a new route\non the top of its stack, the old topmost route's <code>secondaryAnimation<\/code>\nruns from 0.0 to 1.0. When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pops the topmost route, the\n<code>secondaryAnimation<\/code> for the route below it runs from 1.0 to 0.0.<\/li>\n<li>\n<code>child<\/code>, the page contents, as returned by <a href=\"widgets\/PageRouteBuilder\/buildPage.html\">buildPage<\/a>.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/PageRouteBuilder\/buildPage.html\">buildPage<\/a>, which is used to describe the actual contents of the page,\nand whose result is passed to the <code>child<\/code> argument of this method.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.PageRouteBuilder",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "widgets.BuildContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "animation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "secondaryAnimation",
                    "type": "animation.Animation<dart:core.double>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "animation.Animation",
                        "dart:core.double"
                    ]
                },
                {
                    "name": "child",
                    "type": "widgets.Widget",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/PageRouteBuilder\/buildTransitions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildTransitions(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation, Widget child) {\n  return transitionsBuilder(context, animation, secondaryAnimation, child);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "barrierColor",
            "type": "dart:ui.Color",
            "types": [],
            "desc": "<p>The color to use for the modal barrier. If this is null, the barrier will\nbe transparent.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>The color is ignored, and the barrier made invisible, when <a href=\"widgets\/ModalRoute\/offstage.html\">offstage<\/a> is\ntrue.<\/p>\n<p>While the route is animating into position, the color is animated from\ntransparent to the specified color.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRouteBuilder\/barrierDismissible.html\">barrierDismissible<\/a>, which controls the behavior of the barrier when\ntapped.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/barrierColor.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color barrierColor\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "barrierDismissible",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether you can dismiss this route by tapping the modal barrier.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>If <a href=\"widgets\/PageRouteBuilder\/barrierDismissible.html\">barrierDismissible<\/a> is true, then tapping this barrier will cause the\ncurrent route to be popped (see <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>) with null as the value.<\/p>\n<p>If <a href=\"widgets\/PageRouteBuilder\/barrierDismissible.html\">barrierDismissible<\/a> is false, then tapping the barrier has no effect.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRouteBuilder\/barrierColor.html\">barrierColor<\/a>, which controls the color of the scrim for this route.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/barrierDismissible.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool barrierDismissible\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "barrierLabel",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>The semantic label used for a dismissible barrier.<\/p>\n<p>If the barrier is dismissible, this label will be read out if\naccessibility tools (like VoiceOver on iOS) focus on the barrier.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRouteBuilder\/barrierDismissible.html\">barrierDismissible<\/a>, which controls the behavior of the barrier when\ntapped.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/barrierLabel.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String barrierLabel\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "maintainState",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the route should remain in memory when it is inactive.<\/p>\n<p>If this is true, then the route is maintained, so that any futures it is\nholding from the next route will properly resolve when the next route\npops. If this is not necessary, this can be set to false to allow the\nframework to entirely discard the route's widget hierarchy when it is not\nvisible.<\/p>\n<p>The value of this getter should not change during the lifetime of the\nobject. It is used by <a href=\"widgets\/ModalRoute\/createOverlayEntries.html\">createOverlayEntries<\/a>, which is called by\n<a href=\"widgets\/ModalRoute\/install.html\">install<\/a> near the beginning of the route lifecycle.<\/p>\n        ",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/maintainState.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainState\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "opaque",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the route obscures previous routes when the transition is complete.<\/p>\n<p>When an opaque route's entrance transition is complete, the routes behind\nthe opaque route will not be built to save resources.<\/p>\n        ",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/opaque.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool opaque\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "pageBuilder",
            "type": "widgets.RoutePageBuilder",
            "types": [],
            "desc": "<p>Used build the route's primary contents.<\/p>\n<p>See <a href=\"widgets\/PageRouteBuilder\/buildPage.html\">ModalRoute.buildPage<\/a> for complete definition of the parameters.<\/p>\n        ",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/pageBuilder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RoutePageBuilder pageBuilder\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "transitionDuration",
            "type": "dart:core.Duration",
            "types": [],
            "desc": "<p>The duration the transition lasts.<\/p>\n        ",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/transitionDuration.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration transitionDuration\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "transitionsBuilder",
            "type": "widgets.RouteTransitionsBuilder",
            "types": [],
            "desc": "<p>Used to build the route's transitions.<\/p>\n<p>See <a href=\"widgets\/PageRouteBuilder\/buildTransitions.html\">ModalRoute.buildTransitions<\/a> for complete definition of the parameters.<\/p>\n        ",
            "memberOf": "widgets.PageRouteBuilder",
            "isConstant": false,
            "href": "widgets\/PageRouteBuilder\/transitionsBuilder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteTransitionsBuilder transitionsBuilder\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/PageRouteBuilder-class.html",
    "desc": "<p>A utility class for defining one-off page routes in terms of callbacks.<\/p>\n<p>Callers must define the <a href=\"widgets\/PageRouteBuilder\/pageBuilder.html\">pageBuilder<\/a> function which creates the route's\nprimary contents. To add transitions define the <a href=\"widgets\/PageRouteBuilder\/transitionsBuilder.html\">transitionsBuilder<\/a> function.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "PageRouteBuilder"
}