{
    "desc": "<p>A range of characters in a string of text.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "services\/TextRange-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "services",
    "name": "services.TextRange",
    "shortname": "TextRange",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a text range.<\/p>\n<p>The <code>start<\/code> and <code>end<\/code> arguments must not be null. Both the <code>start<\/code> and\n<code>end<\/code> must either be greater than or equal to zero or both exactly -1.<\/p>\n<p>Instead of creating an empty text range, consider using the <a href=\"services\/TextRange\/empty-constant.html\">empty<\/a>\nconstant.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextRange({\n  @required this.start,\n  @required this.end,\n}) : assert(start != null &amp;&amp; start &gt;= -1),\n     assert(end != null &amp;&amp; end &gt;= -1);<\/code><\/pre>\n    ",
            "href": "services\/TextRange\/TextRange.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "services.TextRange",
            "params": [
                {
                    "name": "end",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "start",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>The text after this range.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String textAfter(String text) {\n  assert(isNormalized);\n  return text.substring(end);\n}<\/code><\/pre>\n    ",
            "href": "services\/TextRange\/textAfter.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.TextRange",
            "params": [
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>The text before this range.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String textBefore(String text) {\n  assert(isNormalized);\n  return text.substring(0, start);\n}<\/code><\/pre>\n    ",
            "href": "services\/TextRange\/textBefore.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.TextRange",
            "params": [
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>The text inside this range.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String textInside(String text) {\n  assert(isNormalized);\n  return text.substring(start, end);\n}<\/code><\/pre>\n    ",
            "href": "services\/TextRange\/textInside.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.TextRange",
            "params": [
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'TextRange(start: $start, end: $end)';<\/code><\/pre>\n    ",
            "href": "services\/TextRange\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "services.TextRange",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The next index after the characters in this range.<\/p>\n<p>If <a href=\"services\/TextRange\/start.html\">start<\/a> and <a href=\"services\/TextRange\/end.html\">end<\/a> are both -1, the text range is empty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int end\n\n<\/code><\/pre>\n        ",
            "href": "services\/TextRange\/end.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "services.TextRange",
            "params": []
        },
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextRange\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextRange\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(\n  start.hashCode,\n  end.hashCode,\n);<\/code><\/pre>\n        ",
            "href": "services\/TextRange\/hashCode.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "services.TextRange",
            "params": []
        },
        {
            "desc": "<p>Whether this range is empty (but still potentially placed inside the text).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCollapsed =&gt; start == end;<\/code><\/pre>\n        ",
            "href": "services\/TextRange\/isCollapsed.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.TextRange",
            "params": []
        },
        {
            "desc": "<p>Whether the start of this range precedes the end.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNormalized =&gt; end &gt;= start;<\/code><\/pre>\n        ",
            "href": "services\/TextRange\/isNormalized.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.TextRange",
            "params": []
        },
        {
            "desc": "<p>Whether this range represents a valid position in the text.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isValid =&gt; start &gt;= 0 &amp;&amp; end &gt;= 0;<\/code><\/pre>\n        ",
            "href": "services\/TextRange\/isValid.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "services.TextRange",
            "params": []
        },
        {
            "desc": "<p>The index of the first character in the range.<\/p>\n<p>If <a href=\"services\/TextRange\/start.html\">start<\/a> and <a href=\"services\/TextRange\/end.html\">end<\/a> are both -1, the text range is empty.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int start\n\n<\/code><\/pre>\n        ",
            "href": "services\/TextRange\/start.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "services.TextRange",
            "params": []
        }
    ]
}