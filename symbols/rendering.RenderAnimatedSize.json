{
    "desc": "<p>A render object that animates its size to its child's size over a given\n<a href=\"rendering\/RenderAnimatedSize\/duration.html\">duration<\/a> and with a given <a href=\"rendering\/RenderAnimatedSize\/curve.html\">curve<\/a>. If the child's size itself animates\n(i.e. if it changes size two frames in a row, as opposed to abruptly\nchanging size in one frame then remaining that size in subsequent frames),\nthis render object sizes itself to fit the child instead of animating\nitself.<\/p>\n<p>When the child overflows the current animated size of this render object, it\nis clipped.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "rendering\/RenderAnimatedSize-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "rendering",
    "name": "rendering.RenderAnimatedSize",
    "shortname": "RenderAnimatedSize",
    "extends": [
        "rendering.RenderAligningShiftedBox",
        "rendering.RenderShiftedBox",
        "rendering.RenderBox",
        "rendering.RenderObject",
        "foundation.AbstractNode",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a render object that animates its size to match its child.\nThe <code>duration<\/code> and <code>curve<\/code> arguments define the animation.<\/p>\n<p>The <code>alignment<\/code> argument is used to align the child when the parent is not\n(yet) the same size as the child.<\/p>\n<p>The <code>duration<\/code> is required.<\/p>\n<p>The <code>vsync<\/code> should specify a <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> for the animation\ncontroller.<\/p>\n<p>The arguments <code>duration<\/code>, <code>curve<\/code>, <code>alignment<\/code>, and <code>vsync<\/code> must\nnot be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderAnimatedSize({\n  @required TickerProvider vsync,\n  @required Duration duration,\n  Curve curve = Curves.linear,\n  AlignmentGeometry alignment = Alignment.center,\n  TextDirection textDirection,\n  RenderBox child,\n}) : assert(vsync != null),\n     assert(duration != null),\n     assert(curve != null),\n     _vsync = vsync,\n     super(child: child, alignment: alignment, textDirection: textDirection) {\n  _controller = AnimationController(\n    vsync: vsync,\n    duration: duration,\n  )..addListener(() {\n    if (_controller.value != _lastValue)\n      markNeedsLayout();\n  });\n  _animation = CurvedAnimation(\n    parent: _controller,\n    curve: curve,\n  );\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAnimatedSize\/RenderAnimatedSize.html",
            "isDeprecated": false,
            "type": "",
            "name": "RenderAnimatedSize",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": [
                {
                    "name": "alignment",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "painting.AlignmentGeometry"
                },
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "rendering.RenderBox"
                },
                {
                    "name": "curve",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "animation.Curve"
                },
                {
                    "name": "duration",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "textDirection",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.TextDirection"
                },
                {
                    "name": "vsync",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "scheduler.TickerProvider"
                }
            ]
        },
        {
            "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"foundation\/AbstractNode\/parent.html\">parent<\/a>'s <a href=\"rendering\/RenderAnimatedSize\/detach.html\">detach<\/a>, and by the <a href=\"rendering\/RenderObject\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"rendering\/RenderAnimatedSize\/detach.html\">detach<\/a> method, and then <a href=\"rendering\/RenderAnimatedSize\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  _controller.stop();\n  super.detach();\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAnimatedSize\/detach.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        },
        {
            "desc": "<p>Paint this render object into the given context at the given offset.<\/p>\n<p>Subclasses should override this method to provide a visual appearance\nfor themselves. The render object's local coordinate system is\naxis-aligned with the coordinate system of the context's canvas and the\nrender object's local origin (i.e, x=0 and y=0) is placed at the given\noffset in the context's canvas.<\/p>\n<p>Do not call this function directly. If you wish to paint yourself, call\n<a href=\"rendering\/RenderObject\/markNeedsPaint.html\">markNeedsPaint<\/a> instead to schedule a call to this function. If you wish\nto paint one of your children, call <a href=\"rendering\/PaintingContext\/paintChild.html\">PaintingContext.paintChild<\/a> on the\ngiven <code>context<\/code>.<\/p>\n<p>When painting one of your children (via a paint child function on the\ngiven context), the current canvas held by the context might change\nbecause draw operations before and after painting children might need to\nbe recorded on separate compositing layers.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(PaintingContext context, Offset offset) {\n  if (child != null &amp;&amp; _hasVisualOverflow) {\n    final Rect rect = Offset.zero &amp; size;\n    context.pushClipRect(needsCompositing, offset, rect, super.paint);\n  } else {\n    super.paint(context, offset);\n  }\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAnimatedSize\/paint.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "paint",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": [
                {
                    "name": "context",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "rendering.PaintingContext"
                },
                {
                    "name": "offset",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Offset"
                }
            ]
        },
        {
            "desc": "<p>Do the work of computing the layout for this render object.<\/p>\n<p>Do not call this function directly: call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> instead. This function\nis called by <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> when there is actually work to be done by this\nrender object during layout. The layout constraints provided by your\nparent are available via the <a href=\"rendering\/RenderBox\/constraints.html\">constraints<\/a> getter.<\/p>\n<p>If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is true, then this function should not actually change\nthe dimensions of this render object. Instead, that work should be done by\n<a href=\"rendering\/RenderBox\/performResize.html\">performResize<\/a>. If <a href=\"rendering\/RenderObject\/sizedByParent.html\">sizedByParent<\/a> is false, then this function should\nboth change the dimensions of this render object and instruct its children\nto layout.<\/p>\n<p>In implementing this function, you must call <a href=\"rendering\/RenderObject\/layout.html\">layout<\/a> on each of your\nchildren, passing true for parentUsesSize if your layout information is\ndependent on your child's layout information. Passing true for\nparentUsesSize ensures that this render object will undergo layout if the\nchild undergoes layout. Otherwise, the child can change its layout\ninformation without informing this render object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid performLayout() {\n  _lastValue = _controller.value;\n  _hasVisualOverflow = false;\n\n  if (child == null || constraints.isTight) {\n    _controller.stop();\n    size = _sizeTween.begin = _sizeTween.end = constraints.smallest;\n    _state = RenderAnimatedSizeState.start;\n    child?.layout(constraints);\n    return;\n  }\n\n  child.layout(constraints, parentUsesSize: true);\n\n  assert(_state != null);\n  switch (_state) {\n    case RenderAnimatedSizeState.start:\n      _layoutStart();\n      break;\n    case RenderAnimatedSizeState.stable:\n      _layoutStable();\n      break;\n    case RenderAnimatedSizeState.changed:\n      _layoutChanged();\n      break;\n    case RenderAnimatedSizeState.unstable:\n      _layoutUnstable();\n      break;\n  }\n\n  size = constraints.constrain(_animatedSize);\n  alignChild();\n\n  if (size.width &lt; _sizeTween.end.width ||\n      size.height &lt; _sizeTween.end.height)\n    _hasVisualOverflow = true;\n}<\/code><\/pre>\n    ",
            "href": "rendering\/RenderAnimatedSize\/performLayout.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "performLayout",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The curve of the animation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Curve get curve =&gt; _animation.curve;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAnimatedSize\/curve.html",
            "name": "curve",
            "isDeprecated": false,
            "type": "animation.Curve",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        },
        {
            "desc": "<p>The duration of the animation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get duration =&gt; _controller.duration;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAnimatedSize\/duration.html",
            "name": "duration",
            "isDeprecated": false,
            "type": "dart:core.Duration",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        },
        {
            "desc": "<p>Whether the size is being currently animated towards the child's size.<\/p>\n<p>See <a href=\"rendering\/RenderAnimatedSizeState-class.html\">RenderAnimatedSizeState<\/a> for situations when we may not be animating\nthe size.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAnimating =&gt; _controller.isAnimating;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAnimatedSize\/isAnimating.html",
            "name": "isAnimating",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        },
        {
            "desc": "<p>The state this size animation is in.<\/p>\n<p>See <a href=\"rendering\/RenderAnimatedSizeState-class.html\">RenderAnimatedSizeState<\/a> for possible states.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nRenderAnimatedSizeState get state =&gt; _state;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAnimatedSize\/state.html",
            "name": "state",
            "isDeprecated": false,
            "type": "rendering.RenderAnimatedSizeState",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        },
        {
            "desc": "<p>The <a href=\"scheduler\/TickerProvider-class.html\">TickerProvider<\/a> for the <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> that runs the animation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TickerProvider get vsync =&gt; _vsync;<\/code><\/pre>\n        ",
            "href": "rendering\/RenderAnimatedSize\/vsync.html",
            "name": "vsync",
            "isDeprecated": false,
            "type": "scheduler.TickerProvider",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "rendering.RenderAnimatedSize",
            "params": []
        }
    ]
}