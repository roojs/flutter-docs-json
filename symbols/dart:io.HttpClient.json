{
    "name": "dart:io.HttpClient",
    "extends": [],
    "memberOf": "dart:io",
    "events": [],
    "methods": [
        {
            "name": "HttpClient",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "context",
                    "type": "dart:io.SecurityContext",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-io\/HttpClient\/HttpClient.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HttpClient({SecurityContext context}) {\n  HttpOverrides overrides = HttpOverrides.current;\n  if (overrides == null) {\n    return new _HttpClient(context);\n  }\n  return overrides.createHttpClient(context);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "addCredentials",
            "type": "",
            "desc": "<p>Add credentials to be used for authorizing HTTP requests.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "realm",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "credentials",
                    "type": "dart:io.HttpClientCredentials",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/addCredentials.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addCredentials(Uri url, String realm, HttpClientCredentials credentials);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addProxyCredentials",
            "type": "",
            "desc": "<p>Add credentials to be used for authorizing HTTP proxies.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "realm",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "credentials",
                    "type": "dart:io.HttpClientCredentials",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/addProxyCredentials.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addProxyCredentials(\n    String host, int port, String realm, HttpClientCredentials credentials);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "close",
            "type": "",
            "desc": "<p>Shuts down the HTTP client.<\/p>\n<p>If <code>force<\/code> is <code>false<\/code> (the default) the <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a> will be kept alive\nuntil all active connections are done. If <code>force<\/code> is <code>true<\/code> any active\nconnections will be closed to immediately release all resources. These\nclosed connections will receive an error event to indicate that the client\nwas shut down. In both cases trying to establish a new connection after\ncalling <a href=\"dart-io\/HttpClient\/close.html\">close<\/a> will throw an exception.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "force",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/close.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close({bool force: false});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "delete",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the DELETE method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/delete.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; delete(String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "deleteUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the DELETE method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/deleteUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; deleteUrl(Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "findProxyFromEnvironment",
            "type": "dart:core.String",
            "desc": "<p>Function for resolving the proxy server to be used for a HTTP\nconnection from the proxy configuration specified through\nenvironment variables.<\/p>\n<p>The following environment variables are taken into account:<\/p>\n<pre class=\"language-dart\"><code>http_proxy\nhttps_proxy\nno_proxy\nHTTP_PROXY\nHTTPS_PROXY\nNO_PROXY\n<\/code><\/pre>\n<p><code>http_proxy<\/code> and <code>HTTP_PROXY<\/code> specify the proxy server to use for\nhttp:\/\/ urls. Use the format <code>hostname:port<\/code>. If no port is used a\ndefault of 1080 will be used. If both are set the lower case one takes\nprecedence.<\/p>\n<p><code>https_proxy<\/code> and <code>HTTPS_PROXY<\/code> specify the proxy server to use for\nhttps:\/\/ urls. Use the format <code>hostname:port<\/code>. If no port is used a\ndefault of 1080 will be used. If both are set the lower case one takes\nprecedence.<\/p>\n<p><code>no_proxy<\/code> and <code>NO_PROXY<\/code> specify a comma separated list of\npostfixes of hostnames for which not to use the proxy\nserver. E.g. the value \"localhost,127.0.0.1\" will make requests\nto both \"localhost\" and \"127.0.0.1\" not use a proxy. If both are set\nthe lower case one takes precedence.<\/p>\n<p>To activate this way of resolving proxies assign this function to\nthe <a href=\"dart-io\/HttpClient\/findProxy.html\">findProxy<\/a> property on the <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.findProxy = HttpClient.findProxyFromEnvironment;\n<\/code><\/pre>\n<p>If you don't want to use the system environment you can use a\ndifferent one by wrapping the function.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.findProxy = (url) {\n  return HttpClient.findProxyFromEnvironment(\n      url, environment: {\"http_proxy\": ..., \"no_proxy\": ...});\n}\n<\/code><\/pre>\n<p>If a proxy requires authentication it is possible to configure\nthe username and password as well. Use the format\n<code>username:password@hostname:port<\/code> to include the username and\npassword. Alternatively the API <a href=\"dart-io\/HttpClient\/addProxyCredentials.html\">addProxyCredentials<\/a> can be used\nto set credentials for proxies which require authentication.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "environment",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/findProxyFromEnvironment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String findProxyFromEnvironment(Uri url,\n    {Map&lt;String, String&gt; environment}) {\n  HttpOverrides overrides = HttpOverrides.current;\n  if (overrides == null) {\n    return _HttpClient._findProxyFromEnvironment(url, environment);\n  }\n  return overrides.findProxyFromEnvironment(url, environment);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "get",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the GET method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using\n<code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/get.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; get(String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "getUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the GET method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/getUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; getUrl(Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "head",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the HEAD method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/head.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; head(String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "headUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the HEAD method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/headUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; headUrl(Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "open",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection.<\/p>\n<p>The HTTP method to use is specified in <code>method<\/code>, the server is\nspecified using <code>host<\/code> and <code>port<\/code>, and the path (including\na possible query) is specified using <code>path<\/code>.\nThe path may also contain a URI fragment, which will be ignored.<\/p>\n<p>The <code>Host<\/code> header for the request will be set to the value <code>host<\/code>:<code>port<\/code>\n(if <code>host<\/code> is an IP address, it will still be used in the <code>Host<\/code> header).\nThis can be overridden through the <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> interface before\nthe request is sent.<\/p>\n<p>For additional information on the sequence of events during an\nHTTP transaction, and the objects returned by the futures, see\nthe overall documentation for the class <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/open.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; open(\n    String method, String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "openUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection.<\/p>\n<p>The HTTP method is specified in <code>method<\/code> and the URL to use in\n<code>url<\/code>.<\/p>\n<p>The <code>Host<\/code> header for the request will be set to the value\n<a href=\"dart-core\/Uri\/host.html\">Uri.host<\/a>:<a href=\"dart-core\/Uri\/port.html\">Uri.port<\/a> from <code>url<\/code> (if <code>url.host<\/code> is an IP address, it will\nstill be used in the <code>Host<\/code> header). This can be overridden through the\n<a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> interface before the request is sent.<\/p>\n<p>For additional information on the sequence of events during an\nHTTP transaction, and the objects returned by the futures, see\nthe overall documentation for the class <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/openUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; openUrl(String method, Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "patch",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the PATCH method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/patch.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; patch(String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "patchUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the PATCH method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/patchUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; patchUrl(Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "post",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the POST method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using\n<code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/post.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; post(String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "postUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the POST method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/postUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; postUrl(Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "put",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the PUT method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/put.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; put(String host, int port, String path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        },
        {
            "name": "putUrl",
            "type": "dart:async.Future<dart:io.HttpClientRequest>",
            "desc": "<p>Opens a HTTP connection using the PUT method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.HttpClient",
            "sig": "",
            "params": [
                {
                    "name": "url",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/HttpClient\/putUrl.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; putUrl(Uri url);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.HttpClientRequest"
            ]
        }
    ],
    "props": [
        {
            "type": "",
            "href": "dart-io\/HttpClient\/DEFAULT_HTTPS_PORT-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_HTTPS_PORT = defaultHttpsPort\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "DEFAULT_HTTPS_PORT",
            "memberOf": "dart:io.HttpClient"
        },
        {
            "type": "",
            "href": "dart-io\/HttpClient\/DEFAULT_HTTP_PORT-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_HTTP_PORT = defaultHttpPort\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "DEFAULT_HTTP_PORT",
            "memberOf": "dart:io.HttpClient"
        },
        {
            "name": "authenticate",
            "type": "",
            "types": [],
            "desc": "<p>Sets the function to be called when a site is requesting\nauthentication. The URL requested and the security realm from the\nserver are passed in the arguments <code>url<\/code> and <code>realm<\/code>.<\/p>\n<p>The function returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which should complete when the\nauthentication has been resolved. If credentials cannot be\nprovided the <a href=\"dart-async\/Future-class.html\">Future<\/a> should complete with <code>false<\/code>. If\ncredentials are available the function should add these using\n<a href=\"dart-io\/HttpClient\/addCredentials.html\">addCredentials<\/a> before completing the <a href=\"dart-async\/Future-class.html\">Future<\/a> with the value\n<code>true<\/code>.<\/p>\n<p>If the <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with <code>true<\/code> the request will be retried\nusing the updated credentials, however, the retried request will not\ncarry the original request payload. Otherwise response processing will\ncontinue normally.<\/p>\n<p>If it is known that the remote server requires authentication for all\nrequests, it is advisable to use <a href=\"dart-io\/HttpClient\/addCredentials.html\">addCredentials<\/a> directly, or manually\nset the <code>'authorization'<\/code> header on the request to avoid the overhead\nof a failed request, or issues due to missing request payload on retried\nrequest.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/authenticate.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set authenticate(Future&lt;bool&gt; f(Uri url, String scheme, String realm));<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "authenticateProxy",
            "type": "",
            "types": [],
            "desc": "<p>Sets the function to be called when a proxy is requesting\nauthentication. Information on the proxy in use and the security\nrealm for the authentication are passed in the arguments <code>host<\/code>,\n<code>port<\/code> and <code>realm<\/code>.<\/p>\n<p>The function returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which should complete when the\nauthentication has been resolved. If credentials cannot be\nprovided the <a href=\"dart-async\/Future-class.html\">Future<\/a> should complete with <code>false<\/code>. If\ncredentials are available the function should add these using\n<a href=\"dart-io\/HttpClient\/addProxyCredentials.html\">addProxyCredentials<\/a> before completing the <a href=\"dart-async\/Future-class.html\">Future<\/a> with the value\n<code>true<\/code>.<\/p>\n<p>If the <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with <code>true<\/code> the request will be retried\nusing the updated credentials. Otherwise response processing will\ncontinue normally.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/authenticateProxy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set authenticateProxy(\n    Future&lt;bool&gt; f(String host, int port, String scheme, String realm));<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "autoUncompress",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Gets and sets whether the body of a response will be automatically\nuncompressed.<\/p>\n<p>The body of an HTTP response can be compressed. In most\nsituations providing the un-compressed body is most\nconvenient. Therefore the default behavior is to un-compress the\nbody. However in some situations (e.g. implementing a transparent\nproxy) keeping the uncompressed stream is required.<\/p>\n<p>NOTE: Headers in the response are never modified. This means\nthat when automatic un-compression is turned on the value of the\nheader <code>Content-Length<\/code> will reflect the length of the original\ncompressed body. Likewise the header <code>Content-Encoding<\/code> will also\nhave the original value indicating compression.<\/p>\n<p>NOTE: Automatic un-compression is only performed if the\n<code>Content-Encoding<\/code> header value is <code>gzip<\/code>.<\/p>\n<p>This value affects all responses produced by this client after the\nvalue is changed.<\/p>\n<p>To disable, set to <code>false<\/code>.<\/p>\n<p>Default is <code>true<\/code>.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/autoUncompress.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool autoUncompress\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "badCertificateCallback",
            "type": "",
            "types": [],
            "desc": "<p>Sets a callback that will decide whether to accept a secure connection\nwith a server certificate that cannot be authenticated by any of our\ntrusted root certificates.<\/p>\n<p>When an secure HTTP request if made, using this HttpClient, and the\nserver returns a server certificate that cannot be authenticated, the\ncallback is called asynchronously with the <a href=\"dart-io\/X509Certificate-class.html\">X509Certificate<\/a> object and\nthe server's hostname and port.  If the value of <a href=\"dart-io\/HttpClient\/badCertificateCallback.html\">badCertificateCallback<\/a>\nis <code>null<\/code>, the bad certificate is rejected, as if the callback\nreturned <code>false<\/code><\/p>\n<p>If the callback returns true, the secure connection is accepted and the\n<code>Future&lt;HttpClientRequest&gt;<\/code> that was returned from the call making the\nrequest completes with a valid HttpRequest object. If the callback returns\nfalse, the <code>Future&lt;HttpClientRequest&gt;<\/code> completes with an exception.<\/p>\n<p>If a bad certificate is received on a connection attempt, the library calls\nthe function that was the value of badCertificateCallback at the time\nthe request is made, even if the value of badCertificateCallback\nhas changed since then.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/badCertificateCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set badCertificateCallback(\n    bool callback(X509Certificate cert, String host, int port));<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "connectionTimeout",
            "type": "dart:core.Duration",
            "types": [],
            "desc": "<p>Gets and sets the connection timeout.<\/p>\n<p>When connecting to a new host exceeds this timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a>\nis thrown. The timeout applies only to connections initiated after the\ntimeout is set.<\/p>\n<p>When this is <code>null<\/code>, the OS default timeout is used. The default is\n<code>null<\/code>.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/connectionTimeout.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration connectionTimeout\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-io\/HttpClient\/defaultHttpPort-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultHttpPort = 80\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "defaultHttpPort",
            "memberOf": "dart:io.HttpClient"
        },
        {
            "type": "",
            "href": "dart-io\/HttpClient\/defaultHttpsPort-constant.html",
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultHttpsPort = 443\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "defaultHttpsPort",
            "memberOf": "dart:io.HttpClient"
        },
        {
            "name": "findProxy",
            "type": "",
            "types": [],
            "desc": "<p>Sets the function used to resolve the proxy server to be used for\nopening a HTTP connection to the specified <code>url<\/code>. If this\nfunction is not set, direct connections will always be used.<\/p>\n<p>The string returned by <code>f<\/code> must be in the format used by browser\nPAC (proxy auto-config) scripts. That is either<\/p>\n<pre class=\"language-dart\"><code>\"DIRECT\"\n<\/code><\/pre>\n<p>for using a direct connection or<\/p>\n<pre class=\"language-dart\"><code>\"PROXY host:port\"\n<\/code><\/pre>\n<p>for using the proxy server <code>host<\/code> on port <code>port<\/code>.<\/p>\n<p>A configuration can contain several configuration elements\nseparated by semicolons, e.g.<\/p>\n<pre class=\"language-dart\"><code>\"PROXY host:port; PROXY host2:port2; DIRECT\"\n<\/code><\/pre>\n<p>The static function <a href=\"dart-io\/HttpClient\/findProxyFromEnvironment.html\">findProxyFromEnvironment<\/a> on this class can\nbe used to implement proxy server resolving based on environment\nvariables.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/findProxy.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set findProxy(String f(Uri url));<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "idleTimeout",
            "type": "dart:core.Duration",
            "types": [],
            "desc": "<p>Gets and sets the idle timeout of non-active persistent (keep-alive)\nconnections.<\/p>\n<p>The default value is 15 seconds.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/idleTimeout.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration idleTimeout\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "maxConnectionsPerHost",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Gets and sets the maximum number of live connections, to a single host.<\/p>\n<p>Increasing this number may lower performance and take up unwanted\nsystem resources.<\/p>\n<p>To disable, set to <code>null<\/code>.<\/p>\n<p>Default is <code>null<\/code>.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/maxConnectionsPerHost.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maxConnectionsPerHost\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "userAgent",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Gets and sets the default value of the <code>User-Agent<\/code> header for all requests\ngenerated by this <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n<p>The default value is <code>Dart\/&lt;version&gt; (dart:io)<\/code>.<\/p>\n<p>If the userAgent is set to <code>null<\/code>, no default <code>User-Agent<\/code> header will be\nadded to each request.<\/p>\n        ",
            "memberOf": "dart:io.HttpClient",
            "isConstant": false,
            "href": "dart-io\/HttpClient\/userAgent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String userAgent\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-io\/HttpClient-class.html",
    "desc": "<p>A client that receives content, such as web pages, from\na server using the HTTP protocol.<\/p>\n<p>HttpClient contains a number of methods to send an <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a>\nto an Http server and receive an <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> back.\nFor example, you can use the <a href=\"dart-io\/HttpClient\/get.html\">get<\/a>, <a href=\"dart-io\/HttpClient\/getUrl.html\">getUrl<\/a>, <a href=\"dart-io\/HttpClient\/post.html\">post<\/a>, and <a href=\"dart-io\/HttpClient\/postUrl.html\">postUrl<\/a> methods\nfor GET and POST requests, respectively.<\/p>\n<h2 id=\"making-a-simple-get-request-an-example\">Making a simple GET request: an example<\/h2>\n<p>A <code>getUrl<\/code> request is a two-step process, triggered by two <a href=\"dart-async\/Future-class.html\">Future<\/a>s.\nWhen the first future completes with a <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a>, the underlying\nnetwork connection has been established, but no data has been sent.\nIn the callback function for the first future, the HTTP headers and body\ncan be set on the request. Either the first write to the request object\nor a call to <a href=\"dart-io\/HttpClient\/close.html\">close<\/a> sends the request to the server.<\/p>\n<p>When the HTTP response is received from the server,\nthe second future, which is returned by close,\ncompletes with an <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> object.\nThis object provides access to the headers and body of the response.\nThe body is available as a stream implemented by HttpClientResponse.\nIf a body is present, it must be read. Otherwise, it leads to resource\nleaks. Consider using <a href=\"dart-async\/Stream\/drain.html\">HttpClientResponse.drain<\/a> if the body is unused.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.getUrl(Uri.parse(\"http:\/\/www.example.com\/\"))\n    .then((HttpClientRequest request) {\n      \/\/ Optionally set up headers...\n      \/\/ Optionally write to the request object...\n      \/\/ Then call close.\n      ...\n      return request.close();\n    })\n    .then((HttpClientResponse response) {\n      \/\/ Process the response.\n      ...\n    });\n<\/code><\/pre>\n<p>The future for <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> is created by methods such as\n<a href=\"dart-io\/HttpClient\/getUrl.html\">getUrl<\/a> and <a href=\"dart-io\/HttpClient\/open.html\">open<\/a>.<\/p>\n<h2 id=\"https-connections\">HTTPS connections<\/h2>\n<p>An HttpClient can make HTTPS requests, connecting to a server using\nthe TLS (SSL) secure networking protocol. Calling <a href=\"dart-io\/HttpClient\/getUrl.html\">getUrl<\/a> with an\nhttps: scheme will work automatically, if the server's certificate is\nsigned by a root CA (certificate authority) on the default list of\nwell-known trusted CAs, compiled by Mozilla.<\/p>\n<p>To add a custom trusted certificate authority, or to send a client\ncertificate to servers that request one, pass a <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> object\nas the optional <code>context<\/code> argument to the <code>HttpClient<\/code> constructor.\nThe desired security options can be set on the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> object.<\/p>\n<h2 id=\"headers\">Headers<\/h2>\n<p>All HttpClient requests set the following header by default:<\/p>\n<pre class=\"language-dart\"><code>Accept-Encoding: gzip\n<\/code><\/pre>\n<p>This allows the HTTP server to use gzip compression for the body if\npossible. If this behavior is not desired set the\n<code>Accept-Encoding<\/code> header to something else.\nTo turn off gzip compression of the response, clear this header:<\/p>\n<pre class=\"language-dart\"><code> request.headers.removeAll(HttpHeaders.acceptEncodingHeader)\n<\/code><\/pre>\n<h2 id=\"closing-the-httpclient\">Closing the HttpClient<\/h2>\n<p>The HttpClient supports persistent connections and caches network\nconnections to reuse them for multiple requests whenever\npossible. This means that network connections can be kept open for\nsome time after a request has completed. Use HttpClient.close\nto force the HttpClient object to shut down and to close the idle\nnetwork connections.<\/p>\n<h2 id=\"turning-proxies-on-and-off\">Turning proxies on and off<\/h2>\n<p>By default the HttpClient uses the proxy configuration available\nfrom the environment, see <a href=\"dart-io\/HttpClient\/findProxyFromEnvironment.html\">findProxyFromEnvironment<\/a>. To turn off\nthe use of proxies set the <a href=\"dart-io\/HttpClient\/findProxy.html\">findProxy<\/a> property to\n<code>null<\/code>.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.findProxy = null;\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "HttpClient"
}