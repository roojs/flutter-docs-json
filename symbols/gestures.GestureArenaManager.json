{
    "name": "gestures.GestureArenaManager",
    "extends": [],
    "memberOf": "gestures",
    "events": [],
    "methods": [
        {
            "name": "GestureArenaManager",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "gestures.GestureArenaManager",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "gestures\/GestureArenaManager\/GestureArenaManager.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "gestures.GestureArenaEntry",
            "desc": "<p>Adds a new member (e.g., gesture recognizer) to the arena.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureArenaManager",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "member",
                    "type": "gestures.GestureArenaMember",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureArenaManager\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GestureArenaEntry add(int pointer, GestureArenaMember member) {\n  final _GestureArena state = _arenas.putIfAbsent(pointer, () {\n    assert(_debugLogDiagnostic(pointer, '\u2605 Opening new gesture arena.'));\n    return _GestureArena();\n  });\n  state.add(member);\n  assert(_debugLogDiagnostic(pointer, 'Adding: $member'));\n  return GestureArenaEntry._(this, pointer, member);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "close",
            "type": "",
            "desc": "<p>Prevents new members from entering the arena.<\/p>\n<p>Called after the framework has finished dispatching the pointer down event.<\/p>\n    ",
            "static": false,
            "memberOf": "gestures.GestureArenaManager",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureArenaManager\/close.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  state.isOpen = false;\n  assert(_debugLogDiagnostic(pointer, 'Closing', state));\n  _tryToResolveArena(pointer, state);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "hold",
            "type": "",
            "desc": "<p>Prevents the arena from being swept.<\/p>\n<p>Typically, a winner is chosen in an arena after all the other\n<a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a> processing by <a href=\"gestures\/GestureArenaManager\/sweep.html\">sweep<\/a>. If a recognizer wishes to delay\nresolving an arena past <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>, the recognizer can <a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a> the\narena open using this function. To release such a hold and let the arena\nresolve, call <a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"gestures\/GestureArenaManager\/sweep.html\">sweep<\/a><\/li>\n<li><a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a><\/li>\n<\/ul>",
            "static": false,
            "memberOf": "gestures.GestureArenaManager",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureArenaManager\/hold.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hold(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  state.isHeld = true;\n  assert(_debugLogDiagnostic(pointer, 'Holding', state));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "release",
            "type": "",
            "desc": "<p>Releases a hold, allowing the arena to be swept.<\/p>\n<p>If a sweep was attempted on a held arena, the sweep will be done\non release.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"gestures\/GestureArenaManager\/sweep.html\">sweep<\/a><\/li>\n<li><a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a><\/li>\n<\/ul>",
            "static": false,
            "memberOf": "gestures.GestureArenaManager",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureArenaManager\/release.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void release(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  state.isHeld = false;\n  assert(_debugLogDiagnostic(pointer, 'Releasing', state));\n  if (state.hasPendingSweep)\n    sweep(pointer);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "sweep",
            "type": "",
            "desc": "<p>Forces resolution of the arena, giving the win to the first member.<\/p>\n<p>Sweep is typically after all the other processing for a <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>\nhave taken place. It ensures that multiple passive gestures do not cause a\nstalemate that prevents the user from interacting with the app.<\/p>\n<p>Recognizers that wish to delay resolving an arena past <a href=\"gestures\/PointerUpEvent-class.html\">PointerUpEvent<\/a>\nshould call <a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a> to delay sweep until <a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a> is called.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"gestures\/GestureArenaManager\/hold.html\">hold<\/a><\/li>\n<li><a href=\"gestures\/GestureArenaManager\/release.html\">release<\/a><\/li>\n<\/ul>",
            "static": false,
            "memberOf": "gestures.GestureArenaManager",
            "sig": "",
            "params": [
                {
                    "name": "pointer",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "gestures\/GestureArenaManager\/sweep.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sweep(int pointer) {\n  final _GestureArena state = _arenas[pointer];\n  if (state == null)\n    return; \/\/ This arena either never existed or has been resolved.\n  assert(!state.isOpen);\n  if (state.isHeld) {\n    state.hasPendingSweep = true;\n    assert(_debugLogDiagnostic(pointer, 'Delaying sweep', state));\n    return; \/\/ This arena is being held for a long-lived member.\n  }\n  assert(_debugLogDiagnostic(pointer, 'Sweeping', state));\n  _arenas.remove(pointer);\n  if (state.members.isNotEmpty) {\n    \/\/ First member wins.\n    assert(_debugLogDiagnostic(pointer, 'Winner: ${state.members.first}'));\n    state.members.first.acceptGesture(pointer);\n    \/\/ Give all the other members the bad news.\n    for (int i = 1; i &lt; state.members.length; i++)\n      state.members[i].rejectGesture(pointer);\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "gestures\/GestureArenaManager-class.html",
    "desc": "<p>The first member to accept or the last member to not reject wins.<\/p>\n<p>See <a href=\"https:\/\/flutter.io\/gestures\/#gesture-disambiguation\">flutter.io\/gestures\/#gesture-disambiguation<\/a> for more\ninformation about the role this class plays in the gesture system.<\/p>\n<p>To debug problems with gestures, consider using\n<a href=\"gestures\/debugPrintGestureArenaDiagnostics.html\">debugPrintGestureArenaDiagnostics<\/a>.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "GestureArenaManager"
}