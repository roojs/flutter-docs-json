{
    "desc": "<p>A controller for an editable text field.<\/p>\n<p>Whenever the user modifies a text field with an associated\n<a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>, the text field updates <a href=\"foundation\/ValueNotifier\/value.html\">value<\/a> and the controller\nnotifies its listeners. Listeners can then read the <a href=\"widgets\/TextEditingController\/text.html\">text<\/a> and <a href=\"widgets\/TextEditingController\/selection.html\">selection<\/a>\nproperties to learn what the user has typed or how the selection has been\nupdated.<\/p>\n<p>Similarly, if you modify the <a href=\"widgets\/TextEditingController\/text.html\">text<\/a> or <a href=\"widgets\/TextEditingController\/selection.html\">selection<\/a> properties, the text\nfield will be notified and will update itself appropriately.<\/p>\n<p>A <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a> can also be used to provide an initial value for a\ntext field. If you build a text field with a controller that already has\n<a href=\"widgets\/TextEditingController\/text.html\">text<\/a>, the text field will use that text as its initial value.<\/p>\n<p>The <a href=\"widgets\/TextEditingController\/text.html\">text<\/a> or <a href=\"widgets\/TextEditingController\/selection.html\">selection<\/a> properties can be set from within a listener\nadded to this controller. If both properties need to be changed then the\ncontroller's <a href=\"foundation\/ValueNotifier\/value.html\">value<\/a> should be set instead.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <script>var visibleSnippet1 = \"shortSnippet1\";<\/script><button id=\"shortSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('shortSnippet1', visibleSnippet1);\" selected>Sample<\/button>\n  <button id=\"longSnippet1Button\" onclick=\"visibleSnippet1 = showSnippet('longSnippet1', visibleSnippet1);\">Sample in an App<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\" id=\"shortSnippet1\">\n    <div class=\"snippet-description\">\nThis example creates a <a href=\"material\/TextField-class.html\">TextField<\/a> with a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a> whose\nchange listener forces the entered text to be lower case and keeps the\ncursor at the end of the input.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">final _controller = TextEditingController();\n\nvoid initState() {\n  _controller.addListener(() {\n    final text = _controller.text.toLowerCase();\n    _controller.value = _controller.value.copyWith(\n      text: text,\n      selection: TextSelection(baseOffset: text.length, extentOffset: text.length),\n      composing: TextRange.empty,\n    );\n  });\n  super.initState();\n}\n\nvoid dispose() {\n  _controller.dispose();\n  super.dispose();\n}\n\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Container(\n     alignment: Alignment.center,\n      padding: const EdgeInsets.all(6),\n      child: TextFormField(\n        controller: _controller,\n       decoration: InputDecoration(border: OutlineInputBorder()),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n  <div class=\"snippet\" id=\"longSnippet1\" hidden>\n    <div class=\"snippet-description\">To create a sample project with this code snippet, run:<br><span class=\"snippet-create-command\">flutter create --sample=widgets.TextEditingController.1 mysample<\/span>\n    <\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(visibleSnippet1);\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Flutter code sample for widgets.TextEditingController.1\n\n\/\/ This example creates a [TextField] with a [TextEditingController] whose\n\/\/ change listener forces the entered text to be lower case and keeps the\n\/\/ cursor at the end of the input.\n\nimport 'package:flutter\/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\n\/\/\/ This Widget is the main application widget.\nclass MyApp extends StatelessWidget {\n  static const String _title = 'Flutter Code Sample';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _title,\n      home: MyStatefulWidget(),\n    );\n  }\n}\n\nclass MyStatefulWidget extends StatefulWidget {\n  MyStatefulWidget({Key key}) : super(key: key);\n\n  @override\n  _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();\n}\n\nclass _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {\n  final _controller = TextEditingController();\n\n  void initState() {\n    _controller.addListener(() {\n      final text = _controller.text.toLowerCase();\n      _controller.value = _controller.value.copyWith(\n        text: text,\n        selection:\n            TextSelection(baseOffset: text.length, extentOffset: text.length),\n        composing: TextRange.empty,\n      );\n    });\n    super.initState();\n  }\n\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        alignment: Alignment.center,\n        padding: const EdgeInsets.all(6),\n        child: TextFormField(\n          controller: _controller,\n          decoration: InputDecoration(border: OutlineInputBorder()),\n        ),\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, which is a Material Design text field that can be controlled\nwith a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>.<\/li>\n<li>\n<a href=\"widgets\/EditableText-class.html\">EditableText<\/a>, which is a raw region of editable text that can be\ncontrolled with a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/TextEditingController-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "widgets",
    "name": "widgets.TextEditingController",
    "shortname": "TextEditingController",
    "extends": [
        "services.TextEditingValue",
        "foundation.ValueNotifier",
        "foundation.ChangeNotifier",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a controller for an editable text field.<\/p>\n<p>This constructor treats a null <code>text<\/code> argument as if it were the empty\nstring.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextEditingController({ String text })\n  : super(text == null ? TextEditingValue.empty : TextEditingValue(text: text));<\/code><\/pre>\n    ",
            "href": "widgets\/TextEditingController\/TextEditingController.html",
            "isDeprecated": false,
            "type": "",
            "name": "TextEditingController",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.TextEditingController",
            "params": [
                {
                    "name": "text",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Set the <a href=\"foundation\/ValueNotifier\/value.html\">value<\/a> to empty.<\/p>\n<p>After calling this function, <a href=\"widgets\/TextEditingController\/text.html\">text<\/a> will be the empty string and the\nselection will be invalid.<\/p>\n<p>Calling this will notify all the listeners of this <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>\nthat they need to update (it calls <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>). For this reason,\nthis method should only be called between frames, e.g. in response to user\nactions, not during the build, layout, or paint phases.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  value = TextEditingValue.empty;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextEditingController\/clear.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clear",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextEditingController",
            "params": []
        },
        {
            "desc": "<p>Set the composing region to an empty range.<\/p>\n<p>The composing region is the range of text that is still being composed.\nCalling this function indicates that the user is done composing that\nregion.<\/p>\n<p>Calling this will notify all the listeners of this <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>\nthat they need to update (it calls <a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>). For this reason,\nthis method should only be called between frames, e.g. in response to user\nactions, not during the build, layout, or paint phases.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clearComposing() {\n  value = value.copyWith(composing: TextRange.empty);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/TextEditingController\/clearComposing.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clearComposing",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.TextEditingController",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The currently selected <a href=\"widgets\/TextEditingController\/text.html\">text<\/a>.<\/p>\n<p>If the selection is collapsed, then this property gives the offset of the\ncursor within the text.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection get selection =&gt; value.selection;<\/code><\/pre>\n        ",
            "href": "widgets\/TextEditingController\/selection.html",
            "name": "selection",
            "isDeprecated": false,
            "type": "services.TextSelection",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.TextEditingController",
            "params": []
        },
        {
            "desc": "<p>The current string the user is editing.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get text =&gt; value.text;<\/code><\/pre>\n        ",
            "href": "widgets\/TextEditingController\/text.html",
            "name": "text",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "widgets.TextEditingController",
            "params": []
        }
    ]
}