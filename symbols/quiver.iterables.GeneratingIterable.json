{
    "name": "quiver.iterables.GeneratingIterable",
    "extends": [
        "dart:collection.IterableBase",
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "memberOf": "quiver.iterables",
    "events": [],
    "methods": [
        {
            "name": "GeneratingIterable",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "quiver.iterables.GeneratingIterable",
            "sig": "",
            "params": [
                {
                    "name": "initial",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "next",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "quiver.iterables\/GeneratingIterable\/GeneratingIterable.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GeneratingIterable(this.initial, this.next);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "initial",
            "type": "",
            "types": [],
            "desc": "",
            "memberOf": "quiver.iterables.GeneratingIterable",
            "isConstant": false,
            "href": "quiver.iterables\/GeneratingIterable\/initial.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final _Initial&lt;T&gt; initial\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iterator",
            "type": "dart:core.Iterator",
            "types": [],
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "memberOf": "quiver.iterables.GeneratingIterable",
            "isConstant": false,
            "href": "quiver.iterables\/GeneratingIterable\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterator&lt;T&gt; get iterator =&gt; new _GeneratingIterator(initial(), next);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "next",
            "type": "",
            "types": [],
            "desc": "",
            "memberOf": "quiver.iterables.GeneratingIterable",
            "isConstant": false,
            "href": "quiver.iterables\/GeneratingIterable\/next.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final _Next&lt;T&gt; next\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "quiver.iterables\/GeneratingIterable-class.html",
    "desc": "<p>An Iterable whose first value is the result of <a href=\"quiver.iterables\/GeneratingIterable\/initial.html\">initial<\/a> and whose\nsubsequent values are generated by passing the current value to the <a href=\"quiver.iterables\/GeneratingIterable\/next.html\">next<\/a>\nfunction.<\/p>\n<p>The class is useful for creating lazy iterables from object hierarchies and\ngraphs.<\/p>\n<p>The initial value and <a href=\"quiver.iterables\/GeneratingIterable\/next.html\">next<\/a> function are required to generate a sequence\nthat eventually terminates, otherwise calling methods that expect a finite\nsequence, like <code>length<\/code> or <code>last<\/code>, will cause an infinite loop.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>class Node {\n  Node parent;\n\n  \/\/\/ An iterable of node and all ancestors up to the root.\n  Iterable&lt;Node&gt; ancestors =\n      new GeneratingIterable&lt;Node&gt;(() =&gt; this, (n) =&gt; n.parent);\n\n  \/\/\/ An iterable of the root and the path of nodes to this. The\n  \/\/\/ reverse of ancestors.\n  Iterable&lt;Node&gt; path = ancestors.toList().reversed();\n}\n<\/code><\/pre>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "GeneratingIterable"
}