{
    "desc": "<p>A JSON-RPC 2.0 client <em>and<\/em> server.<\/p>\n<p>This supports bidirectional peer-to-peer communication with another JSON-RPC\n2.0 endpoint. It sends both requests and responses across the same\ncommunication channel and expects to connect to a peer that does the same.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-json_rpc_2_json_rpc_2\/Peer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "json_rpc_2",
    "name": "json_rpc_2.Peer",
    "shortname": "Peer",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"package-json_rpc_2_json_rpc_2\/Peer-class.html\">Peer<\/a> that communicates over <code>channel<\/code>.<\/p>\n<p>Note that the peer won't begin listening to <code>channel<\/code> until <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/listen.html\">Peer.listen<\/a>\nis called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Peer(StreamChannel&lt;String&gt; channel)\n    : this.withoutJson(\n          jsonDocument.bind(channel).transform(respondToFormatExceptions));<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/Peer.html",
            "isDeprecated": false,
            "type": "",
            "name": "Peer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": [
                {
                    "name": "channel",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "stream_channel.StreamChannel<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Closes the underlying connection.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when all resources have been released.\nThis is the same as <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/done.html\">done<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() =&gt;\n    Future.wait([_client.close(), _server.close(), _manager.close()]);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/close.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": []
        },
        {
            "desc": "<p>Starts listening to the underlying stream.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that will complete when the connection is closed or\nwhen it has an error. This is the same as <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/done.html\">done<\/a>.<\/p>\n<p><a href=\"package-json_rpc_2_json_rpc_2\/Peer\/listen.html\">listen<\/a> may only be called once.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future listen() {\n  _client.listen();\n  _server.listen();\n  return _manager.listen((message) {\n    if (message is Map) {\n      if (message.containsKey('result') || message.containsKey('error')) {\n        _clientIncomingForwarder.add(message);\n      } else {\n        _serverIncomingForwarder.add(message);\n      }\n    } else if (message is List &amp;&amp;\n        message.isNotEmpty &amp;&amp;\n        message.first is Map) {\n      if (message.first.containsKey('result') ||\n          message.first.containsKey('error')) {\n        _clientIncomingForwarder.add(message);\n      } else {\n        _serverIncomingForwarder.add(message);\n      }\n    } else {\n      \/\/ Non-Map and -List messages are ill-formed, so we pass them to the\n      \/\/ server since it knows how to send error responses.\n      _serverIncomingForwarder.add(message);\n    }\n  });\n}<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/listen.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "listen",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": []
        },
        {
            "desc": "<p>Registers a fallback method on this server.<\/p>\n<p>A server may have any number of fallback methods. When a request comes in\nthat doesn't match any named methods, each fallback is tried in order. A\nfallback can pass on handling a request by throwing a\n<a href=\"package-json_rpc_2_json_rpc_2\/RpcException\/RpcException.methodNotFound.html\">RpcException.methodNotFound<\/a> exception.<\/p>\n<p><code>callback<\/code> can return either a JSON-serializable object or a Future that\ncompletes to a JSON-serializable object. Any errors in <code>callback<\/code> will be\nreported to the client as JSON-RPC 2.0 errors. <code>callback<\/code> may send custom\nerrors by throwing an <a href=\"package-json_rpc_2_json_rpc_2\/RpcException-class.html\">RpcException<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void registerFallback(callback(Parameters parameters)) =&gt;\n    _server.registerFallback(callback);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/registerFallback.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "registerFallback",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": [
                {
                    "name": "parameters",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "json_rpc_2.Parameters"
                }
            ]
        },
        {
            "desc": "<p>Registers a method named <code>name<\/code> on this server.<\/p>\n<p><code>callback<\/code> can take either zero or one arguments. If it takes zero, any\nrequests for that method that include parameters will be rejected. If it\ntakes one, it will be passed a <a href=\"package-json_rpc_2_json_rpc_2\/Parameters-class.html\">Parameters<\/a> object.<\/p>\n<p><code>callback<\/code> can return either a JSON-serializable object or a Future that\ncompletes to a JSON-serializable object. Any errors in <code>callback<\/code> will be\nreported to the client as JSON-RPC 2.0 errors.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void registerMethod(String name, Function callback) =&gt;\n    _server.registerMethod(name, callback);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/registerMethod.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "registerMethod",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Function"
                },
                {
                    "name": "name",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Sends a JSON-RPC 2 request to invoke the given <code>method<\/code> without expecting\na response.<\/p>\n<p>If passed, <code>parameters<\/code> is the parameters for the method. This must be\neither an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> (to pass parameters by position) or a <a href=\"dart-core\/Map-class.html\">Map<\/a> with\n<a href=\"dart-core\/String-class.html\">String<\/a> keys (to pass parameters by name). Either way, it must be\nJSON-serializable.<\/p>\n<p>Since this is just a notification to which the server isn't expected to\nsend a response, it has no return value.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the client is closed when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sendNotification(String method, [parameters]) =&gt;\n    _client.sendNotification(method, parameters);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/sendNotification.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "sendNotification",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": [
                {
                    "name": "method",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "parameters",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Sends a JSON-RPC 2 request to invoke the given <code>method<\/code>.<\/p>\n<p>If passed, <code>parameters<\/code> is the parameters for the method. This must be\neither an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> (to pass parameters by position) or a <a href=\"dart-core\/Map-class.html\">Map<\/a> with\n<a href=\"dart-core\/String-class.html\">String<\/a> keys (to pass parameters by name). Either way, it must be\nJSON-serializable.<\/p>\n<p>If the request succeeds, this returns the response result as a decoded\nJSON-serializable object. If it fails, it throws an <a href=\"package-json_rpc_2_json_rpc_2\/RpcException-class.html\">RpcException<\/a>\ndescribing the failure.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if the client is closed while the request is in\nflight, or if the client is closed when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future sendRequest(String method, [parameters]) =&gt;\n    _client.sendRequest(method, parameters);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/sendRequest.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "sendRequest",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": [
                {
                    "name": "method",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                },
                {
                    "name": "parameters",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Runs <code>callback<\/code> and batches any requests sent until it returns.<\/p>\n<p>A batch of requests is sent in a single message on the underlying stream,\nand the responses are likewise sent back in a single message.<\/p>\n<p><code>callback<\/code> may be synchronous or asynchronous. If it returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>,\nrequests will be batched until that Future returns; otherwise, requests\nwill only be batched while synchronously executing <code>callback<\/code>.<\/p>\n<p>If this is called in the context of another <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/withBatch.html\">withBatch<\/a> call, it just\ninvokes <code>callback<\/code> without creating another batch. This means that\nresponses are batched until the first batch ends.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">withBatch(callback()) =&gt; _client.withBatch(callback);<\/code><\/pre>\n    ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/withBatch.html",
            "isDeprecated": false,
            "type": "<dynamic>",
            "name": "withBatch",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "json_rpc_2.Peer",
            "params": [
                {
                    "name": "callback",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when the underlying connection is\nclosed.<\/p>\n<p>This is the same future that's returned by <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/listen.html\">listen<\/a> and <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/close.html\">close<\/a>. It may\ncomplete before <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/close.html\">close<\/a> is called if the remote endpoint closes the\nconnection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done =&gt; _manager.done;<\/code><\/pre>\n        ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/done.html",
            "name": "done",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "memberOf": "json_rpc_2.Peer",
            "params": []
        },
        {
            "desc": "<p>Whether the underlying connection is closed.<\/p>\n<p>Note that this will be <code>true<\/code> before <a href=\"package-json_rpc_2_json_rpc_2\/Peer\/close.html\">close<\/a> is called if the remote\nendpoint closes the connection.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isClosed =&gt; _manager.isClosed;<\/code><\/pre>\n        ",
            "href": "package-json_rpc_2_json_rpc_2\/Peer\/isClosed.html",
            "name": "isClosed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "json_rpc_2.Peer",
            "params": []
        }
    ]
}