{
    "desc": "<p>A <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> implementation based on a double-linked list.<\/p>\n<p>Allows constant time add, remove-at-ends and peek operations.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-collection\/DoubleLinkedQueue-class.html",
    "isAbstract": false,
    "isConstant": false,
    "isDeprecated": false,
    "memberOf": "dart:collection",
    "name": "dart:collection.DoubleLinkedQueue",
    "shortname": "DoubleLinkedQueue",
    "extends": [
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueue() {\n  _sentinel = _DoubleLinkedQueueSentinel&lt;E&gt;(this);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.html",
            "isDeprecated": false,
            "type": "",
            "name": "DoubleLinkedQueue",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _sentinel._prepend(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/add.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  for (final E value in iterable) {\n    _sentinel._prepend(value);\n    _elementCount++;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/addAll.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addAll",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "iterable",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) {\n  _sentinel._append(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/addFirst.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addFirst",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) {\n  _sentinel._prepend(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/addLast.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addLast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "value",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-core\/Iterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;R&gt; cast&lt;R&gt;() =&gt; Queue.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/cast.html",
            "isDeprecated": false,
            "type": "dart:collection.Queue",
            "name": "cast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _sentinel._nextLink = _sentinel;\n  _sentinel._previousLink = _sentinel;\n  _elementCount = 0;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/clear.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "clear",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>The entry object of the first element in the queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nReturns the entry object corresponding to the first element of the queue.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/lastEntry.html\">lastEntry<\/a>,\nand they can be iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; firstEntry() {\n  return _sentinel.nextEntry();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/firstEntry.html",
            "isDeprecated": false,
            "type": "dart:collection.DoubleLinkedQueueEntry",
            "name": "firstEntry",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Calls <code>action<\/code> for each entry object of this double-linked queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nThis method iterates the entry objects from first to last and calls\n<code>action<\/code> with each object in turn.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/firstEntry.html\">firstEntry<\/a> and <a href=\"dart-collection\/DoubleLinkedQueue\/lastEntry.html\">lastEntry<\/a>,\nand iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n<p>The <code>action<\/code> function can use methods on <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a> to\nremove the entry or it can insert elements before or after then entry.\nIf the current entry is removed, iteration continues with the entry that\nwas following the current entry when <code>action<\/code> was called. Any elements\ninserted after the current element before it is removed will not be\nvisited by the iteration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEachEntry(void action(DoubleLinkedQueueEntry&lt;E&gt; element)) {\n  _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n  while (!identical(entry, _sentinel)) {\n    _DoubleLinkedQueueElement&lt;E&gt; element = entry;\n    _DoubleLinkedQueueEntry&lt;E&gt; next = element._nextLink;\n    \/\/ Remember both entry and entry._nextLink.\n    \/\/ If someone calls `element.remove()` we continue from `next`.\n    \/\/ Otherwise we use the value of entry._nextLink which may have been\n    \/\/ updated.\n    action(element);\n    if (identical(this, entry._queue)) {\n      next = entry._nextLink;\n    } else if (!identical(this, next._queue)) {\n      throw ConcurrentModificationError(this);\n    }\n    entry = next;\n  }\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/forEachEntry.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "forEachEntry",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:collection.DoubleLinkedQueueEntry"
                }
            ]
        },
        {
            "desc": "<p>The entry object of the last element in the queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nReturns the entry object corresponding to the last element of the queue.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/firstEntry.html\">firstEntry<\/a>,\nand they can be iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; lastEntry() {\n  return _sentinel.previousEntry();\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/lastEntry.html",
            "isDeprecated": false,
            "type": "dart:collection.DoubleLinkedQueueEntry",
            "name": "lastEntry",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object o) {\n  _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n  while (!identical(entry, _sentinel)) {\n    bool equals = (entry._element == o);\n    if (!identical(this, entry._queue)) {\n      \/\/ Entry must still be in the queue.\n      throw ConcurrentModificationError(this);\n    }\n    if (equals) {\n      entry._remove();\n      _elementCount--;\n      return true;\n    }\n    entry = entry._nextLink;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/remove.html",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "name": "remove",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "o",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  _DoubleLinkedQueueEntry&lt;E&gt; firstEntry = _sentinel._nextLink;\n  E result = firstEntry._remove();\n  _elementCount--;\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/removeFirst.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "removeFirst",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  _DoubleLinkedQueueEntry&lt;E&gt; lastEntry = _sentinel._previousLink;\n  E result = lastEntry._remove();\n  _elementCount--;\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/removeLast.html",
            "isDeprecated": false,
            "type": "<E>",
            "name": "removeLast",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Removes all elements matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filter(test, true);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/removeWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Removes all elements not matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filter(test, false);\n}<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/retainWhere.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "retainWhere",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": [
                {
                    "name": "element",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<E>"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of (some of) the elements of <code>this<\/code>.<\/p>\n<p>Elements are represented by their own <code>toString<\/code> results.<\/p>\n<p>The default representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.<\/p>\n<p>If the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.<\/p>\n<p>The conversion may omit calling <code>toString<\/code> on some elements if they\nare known to not occur in the output, and it may stop iterating after\na hundred elements.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '{', '}');<\/code><\/pre>\n    ",
            "href": "dart-collection\/DoubleLinkedQueue\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty {\n  return (identical(_sentinel._nextLink, _sentinel));\n}<\/code><\/pre>\n        ",
            "href": "dart-collection\/DoubleLinkedQueue\/isEmpty.html",
            "name": "isEmpty",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        },
        {
            "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/DoubleLinkedQueue-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _elementCount;<\/code><\/pre>\n        ",
            "href": "dart-collection\/DoubleLinkedQueue\/length.html",
            "name": "length",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "params": []
        }
    ]
}