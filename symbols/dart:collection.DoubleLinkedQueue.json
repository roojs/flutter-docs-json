{
    "name": "dart:collection.DoubleLinkedQueue",
    "extends": [
        "dart:core.Iterable",
        "dart:core.Object"
    ],
    "memberOf": "dart:collection",
    "events": [],
    "methods": [
        {
            "name": "DoubleLinkedQueue",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueue() {\n  _sentinel = _DoubleLinkedQueueSentinel&lt;E&gt;(this);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "add",
            "type": "",
            "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/add.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) {\n  _sentinel._prepend(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addAll",
            "type": "",
            "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/addAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) {\n  for (final E value in iterable) {\n    _sentinel._prepend(value);\n    _elementCount++;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addFirst",
            "type": "",
            "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/addFirst.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) {\n  _sentinel._append(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "addLast",
            "type": "",
            "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "value",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/addLast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) {\n  _sentinel._prepend(value);\n  _elementCount++;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "cast",
            "type": "dart:collection.Queue",
            "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-core\/Iterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/cast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;R&gt; cast&lt;R&gt;() =&gt; Queue.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "clear",
            "type": "",
            "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/clear.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _sentinel._nextLink = _sentinel;\n  _sentinel._previousLink = _sentinel;\n  _elementCount = 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "firstEntry",
            "type": "dart:collection.DoubleLinkedQueueEntry",
            "desc": "<p>The entry object of the first element in the queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nReturns the entry object corresponding to the first element of the queue.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/lastEntry.html\">lastEntry<\/a>,\nand they can be iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/firstEntry.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; firstEntry() {\n  return _sentinel.nextEntry();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "forEachEntry",
            "type": "",
            "desc": "<p>Calls <code>action<\/code> for each entry object of this double-linked queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nThis method iterates the entry objects from first to last and calls\n<code>action<\/code> with each object in turn.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/firstEntry.html\">firstEntry<\/a> and <a href=\"dart-collection\/DoubleLinkedQueue\/lastEntry.html\">lastEntry<\/a>,\nand iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n<p>The <code>action<\/code> function can use methods on <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a> to\nremove the entry or it can insert elements before or after then entry.\nIf the current entry is removed, iteration continues with the entry that\nwas following the current entry when <code>action<\/code> was called. Any elements\ninserted after the current element before it is removed will not be\nvisited by the iteration.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "dart:collection.DoubleLinkedQueueEntry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "dart:collection.DoubleLinkedQueueEntry",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/forEachEntry.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEachEntry(void action(DoubleLinkedQueueEntry&lt;E&gt; element)) {\n  _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n  while (!identical(entry, _sentinel)) {\n    _DoubleLinkedQueueElement&lt;E&gt; element = entry;\n    _DoubleLinkedQueueEntry&lt;E&gt; next = element._nextLink;\n    \/\/ Remember both entry and entry._nextLink.\n    \/\/ If someone calls `element.remove()` we continue from `next`.\n    \/\/ Otherwise we use the value of entry._nextLink which may have been\n    \/\/ updated.\n    action(element);\n    if (identical(this, entry._queue)) {\n      next = entry._nextLink;\n    } else if (!identical(this, next._queue)) {\n      throw ConcurrentModificationError(this);\n    }\n    entry = next;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "DoubleLinkedQueue.from",
            "type": "",
            "desc": "<p>Creates a double-linked queue containing all <code>elements<\/code>.<\/p>\n<p>The element order in the queue is as if the elements were added using\n<a href=\"dart-collection\/DoubleLinkedQueue\/addLast.html\">addLast<\/a> in the order provided by <code>elements.iterator<\/code>.<\/p>\n<p>All the <code>elements<\/code> should be instances of <code>E<\/code>.\nThe <code>elements<\/code> iterable itself may have any element type, so this\nconstructor can be used to down-cast a <code>Queue<\/code>, for example as:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;SuperType&gt; superQueue = ...;\nQueue&lt;SubType&gt; subQueue =\n    new DoubleLinkedQueue&lt;SubType&gt;.from(superQueue.whereType&lt;SubType&gt;());\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.from.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory DoubleLinkedQueue.from(Iterable elements) {\n  Queue&lt;E&gt; list = DoubleLinkedQueue&lt;E&gt;();\n  for (final e in elements) {\n    list.addLast(e);\n  }\n  return list;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lastEntry",
            "type": "dart:collection.DoubleLinkedQueueEntry",
            "desc": "<p>The entry object of the last element in the queue.<\/p>\n<p>Each element of the queue has an associated <a href=\"dart-collection\/DoubleLinkedQueueEntry-class.html\">DoubleLinkedQueueEntry<\/a>.\nReturns the entry object corresponding to the last element of the queue.<\/p>\n<p>The entry objects can also be accessed using <a href=\"dart-collection\/DoubleLinkedQueue\/firstEntry.html\">firstEntry<\/a>,\nand they can be iterated using <a href=\"dart-collection\/DoubleLinkedQueueEntry\/nextEntry.html\">DoubleLinkedQueueEntry.nextEntry()<\/a> and\n<a href=\"dart-collection\/DoubleLinkedQueueEntry\/previousEntry.html\">DoubleLinkedQueueEntry.previousEntry()<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/lastEntry.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DoubleLinkedQueueEntry&lt;E&gt; lastEntry() {\n  return _sentinel.previousEntry();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "DoubleLinkedQueue.of",
            "type": "",
            "desc": "<p>Creates a double-linked queue from <code>elements<\/code>.<\/p>\n<p>The element order in the queue is as if the elements were added using\n<a href=\"dart-collection\/DoubleLinkedQueue\/addLast.html\">addLast<\/a> in the order provided by <code>elements.iterator<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "elements",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/DoubleLinkedQueue\/DoubleLinkedQueue.of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory DoubleLinkedQueue.of(Iterable&lt;E&gt; elements) =&gt;\n    DoubleLinkedQueue&lt;E&gt;()..addAll(elements);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "remove",
            "type": "dart:core.bool",
            "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "o",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/remove.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object o) {\n  _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n  while (!identical(entry, _sentinel)) {\n    bool equals = (entry._element == o);\n    if (!identical(this, entry._queue)) {\n      \/\/ Entry must still be in the queue.\n      throw ConcurrentModificationError(this);\n    }\n    if (equals) {\n      entry._remove();\n      _elementCount--;\n      return true;\n    }\n    entry = entry._nextLink;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "removeFirst",
            "type": "",
            "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/removeFirst.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() {\n  _DoubleLinkedQueueEntry&lt;E&gt; firstEntry = _sentinel._nextLink;\n  E result = firstEntry._remove();\n  _elementCount--;\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeLast",
            "type": "",
            "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/removeLast.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() {\n  _DoubleLinkedQueueEntry&lt;E&gt; lastEntry = _sentinel._previousLink;\n  E result = lastEntry._remove();\n  _elementCount--;\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeWhere",
            "type": "",
            "desc": "<p>Removes all elements matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/removeWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) {\n  _filter(test, true);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "retainWhere",
            "type": "",
            "desc": "<p>Removes all elements not matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/retainWhere.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) {\n  _filter(test, false);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of (some of) the elements of <code>this<\/code>.<\/p>\n<p>Elements are represented by their own <code>toString<\/code> results.<\/p>\n<p>The default representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.<\/p>\n<p>If the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.<\/p>\n<p>The conversion may omit calling <code>toString<\/code> on some elements if they\nare known to not occur in the output, and it may stop iterating after\na hundred elements.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-collection\/DoubleLinkedQueue\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToFullString(this, '{', '}');<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "first",
            "type": "",
            "types": [],
            "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "isConstant": false,
            "href": "dart-collection\/DoubleLinkedQueue\/first.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get first {\n  _DoubleLinkedQueueEntry&lt;E&gt; firstEntry = _sentinel._nextLink;\n  return firstEntry._element;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isEmpty",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "isConstant": false,
            "href": "dart-collection\/DoubleLinkedQueue\/isEmpty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty {\n  return (identical(_sentinel._nextLink, _sentinel));\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "iterator",
            "type": "",
            "types": [],
            "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "isConstant": false,
            "href": "dart-collection\/DoubleLinkedQueue\/iterator.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">_DoubleLinkedQueueIterator&lt;E&gt; get iterator {\n  return _DoubleLinkedQueueIterator&lt;E&gt;(_sentinel);\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "last",
            "type": "",
            "types": [],
            "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "isConstant": false,
            "href": "dart-collection\/DoubleLinkedQueue\/last.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get last {\n  _DoubleLinkedQueueEntry&lt;E&gt; lastEntry = _sentinel._previousLink;\n  return lastEntry._element;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "length",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the number of elements in <a href=\"dart-collection\/DoubleLinkedQueue-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "isConstant": false,
            "href": "dart-collection\/DoubleLinkedQueue\/length.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _elementCount;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "single",
            "type": "",
            "types": [],
            "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
            "memberOf": "dart:collection.DoubleLinkedQueue",
            "isConstant": false,
            "href": "dart-collection\/DoubleLinkedQueue\/single.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">E get single {\n  \/\/ Note that this throws correctly if the queue is empty\n  \/\/ because reading the element of the sentinel throws.\n  if (identical(_sentinel._nextLink, _sentinel._previousLink)) {\n    _DoubleLinkedQueueEntry&lt;E&gt; entry = _sentinel._nextLink;\n    return entry._element;\n  }\n  throw IterableElementError.tooMany();\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-collection\/DoubleLinkedQueue-class.html",
    "desc": "<p>A <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> implementation based on a double-linked list.<\/p>\n<p>Allows constant time add, remove-at-ends and peek operations.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "DoubleLinkedQueue"
}