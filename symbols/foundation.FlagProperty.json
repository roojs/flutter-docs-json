{
    "name": "foundation.FlagProperty",
    "extends": [
        "dart:core.bool",
        "foundation.DiagnosticsProperty",
        "foundation.DiagnosticsNode",
        "dart:core.Object"
    ],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "FlagProperty",
            "type": "",
            "desc": "<p>Constructs a FlagProperty with the given descriptions with the specified descriptions.<\/p>\n<p><code>showName<\/code> defaults to false as typically <code>ifTrue<\/code> and <code>ifFalse<\/code> should\nbe descriptions that make the property name redundant.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.FlagProperty",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifTrue",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "ifFalse",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "showName",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "foundation.DiagnosticLevel",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "foundation\/FlagProperty\/FlagProperty.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FlagProperty(\n  String name, {\n  @required bool value,\n  this.ifTrue,\n  this.ifFalse,\n  bool showName = false,\n  Object defaultValue,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     assert(ifTrue != null || ifFalse != null),\n     super(\n       name,\n       value,\n       showName: showName,\n       defaultValue: defaultValue,\n       level: level,\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toJsonMap",
            "type": "dart:core.Map<dart:core.String<dart:core.Object>>",
            "desc": "<p>Serialize the node excluding its descendants to a JSON map.<\/p>\n<p>Subclasses should override if they have additional properties that are\nuseful for the GUI tools that consume this JSON.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>, which forms the bridge between JSON returned\nby this method and interactive tree views in the Flutter IntelliJ\nplugin.<\/li><\/ul>",
            "static": false,
            "memberOf": "foundation.FlagProperty",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/FlagProperty\/toJsonMap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, Object&gt; toJsonMap() {\n  final Map&lt;String, Object&gt; json = super.toJsonMap();\n  if (ifTrue != null)\n    json['ifTrue'] = ifTrue;\n  if (ifFalse != null)\n    json['ifFalse'] = ifFalse;\n\n  return json;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.Map",
                "dart:core.String",
                "dart:core.Object"
            ]
        },
        {
            "name": "valueToString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"foundation\/FlagProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.FlagProperty",
            "sig": "",
            "params": [
                {
                    "name": "parentConfiguration",
                    "type": "foundation.TextTreeConfiguration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/FlagProperty\/valueToString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (value == true) {\n    if (ifTrue != null)\n      return ifTrue;\n  } else if (value == false) {\n    if (ifFalse != null)\n      return ifFalse;\n  }\n  return super.valueToString(parentConfiguration: parentConfiguration);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "ifFalse",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Description to use if the property value is false.<\/p>\n<p>If not specified and <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals false, the property's priority <a href=\"foundation\/FlagProperty\/level.html\">level<\/a>\nwill be <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a>.<\/p>\n        ",
            "memberOf": "foundation.FlagProperty",
            "isConstant": false,
            "href": "foundation\/FlagProperty\/ifFalse.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifFalse\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "ifTrue",
            "type": "dart:core.String",
            "types": [],
            "desc": "<p>Description to use if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is true.<\/p>\n<p>If not specified and <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals true the property's priority <a href=\"foundation\/FlagProperty\/level.html\">level<\/a>\nwill be <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.hidden<\/a>.<\/p>\n        ",
            "memberOf": "foundation.FlagProperty",
            "isConstant": false,
            "href": "foundation\/FlagProperty\/ifTrue.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String ifTrue\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "level",
            "type": "foundation.DiagnosticLevel",
            "types": [],
            "desc": "<p>Priority level of the diagnostic used to control which diagnostics should\nbe shown and filtered.<\/p>\n<p>The property level defaults to the value specified by the <code>level<\/code>\nconstructor argument. The level is raised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.error<\/a> if\nan <a href=\"foundation\/DiagnosticsProperty\/exception.html\">exception<\/a> was thrown getting the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a>. The level is\nraised to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.warning<\/a> if the property <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null and\nthe property is not allowed to be null due to <a href=\"foundation\/DiagnosticsProperty\/missingIfNull.html\">missingIfNull<\/a>. The\npriority level is lowered to <a href=\"foundation\/DiagnosticLevel-class.html\">DiagnosticLevel.fine<\/a> if the property\n<a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> equals <a href=\"foundation\/DiagnosticsProperty\/defaultValue.html\">defaultValue<\/a>.<\/p>\n        ",
            "memberOf": "foundation.FlagProperty",
            "isConstant": false,
            "href": "foundation\/FlagProperty\/level.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticLevel get level {\n  if (value == true) {\n    if (ifTrue == null)\n      return DiagnosticLevel.hidden;\n  }\n  if (value == false) {\n    if (ifFalse == null)\n      return DiagnosticLevel.hidden;\n  }\n  return super.level;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "showName",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether the name of the property should be shown when showing the default\nview of the tree.<\/p>\n<p>This could be set to false (hiding the name) if the value's description\nwill make the name self-evident.<\/p>\n        ",
            "memberOf": "foundation.FlagProperty",
            "isConstant": false,
            "href": "foundation\/FlagProperty\/showName.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get showName {\n  if (value == null || (value == true &amp;&amp; ifTrue == null) || (value == false &amp;&amp; ifFalse == null)) {\n    \/\/ We are missing a description for the flag value so we need to show the\n    \/\/ flag name. The property will have DiagnosticLevel.hidden for this case\n    \/\/ so users will not see this the property in this case unless they are\n    \/\/ displaying hidden properties.\n    return true;\n  }\n  return super.showName;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "foundation\/FlagProperty-class.html",
    "desc": "<p>Property where the description is either <a href=\"foundation\/FlagProperty\/ifTrue.html\">ifTrue<\/a> or <a href=\"foundation\/FlagProperty\/ifFalse.html\">ifFalse<\/a> depending on\nwhether <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is true or false.<\/p>\n<p>Using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> instead of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;bool&gt;<\/a> can make\ndiagnostics display more polished. For example, given a property named\n<code>visible<\/code> that is typically true, the following code will return 'hidden'\nwhen <code>visible<\/code> is false and nothing when visible is true, in contrast to\n<code>visible: true<\/code> or <code>visible: false<\/code>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">FlagProperty(\n  'visible',\n  value: true,\n  ifFalse: 'hidden',\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> should also be used instead of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;bool&gt;<\/a>\nif showing the bool value would not clearly indicate the meaning of the\nproperty value.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">FlagProperty(\n  'inherit',\n  value: inherit,\n  ifTrue: '&lt;all styles inherited&gt;',\n  ifFalse: '&lt;no style specified&gt;',\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides similar behavior describing whether\na <a href=\"foundation\/DiagnosticsProperty\/value.html\">value<\/a> is null.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "FlagProperty"
}