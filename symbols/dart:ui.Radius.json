{
    "name": "dart:ui.Radius",
    "extends": [],
    "memberOf": "dart:ui",
    "events": [],
    "methods": [
        {
            "name": "operator %",
            "type": "dart:ui.Radius",
            "desc": "<p>Modulo (remainder) operator.<\/p>\n<p>Returns a radius whose coordinates are the remainder of dividing the\ncoordinates of the left-hand-side operand (a radius) by the scalar\nright-hand-side operand (a double).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_modulo.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator %(double operand) =&gt; new Radius.elliptical(x % operand, y % operand);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator *",
            "type": "dart:ui.Radius",
            "desc": "<p>Multiplication operator.<\/p>\n<p>Returns a radius whose coordinates are the coordinates of the\nleft-hand-side operand (a radius) multiplied by the scalar\nright-hand-side operand (a double).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_multiply.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator *(double operand) =&gt; new Radius.elliptical(x * operand, y * operand);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator +",
            "type": "dart:ui.Radius",
            "desc": "<p>Binary addition operator.<\/p>\n<p>Returns a radius whose <a href=\"dart-ui\/Radius\/x.html\">x<\/a> value is the sum of the <a href=\"dart-ui\/Radius\/x.html\">x<\/a> values of the\ntwo operands, and whose <a href=\"dart-ui\/Radius\/y.html\">y<\/a> value is the sum of the <a href=\"dart-ui\/Radius\/y.html\">y<\/a> values of the\ntwo operands.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_plus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator +(Radius other) =&gt; new Radius.elliptical(x + other.x, y + other.y);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator -",
            "type": "dart:ui.Radius",
            "desc": "<p>Binary subtraction operator.<\/p>\n<p>Returns a radius whose <a href=\"dart-ui\/Radius\/x.html\">x<\/a> value is the left-hand-side operand's <a href=\"dart-ui\/Radius\/x.html\">x<\/a>\nminus the right-hand-side operand's <a href=\"dart-ui\/Radius\/x.html\">x<\/a> and whose <a href=\"dart-ui\/Radius\/y.html\">y<\/a> value is the\nleft-hand-side operand's <a href=\"dart-ui\/Radius\/y.html\">y<\/a> minus the right-hand-side operand's <a href=\"dart-ui\/Radius\/y.html\">y<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator -(Radius other) =&gt; new Radius.elliptical(x - other.x, y - other.y);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator \/",
            "type": "dart:ui.Radius",
            "desc": "<p>Division operator.<\/p>\n<p>Returns a radius whose coordinates are the coordinates of the\nleft-hand-side operand (a radius) divided by the scalar right-hand-side\noperand (a double).<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator \/(double operand) =&gt; new Radius.elliptical(x \/ operand, y \/ operand);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"dart-ui\/Radius\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final Radius typedOther = other;\n  return typedOther.x == x &amp;&amp; typedOther.y == y;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Radius.circular",
            "type": "",
            "desc": "<p>Constructs a circular radius. <a href=\"dart-ui\/Radius\/x.html\">x<\/a> and <a href=\"dart-ui\/Radius\/y.html\">y<\/a> will have the same radius value.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Radius\/Radius.circular.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Radius.circular(double radius) : this.elliptical(radius, radius);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "Radius.elliptical",
            "type": "",
            "desc": "<p>Constructs an elliptical radius with the given radii.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "x",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "y",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-ui\/Radius\/Radius.elliptical.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Radius.elliptical(this.x, this.y);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "lerp",
            "type": "dart:ui.Radius",
            "desc": "<p>Linearly interpolate between two radii.<\/p>\n<p>If either is null, this function substitutes <a href=\"dart-ui\/Radius\/zero-constant.html\">Radius.zero<\/a> instead.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "a",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "b",
                    "type": "dart:ui.Radius",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "t",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/lerp.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Radius lerp(Radius a, Radius b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return new Radius.elliptical(b.x * t, b.y * t);\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new Radius.elliptical(a.x * k, a.y * k);\n  }\n  return new Radius.elliptical(\n    lerpDouble(a.x, b.x, t),\n    lerpDouble(a.y, b.y, t),\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return x == y ? 'Radius.circular(${x.toStringAsFixed(1)})' :\n                  'Radius.elliptical(${x.toStringAsFixed(1)}, '\n                  '${y.toStringAsFixed(1)})';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator unary-",
            "type": "dart:ui.Radius",
            "desc": "<p>Unary negation operator.<\/p>\n<p>Returns a Radius with the distances negated.<\/p>\n<p>Radiuses with negative values aren't geometrically meaningful, but could\noccur as part of expressions. For example, negating a radius of one pixel\nand then adding the result to another radius is equivalent to subtracting\na radius of one pixel from the other.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_unary_minus.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator -() =&gt; new Radius.elliptical(-x, -y);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ~\/",
            "type": "dart:ui.Radius",
            "desc": "<p>Integer (truncating) division operator.<\/p>\n<p>Returns a radius whose coordinates are the coordinates of the\nleft-hand-side operand (a radius) divided by the scalar right-hand-side\noperand (a double), rounded towards zero.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:ui.Radius",
            "sig": "",
            "params": [
                {
                    "name": "operand",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-ui\/Radius\/operator_truncate_divide.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Radius operator ~\/(double operand) =&gt; new Radius.elliptical((x ~\/ operand).toDouble(), (y ~\/ operand).toDouble());<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Radius\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:ui.Radius",
            "isConstant": false,
            "href": "dart-ui\/Radius\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(x, y);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "x",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The radius value on the horizontal axis.<\/p>\n        ",
            "memberOf": "dart:ui.Radius",
            "isConstant": false,
            "href": "dart-ui\/Radius\/x.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double x\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "y",
            "type": "dart:core.double",
            "types": [],
            "desc": "<p>The radius value on the vertical axis.<\/p>\n        ",
            "memberOf": "dart:ui.Radius",
            "isConstant": false,
            "href": "dart-ui\/Radius\/y.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-ui\/Radius\/zero-constant.html",
            "desc": "<p>A radius with <a href=\"dart-ui\/Radius\/x.html\">x<\/a> and <a href=\"dart-ui\/Radius\/y.html\">y<\/a> values set to zero.<\/p>\n<p>You can use <a href=\"dart-ui\/Radius\/zero-constant.html\">Radius.zero<\/a> with <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> to have right-angle corners.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Radius zero = const Radius.circular(0.0)\n\n<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "name": "zero",
            "memberOf": "dart:ui.Radius"
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-ui\/Radius-class.html",
    "desc": "<p>A radius for either circular or elliptical shapes.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Radius"
}