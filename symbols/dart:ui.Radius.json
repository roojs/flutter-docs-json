{
    "desc": "<p>A radius for either circular or elliptical shapes.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-ui\/Radius-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:ui",
    "name": "dart:ui.Radius",
    "shortname": "Radius",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Linearly interpolate between two radii.<\/p>\n<p>If either is null, this function substitutes <a href=\"dart-ui\/Radius\/zero-constant.html\">Radius.zero<\/a> instead.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Radius lerp(Radius a, Radius b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return new Radius.elliptical(b.x * t, b.y * t);\n  if (b == null) {\n    final double k = 1.0 - t;\n    return new Radius.elliptical(a.x * k, a.y * k);\n  }\n  return new Radius.elliptical(\n    lerpDouble(a.x, b.x, t),\n    lerpDouble(a.y, b.y, t),\n  );\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/Radius\/lerp.html",
            "isDeprecated": "0",
            "type": "dart:ui.Radius",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Radius",
            "params": [
                {
                    "name": "a",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Radius"
                },
                {
                    "name": "b",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.Radius"
                },
                {
                    "name": "t",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return x == y ? 'Radius.circular(${x.toStringAsFixed(1)})' :\n                  'Radius.elliptical(${x.toStringAsFixed(1)}, '\n                  '${y.toStringAsFixed(1)})';\n}<\/code><\/pre>\n    ",
            "href": "dart-ui\/Radius\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:ui.Radius",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-ui\/Radius\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-ui\/Radius\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(x, y);<\/code><\/pre>\n        ",
            "href": "dart-ui\/Radius\/hashCode.html",
            "name": "hashCode",
            "isDeprecated": false,
            "type": "dart:core.int",
            "memberOf": "dart:ui.Radius",
            "params": []
        },
        {
            "desc": "<p>The radius value on the horizontal axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double x\n\n<\/code><\/pre>\n        ",
            "href": "dart-ui\/Radius\/x.html",
            "name": "x",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Radius",
            "params": []
        },
        {
            "desc": "<p>The radius value on the vertical axis.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
            "href": "dart-ui\/Radius\/y.html",
            "name": "y",
            "isDeprecated": false,
            "type": "dart:core.double",
            "memberOf": "dart:ui.Radius",
            "params": []
        }
    ]
}