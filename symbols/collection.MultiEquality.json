{
    "name": "collection.MultiEquality",
    "extends": [],
    "memberOf": "collection",
    "events": [],
    "methods": [
        {
            "name": "MultiEquality",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "collection.MultiEquality",
            "sig": "",
            "params": [
                {
                    "name": "equalities",
                    "type": "dart:core.Iterable<collection.Equality>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "collection.Equality"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "package-collection_collection\/MultiEquality\/MultiEquality.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MultiEquality(Iterable&lt;Equality&lt;E&gt;&gt; equalities)\n    : _equalities = equalities;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "equals",
            "type": "dart:core.bool",
            "desc": "<p>Compare two elements for being equal.<\/p>\n<p>This should be a proper equality relation.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.MultiEquality",
            "sig": "",
            "params": [
                {
                    "name": "e1",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "e2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/MultiEquality\/equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(E e1, E e2) {\n  for (Equality&lt;E&gt; eq in _equalities) {\n    if (eq.isValidKey(e1)) return eq.isValidKey(e2) &amp;&amp; eq.equals(e1, e2);\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "hash",
            "type": "dart:core.int",
            "desc": "<p>Get a hashcode of an element.<\/p>\n<p>The hashcode should be compatible with <a href=\"package-collection_collection\/MultiEquality\/equals.html\">equals<\/a>, so that if\n<code>equals(a, b)<\/code> then <code>hash(a) == hash(b)<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.MultiEquality",
            "sig": "",
            "params": [
                {
                    "name": "e",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/MultiEquality\/hash.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(E e) {\n  for (Equality&lt;E&gt; eq in _equalities) {\n    if (eq.isValidKey(e)) return eq.hash(e);\n  }\n  return 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isValidKey",
            "type": "dart:core.bool",
            "desc": "<p>Test whether an object is a valid argument to <a href=\"package-collection_collection\/MultiEquality\/equals.html\">equals<\/a> and <a href=\"package-collection_collection\/MultiEquality\/hash.html\">hash<\/a>.<\/p>\n<p>Some implementations may be restricted to only work on specific types\nof objects.<\/p>\n    ",
            "static": false,
            "memberOf": "collection.MultiEquality",
            "sig": "",
            "params": [
                {
                    "name": "o",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-collection_collection\/MultiEquality\/isValidKey.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isValidKey(Object o) {\n  for (Equality&lt;E&gt; eq in _equalities) {\n    if (eq.isValidKey(o)) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "package-collection_collection\/MultiEquality-class.html",
    "desc": "<p>Combines several equalities into a single equality.<\/p>\n<p>Tries each equality in order, using <a href=\"package-collection_collection\/MultiEquality\/isValidKey.html\">Equality.isValidKey<\/a>, and returns\nthe result of the first equality that applies to the argument or arguments.<\/p>\n<p>For <code>equals<\/code>, the first equality that matches the first argument is used,\nand if the second argument of <code>equals<\/code> is not valid for that equality,\nit returns false.<\/p>\n<p>Because the equalities are tried in order, they should generally work on\ndisjoint types. Otherwise the multi-equality may give inconsistent results\nfor <code>equals(e1, e2)<\/code> and <code>equals(e2, e1)<\/code>. This can happen if one equality\nconsiders only <code>e1<\/code> a valid key, and not <code>e2<\/code>, but an equality which is\nchecked later, allows both.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "MultiEquality"
}