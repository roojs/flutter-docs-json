{
    "desc": "<p>A link that forwards all methods and properties to a delegate.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-file_file\/ForwardingLink-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "file",
    "name": "file.ForwardingLink",
    "shortname": "ForwardingLink",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "package-file_file\/ForwardingLink\/ForwardingLink.html",
            "isDeprecated": false,
            "type": "",
            "name": "ForwardingLink",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": []
        },
        {
            "desc": "<p>Creates a symbolic link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with\nthe link when it has been created. If the link exists,\nthe future will complete with an error.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created\nonly if all directories in its path exist.\nIf <code>recursive<\/code> is true, all non-existing path\ncomponents are created. The directories in the path of <code>target<\/code> are\nnot affected, unless they are also in <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; create(String target, {bool recursive: false}) async =&gt;\n    wrap(await delegate.create(target, recursive: recursive));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/create.html",
            "isDeprecated": false,
            "type": "dart:async.Future<file.Link>",
            "name": "create",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": [
                {
                    "name": "recursive",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "target",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously create the link. Calling <a href=\"package-file_file\/ForwardingLink\/createSync.html\">createSync<\/a> on an existing link\nwill throw an exception.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created only if all\ndirectories in its path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created. The directories in\nthe path of <code>target<\/code> are not affected, unless they are also in <a href=\"package-file_file\/ForwardingFileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid createSync(String target, {bool recursive: false}) =&gt;\n    delegate.createSync(target, recursive: recursive);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/createSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "createSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": [
                {
                    "name": "recursive",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "target",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Gets the target of the link. Returns a future that completes with\nthe path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, the future completes with\na FileSystemException.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;String&gt; target() =&gt; delegate.target();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/target.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.String>",
            "name": "target",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": []
        },
        {
            "desc": "<p>Synchronously gets the target of the link. Returns the path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, throws a FileSystemException.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString targetSync() =&gt; delegate.targetSync();<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/targetSync.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "targetSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": []
        },
        {
            "desc": "<p>Updates the link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with the\nlink when it has been updated.  Calling <a href=\"package-file_file\/ForwardingLink\/update.html\">update<\/a> on a non-existing link\nwill complete its returned future with an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;Link&gt; update(String target) async =&gt;\n    wrap(await delegate.update(target));<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/update.html",
            "isDeprecated": false,
            "type": "dart:async.Future<file.Link>",
            "name": "update",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": [
                {
                    "name": "target",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Synchronously updates the link. Calling <a href=\"package-file_file\/ForwardingLink\/updateSync.html\">updateSync<\/a> on a non-existing link\nwill throw an exception.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateSync(String target) =&gt; delegate.updateSync(target);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/updateSync.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "updateSync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": [
                {
                    "name": "target",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Creates a new entity with the same file system and same type as this\nentity but backed by the specified delegate.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nForwardingLink wrap(io.Link delegate) =&gt; wrapLink(delegate);<\/code><\/pre>\n    ",
            "href": "package-file_file\/ForwardingLink\/wrap.html",
            "isDeprecated": false,
            "type": "file.ForwardingLink",
            "name": "wrap",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "file.ForwardingLink",
            "params": [
                {
                    "name": "delegate",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:io.Link"
                }
            ]
        }
    ],
    "props": []
}