{
    "desc": "<p>An interior node in the focus tree.<\/p>\n<p>The focus tree keeps track of which widget is the user's current focus. The\nfocused widget often listens for keyboard events.<\/p>\n<p>The interior nodes in the focus tree cannot themselves be focused but\ninstead remember previous focus states. A scope is currently active in its\nparent whenever <a href=\"widgets\/FocusScopeNode\/isFirstFocus.html\">isFirstFocus<\/a> is true. If that scope is detached from its\nparent, its previous sibling becomes the parent's first focus.<\/p>\n<p>A <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> has the overall focus when the node is focused in its\nparent <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> and <a href=\"widgets\/FocusScopeNode\/isFirstFocus.html\">FocusScopeNode.isFirstFocus<\/a> is true for\nthat scope and all its ancestor scopes.<\/p>\n<p>If a <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> is removed, then the next sibling node will be set as\nthe focused node by the <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, which is a leaf node in the focus tree that can receive\nfocus.<\/li>\n<li>\n<a href=\"widgets\/FocusScope\/of.html\">FocusScope.of<\/a>, which provides the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for a given\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/li>\n<li>\n<a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, which is a widget that associates a <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> with\nits location in the tree.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "widgets\/FocusScopeNode-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.FocusScopeNode",
    "shortname": "FocusScopeNode",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "",
            "href": "widgets\/FocusScopeNode\/FocusScopeNode.html",
            "isDeprecated": "0",
            "type": "",
            "name": "FocusScopeNode",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": []
        },
        {
            "desc": "<p>If this scope lacks a focus, request that the given node becomes the\nfocus.<\/p>\n<p>Useful for widgets that wish to grab the focus if no other widget already\nhas the focus.<\/p>\n<p>The node is notified that it has received the overall focus in a\nmicrotask.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void autofocus(FocusNode node) {\n  assert(node != null);\n  if (_focus == null) {\n    node._hasKeyboardToken = true;\n    _setFocus(node);\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/autofocus.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "autofocus",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": [
                {
                    "name": "node",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.FocusNode"
                }
            ]
        },
        {
            "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/FocusScopeNode\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  final List&lt;DiagnosticsNode&gt; children = &lt;DiagnosticsNode&gt;[];\n  if (_firstChild != null) {\n    FocusScopeNode child = _firstChild;\n    int count = 1;\n    while (true) {\n      children.add(child.toDiagnosticsNode(name: 'child $count'));\n      if (child == _lastChild)\n        break;\n      child = child._nextSibling;\n      count += 1;\n    }\n  }\n  return children;\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/debugDescribeChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "name": "debugDescribeChildren",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": []
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"widgets\/FocusScopeNode\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  if (_focus != null)\n    properties.add(DiagnosticsProperty&lt;FocusNode&gt;('focus', _focus));\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "debugFillProperties",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Remove this scope from its parent child list.<\/p>\n<p>This method is safe to call even if this scope does not have a parent.<\/p>\n<p>A widget that sets a scope as the first focus of another scope should\ncall this method during <a href=\"widgets\/State\/dispose.html\">State.dispose<\/a> to avoid leaving dangling\nchildren in their parent scope.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void detach() {\n  _didChangeFocusChain();\n  _parent?._remove(this);\n  assert(_parent == null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/detach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "detach",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": []
        },
        {
            "desc": "<p>Adopts the given node if it is focused in another scope.<\/p>\n<p>A widget that requests that a node is focused should call this method\nduring its <code>build<\/code> method in case the widget is moved from one location\nin the tree to another location that has a different focus scope.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reparentIfNeeded(FocusNode node) {\n  assert(node != null);\n  if (node._parent == null || node._parent == this)\n    return;\n  node.unfocus();\n  assert(node._parent == null);\n  if (_focus == null)\n    _setFocus(node);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/reparentIfNeeded.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "reparentIfNeeded",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": [
                {
                    "name": "node",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.FocusNode"
                }
            ]
        },
        {
            "desc": "<p>Adopts the given scope if it is the first focus of another scope.<\/p>\n<p>A widget that sets a scope as the first focus of another scope should\ncall this method during its <code>build<\/code> method in case the widget is moved\nfrom one location in the tree to another location that has a different\nfocus scope.<\/p>\n<p>If the given scope is not the first focus of its old parent, the scope\nis simply detached from its old parent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reparentScopeIfNeeded(FocusScopeNode child) {\n  assert(child != null);\n  if (child._parent == null || child._parent == this)\n    return;\n  if (child.isFirstFocus) {\n    setFirstFocus(child);\n  } else {\n    child.detach();\n  }\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/reparentScopeIfNeeded.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "reparentScopeIfNeeded",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.FocusScopeNode"
                }
            ]
        },
        {
            "desc": "<p>Requests that the given node becomes the focus for this scope.<\/p>\n<p>If the given node is currently focused in another scope, the node will\nfirst be unfocused in that scope.<\/p>\n<p>The node will receive the overall focus if this <a href=\"widgets\/FocusScopeNode\/isFirstFocus.html\">isFirstFocus<\/a> is true\nin this scope and all its ancestor scopes. The node is notified that it\nhas received the overall focus in a microtask.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void requestFocus(FocusNode node) {\n  assert(node != null);\n  if (_focus == node &amp;&amp; listEquals&lt;FocusScopeNode&gt;(_focusPath, _manager?._getCurrentFocusPath()))\n    return;\n  _focus?.unfocus();\n  node._hasKeyboardToken = true;\n  _setFocus(node);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/requestFocus.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "requestFocus",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": [
                {
                    "name": "node",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.FocusNode"
                }
            ]
        },
        {
            "desc": "<p>Makes the given child the first focus of this scope.<\/p>\n<p>If the child has another parent scope, the child is first removed from\nthat scope. After this method returns <a href=\"widgets\/FocusScopeNode\/isFirstFocus.html\">isFirstFocus<\/a> will be true for\nthe child.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setFirstFocus(FocusScopeNode child) {\n  assert(child != null);\n  if (_firstChild == child)\n    return;\n  child.detach();\n  _prepend(child);\n  assert(child._parent == this);\n  _didChangeFocusChain();\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusScopeNode\/setFirstFocus.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "setFirstFocus",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusScopeNode",
            "params": [
                {
                    "name": "child",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "widgets.FocusScopeNode"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this scope is currently active in its parent scope.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFirstFocus =&gt; _parent == null || _parent._firstChild == this;<\/code><\/pre>\n        ",
            "href": "widgets\/FocusScopeNode\/isFirstFocus.html",
            "name": "isFirstFocus",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "widgets.FocusScopeNode",
            "params": []
        }
    ]
}