{
    "name": "dart:core.bool",
    "extends": [],
    "memberOf": "dart:core",
    "events": [],
    "methods": [
        {
            "name": "operator &",
            "type": "dart:core.bool",
            "desc": "<p>The logical conjunction (\"and\") of this and <code>other<\/code>.<\/p>\n<p>Returns <code>true<\/code> if both this and <code>other<\/code> are <code>true<\/code>, and <code>false<\/code> otherwise.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.bool",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/bool\/operator_bitwise_and.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/TODO(lrn): Remove \"as bool\" in Dart 2.\n@Since(\"2.1\")\nbool operator &amp;(bool other) =&gt; (other as bool) &amp;&amp; this;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator ^",
            "type": "dart:core.bool",
            "desc": "<p>The logical exclusive disjunction (\"exclusive or\") of this and <code>other<\/code>.<\/p>\n<p>Returns whether this and <code>other<\/code> are neither both <code>true<\/code> nor both <code>false<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.bool",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/bool\/operator_bitwise_exclusive_or.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nbool operator ^(bool other) =&gt; !(other as bool) == this;<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "bool.fromEnvironment",
            "type": "",
            "desc": "<p>Returns the boolean value of the environment declaration <code>name<\/code>.<\/p>\n<p>The boolean value of the declaration is <code>true<\/code> if the declared value is\nthe string <code>\"true\"<\/code>, and <code>false<\/code> if the value is <code>\"false\"<\/code>.<\/p>\n<p>In all other cases, including when there is no declaration for <code>name<\/code>,\nthe result is the <code>defaultValue<\/code>.<\/p>\n<p>The result is the same as would be returned by:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">(const String.fromEnvironment(name) == \"true\")\n    ? true\n    : (const String.fromEnvironment(name) == \"false\")\n        ? false\n        : defaultValue\n<\/code><\/pre>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const loggingFlag = const bool.fromEnvironment(\"logging\");\n<\/code><\/pre>\n<p>If you want to use a different truth-string than <code>\"true\"<\/code>, you can use the\n<a href=\"dart-core\/bool\/bool.fromEnvironment.html\">String.fromEnvironment<\/a> constructor directly:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const isLoggingOn = (const String.fromEnvironment(\"logging\") == \"on\");\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:core.bool",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "defaultValue",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-core\/bool\/bool.fromEnvironment.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The .fromEnvironment() constructors are special in that we do not want\n\/\/ users to call them using \"new\". We prohibit that by giving them bodies\n\/\/ that throw, even though const constructors are not allowed to have bodies.\n\/\/ Disable those static errors.\n\/\/ignore: const_constructor_with_body\n\/\/ignore: const_factory\nexternal const factory bool.fromEnvironment(String name,\n    {bool defaultValue: false});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns either <code>\"true\"<\/code> for <code>true<\/code> and <code>\"false\"<\/code> for <code>false<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.bool",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-core\/bool\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return this ? \"true\" : \"false\";\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "operator |",
            "type": "dart:core.bool",
            "desc": "<p>The logical disjunction (\"inclusive or\") of this and <code>other<\/code>.<\/p>\n<p>Returns <code>true<\/code> if either this or <code>other<\/code> is <code>true<\/code>, and <code>false<\/code> otherwise.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:core.bool",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-core\/bool\/operator_bitwise_or.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nbool operator |(bool other) =&gt; (other as bool) || this;<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/bool\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "dart:core.bool",
            "isConstant": false,
            "href": "dart-core\/bool\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get hashCode;<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "foundation.FlagProperty"
    ],
    "realImplementors": [
        "foundation.FlagProperty"
    ],
    "cn": [],
    "href": "dart-core\/bool-class.html",
    "desc": "<p>The reserved words <code>true<\/code> and <code>false<\/code> denote objects that are the only two\ninstances of this class.<\/p>\n<p>It is a compile-time error for a class to attempt to extend or implement\nbool.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "bool"
}