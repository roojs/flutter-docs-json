{
    "name": "widgets.WidgetInspectorService",
    "extends": [],
    "memberOf": "widgets",
    "events": [],
    "methods": [
        {
            "name": "WidgetInspectorService",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "widgets\/WidgetInspectorService\/WidgetInspectorService.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "disposeAllGroups",
            "type": "",
            "desc": "<p>Clear all InspectorService object references.<\/p>\n<p>Use this method only for testing to ensure that object references from one\ntest case do not impact other test cases.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/disposeAllGroups.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid disposeAllGroups() {\n  _groups.clear();\n  _idToReferenceData.clear();\n  _objectToId.clear();\n  _nextId = 0;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "disposeGroup",
            "type": "",
            "desc": "<p>Free all references to objects in a group.<\/p>\n<p>Objects and their associated ids in the group may be kept alive by\nreferences from a different group.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/disposeGroup.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid disposeGroup(String name) {\n  final Set&lt;_InspectorReferenceData&gt; references = _groups.remove(name);\n  if (references == null)\n    return;\n  references.forEach(_decrementReferenceCount);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "disposeId",
            "type": "",
            "desc": "<p>Remove the object with the specified <code>id<\/code> from the specified object\ngroup.<\/p>\n<p>If the object exists in other groups it will remain alive and the object\nid will remain valid.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/disposeId.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid disposeId(String id, String groupName) {\n  if (id == null)\n    return;\n\n  final _InspectorReferenceData referenceData = _idToReferenceData[id];\n  if (referenceData == null)\n    throw FlutterError('Id does not exist');\n  if (_groups[groupName]?.remove(referenceData) != true)\n    throw FlutterError('Id is not in group');\n  _decrementReferenceCount(referenceData);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "forceRebuild",
            "type": "dart:async.Future",
            "desc": "<p>Cause the entire tree to be rebuilt. This is used by development tools\nwhen the application code has changed and is being hot-reloaded, to cause\nthe widget tree to pick up any changed implementations.<\/p>\n<p>This is expensive and should not be called except during development.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/forceRebuild.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFuture&lt;void&gt; forceRebuild() {\n  final WidgetsBinding binding = WidgetsBinding.instance;\n  if (binding.renderViewElement != null) {\n    binding.buildOwner.reassemble(binding.renderViewElement);\n    return binding.endOfFrame;\n  }\n  return Future&lt;void&gt;.value();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getChildren",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the children of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>\nobject that <code>diagnosticsNodeId<\/code> references.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "diagnosticsNodeId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getChildren.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getChildren(String diagnosticsNodeId, String groupName) {\n  return _safeJsonEncode(_getChildren(diagnosticsNodeId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getChildrenDetailsSubtree",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the children of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>\nobject that <code>diagnosticsNodeId<\/code> references providing information needed\nfor the details subtree view.<\/p>\n<p>The details subtree shows properties inline and includes all children\nrather than a filtered set of important children.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "diagnosticsNodeId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getChildrenDetailsSubtree.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getChildrenDetailsSubtree(String diagnosticsNodeId, String groupName) {\n  return _safeJsonEncode(_getChildrenDetailsSubtree(diagnosticsNodeId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getChildrenSummaryTree",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the children of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>\nobject that <code>diagnosticsNodeId<\/code> references only including children that\nwere created directly by user code.<\/p>\n<p>Requires <a href=\"widgets\/Widget-class.html\">Widget<\/a> creation locations which are only available for debug\nmode builds when the <code>--track-widget-creation<\/code> flag is passed to\n<code>flutter_tool<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService\/isWidgetCreationTracked.html\">isWidgetCreationTracked<\/a> which indicates whether this method can be\nused.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "diagnosticsNodeId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getChildrenSummaryTree.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getChildrenSummaryTree(String diagnosticsNodeId, String groupName) {\n  return _safeJsonEncode(_getChildrenSummaryTree(diagnosticsNodeId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getDetailsSubtree",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the subtree rooted at the\n<a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> object that <code>diagnosticsNodeId<\/code> references providing\ninformation needed for the details subtree view.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/WidgetInspectorService\/getChildrenDetailsSubtree.html\">getChildrenDetailsSubtree<\/a>, a method to get children of a node\nin the details subtree.<\/li><\/ul>",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getDetailsSubtree.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getDetailsSubtree(String id, String groupName) {\n  return _safeJsonEncode(_getDetailsSubtree( id, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getParentChain",
            "type": "dart:core.String",
            "desc": "<p>Returns JSON representing the chain of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> instances from\nroot of thee tree to the <a href=\"widgets\/Element-class.html\">Element<\/a> or <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> matching <code>id<\/code>.<\/p>\n<p>The JSON contains all information required to display a tree view with\nall nodes other than nodes along the path collapsed.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getParentChain.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getParentChain(String id, String groupName) {\n  return _safeJsonEncode(_getParentChain(id, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getProperties",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the properties of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>\nobject that <code>diagnosticsNodeId<\/code> references.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "diagnosticsNodeId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getProperties.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getProperties(String diagnosticsNodeId, String groupName) {\n  return _safeJsonEncode(_getProperties(diagnosticsNodeId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getRootRenderObject",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> for the root\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getRootRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getRootRenderObject(String groupName) {\n  return _safeJsonEncode(_getRootRenderObject(groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getRootWidget",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> for the root\n<a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getRootWidget.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getRootWidget(String groupName) {\n  return _safeJsonEncode(_getRootWidget(groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getRootWidgetSummaryTree",
            "type": "dart:core.String",
            "desc": "<p>Returns a JSON representation of the <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> for the root\n<a href=\"widgets\/Element-class.html\">Element<\/a> showing only nodes that should be included in a summary tree.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getRootWidgetSummaryTree.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getRootWidgetSummaryTree(String groupName) {\n  return _safeJsonEncode(_getRootWidgetSummaryTree(groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getSelectedRenderObject",
            "type": "dart:core.String",
            "desc": "<p>Returns a <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representing the currently selected\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>If the currently selected <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is identical to the\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> referenced by <code>previousSelectionId<\/code> then the previous\n<code>DiagnosticNode<\/code> is reused.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "previousSelectionId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getSelectedRenderObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getSelectedRenderObject(String previousSelectionId, String groupName) {\n  return _safeJsonEncode(_getSelectedRenderObject(previousSelectionId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getSelectedSummaryWidget",
            "type": "dart:core.String",
            "desc": "<p>Returns a <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representing the currently selected <a href=\"widgets\/Element-class.html\">Element<\/a>\nif the selected <a href=\"widgets\/Element-class.html\">Element<\/a> should be shown in the summary tree otherwise\nreturns the first ancestor of the selected <a href=\"widgets\/Element-class.html\">Element<\/a> shown in the summary\ntree.<\/p>\n<p>If the currently selected <a href=\"widgets\/Element-class.html\">Element<\/a> is identical to the <a href=\"widgets\/Element-class.html\">Element<\/a>\nreferenced by <code>previousSelectionId<\/code> then the previous <code>DiagnosticNode<\/code> is\nreused.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "previousSelectionId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getSelectedSummaryWidget.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String getSelectedSummaryWidget(String previousSelectionId, String groupName) {\n  return _safeJsonEncode(_getSelectedSummaryWidget(previousSelectionId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "getSelectedWidget",
            "type": "dart:core.String",
            "desc": "<p>Returns a <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> representing the currently selected <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n<p>If the currently selected <a href=\"widgets\/Element-class.html\">Element<\/a> is identical to the <a href=\"widgets\/Element-class.html\">Element<\/a>\nreferenced by <code>previousSelectionId<\/code> then the previous <code>DiagnosticNode<\/code> is\nreused.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "previousSelectionId",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/getSelectedWidget.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString getSelectedWidget(String previousSelectionId, String groupName) {\n  return _safeJsonEncode(_getSelectedWidget(previousSelectionId, groupName));\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "initServiceExtensions",
            "type": "",
            "desc": "<p>Called to register service extensions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses\">github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#rpcs-requests-and-responses<\/a><\/li>\n<li>\n<a href=\"widgets\/WidgetInspectorService\/initServiceExtensions.html\">BindingBase.initServiceExtensions<\/a>, which explains when service\nextensions can be used.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "registerServiceExtensionCallback",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/initServiceExtensions.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void initServiceExtensions(_RegisterServiceExtensionCallback registerServiceExtensionCallback) {\n  _registerServiceExtensionCallback = registerServiceExtensionCallback;\n  assert(!_debugServiceExtensionsRegistered);\n  assert(() { _debugServiceExtensionsRegistered = true; return true; }());\n\n  SchedulerBinding.instance.addPersistentFrameCallback(_onFrameStart);\n\n  _registerBoolServiceExtension(\n    name: 'show',\n    getter: () async =&gt; WidgetsApp.debugShowWidgetInspectorOverride,\n    setter: (bool value) {\n      if (WidgetsApp.debugShowWidgetInspectorOverride == value) {\n        return Future&lt;void&gt;.value();\n      }\n      WidgetsApp.debugShowWidgetInspectorOverride = value;\n      return forceRebuild();\n    },\n  );\n\n  if (isWidgetCreationTracked()) {\n    \/\/ Service extensions that are only supported if widget creation locations\n    \/\/ are tracked.\n    _registerBoolServiceExtension(\n      name: 'trackRebuildDirtyWidgets',\n      getter: () async =&gt; _trackRebuildDirtyWidgets,\n      setter: (bool value) async {\n        if (value == _trackRebuildDirtyWidgets) {\n          return;\n        }\n        _rebuildStats.resetCounts();\n        _trackRebuildDirtyWidgets = value;\n        if (value) {\n          assert(debugOnRebuildDirtyWidget == null);\n          debugOnRebuildDirtyWidget = _onRebuildWidget;\n          \/\/ Trigger a rebuild so there are baseline stats for rebuilds\n          \/\/ performed by the app.\n          await forceRebuild();\n          return;\n        } else {\n          debugOnRebuildDirtyWidget = null;\n          return;\n        }\n      },\n    );\n\n    _registerBoolServiceExtension(\n      name: 'trackRepaintWidgets',\n      getter: () async =&gt; _trackRepaintWidgets,\n      setter: (bool value) async {\n        if (value == _trackRepaintWidgets) {\n          return;\n        }\n        _repaintStats.resetCounts();\n        _trackRepaintWidgets = value;\n        if (value) {\n          assert(debugOnProfilePaint == null);\n          debugOnProfilePaint = _onPaint;\n          \/\/ Trigger an immediate paint so the user has some baseline painting\n          \/\/ stats to view.\n          void markTreeNeedsPaint(RenderObject renderObject) {\n            renderObject.markNeedsPaint();\n            renderObject.visitChildren(markTreeNeedsPaint);\n          }\n          final RenderObject root = RendererBinding.instance.renderView;\n          if (root != null) {\n            markTreeNeedsPaint(root);\n          }\n        } else {\n          debugOnProfilePaint = null;\n        }\n      },\n    );\n  }\n\n  _registerSignalServiceExtension(\n    name: 'disposeAllGroups',\n    callback: disposeAllGroups,\n  );\n  _registerObjectGroupServiceExtension(\n    name: 'disposeGroup',\n    callback: disposeGroup,\n  );\n  _registerSignalServiceExtension(\n    name: 'isWidgetTreeReady',\n    callback: isWidgetTreeReady,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'disposeId',\n    callback: disposeId,\n  );\n  _registerServiceExtensionVarArgs(\n    name: 'setPubRootDirectories',\n    callback: setPubRootDirectories,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'setSelectionById',\n    callback: setSelectionById,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getParentChain',\n    callback: _getParentChain,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getProperties',\n    callback: _getProperties,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getChildren',\n    callback: _getChildren,\n  );\n\n  _registerServiceExtensionWithArg(\n    name: 'getChildrenSummaryTree',\n    callback: _getChildrenSummaryTree,\n  );\n\n  _registerServiceExtensionWithArg(\n    name: 'getChildrenDetailsSubtree',\n    callback: _getChildrenDetailsSubtree,\n  );\n\n  _registerObjectGroupServiceExtension(\n    name: 'getRootWidget',\n    callback: _getRootWidget,\n  );\n  _registerObjectGroupServiceExtension(\n    name: 'getRootRenderObject',\n    callback: _getRootRenderObject,\n  );\n  _registerObjectGroupServiceExtension(\n    name: 'getRootWidgetSummaryTree',\n    callback: _getRootWidgetSummaryTree,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getDetailsSubtree',\n    callback: _getDetailsSubtree,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getSelectedRenderObject',\n    callback: _getSelectedRenderObject,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getSelectedWidget',\n    callback: _getSelectedWidget,\n  );\n  _registerServiceExtensionWithArg(\n    name: 'getSelectedSummaryWidget',\n    callback: _getSelectedSummaryWidget,\n  );\n\n  _registerSignalServiceExtension(\n    name: 'isWidgetCreationTracked',\n    callback: isWidgetCreationTracked,\n  );\n  registerServiceExtension(\n    name: 'screenshot',\n    callback: (Map&lt;String, String&gt; parameters) async {\n      assert(parameters.containsKey('id'));\n      assert(parameters.containsKey('width'));\n      assert(parameters.containsKey('height'));\n\n      final ui.Image image = await screenshot(\n        toObject(parameters['id']),\n        width: double.parse(parameters['width']),\n        height: double.parse(parameters['height']),\n        margin: parameters.containsKey('margin') ?\n            double.parse(parameters['margin']) : 0.0,\n        maxPixelRatio: parameters.containsKey('maxPixelRatio') ?\n            double.parse(parameters['maxPixelRatio']) : 1.0,\n        debugPaint: parameters['debugPaint'] == 'true',\n      );\n      if (image == null) {\n        return &lt;String, Object&gt;{'result': null};\n      }\n      final ByteData byteData = await image.toByteData(format:ui.ImageByteFormat.png);\n\n      return &lt;String, Object&gt;{\n        'result': base64.encoder.convert(Uint8List.view(byteData.buffer)),\n      };\n    },\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "isWidgetCreationTracked",
            "type": "dart:core.bool",
            "desc": "<p>Returns whether <a href=\"widgets\/Widget-class.html\">Widget<\/a> creation locations are available.<\/p>\n<p><a href=\"widgets\/Widget-class.html\">Widget<\/a> creation locations are only available for debug mode builds when\nthe <code>--track-widget-creation<\/code> flag is passed to <code>flutter_tool<\/code>. Dart 2.0\nis required as injecting creation locations requires a\n<a href=\"https:\/\/github.com\/dart-lang\/sdk\/wiki\/Kernel-Documentation\">Dart Kernel Transformer<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/isWidgetCreationTracked.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isWidgetCreationTracked() {\n  _widgetCreationTracked ??= _WidgetForTypeTests() is _HasCreationLocation;\n  return _widgetCreationTracked;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isWidgetTreeReady",
            "type": "dart:core.bool",
            "desc": "<p>Returns whether the application has rendered its first frame and it is\nappropriate to display the Widget tree in the inspector.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/isWidgetTreeReady.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool isWidgetTreeReady([ String groupName ]) {\n  return WidgetsBinding.instance != null &amp;&amp;\n         WidgetsBinding.instance.debugDidSendFirstFrameEvent;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "performReassemble",
            "type": "",
            "desc": "<p>This method is called by <a href=\"widgets\/WidgetInspectorService\/performReassemble.html\">WidgetBinding.performReassemble<\/a> to flush caches\nof obsolete values after a hot reload.<\/p>\n<p>Do not call this method directly. Instead, use\n<a href=\"foundation\/BindingBase\/reassembleApplication.html\">BindingBase.reassembleApplication<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/performReassemble.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void performReassemble() {\n  _clearStats();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "postEvent",
            "type": "",
            "desc": "<p>All events dispatched by a <a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a> use this method\ninstead of calling <a href=\"widgets\/WidgetInspectorService\/postEvent.html\">developer.postEvent<\/a> directly so that tests for\n<a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a> can track which events were dispatched by\noverriding this method.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "eventKind",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "eventData",
                    "type": "dart:core.Map<dart:core.Object<dart:core.Object>>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Map",
                        "dart:core.Object",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/postEvent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid postEvent(String eventKind, Map&lt;Object, Object&gt; eventData) {\n  developer.postEvent(eventKind, eventData);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "registerServiceExtension",
            "type": "",
            "desc": "<p>Registers a service extension method with the given name (full\nname \"ext.flutter.inspector.name\").<\/p>\n<p>The given callback is called when the extension method is called. The\ncallback must return a value that can be converted to JSON using\n<code>json.encode()<\/code> (see <a href=\"dart-convert\/JsonEncoder-class.html\">JsonEncoder<\/a>). The return value is stored as a\nproperty named <code>result<\/code> in the JSON. In case of failure, the failure is\nreported to the remote caller and is dumped to the logs.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "callback",
                    "type": "foundation.ServiceExtensionCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/registerServiceExtension.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid registerServiceExtension({\n  @required String name,\n  @required ServiceExtensionCallback callback,\n}) {\n  _registerServiceExtensionCallback(\n    name: 'inspector.$name',\n    callback: callback,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "screenshot",
            "type": "dart:async.Future<dart:ui.Image>",
            "desc": "<p>Captures an image of the current state of an <code>object<\/code> that is a\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> or <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n<p>The returned <a href=\"dart-ui\/Image-class.html\">ui.Image<\/a> has uncompressed raw RGBA bytes and will be scaled\nto be at most <code>width<\/code> pixels wide and <code>height<\/code> pixels tall. The returned\nimage will never have a scale between logical pixels and the\nsize of the output image larger than maxPixelRatio.\n<code>margin<\/code> indicates the number of pixels relative to the unscaled size of\nthe <code>object<\/code> to include as a margin to include around the bounds of the\n<code>object<\/code> in the screenshot. Including a margin can be useful to capture\nareas that are slightly outside of the normal bounds of an object such as\nsome debug paint information.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "margin",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "maxPixelRatio",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugPaint",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/screenshot.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFuture&lt;ui.Image&gt; screenshot(\n  Object object, {\n  @required double width,\n  @required double height,\n  double margin = 0.0,\n  double maxPixelRatio = 1.0,\n  bool debugPaint = false,\n}) async {\n  if (object is! Element &amp;&amp; object is! RenderObject) {\n    return null;\n  }\n  final RenderObject renderObject = object is Element ? object.renderObject : object;\n  if (renderObject == null || !renderObject.attached) {\n    return null;\n  }\n\n  if (renderObject.debugNeedsLayout) {\n    final PipelineOwner owner = renderObject.owner;\n    assert(owner != null);\n    assert(!owner.debugDoingLayout);\n    owner\n      ..flushLayout()\n      ..flushCompositingBits()\n      ..flushPaint();\n\n    \/\/ If we still need layout, then that means that renderObject was skipped\n    \/\/ in the layout phase and therefore can't be painted. It is clearer to\n    \/\/ return null indicating that a screenshot is unavailable than to return\n    \/\/ an empty image.\n    if (renderObject.debugNeedsLayout) {\n      return null;\n    }\n  }\n\n  Rect renderBounds = _calculateSubtreeBounds(renderObject);\n  if (margin != 0.0) {\n    renderBounds = renderBounds.inflate(margin);\n  }\n  if (renderBounds.isEmpty) {\n    return null;\n  }\n\n  final double pixelRatio = math.min(\n    maxPixelRatio,\n    math.min(\n      width \/ renderBounds.width,\n      height \/ renderBounds.height,\n    ),\n  );\n\n  return _ScreenshotPaintingContext.toImage(\n    renderObject,\n    renderBounds,\n    pixelRatio: pixelRatio,\n    debugPaint: debugPaint,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:ui.Image"
            ]
        },
        {
            "name": "setPubRootDirectories",
            "type": "",
            "desc": "<p>Set the list of directories that should be considered part of the local\nproject.<\/p>\n<p>The local project directories are used to distinguish widgets created by\nthe local project over widgets created from inside the framework.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "pubRootDirectories",
                    "type": "dart:core.List<dart:core.Object>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.Object"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/setPubRootDirectories.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid setPubRootDirectories(List&lt;Object&gt; pubRootDirectories) {\n  _pubRootDirectories = pubRootDirectories.map&lt;String&gt;(\n    (Object directory) =&gt; Uri.parse(directory).path,\n  ).toList();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "setSelection",
            "type": "dart:core.bool",
            "desc": "<p>Set the <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a> selection to the specified <code>object<\/code> if it is\na valid object to set as the inspector selection.<\/p>\n<p>Returns true if the selection was changed.<\/p>\n<p>The <code>groupName<\/code> parameter is not needed but is specified to regularize the\nAPI surface of methods called from the Flutter IntelliJ Plugin.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/setSelection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool setSelection(Object object, [ String groupName ]) {\n  if (object is Element || object is RenderObject) {\n    if (object is Element) {\n      if (object == selection.currentElement) {\n        return false;\n      }\n      selection.currentElement = object;\n    } else {\n      if (object == selection.current) {\n        return false;\n      }\n      selection.current = object;\n    }\n    if (selectionChangedCallback != null) {\n      if (SchedulerBinding.instance.schedulerPhase == SchedulerPhase.idle) {\n        selectionChangedCallback();\n      } else {\n        \/\/ It isn't safe to trigger the selection change callback if we are in\n        \/\/ the middle of rendering the frame.\n        SchedulerBinding.instance.scheduleTask(\n          selectionChangedCallback,\n          Priority.touch,\n        );\n      }\n    }\n    return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setSelectionById",
            "type": "dart:core.bool",
            "desc": "<p>Set the <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a> selection to the object matching the specified\nid if the object is valid object to set as the inspector selection.<\/p>\n<p>Returns true if the selection was changed.<\/p>\n<p>The <code>groupName<\/code> parameter is not required by is added to regularize the\nAPI surface of methods called from the Flutter IntelliJ Plugin.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/setSelectionById.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool setSelectionById(String id, [ String groupName ]) {\n  return setSelection(toObject(id), groupName);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toId",
            "type": "dart:core.String",
            "desc": "<p>Returns a unique id for <code>object<\/code> that will remain live at least until\n<a href=\"widgets\/WidgetInspectorService\/disposeGroup.html\">disposeGroup<\/a> is called on <code>groupName<\/code> or <code>dispose<\/code> is called on the id\nreturned by this method.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "dart:core.Object",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/toId.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nString toId(Object object, String groupName) {\n  if (object == null)\n    return null;\n\n  final Set&lt;_InspectorReferenceData&gt; group = _groups.putIfAbsent(groupName, () =&gt; Set&lt;_InspectorReferenceData&gt;.identity());\n  String id = _objectToId[object];\n  _InspectorReferenceData referenceData;\n  if (id == null) {\n    id = 'inspector-$_nextId';\n    _nextId += 1;\n    _objectToId[object] = id;\n    referenceData = _InspectorReferenceData(object);\n    _idToReferenceData[id] = referenceData;\n    group.add(referenceData);\n  } else {\n    referenceData = _idToReferenceData[id];\n    if (group.add(referenceData))\n      referenceData.count += 1;\n  }\n  return id;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toObject",
            "type": "dart:core.Object",
            "desc": "<p>Returns the Dart object associated with a reference id.<\/p>\n<p>The <code>groupName<\/code> parameter is not required by is added to regularize the\nAPI surface of the methods in this class called from the Flutter IntelliJ\nPlugin.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/toObject.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nObject toObject(String id, [ String groupName ]) {\n  if (id == null)\n    return null;\n\n  final _InspectorReferenceData data = _idToReferenceData[id];\n  if (data == null) {\n    throw FlutterError('Id does not exist.');\n  }\n  return data.object;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toObjectForSourceLocation",
            "type": "dart:core.Object",
            "desc": "<p>Returns the object to introspect to determine the source location of an\nobject's class.<\/p>\n<p>The Dart object for the id is returned for all cases but <a href=\"widgets\/Element-class.html\">Element<\/a> objects\nwhere the <a href=\"widgets\/Widget-class.html\">Widget<\/a> configuring the <a href=\"widgets\/Element-class.html\">Element<\/a> is returned instead as the\nclass of the <a href=\"widgets\/Widget-class.html\">Widget<\/a> is more relevant than the class of the <a href=\"widgets\/Element-class.html\">Element<\/a>.<\/p>\n<p>The <code>groupName<\/code> parameter is not required by is added to regularize the\nAPI surface of methods called from the Flutter IntelliJ Plugin.<\/p>\n    ",
            "static": false,
            "memberOf": "widgets.WidgetInspectorService",
            "sig": "",
            "params": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "groupName",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "widgets\/WidgetInspectorService\/toObjectForSourceLocation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nObject toObjectForSourceLocation(String id, [ String groupName ]) {\n  final Object object = toObject(id);\n  if (object is Element) {\n    return object.widget;\n  }\n  return object;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "instance",
            "type": "widgets.WidgetInspectorService",
            "types": [],
            "desc": "<p>The current <a href=\"widgets\/WidgetInspectorService-mixin.html\">WidgetInspectorService<\/a>.<\/p>\n        ",
            "memberOf": "widgets.WidgetInspectorService",
            "isConstant": false,
            "href": "widgets\/WidgetInspectorService\/instance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static WidgetInspectorService get instance =&gt; _instance;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selection",
            "type": "widgets.InspectorSelection",
            "types": [],
            "desc": "<p>Ground truth tracking what object(s) are currently selected used by both\nGUI tools such as the Flutter IntelliJ Plugin and the <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a>\ndisplayed on the device.<\/p>\n        ",
            "memberOf": "widgets.WidgetInspectorService",
            "isConstant": false,
            "href": "widgets\/WidgetInspectorService\/selection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InspectorSelection selection = InspectorSelection()\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "selectionChangedCallback",
            "type": "widgets.InspectorSelectionChangedCallback",
            "types": [],
            "desc": "<p>Callback typically registered by the <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a> to receive\nnotifications when <a href=\"widgets\/WidgetInspectorService\/selection.html\">selection<\/a> changes.<\/p>\n<p>The Flutter IntelliJ Plugin does not need to listen for this event as it\ninstead listens for <code>dart:developer<\/code> <code>inspect<\/code> events which also trigger\nwhen the inspection target changes on device.<\/p>\n        ",
            "memberOf": "widgets.WidgetInspectorService",
            "isConstant": false,
            "href": "widgets\/WidgetInspectorService\/selectionChangedCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InspectorSelectionChangedCallback selectionChangedCallback\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": true,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "widgets\/WidgetInspectorService-mixin.html",
    "desc": "<p>Service used by GUI tools to interact with the <a href=\"widgets\/WidgetInspector-class.html\">WidgetInspector<\/a>.<\/p>\n<p>Calls to this object are typically made from GUI tools such as the <a href=\"https:\/\/github.com\/flutter\/flutter-intellij\/blob\/master\/README.md\">Flutter\nIntelliJ Plugin<\/a>\nusing the <a href=\"https:\/\/github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md\">Dart VM Service protocol<\/a>.\nThis class uses its own object id and manages object lifecycles itself\ninstead of depending on the <a href=\"https:\/\/github.com\/dart-lang\/sdk\/blob\/master\/runtime\/vm\/service\/service.md#getobject\">object ids<\/a>\nspecified by the VM Service Protocol because the VM Service Protocol ids\nexpire unpredictably. Object references are tracked in groups so that tools\nthat clients can use dereference all objects in a group with a single\noperation making it easier to avoid memory leaks.<\/p>\n<p>All methods in this class are appropriate to invoke from debugging tools\nusing the Observatory service protocol to evaluate Dart expressions of the\nform <code>WidgetInspectorService.instance.methodName(arg1, arg2, ...)<\/code>. If you\nmake changes to any instance method of this class you need to verify that\nthe <a href=\"https:\/\/github.com\/flutter\/flutter-intellij\/blob\/master\/README.md\">Flutter IntelliJ Plugin<\/a>\nwidget inspector support still works with the changes.<\/p>\n<p>All methods returning String values return JSON.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "mixin",
    "shortname": "WidgetInspectorService"
}