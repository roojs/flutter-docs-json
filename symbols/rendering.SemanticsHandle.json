{
    "name": "rendering.SemanticsHandle",
    "extends": [],
    "memberOf": "rendering",
    "events": [],
    "methods": [
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>Closes the semantics handle and stops calling <a href=\"rendering\/SemanticsHandle\/listener.html\">listener<\/a> when the\nsemantics updates.<\/p>\n<p>When all the outstanding <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a> objects for a given\n<a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> are closed, the <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> will stop updating the\nsemantics tree.<\/p>\n    ",
            "static": false,
            "memberOf": "rendering.SemanticsHandle",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "rendering\/SemanticsHandle\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() {\n  assert(() {\n    if (_owner == null) {\n      throw FlutterError(\n        'SemanticsHandle has already been disposed.\\n'\n        'Each SemanticsHandle should be disposed exactly once.'\n      );\n    }\n    return true;\n  }());\n  if (_owner != null) {\n    if (listener != null)\n      _owner.semanticsOwner.removeListener(listener);\n    _owner._didDisposeSemanticsHandle();\n    _owner = null;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "listener",
            "type": "dart:ui.VoidCallback",
            "types": [],
            "desc": "<p>The callback that will be notified when the semantics tree updates.<\/p>\n        ",
            "memberOf": "rendering.SemanticsHandle",
            "isConstant": false,
            "href": "rendering\/SemanticsHandle\/listener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback listener\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "rendering\/SemanticsHandle-class.html",
    "desc": "<p>A reference to the semantics tree.<\/p>\n<p>The framework maintains the semantics tree (used for accessibility and\nindexing) only when there is at least one client holding an open\n<a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>.<\/p>\n<p>The framework notifies the client that it has updated the semantics tree by\ncalling the <a href=\"rendering\/SemanticsHandle\/listener.html\">listener<\/a> callback. When the client no longer needs the\nsemantics tree, the client can call <a href=\"rendering\/SemanticsHandle\/dispose.html\">dispose<\/a> on the <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>,\nwhich stops these callbacks and closes the <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>. When all the\noutstanding <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a> objects are closed, the framework stops\nupdating the semantics tree.<\/p>\n<p>To obtain a <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>, call <a href=\"rendering\/PipelineOwner\/ensureSemantics.html\">PipelineOwner.ensureSemantics<\/a> on the\n<a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> for the render tree from which you wish to read semantics.\nYou can obtain the <a href=\"rendering\/PipelineOwner-class.html\">PipelineOwner<\/a> using the <a href=\"rendering\/RenderObject\/owner.html\">RenderObject.owner<\/a> property.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "SemanticsHandle"
}