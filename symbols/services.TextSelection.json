{
    "name": "services.TextSelection",
    "extends": [
        "services.TextRange",
        "dart:core.Object"
    ],
    "memberOf": "services",
    "events": [],
    "methods": [
        {
            "name": "operator ==",
            "type": "dart:core.bool",
            "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"services\/TextSelection\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextSelection",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "services\/TextSelection\/operator_equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! TextSelection)\n    return false;\n  final TextSelection typedOther = other;\n  return typedOther.baseOffset == baseOffset\n      &amp;&amp; typedOther.extentOffset == extentOffset\n      &amp;&amp; typedOther.affinity == affinity\n      &amp;&amp; typedOther.isDirectional == isDirectional;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextSelection",
            "type": "",
            "desc": "<p>Creates a text selection.<\/p>\n<p>The <code>baseOffset<\/code> and <code>extentOffset<\/code> arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextSelection",
            "sig": "",
            "params": [
                {
                    "name": "baseOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "extentOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "affinity",
                    "type": "dart:ui.TextAffinity",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDirectional",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "services\/TextSelection\/TextSelection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSelection({\n  @required this.baseOffset,\n  @required this.extentOffset,\n  this.affinity = TextAffinity.downstream,\n  this.isDirectional = false,\n}) : super(\n       start: baseOffset &lt; extentOffset ? baseOffset : extentOffset,\n       end: baseOffset &lt; extentOffset ? extentOffset : baseOffset\n     );<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextSelection.collapsed",
            "type": "",
            "desc": "<p>Creates a collapsed selection at the given offset.<\/p>\n<p>A collapsed selection starts and ends at the same offset, which means it\ncontains zero characters but instead serves as an insertion point in the\ntext.<\/p>\n<p>The <code>offset<\/code> argument must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextSelection",
            "sig": "",
            "params": [
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "affinity",
                    "type": "dart:ui.TextAffinity",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "services\/TextSelection\/TextSelection.collapsed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSelection.collapsed({\n  @required int offset,\n  this.affinity = TextAffinity.downstream,\n}) : baseOffset = offset,\n     extentOffset = offset,\n     isDirectional = false,\n     super.collapsed(offset);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "copyWith",
            "type": "services.TextSelection",
            "desc": "<p>Creates a new <a href=\"services\/TextSelection-class.html\">TextSelection<\/a> based on the current selection, with the\nprovided parameters overridden.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextSelection",
            "sig": "",
            "params": [
                {
                    "name": "baseOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "extentOffset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "affinity",
                    "type": "dart:ui.TextAffinity",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "isDirectional",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "services\/TextSelection\/copyWith.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection copyWith({\n  int baseOffset,\n  int extentOffset,\n  TextAffinity affinity,\n  bool isDirectional,\n}) {\n  return TextSelection(\n    baseOffset: baseOffset ?? this.baseOffset,\n    extentOffset: extentOffset ?? this.extentOffset,\n    affinity: affinity ?? this.affinity,\n    isDirectional: isDirectional ?? this.isDirectional,\n  );\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "TextSelection.fromPosition",
            "type": "",
            "desc": "<p>Creates a collapsed selection at the given text position.<\/p>\n<p>A collapsed selection starts and ends at the same offset, which means it\ncontains zero characters but instead serves as an insertion point in the\ntext.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextSelection",
            "sig": "",
            "params": [
                {
                    "name": "position",
                    "type": "dart:ui.TextPosition",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "services\/TextSelection\/TextSelection.fromPosition.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection.fromPosition(TextPosition position)\n  : baseOffset = position.offset,\n    extentOffset = position.offset,\n    affinity = position.affinity,\n    isDirectional = false,\n    super.collapsed(position.offset);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "services.TextSelection",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "services\/TextSelection\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(baseOffset: $baseOffset, extentOffset: $extentOffset, affinity: $affinity, isDirectional: $isDirectional)';\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "affinity",
            "type": "dart:ui.TextAffinity",
            "types": [],
            "desc": "<p>If the text range is collapsed and has more than one visual location\n(e.g., occurs at a line break), which of the two locations to use when\npainting the caret.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/affinity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAffinity affinity\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "base",
            "type": "dart:ui.TextPosition",
            "types": [],
            "desc": "<p>The position at which the selection originates.<\/p>\n<p>Might be larger than, smaller than, or equal to extent.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/base.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition get base =&gt; TextPosition(offset: baseOffset, affinity: affinity);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "baseOffset",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The offset at which the selection originates.<\/p>\n<p>Might be larger than, smaller than, or equal to extent.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/baseOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int baseOffset\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "extent",
            "type": "dart:ui.TextPosition",
            "types": [],
            "desc": "<p>The position at which the selection terminates.<\/p>\n<p>When the user uses the arrow keys to adjust the selection, this is the\nvalue that changes. Similarly, if the current theme paints a caret on one\nside of the selection, this is the location at which to paint the caret.<\/p>\n<p>Might be larger than, smaller than, or equal to base.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/extent.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition get extent =&gt; TextPosition(offset: extentOffset, affinity: affinity);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "extentOffset",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The offset at which the selection terminates.<\/p>\n<p>When the user uses the arrow keys to adjust the selection, this is the\nvalue that changes. Similarly, if the current theme paints a caret on one\nside of the selection, this is the location at which to paint the caret.<\/p>\n<p>Might be larger than, smaller than, or equal to base.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/extentOffset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int extentOffset\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "hashCode",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"services\/TextSelection\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"services\/TextSelection\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/hashCode.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(\n  baseOffset.hashCode,\n  extentOffset.hashCode,\n  affinity.hashCode,\n  isDirectional.hashCode,\n);<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "isDirectional",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether this selection has disambiguated its base and extent.<\/p>\n<p>On some platforms, the base and extent are not disambiguated until the\nfirst time the user adjusts the selection. At that point, either the start\nor the end of the selection becomes the base and the other one becomes the\nextent and is adjusted.<\/p>\n        ",
            "memberOf": "services.TextSelection",
            "isConstant": false,
            "href": "services\/TextSelection\/isDirectional.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDirectional\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "services\/TextSelection-class.html",
    "desc": "<p>A range of text that represents a selection.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "TextSelection"
}