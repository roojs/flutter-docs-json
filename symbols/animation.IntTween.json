{
    "desc": "<p>An interpolation between two integers that rounds.<\/p>\n<p>This class specializes the interpolation of <a href=\"animation\/Tween-class.html\">Tween&lt;int&gt;<\/a> to be\nappropriate for integers by interpolating between the given begin\nand end values and then rounding the result to the nearest\ninteger.<\/p>\n<p>This is the closest approximation to a linear tween that is possible with an\ninteger. Compare to <a href=\"animation\/StepTween-class.html\">StepTween<\/a> and <a href=\"animation\/Tween-class.html\">Tween&lt;double&gt;<\/a>.<\/p>\n<p>See <a href=\"animation\/Tween-class.html\">Tween<\/a> for a discussion on how to use interpolation objects.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "animation\/IntTween-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "animation",
    "name": "animation.IntTween",
    "shortname": "IntTween",
    "extends": [
        "dart:core.int",
        "animation.Tween",
        "dart:core.int",
        "animation.Animatable",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an int tween.<\/p>\n<p>The <code>begin<\/code> and <code>end<\/code> properties must be non-null before the tween is\nfirst used, but the arguments can be null if the values are going to be\nfilled in later.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IntTween({ int begin, int end }) : super(begin: begin, end: end);<\/code><\/pre>\n    ",
            "href": "animation\/IntTween\/IntTween.html",
            "isDeprecated": false,
            "type": "",
            "name": "IntTween",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "animation.IntTween",
            "params": [
                {
                    "name": "begin",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Returns the value this variable has at the given animation clock value.<\/p>\n<p>The default implementation of this method uses the <code>+<\/code>, <code>-<\/code>, and <code>*<\/code>\noperators on <code>T<\/code>. The <a href=\"animation\/Tween\/begin.html\">begin<\/a> and <a href=\"animation\/Tween\/end.html\">end<\/a> properties must therefore be\nnon-null by the time this method is called.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint lerp(double t) =&gt; (begin + (end - begin) * t).round();<\/code><\/pre>\n    ",
            "href": "animation\/IntTween\/lerp.html",
            "isDeprecated": false,
            "type": "dart:core.int",
            "name": "lerp",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.IntTween",
            "params": [
                {
                    "name": "t",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.double"
                }
            ]
        }
    ],
    "props": []
}