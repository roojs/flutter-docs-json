{
    "desc": "<p>Error class used to report Flutter-specific assertion failures and\ncontract violations.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "foundation\/FlutterError-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "foundation",
    "name": "foundation.FlutterError",
    "shortname": "FlutterError",
    "extends": [
        "dart:core.AssertionError",
        "dart:core.Error",
        "dart:core.Object"
    ],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called whenever the Flutter framework catches an error.<\/p>\n<p>The default behavior is to call <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a>.<\/p>\n<p>You can set this to your own function to override this default behavior.\nFor example, you could report all errors to your server.<\/p>\n<p>If the error handler throws an exception, it will not be caught by the\nFlutter framework.<\/p>\n<p>Set this to null to silently catch and ignore errors. This is not\nrecommended.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static FlutterExceptionHandler onError = dumpErrorToConsole\n\n<\/code><\/pre>\n        ",
            "href": "foundation\/FlutterError\/onError.html",
            "isDeprecated": false,
            "type": "foundation.FlutterExceptionHandler",
            "name": "onError",
            "memberOf": "foundation.FlutterError",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Creates a <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a>.<\/p>\n<p>See <code>message<\/code> for details on the format that the message should\ntake.<\/p>\n<p>Include as much detail as possible in the full error message,\nincluding specifics about the state of the app that might be\nrelevant to debugging the error.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FlutterError(String message) : super(message);<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/FlutterError.html",
            "isDeprecated": false,
            "type": "",
            "name": "FlutterError",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.FlutterError",
            "params": [
                {
                    "name": "message",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Converts a stack to a string that is more readable by omitting stack\nframes that correspond to Dart internals.<\/p>\n<p>This is the default filter used by <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a> if the\n<a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> object has no <a href=\"foundation\/FlutterErrorDetails\/stackFilter.html\">FlutterErrorDetails.stackFilter<\/a>\ncallback.<\/p>\n<p>This function expects its input to be in the format used by\n<a href=\"foundation\/FlutterError\/toString.html\">StackTrace.toString()<\/a>. The output of this function is similar to that\nformat but the frame numbers will not be consecutive (frames are elided)\nand the final line may be prose rather than a stack frame.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;String&gt; defaultStackFilter(Iterable&lt;String&gt; frames) {\n  const List&lt;String&gt; filteredPackages = &lt;String&gt;[\n    'dart:async-patch',\n    'dart:async',\n    'package:stack_trace',\n  ];\n  const List&lt;String&gt; filteredClasses = &lt;String&gt;[\n    '_AssertionError',\n    '_FakeAsync',\n    '_FrameCallbackEntry',\n  ];\n  final RegExp stackParser = RegExp(r'^#[0-9]+ +([^.]+).* \\(([^\/\\\\]*)[\/\\\\].+:[0-9]+(?::[0-9]+)?\\)$');\n  final RegExp packageParser = RegExp(r'^([^:]+):(.+)$');\n  final List&lt;String&gt; result = &lt;String&gt;[];\n  final List&lt;String&gt; skipped = &lt;String&gt;[];\n  for (String line in frames) {\n    final Match match = stackParser.firstMatch(line);\n    if (match != null) {\n      assert(match.groupCount == 2);\n      if (filteredPackages.contains(match.group(2))) {\n        final Match packageMatch = packageParser.firstMatch(match.group(2));\n        if (packageMatch != null &amp;&amp; packageMatch.group(1) == 'package') {\n          skipped.add('package ${packageMatch.group(2)}'); \/\/ avoid \"package package:foo\"\n        } else {\n          skipped.add('package ${match.group(2)}');\n        }\n        continue;\n      }\n      if (filteredClasses.contains(match.group(1))) {\n        skipped.add('class ${match.group(1)}');\n        continue;\n      }\n    }\n    result.add(line);\n  }\n  if (skipped.length == 1) {\n    result.add('(elided one frame from ${skipped.single})');\n  } else if (skipped.length &gt; 1) {\n    final List&lt;String&gt; where = Set&lt;String&gt;.from(skipped).toList()..sort();\n    if (where.length &gt; 1)\n      where[where.length - 1] = 'and ${where.last}';\n    if (where.length &gt; 2) {\n      result.add('(elided ${skipped.length} frames from ${where.join(\", \")})');\n    } else {\n      result.add('(elided ${skipped.length} frames from ${where.join(\" \")})');\n    }\n  }\n  return result;\n}<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/defaultStackFilter.html",
            "isDeprecated": false,
            "type": "dart:core.Iterable<dart:core.String>",
            "name": "defaultStackFilter",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.FlutterError",
            "params": [
                {
                    "name": "frames",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.String>"
                }
            ]
        },
        {
            "desc": "<p>Prints the given exception details to the console.<\/p>\n<p>The first time this is called, it dumps a very verbose message to the\nconsole using <a href=\"foundation\/debugPrint.html\">debugPrint<\/a>.<\/p>\n<p>Subsequent calls only dump the first line of the exception, unless\n<code>forceReport<\/code> is set to true (in which case it dumps the verbose message).<\/p>\n<p>Call <a href=\"foundation\/FlutterError\/resetErrorCount.html\">resetErrorCount<\/a> to cause this method to go back to acting as if it\nhad not been called before (so the next message is verbose again).<\/p>\n<p>The default behavior for the <a href=\"foundation\/FlutterError\/onError.html\">onError<\/a> handler is to call this function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void dumpErrorToConsole(FlutterErrorDetails details, { bool forceReport = false }) {\n  assert(details != null);\n  assert(details.exception != null);\n  bool reportError = details.silent != true; \/\/ could be null\n  assert(() {\n    \/\/ In checked mode, we ignore the \"silent\" flag.\n    reportError = true;\n    return true;\n  }());\n  if (!reportError &amp;&amp; !forceReport)\n    return;\n  if (_errorCount == 0 || forceReport) {\n    final String header = '\\u2550\\u2550\\u2561 EXCEPTION CAUGHT BY ${details.library} \\u255E'.toUpperCase();\n    final String footer = '\\u2550' * wrapWidth;\n    debugPrint('$header${\"\\u2550\" * (footer.length - header.length)}');\n    final String verb = 'thrown${ details.context != null ? \" ${details.context}\" : \"\"}';\n    if (details.exception is NullThrownError) {\n      debugPrint('The null value was $verb.', wrapWidth: wrapWidth);\n    } else if (details.exception is num) {\n      debugPrint('The number ${details.exception} was $verb.', wrapWidth: wrapWidth);\n    } else {\n      String errorName;\n      if (details.exception is AssertionError) {\n        errorName = 'assertion';\n      } else if (details.exception is String) {\n        errorName = 'message';\n      } else if (details.exception is Error || details.exception is Exception) {\n        errorName = '${details.exception.runtimeType}';\n      } else {\n        errorName = '${details.exception.runtimeType} object';\n      }\n      \/\/ Many exception classes put their type at the head of their message.\n      \/\/ This is redundant with the way we display exceptions, so attempt to\n      \/\/ strip out that header when we see it.\n      final String prefix = '${details.exception.runtimeType}: ';\n      String message = details.exceptionAsString();\n      if (message.startsWith(prefix))\n        message = message.substring(prefix.length);\n      debugPrint('The following $errorName was $verb:\\n$message', wrapWidth: wrapWidth);\n    }\n    Iterable&lt;String&gt; stackLines = (details.stack != null) ? details.stack.toString().trimRight().split('\\n') : null;\n    if ((details.exception is AssertionError) &amp;&amp; (details.exception is! FlutterError)) {\n      bool ourFault = true;\n      if (stackLines != null) {\n        final List&lt;String&gt; stackList = stackLines.take(2).toList();\n        if (stackList.length &gt;= 2) {\n          \/\/ TODO(ianh): This has bitrotted and is no longer matching. https:\/\/github.com\/flutter\/flutter\/issues\/4021\n          final RegExp throwPattern = RegExp(r'^#0 +_AssertionError._throwNew \\(dart:.+\\)$');\n          final RegExp assertPattern = RegExp(r'^#1 +[^(]+ \\((.+?):([0-9]+)(?::[0-9]+)?\\)$');\n          if (throwPattern.hasMatch(stackList[0])) {\n            final Match assertMatch = assertPattern.firstMatch(stackList[1]);\n            if (assertMatch != null) {\n              assert(assertMatch.groupCount == 2);\n              final RegExp ourLibraryPattern = RegExp(r'^package:flutter\/');\n              ourFault = ourLibraryPattern.hasMatch(assertMatch.group(1));\n            }\n          }\n        }\n      }\n      if (ourFault) {\n        debugPrint('\\nEither the assertion indicates an error in the framework itself, or we should '\n                   'provide substantially more information in this error message to help you determine '\n                   'and fix the underlying cause.', wrapWidth: wrapWidth);\n        debugPrint('In either case, please report this assertion by filing a bug on GitHub:', wrapWidth: wrapWidth);\n        debugPrint('  https:\/\/github.com\/flutter\/flutter\/issues\/new?template=BUG.md');\n      }\n    }\n    if (details.stack != null) {\n      debugPrint('\\nWhen the exception was thrown, this was the stack:', wrapWidth: wrapWidth);\n      if (details.stackFilter != null) {\n        stackLines = details.stackFilter(stackLines);\n      } else {\n        stackLines = defaultStackFilter(stackLines);\n      }\n      for (String line in stackLines)\n        debugPrint(line, wrapWidth: wrapWidth);\n    }\n    if (details.informationCollector != null) {\n      final StringBuffer information = StringBuffer();\n      details.informationCollector(information);\n      debugPrint('\\n${information.toString().trimRight()}', wrapWidth: wrapWidth);\n    }\n    debugPrint(footer);\n  } else {\n    debugPrint('Another exception was thrown: ${details.exceptionAsString().split(\"\\n\")[0].trimLeft()}');\n  }\n  _errorCount += 1;\n}<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/dumpErrorToConsole.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "dumpErrorToConsole",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.FlutterError",
            "params": [
                {
                    "name": "details",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.FlutterErrorDetails"
                },
                {
                    "name": "forceReport",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Calls <a href=\"foundation\/FlutterError\/onError.html\">onError<\/a> with the given details, unless it is null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void reportError(FlutterErrorDetails details) {\n  assert(details != null);\n  assert(details.exception != null);\n  if (onError != null)\n    onError(details);\n}<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/reportError.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "reportError",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.FlutterError",
            "params": [
                {
                    "name": "details",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "foundation.FlutterErrorDetails"
                }
            ]
        },
        {
            "desc": "<p>Resets the count of errors used by <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a> to decide whether\nto show a complete error message or an abbreviated one.<\/p>\n<p>After this is called, the next error message will be shown in full.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void resetErrorCount() {\n  _errorCount = 0;\n}<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/resetErrorCount.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "resetErrorCount",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.FlutterError",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; message;<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.FlutterError",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The message associated with this error.<\/p>\n<p>The message may have newlines in it. The first line should be a terse\ndescription of the error, e.g. \"Incorrect GlobalKey usage\" or \"setState()\nor markNeedsBuild() called during build\". Subsequent lines should contain\nsubstantial additional information, ideally sufficient to develop a\ncorrect solution to the problem.<\/p>\n<p>In some cases, when a FlutterError is reported to the user, only the first\nline is included. For example, Flutter will typically only fully report\nthe first exception at runtime, displaying only the first line of\nsubsequent errors.<\/p>\n<p>All sentences in the error should be correctly punctuated (i.e.,\ndo end the error message with a period).<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get message =&gt; super.message;<\/code><\/pre>\n        ",
            "href": "foundation\/FlutterError\/message.html",
            "name": "message",
            "isDeprecated": false,
            "type": "dart:core.String",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "foundation.FlutterError",
            "params": []
        },
        {
            "desc": "<p>The width to which <a href=\"foundation\/FlutterError\/dumpErrorToConsole.html\">dumpErrorToConsole<\/a> will wrap lines.<\/p>\n<p>This can be used to ensure strings will not exceed the length at which\nthey will wrap, e.g. when placing ASCII art diagrams in messages.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int wrapWidth = 100\n\n<\/code><\/pre>\n    ",
            "href": "foundation\/FlutterError\/wrapWidth-constant.html",
            "name": "wrapWidth",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "constant",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "foundation.FlutterError",
            "params": []
        }
    ]
}