{
    "desc": "<p>Use the <a href=\"package-test_api_test_api\/throwsA.html\">throwsA<\/a> function instead.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "package-test_api_test_api\/Throws-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "test_api",
    "name": "test_api.Throws",
    "shortname": "Throws",
    "extends": [
        "matcher.Matcher",
        "dart:core.Object"
    ],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": null,
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Throws([Matcher matcher]) : this._matcher = matcher;<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/Throws\/Throws.html",
            "isDeprecated": "0",
            "type": "",
            "name": "Throws",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "test_api.Throws",
            "params": [
                {
                    "name": "matcher",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "matcher.Matcher"
                }
            ]
        },
        {
            "desc": "<p>Builds a textual description of the matcher.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Description describe(Description description) {\n  if (_matcher == null) {\n    return description.add(\"throws\");\n  } else {\n    return description.add('throws ').addDescriptionOf(_matcher);\n  }\n}<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/Throws\/describe.html",
            "isDeprecated": "0",
            "type": "matcher.Description",
            "name": "describe",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "test_api.Throws",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "matcher.Description"
                }
            ]
        },
        {
            "desc": "<p>Builds a textual description of a specific mismatch.<\/p>\n<p><code>item<\/code> is the value that was tested by <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a>; <code>matchState<\/code> is\nthe <a href=\"dart-core\/Map-class.html\">Map<\/a> that was passed to and supplemented by <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a>\nwith additional information about the mismatch, and <code>mismatchDescription<\/code>\nis the <a href=\"package-matcher_matcher\/Description-class.html\">Description<\/a> that is being built to describe the mismatch.<\/p>\n<p>A few matchers make use of the <code>verbose<\/code> flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Description describeMismatch(\n        item, Description description, Map matchState, bool verbose) =&gt;\n    StringDescription(matchState[this] as String);<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/Throws\/describeMismatch.html",
            "isDeprecated": "0",
            "type": "matcher.Description",
            "name": "describeMismatch",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "test_api.Throws",
            "params": [
                {
                    "name": "description",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "matcher.Description"
                },
                {
                    "name": "item",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "matchState",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Map"
                },
                {
                    "name": "verbose",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Returns <code>null<\/code> if this matches <code>item<\/code>, or a <a href=\"dart-core\/String-class.html\">String<\/a> description of the\nfailure if it doesn't match.<\/p>\n<p>This can return a <a href=\"dart-async\/Future-class.html\">Future<\/a> or a synchronous value. If it returns a\n<a href=\"dart-async\/Future-class.html\">Future<\/a>, neither <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> nor the test will complete until that <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes.<\/p>\n<p>If this returns a <a href=\"dart-core\/String-class.html\">String<\/a> synchronously, <a href=\"package-test_api_test_api\/expect.html\">expect<\/a> will synchronously\nthrow a <a href=\"package-test_api_test_api\/TestFailure-class.html\">TestFailure<\/a> and <a href=\"package-test_api_test_api\/Throws\/matches.html\">matches<\/a> will synchronusly return <code>false<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/*FutureOr&lt;String&gt;*\/ matchAsync(item) {\n  if (item is! Function &amp;&amp; item is! Future) {\n    return \"was not a Function or Future\";\n  }\n\n  if (item is Future) {\n    return item.then((value) =&gt; indent(prettyPrint(value), first: 'emitted '),\n        onError: _check);\n  }\n\n  try {\n    var value = item();\n    if (value is Future) {\n      return value.then(\n          (value) =&gt; indent(prettyPrint(value),\n              first: 'returned a Future that emitted '),\n          onError: _check);\n    }\n\n    return indent(prettyPrint(value), first: 'returned ');\n  } catch (error, trace) {\n    return _check(error, trace);\n  }\n}<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/Throws\/matchAsync.html",
            "isDeprecated": "0",
            "type": "<dynamic>",
            "name": "matchAsync",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "test_api.Throws",
            "params": [
                {
                    "name": "item",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                }
            ]
        },
        {
            "desc": "<p>Does the matching of the actual vs expected values.<\/p>\n<p><code>item<\/code> is the actual value. <code>matchState<\/code> can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in <a href=\"package-test_api_test_api\/Throws\/describeMismatch.html\">describeMismatch<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool matches(item, Map matchState) {\n  var result = matchAsync(item);\n  expect(result,\n      anyOf([equals(null), TypeMatcher&lt;Future&gt;(), TypeMatcher&lt;String&gt;()]),\n      reason: \"matchAsync() may only return a String, a Future, or null.\");\n\n  if (result is Future) {\n    Invoker.current.addOutstandingCallback();\n    result.then((realResult) {\n      if (realResult != null) {\n        \/\/ ignore: deprecated_member_use\n        fail(formatFailure(this, item, realResult as String));\n      }\n      Invoker.current.removeOutstandingCallback();\n    });\n  } else if (result is String) {\n    matchState[this] = result;\n    return false;\n  }\n\n  return true;\n}<\/code><\/pre>\n    ",
            "href": "package-test_api_test_api\/Throws\/matches.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "name": "matches",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "test_api.Throws",
            "params": [
                {
                    "name": "item",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "<dynamic>"
                },
                {
                    "name": "matchState",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.Map"
                }
            ]
        }
    ],
    "props": []
}