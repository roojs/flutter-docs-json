{
    "desc": "<p>A direction in which text flows.<\/p>\n<p>Some languages are written from the left to the right (for example, English,\nTamil, or Chinese), while others are written from the right to the left (for\nexample Aramaic, Hebrew, or Urdu). Some are also written in a mixture, for\nexample Arabic is mostly written right-to-left, with numerals written\nleft-to-right.<\/p>\n<p>The text direction must be provided to APIs that render text or lay out\nboxes horizontally, so that they can determine which direction to start in:\neither right-to-left, <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>; or left-to-right,\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<p>Flutter is designed to address the needs of applications written in any of\nthe world's currently-used languages, whether they use a right-to-left or\nleft-to-right writing direction. Flutter does not support other writing\nmodes, such as vertical text or boustrophedon text, as these are rarely used\nin computer programs.<\/p>\n<p>It is common when developing user interface frameworks to pick a default\ntext direction \u2014 typically left-to-right, the direction most familiar to the\nengineers working on the framework \u2014 because this simplifies the development\nof applications on the platform. Unfortunately, this frequently results in\nthe platform having unexpected left-to-right biases or assumptions, as\nengineers will typically miss places where they need to support\nright-to-left text. This then results in bugs that only manifest in\nright-to-left environments.<\/p>\n<p>In an effort to minimize the extent to which Flutter experiences this\ncategory of issues, the lowest levels of the Flutter framework do not have a\ndefault text reading direction. Any time a reading direction is necessary,\nfor example when text is to be displayed, or when a\nwriting-direction-dependent value is to be interpreted, the reading\ndirection must be explicitly specified. Where possible, such as in <code>switch<\/code>\nstatements, the right-to-left case is listed first, to avoid the impression\nthat it is an afterthought.<\/p>\n<p>At the higher levels (specifically starting at the widgets library), an\nambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> is introduced, which provides a default. Thus, for\ninstance, a <a href=\"widgets\/Text-class.html\">Text<\/a> widget in the scope of a <a href=\"material\/MaterialApp-class.html\">MaterialApp<\/a> widget does not\nneed to be given an explicit writing direction. The <a href=\"widgets\/Directionality\/of.html\">Directionality.of<\/a>\nstatic method can be used to obtain the ambient text direction for a\nparticular <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<h3 id=\"known-left-to-right-biases-in-flutter\">Known left-to-right biases in Flutter<\/h3>\n<p>Despite the design intent described above, certain left-to-right biases have\nnonetheless crept into Flutter's design. These include:<\/p>\n<ul>\n<li>\n<p>The <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> origin is at the top left, and the x-axis increases in a\nleft-to-right direction.<\/p>\n<\/li>\n<li>\n<p>The default localization in the widgets and material libraries is\nAmerican English, which is left-to-right.<\/p>\n<\/li>\n<\/ul>\n<h3 id=\"visual-properties-vs-directional-properties\">Visual properties vs directional properties<\/h3>\n<p>Many classes in the Flutter framework are offered in two versions, a\nvisually-oriented variant, and a text-direction-dependent variant. For\nexample, <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> is described in terms of top, left, right, and bottom,\nwhile <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> is described in terms of top, start, end, and\nbottom, where start and end correspond to right and left in right-to-left\ntext and left and right in left-to-right text.<\/p>\n<p>There are distinct use cases for each of these variants.<\/p>\n<p>Text-direction-dependent variants are useful when developing user interfaces\nthat should \"flip\" with the text direction. For example, a paragraph of text\nin English will typically be left-aligned and a quote will be indented from\nthe left, while in Arabic it will be right-aligned and indented from the\nright. Both of these cases are described by the direction-dependent\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and <a href=\"painting\/EdgeInsetsDirectional\/start.html\">EdgeInsetsDirectional.start<\/a>.<\/p>\n<p>In contrast, the visual variants are useful when the text direction is known\nand not affected by the reading direction. For example, an application\ngiving driving directions might show a \"turn left\" arrow on the left and a\n\"turn right\" arrow on the right \u2014 and would do so whether the application\nwas localized to French (left-to-right) or Hebrew (right-to-left).<\/p>\n<p>In practice, it is also expected that many developers will only be\ntargeting one language, and in that case it may be simpler to think in\nvisual terms.<\/p>\n    ",
    "dtype": "enum",
    "example": "",
    "href": "dart-ui\/TextDirection-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "dart:ui",
    "name": "dart:ui.TextDirection",
    "shortname": "TextDirection",
    "extends": [],
    "is_enum": true,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [],
    "props": [
        {
            "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">TextDirection<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
            "example": "",
            "href": "",
            "name": "ltr",
            "isDeprecated": false,
            "type": "",
            "dtype": "enum-value",
            "isStatic": true,
            "isConstant": true,
            "memberOf": "dart:ui.TextDirection",
            "params": []
        }
    ]
}