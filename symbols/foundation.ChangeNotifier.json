{
    "name": "foundation.ChangeNotifier",
    "extends": [],
    "memberOf": "foundation",
    "events": [],
    "methods": [
        {
            "name": "ChangeNotifier",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "foundation.ChangeNotifier",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "foundation\/ChangeNotifier\/ChangeNotifier.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "addListener",
            "type": "",
            "desc": "<p>Register a closure to be called when the object changes.<\/p>\n<p>This method must not be called after <a href=\"foundation\/ChangeNotifier\/dispose.html\">dispose<\/a> has been called.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.ChangeNotifier",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/ChangeNotifier\/addListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener) {\n  assert(_debugAssertNotDisposed());\n  _listeners.add(listener);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "dispose",
            "type": "",
            "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.ChangeNotifier",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/ChangeNotifier\/dispose.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() {\n  assert(_debugAssertNotDisposed());\n  _listeners = null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "notifyListeners",
            "type": "",
            "desc": "<p>Call all the registered listeners.<\/p>\n<p>Call this method whenever the object changes, to notify any clients the\nobject may have. Listeners that are added during this iteration will not\nbe visited. Listeners that are removed during this iteration will not be\nvisited after they are removed.<\/p>\n<p>Exceptions thrown by listeners will be caught and reported using\n<a href=\"foundation\/FlutterError\/reportError.html\">FlutterError.reportError<\/a>.<\/p>\n<p>This method must not be called after <a href=\"foundation\/ChangeNotifier\/dispose.html\">dispose<\/a> has been called.<\/p>\n<p>Surprising behavior can result when reentrantly removing a listener (i.e.\nin response to a notification) that has been registered multiple times.\nSee the discussion at <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.ChangeNotifier",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "foundation\/ChangeNotifier\/notifyListeners.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\n@visibleForTesting\nvoid notifyListeners() {\n  assert(_debugAssertNotDisposed());\n  if (_listeners != null) {\n    final List&lt;VoidCallback&gt; localListeners = List&lt;VoidCallback&gt;.from(_listeners);\n    for (VoidCallback listener in localListeners) {\n      try {\n        if (_listeners.contains(listener))\n          listener();\n      } catch (exception, stack) {\n        FlutterError.reportError(FlutterErrorDetails(\n          exception: exception,\n          stack: stack,\n          library: 'foundation library',\n          context: 'while dispatching notifications for $runtimeType',\n          informationCollector: (StringBuffer information) {\n            information.writeln('The $runtimeType sending notification was:');\n            information.write('  $this');\n          },\n        ));\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "removeListener",
            "type": "",
            "desc": "<p>Remove a previously registered closure from the list of closures that are\nnotified when the object changes.<\/p>\n<p>If the given listener is not registered, the call is ignored.<\/p>\n<p>This method must not be called after <a href=\"foundation\/ChangeNotifier\/dispose.html\">dispose<\/a> has been called.<\/p>\n<p>If a listener had been added twice, and is removed once during an\niteration (i.e. in response to a notification), it will still be called\nagain. If, on the other hand, it is removed as many times as it was\nregistered, then it will no longer be called. This odd behavior is the\nresult of the <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> not being able to determine which listener\nis being removed, since they are identical, and therefore conservatively\nstill calling all the listeners when it knows that any are still\nregistered.<\/p>\n<p>This surprising behavior can be unexpectedly observed when registering a\nlistener on two separate objects which are both forwarding all\nregistrations to a common upstream object.<\/p>\n    ",
            "static": false,
            "memberOf": "foundation.ChangeNotifier",
            "sig": "",
            "params": [
                {
                    "name": "listener",
                    "type": "dart:ui.VoidCallback",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "foundation\/ChangeNotifier\/removeListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener) {\n  assert(_debugAssertNotDisposed());\n  _listeners.remove(listener);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        }
    ],
    "props": [
        {
            "name": "hasListeners",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Whether any listeners are currently registered.<\/p>\n<p>Clients should not depend on this value for their behavior, because having\none listener's logic change when another listener happens to start or stop\nlistening will lead to extremely hard-to-track bugs. Subclasses might use\nthis information to determine whether to do any work when there are no\nlisteners, however; for example, resuming a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> when a listener is\nadded and pausing it when a listener is removed.<\/p>\n<p>Typically this is used by overriding <a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a>, checking if\n<a href=\"foundation\/ChangeNotifier\/hasListeners.html\">hasListeners<\/a> is false before calling <code>super.addListener()<\/code>, and if so,\nstarting whatever work is needed to determine when to call\n<a href=\"foundation\/ChangeNotifier\/notifyListeners.html\">notifyListeners<\/a>; and similarly, by overriding <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a>, checking\nif <a href=\"foundation\/ChangeNotifier\/hasListeners.html\">hasListeners<\/a> is false after calling <code>super.removeListener()<\/code>, and if\nso, stopping that same work.<\/p>\n        ",
            "memberOf": "foundation.ChangeNotifier",
            "isConstant": false,
            "href": "foundation\/ChangeNotifier\/hasListeners.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get hasListeners {\n  assert(_debugAssertNotDisposed());\n  return _listeners.isNotEmpty;\n}<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": false,
    "implementors": [
        "foundation.ValueNotifier",
        "material.DataTableSource",
        "material.TabController",
        "rendering.ViewportOffset",
        "semantics.SemanticsOwner",
        "widgets.FixedExtentScrollController",
        "widgets.FocusNode",
        "widgets.KeepAliveHandle",
        "widgets.PageController",
        "widgets.ScrollController",
        "widgets.ScrollPosition",
        "widgets.ScrollPositionWithSingleContext",
        "widgets.ScrollbarPainter",
        "widgets.SliverOverlapAbsorberHandle",
        "widgets.TextEditingController",
        "widgets.TrackingScrollController"
    ],
    "realImplementors": [
        "foundation.ValueNotifier"
    ],
    "cn": [],
    "href": "foundation\/ChangeNotifier-class.html",
    "desc": "<p>A class that can be extended or mixed in that provides a change notification\nAPI using <a href=\"dart-ui\/VoidCallback.html\">VoidCallback<\/a> for notifications.<\/p>\n<p><a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> is optimized for small numbers (one or two) of listeners.\nIt is O(N) for adding and removing listeners and O(N\u00b2) for dispatching\nnotifications (where N is the number of listeners).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/ValueNotifier-class.html\">ValueNotifier<\/a>, which is a <a href=\"foundation\/ChangeNotifier-class.html\">ChangeNotifier<\/a> that wraps a single value.<\/li><\/ul>",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "ChangeNotifier"
}