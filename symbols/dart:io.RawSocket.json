{
    "name": "dart:io.RawSocket",
    "extends": [],
    "memberOf": "dart:io",
    "events": [],
    "methods": [
        {
            "name": "RawSocket",
            "type": "",
            "desc": "",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-io\/RawSocket\/RawSocket.html",
            "example": "",
            "isDeprecated": false
        },
        {
            "name": "available",
            "type": "dart:core.int",
            "desc": "<p>Returns the number of received and non-read bytes in the socket that\ncan be read.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/available.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int available();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "close",
            "type": "dart:async.Future<dart:io.RawSocket>",
            "desc": "<p>Closes the socket. Returns a Future that completes with <a href=\"dart-io\/RawSocket-class.html\">this<\/a> when the\nunderlying connection is completely destroyed.<\/p>\n<p>Calling <a href=\"dart-io\/RawSocket\/close.html\">close<\/a> will never throw an exception\nand calling it several times is supported. Calling <a href=\"dart-io\/RawSocket\/close.html\">close<\/a> can result in\na <a href=\"dart-io\/RawSocketEvent\/readClosed-constant.html\">RawSocketEvent.readClosed<\/a> event.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/close.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RawSocket&gt; close();<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.RawSocket"
            ]
        },
        {
            "name": "connect",
            "type": "dart:async.Future<dart:io.RawSocket>",
            "desc": "<p>Creates a new socket connection to the host and port and returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>\nthat will complete with either a <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> once connected or an error\nif the host-lookup or connection failed.<\/p>\n<p><code>host<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>host<\/code> is a\n<a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawSocket\/connect.html\">connect<\/a> will perform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and try\nall returned <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es, until connected. Unless a\nconnection was established, the error from the first failing connection is\nreturned.<\/p>\n<p>The argument <code>sourceAddress<\/code> can be used to specify the local\naddress to bind when making the connection. <code>sourceAddress<\/code> can either\nbe a <code>String<\/code> or an <code>InternetAddress<\/code>. If a <code>String<\/code> is passed it must\nhold a numeric IP address.<\/p>\n<p>The argument <code>timeout<\/code> is used to specify the maximum allowed time to wait\nfor a connection to be established. If <code>timeout<\/code> is longer than the system\nlevel timeout duration, a timeout may occur sooner than specified in\n<code>timeout<\/code>. On timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> is thrown and all ongoing\nconnection attempts to <code>host<\/code> are cancelled.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sourceAddress",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "timeout",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/connect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;RawSocket&gt; connect(host, int port,\n    {sourceAddress, Duration timeout});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.RawSocket"
            ]
        },
        {
            "name": "getRawOption",
            "type": "dart:typed_data.Uint8List",
            "desc": "<p>Use <a href=\"dart-io\/RawSocket\/getRawOption.html\">getRawOption<\/a> to get low level information about the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See\n<a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for available options.<\/p>\n<p>Returns the <a href=\"dart-io\/RawSocketOption\/value.html\">RawSocketOption.value<\/a> on success.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "option",
                    "type": "dart:io.RawSocketOption",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/getRawOption.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List getRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "read",
            "type": "dart:core.List<dart:core.int>",
            "desc": "<p>Read up to <code>len<\/code> bytes from the socket. This function is\nnon-blocking and will only return data if data is available. The\nnumber of bytes read can be less then <code>len<\/code> if fewer bytes are\navailable for immediate reading. If no data is available <code>null<\/code>\nis returned.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "len",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/read.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; read([int len]);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "dart:core.int"
            ]
        },
        {
            "name": "setOption",
            "type": "dart:core.bool",
            "desc": "<p>Use <a href=\"dart-io\/RawSocket\/setOption.html\">setOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/SocketOption-class.html\">SocketOption<\/a> for\navailable options.<\/p>\n<p>Returns <code>true<\/code> if the option was set successfully, false otherwise.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "option",
                    "type": "dart:io.SocketOption",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "enabled",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/setOption.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool setOption(SocketOption option, bool enabled);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setRawOption",
            "type": "",
            "desc": "<p>Use <a href=\"dart-io\/RawSocket\/setRawOption.html\">setRawOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for\navailable options.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "option",
                    "type": "dart:io.RawSocketOption",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/setRawOption.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "shutdown",
            "type": "",
            "desc": "<p>Shutdown the socket in the <code>direction<\/code>. Calling <a href=\"dart-io\/RawSocket\/shutdown.html\">shutdown<\/a> will never\nthrow an exception and calling it several times is supported. Calling\nshutdown with either <a href=\"dart-io\/SocketDirection\/both-constant.html\">SocketDirection.both<\/a> or <a href=\"dart-io\/SocketDirection\/receive-constant.html\">SocketDirection.receive<\/a>\ncan result in a <a href=\"dart-io\/RawSocketEvent\/readClosed-constant.html\">RawSocketEvent.readClosed<\/a> event.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "dart:io.SocketDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/shutdown.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shutdown(SocketDirection direction);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "startConnect",
            "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.RawSocket>>",
            "desc": "<p>Like <a href=\"dart-io\/RawSocket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> is no\nlonger needed.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "host",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "sourceAddress",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/startConnect.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;ConnectionTask&lt;RawSocket&gt;&gt; startConnect(host, int port,\n    {sourceAddress});<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:io.ConnectionTask",
                "dart:io.RawSocket"
            ]
        },
        {
            "name": "write",
            "type": "dart:core.int",
            "desc": "<p>Writes up to <code>count<\/code> bytes of the buffer from <code>offset<\/code> buffer offset to\nthe socket. The number of successfully written bytes is returned. This\nfunction is non-blocking and will only write data if buffer space is\navailable in the socket.<\/p>\n<p>The default value for <code>offset<\/code> is 0, and the default value for <code>count<\/code> is\n<code>buffer.length - offset<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io.RawSocket",
            "sig": "",
            "params": [
                {
                    "name": "buffer",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "offset",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "count",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/RawSocket\/write.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int write(List&lt;int&gt; buffer, [int offset, int count]);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "address",
            "type": "dart:io.InternetAddress",
            "types": [],
            "desc": "<p>Returns the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> used to connect this socket.<\/p>\n        ",
            "memberOf": "dart:io.RawSocket",
            "isConstant": false,
            "href": "dart-io\/RawSocket\/address.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "port",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
            "memberOf": "dart:io.RawSocket",
            "isConstant": false,
            "href": "dart-io\/RawSocket\/port.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "readEventsEnabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Set or get, if the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> should listen for <a href=\"dart-io\/RawSocket\/read.html\">RawSocketEvent.read<\/a>\nevents. Default is <code>true<\/code>.<\/p>\n        ",
            "memberOf": "dart:io.RawSocket",
            "isConstant": false,
            "href": "dart-io\/RawSocket\/readEventsEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool readEventsEnabled\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "remoteAddress",
            "type": "dart:io.InternetAddress",
            "types": [],
            "desc": "<p>Returns the remote <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> connected to by this socket.<\/p>\n        ",
            "memberOf": "dart:io.RawSocket",
            "isConstant": false,
            "href": "dart-io\/RawSocket\/remoteAddress.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get remoteAddress;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "remotePort",
            "type": "dart:core.int",
            "types": [],
            "desc": "<p>Returns the remote port connected to by this socket.<\/p>\n        ",
            "memberOf": "dart:io.RawSocket",
            "isConstant": false,
            "href": "dart-io\/RawSocket\/remotePort.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get remotePort;<\/code><\/pre>\n        ",
            "isDeprecated": false
        },
        {
            "name": "writeEventsEnabled",
            "type": "dart:core.bool",
            "types": [],
            "desc": "<p>Set or get, if the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> should listen for <a href=\"dart-io\/RawSocket\/write.html\">RawSocketEvent.write<\/a>\nevents. Default is <code>true<\/code>.\nThis is a one-shot listener, and writeEventsEnabled must be set\nto true again to receive another write event.<\/p>\n        ",
            "memberOf": "dart:io.RawSocket",
            "isConstant": false,
            "href": "dart-io\/RawSocket\/writeEventsEnabled.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool writeEventsEnabled\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-io\/RawSocket-class.html",
    "desc": "<p>The <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> is a low-level interface to a socket, exposing the raw\nevents signaled by the system. It's a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> of <a href=\"dart-io\/RawSocketEvent-class.html\">RawSocketEvent<\/a>s.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "RawSocket"
}