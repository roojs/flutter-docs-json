{
    "desc": "<p>A testing stub for the system's onscreen keyboard.<\/p>\n<p>Typical app tests will not need to use this class directly.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"flutter_test\/TestTextInput\/enterText.html\">WidgetTester.enterText<\/a>, which uses this class to simulate keyboard input.<\/li>\n<li>\n<a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">WidgetTester.showKeyboard<\/a>, which uses this class to simulate showing the\npopup keyboard and initializing its text.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": "",
    "href": "flutter_test\/TestTextInput-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "flutter_test",
    "name": "flutter_test.TestTextInput",
    "shortname": "TestTextInput",
    "extends": [],
    "realImplementors": [],
    "events": [
        {
            "desc": "<p>Called when the keyboard goes away.<\/p>\n<p>To use the methods on this API that send fake keyboard messages (such as\n<a href=\"flutter_test\/TestTextInput\/updateEditingValue.html\">updateEditingValue<\/a>, <a href=\"flutter_test\/TestTextInput\/enterText.html\">enterText<\/a>, or <a href=\"flutter_test\/TestTextInput\/receiveAction.html\">receiveAction<\/a>), the keyboard must\nfirst be requested, e.g. using <a href=\"flutter_test\/WidgetTester\/showKeyboard.html\">WidgetTester.showKeyboard<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onCleared\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestTextInput\/onCleared.html",
            "isDeprecated": false,
            "type": "dart:ui.VoidCallback",
            "name": "onCleared",
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        }
    ],
    "methods": [
        {
            "desc": "<p>Create a fake keyboard backend.<\/p>\n<p>The <code>onCleared<\/code> argument may be set to be notified of when the keyboard\nis dismissed.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TestTextInput({ this.onCleared });<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/TestTextInput.html",
            "isDeprecated": "0",
            "type": "",
            "name": "TestTextInput",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": [
                {
                    "name": "onCleared",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Simulates the user typing the given text.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void enterText(String text) {\n  updateEditingValue(TextEditingValue(\n    text: text,\n  ));\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/enterText.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "enterText",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": [
                {
                    "name": "text",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Simulates the user hiding the onscreen keyboard.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void hide() {\n  _isVisible = false;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/hide.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "hide",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        },
        {
            "desc": "<p>Simulates the user pressing one of the <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> buttons.\nDoes not check that the <a href=\"services\/TextInputAction-class.html\">TextInputAction<\/a> performed is an acceptable one\nbased on the <code>inputAction<\/code> <a href=\"flutter_test\/TestTextInput\/setClientArgs.html\">setClientArgs<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; receiveAction(TextInputAction action) async {\n  return TestAsyncUtils.guard(() {\n    \/\/ Not using the `expect` function because in the case of a FlutterDriver\n    \/\/ test this code does not run in a package:test test zone.\n    if (_client == 0) {\n      throw TestFailure('Tried to use TestTextInput with no keyboard attached. You must use WidgetTester.showKeyboard() first.');\n    }\n\n    final Completer&lt;void&gt; completer = Completer&lt;void&gt;();\n\n    BinaryMessages.handlePlatformMessage(\n      SystemChannels.textInput.name,\n      SystemChannels.textInput.codec.encodeMethodCall(\n        MethodCall(\n          'TextInputClient.performAction',\n          &lt;dynamic&gt;[_client, action.toString()],\n        ),\n      ),\n      (ByteData data) {\n        try {\n          \/\/ Decoding throws a PlatformException if the data represents an\n          \/\/ error, and that's all we care about here.\n          SystemChannels.textInput.codec.decodeEnvelope(data);\n\n          \/\/ No error was found. Complete without issue.\n          completer.complete();\n        } catch (error) {\n          \/\/ An exception occurred as a result of receiveAction()'ing. Report\n          \/\/ that error.\n          completer.completeError(error);\n        }\n      },\n    );\n\n    return completer.future;\n  });\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/receiveAction.html",
            "isDeprecated": "0",
            "type": "dart:async.Future",
            "name": "receiveAction",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": [
                {
                    "name": "action",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.TextInputAction"
                }
            ]
        },
        {
            "desc": "<p>Installs this object as a mock handler for <a href=\"services\/SystemChannels\/textInput-constant.html\">SystemChannels.textInput<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void register() {\n  SystemChannels.textInput.setMockMethodCallHandler(_handleTextInputCall);\n  _isRegistered = true;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/register.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "register",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        },
        {
            "desc": "<p>Removes this object as a mock handler for <a href=\"services\/SystemChannels\/textInput-constant.html\">SystemChannels.textInput<\/a>.<\/p>\n<p>After calling this method, the channel will exchange messages with the\nFlutter engine. Use this with <a href=\"flutter_driver\/FlutterDriver-class.html\">FlutterDriver<\/a> tests that need to display\non-screen keyboard provided by the operating system.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unregister() {\n  SystemChannels.textInput.setMockMethodCallHandler(null);\n  _isRegistered = false;\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/unregister.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "unregister",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        },
        {
            "desc": "<p>Simulates the user changing the <a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> to the given value.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateEditingValue(TextEditingValue value) {\n  \/\/ Not using the `expect` function because in the case of a FlutterDriver\n  \/\/ test this code does not run in a package:test test zone.\n  if (_client == 0)\n    throw TestFailure('Tried to use TestTextInput with no keyboard attached. You must use WidgetTester.showKeyboard() first.');\n  BinaryMessages.handlePlatformMessage(\n    SystemChannels.textInput.name,\n    SystemChannels.textInput.codec.encodeMethodCall(\n      MethodCall(\n        'TextInputClient.updateEditingState',\n        &lt;dynamic&gt;[_client, value.toJSON()],\n      ),\n    ),\n    (ByteData data) { \/* response from framework is discarded *\/ },\n  );\n}<\/code><\/pre>\n    ",
            "href": "flutter_test\/TestTextInput\/updateEditingValue.html",
            "isDeprecated": "0",
            "type": "<void>",
            "name": "updateEditingValue",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "flutter_test.TestTextInput",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "services.TextEditingValue"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The last set of arguments that <a href=\"services\/TextInputConnection\/setEditingState.html\">TextInputConnection.setEditingState<\/a> sent\nto the embedder.<\/p>\n<p>This is a map representation of a <a href=\"services\/TextEditingValue-class.html\">TextEditingValue<\/a> object. For example,\nit will have a <code>text<\/code> entry whose value matches the most recent\n<a href=\"services\/TextEditingValue\/text.html\">TextEditingValue.text<\/a> that was sent to the embedder.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; editingState\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestTextInput\/editingState.html",
            "name": "editingState",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.String>",
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        },
        {
            "desc": "<p>Whether this <a href=\"flutter_test\/TestTextInput-class.html\">TestTextInput<\/a> is registered with <a href=\"services\/SystemChannels\/textInput-constant.html\">SystemChannels.textInput<\/a>.<\/p>\n<p>Use <a href=\"flutter_test\/TestTextInput\/register.html\">register<\/a> and <a href=\"flutter_test\/TestTextInput\/unregister.html\">unregister<\/a> methods to control this value.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRegistered =&gt; _isRegistered;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestTextInput\/isRegistered.html",
            "name": "isRegistered",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        },
        {
            "desc": "<p>Whether the onscreen keyboard is visible to the user.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isVisible =&gt; _isVisible;<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestTextInput\/isVisible.html",
            "name": "isVisible",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        },
        {
            "desc": "<p>Arguments supplied to the TextInput.setClient method call.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; setClientArgs\n\n<\/code><\/pre>\n        ",
            "href": "flutter_test\/TestTextInput\/setClientArgs.html",
            "name": "setClientArgs",
            "isDeprecated": false,
            "type": "dart:core.Map<dart:core.String>",
            "memberOf": "flutter_test.TestTextInput",
            "params": []
        }
    ]
}