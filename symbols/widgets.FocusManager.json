{
    "desc": "<p>Manages the focus tree.<\/p>\n<p>The focus tree keeps track of which <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> is the user's current\nkeyboard focus. The widget that owns the <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> often listens for\nkeyboard events.<\/p>\n<p>The focus manager is responsible for holding the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> that is\nthe root of the focus tree and tracking which <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> has the overall\nfocus.<\/p>\n<p>The <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a> is held by the <a href=\"widgets\/WidgetsBinding-mixin.html\">WidgetsBinding<\/a> as\n<a href=\"widgets\/WidgetsBinding\/focusManager.html\">WidgetsBinding.focusManager<\/a>. The <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a> is rarely accessed\ndirectly. Instead, to find the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>,\nuse <a href=\"widgets\/FocusScope\/of.html\">FocusScope.of<\/a>.<\/p>\n<p>The <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a> knows nothing about <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>s other than the one that\nis currently focused. If a <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> is removed, then the\n<a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a> will attempt to focus the next <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> in the focus\ntree that it maintains, but if the current focus in that <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> is\nnull, it will stop there, and no <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a> will have focus.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, which is a leaf node in the focus tree that can receive\nfocus.<\/li>\n<li>\n<a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a>, which is an interior node in the focus tree.<\/li>\n<li>\n<a href=\"widgets\/FocusScope\/of.html\">FocusScope.of<\/a>, which provides the <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for a given\n<a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/li>\n<\/ul>",
    "dtype": "class",
    "example": null,
    "href": "widgets\/FocusManager-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "widgets",
    "name": "widgets.FocusManager",
    "shortname": "FocusManager",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an object that manages the focus tree.<\/p>\n<p>This constructor is rarely called directly. To access the <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>,\nconsider using <a href=\"widgets\/WidgetsBinding\/focusManager.html\">WidgetsBinding.focusManager<\/a> instead.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FocusManager() {\n  rootScope._manager = this;\n  assert(rootScope._firstChild == null);\n  assert(rootScope._lastChild == null);\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusManager\/FocusManager.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "widgets.FocusManager",
            "params": []
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final String status = _haveScheduledUpdate ? ' UPDATE SCHEDULED' : '';\n  const String indent = '  ';\n  return '${describeIdentity(this)}$status\\n'\n    '${indent}currentFocus: $_currentFocus\\n'\n    '${rootScope.toStringDeep(prefixLineOne: indent, prefixOtherLines: indent)}';\n}<\/code><\/pre>\n    ",
            "href": "widgets\/FocusManager\/toString.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "widgets.FocusManager",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>The root <a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> in the focus tree.<\/p>\n<p>This field is rarely used directly. Instead, to find the\n<a href=\"widgets\/FocusScopeNode-class.html\">FocusScopeNode<\/a> for a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>, use <a href=\"widgets\/FocusScope\/of.html\">FocusScope.of<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FocusScopeNode rootScope = FocusScopeNode()\n\n<\/code><\/pre>\n        ",
            "href": "widgets\/FocusManager\/rootScope.html",
            "isDeprecated": "0",
            "type": "widgets.FocusScopeNode",
            "memberOf": "widgets.FocusManager",
            "params": []
        }
    ]
}