{
    "desc": "<p>Allow orderly reading of elements from a datastream, such as Socket, which\nmight not receive <code>List&lt;int&gt;<\/code> bytes regular chunks.<\/p>\n<p>Example usage:<\/p>\n<pre class=\"language-dart\"><code>StreamBuffer&lt;int&gt; buffer = new StreamBuffer();\nSocket.connect('127.0.0.1', 5555).then((sock) =&gt; sock.pipe(buffer));\nbuffer.read(100).then((bytes) {\n  \/\/ do something with 100 bytes;\n});\n<\/code><\/pre>\n<p>Throws <a href=\"quiver.async\/UnderflowError-class.html\">UnderflowError<\/a> if <code>throwOnError<\/code> is true. Useful for unexpected\n<a href=\"dart-io\/Socket-class.html\">Socket<\/a> disconnects.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "quiver.async\/StreamBuffer-class.html",
    "isAbstract": false,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "quiver.async",
    "name": "quiver.async.StreamBuffer",
    "shortname": "StreamBuffer",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a stream buffer with optional, soft <code>limit<\/code> to the amount of data\nthe buffer will hold before pausing the underlying stream. A limit of 0\nmeans no buffer limits.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamBuffer({bool throwOnError: false, int limit: 0})\n    : this._throwOnError = throwOnError,\n      this._limit = limit;<\/code><\/pre>\n    ",
            "href": "quiver.async\/StreamBuffer\/StreamBuffer.html",
            "isDeprecated": false,
            "type": "",
            "name": "StreamBuffer",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": [
                {
                    "name": "limit",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.int"
                },
                {
                    "name": "throwOnError",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Consumes the elements of <code>stream<\/code>.<\/p>\n<p>Listens on <code>stream<\/code> and does something for each event.<\/p>\n<p>Returns a future which is completed when the stream is done being added,\nand the consumer is ready to accept a new stream.\nNo further calls to <a href=\"quiver.async\/StreamBuffer\/addStream.html\">addStream<\/a> or <a href=\"quiver.async\/StreamBuffer\/close.html\">close<\/a> should happen before the\nreturned future has completed.<\/p>\n<p>The consumer may stop listening to the stream after an error,\nit may consume all the errors and only stop at a done event,\nor it may be canceled early if the receiver don't want any further events.<\/p>\n<p>If the consumer stops listening because of some error preventing it\nfrom continuing, it may report this error in the returned future,\notherwise it will just complete the future with <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture addStream(Stream&lt;List&lt;T&gt;&gt; stream) {\n  var lastStream = _currentStream == null ? stream : _currentStream;\n  if (_sub != null) {\n    _sub.cancel();\n  }\n  _currentStream = stream;\n  final streamDone = new Completer&lt;Null&gt;();\n  _sub = stream.listen((items) {\n    _chunks.addAll(items);\n    _counter += items is List ? items.length : 1;\n    if (limited &amp;&amp; _counter &gt;= limit) {\n      _sub.pause();\n    }\n\n    while (_readers.isNotEmpty &amp;&amp; _readers.first.size &lt;= _counter) {\n      var waiting = _readers.removeAt(0);\n      waiting.completer.complete(_consume(waiting.size));\n    }\n  }, onDone: () {\n    \/\/ User is piping in a new stream\n    if (stream == lastStream &amp;&amp; _throwOnError) {\n      _closed(new UnderflowError());\n    }\n    streamDone.complete();\n  }, onError: (e, stack) {\n    _closed(e, stack);\n  });\n  return streamDone.future;\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/StreamBuffer\/addStream.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "addStream",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": [
                {
                    "name": "stream",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:async.Stream<dart:core.List>"
                }
            ]
        },
        {
            "desc": "<p>Tells the consumer that no further streams will be added.<\/p>\n<p>This allows the consumer to complete any remaining work and release\nresources that are no longer needed<\/p>\n<p>Returns a future which is completed when the consumer has shut down.\nIf cleaning up can fail, the error may be reported in the returned future,\notherwise it completes with <code>null<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() {\n  var ret;\n  if (_sub != null) {\n    ret = _sub.cancel();\n    _sub = null;\n  }\n  return ret is Future ? ret : new Future.value();\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/StreamBuffer\/close.html",
            "isDeprecated": false,
            "type": "dart:async.Future",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": []
        },
        {
            "desc": "<p>Read fully <code>size<\/code> bytes from the stream and return in the future.<\/p>\n<p>Throws <a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> if size is larger than optional buffer <a href=\"quiver.async\/StreamBuffer\/limit.html\">limit<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;T&gt;&gt; read(int size) {\n  if (limited &amp;&amp; size &gt; limit) {\n    throw new ArgumentError(\"Cannot read $size with limit $limit\");\n  }\n\n  \/\/ If we have enough data to consume and there are no other readers, then\n  \/\/ we can return immediately.\n  if (size &lt;= buffered &amp;&amp; _readers.isEmpty) {\n    return new Future.value(_consume(size));\n  }\n  final completer = new Completer&lt;List&lt;T&gt;&gt;();\n  _readers.add(new _ReaderInWaiting&lt;List&lt;T&gt;&gt;(size, completer));\n  return completer.future;\n}<\/code><\/pre>\n    ",
            "href": "quiver.async\/StreamBuffer\/read.html",
            "isDeprecated": false,
            "type": "dart:async.Future<dart:core.List>",
            "name": "read",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": [
                {
                    "name": "size",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The amount of unread data buffered.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get buffered =&gt; _counter;<\/code><\/pre>\n        ",
            "href": "quiver.async\/StreamBuffer\/buffered.html",
            "name": "buffered",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": []
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get limit =&gt; _limit;<\/code><\/pre>\n        ",
            "href": "quiver.async\/StreamBuffer\/limit.html",
            "name": "limit",
            "isDeprecated": false,
            "type": "dart:core.int",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": []
        },
        {
            "desc": "",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get limited =&gt; _limit &gt; 0;<\/code><\/pre>\n        ",
            "href": "quiver.async\/StreamBuffer\/limited.html",
            "name": "limited",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "quiver.async.StreamBuffer",
            "params": []
        }
    ]
}