{
    "name": "physics.Simulation",
    "extends": [],
    "memberOf": "physics",
    "events": [],
    "methods": [
        {
            "name": "Simulation",
            "type": "",
            "desc": "<p>Initializes the <code>tolerance<\/code> field for subclasses.<\/p>\n    ",
            "static": false,
            "memberOf": "physics.Simulation",
            "sig": "",
            "params": [
                {
                    "name": "tolerance",
                    "type": "physics.Tolerance",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "physics\/Simulation\/Simulation.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Simulation({ this.tolerance = Tolerance.defaultTolerance });<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "dx",
            "type": "dart:core.double",
            "desc": "<p>The velocity of the object in the simulation at the given time.<\/p>\n    ",
            "static": false,
            "memberOf": "physics.Simulation",
            "sig": "",
            "params": [
                {
                    "name": "time",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "physics\/Simulation\/dx.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double dx(double time);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isDone",
            "type": "dart:core.bool",
            "desc": "<p>Whether the simulation is \"done\" at the given time.<\/p>\n    ",
            "static": false,
            "memberOf": "physics.Simulation",
            "sig": "",
            "params": [
                {
                    "name": "time",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "physics\/Simulation\/isDone.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isDone(double time);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "toString",
            "type": "dart:core.String",
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "static": false,
            "memberOf": "physics.Simulation",
            "sig": "",
            "params": [],
            "isConstructor": false,
            "href": "physics\/Simulation\/toString.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "x",
            "type": "dart:core.double",
            "desc": "<p>The position of the object in the simulation at the given time.<\/p>\n    ",
            "static": false,
            "memberOf": "physics.Simulation",
            "sig": "",
            "params": [
                {
                    "name": "time",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "physics\/Simulation\/x.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double x(double time);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [
        {
            "name": "tolerance",
            "type": "physics.Tolerance",
            "types": [],
            "desc": "<p>How close to the actual end of the simulation a value at a particular time\nmust be before <a href=\"physics\/Simulation\/isDone.html\">isDone<\/a> considers the simulation to be \"done\".<\/p>\n<p>A simulation with an asymptotic curve would never technically be \"done\",\nbut once the difference from the value at a particular time and the\nasymptote itself could not be seen, it would be pointless to continue. The\ntolerance defines how to determine if the difference could not be seen.<\/p>\n        ",
            "memberOf": "physics.Simulation",
            "isConstant": false,
            "href": "physics\/Simulation\/tolerance.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Tolerance tolerance\n\n<\/code><\/pre>\n        ",
            "isDeprecated": false
        }
    ],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [
        "physics.BoundedFrictionSimulation",
        "physics.ClampedSimulation",
        "physics.FrictionSimulation",
        "physics.GravitySimulation",
        "physics.ScrollSpringSimulation",
        "physics.SpringSimulation",
        "widgets.BouncingScrollSimulation",
        "widgets.ClampingScrollSimulation"
    ],
    "realImplementors": [
        "physics.BoundedFrictionSimulation",
        "physics.ClampedSimulation",
        "physics.FrictionSimulation",
        "physics.GravitySimulation",
        "physics.ScrollSpringSimulation",
        "physics.SpringSimulation",
        "widgets.BouncingScrollSimulation",
        "widgets.ClampingScrollSimulation"
    ],
    "cn": [],
    "href": "physics\/Simulation-class.html",
    "desc": "<p>The base class for all simulations.<\/p>\n<p>A simulation models an object, in a one-dimensional space, on which particular\nforces are being applied, and exposes:<\/p>\n<ul>\n<li>The object's position, <a href=\"physics\/Simulation\/x.html\">x<\/a>\n<\/li>\n<li>The object's velocity, <a href=\"physics\/Simulation\/dx.html\">dx<\/a>\n<\/li>\n<li>Whether the simulation is \"done\", <a href=\"physics\/Simulation\/isDone.html\">isDone<\/a>\n<\/li>\n<\/ul>\n<p>A simulation is generally \"done\" if the object has, to a given <a href=\"physics\/Simulation\/tolerance.html\">tolerance<\/a>,\ncome to a complete rest.<\/p>\n<p>The <a href=\"physics\/Simulation\/x.html\">x<\/a>, <a href=\"physics\/Simulation\/dx.html\">dx<\/a>, and <a href=\"physics\/Simulation\/isDone.html\">isDone<\/a> functions take a time argument which specifies\nthe time for which they are to be evaluated. In principle, simulations can\nbe stateless, and thus can be queried with arbitrary times. In practice,\nhowever, some simulations are not, and calling any of these functions will\nadvance the simulation to the given time.<\/p>\n<p>As a general rule, therefore, a simulation should only be queried using\ntimes that are equal to or greater than all times previously used for that\nsimulation.<\/p>\n<p>Simulations do not specify units for distance, velocity, and time. Client\nshould establish a convention and use that convention consistently with all\nrelated objects.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "Simulation"
}