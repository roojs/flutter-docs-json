{
    "desc": "<p><a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> that lazily calls the associated <a href=\"foundation\/Diagnosticable-class.html\">Diagnosticable<\/a> <a href=\"foundation\/DiagnosticableNode\/value.html\">value<\/a>\nto implement <a href=\"foundation\/DiagnosticableNode\/getChildren.html\">getChildren<\/a> and <a href=\"foundation\/DiagnosticableNode\/getProperties.html\">getProperties<\/a>.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "foundation\/DiagnosticableNode-class.html",
    "isAbstract": "0",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "foundation",
    "name": "foundation.DiagnosticableNode",
    "shortname": "DiagnosticableNode",
    "extends": [
        "foundation.DiagnosticsNode",
        "dart:core.Object"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Create a diagnostics describing a <a href=\"foundation\/Diagnosticable-class.html\">Diagnosticable<\/a> value.<\/p>\n<p>The <code>value<\/code> argument must not be null.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticableNode({\n  String name,\n  @required this.value,\n  @required DiagnosticsTreeStyle style,\n}) : assert(value != null),\n     super(\n       name: name,\n       style: style,\n     );<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticableNode\/DiagnosticableNode.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "foundation.DiagnosticableNode",
            "params": [
                {
                    "name": "name",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.String"
                },
                {
                    "name": "style",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "foundation.DiagnosticsTreeStyle"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "<T>"
                }
            ]
        },
        {
            "desc": "<p>Children of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"foundation\/DiagnosticableNode\/getProperties.html\">getProperties<\/a><\/li><\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getChildren() {\n  return const&lt;DiagnosticsNode&gt;[];\n}<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticableNode\/getChildren.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticableNode",
            "params": []
        },
        {
            "desc": "<p>Properties of this <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a>.<\/p>\n<p>Properties and children are kept distinct even though they are both\n<a href=\"dart-core\/List-class.html\">List&lt;DiagnosticsNode&gt;<\/a> because they should be grouped differently.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; getProperties() =&gt; _builder.properties;<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticableNode\/getProperties.html",
            "isDeprecated": "0",
            "type": "dart:core.List<foundation.DiagnosticsNode>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticableNode",
            "params": []
        },
        {
            "desc": "<p>Returns a description with a short summary of the node itself not\nincluding children or properties.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent does not line break between properties, the\ndescription of a property should also be a single line if possible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toDescription({ TextTreeConfiguration parentConfiguration }) {\n  return value.toStringShort();\n}<\/code><\/pre>\n    ",
            "href": "foundation\/DiagnosticableNode\/toDescription.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "foundation.DiagnosticableNode",
            "params": [
                {
                    "name": "parentConfiguration",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.TextTreeConfiguration"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>Description to show if the node has no displayed properties or children.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get emptyBodyDescription =&gt; _builder.emptyBodyDescription;<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticableNode\/emptyBodyDescription.html",
            "isDeprecated": "0",
            "type": "dart:core.String",
            "memberOf": "foundation.DiagnosticableNode",
            "params": []
        },
        {
            "desc": "<p>Hint for how the node should be displayed.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticsTreeStyle get style {\n  return super.style ?? _builder.defaultDiagnosticsTreeStyle;\n}<\/code><\/pre>\n        ",
            "href": "foundation\/DiagnosticableNode\/style.html",
            "isDeprecated": "0",
            "type": "foundation.DiagnosticsTreeStyle",
            "memberOf": "foundation.DiagnosticableNode",
            "params": []
        }
    ]
}