{
    "desc": "<p>A collection of key\/value pairs, from which you retrieve a value\nusing its associated key.<\/p>\n<p>There is a finite number of keys in the map,\nand each key has exactly one value associated with it.<\/p>\n<p>Maps, and their keys and values, can be iterated.\nThe order of iteration is defined by the individual type of map.\nExamples:<\/p>\n<ul>\n<li>The plain <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> is unordered (no order is guaranteed),<\/li>\n<li>the <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> iterates in key insertion order,<\/li>\n<li>and a sorted map like <a href=\"dart-collection\/SplayTreeMap-class.html\">SplayTreeMap<\/a> iterates the keys in sorted order.<\/li>\n<\/ul>\n<p>It is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a <a href=\"dart-core\/Map\/forEach.html\">forEach<\/a> or <a href=\"dart-core\/Map\/putIfAbsent.html\">putIfAbsent<\/a> call.\nModifying the map while iterating the keys or values\nmay also break the iteration.<\/p>\n<p>It is generally not allowed to modify the equality of keys (and thus not\ntheir hashcode) while they are in the map. Some specialized subtypes may be\nmore permissive, in which case they should document this behavior.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-core\/Map-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:core",
    "name": "dart:core.Map",
    "shortname": "Map",
    "extends": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates a Map instance with the default implementation, <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a>.<\/p>\n<p>This constructor is equivalent to the non-const map literal <code>&lt;K,V&gt;{}<\/code>.<\/p>\n<p>A <code>LinkedHashMap<\/code> requires the keys to implement compatible\n<code>operator==<\/code> and <code>hashCode<\/code>, and it allows null as a key.\nIt iterates in key insertion order.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory Map();<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/Map.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other);<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/addAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "other",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map"
                }
            ]
        },
        {
            "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; newEntries);<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/addEntries.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "newEntries",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Iterable<dart:core.MapEntry>"
                }
            ]
        },
        {
            "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;RK, RV&gt; cast&lt;RK, RV&gt;();<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/cast.html",
            "isDeprecated": "0",
            "type": "dart:core.Map",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>Adapts <code>source<\/code> to be a <code>Map&lt;K2, V2&gt;<\/code>.<\/p>\n<p>Any time the set would produce a key or value that is not a <code>K2<\/code> or <code>V2<\/code>,\nthe access will throw.<\/p>\n<p>Any time <code>K2<\/code> key or <code>V2<\/code> value is attempted added into the adapted map,\nthe store will throw unless the key is also an instance of <code>K<\/code> and\nthe value is also an instance of <code>V<\/code>.<\/p>\n<p>If all accessed entries of <code>source<\/code> are have <code>K2<\/code> keys and <code>V2<\/code> values\nand if all entries added to the returned map have <code>K<\/code> keys and <code>V<\/code>] values,\nthen the returned map can be used as a <code>Map&lt;K2, V2&gt;<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Map&lt;K2, V2&gt; castFrom&lt;K, V, K2, V2&gt;(Map&lt;K, V&gt; source) =&gt;\n    new CastMap&lt;K, V, K2, V2&gt;(source);<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/castFrom.html",
            "isDeprecated": "0",
            "type": "dart:core.Map",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "source",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Map"
                }
            ]
        },
        {
            "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/clear.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key);<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/containsKey.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value);<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/containsValue.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value));<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/forEach.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; f(K key, V value));<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/map.html",
            "isDeprecated": "0",
            "type": "dart:core.Map",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent());<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/putIfAbsent.html",
            "isDeprecated": "0",
            "type": "<V>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "ifAbsent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                }
            ]
        },
        {
            "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key);<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/remove.html",
            "isDeprecated": "0",
            "type": "<V>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.Object"
                }
            ]
        },
        {
            "desc": "<p>Removes all entries of this map that satisfy the given <code>predicate<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool predicate(K key, V value));<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/removeWhere.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()});<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/update.html",
            "isDeprecated": "0",
            "type": "<V>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "ifAbsent",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                },
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        },
        {
            "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value));<\/code><\/pre>\n    ",
            "href": "dart-core\/Map\/updateAll.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:core.Map",
            "params": [
                {
                    "name": "key",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<K>"
                },
                {
                    "name": "value",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "<V>"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>The map entries of <a href=\"dart-core\/Map-class.html\">this<\/a>.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries;<\/code><\/pre>\n        ",
            "href": "dart-core\/Map\/entries.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable<dart:core.MapEntry>",
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
            "href": "dart-core\/Map\/isEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty;<\/code><\/pre>\n        ",
            "href": "dart-core\/Map\/isNotEmpty.html",
            "isDeprecated": "0",
            "type": "dart:core.bool",
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>The keys of <a href=\"dart-core\/Map-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-core\/Map\/length.html\">length<\/a> and <a href=\"dart-core\/Map\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys;<\/code><\/pre>\n        ",
            "href": "dart-core\/Map\/keys.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
            "href": "dart-core\/Map\/length.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "dart:core.Map",
            "params": []
        },
        {
            "desc": "<p>The values of <a href=\"dart-core\/Map-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"dart-core\/Map\/keys.html\">keys<\/a> and <a href=\"dart-core\/Map\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"dart-core\/Map\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values;<\/code><\/pre>\n        ",
            "href": "dart-core\/Map\/values.html",
            "isDeprecated": "0",
            "type": "dart:core.Iterable",
            "memberOf": "dart:core.Map",
            "params": []
        }
    ]
}