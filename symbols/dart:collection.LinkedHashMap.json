{
    "desc": "<p>A hash-table based implementation of <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The insertion order of keys is remembered,\nand keys are iterated in the order they were inserted into the map.\nValues are iterated in their corresponding key's order.\nChanging a key's value, when the key is already in the map,\ndoes not change the iteration order,\nbut removing the key and adding it again\nwill make it be last in the iteration order.<\/p>\n<p>The keys of a <code>LinkedHashMap<\/code> must have consistent <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>\nand <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementations. This means that the <code>==<\/code> operator\nmust define a stable equivalence relation on the keys (reflexive,\nsymmetric, transitive, and consistent over time), and that <code>hashCode<\/code>\nmust be the same for objects that are considered equal by <code>==<\/code>.<\/p>\n<p>The map allows <code>null<\/code> as a key.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-collection\/LinkedHashMap-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "dart:collection",
    "name": "dart:collection.LinkedHashMap",
    "shortname": "LinkedHashMap",
    "extends": [],
    "realImplementors": [],
    "events": [],
    "methods": [
        {
            "desc": "<p>Creates an insertion-ordered hash-table based <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>If <code>equals<\/code> is provided, it is used to compare the keys in the table with\nnew keys. If <code>equals<\/code> is omitted, the key's own <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> is used\ninstead.<\/p>\n<p>Similar, if <code>hashCode<\/code> is provided, it is used to produce a hash value\nfor keys in order to place them in the hash table. If it is omitted, the\nkey's own <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> is used.<\/p>\n<p>If using methods like <a href=\"dart-core\/Map\/operator_get.html\">operator []<\/a>, <a href=\"dart-core\/Map\/remove.html\">remove<\/a> and <a href=\"dart-core\/Map\/containsKey.html\">containsKey<\/a> together\nwith a custom equality and hashcode, an extra <code>isValidKey<\/code> function\ncan be supplied. This function is called before calling <code>equals<\/code> or\n<code>hashCode<\/code> with an argument that may not be a <code>K<\/code> instance, and if the\ncall returns false, the key is assumed to not be in the set.\nThe <code>isValidKey<\/code> function defaults to just testing if the object is a\n<code>K<\/code> instance.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashMap&lt;int,int&gt;(equals: (int a, int b) =&gt; (b - a) % 5 == 0,\n                           hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>This example map does not need an <code>isValidKey<\/code> function to be passed.\nThe default function accepts only <code>int<\/code> values, which can safely be\npassed to both the <code>equals<\/code> and <code>hashCode<\/code> functions.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all keys.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting map is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/LinkedHashMap\/LinkedHashMap.identity.html\">LinkedHashMap.identity<\/a>.<\/p>\n<p>The used <code>equals<\/code> and <code>hashCode<\/code> method should always be consistent,\nso that if <code>equals(a, b)<\/code> then <code>hashCode(a) == hashCode(b)<\/code>. The hash\nof an object, or what it compares equal to, should not change while the\nobject is in the table. If it does change, the result is unpredictable.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashMap(\n    {bool equals(K key1, K key2),\n    int hashCode(K key),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.html",
            "isDeprecated": false,
            "type": "",
            "name": "LinkedHashMap",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "params": [
                {
                    "name": "key",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<K>"
                },
                {
                    "name": "key1",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<K>"
                },
                {
                    "name": "key2",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<K>"
                },
                {
                    "name": "potentialKey",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": true,
                    "type": "<dynamic>"
                }
            ]
        }
    ],
    "props": []
}