{
    "name": "dart:collection.LinkedHashMap",
    "extends": [],
    "memberOf": "dart:collection",
    "events": [],
    "methods": [
        {
            "name": "LinkedHashMap",
            "type": "",
            "desc": "<p>Creates an insertion-ordered hash-table based <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>If <code>equals<\/code> is provided, it is used to compare the keys in the table with\nnew keys. If <code>equals<\/code> is omitted, the key's own <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> is used\ninstead.<\/p>\n<p>Similar, if <code>hashCode<\/code> is provided, it is used to produce a hash value\nfor keys in order to place them in the hash table. If it is omitted, the\nkey's own <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> is used.<\/p>\n<p>If using methods like <a href=\"dart-core\/Map\/operator_get.html\">operator []<\/a>, <a href=\"dart-core\/Map\/remove.html\">remove<\/a> and <a href=\"dart-core\/Map\/containsKey.html\">containsKey<\/a> together\nwith a custom equality and hashcode, an extra <code>isValidKey<\/code> function\ncan be supplied. This function is called before calling <code>equals<\/code> or\n<code>hashCode<\/code> with an argument that may not be a <code>K<\/code> instance, and if the\ncall returns false, the key is assumed to not be in the set.\nThe <code>isValidKey<\/code> function defaults to just testing if the object is a\n<code>K<\/code> instance.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashMap&lt;int,int&gt;(equals: (int a, int b) =&gt; (b - a) % 5 == 0,\n                           hashCode: (int e) =&gt; e % 5)\n<\/code><\/pre>\n<p>This example map does not need an <code>isValidKey<\/code> function to be passed.\nThe default function accepts only <code>int<\/code> values, which can safely be\npassed to both the <code>equals<\/code> and <code>hashCode<\/code> functions.<\/p>\n<p>If neither <code>equals<\/code>, <code>hashCode<\/code>, nor <code>isValidKey<\/code> is provided,\nthe default <code>isValidKey<\/code> instead accepts all keys.\nThe default equality and hashcode operations are assumed to work on all\nobjects.<\/p>\n<p>Likewise, if <code>equals<\/code> is <a href=\"dart-core\/identical.html\">identical<\/a>, <code>hashCode<\/code> is <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>\nand <code>isValidKey<\/code> is omitted, the resulting map is identity based,\nand the <code>isValidKey<\/code> defaults to accepting all keys.\nSuch a map can be created directly using <a href=\"dart-collection\/LinkedHashMap\/LinkedHashMap.identity.html\">LinkedHashMap.identity<\/a>.<\/p>\n<p>The used <code>equals<\/code> and <code>hashCode<\/code> method should always be consistent,\nso that if <code>equals(a, b)<\/code> then <code>hashCode(a) == hashCode(b)<\/code>. The hash\nof an object, or what it compares equal to, should not change while the\nobject is in the table. If it does change, the result is unpredictable.<\/p>\n<p>If you supply one of <code>equals<\/code> and <code>hashCode<\/code>,\nyou should generally also to supply the other.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [
                {
                    "name": "key2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "key1",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "key2",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "key",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "key",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "potentialKey",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "potentialKey",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashMap(\n    {bool equals(K key1, K key2),\n    int hashCode(K key),\n    bool isValidKey(potentialKey)});<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashMap.from",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> that contains all key value pairs of <code>other<\/code>.<\/p>\n<p>The keys must all be instances of <code>K<\/code> and the values to <code>V<\/code>.\nThe <code>other<\/code> map itself can have any type.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.from.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.from(Map other) {\n  LinkedHashMap&lt;K, V&gt; result = LinkedHashMap&lt;K, V&gt;();\n  other.forEach((k, v) {\n    result[k] = v;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashMap.fromEntries",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> containing the entries of <code>entries<\/code>.<\/p>\n<p>Returns a new <code>LinkedHashMap&lt;K, V&gt;<\/code> where all entries of <code>entries<\/code>\nhave been added in iteration order.<\/p>\n<p>If multiple <code>entries<\/code> have the same key,\nlater occurrences overwrite the earlier ones.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [
                {
                    "name": "entries",
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.MapEntry"
                    ]
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.fromEntries.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nfactory LinkedHashMap.fromEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) =&gt;\n    &lt;K, V&gt;{}..addEntries(entries);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashMap.fromIterable",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> where the keys and values are computed from the\n<code>iterable<\/code>.<\/p>\n<p>For each element of the <code>iterable<\/code> this constructor computes a key\/value\npair, by applying <code>key<\/code> and <code>value<\/code> respectively.<\/p>\n<p>The keys of the key\/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.<\/p>\n<p>If no values are specified for <code>key<\/code> and <code>value<\/code> the default is the\nidentity function.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [
                {
                    "name": "iterable",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "element",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.fromIterable.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.fromIterable(Iterable iterable,\n    {K key(element), V value(element)}) {\n  LinkedHashMap&lt;K, V&gt; map = LinkedHashMap&lt;K, V&gt;();\n  MapBase._fillMapWithMappedIterable(map, iterable, key, value);\n  return map;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashMap.fromIterables",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> associating the given <code>keys<\/code> to <code>values<\/code>.<\/p>\n<p>This constructor iterates over <code>keys<\/code> and <code>values<\/code> and maps each element of\n<code>keys<\/code> to the corresponding element of <code>values<\/code>.<\/p>\n<p>If <code>keys<\/code> contains the same object multiple times, the last occurrence\noverwrites the previous value.<\/p>\n<p>It is an error if the two <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>s don't have the same length.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [
                {
                    "name": "keys",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "values",
                    "type": "dart:core.Iterable",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.fromIterables.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.fromIterables(Iterable&lt;K&gt; keys, Iterable&lt;V&gt; values) {\n  LinkedHashMap&lt;K, V&gt; map = LinkedHashMap&lt;K, V&gt;();\n  MapBase._fillMapWithIterables(map, keys, values);\n  return map;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashMap.identity",
            "type": "",
            "desc": "<p>Creates an insertion-ordered identity-based map.<\/p>\n<p>Effectively a shorthand for:<\/p>\n<pre class=\"language-dart\"><code>new LinkedHashMap&lt;K, V&gt;(equals: identical,\n                        hashCode: identityHashCode)\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.identity.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory LinkedHashMap.identity();<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "LinkedHashMap.of",
            "type": "",
            "desc": "<p>Creates a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> that contains all key value pairs of <code>other<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:collection.LinkedHashMap",
            "sig": "",
            "params": [
                {
                    "name": "other",
                    "type": "dart:core.Map",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": true,
            "href": "dart-collection\/LinkedHashMap\/LinkedHashMap.of.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedHashMap.of(Map&lt;K, V&gt; other) =&gt;\n    LinkedHashMap&lt;K, V&gt;()..addAll(other);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "props": [],
    "isMixin": false,
    "isEnum": false,
    "isTypedef": false,
    "isConstant": false,
    "isAbstract": true,
    "implementors": [],
    "realImplementors": [],
    "cn": [],
    "href": "dart-collection\/LinkedHashMap-class.html",
    "desc": "<p>A hash-table based implementation of <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n<p>The insertion order of keys is remembered,\nand keys are iterated in the order they were inserted into the map.\nValues are iterated in their corresponding key's order.\nChanging a key's value, when the key is already in the map,\ndoes not change the iteration order,\nbut removing the key and adding it again\nwill make it be last in the iteration order.<\/p>\n<p>The keys of a <code>LinkedHashMap<\/code> must have consistent <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>\nand <a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementations. This means that the <code>==<\/code> operator\nmust define a stable equivalence relation on the keys (reflexive,\nsymmetric, transitive, and consistent over time), and that <code>hashCode<\/code>\nmust be the same for objects that are considered equal by <code>==<\/code>.<\/p>\n<p>The map allows <code>null<\/code> as a key.<\/p>\n    ",
    "example": "",
    "isDeprecated": false,
    "dtype": "class",
    "shortname": "LinkedHashMap"
}