{
    "desc": "<p>An animation with a value of type <code>T<\/code>.<\/p>\n<p>An animation consists of a value (of type <code>T<\/code>) together with a status. The\nstatus indicates whether the animation is conceptually running from\nbeginning to end or from the end back to the beginning, although the actual\nvalue of the animation might not change monotonically (e.g., if the\nanimation uses a curve that bounces).<\/p>\n<p>Animations also let other objects listen for changes to either their value\nor their status. These callbacks are called during the \"animation\" phase of\nthe pipeline, just prior to rebuilding widgets.<\/p>\n<p>To create a new animation that you can run forward and backward, consider\nusing <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"animation\/Tween-class.html\">Tween<\/a>, which can be used to create <a href=\"animation\/Animation-class.html\">Animation<\/a> subclasses that\nconvert <code>Animation&lt;double&gt;<\/code>s into other kinds of <code>Animation<\/code>s.<\/li><\/ul>",
    "dtype": "class",
    "example": "",
    "href": "animation\/Animation-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "animation",
    "name": "animation.Animation",
    "shortname": "Animation",
    "extends": [
        "foundation.Listenable",
        "dart:core.Object"
    ],
    "realImplementors": [
        "animation.AlwaysStoppedAnimation",
        "animation.AnimationController",
        "animation.AnimationMax",
        "animation.AnimationMean",
        "animation.AnimationMin",
        "animation.CurvedAnimation",
        "animation.ProxyAnimation",
        "animation.ReverseAnimation",
        "animation.TrainHoppingAnimation"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Animation();<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/Animation.html",
            "isDeprecated": false,
            "type": "",
            "name": "Animation",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "animation.Animation",
            "params": []
        },
        {
            "desc": "<p>Calls the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/Animation\/removeListener.html\">removeListener<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(VoidCallback listener);<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/addListener.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addListener",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": [
                {
                    "name": "listener",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Calls listener every time the status of the animation changes.<\/p>\n<p>Listeners can be removed with <a href=\"animation\/Animation\/removeStatusListener.html\">removeStatusListener<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addStatusListener(AnimationStatusListener listener);<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/addStatusListener.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addStatusListener",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": [
                {
                    "name": "listener",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.AnimationStatusListener"
                }
            ]
        },
        {
            "desc": "<p>Chains a <a href=\"animation\/Tween-class.html\">Tween<\/a> (or <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a>) to this <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/p>\n<p>This method is only valid for <code>Animation&lt;double&gt;<\/code> instances (i.e. when <code>T<\/code>\nis <code>double<\/code>). This means, for instance, that it can be called on\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> objects, as well as <a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>s,\n<a href=\"animation\/ProxyAnimation-class.html\">ProxyAnimation<\/a>s, <a href=\"animation\/ReverseAnimation-class.html\">ReverseAnimation<\/a>s, <a href=\"animation\/TrainHoppingAnimation-class.html\">TrainHoppingAnimation<\/a>s, etc.<\/p>\n<p>It returns an <a href=\"animation\/Animation-class.html\">Animation<\/a> specialized to the same type, <code>U<\/code>, as the\nargument to the method (<code>child<\/code>), whose value is derived by applying the\ngiven <a href=\"animation\/Tween-class.html\">Tween<\/a> to the value of this <a href=\"animation\/Animation-class.html\">Animation<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nGiven an <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a> <code>_controller<\/code>, the following code creates\nan <code>Animation&lt;Alignment&gt;<\/code> that swings from top left to top right as the\ncontroller goes from 0.0 to 1.0:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Animation&lt;Alignment&gt; _alignment1 = _controller.drive(\n  AlignmentTween(\n    begin: Alignment.topLeft,\n    end: Alignment.topRight,\n  ),\n);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe <code>_alignment.value<\/code> could then be used in a widget's build method, for\ninstance, to position a child using an <a href=\"widgets\/Align-class.html\">Align<\/a> widget such that the\nposition of the child shifts over time from the top left to the top right.\n<p>It is common to ease this kind of curve, e.g. making the transition slower\nat the start and faster at the end. The following snippet shows one way to\nchain the alignment tween in the previous example to an easing curve (in\nthis case, <a href=\"animation\/Curves\/easeIn-constant.html\">Curves.easeIn<\/a>). In this example, the tween is created\nelsewhere as a variable that can be reused, since none of its arguments\nvary.\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">final Animatable&lt;Alignment&gt; _tween = AlignmentTween(begin: Alignment.topLeft, end: Alignment.topRight)\n  .chain(CurveTween(curve: Curves.easeIn));\n\/\/ ...\nAnimation&lt;Alignment&gt; _alignment2 = _controller.drive(_tween);<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code is exactly equivalent, and is typically clearer when\nthe tweens are created inline, as might be preferred when the tweens have\nvalues that depend on other variables:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Animation&lt;Alignment&gt; _alignment3 = _controller\n  .drive(CurveTween(curve: Curves.easeIn))\n  .drive(AlignmentTween(\n    begin: Alignment.topLeft,\n    end: Alignment.topRight,\n  ));<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"animation\/Animatable\/animate.html\">Animatable.animate<\/a>, which does the same thing.<\/li>\n<li>\n<a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>, which is usually used to drive animations.<\/li>\n<li>\n<a href=\"animation\/CurvedAnimation-class.html\">CurvedAnimation<\/a>, an alternative to <a href=\"animation\/CurveTween-class.html\">CurveTween<\/a> for applying easing\ncurves, which supports distinct curves in the forward direction and the\nreverse direction.<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@optionalTypeArgs\nAnimation&lt;U&gt; drive&lt;U&gt;(Animatable&lt;U&gt; child) {\n  assert(this is Animation&lt;double&gt;);\n  return child.animate(this as dynamic); \/\/ TODO(ianh): Clean this once https:\/\/github.com\/dart-lang\/sdk\/issues\/32120 is fixed.\n}<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/drive.html",
            "isDeprecated": false,
            "type": "animation.Animation",
            "name": "drive",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": [
                {
                    "name": "child",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.Animatable"
                }
            ]
        },
        {
            "desc": "<p>Stop calling the listener every time the value of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/Animation\/addListener.html\">addListener<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(VoidCallback listener);<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/removeListener.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeListener",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": [
                {
                    "name": "listener",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:ui.VoidCallback"
                }
            ]
        },
        {
            "desc": "<p>Stops calling the listener every time the status of the animation changes.<\/p>\n<p>Listeners can be added with <a href=\"animation\/Animation\/addStatusListener.html\">addStatusListener<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeStatusListener(AnimationStatusListener listener);<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/removeStatusListener.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "removeStatusListener",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": [
                {
                    "name": "listener",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "animation.AnimationStatusListener"
                }
            ]
        },
        {
            "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '${describeIdentity(this)}(${toStringDetails()})';\n}<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/toString.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toString",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": []
        },
        {
            "desc": "<p>Provides a string describing the status of this object, but not including\ninformation about the object itself.<\/p>\n<p>This function is used by <a href=\"animation\/Animation\/toString.html\">Animation.toString<\/a> so that <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses can provide additional details while ensuring all <a href=\"animation\/Animation-class.html\">Animation<\/a>\nsubclasses have a consistent <a href=\"animation\/Animation\/toString.html\">toString<\/a> style.<\/p>\n<p>The result of this function includes an icon describing the status of this\n<a href=\"animation\/Animation-class.html\">Animation<\/a> object:<\/p>\n<ul>\n<li>\"\u25b6\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.forward<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> increasing)<\/li>\n<li>\"\u25c0\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.reverse<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> decreasing)<\/li>\n<li>\"\u23ed\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.completed<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> == 1.0)<\/li>\n<li>\"\u23ee\": <a href=\"animation\/AnimationStatus-class.html\">AnimationStatus.dismissed<\/a> (<a href=\"animation\/Animation\/value.html\">value<\/a> == 0.0)<\/li>\n<\/ul>",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringDetails() {\n  assert(status != null);\n  String icon;\n  switch (status) {\n    case AnimationStatus.forward:\n      icon = '\\u25B6'; \/\/ &gt;\n      break;\n    case AnimationStatus.reverse:\n      icon = '\\u25C0'; \/\/ &lt;\n      break;\n    case AnimationStatus.completed:\n      icon = '\\u23ED'; \/\/ &gt;&gt;|\n      break;\n    case AnimationStatus.dismissed:\n      icon = '\\u23EE'; \/\/ |&lt;&lt;\n      break;\n  }\n  assert(icon != null);\n  return '$icon';\n}<\/code><\/pre>\n    ",
            "href": "animation\/Animation\/toStringDetails.html",
            "isDeprecated": false,
            "type": "dart:core.String",
            "name": "toStringDetails",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "animation.Animation",
            "params": []
        }
    ],
    "props": [
        {
            "desc": "<p>Whether this animation is stopped at the end.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCompleted =&gt; status == AnimationStatus.completed;<\/code><\/pre>\n        ",
            "href": "animation\/Animation\/isCompleted.html",
            "name": "isCompleted",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "animation.Animation",
            "params": []
        },
        {
            "desc": "<p>Whether this animation is stopped at the beginning.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isDismissed =&gt; status == AnimationStatus.dismissed;<\/code><\/pre>\n        ",
            "href": "animation\/Animation\/isDismissed.html",
            "name": "isDismissed",
            "isDeprecated": false,
            "type": "dart:core.bool",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "animation.Animation",
            "params": []
        },
        {
            "desc": "<p>The current status of this animation.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AnimationStatus get status;<\/code><\/pre>\n        ",
            "href": "animation\/Animation\/status.html",
            "name": "status",
            "isDeprecated": false,
            "type": "animation.AnimationStatus",
            "dtype": "property",
            "isStatic": false,
            "isConstant": false,
            "memberOf": "animation.Animation",
            "params": []
        }
    ]
}