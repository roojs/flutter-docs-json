{
    "desc": "<p>This class provides a mixin for converters that need to accept String\ninputs.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "dart-convert\/StringConversionSinkMixin-class.html",
    "isAbstract": true,
    "isConstant": "0",
    "isDeprecated": false,
    "memberOf": "dart:convert",
    "name": "dart:convert.StringConversionSinkMixin",
    "shortname": "StringConversionSinkMixin",
    "extends": [],
    "is_enum": false,
    "is_mixin": false,
    "realImplementors": [
        "convert.StringAccumulatorSink"
    ],
    "events": [],
    "methods": [
        {
            "desc": "",
            "example": "",
            "href": "dart-convert\/StringConversionSinkMixin\/StringConversionSinkMixin.html",
            "isDeprecated": false,
            "type": "",
            "name": "StringConversionSinkMixin",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "dart:convert.StringConversionSinkMixin",
            "params": []
        },
        {
            "desc": "<p>Adds chunked data to this sink.<\/p>\n<p>This method is also used when converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(String str) {\n  addSlice(str, 0, str.length, false);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/StringConversionSinkMixin\/add.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "add",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.StringConversionSinkMixin",
            "params": [
                {
                    "name": "str",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Adds the next <code>chunk<\/code> to <code>this<\/code>.<\/p>\n<p>Adds the substring defined by <code>start<\/code> and <code>end<\/code>-exclusive to <code>this<\/code>.<\/p>\n<p>If <code>isLast<\/code> is <code>true<\/code> closes <code>this<\/code>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addSlice(String str, int start, int end, bool isLast);<\/code><\/pre>\n    ",
            "href": "dart-convert\/StringConversionSinkMixin\/addSlice.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "addSlice",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.StringConversionSinkMixin",
            "params": [
                {
                    "name": "end",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "isLast",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                },
                {
                    "name": "start",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.int"
                },
                {
                    "name": "str",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.String"
                }
            ]
        },
        {
            "desc": "<p>Returns <code>this<\/code> as a <a href=\"dart-convert\/ClosableStringSink-class.html\">ClosableStringSink<\/a>.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ClosableStringSink asStringSink() {\n  return _StringConversionSinkAsStringSinkAdapter(this);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/StringConversionSinkMixin\/asStringSink.html",
            "isDeprecated": false,
            "type": "dart:convert.ClosableStringSink",
            "name": "asStringSink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.StringConversionSinkMixin",
            "params": []
        },
        {
            "desc": "<p>Returns <code>this<\/code> as a sink that accepts UTF-8 input.<\/p>\n<p>If used, this method must be the first and only call to <code>this<\/code>. It\ninvalidates <code>this<\/code>. All further operations must be performed on the result.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink asUtf8Sink(bool allowMalformed) {\n  return _Utf8ConversionSink(this, allowMalformed);\n}<\/code><\/pre>\n    ",
            "href": "dart-convert\/StringConversionSinkMixin\/asUtf8Sink.html",
            "isDeprecated": false,
            "type": "dart:convert.ByteConversionSink",
            "name": "asUtf8Sink",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.StringConversionSinkMixin",
            "params": [
                {
                    "name": "allowMalformed",
                    "desc": "",
                    "example": "",
                    "href": "",
                    "isDeprecated": false,
                    "isOptional": false,
                    "type": "dart:core.bool"
                }
            ]
        },
        {
            "desc": "<p>Closes the sink.<\/p>\n<p>This signals the end of the chunked conversion. This method is called\nwhen converters are used as <a href=\"dart-async\/StreamTransformer-class.html\">StreamTransformer<\/a>'s.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
            "href": "dart-convert\/StringConversionSinkMixin\/close.html",
            "isDeprecated": false,
            "type": "<void>",
            "name": "close",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "dart:convert.StringConversionSinkMixin",
            "params": []
        }
    ],
    "props": []
}