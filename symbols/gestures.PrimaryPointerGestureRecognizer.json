{
    "desc": "<p>A base class for gesture recognizers that track a single primary pointer.<\/p>\n<p>Gestures based on this class will stop tracking the gesture if the primary\npointer travels beyond <a href=\"gestures\/PrimaryPointerGestureRecognizer\/preAcceptSlopTolerance.html\">preAcceptSlopTolerance<\/a> or <a href=\"gestures\/PrimaryPointerGestureRecognizer\/postAcceptSlopTolerance.html\">postAcceptSlopTolerance<\/a>\npixels from the original contact point of the gesture.<\/p>\n<p>If the <a href=\"gestures\/PrimaryPointerGestureRecognizer\/preAcceptSlopTolerance.html\">preAcceptSlopTolerance<\/a> was breached before the gesture was accepted\nin the gesture arena, the gesture will be rejected.<\/p>\n    ",
    "dtype": "class",
    "example": "",
    "href": "gestures\/PrimaryPointerGestureRecognizer-class.html",
    "isAbstract": "1",
    "isConstant": "0",
    "isDeprecated": "0",
    "is_enum": 1,
    "is_mixin": 1,
    "is_typedef": 1,
    "memberOf": "gestures",
    "name": "gestures.PrimaryPointerGestureRecognizer",
    "shortname": "PrimaryPointerGestureRecognizer",
    "extends": [
        "gestures.OneSequenceGestureRecognizer",
        "gestures.GestureRecognizer",
        "gestures.GestureArenaMember",
        "dart:core.Object"
    ],
    "realImplementors": [
        "gestures.LongPressGestureRecognizer",
        "gestures.TapGestureRecognizer"
    ],
    "events": [],
    "methods": [
        {
            "desc": "<p>Initializes the <code>deadline<\/code> field during construction of subclasses.<\/p>\n<p>It's possible to limit this recognizer to a specific <a href=\"dart-ui\/PointerDeviceKind-class.html\">PointerDeviceKind<\/a>\nby providing the optional <code>kind<\/code> argument. If <code>kind<\/code> is null,\nthe recognizer will accept pointer events from all device kinds.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PrimaryPointerGestureRecognizer({\n  this.deadline,\n  this.preAcceptSlopTolerance = kTouchSlop,\n  this.postAcceptSlopTolerance = kTouchSlop,\n  Object debugOwner,\n  PointerDeviceKind kind,\n}) : assert(\n       preAcceptSlopTolerance == null || preAcceptSlopTolerance &gt;= 0,\n       'The preAcceptSlopTolerance must be positive or null',\n     ),\n     assert(\n       postAcceptSlopTolerance == null || postAcceptSlopTolerance &gt;= 0,\n       'The postAcceptSlopTolerance must be positive or null',\n     ),\n     super(debugOwner: debugOwner, kind: kind);<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/PrimaryPointerGestureRecognizer.html",
            "isDeprecated": "0",
            "type": "",
            "dtype": "constructor",
            "isConstructor": true,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "deadline",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Duration"
                },
                {
                    "name": "debugOwner",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.Object"
                },
                {
                    "name": "kind",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:ui.PointerDeviceKind"
                },
                {
                    "name": "postAcceptSlopTolerance",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                },
                {
                    "name": "preAcceptSlopTolerance",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": true,
                    "type": "dart:core.double"
                }
            ]
        },
        {
            "desc": "<p>Called when this member wins the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid acceptGesture(int pointer) {\n  _gestureAccepted = true;\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/acceptGesture.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Registers a new pointer that's been checked to be allowed by this gesture\nrecognizer.<\/p>\n<p>Subclasses of <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> are supposed to override this method\ninstead of <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> because <a href=\"gestures\/GestureRecognizer\/addPointer.html\">addPointer<\/a> will be called for each\npointer being added while <a href=\"gestures\/PrimaryPointerGestureRecognizer\/addAllowedPointer.html\">addAllowedPointer<\/a> is only called for pointers\nthat are allowed by this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAllowedPointer(PointerDownEvent event) {\n  startTrackingPointer(event.pointer);\n  if (state == GestureRecognizerState.ready) {\n    state = GestureRecognizerState.possible;\n    primaryPointer = event.pointer;\n    initialPosition = event.position;\n    if (deadline != null)\n      _timer = Timer(deadline, didExceedDeadline);\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/addAllowedPointer.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerDownEvent"
                }
            ]
        },
        {
            "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"gestures\/PrimaryPointerGestureRecognizer\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTreeMixin\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(EnumProperty&lt;GestureRecognizerState&gt;('state', state));\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/debugFillProperties.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "properties",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "foundation.DiagnosticPropertiesBuilder"
                }
            ]
        },
        {
            "desc": "<p>Override to be notified when <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a> is exceeded.<\/p>\n<p>You must override this method if you supply a <a href=\"gestures\/PrimaryPointerGestureRecognizer\/deadline.html\">deadline<\/a>.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid didExceedDeadline() {\n  assert(deadline == null);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/didExceedDeadline.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Called when the number of pointers this recognizer is tracking changes from one to zero.<\/p>\n<p>The given pointer ID is the ID of the last pointer this recognizer was\ntracking.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didStopTrackingLastPointer(int pointer) {\n  assert(state != GestureRecognizerState.ready);\n  _stopTimer();\n  state = GestureRecognizerState.ready;\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/didStopTrackingLastPointer.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        },
        {
            "desc": "<p>Releases any resources used by the object.<\/p>\n<p>This method is called by the owner of this gesture recognizer\nwhen the object is no longer needed (e.g. when a gesture\nrecognizer is being unregistered from a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a>, the\nGestureDetector widget calls this method).<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _stopTimer();\n  super.dispose();\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/dispose.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>Called when a pointer event is routed to this recognizer.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid handleEvent(PointerEvent event) {\n  assert(state != GestureRecognizerState.ready);\n  if (state == GestureRecognizerState.possible &amp;&amp; event.pointer == primaryPointer) {\n    final bool isPreAcceptSlopPastTolerance =\n        !_gestureAccepted &amp;&amp;\n        preAcceptSlopTolerance != null &amp;&amp;\n        _getDistance(event) &gt; preAcceptSlopTolerance;\n    final bool isPostAcceptSlopPastTolerance =\n        _gestureAccepted &amp;&amp;\n        postAcceptSlopTolerance != null &amp;&amp;\n        _getDistance(event) &gt; postAcceptSlopTolerance;\n\n    if (event is PointerMoveEvent &amp;&amp; (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {\n      resolve(GestureDisposition.rejected);\n      stopTrackingPointer(primaryPointer);\n    } else {\n      handlePrimaryPointer(event);\n    }\n  }\n  stopTrackingIfPointerNoLongerDown(event);\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/handleEvent.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Override to provide behavior for the primary pointer when the gesture is still possible.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid handlePrimaryPointer(PointerEvent event);<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/handlePrimaryPointer.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "event",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "gestures.PointerEvent"
                }
            ]
        },
        {
            "desc": "<p>Called when this member loses the arena for the given pointer id.<\/p>\n    ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid rejectGesture(int pointer) {\n  if (pointer == primaryPointer &amp;&amp; state == GestureRecognizerState.possible) {\n    _stopTimer();\n    state = GestureRecognizerState.defunct;\n  }\n}<\/code><\/pre>\n    ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/rejectGesture.html",
            "isDeprecated": "0",
            "type": "<void>",
            "dtype": "method",
            "isConstructor": false,
            "static": false,
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": [
                {
                    "name": "pointer",
                    "desc": null,
                    "example": "",
                    "href": "",
                    "isDeprecated": "0",
                    "isOptional": false,
                    "type": "dart:core.int"
                }
            ]
        }
    ],
    "props": [
        {
            "desc": "<p>If non-null, the recognizer will call <a href=\"gestures\/PrimaryPointerGestureRecognizer\/didExceedDeadline.html\">didExceedDeadline<\/a> after this\namount of time has elapsed since starting to track the primary pointer.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration deadline\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/deadline.html",
            "isDeprecated": "0",
            "type": "dart:core.Duration",
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The global location at which the primary pointer contacted the screen.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset initialPosition\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/initialPosition.html",
            "isDeprecated": "0",
            "type": "dart:ui.Offset",
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The maximum distance in logical pixels the gesture is allowed to drift\nafter the gesture has been accepted.<\/p>\n<p>Drifting past the allowed slop amount causes the gesture to stop tracking\nand signaling subsequent callbacks.<\/p>\n<p>Can be null to indicate that the gesture can drift for any distance.\nDefaults to 18 logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double postAcceptSlopTolerance\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/postAcceptSlopTolerance.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The maximum distance in logical pixels the gesture is allowed to drift\nfrom the initial touch down position before the gesture is accepted.<\/p>\n<p>Drifting past the allowed slop amount causes the gesture to be rejected.<\/p>\n<p>Can be null to indicate that the gesture can drift for any distance.\nDefaults to 18 logical pixels.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double preAcceptSlopTolerance\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/preAcceptSlopTolerance.html",
            "isDeprecated": "0",
            "type": "dart:core.double",
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The ID of the primary pointer this recognizer is tracking.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int primaryPointer\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/primaryPointer.html",
            "isDeprecated": "0",
            "type": "dart:core.int",
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        },
        {
            "desc": "<p>The current state of the recognizer.<\/p>\n<p>See <a href=\"gestures\/GestureRecognizerState-class.html\">GestureRecognizerState<\/a> for a description of the states.<\/p>\n        ",
            "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">GestureRecognizerState state = GestureRecognizerState.ready\n\n<\/code><\/pre>\n        ",
            "href": "gestures\/PrimaryPointerGestureRecognizer\/state.html",
            "isDeprecated": "0",
            "type": "gestures.GestureRecognizerState",
            "memberOf": "gestures.PrimaryPointerGestureRecognizer",
            "params": []
        }
    ]
}